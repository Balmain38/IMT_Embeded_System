
Projet_Final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007af4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000168  08007cc4  08007cc4  00017cc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007e2c  08007e2c  00020130  2**0
                  CONTENTS
  4 .ARM          00000008  08007e2c  08007e2c  00017e2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007e34  08007e34  00020130  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007e34  08007e34  00017e34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007e38  08007e38  00017e38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000130  20000000  08007e3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004ad0  20000130  08007f6c  00020130  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004c00  08007f6c  00024c00  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020130  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c042  00000000  00000000  00020160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004198  00000000  00000000  0003c1a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001738  00000000  00000000  00040340  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001580  00000000  00000000  00041a78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019071  00000000  00000000  00042ff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b142  00000000  00000000  0005c069  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00097550  00000000  00000000  000771ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010e6fb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006894  00000000  00000000  0010e74c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000024  00000000  00000000  00114fe0  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000004e  00000000  00000000  00115004  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000130 	.word	0x20000130
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007cac 	.word	0x08007cac

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000134 	.word	0x20000134
 800020c:	08007cac 	.word	0x08007cac

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b084      	sub	sp, #16
 80005b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005ba:	463b      	mov	r3, r7
 80005bc:	2200      	movs	r2, #0
 80005be:	601a      	str	r2, [r3, #0]
 80005c0:	605a      	str	r2, [r3, #4]
 80005c2:	609a      	str	r2, [r3, #8]
 80005c4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005c6:	4b21      	ldr	r3, [pc, #132]	; (800064c <MX_ADC1_Init+0x98>)
 80005c8:	4a21      	ldr	r2, [pc, #132]	; (8000650 <MX_ADC1_Init+0x9c>)
 80005ca:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005cc:	4b1f      	ldr	r3, [pc, #124]	; (800064c <MX_ADC1_Init+0x98>)
 80005ce:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80005d2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005d4:	4b1d      	ldr	r3, [pc, #116]	; (800064c <MX_ADC1_Init+0x98>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80005da:	4b1c      	ldr	r3, [pc, #112]	; (800064c <MX_ADC1_Init+0x98>)
 80005dc:	2200      	movs	r2, #0
 80005de:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005e0:	4b1a      	ldr	r3, [pc, #104]	; (800064c <MX_ADC1_Init+0x98>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005e6:	4b19      	ldr	r3, [pc, #100]	; (800064c <MX_ADC1_Init+0x98>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005ee:	4b17      	ldr	r3, [pc, #92]	; (800064c <MX_ADC1_Init+0x98>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005f4:	4b15      	ldr	r3, [pc, #84]	; (800064c <MX_ADC1_Init+0x98>)
 80005f6:	4a17      	ldr	r2, [pc, #92]	; (8000654 <MX_ADC1_Init+0xa0>)
 80005f8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005fa:	4b14      	ldr	r3, [pc, #80]	; (800064c <MX_ADC1_Init+0x98>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000600:	4b12      	ldr	r3, [pc, #72]	; (800064c <MX_ADC1_Init+0x98>)
 8000602:	2201      	movs	r2, #1
 8000604:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000606:	4b11      	ldr	r3, [pc, #68]	; (800064c <MX_ADC1_Init+0x98>)
 8000608:	2200      	movs	r2, #0
 800060a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800060e:	4b0f      	ldr	r3, [pc, #60]	; (800064c <MX_ADC1_Init+0x98>)
 8000610:	2201      	movs	r2, #1
 8000612:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000614:	480d      	ldr	r0, [pc, #52]	; (800064c <MX_ADC1_Init+0x98>)
 8000616:	f000 fec3 	bl	80013a0 <HAL_ADC_Init>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000620:	f000 f980 	bl	8000924 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000624:	2300      	movs	r3, #0
 8000626:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000628:	2301      	movs	r3, #1
 800062a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800062c:	2300      	movs	r3, #0
 800062e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000630:	463b      	mov	r3, r7
 8000632:	4619      	mov	r1, r3
 8000634:	4805      	ldr	r0, [pc, #20]	; (800064c <MX_ADC1_Init+0x98>)
 8000636:	f001 f843 	bl	80016c0 <HAL_ADC_ConfigChannel>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000640:	f000 f970 	bl	8000924 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000644:	bf00      	nop
 8000646:	3710      	adds	r7, #16
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	2000014c 	.word	0x2000014c
 8000650:	40012000 	.word	0x40012000
 8000654:	0f000001 	.word	0x0f000001

08000658 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b08a      	sub	sp, #40	; 0x28
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000660:	f107 0314 	add.w	r3, r7, #20
 8000664:	2200      	movs	r2, #0
 8000666:	601a      	str	r2, [r3, #0]
 8000668:	605a      	str	r2, [r3, #4]
 800066a:	609a      	str	r2, [r3, #8]
 800066c:	60da      	str	r2, [r3, #12]
 800066e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	4a17      	ldr	r2, [pc, #92]	; (80006d4 <HAL_ADC_MspInit+0x7c>)
 8000676:	4293      	cmp	r3, r2
 8000678:	d127      	bne.n	80006ca <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800067a:	2300      	movs	r3, #0
 800067c:	613b      	str	r3, [r7, #16]
 800067e:	4b16      	ldr	r3, [pc, #88]	; (80006d8 <HAL_ADC_MspInit+0x80>)
 8000680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000682:	4a15      	ldr	r2, [pc, #84]	; (80006d8 <HAL_ADC_MspInit+0x80>)
 8000684:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000688:	6453      	str	r3, [r2, #68]	; 0x44
 800068a:	4b13      	ldr	r3, [pc, #76]	; (80006d8 <HAL_ADC_MspInit+0x80>)
 800068c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800068e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000692:	613b      	str	r3, [r7, #16]
 8000694:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000696:	2300      	movs	r3, #0
 8000698:	60fb      	str	r3, [r7, #12]
 800069a:	4b0f      	ldr	r3, [pc, #60]	; (80006d8 <HAL_ADC_MspInit+0x80>)
 800069c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069e:	4a0e      	ldr	r2, [pc, #56]	; (80006d8 <HAL_ADC_MspInit+0x80>)
 80006a0:	f043 0301 	orr.w	r3, r3, #1
 80006a4:	6313      	str	r3, [r2, #48]	; 0x30
 80006a6:	4b0c      	ldr	r3, [pc, #48]	; (80006d8 <HAL_ADC_MspInit+0x80>)
 80006a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006aa:	f003 0301 	and.w	r3, r3, #1
 80006ae:	60fb      	str	r3, [r7, #12]
 80006b0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = ANA_SENSOR_1_Pin;
 80006b2:	2301      	movs	r3, #1
 80006b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006b6:	2303      	movs	r3, #3
 80006b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ba:	2300      	movs	r3, #0
 80006bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ANA_SENSOR_1_GPIO_Port, &GPIO_InitStruct);
 80006be:	f107 0314 	add.w	r3, r7, #20
 80006c2:	4619      	mov	r1, r3
 80006c4:	4805      	ldr	r0, [pc, #20]	; (80006dc <HAL_ADC_MspInit+0x84>)
 80006c6:	f001 fafb 	bl	8001cc0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006ca:	bf00      	nop
 80006cc:	3728      	adds	r7, #40	; 0x28
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	40012000 	.word	0x40012000
 80006d8:	40023800 	.word	0x40023800
 80006dc:	40020000 	.word	0x40020000

080006e0 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b088      	sub	sp, #32
 80006e4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e6:	f107 030c 	add.w	r3, r7, #12
 80006ea:	2200      	movs	r2, #0
 80006ec:	601a      	str	r2, [r3, #0]
 80006ee:	605a      	str	r2, [r3, #4]
 80006f0:	609a      	str	r2, [r3, #8]
 80006f2:	60da      	str	r2, [r3, #12]
 80006f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006f6:	2300      	movs	r3, #0
 80006f8:	60bb      	str	r3, [r7, #8]
 80006fa:	4b45      	ldr	r3, [pc, #276]	; (8000810 <MX_GPIO_Init+0x130>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fe:	4a44      	ldr	r2, [pc, #272]	; (8000810 <MX_GPIO_Init+0x130>)
 8000700:	f043 0304 	orr.w	r3, r3, #4
 8000704:	6313      	str	r3, [r2, #48]	; 0x30
 8000706:	4b42      	ldr	r3, [pc, #264]	; (8000810 <MX_GPIO_Init+0x130>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070a:	f003 0304 	and.w	r3, r3, #4
 800070e:	60bb      	str	r3, [r7, #8]
 8000710:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000712:	2300      	movs	r3, #0
 8000714:	607b      	str	r3, [r7, #4]
 8000716:	4b3e      	ldr	r3, [pc, #248]	; (8000810 <MX_GPIO_Init+0x130>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	4a3d      	ldr	r2, [pc, #244]	; (8000810 <MX_GPIO_Init+0x130>)
 800071c:	f043 0301 	orr.w	r3, r3, #1
 8000720:	6313      	str	r3, [r2, #48]	; 0x30
 8000722:	4b3b      	ldr	r3, [pc, #236]	; (8000810 <MX_GPIO_Init+0x130>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	f003 0301 	and.w	r3, r3, #1
 800072a:	607b      	str	r3, [r7, #4]
 800072c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800072e:	2300      	movs	r3, #0
 8000730:	603b      	str	r3, [r7, #0]
 8000732:	4b37      	ldr	r3, [pc, #220]	; (8000810 <MX_GPIO_Init+0x130>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	4a36      	ldr	r2, [pc, #216]	; (8000810 <MX_GPIO_Init+0x130>)
 8000738:	f043 0302 	orr.w	r3, r3, #2
 800073c:	6313      	str	r3, [r2, #48]	; 0x30
 800073e:	4b34      	ldr	r3, [pc, #208]	; (8000810 <MX_GPIO_Init+0x130>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	f003 0302 	and.w	r3, r3, #2
 8000746:	603b      	str	r3, [r7, #0]
 8000748:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_SENSOR_3_Pin|LED_SENSOR_2_Pin|LED_FREQ_SEND_DATA_Pin, GPIO_PIN_RESET);
 800074a:	2200      	movs	r2, #0
 800074c:	2183      	movs	r1, #131	; 0x83
 800074e:	4831      	ldr	r0, [pc, #196]	; (8000814 <MX_GPIO_Init+0x134>)
 8000750:	f001 fc2a 	bl	8001fa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_SENSOR_1_GPIO_Port, LED_SENSOR_1_Pin, GPIO_PIN_RESET);
 8000754:	2200      	movs	r2, #0
 8000756:	2101      	movs	r1, #1
 8000758:	482f      	ldr	r0, [pc, #188]	; (8000818 <MX_GPIO_Init+0x138>)
 800075a:	f001 fc25 	bl	8001fa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_SEND_DATA_Pin;
 800075e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000762:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000764:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000768:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076a:	2300      	movs	r3, #0
 800076c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BTN_SEND_DATA_GPIO_Port, &GPIO_InitStruct);
 800076e:	f107 030c 	add.w	r3, r7, #12
 8000772:	4619      	mov	r1, r3
 8000774:	4827      	ldr	r0, [pc, #156]	; (8000814 <MX_GPIO_Init+0x134>)
 8000776:	f001 faa3 	bl	8001cc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LED_SENSOR_3_Pin|LED_SENSOR_2_Pin|LED_FREQ_SEND_DATA_Pin;
 800077a:	2383      	movs	r3, #131	; 0x83
 800077c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800077e:	2301      	movs	r3, #1
 8000780:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000782:	2300      	movs	r3, #0
 8000784:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000786:	2300      	movs	r3, #0
 8000788:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800078a:	f107 030c 	add.w	r3, r7, #12
 800078e:	4619      	mov	r1, r3
 8000790:	4820      	ldr	r0, [pc, #128]	; (8000814 <MX_GPIO_Init+0x134>)
 8000792:	f001 fa95 	bl	8001cc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = BTN_PLUS_Pin|BTN_SELECT_Pin;
 8000796:	f240 4302 	movw	r3, #1026	; 0x402
 800079a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800079c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80007a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a2:	2300      	movs	r3, #0
 80007a4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007a6:	f107 030c 	add.w	r3, r7, #12
 80007aa:	4619      	mov	r1, r3
 80007ac:	481b      	ldr	r0, [pc, #108]	; (800081c <MX_GPIO_Init+0x13c>)
 80007ae:	f001 fa87 	bl	8001cc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_MINUS_Pin;
 80007b2:	2320      	movs	r3, #32
 80007b4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007b6:	2300      	movs	r3, #0
 80007b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ba:	2300      	movs	r3, #0
 80007bc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BTN_MINUS_GPIO_Port, &GPIO_InitStruct);
 80007be:	f107 030c 	add.w	r3, r7, #12
 80007c2:	4619      	mov	r1, r3
 80007c4:	4815      	ldr	r0, [pc, #84]	; (800081c <MX_GPIO_Init+0x13c>)
 80007c6:	f001 fa7b 	bl	8001cc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_SENSOR_1_Pin;
 80007ca:	2301      	movs	r3, #1
 80007cc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ce:	2301      	movs	r3, #1
 80007d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d2:	2300      	movs	r3, #0
 80007d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d6:	2300      	movs	r3, #0
 80007d8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_SENSOR_1_GPIO_Port, &GPIO_InitStruct);
 80007da:	f107 030c 	add.w	r3, r7, #12
 80007de:	4619      	mov	r1, r3
 80007e0:	480d      	ldr	r0, [pc, #52]	; (8000818 <MX_GPIO_Init+0x138>)
 80007e2:	f001 fa6d 	bl	8001cc0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 80007e6:	2200      	movs	r2, #0
 80007e8:	2105      	movs	r1, #5
 80007ea:	2007      	movs	r0, #7
 80007ec:	f001 fa3e 	bl	8001c6c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80007f0:	2007      	movs	r0, #7
 80007f2:	f001 fa57 	bl	8001ca4 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80007f6:	2200      	movs	r2, #0
 80007f8:	2105      	movs	r1, #5
 80007fa:	2028      	movs	r0, #40	; 0x28
 80007fc:	f001 fa36 	bl	8001c6c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000800:	2028      	movs	r0, #40	; 0x28
 8000802:	f001 fa4f 	bl	8001ca4 <HAL_NVIC_EnableIRQ>

}
 8000806:	bf00      	nop
 8000808:	3720      	adds	r7, #32
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	40023800 	.word	0x40023800
 8000814:	40020800 	.word	0x40020800
 8000818:	40020400 	.word	0x40020400
 800081c:	40020000 	.word	0x40020000

08000820 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b094      	sub	sp, #80	; 0x50
 8000824:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000826:	f107 031c 	add.w	r3, r7, #28
 800082a:	2234      	movs	r2, #52	; 0x34
 800082c:	2100      	movs	r1, #0
 800082e:	4618      	mov	r0, r3
 8000830:	f006 fa2e 	bl	8006c90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000834:	f107 0308 	add.w	r3, r7, #8
 8000838:	2200      	movs	r2, #0
 800083a:	601a      	str	r2, [r3, #0]
 800083c:	605a      	str	r2, [r3, #4]
 800083e:	609a      	str	r2, [r3, #8]
 8000840:	60da      	str	r2, [r3, #12]
 8000842:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000844:	2300      	movs	r3, #0
 8000846:	607b      	str	r3, [r7, #4]
 8000848:	4b29      	ldr	r3, [pc, #164]	; (80008f0 <SystemClock_Config+0xd0>)
 800084a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800084c:	4a28      	ldr	r2, [pc, #160]	; (80008f0 <SystemClock_Config+0xd0>)
 800084e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000852:	6413      	str	r3, [r2, #64]	; 0x40
 8000854:	4b26      	ldr	r3, [pc, #152]	; (80008f0 <SystemClock_Config+0xd0>)
 8000856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000858:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800085c:	607b      	str	r3, [r7, #4]
 800085e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000860:	2300      	movs	r3, #0
 8000862:	603b      	str	r3, [r7, #0]
 8000864:	4b23      	ldr	r3, [pc, #140]	; (80008f4 <SystemClock_Config+0xd4>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4a22      	ldr	r2, [pc, #136]	; (80008f4 <SystemClock_Config+0xd4>)
 800086a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800086e:	6013      	str	r3, [r2, #0]
 8000870:	4b20      	ldr	r3, [pc, #128]	; (80008f4 <SystemClock_Config+0xd4>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000878:	603b      	str	r3, [r7, #0]
 800087a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800087c:	2302      	movs	r3, #2
 800087e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000880:	2301      	movs	r3, #1
 8000882:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000884:	2310      	movs	r3, #16
 8000886:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000888:	2302      	movs	r3, #2
 800088a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800088c:	2300      	movs	r3, #0
 800088e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000890:	2310      	movs	r3, #16
 8000892:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000894:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000898:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800089a:	2304      	movs	r3, #4
 800089c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800089e:	2304      	movs	r3, #4
 80008a0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008a2:	2302      	movs	r3, #2
 80008a4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008a6:	f107 031c 	add.w	r3, r7, #28
 80008aa:	4618      	mov	r0, r3
 80008ac:	f001 fe00 	bl	80024b0 <HAL_RCC_OscConfig>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80008b6:	f000 f835 	bl	8000924 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008ba:	230f      	movs	r3, #15
 80008bc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008be:	2302      	movs	r3, #2
 80008c0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008c2:	2300      	movs	r3, #0
 80008c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008cc:	2300      	movs	r3, #0
 80008ce:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008d0:	f107 0308 	add.w	r3, r7, #8
 80008d4:	2102      	movs	r1, #2
 80008d6:	4618      	mov	r0, r3
 80008d8:	f001 fb98 	bl	800200c <HAL_RCC_ClockConfig>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80008e2:	f000 f81f 	bl	8000924 <Error_Handler>
  }
}
 80008e6:	bf00      	nop
 80008e8:	3750      	adds	r7, #80	; 0x50
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	40023800 	.word	0x40023800
 80008f4:	40007000 	.word	0x40007000

080008f8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	4a06      	ldr	r2, [pc, #24]	; (8000920 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000906:	4293      	cmp	r3, r2
 8000908:	d102      	bne.n	8000910 <HAL_TIM_PeriodElapsedCallback+0x18>
    HAL_IncTick();
 800090a:	f000 fd29 	bl	8001360 <HAL_IncTick>
  /* USER CODE BEGIN Callback 1 */
  else{
	  Callback_TIM_5(htim);
  }
  /* USER CODE END Callback 1 */
}
 800090e:	e002      	b.n	8000916 <HAL_TIM_PeriodElapsedCallback+0x1e>
	  Callback_TIM_5(htim);
 8000910:	6878      	ldr	r0, [r7, #4]
 8000912:	f000 f93b 	bl	8000b8c <Callback_TIM_5>
}
 8000916:	bf00      	nop
 8000918:	3708      	adds	r7, #8
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	40001000 	.word	0x40001000

08000924 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000928:	b672      	cpsid	i
}
 800092a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800092c:	e7fe      	b.n	800092c <Error_Handler+0x8>
	...

08000930 <_write>:
	.priority=osPriorityNormal, // le niveau est 8 (voir cmsis_os2.h)
	.stack_size=128*4 // Pile de 128 mots de 32 bits
};


int _write(int P_Flux, char* P_Message, int P_Taille) {
 8000930:	b580      	push	{r7, lr}
 8000932:	b086      	sub	sp, #24
 8000934:	af00      	add	r7, sp, #0
 8000936:	60f8      	str	r0, [r7, #12]
 8000938:	60b9      	str	r1, [r7, #8]
 800093a:	607a      	str	r2, [r7, #4]
	HAL_StatusTypeDef Etat = HAL_UART_Transmit(&huart2, (uint8_t *) P_Message, P_Taille, HAL_MAX_DELAY);
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	b29a      	uxth	r2, r3
 8000940:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000944:	68b9      	ldr	r1, [r7, #8]
 8000946:	4808      	ldr	r0, [pc, #32]	; (8000968 <_write+0x38>)
 8000948:	f002 fb43 	bl	8002fd2 <HAL_UART_Transmit>
 800094c:	4603      	mov	r3, r0
 800094e:	75fb      	strb	r3, [r7, #23]
	if (Etat == HAL_OK){ return P_Taille;}
 8000950:	7dfb      	ldrb	r3, [r7, #23]
 8000952:	2b00      	cmp	r3, #0
 8000954:	d101      	bne.n	800095a <_write+0x2a>
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	e001      	b.n	800095e <_write+0x2e>
	else{return -1;}
 800095a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800095e:	4618      	mov	r0, r3
 8000960:	3718      	adds	r7, #24
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	20000258 	.word	0x20000258

0800096c <Fonction_Thread_Sensor_1>:

void Fonction_Thread_Sensor_1(void* P_Info){
 800096c:	b580      	push	{r7, lr}
 800096e:	b086      	sub	sp, #24
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start(&hadc1);
 8000974:	481d      	ldr	r0, [pc, #116]	; (80009ec <Fonction_Thread_Sensor_1+0x80>)
 8000976:	f000 fd57 	bl	8001428 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1);
 800097a:	2101      	movs	r1, #1
 800097c:	481b      	ldr	r0, [pc, #108]	; (80009ec <Fonction_Thread_Sensor_1+0x80>)
 800097e:	f000 fe07 	bl	8001590 <HAL_ADC_PollForConversion>
	val_sensor_1 = HAL_ADC_GetValue(&hadc1);
 8000982:	481a      	ldr	r0, [pc, #104]	; (80009ec <Fonction_Thread_Sensor_1+0x80>)
 8000984:	f000 fe8f 	bl	80016a6 <HAL_ADC_GetValue>
 8000988:	4603      	mov	r3, r0
 800098a:	b29a      	uxth	r2, r3
 800098c:	4b18      	ldr	r3, [pc, #96]	; (80009f0 <Fonction_Thread_Sensor_1+0x84>)
 800098e:	801a      	strh	r2, [r3, #0]
	printf('Ici la street %d\n\r', val_sensor_1);
 8000990:	4b17      	ldr	r3, [pc, #92]	; (80009f0 <Fonction_Thread_Sensor_1+0x84>)
 8000992:	881b      	ldrh	r3, [r3, #0]
 8000994:	4619      	mov	r1, r3
 8000996:	4817      	ldr	r0, [pc, #92]	; (80009f4 <Fonction_Thread_Sensor_1+0x88>)
 8000998:	f006 f982 	bl	8006ca0 <iprintf>
	T_DATA Data={.Type=1};
 800099c:	f107 030c 	add.w	r3, r7, #12
 80009a0:	2200      	movs	r2, #0
 80009a2:	601a      	str	r2, [r3, #0]
 80009a4:	605a      	str	r2, [r3, #4]
 80009a6:	609a      	str	r2, [r3, #8]
 80009a8:	2301      	movs	r3, #1
 80009aa:	733b      	strb	r3, [r7, #12]
	while(1) {
		HAL_ADC_Start(&hadc1);
 80009ac:	480f      	ldr	r0, [pc, #60]	; (80009ec <Fonction_Thread_Sensor_1+0x80>)
 80009ae:	f000 fd3b 	bl	8001428 <HAL_ADC_Start>
		// Poll ADC1 Perihperal & TimeOut = 1mSec
		HAL_ADC_PollForConversion(&hadc1, 1);
 80009b2:	2101      	movs	r1, #1
 80009b4:	480d      	ldr	r0, [pc, #52]	; (80009ec <Fonction_Thread_Sensor_1+0x80>)
 80009b6:	f000 fdeb 	bl	8001590 <HAL_ADC_PollForConversion>
		Data.Timestamp = (uint32_t)(time(NULL));
 80009ba:	2000      	movs	r0, #0
 80009bc:	f006 f988 	bl	8006cd0 <time>
 80009c0:	4602      	mov	r2, r0
 80009c2:	460b      	mov	r3, r1
 80009c4:	4613      	mov	r3, r2
 80009c6:	617b      	str	r3, [r7, #20]
		Data.Value = val_sensor_1;
 80009c8:	4b09      	ldr	r3, [pc, #36]	; (80009f0 <Fonction_Thread_Sensor_1+0x84>)
 80009ca:	881b      	ldrh	r3, [r3, #0]
 80009cc:	613b      	str	r3, [r7, #16]
		osMessageQueuePut (Pipe_Reception_Analyse,(void*)&Data, 0, osWaitForever);
 80009ce:	4b0a      	ldr	r3, [pc, #40]	; (80009f8 <Fonction_Thread_Sensor_1+0x8c>)
 80009d0:	6818      	ldr	r0, [r3, #0]
 80009d2:	f107 010c 	add.w	r1, r7, #12
 80009d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80009da:	2200      	movs	r2, #0
 80009dc:	f003 f8ec 	bl	8003bb8 <osMessageQueuePut>
		osDelay(period_sensor_1);
 80009e0:	4b06      	ldr	r3, [pc, #24]	; (80009fc <Fonction_Thread_Sensor_1+0x90>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	4618      	mov	r0, r3
 80009e6:	f003 f858 	bl	8003a9a <osDelay>
		HAL_ADC_Start(&hadc1);
 80009ea:	e7df      	b.n	80009ac <Fonction_Thread_Sensor_1+0x40>
 80009ec:	2000014c 	.word	0x2000014c
 80009f0:	200001b0 	.word	0x200001b0
 80009f4:	25640a0d 	.word	0x25640a0d
 80009f8:	200001a8 	.word	0x200001a8
 80009fc:	20000000 	.word	0x20000000

08000a00 <Fonction_Thread_Sensor_2>:
	}
	osThreadTerminate(NULL);
}

void Fonction_Thread_Sensor_2(void* P_Info){
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b086      	sub	sp, #24
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
	T_DATA Data={.Type=2};
 8000a08:	f107 030c 	add.w	r3, r7, #12
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	601a      	str	r2, [r3, #0]
 8000a10:	605a      	str	r2, [r3, #4]
 8000a12:	609a      	str	r2, [r3, #8]
 8000a14:	2302      	movs	r3, #2
 8000a16:	733b      	strb	r3, [r7, #12]
	while(1){
		HAL_RNG_GenerateRandomNumber(&hrng, &Data.Value);
 8000a18:	f107 030c 	add.w	r3, r7, #12
 8000a1c:	3304      	adds	r3, #4
 8000a1e:	4619      	mov	r1, r3
 8000a20:	4811      	ldr	r0, [pc, #68]	; (8000a68 <Fonction_Thread_Sensor_2+0x68>)
 8000a22:	f001 fff3 	bl	8002a0c <HAL_RNG_GenerateRandomNumber>
		Data.Value %= 12;
 8000a26:	6939      	ldr	r1, [r7, #16]
 8000a28:	4b10      	ldr	r3, [pc, #64]	; (8000a6c <Fonction_Thread_Sensor_2+0x6c>)
 8000a2a:	fba3 2301 	umull	r2, r3, r3, r1
 8000a2e:	08da      	lsrs	r2, r3, #3
 8000a30:	4613      	mov	r3, r2
 8000a32:	005b      	lsls	r3, r3, #1
 8000a34:	4413      	add	r3, r2
 8000a36:	009b      	lsls	r3, r3, #2
 8000a38:	1aca      	subs	r2, r1, r3
 8000a3a:	613a      	str	r2, [r7, #16]
		Data.Timestamp = (uint32_t)(time(NULL));
 8000a3c:	2000      	movs	r0, #0
 8000a3e:	f006 f947 	bl	8006cd0 <time>
 8000a42:	4602      	mov	r2, r0
 8000a44:	460b      	mov	r3, r1
 8000a46:	4613      	mov	r3, r2
 8000a48:	617b      	str	r3, [r7, #20]
		osMessageQueuePut (Pipe_Reception_Analyse,(void*)&Data, 0, osWaitForever);
 8000a4a:	4b09      	ldr	r3, [pc, #36]	; (8000a70 <Fonction_Thread_Sensor_2+0x70>)
 8000a4c:	6818      	ldr	r0, [r3, #0]
 8000a4e:	f107 010c 	add.w	r1, r7, #12
 8000a52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a56:	2200      	movs	r2, #0
 8000a58:	f003 f8ae 	bl	8003bb8 <osMessageQueuePut>
		osDelay(period_sensor_2);
 8000a5c:	4b05      	ldr	r3, [pc, #20]	; (8000a74 <Fonction_Thread_Sensor_2+0x74>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	4618      	mov	r0, r3
 8000a62:	f003 f81a 	bl	8003a9a <osDelay>
		HAL_RNG_GenerateRandomNumber(&hrng, &Data.Value);
 8000a66:	e7d7      	b.n	8000a18 <Fonction_Thread_Sensor_2+0x18>
 8000a68:	200001b4 	.word	0x200001b4
 8000a6c:	aaaaaaab 	.word	0xaaaaaaab
 8000a70:	200001a8 	.word	0x200001a8
 8000a74:	20000004 	.word	0x20000004

08000a78 <Fonction_Thread_Sensor_3>:
	}
	osThreadTerminate(NULL);
}

void Fonction_Thread_Sensor_3(void* P_Info){
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b086      	sub	sp, #24
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
	T_DATA Data={.Type=3};
 8000a80:	f107 030c 	add.w	r3, r7, #12
 8000a84:	2200      	movs	r2, #0
 8000a86:	601a      	str	r2, [r3, #0]
 8000a88:	605a      	str	r2, [r3, #4]
 8000a8a:	609a      	str	r2, [r3, #8]
 8000a8c:	2303      	movs	r3, #3
 8000a8e:	733b      	strb	r3, [r7, #12]
	while(1){
		HAL_RNG_GenerateRandomNumber(&hrng, &Data.Value);
 8000a90:	f107 030c 	add.w	r3, r7, #12
 8000a94:	3304      	adds	r3, #4
 8000a96:	4619      	mov	r1, r3
 8000a98:	4811      	ldr	r0, [pc, #68]	; (8000ae0 <Fonction_Thread_Sensor_3+0x68>)
 8000a9a:	f001 ffb7 	bl	8002a0c <HAL_RNG_GenerateRandomNumber>
		Data.Value %= 500;
 8000a9e:	693a      	ldr	r2, [r7, #16]
 8000aa0:	4b10      	ldr	r3, [pc, #64]	; (8000ae4 <Fonction_Thread_Sensor_3+0x6c>)
 8000aa2:	fba3 1302 	umull	r1, r3, r3, r2
 8000aa6:	095b      	lsrs	r3, r3, #5
 8000aa8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000aac:	fb01 f303 	mul.w	r3, r1, r3
 8000ab0:	1ad3      	subs	r3, r2, r3
 8000ab2:	613b      	str	r3, [r7, #16]
		Data.Timestamp = (uint32_t)(time(NULL));
 8000ab4:	2000      	movs	r0, #0
 8000ab6:	f006 f90b 	bl	8006cd0 <time>
 8000aba:	4602      	mov	r2, r0
 8000abc:	460b      	mov	r3, r1
 8000abe:	4613      	mov	r3, r2
 8000ac0:	617b      	str	r3, [r7, #20]
		osMessageQueuePut (Pipe_Reception_Analyse,(void*)&Data, 0, osWaitForever);
 8000ac2:	4b09      	ldr	r3, [pc, #36]	; (8000ae8 <Fonction_Thread_Sensor_3+0x70>)
 8000ac4:	6818      	ldr	r0, [r3, #0]
 8000ac6:	f107 010c 	add.w	r1, r7, #12
 8000aca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ace:	2200      	movs	r2, #0
 8000ad0:	f003 f872 	bl	8003bb8 <osMessageQueuePut>
		osDelay(period_sensor_3);
 8000ad4:	4b05      	ldr	r3, [pc, #20]	; (8000aec <Fonction_Thread_Sensor_3+0x74>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f002 ffde 	bl	8003a9a <osDelay>
		HAL_RNG_GenerateRandomNumber(&hrng, &Data.Value);
 8000ade:	e7d7      	b.n	8000a90 <Fonction_Thread_Sensor_3+0x18>
 8000ae0:	200001b4 	.word	0x200001b4
 8000ae4:	10624dd3 	.word	0x10624dd3
 8000ae8:	200001a8 	.word	0x200001a8
 8000aec:	20000008 	.word	0x20000008

08000af0 <Fonction_Thread_Send>:
	}
	osThreadTerminate(NULL);
}

void Fonction_Thread_Send(void* P_Info){
 8000af0:	b590      	push	{r4, r7, lr}
 8000af2:	b087      	sub	sp, #28
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
	T_DATA Data;
	while(1){
		osThreadFlagsWait (FLAG_SEND_DATA, osFlagsWaitAll, HAL_MAX_DELAY);
 8000af8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000afc:	2101      	movs	r1, #1
 8000afe:	2001      	movs	r0, #1
 8000b00:	f002 ff4a 	bl	8003998 <osThreadFlagsWait>
		int i;
		osMessageQueueGetCount(&i);
 8000b04:	f107 0308 	add.w	r3, r7, #8
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f003 f913 	bl	8003d34 <osMessageQueueGetCount>
		while(i--){
 8000b0e:	e031      	b.n	8000b74 <Fonction_Thread_Send+0x84>
			if (osMessageQueueGet(Pipe_Reception_Analyse,(void*) &Data, 0, osWaitForever) == osOK){
 8000b10:	4b1b      	ldr	r3, [pc, #108]	; (8000b80 <Fonction_Thread_Send+0x90>)
 8000b12:	6818      	ldr	r0, [r3, #0]
 8000b14:	f107 010c 	add.w	r1, r7, #12
 8000b18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	f003 f8ab 	bl	8003c78 <osMessageQueueGet>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d125      	bne.n	8000b74 <Fonction_Thread_Send+0x84>
				memcpy(json_message + sizeof(char) * INDEX_TIME, itoa(Data.Timestamp), sizeof(Data.Timestamp));
 8000b28:	4b16      	ldr	r3, [pc, #88]	; (8000b84 <Fonction_Thread_Send+0x94>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	1cdc      	adds	r4, r3, #3
 8000b2e:	697b      	ldr	r3, [r7, #20]
 8000b30:	4618      	mov	r0, r3
 8000b32:	f006 f89d 	bl	8006c70 <itoa>
 8000b36:	4603      	mov	r3, r0
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	6023      	str	r3, [r4, #0]
				memcpy(json_message + sizeof(char) * INDEX_VALUE, itoa(Data.Value), sizeof(Data.Value));
 8000b3c:	4b11      	ldr	r3, [pc, #68]	; (8000b84 <Fonction_Thread_Send+0x94>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	f103 0414 	add.w	r4, r3, #20
 8000b44:	693b      	ldr	r3, [r7, #16]
 8000b46:	4618      	mov	r0, r3
 8000b48:	f006 f892 	bl	8006c70 <itoa>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	6023      	str	r3, [r4, #0]
				memcpy(json_message + sizeof(char) * INDEX_TYPE, itoa(Data.Type), sizeof(Data.Type));
 8000b52:	4b0c      	ldr	r3, [pc, #48]	; (8000b84 <Fonction_Thread_Send+0x94>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	f103 0410 	add.w	r4, r3, #16
 8000b5a:	7b3b      	ldrb	r3, [r7, #12]
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f006 f887 	bl	8006c70 <itoa>
 8000b62:	4603      	mov	r3, r0
 8000b64:	781b      	ldrb	r3, [r3, #0]
 8000b66:	7023      	strb	r3, [r4, #0]
				// send via UART
				printf("%s", json_message);
 8000b68:	4b06      	ldr	r3, [pc, #24]	; (8000b84 <Fonction_Thread_Send+0x94>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	4806      	ldr	r0, [pc, #24]	; (8000b88 <Fonction_Thread_Send+0x98>)
 8000b70:	f006 f896 	bl	8006ca0 <iprintf>
		while(i--){
 8000b74:	68bb      	ldr	r3, [r7, #8]
 8000b76:	1e5a      	subs	r2, r3, #1
 8000b78:	60ba      	str	r2, [r7, #8]
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d1c8      	bne.n	8000b10 <Fonction_Thread_Send+0x20>
	while(1){
 8000b7e:	e7bb      	b.n	8000af8 <Fonction_Thread_Send+0x8>
 8000b80:	200001a8 	.word	0x200001a8
 8000b84:	20000010 	.word	0x20000010
 8000b88:	08007d38 	.word	0x08007d38

08000b8c <Callback_TIM_5>:
	osThreadTerminate(NULL);
}


// Intéruption Timer pour Send Data
void Callback_TIM_5(TIM_HandleTypeDef* P_Timer){
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
	if (P_Timer == &htim5) {
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	4a06      	ldr	r2, [pc, #24]	; (8000bb0 <Callback_TIM_5+0x24>)
 8000b98:	4293      	cmp	r3, r2
 8000b9a:	d105      	bne.n	8000ba8 <Callback_TIM_5+0x1c>
		osThreadFlagsSet(Thread_Send_Data,FLAG_SEND_DATA);
 8000b9c:	4b05      	ldr	r3, [pc, #20]	; (8000bb4 <Callback_TIM_5+0x28>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	2101      	movs	r1, #1
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f002 feaa 	bl	80038fc <osThreadFlagsSet>
	}
}
 8000ba8:	bf00      	nop
 8000baa:	3708      	adds	r7, #8
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	20000210 	.word	0x20000210
 8000bb4:	200001ac 	.word	0x200001ac

08000bb8 <HAL_GPIO_EXTI_Callback>:

// Intéruption Bouton Bleu pour Send Data
void HAL_GPIO_EXTI_Callback(uint16_t P_Pin){
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	80fb      	strh	r3, [r7, #6]
	if (P_Pin == BTN_SEND_DATA_Pin){
 8000bc2:	88fb      	ldrh	r3, [r7, #6]
 8000bc4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000bc8:	d106      	bne.n	8000bd8 <HAL_GPIO_EXTI_Callback+0x20>
		osThreadFlagsSet (Thread_Send_Data,FLAG_SEND_DATA);
 8000bca:	4b61      	ldr	r3, [pc, #388]	; (8000d50 <HAL_GPIO_EXTI_Callback+0x198>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	2101      	movs	r1, #1
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f002 fe93 	bl	80038fc <osThreadFlagsSet>
	}
	else if (P_Pin == BTN_MINUS_Pin && state_config != 0){
		if (state_config != 4 && *(PERIOD[state_config]) > 100) PERIOD[state_config] -= 100;
		else if (state_config == 4 && *(PERIOD[state_config]) > 1000) PERIOD[state_config] -= 1000;
	}
}
 8000bd6:	e0b7      	b.n	8000d48 <HAL_GPIO_EXTI_Callback+0x190>
	else if (P_Pin == BTN_SELECT_Pin){
 8000bd8:	88fb      	ldrh	r3, [r7, #6]
 8000bda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000bde:	d13c      	bne.n	8000c5a <HAL_GPIO_EXTI_Callback+0xa2>
		if(state_config != 0){
 8000be0:	4b5c      	ldr	r3, [pc, #368]	; (8000d54 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d013      	beq.n	8000c10 <HAL_GPIO_EXTI_Callback+0x58>
			PORT[state_config]->ODR &= ~PIN[state_config];
 8000be8:	4b5a      	ldr	r3, [pc, #360]	; (8000d54 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a5a      	ldr	r2, [pc, #360]	; (8000d58 <HAL_GPIO_EXTI_Callback+0x1a0>)
 8000bee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bf2:	695a      	ldr	r2, [r3, #20]
 8000bf4:	4b57      	ldr	r3, [pc, #348]	; (8000d54 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4958      	ldr	r1, [pc, #352]	; (8000d5c <HAL_GPIO_EXTI_Callback+0x1a4>)
 8000bfa:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000bfe:	43db      	mvns	r3, r3
 8000c00:	4618      	mov	r0, r3
 8000c02:	4b54      	ldr	r3, [pc, #336]	; (8000d54 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	4954      	ldr	r1, [pc, #336]	; (8000d58 <HAL_GPIO_EXTI_Callback+0x1a0>)
 8000c08:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000c0c:	4002      	ands	r2, r0
 8000c0e:	615a      	str	r2, [r3, #20]
		state_config ++;
 8000c10:	4b50      	ldr	r3, [pc, #320]	; (8000d54 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	3301      	adds	r3, #1
 8000c16:	4a4f      	ldr	r2, [pc, #316]	; (8000d54 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000c18:	6013      	str	r3, [r2, #0]
		if(state_config > 4){state_config = 0;}
 8000c1a:	4b4e      	ldr	r3, [pc, #312]	; (8000d54 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	2b04      	cmp	r3, #4
 8000c20:	dd02      	ble.n	8000c28 <HAL_GPIO_EXTI_Callback+0x70>
 8000c22:	4b4c      	ldr	r3, [pc, #304]	; (8000d54 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	601a      	str	r2, [r3, #0]
		if(state_config != 0){
 8000c28:	4b4a      	ldr	r3, [pc, #296]	; (8000d54 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	f000 808b 	beq.w	8000d48 <HAL_GPIO_EXTI_Callback+0x190>
			PORT[state_config]->ODR |= PIN[state_config];
 8000c32:	4b48      	ldr	r3, [pc, #288]	; (8000d54 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	4a48      	ldr	r2, [pc, #288]	; (8000d58 <HAL_GPIO_EXTI_Callback+0x1a0>)
 8000c38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c3c:	695a      	ldr	r2, [r3, #20]
 8000c3e:	4b45      	ldr	r3, [pc, #276]	; (8000d54 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	4946      	ldr	r1, [pc, #280]	; (8000d5c <HAL_GPIO_EXTI_Callback+0x1a4>)
 8000c44:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000c48:	4618      	mov	r0, r3
 8000c4a:	4b42      	ldr	r3, [pc, #264]	; (8000d54 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	4942      	ldr	r1, [pc, #264]	; (8000d58 <HAL_GPIO_EXTI_Callback+0x1a0>)
 8000c50:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000c54:	4302      	orrs	r2, r0
 8000c56:	615a      	str	r2, [r3, #20]
}
 8000c58:	e076      	b.n	8000d48 <HAL_GPIO_EXTI_Callback+0x190>
	else if (P_Pin == BTN_PLUS_Pin && state_config != 0){
 8000c5a:	88fb      	ldrh	r3, [r7, #6]
 8000c5c:	2b02      	cmp	r3, #2
 8000c5e:	d138      	bne.n	8000cd2 <HAL_GPIO_EXTI_Callback+0x11a>
 8000c60:	4b3c      	ldr	r3, [pc, #240]	; (8000d54 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d034      	beq.n	8000cd2 <HAL_GPIO_EXTI_Callback+0x11a>
		if (state_config != 4 && *(PERIOD[state_config]) < 2000) PERIOD[state_config] += 100;
 8000c68:	4b3a      	ldr	r3, [pc, #232]	; (8000d54 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	2b04      	cmp	r3, #4
 8000c6e:	d015      	beq.n	8000c9c <HAL_GPIO_EXTI_Callback+0xe4>
 8000c70:	4b38      	ldr	r3, [pc, #224]	; (8000d54 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a3a      	ldr	r2, [pc, #232]	; (8000d60 <HAL_GPIO_EXTI_Callback+0x1a8>)
 8000c76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000c80:	da0c      	bge.n	8000c9c <HAL_GPIO_EXTI_Callback+0xe4>
 8000c82:	4b34      	ldr	r3, [pc, #208]	; (8000d54 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	4a36      	ldr	r2, [pc, #216]	; (8000d60 <HAL_GPIO_EXTI_Callback+0x1a8>)
 8000c88:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000c8c:	4b31      	ldr	r3, [pc, #196]	; (8000d54 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	f502 72c8 	add.w	r2, r2, #400	; 0x190
 8000c94:	4932      	ldr	r1, [pc, #200]	; (8000d60 <HAL_GPIO_EXTI_Callback+0x1a8>)
 8000c96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8000c9a:	e054      	b.n	8000d46 <HAL_GPIO_EXTI_Callback+0x18e>
		else if (state_config == 4 && *(PERIOD[state_config]) < 10000) PERIOD[state_config] += 1000;
 8000c9c:	4b2d      	ldr	r3, [pc, #180]	; (8000d54 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	2b04      	cmp	r3, #4
 8000ca2:	d150      	bne.n	8000d46 <HAL_GPIO_EXTI_Callback+0x18e>
 8000ca4:	4b2b      	ldr	r3, [pc, #172]	; (8000d54 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4a2d      	ldr	r2, [pc, #180]	; (8000d60 <HAL_GPIO_EXTI_Callback+0x1a8>)
 8000caa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	f242 720f 	movw	r2, #9999	; 0x270f
 8000cb4:	4293      	cmp	r3, r2
 8000cb6:	dc46      	bgt.n	8000d46 <HAL_GPIO_EXTI_Callback+0x18e>
 8000cb8:	4b26      	ldr	r3, [pc, #152]	; (8000d54 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a28      	ldr	r2, [pc, #160]	; (8000d60 <HAL_GPIO_EXTI_Callback+0x1a8>)
 8000cbe:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000cc2:	4b24      	ldr	r3, [pc, #144]	; (8000d54 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	f502 627a 	add.w	r2, r2, #4000	; 0xfa0
 8000cca:	4925      	ldr	r1, [pc, #148]	; (8000d60 <HAL_GPIO_EXTI_Callback+0x1a8>)
 8000ccc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if (state_config != 4 && *(PERIOD[state_config]) < 2000) PERIOD[state_config] += 100;
 8000cd0:	e039      	b.n	8000d46 <HAL_GPIO_EXTI_Callback+0x18e>
	else if (P_Pin == BTN_MINUS_Pin && state_config != 0){
 8000cd2:	88fb      	ldrh	r3, [r7, #6]
 8000cd4:	2b20      	cmp	r3, #32
 8000cd6:	d137      	bne.n	8000d48 <HAL_GPIO_EXTI_Callback+0x190>
 8000cd8:	4b1e      	ldr	r3, [pc, #120]	; (8000d54 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d033      	beq.n	8000d48 <HAL_GPIO_EXTI_Callback+0x190>
		if (state_config != 4 && *(PERIOD[state_config]) > 100) PERIOD[state_config] -= 100;
 8000ce0:	4b1c      	ldr	r3, [pc, #112]	; (8000d54 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	2b04      	cmp	r3, #4
 8000ce6:	d014      	beq.n	8000d12 <HAL_GPIO_EXTI_Callback+0x15a>
 8000ce8:	4b1a      	ldr	r3, [pc, #104]	; (8000d54 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a1c      	ldr	r2, [pc, #112]	; (8000d60 <HAL_GPIO_EXTI_Callback+0x1a8>)
 8000cee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	2b64      	cmp	r3, #100	; 0x64
 8000cf6:	dd0c      	ble.n	8000d12 <HAL_GPIO_EXTI_Callback+0x15a>
 8000cf8:	4b16      	ldr	r3, [pc, #88]	; (8000d54 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a18      	ldr	r2, [pc, #96]	; (8000d60 <HAL_GPIO_EXTI_Callback+0x1a8>)
 8000cfe:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000d02:	4b14      	ldr	r3, [pc, #80]	; (8000d54 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	f5a2 72c8 	sub.w	r2, r2, #400	; 0x190
 8000d0a:	4915      	ldr	r1, [pc, #84]	; (8000d60 <HAL_GPIO_EXTI_Callback+0x1a8>)
 8000d0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8000d10:	e01a      	b.n	8000d48 <HAL_GPIO_EXTI_Callback+0x190>
		else if (state_config == 4 && *(PERIOD[state_config]) > 1000) PERIOD[state_config] -= 1000;
 8000d12:	4b10      	ldr	r3, [pc, #64]	; (8000d54 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	2b04      	cmp	r3, #4
 8000d18:	d116      	bne.n	8000d48 <HAL_GPIO_EXTI_Callback+0x190>
 8000d1a:	4b0e      	ldr	r3, [pc, #56]	; (8000d54 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	4a10      	ldr	r2, [pc, #64]	; (8000d60 <HAL_GPIO_EXTI_Callback+0x1a8>)
 8000d20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000d2a:	dd0d      	ble.n	8000d48 <HAL_GPIO_EXTI_Callback+0x190>
 8000d2c:	4b09      	ldr	r3, [pc, #36]	; (8000d54 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4a0b      	ldr	r2, [pc, #44]	; (8000d60 <HAL_GPIO_EXTI_Callback+0x1a8>)
 8000d32:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000d36:	4b07      	ldr	r3, [pc, #28]	; (8000d54 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	f5a2 627a 	sub.w	r2, r2, #4000	; 0xfa0
 8000d3e:	4908      	ldr	r1, [pc, #32]	; (8000d60 <HAL_GPIO_EXTI_Callback+0x1a8>)
 8000d40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000d44:	e000      	b.n	8000d48 <HAL_GPIO_EXTI_Callback+0x190>
		if (state_config != 4 && *(PERIOD[state_config]) < 2000) PERIOD[state_config] += 100;
 8000d46:	bf00      	nop
}
 8000d48:	bf00      	nop
 8000d4a:	3708      	adds	r7, #8
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	200001ac 	.word	0x200001ac
 8000d54:	20000194 	.word	0x20000194
 8000d58:	20000014 	.word	0x20000014
 8000d5c:	20000024 	.word	0x20000024
 8000d60:	20000198 	.word	0x20000198

08000d64 <main>:

int main(){
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
	PERIOD[0] = &period_sensor_1;
 8000d68:	4b1d      	ldr	r3, [pc, #116]	; (8000de0 <main+0x7c>)
 8000d6a:	4a1e      	ldr	r2, [pc, #120]	; (8000de4 <main+0x80>)
 8000d6c:	601a      	str	r2, [r3, #0]
	PERIOD[1] = &period_sensor_2;
 8000d6e:	4b1c      	ldr	r3, [pc, #112]	; (8000de0 <main+0x7c>)
 8000d70:	4a1d      	ldr	r2, [pc, #116]	; (8000de8 <main+0x84>)
 8000d72:	605a      	str	r2, [r3, #4]
	PERIOD[2] = &period_sensor_3;
 8000d74:	4b1a      	ldr	r3, [pc, #104]	; (8000de0 <main+0x7c>)
 8000d76:	4a1d      	ldr	r2, [pc, #116]	; (8000dec <main+0x88>)
 8000d78:	609a      	str	r2, [r3, #8]
	PERIOD[3] = &period_send;
 8000d7a:	4b19      	ldr	r3, [pc, #100]	; (8000de0 <main+0x7c>)
 8000d7c:	4a1c      	ldr	r2, [pc, #112]	; (8000df0 <main+0x8c>)
 8000d7e:	60da      	str	r2, [r3, #12]
	HAL_Init();
 8000d80:	f000 facc 	bl	800131c <HAL_Init>
	SystemClock_Config();
 8000d84:	f7ff fd4c 	bl	8000820 <SystemClock_Config>
	MX_GPIO_Init();
 8000d88:	f7ff fcaa 	bl	80006e0 <MX_GPIO_Init>
	MX_ADC1_Init();
 8000d8c:	f7ff fc12 	bl	80005b4 <MX_ADC1_Init>
	MX_RNG_Init();
 8000d90:	f000 f844 	bl	8000e1c <MX_RNG_Init>
	MX_USART2_UART_Init();
 8000d94:	f000 fa26 	bl	80011e4 <MX_USART2_UART_Init>
	osKernelInitialize();
 8000d98:	f002 fcd4 	bl	8003744 <osKernelInitialize>
	Pipe_Reception_Analyse= osMessageQueueNew (TAILLE_PIPE_RECEPTION_ANALYSE, sizeof(uint8_t),NULL);
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	2101      	movs	r1, #1
 8000da0:	2014      	movs	r0, #20
 8000da2:	f002 fe95 	bl	8003ad0 <osMessageQueueNew>
 8000da6:	4603      	mov	r3, r0
 8000da8:	4a12      	ldr	r2, [pc, #72]	; (8000df4 <main+0x90>)
 8000daa:	6013      	str	r3, [r2, #0]
	osThreadNew(Fonction_Thread_Sensor_1, NULL, &Config_Thread_Sensor_1);
 8000dac:	4a12      	ldr	r2, [pc, #72]	; (8000df8 <main+0x94>)
 8000dae:	2100      	movs	r1, #0
 8000db0:	4812      	ldr	r0, [pc, #72]	; (8000dfc <main+0x98>)
 8000db2:	f002 fd11 	bl	80037d8 <osThreadNew>
	osThreadNew(Fonction_Thread_Sensor_2, NULL, &Config_Thread_Sensor_2);
 8000db6:	4a12      	ldr	r2, [pc, #72]	; (8000e00 <main+0x9c>)
 8000db8:	2100      	movs	r1, #0
 8000dba:	4812      	ldr	r0, [pc, #72]	; (8000e04 <main+0xa0>)
 8000dbc:	f002 fd0c 	bl	80037d8 <osThreadNew>
	osThreadNew(Fonction_Thread_Sensor_3, NULL, &Config_Thread_Sensor_3);
 8000dc0:	4a11      	ldr	r2, [pc, #68]	; (8000e08 <main+0xa4>)
 8000dc2:	2100      	movs	r1, #0
 8000dc4:	4811      	ldr	r0, [pc, #68]	; (8000e0c <main+0xa8>)
 8000dc6:	f002 fd07 	bl	80037d8 <osThreadNew>
	Thread_Send_Data = osThreadNew(Fonction_Thread_Send, NULL, &Config_Thread_Send);
 8000dca:	4a11      	ldr	r2, [pc, #68]	; (8000e10 <main+0xac>)
 8000dcc:	2100      	movs	r1, #0
 8000dce:	4811      	ldr	r0, [pc, #68]	; (8000e14 <main+0xb0>)
 8000dd0:	f002 fd02 	bl	80037d8 <osThreadNew>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	4a10      	ldr	r2, [pc, #64]	; (8000e18 <main+0xb4>)
 8000dd8:	6013      	str	r3, [r2, #0]
	osKernelStart();
 8000dda:	f002 fcd7 	bl	800378c <osKernelStart>
	while(1);
 8000dde:	e7fe      	b.n	8000dde <main+0x7a>
 8000de0:	20000198 	.word	0x20000198
 8000de4:	20000000 	.word	0x20000000
 8000de8:	20000004 	.word	0x20000004
 8000dec:	20000008 	.word	0x20000008
 8000df0:	2000000c 	.word	0x2000000c
 8000df4:	200001a8 	.word	0x200001a8
 8000df8:	2000002c 	.word	0x2000002c
 8000dfc:	0800096d 	.word	0x0800096d
 8000e00:	20000050 	.word	0x20000050
 8000e04:	08000a01 	.word	0x08000a01
 8000e08:	20000074 	.word	0x20000074
 8000e0c:	08000a79 	.word	0x08000a79
 8000e10:	20000098 	.word	0x20000098
 8000e14:	08000af1 	.word	0x08000af1
 8000e18:	200001ac 	.word	0x200001ac

08000e1c <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8000e20:	4b06      	ldr	r3, [pc, #24]	; (8000e3c <MX_RNG_Init+0x20>)
 8000e22:	4a07      	ldr	r2, [pc, #28]	; (8000e40 <MX_RNG_Init+0x24>)
 8000e24:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8000e26:	4805      	ldr	r0, [pc, #20]	; (8000e3c <MX_RNG_Init+0x20>)
 8000e28:	f001 fdc6 	bl	80029b8 <HAL_RNG_Init>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8000e32:	f7ff fd77 	bl	8000924 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8000e36:	bf00      	nop
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	200001b4 	.word	0x200001b4
 8000e40:	40080000 	.word	0x40080000

08000e44 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b085      	sub	sp, #20
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]

  if(rngHandle->Instance==RNG)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a0b      	ldr	r2, [pc, #44]	; (8000e80 <HAL_RNG_MspInit+0x3c>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d10d      	bne.n	8000e72 <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8000e56:	2300      	movs	r3, #0
 8000e58:	60fb      	str	r3, [r7, #12]
 8000e5a:	4b0a      	ldr	r3, [pc, #40]	; (8000e84 <HAL_RNG_MspInit+0x40>)
 8000e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5e:	4a09      	ldr	r2, [pc, #36]	; (8000e84 <HAL_RNG_MspInit+0x40>)
 8000e60:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000e64:	6313      	str	r3, [r2, #48]	; 0x30
 8000e66:	4b07      	ldr	r3, [pc, #28]	; (8000e84 <HAL_RNG_MspInit+0x40>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000e6e:	60fb      	str	r3, [r7, #12]
 8000e70:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 8000e72:	bf00      	nop
 8000e74:	3714      	adds	r7, #20
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop
 8000e80:	40080000 	.word	0x40080000
 8000e84:	40023800 	.word	0x40023800

08000e88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e8e:	2300      	movs	r3, #0
 8000e90:	607b      	str	r3, [r7, #4]
 8000e92:	4b12      	ldr	r3, [pc, #72]	; (8000edc <HAL_MspInit+0x54>)
 8000e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e96:	4a11      	ldr	r2, [pc, #68]	; (8000edc <HAL_MspInit+0x54>)
 8000e98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e9c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e9e:	4b0f      	ldr	r3, [pc, #60]	; (8000edc <HAL_MspInit+0x54>)
 8000ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ea2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ea6:	607b      	str	r3, [r7, #4]
 8000ea8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eaa:	2300      	movs	r3, #0
 8000eac:	603b      	str	r3, [r7, #0]
 8000eae:	4b0b      	ldr	r3, [pc, #44]	; (8000edc <HAL_MspInit+0x54>)
 8000eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb2:	4a0a      	ldr	r2, [pc, #40]	; (8000edc <HAL_MspInit+0x54>)
 8000eb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000eb8:	6413      	str	r3, [r2, #64]	; 0x40
 8000eba:	4b08      	ldr	r3, [pc, #32]	; (8000edc <HAL_MspInit+0x54>)
 8000ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ebe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ec2:	603b      	str	r3, [r7, #0]
 8000ec4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	210f      	movs	r1, #15
 8000eca:	f06f 0001 	mvn.w	r0, #1
 8000ece:	f000 fecd 	bl	8001c6c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ed2:	bf00      	nop
 8000ed4:	3708      	adds	r7, #8
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	40023800 	.word	0x40023800

08000ee0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b08e      	sub	sp, #56	; 0x38
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000eec:	2300      	movs	r3, #0
 8000eee:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	60fb      	str	r3, [r7, #12]
 8000ef4:	4b33      	ldr	r3, [pc, #204]	; (8000fc4 <HAL_InitTick+0xe4>)
 8000ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef8:	4a32      	ldr	r2, [pc, #200]	; (8000fc4 <HAL_InitTick+0xe4>)
 8000efa:	f043 0310 	orr.w	r3, r3, #16
 8000efe:	6413      	str	r3, [r2, #64]	; 0x40
 8000f00:	4b30      	ldr	r3, [pc, #192]	; (8000fc4 <HAL_InitTick+0xe4>)
 8000f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f04:	f003 0310 	and.w	r3, r3, #16
 8000f08:	60fb      	str	r3, [r7, #12]
 8000f0a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000f0c:	f107 0210 	add.w	r2, r7, #16
 8000f10:	f107 0314 	add.w	r3, r7, #20
 8000f14:	4611      	mov	r1, r2
 8000f16:	4618      	mov	r0, r3
 8000f18:	f001 fa98 	bl	800244c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000f1c:	6a3b      	ldr	r3, [r7, #32]
 8000f1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000f20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d103      	bne.n	8000f2e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000f26:	f001 fa69 	bl	80023fc <HAL_RCC_GetPCLK1Freq>
 8000f2a:	6378      	str	r0, [r7, #52]	; 0x34
 8000f2c:	e004      	b.n	8000f38 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000f2e:	f001 fa65 	bl	80023fc <HAL_RCC_GetPCLK1Freq>
 8000f32:	4603      	mov	r3, r0
 8000f34:	005b      	lsls	r3, r3, #1
 8000f36:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000f38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f3a:	4a23      	ldr	r2, [pc, #140]	; (8000fc8 <HAL_InitTick+0xe8>)
 8000f3c:	fba2 2303 	umull	r2, r3, r2, r3
 8000f40:	0c9b      	lsrs	r3, r3, #18
 8000f42:	3b01      	subs	r3, #1
 8000f44:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000f46:	4b21      	ldr	r3, [pc, #132]	; (8000fcc <HAL_InitTick+0xec>)
 8000f48:	4a21      	ldr	r2, [pc, #132]	; (8000fd0 <HAL_InitTick+0xf0>)
 8000f4a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000f4c:	4b1f      	ldr	r3, [pc, #124]	; (8000fcc <HAL_InitTick+0xec>)
 8000f4e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f52:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000f54:	4a1d      	ldr	r2, [pc, #116]	; (8000fcc <HAL_InitTick+0xec>)
 8000f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f58:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000f5a:	4b1c      	ldr	r3, [pc, #112]	; (8000fcc <HAL_InitTick+0xec>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f60:	4b1a      	ldr	r3, [pc, #104]	; (8000fcc <HAL_InitTick+0xec>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f66:	4b19      	ldr	r3, [pc, #100]	; (8000fcc <HAL_InitTick+0xec>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000f6c:	4817      	ldr	r0, [pc, #92]	; (8000fcc <HAL_InitTick+0xec>)
 8000f6e:	f001 fda3 	bl	8002ab8 <HAL_TIM_Base_Init>
 8000f72:	4603      	mov	r3, r0
 8000f74:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000f78:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d11b      	bne.n	8000fb8 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000f80:	4812      	ldr	r0, [pc, #72]	; (8000fcc <HAL_InitTick+0xec>)
 8000f82:	f001 fde9 	bl	8002b58 <HAL_TIM_Base_Start_IT>
 8000f86:	4603      	mov	r3, r0
 8000f88:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000f8c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d111      	bne.n	8000fb8 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000f94:	2036      	movs	r0, #54	; 0x36
 8000f96:	f000 fe85 	bl	8001ca4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	2b0f      	cmp	r3, #15
 8000f9e:	d808      	bhi.n	8000fb2 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	6879      	ldr	r1, [r7, #4]
 8000fa4:	2036      	movs	r0, #54	; 0x36
 8000fa6:	f000 fe61 	bl	8001c6c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000faa:	4a0a      	ldr	r2, [pc, #40]	; (8000fd4 <HAL_InitTick+0xf4>)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	6013      	str	r3, [r2, #0]
 8000fb0:	e002      	b.n	8000fb8 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000fb8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	3738      	adds	r7, #56	; 0x38
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	40023800 	.word	0x40023800
 8000fc8:	431bde83 	.word	0x431bde83
 8000fcc:	200001c4 	.word	0x200001c4
 8000fd0:	40001000 	.word	0x40001000
 8000fd4:	200000c0 	.word	0x200000c0

08000fd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fdc:	e7fe      	b.n	8000fdc <NMI_Handler+0x4>

08000fde <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fde:	b480      	push	{r7}
 8000fe0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fe2:	e7fe      	b.n	8000fe2 <HardFault_Handler+0x4>

08000fe4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fe8:	e7fe      	b.n	8000fe8 <MemManage_Handler+0x4>

08000fea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fea:	b480      	push	{r7}
 8000fec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fee:	e7fe      	b.n	8000fee <BusFault_Handler+0x4>

08000ff0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ff4:	e7fe      	b.n	8000ff4 <UsageFault_Handler+0x4>

08000ff6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ff6:	b480      	push	{r7}
 8000ff8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ffa:	bf00      	nop
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr

08001004 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_PLUS_Pin);
 8001008:	2002      	movs	r0, #2
 800100a:	f000 ffe7 	bl	8001fdc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800100e:	bf00      	nop
 8001010:	bd80      	pop	{r7, pc}

08001012 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001012:	b580      	push	{r7, lr}
 8001014:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_SELECT_Pin);
 8001016:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800101a:	f000 ffdf 	bl	8001fdc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BTN_SEND_DATA_Pin);
 800101e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001022:	f000 ffdb 	bl	8001fdc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001026:	bf00      	nop
 8001028:	bd80      	pop	{r7, pc}
	...

0800102c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC channel underrun error interrupt.
  */
void TIM6_DAC_IRQHandler(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001030:	4802      	ldr	r0, [pc, #8]	; (800103c <TIM6_DAC_IRQHandler+0x10>)
 8001032:	f001 fddf 	bl	8002bf4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001036:	bf00      	nop
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	200001c4 	.word	0x200001c4

08001040 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b086      	sub	sp, #24
 8001044:	af00      	add	r7, sp, #0
 8001046:	60f8      	str	r0, [r7, #12]
 8001048:	60b9      	str	r1, [r7, #8]
 800104a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800104c:	2300      	movs	r3, #0
 800104e:	617b      	str	r3, [r7, #20]
 8001050:	e00a      	b.n	8001068 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001052:	f3af 8000 	nop.w
 8001056:	4601      	mov	r1, r0
 8001058:	68bb      	ldr	r3, [r7, #8]
 800105a:	1c5a      	adds	r2, r3, #1
 800105c:	60ba      	str	r2, [r7, #8]
 800105e:	b2ca      	uxtb	r2, r1
 8001060:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	3301      	adds	r3, #1
 8001066:	617b      	str	r3, [r7, #20]
 8001068:	697a      	ldr	r2, [r7, #20]
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	429a      	cmp	r2, r3
 800106e:	dbf0      	blt.n	8001052 <_read+0x12>
  }

  return len;
 8001070:	687b      	ldr	r3, [r7, #4]
}
 8001072:	4618      	mov	r0, r3
 8001074:	3718      	adds	r7, #24
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}

0800107a <_close>:
  }
  return len;
}

int _close(int file)
{
 800107a:	b480      	push	{r7}
 800107c:	b083      	sub	sp, #12
 800107e:	af00      	add	r7, sp, #0
 8001080:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001082:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001086:	4618      	mov	r0, r3
 8001088:	370c      	adds	r7, #12
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr

08001092 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001092:	b480      	push	{r7}
 8001094:	b083      	sub	sp, #12
 8001096:	af00      	add	r7, sp, #0
 8001098:	6078      	str	r0, [r7, #4]
 800109a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010a2:	605a      	str	r2, [r3, #4]
  return 0;
 80010a4:	2300      	movs	r3, #0
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	370c      	adds	r7, #12
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr

080010b2 <_isatty>:

int _isatty(int file)
{
 80010b2:	b480      	push	{r7}
 80010b4:	b083      	sub	sp, #12
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80010ba:	2301      	movs	r3, #1
}
 80010bc:	4618      	mov	r0, r3
 80010be:	370c      	adds	r7, #12
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr

080010c8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b085      	sub	sp, #20
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	60f8      	str	r0, [r7, #12]
 80010d0:	60b9      	str	r1, [r7, #8]
 80010d2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80010d4:	2300      	movs	r3, #0
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	3714      	adds	r7, #20
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr
	...

080010e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b086      	sub	sp, #24
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010ec:	4a14      	ldr	r2, [pc, #80]	; (8001140 <_sbrk+0x5c>)
 80010ee:	4b15      	ldr	r3, [pc, #84]	; (8001144 <_sbrk+0x60>)
 80010f0:	1ad3      	subs	r3, r2, r3
 80010f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010f8:	4b13      	ldr	r3, [pc, #76]	; (8001148 <_sbrk+0x64>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d102      	bne.n	8001106 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001100:	4b11      	ldr	r3, [pc, #68]	; (8001148 <_sbrk+0x64>)
 8001102:	4a12      	ldr	r2, [pc, #72]	; (800114c <_sbrk+0x68>)
 8001104:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001106:	4b10      	ldr	r3, [pc, #64]	; (8001148 <_sbrk+0x64>)
 8001108:	681a      	ldr	r2, [r3, #0]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	4413      	add	r3, r2
 800110e:	693a      	ldr	r2, [r7, #16]
 8001110:	429a      	cmp	r2, r3
 8001112:	d207      	bcs.n	8001124 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001114:	f005 fd6a 	bl	8006bec <__errno>
 8001118:	4603      	mov	r3, r0
 800111a:	220c      	movs	r2, #12
 800111c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800111e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001122:	e009      	b.n	8001138 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001124:	4b08      	ldr	r3, [pc, #32]	; (8001148 <_sbrk+0x64>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800112a:	4b07      	ldr	r3, [pc, #28]	; (8001148 <_sbrk+0x64>)
 800112c:	681a      	ldr	r2, [r3, #0]
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4413      	add	r3, r2
 8001132:	4a05      	ldr	r2, [pc, #20]	; (8001148 <_sbrk+0x64>)
 8001134:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001136:	68fb      	ldr	r3, [r7, #12]
}
 8001138:	4618      	mov	r0, r3
 800113a:	3718      	adds	r7, #24
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	20008000 	.word	0x20008000
 8001144:	00000400 	.word	0x00000400
 8001148:	2000020c 	.word	0x2000020c
 800114c:	20004c00 	.word	0x20004c00

08001150 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001154:	4b06      	ldr	r3, [pc, #24]	; (8001170 <SystemInit+0x20>)
 8001156:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800115a:	4a05      	ldr	r2, [pc, #20]	; (8001170 <SystemInit+0x20>)
 800115c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001160:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001164:	bf00      	nop
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	e000ed00 	.word	0xe000ed00

08001174 <HAL_TIM_Base_MspInit>:
  HAL_TIM_MspPostInit(&htim11);

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001174:	b480      	push	{r7}
 8001176:	b085      	sub	sp, #20
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM5)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a15      	ldr	r2, [pc, #84]	; (80011d8 <HAL_TIM_Base_MspInit+0x64>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d10e      	bne.n	80011a4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001186:	2300      	movs	r3, #0
 8001188:	60fb      	str	r3, [r7, #12]
 800118a:	4b14      	ldr	r3, [pc, #80]	; (80011dc <HAL_TIM_Base_MspInit+0x68>)
 800118c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800118e:	4a13      	ldr	r2, [pc, #76]	; (80011dc <HAL_TIM_Base_MspInit+0x68>)
 8001190:	f043 0308 	orr.w	r3, r3, #8
 8001194:	6413      	str	r3, [r2, #64]	; 0x40
 8001196:	4b11      	ldr	r3, [pc, #68]	; (80011dc <HAL_TIM_Base_MspInit+0x68>)
 8001198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119a:	f003 0308 	and.w	r3, r3, #8
 800119e:	60fb      	str	r3, [r7, #12]
 80011a0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM11_CLK_ENABLE();
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 80011a2:	e012      	b.n	80011ca <HAL_TIM_Base_MspInit+0x56>
  else if(tim_baseHandle->Instance==TIM11)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a0d      	ldr	r2, [pc, #52]	; (80011e0 <HAL_TIM_Base_MspInit+0x6c>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d10d      	bne.n	80011ca <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80011ae:	2300      	movs	r3, #0
 80011b0:	60bb      	str	r3, [r7, #8]
 80011b2:	4b0a      	ldr	r3, [pc, #40]	; (80011dc <HAL_TIM_Base_MspInit+0x68>)
 80011b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011b6:	4a09      	ldr	r2, [pc, #36]	; (80011dc <HAL_TIM_Base_MspInit+0x68>)
 80011b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011bc:	6453      	str	r3, [r2, #68]	; 0x44
 80011be:	4b07      	ldr	r3, [pc, #28]	; (80011dc <HAL_TIM_Base_MspInit+0x68>)
 80011c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011c6:	60bb      	str	r3, [r7, #8]
 80011c8:	68bb      	ldr	r3, [r7, #8]
}
 80011ca:	bf00      	nop
 80011cc:	3714      	adds	r7, #20
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop
 80011d8:	40000c00 	.word	0x40000c00
 80011dc:	40023800 	.word	0x40023800
 80011e0:	40014800 	.word	0x40014800

080011e4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011e8:	4b11      	ldr	r3, [pc, #68]	; (8001230 <MX_USART2_UART_Init+0x4c>)
 80011ea:	4a12      	ldr	r2, [pc, #72]	; (8001234 <MX_USART2_UART_Init+0x50>)
 80011ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80011ee:	4b10      	ldr	r3, [pc, #64]	; (8001230 <MX_USART2_UART_Init+0x4c>)
 80011f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011f6:	4b0e      	ldr	r3, [pc, #56]	; (8001230 <MX_USART2_UART_Init+0x4c>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011fc:	4b0c      	ldr	r3, [pc, #48]	; (8001230 <MX_USART2_UART_Init+0x4c>)
 80011fe:	2200      	movs	r2, #0
 8001200:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001202:	4b0b      	ldr	r3, [pc, #44]	; (8001230 <MX_USART2_UART_Init+0x4c>)
 8001204:	2200      	movs	r2, #0
 8001206:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001208:	4b09      	ldr	r3, [pc, #36]	; (8001230 <MX_USART2_UART_Init+0x4c>)
 800120a:	220c      	movs	r2, #12
 800120c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800120e:	4b08      	ldr	r3, [pc, #32]	; (8001230 <MX_USART2_UART_Init+0x4c>)
 8001210:	2200      	movs	r2, #0
 8001212:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001214:	4b06      	ldr	r3, [pc, #24]	; (8001230 <MX_USART2_UART_Init+0x4c>)
 8001216:	2200      	movs	r2, #0
 8001218:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800121a:	4805      	ldr	r0, [pc, #20]	; (8001230 <MX_USART2_UART_Init+0x4c>)
 800121c:	f001 fe8c 	bl	8002f38 <HAL_UART_Init>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001226:	f7ff fb7d 	bl	8000924 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800122a:	bf00      	nop
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	20000258 	.word	0x20000258
 8001234:	40004400 	.word	0x40004400

08001238 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b08a      	sub	sp, #40	; 0x28
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001240:	f107 0314 	add.w	r3, r7, #20
 8001244:	2200      	movs	r2, #0
 8001246:	601a      	str	r2, [r3, #0]
 8001248:	605a      	str	r2, [r3, #4]
 800124a:	609a      	str	r2, [r3, #8]
 800124c:	60da      	str	r2, [r3, #12]
 800124e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a19      	ldr	r2, [pc, #100]	; (80012bc <HAL_UART_MspInit+0x84>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d12b      	bne.n	80012b2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800125a:	2300      	movs	r3, #0
 800125c:	613b      	str	r3, [r7, #16]
 800125e:	4b18      	ldr	r3, [pc, #96]	; (80012c0 <HAL_UART_MspInit+0x88>)
 8001260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001262:	4a17      	ldr	r2, [pc, #92]	; (80012c0 <HAL_UART_MspInit+0x88>)
 8001264:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001268:	6413      	str	r3, [r2, #64]	; 0x40
 800126a:	4b15      	ldr	r3, [pc, #84]	; (80012c0 <HAL_UART_MspInit+0x88>)
 800126c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001272:	613b      	str	r3, [r7, #16]
 8001274:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001276:	2300      	movs	r3, #0
 8001278:	60fb      	str	r3, [r7, #12]
 800127a:	4b11      	ldr	r3, [pc, #68]	; (80012c0 <HAL_UART_MspInit+0x88>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127e:	4a10      	ldr	r2, [pc, #64]	; (80012c0 <HAL_UART_MspInit+0x88>)
 8001280:	f043 0301 	orr.w	r3, r3, #1
 8001284:	6313      	str	r3, [r2, #48]	; 0x30
 8001286:	4b0e      	ldr	r3, [pc, #56]	; (80012c0 <HAL_UART_MspInit+0x88>)
 8001288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128a:	f003 0301 	and.w	r3, r3, #1
 800128e:	60fb      	str	r3, [r7, #12]
 8001290:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001292:	230c      	movs	r3, #12
 8001294:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001296:	2302      	movs	r3, #2
 8001298:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129a:	2300      	movs	r3, #0
 800129c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800129e:	2303      	movs	r3, #3
 80012a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80012a2:	2307      	movs	r3, #7
 80012a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012a6:	f107 0314 	add.w	r3, r7, #20
 80012aa:	4619      	mov	r1, r3
 80012ac:	4805      	ldr	r0, [pc, #20]	; (80012c4 <HAL_UART_MspInit+0x8c>)
 80012ae:	f000 fd07 	bl	8001cc0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80012b2:	bf00      	nop
 80012b4:	3728      	adds	r7, #40	; 0x28
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	40004400 	.word	0x40004400
 80012c0:	40023800 	.word	0x40023800
 80012c4:	40020000 	.word	0x40020000

080012c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 80012c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001300 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012cc:	480d      	ldr	r0, [pc, #52]	; (8001304 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80012ce:	490e      	ldr	r1, [pc, #56]	; (8001308 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80012d0:	4a0e      	ldr	r2, [pc, #56]	; (800130c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80012d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012d4:	e002      	b.n	80012dc <LoopCopyDataInit>

080012d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012da:	3304      	adds	r3, #4

080012dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012e0:	d3f9      	bcc.n	80012d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012e2:	4a0b      	ldr	r2, [pc, #44]	; (8001310 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80012e4:	4c0b      	ldr	r4, [pc, #44]	; (8001314 <LoopFillZerobss+0x26>)
  movs r3, #0
 80012e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012e8:	e001      	b.n	80012ee <LoopFillZerobss>

080012ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012ec:	3204      	adds	r2, #4

080012ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012f0:	d3fb      	bcc.n	80012ea <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80012f2:	f7ff ff2d 	bl	8001150 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012f6:	f005 fc7f 	bl	8006bf8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012fa:	f7ff fd33 	bl	8000d64 <main>
  bx  lr    
 80012fe:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001300:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001304:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001308:	20000130 	.word	0x20000130
  ldr r2, =_sidata
 800130c:	08007e3c 	.word	0x08007e3c
  ldr r2, =_sbss
 8001310:	20000130 	.word	0x20000130
  ldr r4, =_ebss
 8001314:	20004c00 	.word	0x20004c00

08001318 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001318:	e7fe      	b.n	8001318 <ADC_IRQHandler>
	...

0800131c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001320:	4b0e      	ldr	r3, [pc, #56]	; (800135c <HAL_Init+0x40>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a0d      	ldr	r2, [pc, #52]	; (800135c <HAL_Init+0x40>)
 8001326:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800132a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800132c:	4b0b      	ldr	r3, [pc, #44]	; (800135c <HAL_Init+0x40>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a0a      	ldr	r2, [pc, #40]	; (800135c <HAL_Init+0x40>)
 8001332:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001336:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001338:	4b08      	ldr	r3, [pc, #32]	; (800135c <HAL_Init+0x40>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a07      	ldr	r2, [pc, #28]	; (800135c <HAL_Init+0x40>)
 800133e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001342:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001344:	2003      	movs	r0, #3
 8001346:	f000 fc86 	bl	8001c56 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800134a:	200f      	movs	r0, #15
 800134c:	f7ff fdc8 	bl	8000ee0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001350:	f7ff fd9a 	bl	8000e88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001354:	2300      	movs	r3, #0
}
 8001356:	4618      	mov	r0, r3
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	40023c00 	.word	0x40023c00

08001360 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001364:	4b06      	ldr	r3, [pc, #24]	; (8001380 <HAL_IncTick+0x20>)
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	461a      	mov	r2, r3
 800136a:	4b06      	ldr	r3, [pc, #24]	; (8001384 <HAL_IncTick+0x24>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4413      	add	r3, r2
 8001370:	4a04      	ldr	r2, [pc, #16]	; (8001384 <HAL_IncTick+0x24>)
 8001372:	6013      	str	r3, [r2, #0]
}
 8001374:	bf00      	nop
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	200000c4 	.word	0x200000c4
 8001384:	2000029c 	.word	0x2000029c

08001388 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
  return uwTick;
 800138c:	4b03      	ldr	r3, [pc, #12]	; (800139c <HAL_GetTick+0x14>)
 800138e:	681b      	ldr	r3, [r3, #0]
}
 8001390:	4618      	mov	r0, r3
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop
 800139c:	2000029c 	.word	0x2000029c

080013a0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b084      	sub	sp, #16
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013a8:	2300      	movs	r3, #0
 80013aa:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d101      	bne.n	80013b6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80013b2:	2301      	movs	r3, #1
 80013b4:	e033      	b.n	800141e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d109      	bne.n	80013d2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80013be:	6878      	ldr	r0, [r7, #4]
 80013c0:	f7ff f94a 	bl	8000658 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2200      	movs	r2, #0
 80013c8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2200      	movs	r2, #0
 80013ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d6:	f003 0310 	and.w	r3, r3, #16
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d118      	bne.n	8001410 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80013e6:	f023 0302 	bic.w	r3, r3, #2
 80013ea:	f043 0202 	orr.w	r2, r3, #2
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80013f2:	6878      	ldr	r0, [r7, #4]
 80013f4:	f000 fa86 	bl	8001904 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2200      	movs	r2, #0
 80013fc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001402:	f023 0303 	bic.w	r3, r3, #3
 8001406:	f043 0201 	orr.w	r2, r3, #1
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	641a      	str	r2, [r3, #64]	; 0x40
 800140e:	e001      	b.n	8001414 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001410:	2301      	movs	r3, #1
 8001412:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2200      	movs	r2, #0
 8001418:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800141c:	7bfb      	ldrb	r3, [r7, #15]
}
 800141e:	4618      	mov	r0, r3
 8001420:	3710      	adds	r7, #16
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
	...

08001428 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001428:	b480      	push	{r7}
 800142a:	b085      	sub	sp, #20
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001430:	2300      	movs	r3, #0
 8001432:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800143a:	2b01      	cmp	r3, #1
 800143c:	d101      	bne.n	8001442 <HAL_ADC_Start+0x1a>
 800143e:	2302      	movs	r3, #2
 8001440:	e097      	b.n	8001572 <HAL_ADC_Start+0x14a>
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2201      	movs	r2, #1
 8001446:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	689b      	ldr	r3, [r3, #8]
 8001450:	f003 0301 	and.w	r3, r3, #1
 8001454:	2b01      	cmp	r3, #1
 8001456:	d018      	beq.n	800148a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	689a      	ldr	r2, [r3, #8]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f042 0201 	orr.w	r2, r2, #1
 8001466:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001468:	4b45      	ldr	r3, [pc, #276]	; (8001580 <HAL_ADC_Start+0x158>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a45      	ldr	r2, [pc, #276]	; (8001584 <HAL_ADC_Start+0x15c>)
 800146e:	fba2 2303 	umull	r2, r3, r2, r3
 8001472:	0c9a      	lsrs	r2, r3, #18
 8001474:	4613      	mov	r3, r2
 8001476:	005b      	lsls	r3, r3, #1
 8001478:	4413      	add	r3, r2
 800147a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800147c:	e002      	b.n	8001484 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800147e:	68bb      	ldr	r3, [r7, #8]
 8001480:	3b01      	subs	r3, #1
 8001482:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001484:	68bb      	ldr	r3, [r7, #8]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d1f9      	bne.n	800147e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	689b      	ldr	r3, [r3, #8]
 8001490:	f003 0301 	and.w	r3, r3, #1
 8001494:	2b01      	cmp	r3, #1
 8001496:	d15f      	bne.n	8001558 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80014a0:	f023 0301 	bic.w	r3, r3, #1
 80014a4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d007      	beq.n	80014ca <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014be:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80014c2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80014d6:	d106      	bne.n	80014e6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014dc:	f023 0206 	bic.w	r2, r3, #6
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	645a      	str	r2, [r3, #68]	; 0x44
 80014e4:	e002      	b.n	80014ec <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2200      	movs	r2, #0
 80014ea:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2200      	movs	r2, #0
 80014f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80014f4:	4b24      	ldr	r3, [pc, #144]	; (8001588 <HAL_ADC_Start+0x160>)
 80014f6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001500:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	f003 031f 	and.w	r3, r3, #31
 800150a:	2b00      	cmp	r3, #0
 800150c:	d10f      	bne.n	800152e <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	689b      	ldr	r3, [r3, #8]
 8001514:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001518:	2b00      	cmp	r3, #0
 800151a:	d129      	bne.n	8001570 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	689a      	ldr	r2, [r3, #8]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800152a:	609a      	str	r2, [r3, #8]
 800152c:	e020      	b.n	8001570 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a16      	ldr	r2, [pc, #88]	; (800158c <HAL_ADC_Start+0x164>)
 8001534:	4293      	cmp	r3, r2
 8001536:	d11b      	bne.n	8001570 <HAL_ADC_Start+0x148>
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	689b      	ldr	r3, [r3, #8]
 800153e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001542:	2b00      	cmp	r3, #0
 8001544:	d114      	bne.n	8001570 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	689a      	ldr	r2, [r3, #8]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001554:	609a      	str	r2, [r3, #8]
 8001556:	e00b      	b.n	8001570 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155c:	f043 0210 	orr.w	r2, r3, #16
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001568:	f043 0201 	orr.w	r2, r3, #1
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001570:	2300      	movs	r3, #0
}
 8001572:	4618      	mov	r0, r3
 8001574:	3714      	adds	r7, #20
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop
 8001580:	200000bc 	.word	0x200000bc
 8001584:	431bde83 	.word	0x431bde83
 8001588:	40012300 	.word	0x40012300
 800158c:	40012000 	.word	0x40012000

08001590 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b084      	sub	sp, #16
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
 8001598:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800159a:	2300      	movs	r3, #0
 800159c:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	689b      	ldr	r3, [r3, #8]
 80015a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015ac:	d113      	bne.n	80015d6 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	689b      	ldr	r3, [r3, #8]
 80015b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80015b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80015bc:	d10b      	bne.n	80015d6 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c2:	f043 0220 	orr.w	r2, r3, #32
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2200      	movs	r2, #0
 80015ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
 80015d4:	e063      	b.n	800169e <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80015d6:	f7ff fed7 	bl	8001388 <HAL_GetTick>
 80015da:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80015dc:	e021      	b.n	8001622 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80015e4:	d01d      	beq.n	8001622 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d007      	beq.n	80015fc <HAL_ADC_PollForConversion+0x6c>
 80015ec:	f7ff fecc 	bl	8001388 <HAL_GetTick>
 80015f0:	4602      	mov	r2, r0
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	1ad3      	subs	r3, r2, r3
 80015f6:	683a      	ldr	r2, [r7, #0]
 80015f8:	429a      	cmp	r2, r3
 80015fa:	d212      	bcs.n	8001622 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f003 0302 	and.w	r3, r3, #2
 8001606:	2b02      	cmp	r3, #2
 8001608:	d00b      	beq.n	8001622 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160e:	f043 0204 	orr.w	r2, r3, #4
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2200      	movs	r2, #0
 800161a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 800161e:	2303      	movs	r3, #3
 8001620:	e03d      	b.n	800169e <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f003 0302 	and.w	r3, r3, #2
 800162c:	2b02      	cmp	r3, #2
 800162e:	d1d6      	bne.n	80015de <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f06f 0212 	mvn.w	r2, #18
 8001638:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	689b      	ldr	r3, [r3, #8]
 800164c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001650:	2b00      	cmp	r3, #0
 8001652:	d123      	bne.n	800169c <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001658:	2b00      	cmp	r3, #0
 800165a:	d11f      	bne.n	800169c <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001662:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001666:	2b00      	cmp	r3, #0
 8001668:	d006      	beq.n	8001678 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001674:	2b00      	cmp	r3, #0
 8001676:	d111      	bne.n	800169c <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001688:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800168c:	2b00      	cmp	r3, #0
 800168e:	d105      	bne.n	800169c <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001694:	f043 0201 	orr.w	r2, r3, #1
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800169c:	2300      	movs	r3, #0
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3710      	adds	r7, #16
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}

080016a6 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80016a6:	b480      	push	{r7}
 80016a8:	b083      	sub	sp, #12
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	370c      	adds	r7, #12
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr

080016c0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b085      	sub	sp, #20
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
 80016c8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80016ca:	2300      	movs	r3, #0
 80016cc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	d101      	bne.n	80016dc <HAL_ADC_ConfigChannel+0x1c>
 80016d8:	2302      	movs	r3, #2
 80016da:	e105      	b.n	80018e8 <HAL_ADC_ConfigChannel+0x228>
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2201      	movs	r2, #1
 80016e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	2b09      	cmp	r3, #9
 80016ea:	d925      	bls.n	8001738 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	68d9      	ldr	r1, [r3, #12]
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	b29b      	uxth	r3, r3
 80016f8:	461a      	mov	r2, r3
 80016fa:	4613      	mov	r3, r2
 80016fc:	005b      	lsls	r3, r3, #1
 80016fe:	4413      	add	r3, r2
 8001700:	3b1e      	subs	r3, #30
 8001702:	2207      	movs	r2, #7
 8001704:	fa02 f303 	lsl.w	r3, r2, r3
 8001708:	43da      	mvns	r2, r3
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	400a      	ands	r2, r1
 8001710:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	68d9      	ldr	r1, [r3, #12]
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	689a      	ldr	r2, [r3, #8]
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	b29b      	uxth	r3, r3
 8001722:	4618      	mov	r0, r3
 8001724:	4603      	mov	r3, r0
 8001726:	005b      	lsls	r3, r3, #1
 8001728:	4403      	add	r3, r0
 800172a:	3b1e      	subs	r3, #30
 800172c:	409a      	lsls	r2, r3
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	430a      	orrs	r2, r1
 8001734:	60da      	str	r2, [r3, #12]
 8001736:	e022      	b.n	800177e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	6919      	ldr	r1, [r3, #16]
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	b29b      	uxth	r3, r3
 8001744:	461a      	mov	r2, r3
 8001746:	4613      	mov	r3, r2
 8001748:	005b      	lsls	r3, r3, #1
 800174a:	4413      	add	r3, r2
 800174c:	2207      	movs	r2, #7
 800174e:	fa02 f303 	lsl.w	r3, r2, r3
 8001752:	43da      	mvns	r2, r3
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	400a      	ands	r2, r1
 800175a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	6919      	ldr	r1, [r3, #16]
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	689a      	ldr	r2, [r3, #8]
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	b29b      	uxth	r3, r3
 800176c:	4618      	mov	r0, r3
 800176e:	4603      	mov	r3, r0
 8001770:	005b      	lsls	r3, r3, #1
 8001772:	4403      	add	r3, r0
 8001774:	409a      	lsls	r2, r3
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	430a      	orrs	r2, r1
 800177c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	2b06      	cmp	r3, #6
 8001784:	d824      	bhi.n	80017d0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	685a      	ldr	r2, [r3, #4]
 8001790:	4613      	mov	r3, r2
 8001792:	009b      	lsls	r3, r3, #2
 8001794:	4413      	add	r3, r2
 8001796:	3b05      	subs	r3, #5
 8001798:	221f      	movs	r2, #31
 800179a:	fa02 f303 	lsl.w	r3, r2, r3
 800179e:	43da      	mvns	r2, r3
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	400a      	ands	r2, r1
 80017a6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	b29b      	uxth	r3, r3
 80017b4:	4618      	mov	r0, r3
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	685a      	ldr	r2, [r3, #4]
 80017ba:	4613      	mov	r3, r2
 80017bc:	009b      	lsls	r3, r3, #2
 80017be:	4413      	add	r3, r2
 80017c0:	3b05      	subs	r3, #5
 80017c2:	fa00 f203 	lsl.w	r2, r0, r3
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	430a      	orrs	r2, r1
 80017cc:	635a      	str	r2, [r3, #52]	; 0x34
 80017ce:	e04c      	b.n	800186a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	2b0c      	cmp	r3, #12
 80017d6:	d824      	bhi.n	8001822 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	685a      	ldr	r2, [r3, #4]
 80017e2:	4613      	mov	r3, r2
 80017e4:	009b      	lsls	r3, r3, #2
 80017e6:	4413      	add	r3, r2
 80017e8:	3b23      	subs	r3, #35	; 0x23
 80017ea:	221f      	movs	r2, #31
 80017ec:	fa02 f303 	lsl.w	r3, r2, r3
 80017f0:	43da      	mvns	r2, r3
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	400a      	ands	r2, r1
 80017f8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	b29b      	uxth	r3, r3
 8001806:	4618      	mov	r0, r3
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	685a      	ldr	r2, [r3, #4]
 800180c:	4613      	mov	r3, r2
 800180e:	009b      	lsls	r3, r3, #2
 8001810:	4413      	add	r3, r2
 8001812:	3b23      	subs	r3, #35	; 0x23
 8001814:	fa00 f203 	lsl.w	r2, r0, r3
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	430a      	orrs	r2, r1
 800181e:	631a      	str	r2, [r3, #48]	; 0x30
 8001820:	e023      	b.n	800186a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	685a      	ldr	r2, [r3, #4]
 800182c:	4613      	mov	r3, r2
 800182e:	009b      	lsls	r3, r3, #2
 8001830:	4413      	add	r3, r2
 8001832:	3b41      	subs	r3, #65	; 0x41
 8001834:	221f      	movs	r2, #31
 8001836:	fa02 f303 	lsl.w	r3, r2, r3
 800183a:	43da      	mvns	r2, r3
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	400a      	ands	r2, r1
 8001842:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	b29b      	uxth	r3, r3
 8001850:	4618      	mov	r0, r3
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	685a      	ldr	r2, [r3, #4]
 8001856:	4613      	mov	r3, r2
 8001858:	009b      	lsls	r3, r3, #2
 800185a:	4413      	add	r3, r2
 800185c:	3b41      	subs	r3, #65	; 0x41
 800185e:	fa00 f203 	lsl.w	r2, r0, r3
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	430a      	orrs	r2, r1
 8001868:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800186a:	4b22      	ldr	r3, [pc, #136]	; (80018f4 <HAL_ADC_ConfigChannel+0x234>)
 800186c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a21      	ldr	r2, [pc, #132]	; (80018f8 <HAL_ADC_ConfigChannel+0x238>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d109      	bne.n	800188c <HAL_ADC_ConfigChannel+0x1cc>
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	2b12      	cmp	r3, #18
 800187e:	d105      	bne.n	800188c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a19      	ldr	r2, [pc, #100]	; (80018f8 <HAL_ADC_ConfigChannel+0x238>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d123      	bne.n	80018de <HAL_ADC_ConfigChannel+0x21e>
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	2b10      	cmp	r3, #16
 800189c:	d003      	beq.n	80018a6 <HAL_ADC_ConfigChannel+0x1e6>
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	2b11      	cmp	r3, #17
 80018a4:	d11b      	bne.n	80018de <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	2b10      	cmp	r3, #16
 80018b8:	d111      	bne.n	80018de <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80018ba:	4b10      	ldr	r3, [pc, #64]	; (80018fc <HAL_ADC_ConfigChannel+0x23c>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a10      	ldr	r2, [pc, #64]	; (8001900 <HAL_ADC_ConfigChannel+0x240>)
 80018c0:	fba2 2303 	umull	r2, r3, r2, r3
 80018c4:	0c9a      	lsrs	r2, r3, #18
 80018c6:	4613      	mov	r3, r2
 80018c8:	009b      	lsls	r3, r3, #2
 80018ca:	4413      	add	r3, r2
 80018cc:	005b      	lsls	r3, r3, #1
 80018ce:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80018d0:	e002      	b.n	80018d8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80018d2:	68bb      	ldr	r3, [r7, #8]
 80018d4:	3b01      	subs	r3, #1
 80018d6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d1f9      	bne.n	80018d2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2200      	movs	r2, #0
 80018e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80018e6:	2300      	movs	r3, #0
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	3714      	adds	r7, #20
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr
 80018f4:	40012300 	.word	0x40012300
 80018f8:	40012000 	.word	0x40012000
 80018fc:	200000bc 	.word	0x200000bc
 8001900:	431bde83 	.word	0x431bde83

08001904 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001904:	b480      	push	{r7}
 8001906:	b085      	sub	sp, #20
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800190c:	4b79      	ldr	r3, [pc, #484]	; (8001af4 <ADC_Init+0x1f0>)
 800190e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	685a      	ldr	r2, [r3, #4]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	431a      	orrs	r2, r3
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	685a      	ldr	r2, [r3, #4]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001938:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	6859      	ldr	r1, [r3, #4]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	691b      	ldr	r3, [r3, #16]
 8001944:	021a      	lsls	r2, r3, #8
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	430a      	orrs	r2, r1
 800194c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	685a      	ldr	r2, [r3, #4]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800195c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	6859      	ldr	r1, [r3, #4]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	689a      	ldr	r2, [r3, #8]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	430a      	orrs	r2, r1
 800196e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	689a      	ldr	r2, [r3, #8]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800197e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	6899      	ldr	r1, [r3, #8]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	68da      	ldr	r2, [r3, #12]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	430a      	orrs	r2, r1
 8001990:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001996:	4a58      	ldr	r2, [pc, #352]	; (8001af8 <ADC_Init+0x1f4>)
 8001998:	4293      	cmp	r3, r2
 800199a:	d022      	beq.n	80019e2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	689a      	ldr	r2, [r3, #8]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80019aa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	6899      	ldr	r1, [r3, #8]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	430a      	orrs	r2, r1
 80019bc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	689a      	ldr	r2, [r3, #8]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80019cc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	6899      	ldr	r1, [r3, #8]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	430a      	orrs	r2, r1
 80019de:	609a      	str	r2, [r3, #8]
 80019e0:	e00f      	b.n	8001a02 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	689a      	ldr	r2, [r3, #8]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80019f0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	689a      	ldr	r2, [r3, #8]
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001a00:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	689a      	ldr	r2, [r3, #8]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f022 0202 	bic.w	r2, r2, #2
 8001a10:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	6899      	ldr	r1, [r3, #8]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	7e1b      	ldrb	r3, [r3, #24]
 8001a1c:	005a      	lsls	r2, r3, #1
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	430a      	orrs	r2, r1
 8001a24:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d01b      	beq.n	8001a68 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	685a      	ldr	r2, [r3, #4]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001a3e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	685a      	ldr	r2, [r3, #4]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001a4e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	6859      	ldr	r1, [r3, #4]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a5a:	3b01      	subs	r3, #1
 8001a5c:	035a      	lsls	r2, r3, #13
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	430a      	orrs	r2, r1
 8001a64:	605a      	str	r2, [r3, #4]
 8001a66:	e007      	b.n	8001a78 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	685a      	ldr	r2, [r3, #4]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a76:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001a86:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	69db      	ldr	r3, [r3, #28]
 8001a92:	3b01      	subs	r3, #1
 8001a94:	051a      	lsls	r2, r3, #20
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	430a      	orrs	r2, r1
 8001a9c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	689a      	ldr	r2, [r3, #8]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001aac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	6899      	ldr	r1, [r3, #8]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001aba:	025a      	lsls	r2, r3, #9
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	430a      	orrs	r2, r1
 8001ac2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	689a      	ldr	r2, [r3, #8]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ad2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	6899      	ldr	r1, [r3, #8]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	695b      	ldr	r3, [r3, #20]
 8001ade:	029a      	lsls	r2, r3, #10
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	430a      	orrs	r2, r1
 8001ae6:	609a      	str	r2, [r3, #8]
}
 8001ae8:	bf00      	nop
 8001aea:	3714      	adds	r7, #20
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr
 8001af4:	40012300 	.word	0x40012300
 8001af8:	0f000001 	.word	0x0f000001

08001afc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b085      	sub	sp, #20
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	f003 0307 	and.w	r3, r3, #7
 8001b0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b0c:	4b0c      	ldr	r3, [pc, #48]	; (8001b40 <__NVIC_SetPriorityGrouping+0x44>)
 8001b0e:	68db      	ldr	r3, [r3, #12]
 8001b10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b12:	68ba      	ldr	r2, [r7, #8]
 8001b14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b18:	4013      	ands	r3, r2
 8001b1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b2e:	4a04      	ldr	r2, [pc, #16]	; (8001b40 <__NVIC_SetPriorityGrouping+0x44>)
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	60d3      	str	r3, [r2, #12]
}
 8001b34:	bf00      	nop
 8001b36:	3714      	adds	r7, #20
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr
 8001b40:	e000ed00 	.word	0xe000ed00

08001b44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b48:	4b04      	ldr	r3, [pc, #16]	; (8001b5c <__NVIC_GetPriorityGrouping+0x18>)
 8001b4a:	68db      	ldr	r3, [r3, #12]
 8001b4c:	0a1b      	lsrs	r3, r3, #8
 8001b4e:	f003 0307 	and.w	r3, r3, #7
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr
 8001b5c:	e000ed00 	.word	0xe000ed00

08001b60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	4603      	mov	r3, r0
 8001b68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	db0b      	blt.n	8001b8a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b72:	79fb      	ldrb	r3, [r7, #7]
 8001b74:	f003 021f 	and.w	r2, r3, #31
 8001b78:	4907      	ldr	r1, [pc, #28]	; (8001b98 <__NVIC_EnableIRQ+0x38>)
 8001b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b7e:	095b      	lsrs	r3, r3, #5
 8001b80:	2001      	movs	r0, #1
 8001b82:	fa00 f202 	lsl.w	r2, r0, r2
 8001b86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b8a:	bf00      	nop
 8001b8c:	370c      	adds	r7, #12
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr
 8001b96:	bf00      	nop
 8001b98:	e000e100 	.word	0xe000e100

08001b9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b083      	sub	sp, #12
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	6039      	str	r1, [r7, #0]
 8001ba6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ba8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	db0a      	blt.n	8001bc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	b2da      	uxtb	r2, r3
 8001bb4:	490c      	ldr	r1, [pc, #48]	; (8001be8 <__NVIC_SetPriority+0x4c>)
 8001bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bba:	0112      	lsls	r2, r2, #4
 8001bbc:	b2d2      	uxtb	r2, r2
 8001bbe:	440b      	add	r3, r1
 8001bc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bc4:	e00a      	b.n	8001bdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	b2da      	uxtb	r2, r3
 8001bca:	4908      	ldr	r1, [pc, #32]	; (8001bec <__NVIC_SetPriority+0x50>)
 8001bcc:	79fb      	ldrb	r3, [r7, #7]
 8001bce:	f003 030f 	and.w	r3, r3, #15
 8001bd2:	3b04      	subs	r3, #4
 8001bd4:	0112      	lsls	r2, r2, #4
 8001bd6:	b2d2      	uxtb	r2, r2
 8001bd8:	440b      	add	r3, r1
 8001bda:	761a      	strb	r2, [r3, #24]
}
 8001bdc:	bf00      	nop
 8001bde:	370c      	adds	r7, #12
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr
 8001be8:	e000e100 	.word	0xe000e100
 8001bec:	e000ed00 	.word	0xe000ed00

08001bf0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b089      	sub	sp, #36	; 0x24
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	60f8      	str	r0, [r7, #12]
 8001bf8:	60b9      	str	r1, [r7, #8]
 8001bfa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	f003 0307 	and.w	r3, r3, #7
 8001c02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c04:	69fb      	ldr	r3, [r7, #28]
 8001c06:	f1c3 0307 	rsb	r3, r3, #7
 8001c0a:	2b04      	cmp	r3, #4
 8001c0c:	bf28      	it	cs
 8001c0e:	2304      	movcs	r3, #4
 8001c10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c12:	69fb      	ldr	r3, [r7, #28]
 8001c14:	3304      	adds	r3, #4
 8001c16:	2b06      	cmp	r3, #6
 8001c18:	d902      	bls.n	8001c20 <NVIC_EncodePriority+0x30>
 8001c1a:	69fb      	ldr	r3, [r7, #28]
 8001c1c:	3b03      	subs	r3, #3
 8001c1e:	e000      	b.n	8001c22 <NVIC_EncodePriority+0x32>
 8001c20:	2300      	movs	r3, #0
 8001c22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c24:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001c28:	69bb      	ldr	r3, [r7, #24]
 8001c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2e:	43da      	mvns	r2, r3
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	401a      	ands	r2, r3
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c38:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c42:	43d9      	mvns	r1, r3
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c48:	4313      	orrs	r3, r2
         );
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3724      	adds	r7, #36	; 0x24
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr

08001c56 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c56:	b580      	push	{r7, lr}
 8001c58:	b082      	sub	sp, #8
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	f7ff ff4c 	bl	8001afc <__NVIC_SetPriorityGrouping>
}
 8001c64:	bf00      	nop
 8001c66:	3708      	adds	r7, #8
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}

08001c6c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b086      	sub	sp, #24
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	4603      	mov	r3, r0
 8001c74:	60b9      	str	r1, [r7, #8]
 8001c76:	607a      	str	r2, [r7, #4]
 8001c78:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c7e:	f7ff ff61 	bl	8001b44 <__NVIC_GetPriorityGrouping>
 8001c82:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c84:	687a      	ldr	r2, [r7, #4]
 8001c86:	68b9      	ldr	r1, [r7, #8]
 8001c88:	6978      	ldr	r0, [r7, #20]
 8001c8a:	f7ff ffb1 	bl	8001bf0 <NVIC_EncodePriority>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c94:	4611      	mov	r1, r2
 8001c96:	4618      	mov	r0, r3
 8001c98:	f7ff ff80 	bl	8001b9c <__NVIC_SetPriority>
}
 8001c9c:	bf00      	nop
 8001c9e:	3718      	adds	r7, #24
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}

08001ca4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b082      	sub	sp, #8
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	4603      	mov	r3, r0
 8001cac:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f7ff ff54 	bl	8001b60 <__NVIC_EnableIRQ>
}
 8001cb8:	bf00      	nop
 8001cba:	3708      	adds	r7, #8
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}

08001cc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b089      	sub	sp, #36	; 0x24
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
 8001cc8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	61fb      	str	r3, [r7, #28]
 8001cda:	e14d      	b.n	8001f78 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001cdc:	2201      	movs	r2, #1
 8001cde:	69fb      	ldr	r3, [r7, #28]
 8001ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	697a      	ldr	r2, [r7, #20]
 8001cec:	4013      	ands	r3, r2
 8001cee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001cf0:	693a      	ldr	r2, [r7, #16]
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	f040 813c 	bne.w	8001f72 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	f003 0303 	and.w	r3, r3, #3
 8001d02:	2b01      	cmp	r3, #1
 8001d04:	d005      	beq.n	8001d12 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d0e:	2b02      	cmp	r3, #2
 8001d10:	d130      	bne.n	8001d74 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d18:	69fb      	ldr	r3, [r7, #28]
 8001d1a:	005b      	lsls	r3, r3, #1
 8001d1c:	2203      	movs	r2, #3
 8001d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d22:	43db      	mvns	r3, r3
 8001d24:	69ba      	ldr	r2, [r7, #24]
 8001d26:	4013      	ands	r3, r2
 8001d28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	68da      	ldr	r2, [r3, #12]
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	005b      	lsls	r3, r3, #1
 8001d32:	fa02 f303 	lsl.w	r3, r2, r3
 8001d36:	69ba      	ldr	r2, [r7, #24]
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	69ba      	ldr	r2, [r7, #24]
 8001d40:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d48:	2201      	movs	r2, #1
 8001d4a:	69fb      	ldr	r3, [r7, #28]
 8001d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d50:	43db      	mvns	r3, r3
 8001d52:	69ba      	ldr	r2, [r7, #24]
 8001d54:	4013      	ands	r3, r2
 8001d56:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	091b      	lsrs	r3, r3, #4
 8001d5e:	f003 0201 	and.w	r2, r3, #1
 8001d62:	69fb      	ldr	r3, [r7, #28]
 8001d64:	fa02 f303 	lsl.w	r3, r2, r3
 8001d68:	69ba      	ldr	r2, [r7, #24]
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	69ba      	ldr	r2, [r7, #24]
 8001d72:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	f003 0303 	and.w	r3, r3, #3
 8001d7c:	2b03      	cmp	r3, #3
 8001d7e:	d017      	beq.n	8001db0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	68db      	ldr	r3, [r3, #12]
 8001d84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d86:	69fb      	ldr	r3, [r7, #28]
 8001d88:	005b      	lsls	r3, r3, #1
 8001d8a:	2203      	movs	r2, #3
 8001d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d90:	43db      	mvns	r3, r3
 8001d92:	69ba      	ldr	r2, [r7, #24]
 8001d94:	4013      	ands	r3, r2
 8001d96:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	689a      	ldr	r2, [r3, #8]
 8001d9c:	69fb      	ldr	r3, [r7, #28]
 8001d9e:	005b      	lsls	r3, r3, #1
 8001da0:	fa02 f303 	lsl.w	r3, r2, r3
 8001da4:	69ba      	ldr	r2, [r7, #24]
 8001da6:	4313      	orrs	r3, r2
 8001da8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	69ba      	ldr	r2, [r7, #24]
 8001dae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	f003 0303 	and.w	r3, r3, #3
 8001db8:	2b02      	cmp	r3, #2
 8001dba:	d123      	bne.n	8001e04 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001dbc:	69fb      	ldr	r3, [r7, #28]
 8001dbe:	08da      	lsrs	r2, r3, #3
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	3208      	adds	r2, #8
 8001dc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001dca:	69fb      	ldr	r3, [r7, #28]
 8001dcc:	f003 0307 	and.w	r3, r3, #7
 8001dd0:	009b      	lsls	r3, r3, #2
 8001dd2:	220f      	movs	r2, #15
 8001dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd8:	43db      	mvns	r3, r3
 8001dda:	69ba      	ldr	r2, [r7, #24]
 8001ddc:	4013      	ands	r3, r2
 8001dde:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	691a      	ldr	r2, [r3, #16]
 8001de4:	69fb      	ldr	r3, [r7, #28]
 8001de6:	f003 0307 	and.w	r3, r3, #7
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	fa02 f303 	lsl.w	r3, r2, r3
 8001df0:	69ba      	ldr	r2, [r7, #24]
 8001df2:	4313      	orrs	r3, r2
 8001df4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001df6:	69fb      	ldr	r3, [r7, #28]
 8001df8:	08da      	lsrs	r2, r3, #3
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	3208      	adds	r2, #8
 8001dfe:	69b9      	ldr	r1, [r7, #24]
 8001e00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	005b      	lsls	r3, r3, #1
 8001e0e:	2203      	movs	r2, #3
 8001e10:	fa02 f303 	lsl.w	r3, r2, r3
 8001e14:	43db      	mvns	r3, r3
 8001e16:	69ba      	ldr	r2, [r7, #24]
 8001e18:	4013      	ands	r3, r2
 8001e1a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	f003 0203 	and.w	r2, r3, #3
 8001e24:	69fb      	ldr	r3, [r7, #28]
 8001e26:	005b      	lsls	r3, r3, #1
 8001e28:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2c:	69ba      	ldr	r2, [r7, #24]
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	69ba      	ldr	r2, [r7, #24]
 8001e36:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	f000 8096 	beq.w	8001f72 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e46:	2300      	movs	r3, #0
 8001e48:	60fb      	str	r3, [r7, #12]
 8001e4a:	4b51      	ldr	r3, [pc, #324]	; (8001f90 <HAL_GPIO_Init+0x2d0>)
 8001e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e4e:	4a50      	ldr	r2, [pc, #320]	; (8001f90 <HAL_GPIO_Init+0x2d0>)
 8001e50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e54:	6453      	str	r3, [r2, #68]	; 0x44
 8001e56:	4b4e      	ldr	r3, [pc, #312]	; (8001f90 <HAL_GPIO_Init+0x2d0>)
 8001e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e5e:	60fb      	str	r3, [r7, #12]
 8001e60:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e62:	4a4c      	ldr	r2, [pc, #304]	; (8001f94 <HAL_GPIO_Init+0x2d4>)
 8001e64:	69fb      	ldr	r3, [r7, #28]
 8001e66:	089b      	lsrs	r3, r3, #2
 8001e68:	3302      	adds	r3, #2
 8001e6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e70:	69fb      	ldr	r3, [r7, #28]
 8001e72:	f003 0303 	and.w	r3, r3, #3
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	220f      	movs	r2, #15
 8001e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7e:	43db      	mvns	r3, r3
 8001e80:	69ba      	ldr	r2, [r7, #24]
 8001e82:	4013      	ands	r3, r2
 8001e84:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	4a43      	ldr	r2, [pc, #268]	; (8001f98 <HAL_GPIO_Init+0x2d8>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d00d      	beq.n	8001eaa <HAL_GPIO_Init+0x1ea>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	4a42      	ldr	r2, [pc, #264]	; (8001f9c <HAL_GPIO_Init+0x2dc>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d007      	beq.n	8001ea6 <HAL_GPIO_Init+0x1e6>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	4a41      	ldr	r2, [pc, #260]	; (8001fa0 <HAL_GPIO_Init+0x2e0>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d101      	bne.n	8001ea2 <HAL_GPIO_Init+0x1e2>
 8001e9e:	2302      	movs	r3, #2
 8001ea0:	e004      	b.n	8001eac <HAL_GPIO_Init+0x1ec>
 8001ea2:	2307      	movs	r3, #7
 8001ea4:	e002      	b.n	8001eac <HAL_GPIO_Init+0x1ec>
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e000      	b.n	8001eac <HAL_GPIO_Init+0x1ec>
 8001eaa:	2300      	movs	r3, #0
 8001eac:	69fa      	ldr	r2, [r7, #28]
 8001eae:	f002 0203 	and.w	r2, r2, #3
 8001eb2:	0092      	lsls	r2, r2, #2
 8001eb4:	4093      	lsls	r3, r2
 8001eb6:	69ba      	ldr	r2, [r7, #24]
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ebc:	4935      	ldr	r1, [pc, #212]	; (8001f94 <HAL_GPIO_Init+0x2d4>)
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	089b      	lsrs	r3, r3, #2
 8001ec2:	3302      	adds	r3, #2
 8001ec4:	69ba      	ldr	r2, [r7, #24]
 8001ec6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001eca:	4b36      	ldr	r3, [pc, #216]	; (8001fa4 <HAL_GPIO_Init+0x2e4>)
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	43db      	mvns	r3, r3
 8001ed4:	69ba      	ldr	r2, [r7, #24]
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d003      	beq.n	8001eee <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8001ee6:	69ba      	ldr	r2, [r7, #24]
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	4313      	orrs	r3, r2
 8001eec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001eee:	4a2d      	ldr	r2, [pc, #180]	; (8001fa4 <HAL_GPIO_Init+0x2e4>)
 8001ef0:	69bb      	ldr	r3, [r7, #24]
 8001ef2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ef4:	4b2b      	ldr	r3, [pc, #172]	; (8001fa4 <HAL_GPIO_Init+0x2e4>)
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	43db      	mvns	r3, r3
 8001efe:	69ba      	ldr	r2, [r7, #24]
 8001f00:	4013      	ands	r3, r2
 8001f02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d003      	beq.n	8001f18 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8001f10:	69ba      	ldr	r2, [r7, #24]
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	4313      	orrs	r3, r2
 8001f16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f18:	4a22      	ldr	r2, [pc, #136]	; (8001fa4 <HAL_GPIO_Init+0x2e4>)
 8001f1a:	69bb      	ldr	r3, [r7, #24]
 8001f1c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f1e:	4b21      	ldr	r3, [pc, #132]	; (8001fa4 <HAL_GPIO_Init+0x2e4>)
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	43db      	mvns	r3, r3
 8001f28:	69ba      	ldr	r2, [r7, #24]
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d003      	beq.n	8001f42 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001f3a:	69ba      	ldr	r2, [r7, #24]
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f42:	4a18      	ldr	r2, [pc, #96]	; (8001fa4 <HAL_GPIO_Init+0x2e4>)
 8001f44:	69bb      	ldr	r3, [r7, #24]
 8001f46:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f48:	4b16      	ldr	r3, [pc, #88]	; (8001fa4 <HAL_GPIO_Init+0x2e4>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	43db      	mvns	r3, r3
 8001f52:	69ba      	ldr	r2, [r7, #24]
 8001f54:	4013      	ands	r3, r2
 8001f56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d003      	beq.n	8001f6c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001f64:	69ba      	ldr	r2, [r7, #24]
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f6c:	4a0d      	ldr	r2, [pc, #52]	; (8001fa4 <HAL_GPIO_Init+0x2e4>)
 8001f6e:	69bb      	ldr	r3, [r7, #24]
 8001f70:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f72:	69fb      	ldr	r3, [r7, #28]
 8001f74:	3301      	adds	r3, #1
 8001f76:	61fb      	str	r3, [r7, #28]
 8001f78:	69fb      	ldr	r3, [r7, #28]
 8001f7a:	2b0f      	cmp	r3, #15
 8001f7c:	f67f aeae 	bls.w	8001cdc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f80:	bf00      	nop
 8001f82:	bf00      	nop
 8001f84:	3724      	adds	r7, #36	; 0x24
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr
 8001f8e:	bf00      	nop
 8001f90:	40023800 	.word	0x40023800
 8001f94:	40013800 	.word	0x40013800
 8001f98:	40020000 	.word	0x40020000
 8001f9c:	40020400 	.word	0x40020400
 8001fa0:	40020800 	.word	0x40020800
 8001fa4:	40013c00 	.word	0x40013c00

08001fa8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
 8001fb0:	460b      	mov	r3, r1
 8001fb2:	807b      	strh	r3, [r7, #2]
 8001fb4:	4613      	mov	r3, r2
 8001fb6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001fb8:	787b      	ldrb	r3, [r7, #1]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d003      	beq.n	8001fc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fbe:	887a      	ldrh	r2, [r7, #2]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001fc4:	e003      	b.n	8001fce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001fc6:	887b      	ldrh	r3, [r7, #2]
 8001fc8:	041a      	lsls	r2, r3, #16
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	619a      	str	r2, [r3, #24]
}
 8001fce:	bf00      	nop
 8001fd0:	370c      	adds	r7, #12
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr
	...

08001fdc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b082      	sub	sp, #8
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001fe6:	4b08      	ldr	r3, [pc, #32]	; (8002008 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001fe8:	695a      	ldr	r2, [r3, #20]
 8001fea:	88fb      	ldrh	r3, [r7, #6]
 8001fec:	4013      	ands	r3, r2
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d006      	beq.n	8002000 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001ff2:	4a05      	ldr	r2, [pc, #20]	; (8002008 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ff4:	88fb      	ldrh	r3, [r7, #6]
 8001ff6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001ff8:	88fb      	ldrh	r3, [r7, #6]
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f7fe fddc 	bl	8000bb8 <HAL_GPIO_EXTI_Callback>
  }
}
 8002000:	bf00      	nop
 8002002:	3708      	adds	r7, #8
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}
 8002008:	40013c00 	.word	0x40013c00

0800200c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b084      	sub	sp, #16
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
 8002014:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d101      	bne.n	8002020 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800201c:	2301      	movs	r3, #1
 800201e:	e0cc      	b.n	80021ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002020:	4b68      	ldr	r3, [pc, #416]	; (80021c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f003 0307 	and.w	r3, r3, #7
 8002028:	683a      	ldr	r2, [r7, #0]
 800202a:	429a      	cmp	r2, r3
 800202c:	d90c      	bls.n	8002048 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800202e:	4b65      	ldr	r3, [pc, #404]	; (80021c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002030:	683a      	ldr	r2, [r7, #0]
 8002032:	b2d2      	uxtb	r2, r2
 8002034:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002036:	4b63      	ldr	r3, [pc, #396]	; (80021c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f003 0307 	and.w	r3, r3, #7
 800203e:	683a      	ldr	r2, [r7, #0]
 8002040:	429a      	cmp	r2, r3
 8002042:	d001      	beq.n	8002048 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	e0b8      	b.n	80021ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f003 0302 	and.w	r3, r3, #2
 8002050:	2b00      	cmp	r3, #0
 8002052:	d020      	beq.n	8002096 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f003 0304 	and.w	r3, r3, #4
 800205c:	2b00      	cmp	r3, #0
 800205e:	d005      	beq.n	800206c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002060:	4b59      	ldr	r3, [pc, #356]	; (80021c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	4a58      	ldr	r2, [pc, #352]	; (80021c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002066:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800206a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f003 0308 	and.w	r3, r3, #8
 8002074:	2b00      	cmp	r3, #0
 8002076:	d005      	beq.n	8002084 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002078:	4b53      	ldr	r3, [pc, #332]	; (80021c8 <HAL_RCC_ClockConfig+0x1bc>)
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	4a52      	ldr	r2, [pc, #328]	; (80021c8 <HAL_RCC_ClockConfig+0x1bc>)
 800207e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002082:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002084:	4b50      	ldr	r3, [pc, #320]	; (80021c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002086:	689b      	ldr	r3, [r3, #8]
 8002088:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	494d      	ldr	r1, [pc, #308]	; (80021c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002092:	4313      	orrs	r3, r2
 8002094:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 0301 	and.w	r3, r3, #1
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d044      	beq.n	800212c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	2b01      	cmp	r3, #1
 80020a8:	d107      	bne.n	80020ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020aa:	4b47      	ldr	r3, [pc, #284]	; (80021c8 <HAL_RCC_ClockConfig+0x1bc>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d119      	bne.n	80020ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e07f      	b.n	80021ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	2b02      	cmp	r3, #2
 80020c0:	d003      	beq.n	80020ca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020c6:	2b03      	cmp	r3, #3
 80020c8:	d107      	bne.n	80020da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020ca:	4b3f      	ldr	r3, [pc, #252]	; (80021c8 <HAL_RCC_ClockConfig+0x1bc>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d109      	bne.n	80020ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e06f      	b.n	80021ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020da:	4b3b      	ldr	r3, [pc, #236]	; (80021c8 <HAL_RCC_ClockConfig+0x1bc>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 0302 	and.w	r3, r3, #2
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d101      	bne.n	80020ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	e067      	b.n	80021ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020ea:	4b37      	ldr	r3, [pc, #220]	; (80021c8 <HAL_RCC_ClockConfig+0x1bc>)
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	f023 0203 	bic.w	r2, r3, #3
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	4934      	ldr	r1, [pc, #208]	; (80021c8 <HAL_RCC_ClockConfig+0x1bc>)
 80020f8:	4313      	orrs	r3, r2
 80020fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020fc:	f7ff f944 	bl	8001388 <HAL_GetTick>
 8002100:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002102:	e00a      	b.n	800211a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002104:	f7ff f940 	bl	8001388 <HAL_GetTick>
 8002108:	4602      	mov	r2, r0
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	1ad3      	subs	r3, r2, r3
 800210e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002112:	4293      	cmp	r3, r2
 8002114:	d901      	bls.n	800211a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002116:	2303      	movs	r3, #3
 8002118:	e04f      	b.n	80021ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800211a:	4b2b      	ldr	r3, [pc, #172]	; (80021c8 <HAL_RCC_ClockConfig+0x1bc>)
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	f003 020c 	and.w	r2, r3, #12
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	429a      	cmp	r2, r3
 800212a:	d1eb      	bne.n	8002104 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800212c:	4b25      	ldr	r3, [pc, #148]	; (80021c4 <HAL_RCC_ClockConfig+0x1b8>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f003 0307 	and.w	r3, r3, #7
 8002134:	683a      	ldr	r2, [r7, #0]
 8002136:	429a      	cmp	r2, r3
 8002138:	d20c      	bcs.n	8002154 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800213a:	4b22      	ldr	r3, [pc, #136]	; (80021c4 <HAL_RCC_ClockConfig+0x1b8>)
 800213c:	683a      	ldr	r2, [r7, #0]
 800213e:	b2d2      	uxtb	r2, r2
 8002140:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002142:	4b20      	ldr	r3, [pc, #128]	; (80021c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 0307 	and.w	r3, r3, #7
 800214a:	683a      	ldr	r2, [r7, #0]
 800214c:	429a      	cmp	r2, r3
 800214e:	d001      	beq.n	8002154 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002150:	2301      	movs	r3, #1
 8002152:	e032      	b.n	80021ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 0304 	and.w	r3, r3, #4
 800215c:	2b00      	cmp	r3, #0
 800215e:	d008      	beq.n	8002172 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002160:	4b19      	ldr	r3, [pc, #100]	; (80021c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	68db      	ldr	r3, [r3, #12]
 800216c:	4916      	ldr	r1, [pc, #88]	; (80021c8 <HAL_RCC_ClockConfig+0x1bc>)
 800216e:	4313      	orrs	r3, r2
 8002170:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f003 0308 	and.w	r3, r3, #8
 800217a:	2b00      	cmp	r3, #0
 800217c:	d009      	beq.n	8002192 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800217e:	4b12      	ldr	r3, [pc, #72]	; (80021c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	691b      	ldr	r3, [r3, #16]
 800218a:	00db      	lsls	r3, r3, #3
 800218c:	490e      	ldr	r1, [pc, #56]	; (80021c8 <HAL_RCC_ClockConfig+0x1bc>)
 800218e:	4313      	orrs	r3, r2
 8002190:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002192:	f000 f821 	bl	80021d8 <HAL_RCC_GetSysClockFreq>
 8002196:	4602      	mov	r2, r0
 8002198:	4b0b      	ldr	r3, [pc, #44]	; (80021c8 <HAL_RCC_ClockConfig+0x1bc>)
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	091b      	lsrs	r3, r3, #4
 800219e:	f003 030f 	and.w	r3, r3, #15
 80021a2:	490a      	ldr	r1, [pc, #40]	; (80021cc <HAL_RCC_ClockConfig+0x1c0>)
 80021a4:	5ccb      	ldrb	r3, [r1, r3]
 80021a6:	fa22 f303 	lsr.w	r3, r2, r3
 80021aa:	4a09      	ldr	r2, [pc, #36]	; (80021d0 <HAL_RCC_ClockConfig+0x1c4>)
 80021ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80021ae:	4b09      	ldr	r3, [pc, #36]	; (80021d4 <HAL_RCC_ClockConfig+0x1c8>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4618      	mov	r0, r3
 80021b4:	f7fe fe94 	bl	8000ee0 <HAL_InitTick>

  return HAL_OK;
 80021b8:	2300      	movs	r3, #0
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3710      	adds	r7, #16
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	40023c00 	.word	0x40023c00
 80021c8:	40023800 	.word	0x40023800
 80021cc:	08007d54 	.word	0x08007d54
 80021d0:	200000bc 	.word	0x200000bc
 80021d4:	200000c0 	.word	0x200000c0

080021d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80021dc:	b094      	sub	sp, #80	; 0x50
 80021de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80021e0:	2300      	movs	r3, #0
 80021e2:	647b      	str	r3, [r7, #68]	; 0x44
 80021e4:	2300      	movs	r3, #0
 80021e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80021e8:	2300      	movs	r3, #0
 80021ea:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80021ec:	2300      	movs	r3, #0
 80021ee:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80021f0:	4b79      	ldr	r3, [pc, #484]	; (80023d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	f003 030c 	and.w	r3, r3, #12
 80021f8:	2b08      	cmp	r3, #8
 80021fa:	d00d      	beq.n	8002218 <HAL_RCC_GetSysClockFreq+0x40>
 80021fc:	2b08      	cmp	r3, #8
 80021fe:	f200 80e1 	bhi.w	80023c4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002202:	2b00      	cmp	r3, #0
 8002204:	d002      	beq.n	800220c <HAL_RCC_GetSysClockFreq+0x34>
 8002206:	2b04      	cmp	r3, #4
 8002208:	d003      	beq.n	8002212 <HAL_RCC_GetSysClockFreq+0x3a>
 800220a:	e0db      	b.n	80023c4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800220c:	4b73      	ldr	r3, [pc, #460]	; (80023dc <HAL_RCC_GetSysClockFreq+0x204>)
 800220e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002210:	e0db      	b.n	80023ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002212:	4b73      	ldr	r3, [pc, #460]	; (80023e0 <HAL_RCC_GetSysClockFreq+0x208>)
 8002214:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002216:	e0d8      	b.n	80023ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002218:	4b6f      	ldr	r3, [pc, #444]	; (80023d8 <HAL_RCC_GetSysClockFreq+0x200>)
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002220:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002222:	4b6d      	ldr	r3, [pc, #436]	; (80023d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800222a:	2b00      	cmp	r3, #0
 800222c:	d063      	beq.n	80022f6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800222e:	4b6a      	ldr	r3, [pc, #424]	; (80023d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	099b      	lsrs	r3, r3, #6
 8002234:	2200      	movs	r2, #0
 8002236:	63bb      	str	r3, [r7, #56]	; 0x38
 8002238:	63fa      	str	r2, [r7, #60]	; 0x3c
 800223a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800223c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002240:	633b      	str	r3, [r7, #48]	; 0x30
 8002242:	2300      	movs	r3, #0
 8002244:	637b      	str	r3, [r7, #52]	; 0x34
 8002246:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800224a:	4622      	mov	r2, r4
 800224c:	462b      	mov	r3, r5
 800224e:	f04f 0000 	mov.w	r0, #0
 8002252:	f04f 0100 	mov.w	r1, #0
 8002256:	0159      	lsls	r1, r3, #5
 8002258:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800225c:	0150      	lsls	r0, r2, #5
 800225e:	4602      	mov	r2, r0
 8002260:	460b      	mov	r3, r1
 8002262:	4621      	mov	r1, r4
 8002264:	1a51      	subs	r1, r2, r1
 8002266:	6139      	str	r1, [r7, #16]
 8002268:	4629      	mov	r1, r5
 800226a:	eb63 0301 	sbc.w	r3, r3, r1
 800226e:	617b      	str	r3, [r7, #20]
 8002270:	f04f 0200 	mov.w	r2, #0
 8002274:	f04f 0300 	mov.w	r3, #0
 8002278:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800227c:	4659      	mov	r1, fp
 800227e:	018b      	lsls	r3, r1, #6
 8002280:	4651      	mov	r1, sl
 8002282:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002286:	4651      	mov	r1, sl
 8002288:	018a      	lsls	r2, r1, #6
 800228a:	4651      	mov	r1, sl
 800228c:	ebb2 0801 	subs.w	r8, r2, r1
 8002290:	4659      	mov	r1, fp
 8002292:	eb63 0901 	sbc.w	r9, r3, r1
 8002296:	f04f 0200 	mov.w	r2, #0
 800229a:	f04f 0300 	mov.w	r3, #0
 800229e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80022a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80022a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80022aa:	4690      	mov	r8, r2
 80022ac:	4699      	mov	r9, r3
 80022ae:	4623      	mov	r3, r4
 80022b0:	eb18 0303 	adds.w	r3, r8, r3
 80022b4:	60bb      	str	r3, [r7, #8]
 80022b6:	462b      	mov	r3, r5
 80022b8:	eb49 0303 	adc.w	r3, r9, r3
 80022bc:	60fb      	str	r3, [r7, #12]
 80022be:	f04f 0200 	mov.w	r2, #0
 80022c2:	f04f 0300 	mov.w	r3, #0
 80022c6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80022ca:	4629      	mov	r1, r5
 80022cc:	024b      	lsls	r3, r1, #9
 80022ce:	4621      	mov	r1, r4
 80022d0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80022d4:	4621      	mov	r1, r4
 80022d6:	024a      	lsls	r2, r1, #9
 80022d8:	4610      	mov	r0, r2
 80022da:	4619      	mov	r1, r3
 80022dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022de:	2200      	movs	r2, #0
 80022e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80022e2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80022e4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80022e8:	f7fd ffe2 	bl	80002b0 <__aeabi_uldivmod>
 80022ec:	4602      	mov	r2, r0
 80022ee:	460b      	mov	r3, r1
 80022f0:	4613      	mov	r3, r2
 80022f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80022f4:	e058      	b.n	80023a8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022f6:	4b38      	ldr	r3, [pc, #224]	; (80023d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	099b      	lsrs	r3, r3, #6
 80022fc:	2200      	movs	r2, #0
 80022fe:	4618      	mov	r0, r3
 8002300:	4611      	mov	r1, r2
 8002302:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002306:	623b      	str	r3, [r7, #32]
 8002308:	2300      	movs	r3, #0
 800230a:	627b      	str	r3, [r7, #36]	; 0x24
 800230c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002310:	4642      	mov	r2, r8
 8002312:	464b      	mov	r3, r9
 8002314:	f04f 0000 	mov.w	r0, #0
 8002318:	f04f 0100 	mov.w	r1, #0
 800231c:	0159      	lsls	r1, r3, #5
 800231e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002322:	0150      	lsls	r0, r2, #5
 8002324:	4602      	mov	r2, r0
 8002326:	460b      	mov	r3, r1
 8002328:	4641      	mov	r1, r8
 800232a:	ebb2 0a01 	subs.w	sl, r2, r1
 800232e:	4649      	mov	r1, r9
 8002330:	eb63 0b01 	sbc.w	fp, r3, r1
 8002334:	f04f 0200 	mov.w	r2, #0
 8002338:	f04f 0300 	mov.w	r3, #0
 800233c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002340:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002344:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002348:	ebb2 040a 	subs.w	r4, r2, sl
 800234c:	eb63 050b 	sbc.w	r5, r3, fp
 8002350:	f04f 0200 	mov.w	r2, #0
 8002354:	f04f 0300 	mov.w	r3, #0
 8002358:	00eb      	lsls	r3, r5, #3
 800235a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800235e:	00e2      	lsls	r2, r4, #3
 8002360:	4614      	mov	r4, r2
 8002362:	461d      	mov	r5, r3
 8002364:	4643      	mov	r3, r8
 8002366:	18e3      	adds	r3, r4, r3
 8002368:	603b      	str	r3, [r7, #0]
 800236a:	464b      	mov	r3, r9
 800236c:	eb45 0303 	adc.w	r3, r5, r3
 8002370:	607b      	str	r3, [r7, #4]
 8002372:	f04f 0200 	mov.w	r2, #0
 8002376:	f04f 0300 	mov.w	r3, #0
 800237a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800237e:	4629      	mov	r1, r5
 8002380:	028b      	lsls	r3, r1, #10
 8002382:	4621      	mov	r1, r4
 8002384:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002388:	4621      	mov	r1, r4
 800238a:	028a      	lsls	r2, r1, #10
 800238c:	4610      	mov	r0, r2
 800238e:	4619      	mov	r1, r3
 8002390:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002392:	2200      	movs	r2, #0
 8002394:	61bb      	str	r3, [r7, #24]
 8002396:	61fa      	str	r2, [r7, #28]
 8002398:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800239c:	f7fd ff88 	bl	80002b0 <__aeabi_uldivmod>
 80023a0:	4602      	mov	r2, r0
 80023a2:	460b      	mov	r3, r1
 80023a4:	4613      	mov	r3, r2
 80023a6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80023a8:	4b0b      	ldr	r3, [pc, #44]	; (80023d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	0c1b      	lsrs	r3, r3, #16
 80023ae:	f003 0303 	and.w	r3, r3, #3
 80023b2:	3301      	adds	r3, #1
 80023b4:	005b      	lsls	r3, r3, #1
 80023b6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80023b8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80023ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80023c0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80023c2:	e002      	b.n	80023ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80023c4:	4b05      	ldr	r3, [pc, #20]	; (80023dc <HAL_RCC_GetSysClockFreq+0x204>)
 80023c6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80023c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	3750      	adds	r7, #80	; 0x50
 80023d0:	46bd      	mov	sp, r7
 80023d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80023d6:	bf00      	nop
 80023d8:	40023800 	.word	0x40023800
 80023dc:	00f42400 	.word	0x00f42400
 80023e0:	007a1200 	.word	0x007a1200

080023e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023e4:	b480      	push	{r7}
 80023e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023e8:	4b03      	ldr	r3, [pc, #12]	; (80023f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80023ea:	681b      	ldr	r3, [r3, #0]
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr
 80023f6:	bf00      	nop
 80023f8:	200000bc 	.word	0x200000bc

080023fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002400:	f7ff fff0 	bl	80023e4 <HAL_RCC_GetHCLKFreq>
 8002404:	4602      	mov	r2, r0
 8002406:	4b05      	ldr	r3, [pc, #20]	; (800241c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	0a9b      	lsrs	r3, r3, #10
 800240c:	f003 0307 	and.w	r3, r3, #7
 8002410:	4903      	ldr	r1, [pc, #12]	; (8002420 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002412:	5ccb      	ldrb	r3, [r1, r3]
 8002414:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002418:	4618      	mov	r0, r3
 800241a:	bd80      	pop	{r7, pc}
 800241c:	40023800 	.word	0x40023800
 8002420:	08007d64 	.word	0x08007d64

08002424 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002428:	f7ff ffdc 	bl	80023e4 <HAL_RCC_GetHCLKFreq>
 800242c:	4602      	mov	r2, r0
 800242e:	4b05      	ldr	r3, [pc, #20]	; (8002444 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	0b5b      	lsrs	r3, r3, #13
 8002434:	f003 0307 	and.w	r3, r3, #7
 8002438:	4903      	ldr	r1, [pc, #12]	; (8002448 <HAL_RCC_GetPCLK2Freq+0x24>)
 800243a:	5ccb      	ldrb	r3, [r1, r3]
 800243c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002440:	4618      	mov	r0, r3
 8002442:	bd80      	pop	{r7, pc}
 8002444:	40023800 	.word	0x40023800
 8002448:	08007d64 	.word	0x08007d64

0800244c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800244c:	b480      	push	{r7}
 800244e:	b083      	sub	sp, #12
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
 8002454:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	220f      	movs	r2, #15
 800245a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800245c:	4b12      	ldr	r3, [pc, #72]	; (80024a8 <HAL_RCC_GetClockConfig+0x5c>)
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	f003 0203 	and.w	r2, r3, #3
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002468:	4b0f      	ldr	r3, [pc, #60]	; (80024a8 <HAL_RCC_GetClockConfig+0x5c>)
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002474:	4b0c      	ldr	r3, [pc, #48]	; (80024a8 <HAL_RCC_GetClockConfig+0x5c>)
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002480:	4b09      	ldr	r3, [pc, #36]	; (80024a8 <HAL_RCC_GetClockConfig+0x5c>)
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	08db      	lsrs	r3, r3, #3
 8002486:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800248e:	4b07      	ldr	r3, [pc, #28]	; (80024ac <HAL_RCC_GetClockConfig+0x60>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 0207 	and.w	r2, r3, #7
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	601a      	str	r2, [r3, #0]
}
 800249a:	bf00      	nop
 800249c:	370c      	adds	r7, #12
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr
 80024a6:	bf00      	nop
 80024a8:	40023800 	.word	0x40023800
 80024ac:	40023c00 	.word	0x40023c00

080024b0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b086      	sub	sp, #24
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d101      	bne.n	80024c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	e273      	b.n	80029aa <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 0301 	and.w	r3, r3, #1
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d075      	beq.n	80025ba <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80024ce:	4b88      	ldr	r3, [pc, #544]	; (80026f0 <HAL_RCC_OscConfig+0x240>)
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	f003 030c 	and.w	r3, r3, #12
 80024d6:	2b04      	cmp	r3, #4
 80024d8:	d00c      	beq.n	80024f4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024da:	4b85      	ldr	r3, [pc, #532]	; (80026f0 <HAL_RCC_OscConfig+0x240>)
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80024e2:	2b08      	cmp	r3, #8
 80024e4:	d112      	bne.n	800250c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024e6:	4b82      	ldr	r3, [pc, #520]	; (80026f0 <HAL_RCC_OscConfig+0x240>)
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024f2:	d10b      	bne.n	800250c <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024f4:	4b7e      	ldr	r3, [pc, #504]	; (80026f0 <HAL_RCC_OscConfig+0x240>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d05b      	beq.n	80025b8 <HAL_RCC_OscConfig+0x108>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d157      	bne.n	80025b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002508:	2301      	movs	r3, #1
 800250a:	e24e      	b.n	80029aa <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002514:	d106      	bne.n	8002524 <HAL_RCC_OscConfig+0x74>
 8002516:	4b76      	ldr	r3, [pc, #472]	; (80026f0 <HAL_RCC_OscConfig+0x240>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a75      	ldr	r2, [pc, #468]	; (80026f0 <HAL_RCC_OscConfig+0x240>)
 800251c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002520:	6013      	str	r3, [r2, #0]
 8002522:	e01d      	b.n	8002560 <HAL_RCC_OscConfig+0xb0>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800252c:	d10c      	bne.n	8002548 <HAL_RCC_OscConfig+0x98>
 800252e:	4b70      	ldr	r3, [pc, #448]	; (80026f0 <HAL_RCC_OscConfig+0x240>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a6f      	ldr	r2, [pc, #444]	; (80026f0 <HAL_RCC_OscConfig+0x240>)
 8002534:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002538:	6013      	str	r3, [r2, #0]
 800253a:	4b6d      	ldr	r3, [pc, #436]	; (80026f0 <HAL_RCC_OscConfig+0x240>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a6c      	ldr	r2, [pc, #432]	; (80026f0 <HAL_RCC_OscConfig+0x240>)
 8002540:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002544:	6013      	str	r3, [r2, #0]
 8002546:	e00b      	b.n	8002560 <HAL_RCC_OscConfig+0xb0>
 8002548:	4b69      	ldr	r3, [pc, #420]	; (80026f0 <HAL_RCC_OscConfig+0x240>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a68      	ldr	r2, [pc, #416]	; (80026f0 <HAL_RCC_OscConfig+0x240>)
 800254e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002552:	6013      	str	r3, [r2, #0]
 8002554:	4b66      	ldr	r3, [pc, #408]	; (80026f0 <HAL_RCC_OscConfig+0x240>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a65      	ldr	r2, [pc, #404]	; (80026f0 <HAL_RCC_OscConfig+0x240>)
 800255a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800255e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d013      	beq.n	8002590 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002568:	f7fe ff0e 	bl	8001388 <HAL_GetTick>
 800256c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800256e:	e008      	b.n	8002582 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002570:	f7fe ff0a 	bl	8001388 <HAL_GetTick>
 8002574:	4602      	mov	r2, r0
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	1ad3      	subs	r3, r2, r3
 800257a:	2b64      	cmp	r3, #100	; 0x64
 800257c:	d901      	bls.n	8002582 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800257e:	2303      	movs	r3, #3
 8002580:	e213      	b.n	80029aa <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002582:	4b5b      	ldr	r3, [pc, #364]	; (80026f0 <HAL_RCC_OscConfig+0x240>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800258a:	2b00      	cmp	r3, #0
 800258c:	d0f0      	beq.n	8002570 <HAL_RCC_OscConfig+0xc0>
 800258e:	e014      	b.n	80025ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002590:	f7fe fefa 	bl	8001388 <HAL_GetTick>
 8002594:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002596:	e008      	b.n	80025aa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002598:	f7fe fef6 	bl	8001388 <HAL_GetTick>
 800259c:	4602      	mov	r2, r0
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	1ad3      	subs	r3, r2, r3
 80025a2:	2b64      	cmp	r3, #100	; 0x64
 80025a4:	d901      	bls.n	80025aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80025a6:	2303      	movs	r3, #3
 80025a8:	e1ff      	b.n	80029aa <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025aa:	4b51      	ldr	r3, [pc, #324]	; (80026f0 <HAL_RCC_OscConfig+0x240>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d1f0      	bne.n	8002598 <HAL_RCC_OscConfig+0xe8>
 80025b6:	e000      	b.n	80025ba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 0302 	and.w	r3, r3, #2
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d063      	beq.n	800268e <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80025c6:	4b4a      	ldr	r3, [pc, #296]	; (80026f0 <HAL_RCC_OscConfig+0x240>)
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	f003 030c 	and.w	r3, r3, #12
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d00b      	beq.n	80025ea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025d2:	4b47      	ldr	r3, [pc, #284]	; (80026f0 <HAL_RCC_OscConfig+0x240>)
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80025da:	2b08      	cmp	r3, #8
 80025dc:	d11c      	bne.n	8002618 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025de:	4b44      	ldr	r3, [pc, #272]	; (80026f0 <HAL_RCC_OscConfig+0x240>)
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d116      	bne.n	8002618 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025ea:	4b41      	ldr	r3, [pc, #260]	; (80026f0 <HAL_RCC_OscConfig+0x240>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 0302 	and.w	r3, r3, #2
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d005      	beq.n	8002602 <HAL_RCC_OscConfig+0x152>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	68db      	ldr	r3, [r3, #12]
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d001      	beq.n	8002602 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e1d3      	b.n	80029aa <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002602:	4b3b      	ldr	r3, [pc, #236]	; (80026f0 <HAL_RCC_OscConfig+0x240>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	691b      	ldr	r3, [r3, #16]
 800260e:	00db      	lsls	r3, r3, #3
 8002610:	4937      	ldr	r1, [pc, #220]	; (80026f0 <HAL_RCC_OscConfig+0x240>)
 8002612:	4313      	orrs	r3, r2
 8002614:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002616:	e03a      	b.n	800268e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d020      	beq.n	8002662 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002620:	4b34      	ldr	r3, [pc, #208]	; (80026f4 <HAL_RCC_OscConfig+0x244>)
 8002622:	2201      	movs	r2, #1
 8002624:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002626:	f7fe feaf 	bl	8001388 <HAL_GetTick>
 800262a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800262c:	e008      	b.n	8002640 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800262e:	f7fe feab 	bl	8001388 <HAL_GetTick>
 8002632:	4602      	mov	r2, r0
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	1ad3      	subs	r3, r2, r3
 8002638:	2b02      	cmp	r3, #2
 800263a:	d901      	bls.n	8002640 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800263c:	2303      	movs	r3, #3
 800263e:	e1b4      	b.n	80029aa <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002640:	4b2b      	ldr	r3, [pc, #172]	; (80026f0 <HAL_RCC_OscConfig+0x240>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 0302 	and.w	r3, r3, #2
 8002648:	2b00      	cmp	r3, #0
 800264a:	d0f0      	beq.n	800262e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800264c:	4b28      	ldr	r3, [pc, #160]	; (80026f0 <HAL_RCC_OscConfig+0x240>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	691b      	ldr	r3, [r3, #16]
 8002658:	00db      	lsls	r3, r3, #3
 800265a:	4925      	ldr	r1, [pc, #148]	; (80026f0 <HAL_RCC_OscConfig+0x240>)
 800265c:	4313      	orrs	r3, r2
 800265e:	600b      	str	r3, [r1, #0]
 8002660:	e015      	b.n	800268e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002662:	4b24      	ldr	r3, [pc, #144]	; (80026f4 <HAL_RCC_OscConfig+0x244>)
 8002664:	2200      	movs	r2, #0
 8002666:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002668:	f7fe fe8e 	bl	8001388 <HAL_GetTick>
 800266c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800266e:	e008      	b.n	8002682 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002670:	f7fe fe8a 	bl	8001388 <HAL_GetTick>
 8002674:	4602      	mov	r2, r0
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	2b02      	cmp	r3, #2
 800267c:	d901      	bls.n	8002682 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800267e:	2303      	movs	r3, #3
 8002680:	e193      	b.n	80029aa <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002682:	4b1b      	ldr	r3, [pc, #108]	; (80026f0 <HAL_RCC_OscConfig+0x240>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 0302 	and.w	r3, r3, #2
 800268a:	2b00      	cmp	r3, #0
 800268c:	d1f0      	bne.n	8002670 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 0308 	and.w	r3, r3, #8
 8002696:	2b00      	cmp	r3, #0
 8002698:	d036      	beq.n	8002708 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	695b      	ldr	r3, [r3, #20]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d016      	beq.n	80026d0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026a2:	4b15      	ldr	r3, [pc, #84]	; (80026f8 <HAL_RCC_OscConfig+0x248>)
 80026a4:	2201      	movs	r2, #1
 80026a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026a8:	f7fe fe6e 	bl	8001388 <HAL_GetTick>
 80026ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026ae:	e008      	b.n	80026c2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026b0:	f7fe fe6a 	bl	8001388 <HAL_GetTick>
 80026b4:	4602      	mov	r2, r0
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	1ad3      	subs	r3, r2, r3
 80026ba:	2b02      	cmp	r3, #2
 80026bc:	d901      	bls.n	80026c2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80026be:	2303      	movs	r3, #3
 80026c0:	e173      	b.n	80029aa <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026c2:	4b0b      	ldr	r3, [pc, #44]	; (80026f0 <HAL_RCC_OscConfig+0x240>)
 80026c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026c6:	f003 0302 	and.w	r3, r3, #2
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d0f0      	beq.n	80026b0 <HAL_RCC_OscConfig+0x200>
 80026ce:	e01b      	b.n	8002708 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026d0:	4b09      	ldr	r3, [pc, #36]	; (80026f8 <HAL_RCC_OscConfig+0x248>)
 80026d2:	2200      	movs	r2, #0
 80026d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026d6:	f7fe fe57 	bl	8001388 <HAL_GetTick>
 80026da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026dc:	e00e      	b.n	80026fc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026de:	f7fe fe53 	bl	8001388 <HAL_GetTick>
 80026e2:	4602      	mov	r2, r0
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	1ad3      	subs	r3, r2, r3
 80026e8:	2b02      	cmp	r3, #2
 80026ea:	d907      	bls.n	80026fc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80026ec:	2303      	movs	r3, #3
 80026ee:	e15c      	b.n	80029aa <HAL_RCC_OscConfig+0x4fa>
 80026f0:	40023800 	.word	0x40023800
 80026f4:	42470000 	.word	0x42470000
 80026f8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026fc:	4b8a      	ldr	r3, [pc, #552]	; (8002928 <HAL_RCC_OscConfig+0x478>)
 80026fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002700:	f003 0302 	and.w	r3, r3, #2
 8002704:	2b00      	cmp	r3, #0
 8002706:	d1ea      	bne.n	80026de <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f003 0304 	and.w	r3, r3, #4
 8002710:	2b00      	cmp	r3, #0
 8002712:	f000 8097 	beq.w	8002844 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002716:	2300      	movs	r3, #0
 8002718:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800271a:	4b83      	ldr	r3, [pc, #524]	; (8002928 <HAL_RCC_OscConfig+0x478>)
 800271c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002722:	2b00      	cmp	r3, #0
 8002724:	d10f      	bne.n	8002746 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002726:	2300      	movs	r3, #0
 8002728:	60bb      	str	r3, [r7, #8]
 800272a:	4b7f      	ldr	r3, [pc, #508]	; (8002928 <HAL_RCC_OscConfig+0x478>)
 800272c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272e:	4a7e      	ldr	r2, [pc, #504]	; (8002928 <HAL_RCC_OscConfig+0x478>)
 8002730:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002734:	6413      	str	r3, [r2, #64]	; 0x40
 8002736:	4b7c      	ldr	r3, [pc, #496]	; (8002928 <HAL_RCC_OscConfig+0x478>)
 8002738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800273e:	60bb      	str	r3, [r7, #8]
 8002740:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002742:	2301      	movs	r3, #1
 8002744:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002746:	4b79      	ldr	r3, [pc, #484]	; (800292c <HAL_RCC_OscConfig+0x47c>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800274e:	2b00      	cmp	r3, #0
 8002750:	d118      	bne.n	8002784 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002752:	4b76      	ldr	r3, [pc, #472]	; (800292c <HAL_RCC_OscConfig+0x47c>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a75      	ldr	r2, [pc, #468]	; (800292c <HAL_RCC_OscConfig+0x47c>)
 8002758:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800275c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800275e:	f7fe fe13 	bl	8001388 <HAL_GetTick>
 8002762:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002764:	e008      	b.n	8002778 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002766:	f7fe fe0f 	bl	8001388 <HAL_GetTick>
 800276a:	4602      	mov	r2, r0
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	1ad3      	subs	r3, r2, r3
 8002770:	2b02      	cmp	r3, #2
 8002772:	d901      	bls.n	8002778 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002774:	2303      	movs	r3, #3
 8002776:	e118      	b.n	80029aa <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002778:	4b6c      	ldr	r3, [pc, #432]	; (800292c <HAL_RCC_OscConfig+0x47c>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002780:	2b00      	cmp	r3, #0
 8002782:	d0f0      	beq.n	8002766 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	2b01      	cmp	r3, #1
 800278a:	d106      	bne.n	800279a <HAL_RCC_OscConfig+0x2ea>
 800278c:	4b66      	ldr	r3, [pc, #408]	; (8002928 <HAL_RCC_OscConfig+0x478>)
 800278e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002790:	4a65      	ldr	r2, [pc, #404]	; (8002928 <HAL_RCC_OscConfig+0x478>)
 8002792:	f043 0301 	orr.w	r3, r3, #1
 8002796:	6713      	str	r3, [r2, #112]	; 0x70
 8002798:	e01c      	b.n	80027d4 <HAL_RCC_OscConfig+0x324>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	2b05      	cmp	r3, #5
 80027a0:	d10c      	bne.n	80027bc <HAL_RCC_OscConfig+0x30c>
 80027a2:	4b61      	ldr	r3, [pc, #388]	; (8002928 <HAL_RCC_OscConfig+0x478>)
 80027a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027a6:	4a60      	ldr	r2, [pc, #384]	; (8002928 <HAL_RCC_OscConfig+0x478>)
 80027a8:	f043 0304 	orr.w	r3, r3, #4
 80027ac:	6713      	str	r3, [r2, #112]	; 0x70
 80027ae:	4b5e      	ldr	r3, [pc, #376]	; (8002928 <HAL_RCC_OscConfig+0x478>)
 80027b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027b2:	4a5d      	ldr	r2, [pc, #372]	; (8002928 <HAL_RCC_OscConfig+0x478>)
 80027b4:	f043 0301 	orr.w	r3, r3, #1
 80027b8:	6713      	str	r3, [r2, #112]	; 0x70
 80027ba:	e00b      	b.n	80027d4 <HAL_RCC_OscConfig+0x324>
 80027bc:	4b5a      	ldr	r3, [pc, #360]	; (8002928 <HAL_RCC_OscConfig+0x478>)
 80027be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027c0:	4a59      	ldr	r2, [pc, #356]	; (8002928 <HAL_RCC_OscConfig+0x478>)
 80027c2:	f023 0301 	bic.w	r3, r3, #1
 80027c6:	6713      	str	r3, [r2, #112]	; 0x70
 80027c8:	4b57      	ldr	r3, [pc, #348]	; (8002928 <HAL_RCC_OscConfig+0x478>)
 80027ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027cc:	4a56      	ldr	r2, [pc, #344]	; (8002928 <HAL_RCC_OscConfig+0x478>)
 80027ce:	f023 0304 	bic.w	r3, r3, #4
 80027d2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d015      	beq.n	8002808 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027dc:	f7fe fdd4 	bl	8001388 <HAL_GetTick>
 80027e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027e2:	e00a      	b.n	80027fa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027e4:	f7fe fdd0 	bl	8001388 <HAL_GetTick>
 80027e8:	4602      	mov	r2, r0
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	1ad3      	subs	r3, r2, r3
 80027ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d901      	bls.n	80027fa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80027f6:	2303      	movs	r3, #3
 80027f8:	e0d7      	b.n	80029aa <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027fa:	4b4b      	ldr	r3, [pc, #300]	; (8002928 <HAL_RCC_OscConfig+0x478>)
 80027fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027fe:	f003 0302 	and.w	r3, r3, #2
 8002802:	2b00      	cmp	r3, #0
 8002804:	d0ee      	beq.n	80027e4 <HAL_RCC_OscConfig+0x334>
 8002806:	e014      	b.n	8002832 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002808:	f7fe fdbe 	bl	8001388 <HAL_GetTick>
 800280c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800280e:	e00a      	b.n	8002826 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002810:	f7fe fdba 	bl	8001388 <HAL_GetTick>
 8002814:	4602      	mov	r2, r0
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	1ad3      	subs	r3, r2, r3
 800281a:	f241 3288 	movw	r2, #5000	; 0x1388
 800281e:	4293      	cmp	r3, r2
 8002820:	d901      	bls.n	8002826 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002822:	2303      	movs	r3, #3
 8002824:	e0c1      	b.n	80029aa <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002826:	4b40      	ldr	r3, [pc, #256]	; (8002928 <HAL_RCC_OscConfig+0x478>)
 8002828:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800282a:	f003 0302 	and.w	r3, r3, #2
 800282e:	2b00      	cmp	r3, #0
 8002830:	d1ee      	bne.n	8002810 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002832:	7dfb      	ldrb	r3, [r7, #23]
 8002834:	2b01      	cmp	r3, #1
 8002836:	d105      	bne.n	8002844 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002838:	4b3b      	ldr	r3, [pc, #236]	; (8002928 <HAL_RCC_OscConfig+0x478>)
 800283a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800283c:	4a3a      	ldr	r2, [pc, #232]	; (8002928 <HAL_RCC_OscConfig+0x478>)
 800283e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002842:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	699b      	ldr	r3, [r3, #24]
 8002848:	2b00      	cmp	r3, #0
 800284a:	f000 80ad 	beq.w	80029a8 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800284e:	4b36      	ldr	r3, [pc, #216]	; (8002928 <HAL_RCC_OscConfig+0x478>)
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	f003 030c 	and.w	r3, r3, #12
 8002856:	2b08      	cmp	r3, #8
 8002858:	d060      	beq.n	800291c <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	699b      	ldr	r3, [r3, #24]
 800285e:	2b02      	cmp	r3, #2
 8002860:	d145      	bne.n	80028ee <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002862:	4b33      	ldr	r3, [pc, #204]	; (8002930 <HAL_RCC_OscConfig+0x480>)
 8002864:	2200      	movs	r2, #0
 8002866:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002868:	f7fe fd8e 	bl	8001388 <HAL_GetTick>
 800286c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800286e:	e008      	b.n	8002882 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002870:	f7fe fd8a 	bl	8001388 <HAL_GetTick>
 8002874:	4602      	mov	r2, r0
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	1ad3      	subs	r3, r2, r3
 800287a:	2b02      	cmp	r3, #2
 800287c:	d901      	bls.n	8002882 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800287e:	2303      	movs	r3, #3
 8002880:	e093      	b.n	80029aa <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002882:	4b29      	ldr	r3, [pc, #164]	; (8002928 <HAL_RCC_OscConfig+0x478>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800288a:	2b00      	cmp	r3, #0
 800288c:	d1f0      	bne.n	8002870 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	69da      	ldr	r2, [r3, #28]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6a1b      	ldr	r3, [r3, #32]
 8002896:	431a      	orrs	r2, r3
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800289c:	019b      	lsls	r3, r3, #6
 800289e:	431a      	orrs	r2, r3
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028a4:	085b      	lsrs	r3, r3, #1
 80028a6:	3b01      	subs	r3, #1
 80028a8:	041b      	lsls	r3, r3, #16
 80028aa:	431a      	orrs	r2, r3
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028b0:	061b      	lsls	r3, r3, #24
 80028b2:	431a      	orrs	r2, r3
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b8:	071b      	lsls	r3, r3, #28
 80028ba:	491b      	ldr	r1, [pc, #108]	; (8002928 <HAL_RCC_OscConfig+0x478>)
 80028bc:	4313      	orrs	r3, r2
 80028be:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028c0:	4b1b      	ldr	r3, [pc, #108]	; (8002930 <HAL_RCC_OscConfig+0x480>)
 80028c2:	2201      	movs	r2, #1
 80028c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028c6:	f7fe fd5f 	bl	8001388 <HAL_GetTick>
 80028ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028cc:	e008      	b.n	80028e0 <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028ce:	f7fe fd5b 	bl	8001388 <HAL_GetTick>
 80028d2:	4602      	mov	r2, r0
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	1ad3      	subs	r3, r2, r3
 80028d8:	2b02      	cmp	r3, #2
 80028da:	d901      	bls.n	80028e0 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 80028dc:	2303      	movs	r3, #3
 80028de:	e064      	b.n	80029aa <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028e0:	4b11      	ldr	r3, [pc, #68]	; (8002928 <HAL_RCC_OscConfig+0x478>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d0f0      	beq.n	80028ce <HAL_RCC_OscConfig+0x41e>
 80028ec:	e05c      	b.n	80029a8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028ee:	4b10      	ldr	r3, [pc, #64]	; (8002930 <HAL_RCC_OscConfig+0x480>)
 80028f0:	2200      	movs	r2, #0
 80028f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028f4:	f7fe fd48 	bl	8001388 <HAL_GetTick>
 80028f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028fa:	e008      	b.n	800290e <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028fc:	f7fe fd44 	bl	8001388 <HAL_GetTick>
 8002900:	4602      	mov	r2, r0
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	2b02      	cmp	r3, #2
 8002908:	d901      	bls.n	800290e <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 800290a:	2303      	movs	r3, #3
 800290c:	e04d      	b.n	80029aa <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800290e:	4b06      	ldr	r3, [pc, #24]	; (8002928 <HAL_RCC_OscConfig+0x478>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002916:	2b00      	cmp	r3, #0
 8002918:	d1f0      	bne.n	80028fc <HAL_RCC_OscConfig+0x44c>
 800291a:	e045      	b.n	80029a8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	699b      	ldr	r3, [r3, #24]
 8002920:	2b01      	cmp	r3, #1
 8002922:	d107      	bne.n	8002934 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	e040      	b.n	80029aa <HAL_RCC_OscConfig+0x4fa>
 8002928:	40023800 	.word	0x40023800
 800292c:	40007000 	.word	0x40007000
 8002930:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002934:	4b1f      	ldr	r3, [pc, #124]	; (80029b4 <HAL_RCC_OscConfig+0x504>)
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	699b      	ldr	r3, [r3, #24]
 800293e:	2b01      	cmp	r3, #1
 8002940:	d030      	beq.n	80029a4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800294c:	429a      	cmp	r2, r3
 800294e:	d129      	bne.n	80029a4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800295a:	429a      	cmp	r2, r3
 800295c:	d122      	bne.n	80029a4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800295e:	68fa      	ldr	r2, [r7, #12]
 8002960:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002964:	4013      	ands	r3, r2
 8002966:	687a      	ldr	r2, [r7, #4]
 8002968:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800296a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800296c:	4293      	cmp	r3, r2
 800296e:	d119      	bne.n	80029a4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800297a:	085b      	lsrs	r3, r3, #1
 800297c:	3b01      	subs	r3, #1
 800297e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002980:	429a      	cmp	r2, r3
 8002982:	d10f      	bne.n	80029a4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800298e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002990:	429a      	cmp	r2, r3
 8002992:	d107      	bne.n	80029a4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800299e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d001      	beq.n	80029a8 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	e000      	b.n	80029aa <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 80029a8:	2300      	movs	r3, #0
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3718      	adds	r7, #24
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	40023800 	.word	0x40023800

080029b8 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b082      	sub	sp, #8
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d101      	bne.n	80029ca <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e01c      	b.n	8002a04 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	795b      	ldrb	r3, [r3, #5]
 80029ce:	b2db      	uxtb	r3, r3
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d105      	bne.n	80029e0 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2200      	movs	r2, #0
 80029d8:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 80029da:	6878      	ldr	r0, [r7, #4]
 80029dc:	f7fe fa32 	bl	8000e44 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2202      	movs	r2, #2
 80029e4:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f042 0204 	orr.w	r2, r2, #4
 80029f4:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2201      	movs	r2, #1
 80029fa:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2200      	movs	r2, #0
 8002a00:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8002a02:	2300      	movs	r3, #0
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	3708      	adds	r7, #8
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}

08002a0c <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b084      	sub	sp, #16
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
 8002a14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002a16:	2300      	movs	r3, #0
 8002a18:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	791b      	ldrb	r3, [r3, #4]
 8002a1e:	2b01      	cmp	r3, #1
 8002a20:	d101      	bne.n	8002a26 <HAL_RNG_GenerateRandomNumber+0x1a>
 8002a22:	2302      	movs	r3, #2
 8002a24:	e044      	b.n	8002ab0 <HAL_RNG_GenerateRandomNumber+0xa4>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2201      	movs	r2, #1
 8002a2a:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	795b      	ldrb	r3, [r3, #5]
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d133      	bne.n	8002a9e <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2202      	movs	r2, #2
 8002a3a:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002a3c:	f7fe fca4 	bl	8001388 <HAL_GetTick>
 8002a40:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8002a42:	e018      	b.n	8002a76 <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8002a44:	f7fe fca0 	bl	8001388 <HAL_GetTick>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	1ad3      	subs	r3, r2, r3
 8002a4e:	2b02      	cmp	r3, #2
 8002a50:	d911      	bls.n	8002a76 <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	f003 0301 	and.w	r3, r3, #1
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	d00a      	beq.n	8002a76 <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2201      	movs	r2, #1
 8002a64:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2202      	movs	r2, #2
 8002a6a:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e01c      	b.n	8002ab0 <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	f003 0301 	and.w	r3, r3, #1
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	d1df      	bne.n	8002a44 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	689a      	ldr	r2, [r3, #8]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	68da      	ldr	r2, [r3, #12]
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2201      	movs	r2, #1
 8002a9a:	715a      	strb	r2, [r3, #5]
 8002a9c:	e004      	b.n	8002aa8 <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2204      	movs	r2, #4
 8002aa2:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	711a      	strb	r2, [r3, #4]

  return status;
 8002aae:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	3710      	adds	r7, #16
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}

08002ab8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b082      	sub	sp, #8
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d101      	bne.n	8002aca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e041      	b.n	8002b4e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d106      	bne.n	8002ae4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	f7fe fb48 	bl	8001174 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2202      	movs	r2, #2
 8002ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	3304      	adds	r3, #4
 8002af4:	4619      	mov	r1, r3
 8002af6:	4610      	mov	r0, r2
 8002af8:	f000 f9ac 	bl	8002e54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2201      	movs	r2, #1
 8002b00:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2201      	movs	r2, #1
 8002b08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2201      	movs	r2, #1
 8002b10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2201      	movs	r2, #1
 8002b18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2201      	movs	r2, #1
 8002b20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2201      	movs	r2, #1
 8002b28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2201      	movs	r2, #1
 8002b30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2201      	movs	r2, #1
 8002b38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2201      	movs	r2, #1
 8002b40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2201      	movs	r2, #1
 8002b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b4c:	2300      	movs	r3, #0
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3708      	adds	r7, #8
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}
	...

08002b58 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b085      	sub	sp, #20
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b66:	b2db      	uxtb	r3, r3
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	d001      	beq.n	8002b70 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	e035      	b.n	8002bdc <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2202      	movs	r2, #2
 8002b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	68da      	ldr	r2, [r3, #12]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f042 0201 	orr.w	r2, r2, #1
 8002b86:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a16      	ldr	r2, [pc, #88]	; (8002be8 <HAL_TIM_Base_Start_IT+0x90>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d009      	beq.n	8002ba6 <HAL_TIM_Base_Start_IT+0x4e>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a15      	ldr	r2, [pc, #84]	; (8002bec <HAL_TIM_Base_Start_IT+0x94>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d004      	beq.n	8002ba6 <HAL_TIM_Base_Start_IT+0x4e>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a13      	ldr	r2, [pc, #76]	; (8002bf0 <HAL_TIM_Base_Start_IT+0x98>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d111      	bne.n	8002bca <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	f003 0307 	and.w	r3, r3, #7
 8002bb0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	2b06      	cmp	r3, #6
 8002bb6:	d010      	beq.n	8002bda <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f042 0201 	orr.w	r2, r2, #1
 8002bc6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bc8:	e007      	b.n	8002bda <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	681a      	ldr	r2, [r3, #0]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f042 0201 	orr.w	r2, r2, #1
 8002bd8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002bda:	2300      	movs	r3, #0
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	3714      	adds	r7, #20
 8002be0:	46bd      	mov	sp, r7
 8002be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be6:	4770      	bx	lr
 8002be8:	40010000 	.word	0x40010000
 8002bec:	40000c00 	.word	0x40000c00
 8002bf0:	40014000 	.word	0x40014000

08002bf4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b082      	sub	sp, #8
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	691b      	ldr	r3, [r3, #16]
 8002c02:	f003 0302 	and.w	r3, r3, #2
 8002c06:	2b02      	cmp	r3, #2
 8002c08:	d122      	bne.n	8002c50 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	68db      	ldr	r3, [r3, #12]
 8002c10:	f003 0302 	and.w	r3, r3, #2
 8002c14:	2b02      	cmp	r3, #2
 8002c16:	d11b      	bne.n	8002c50 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f06f 0202 	mvn.w	r2, #2
 8002c20:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2201      	movs	r2, #1
 8002c26:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	699b      	ldr	r3, [r3, #24]
 8002c2e:	f003 0303 	and.w	r3, r3, #3
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d003      	beq.n	8002c3e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f000 f8ee 	bl	8002e18 <HAL_TIM_IC_CaptureCallback>
 8002c3c:	e005      	b.n	8002c4a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	f000 f8e0 	bl	8002e04 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c44:	6878      	ldr	r0, [r7, #4]
 8002c46:	f000 f8f1 	bl	8002e2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	691b      	ldr	r3, [r3, #16]
 8002c56:	f003 0304 	and.w	r3, r3, #4
 8002c5a:	2b04      	cmp	r3, #4
 8002c5c:	d122      	bne.n	8002ca4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	68db      	ldr	r3, [r3, #12]
 8002c64:	f003 0304 	and.w	r3, r3, #4
 8002c68:	2b04      	cmp	r3, #4
 8002c6a:	d11b      	bne.n	8002ca4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f06f 0204 	mvn.w	r2, #4
 8002c74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2202      	movs	r2, #2
 8002c7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	699b      	ldr	r3, [r3, #24]
 8002c82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d003      	beq.n	8002c92 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	f000 f8c4 	bl	8002e18 <HAL_TIM_IC_CaptureCallback>
 8002c90:	e005      	b.n	8002c9e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	f000 f8b6 	bl	8002e04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c98:	6878      	ldr	r0, [r7, #4]
 8002c9a:	f000 f8c7 	bl	8002e2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	691b      	ldr	r3, [r3, #16]
 8002caa:	f003 0308 	and.w	r3, r3, #8
 8002cae:	2b08      	cmp	r3, #8
 8002cb0:	d122      	bne.n	8002cf8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	68db      	ldr	r3, [r3, #12]
 8002cb8:	f003 0308 	and.w	r3, r3, #8
 8002cbc:	2b08      	cmp	r3, #8
 8002cbe:	d11b      	bne.n	8002cf8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f06f 0208 	mvn.w	r2, #8
 8002cc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2204      	movs	r2, #4
 8002cce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	69db      	ldr	r3, [r3, #28]
 8002cd6:	f003 0303 	and.w	r3, r3, #3
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d003      	beq.n	8002ce6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	f000 f89a 	bl	8002e18 <HAL_TIM_IC_CaptureCallback>
 8002ce4:	e005      	b.n	8002cf2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	f000 f88c 	bl	8002e04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cec:	6878      	ldr	r0, [r7, #4]
 8002cee:	f000 f89d 	bl	8002e2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	691b      	ldr	r3, [r3, #16]
 8002cfe:	f003 0310 	and.w	r3, r3, #16
 8002d02:	2b10      	cmp	r3, #16
 8002d04:	d122      	bne.n	8002d4c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	f003 0310 	and.w	r3, r3, #16
 8002d10:	2b10      	cmp	r3, #16
 8002d12:	d11b      	bne.n	8002d4c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f06f 0210 	mvn.w	r2, #16
 8002d1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2208      	movs	r2, #8
 8002d22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	69db      	ldr	r3, [r3, #28]
 8002d2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d003      	beq.n	8002d3a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	f000 f870 	bl	8002e18 <HAL_TIM_IC_CaptureCallback>
 8002d38:	e005      	b.n	8002d46 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	f000 f862 	bl	8002e04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d40:	6878      	ldr	r0, [r7, #4]
 8002d42:	f000 f873 	bl	8002e2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	691b      	ldr	r3, [r3, #16]
 8002d52:	f003 0301 	and.w	r3, r3, #1
 8002d56:	2b01      	cmp	r3, #1
 8002d58:	d10e      	bne.n	8002d78 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	68db      	ldr	r3, [r3, #12]
 8002d60:	f003 0301 	and.w	r3, r3, #1
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d107      	bne.n	8002d78 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f06f 0201 	mvn.w	r2, #1
 8002d70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	f7fd fdc0 	bl	80008f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	691b      	ldr	r3, [r3, #16]
 8002d7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d82:	2b80      	cmp	r3, #128	; 0x80
 8002d84:	d10e      	bne.n	8002da4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	68db      	ldr	r3, [r3, #12]
 8002d8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d90:	2b80      	cmp	r3, #128	; 0x80
 8002d92:	d107      	bne.n	8002da4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002d9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	f000 f8c0 	bl	8002f24 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	691b      	ldr	r3, [r3, #16]
 8002daa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dae:	2b40      	cmp	r3, #64	; 0x40
 8002db0:	d10e      	bne.n	8002dd0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	68db      	ldr	r3, [r3, #12]
 8002db8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dbc:	2b40      	cmp	r3, #64	; 0x40
 8002dbe:	d107      	bne.n	8002dd0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002dc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	f000 f838 	bl	8002e40 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	691b      	ldr	r3, [r3, #16]
 8002dd6:	f003 0320 	and.w	r3, r3, #32
 8002dda:	2b20      	cmp	r3, #32
 8002ddc:	d10e      	bne.n	8002dfc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	68db      	ldr	r3, [r3, #12]
 8002de4:	f003 0320 	and.w	r3, r3, #32
 8002de8:	2b20      	cmp	r3, #32
 8002dea:	d107      	bne.n	8002dfc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f06f 0220 	mvn.w	r2, #32
 8002df4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f000 f88a 	bl	8002f10 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002dfc:	bf00      	nop
 8002dfe:	3708      	adds	r7, #8
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}

08002e04 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b083      	sub	sp, #12
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002e0c:	bf00      	nop
 8002e0e:	370c      	adds	r7, #12
 8002e10:	46bd      	mov	sp, r7
 8002e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e16:	4770      	bx	lr

08002e18 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b083      	sub	sp, #12
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002e20:	bf00      	nop
 8002e22:	370c      	adds	r7, #12
 8002e24:	46bd      	mov	sp, r7
 8002e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2a:	4770      	bx	lr

08002e2c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b083      	sub	sp, #12
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002e34:	bf00      	nop
 8002e36:	370c      	adds	r7, #12
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3e:	4770      	bx	lr

08002e40 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b083      	sub	sp, #12
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002e48:	bf00      	nop
 8002e4a:	370c      	adds	r7, #12
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e52:	4770      	bx	lr

08002e54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b085      	sub	sp, #20
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
 8002e5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	4a26      	ldr	r2, [pc, #152]	; (8002f00 <TIM_Base_SetConfig+0xac>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d003      	beq.n	8002e74 <TIM_Base_SetConfig+0x20>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	4a25      	ldr	r2, [pc, #148]	; (8002f04 <TIM_Base_SetConfig+0xb0>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d108      	bne.n	8002e86 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	68fa      	ldr	r2, [r7, #12]
 8002e82:	4313      	orrs	r3, r2
 8002e84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	4a1d      	ldr	r2, [pc, #116]	; (8002f00 <TIM_Base_SetConfig+0xac>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d00b      	beq.n	8002ea6 <TIM_Base_SetConfig+0x52>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	4a1c      	ldr	r2, [pc, #112]	; (8002f04 <TIM_Base_SetConfig+0xb0>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d007      	beq.n	8002ea6 <TIM_Base_SetConfig+0x52>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	4a1b      	ldr	r2, [pc, #108]	; (8002f08 <TIM_Base_SetConfig+0xb4>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d003      	beq.n	8002ea6 <TIM_Base_SetConfig+0x52>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	4a1a      	ldr	r2, [pc, #104]	; (8002f0c <TIM_Base_SetConfig+0xb8>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d108      	bne.n	8002eb8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002eac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	68db      	ldr	r3, [r3, #12]
 8002eb2:	68fa      	ldr	r2, [r7, #12]
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	695b      	ldr	r3, [r3, #20]
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	68fa      	ldr	r2, [r7, #12]
 8002eca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	689a      	ldr	r2, [r3, #8]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	4a08      	ldr	r2, [pc, #32]	; (8002f00 <TIM_Base_SetConfig+0xac>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d103      	bne.n	8002eec <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	691a      	ldr	r2, [r3, #16]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2201      	movs	r2, #1
 8002ef0:	615a      	str	r2, [r3, #20]
}
 8002ef2:	bf00      	nop
 8002ef4:	3714      	adds	r7, #20
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efc:	4770      	bx	lr
 8002efe:	bf00      	nop
 8002f00:	40010000 	.word	0x40010000
 8002f04:	40000c00 	.word	0x40000c00
 8002f08:	40014000 	.word	0x40014000
 8002f0c:	40014800 	.word	0x40014800

08002f10 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b083      	sub	sp, #12
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002f18:	bf00      	nop
 8002f1a:	370c      	adds	r7, #12
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f22:	4770      	bx	lr

08002f24 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b083      	sub	sp, #12
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002f2c:	bf00      	nop
 8002f2e:	370c      	adds	r7, #12
 8002f30:	46bd      	mov	sp, r7
 8002f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f36:	4770      	bx	lr

08002f38 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b082      	sub	sp, #8
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d101      	bne.n	8002f4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e03f      	b.n	8002fca <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d106      	bne.n	8002f64 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f5e:	6878      	ldr	r0, [r7, #4]
 8002f60:	f7fe f96a 	bl	8001238 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2224      	movs	r2, #36	; 0x24
 8002f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	68da      	ldr	r2, [r3, #12]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f7a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002f7c:	6878      	ldr	r0, [r7, #4]
 8002f7e:	f000 f929 	bl	80031d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	691a      	ldr	r2, [r3, #16]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002f90:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	695a      	ldr	r2, [r3, #20]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002fa0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	68da      	ldr	r2, [r3, #12]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002fb0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2220      	movs	r2, #32
 8002fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2220      	movs	r2, #32
 8002fc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002fc8:	2300      	movs	r3, #0
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3708      	adds	r7, #8
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}

08002fd2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fd2:	b580      	push	{r7, lr}
 8002fd4:	b08a      	sub	sp, #40	; 0x28
 8002fd6:	af02      	add	r7, sp, #8
 8002fd8:	60f8      	str	r0, [r7, #12]
 8002fda:	60b9      	str	r1, [r7, #8]
 8002fdc:	603b      	str	r3, [r7, #0]
 8002fde:	4613      	mov	r3, r2
 8002fe0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	2b20      	cmp	r3, #32
 8002ff0:	d17c      	bne.n	80030ec <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d002      	beq.n	8002ffe <HAL_UART_Transmit+0x2c>
 8002ff8:	88fb      	ldrh	r3, [r7, #6]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d101      	bne.n	8003002 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e075      	b.n	80030ee <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003008:	2b01      	cmp	r3, #1
 800300a:	d101      	bne.n	8003010 <HAL_UART_Transmit+0x3e>
 800300c:	2302      	movs	r3, #2
 800300e:	e06e      	b.n	80030ee <HAL_UART_Transmit+0x11c>
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2201      	movs	r2, #1
 8003014:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2200      	movs	r2, #0
 800301c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	2221      	movs	r2, #33	; 0x21
 8003022:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003026:	f7fe f9af 	bl	8001388 <HAL_GetTick>
 800302a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	88fa      	ldrh	r2, [r7, #6]
 8003030:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	88fa      	ldrh	r2, [r7, #6]
 8003036:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003040:	d108      	bne.n	8003054 <HAL_UART_Transmit+0x82>
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	691b      	ldr	r3, [r3, #16]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d104      	bne.n	8003054 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800304a:	2300      	movs	r3, #0
 800304c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	61bb      	str	r3, [r7, #24]
 8003052:	e003      	b.n	800305c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003058:	2300      	movs	r3, #0
 800305a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2200      	movs	r2, #0
 8003060:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003064:	e02a      	b.n	80030bc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	9300      	str	r3, [sp, #0]
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	2200      	movs	r2, #0
 800306e:	2180      	movs	r1, #128	; 0x80
 8003070:	68f8      	ldr	r0, [r7, #12]
 8003072:	f000 f840 	bl	80030f6 <UART_WaitOnFlagUntilTimeout>
 8003076:	4603      	mov	r3, r0
 8003078:	2b00      	cmp	r3, #0
 800307a:	d001      	beq.n	8003080 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800307c:	2303      	movs	r3, #3
 800307e:	e036      	b.n	80030ee <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003080:	69fb      	ldr	r3, [r7, #28]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d10b      	bne.n	800309e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003086:	69bb      	ldr	r3, [r7, #24]
 8003088:	881b      	ldrh	r3, [r3, #0]
 800308a:	461a      	mov	r2, r3
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003094:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003096:	69bb      	ldr	r3, [r7, #24]
 8003098:	3302      	adds	r3, #2
 800309a:	61bb      	str	r3, [r7, #24]
 800309c:	e007      	b.n	80030ae <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800309e:	69fb      	ldr	r3, [r7, #28]
 80030a0:	781a      	ldrb	r2, [r3, #0]
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80030a8:	69fb      	ldr	r3, [r7, #28]
 80030aa:	3301      	adds	r3, #1
 80030ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80030b2:	b29b      	uxth	r3, r3
 80030b4:	3b01      	subs	r3, #1
 80030b6:	b29a      	uxth	r2, r3
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80030c0:	b29b      	uxth	r3, r3
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d1cf      	bne.n	8003066 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	9300      	str	r3, [sp, #0]
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	2200      	movs	r2, #0
 80030ce:	2140      	movs	r1, #64	; 0x40
 80030d0:	68f8      	ldr	r0, [r7, #12]
 80030d2:	f000 f810 	bl	80030f6 <UART_WaitOnFlagUntilTimeout>
 80030d6:	4603      	mov	r3, r0
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d001      	beq.n	80030e0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80030dc:	2303      	movs	r3, #3
 80030de:	e006      	b.n	80030ee <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	2220      	movs	r2, #32
 80030e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80030e8:	2300      	movs	r3, #0
 80030ea:	e000      	b.n	80030ee <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80030ec:	2302      	movs	r3, #2
  }
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	3720      	adds	r7, #32
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}

080030f6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80030f6:	b580      	push	{r7, lr}
 80030f8:	b090      	sub	sp, #64	; 0x40
 80030fa:	af00      	add	r7, sp, #0
 80030fc:	60f8      	str	r0, [r7, #12]
 80030fe:	60b9      	str	r1, [r7, #8]
 8003100:	603b      	str	r3, [r7, #0]
 8003102:	4613      	mov	r3, r2
 8003104:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003106:	e050      	b.n	80031aa <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003108:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800310a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800310e:	d04c      	beq.n	80031aa <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003110:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003112:	2b00      	cmp	r3, #0
 8003114:	d007      	beq.n	8003126 <UART_WaitOnFlagUntilTimeout+0x30>
 8003116:	f7fe f937 	bl	8001388 <HAL_GetTick>
 800311a:	4602      	mov	r2, r0
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	1ad3      	subs	r3, r2, r3
 8003120:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003122:	429a      	cmp	r2, r3
 8003124:	d241      	bcs.n	80031aa <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	330c      	adds	r3, #12
 800312c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800312e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003130:	e853 3f00 	ldrex	r3, [r3]
 8003134:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003138:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800313c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	330c      	adds	r3, #12
 8003144:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003146:	637a      	str	r2, [r7, #52]	; 0x34
 8003148:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800314a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800314c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800314e:	e841 2300 	strex	r3, r2, [r1]
 8003152:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003156:	2b00      	cmp	r3, #0
 8003158:	d1e5      	bne.n	8003126 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	3314      	adds	r3, #20
 8003160:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	e853 3f00 	ldrex	r3, [r3]
 8003168:	613b      	str	r3, [r7, #16]
   return(result);
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	f023 0301 	bic.w	r3, r3, #1
 8003170:	63bb      	str	r3, [r7, #56]	; 0x38
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	3314      	adds	r3, #20
 8003178:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800317a:	623a      	str	r2, [r7, #32]
 800317c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800317e:	69f9      	ldr	r1, [r7, #28]
 8003180:	6a3a      	ldr	r2, [r7, #32]
 8003182:	e841 2300 	strex	r3, r2, [r1]
 8003186:	61bb      	str	r3, [r7, #24]
   return(result);
 8003188:	69bb      	ldr	r3, [r7, #24]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d1e5      	bne.n	800315a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2220      	movs	r2, #32
 8003192:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	2220      	movs	r2, #32
 800319a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	2200      	movs	r2, #0
 80031a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80031a6:	2303      	movs	r3, #3
 80031a8:	e00f      	b.n	80031ca <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	4013      	ands	r3, r2
 80031b4:	68ba      	ldr	r2, [r7, #8]
 80031b6:	429a      	cmp	r2, r3
 80031b8:	bf0c      	ite	eq
 80031ba:	2301      	moveq	r3, #1
 80031bc:	2300      	movne	r3, #0
 80031be:	b2db      	uxtb	r3, r3
 80031c0:	461a      	mov	r2, r3
 80031c2:	79fb      	ldrb	r3, [r7, #7]
 80031c4:	429a      	cmp	r2, r3
 80031c6:	d09f      	beq.n	8003108 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80031c8:	2300      	movs	r3, #0
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3740      	adds	r7, #64	; 0x40
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}
	...

080031d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80031d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031d8:	b0c0      	sub	sp, #256	; 0x100
 80031da:	af00      	add	r7, sp, #0
 80031dc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	691b      	ldr	r3, [r3, #16]
 80031e8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80031ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031f0:	68d9      	ldr	r1, [r3, #12]
 80031f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	ea40 0301 	orr.w	r3, r0, r1
 80031fc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80031fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003202:	689a      	ldr	r2, [r3, #8]
 8003204:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003208:	691b      	ldr	r3, [r3, #16]
 800320a:	431a      	orrs	r2, r3
 800320c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003210:	695b      	ldr	r3, [r3, #20]
 8003212:	431a      	orrs	r2, r3
 8003214:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003218:	69db      	ldr	r3, [r3, #28]
 800321a:	4313      	orrs	r3, r2
 800321c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003220:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	68db      	ldr	r3, [r3, #12]
 8003228:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800322c:	f021 010c 	bic.w	r1, r1, #12
 8003230:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003234:	681a      	ldr	r2, [r3, #0]
 8003236:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800323a:	430b      	orrs	r3, r1
 800323c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800323e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	695b      	ldr	r3, [r3, #20]
 8003246:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800324a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800324e:	6999      	ldr	r1, [r3, #24]
 8003250:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	ea40 0301 	orr.w	r3, r0, r1
 800325a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800325c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	4b8f      	ldr	r3, [pc, #572]	; (80034a0 <UART_SetConfig+0x2cc>)
 8003264:	429a      	cmp	r2, r3
 8003266:	d005      	beq.n	8003274 <UART_SetConfig+0xa0>
 8003268:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800326c:	681a      	ldr	r2, [r3, #0]
 800326e:	4b8d      	ldr	r3, [pc, #564]	; (80034a4 <UART_SetConfig+0x2d0>)
 8003270:	429a      	cmp	r2, r3
 8003272:	d104      	bne.n	800327e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003274:	f7ff f8d6 	bl	8002424 <HAL_RCC_GetPCLK2Freq>
 8003278:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800327c:	e003      	b.n	8003286 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800327e:	f7ff f8bd 	bl	80023fc <HAL_RCC_GetPCLK1Freq>
 8003282:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003286:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800328a:	69db      	ldr	r3, [r3, #28]
 800328c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003290:	f040 810c 	bne.w	80034ac <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003294:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003298:	2200      	movs	r2, #0
 800329a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800329e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80032a2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80032a6:	4622      	mov	r2, r4
 80032a8:	462b      	mov	r3, r5
 80032aa:	1891      	adds	r1, r2, r2
 80032ac:	65b9      	str	r1, [r7, #88]	; 0x58
 80032ae:	415b      	adcs	r3, r3
 80032b0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80032b2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80032b6:	4621      	mov	r1, r4
 80032b8:	eb12 0801 	adds.w	r8, r2, r1
 80032bc:	4629      	mov	r1, r5
 80032be:	eb43 0901 	adc.w	r9, r3, r1
 80032c2:	f04f 0200 	mov.w	r2, #0
 80032c6:	f04f 0300 	mov.w	r3, #0
 80032ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80032ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80032d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80032d6:	4690      	mov	r8, r2
 80032d8:	4699      	mov	r9, r3
 80032da:	4623      	mov	r3, r4
 80032dc:	eb18 0303 	adds.w	r3, r8, r3
 80032e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80032e4:	462b      	mov	r3, r5
 80032e6:	eb49 0303 	adc.w	r3, r9, r3
 80032ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80032ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	2200      	movs	r2, #0
 80032f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80032fa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80032fe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003302:	460b      	mov	r3, r1
 8003304:	18db      	adds	r3, r3, r3
 8003306:	653b      	str	r3, [r7, #80]	; 0x50
 8003308:	4613      	mov	r3, r2
 800330a:	eb42 0303 	adc.w	r3, r2, r3
 800330e:	657b      	str	r3, [r7, #84]	; 0x54
 8003310:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003314:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003318:	f7fc ffca 	bl	80002b0 <__aeabi_uldivmod>
 800331c:	4602      	mov	r2, r0
 800331e:	460b      	mov	r3, r1
 8003320:	4b61      	ldr	r3, [pc, #388]	; (80034a8 <UART_SetConfig+0x2d4>)
 8003322:	fba3 2302 	umull	r2, r3, r3, r2
 8003326:	095b      	lsrs	r3, r3, #5
 8003328:	011c      	lsls	r4, r3, #4
 800332a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800332e:	2200      	movs	r2, #0
 8003330:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003334:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003338:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800333c:	4642      	mov	r2, r8
 800333e:	464b      	mov	r3, r9
 8003340:	1891      	adds	r1, r2, r2
 8003342:	64b9      	str	r1, [r7, #72]	; 0x48
 8003344:	415b      	adcs	r3, r3
 8003346:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003348:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800334c:	4641      	mov	r1, r8
 800334e:	eb12 0a01 	adds.w	sl, r2, r1
 8003352:	4649      	mov	r1, r9
 8003354:	eb43 0b01 	adc.w	fp, r3, r1
 8003358:	f04f 0200 	mov.w	r2, #0
 800335c:	f04f 0300 	mov.w	r3, #0
 8003360:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003364:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003368:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800336c:	4692      	mov	sl, r2
 800336e:	469b      	mov	fp, r3
 8003370:	4643      	mov	r3, r8
 8003372:	eb1a 0303 	adds.w	r3, sl, r3
 8003376:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800337a:	464b      	mov	r3, r9
 800337c:	eb4b 0303 	adc.w	r3, fp, r3
 8003380:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003384:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	2200      	movs	r2, #0
 800338c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003390:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003394:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003398:	460b      	mov	r3, r1
 800339a:	18db      	adds	r3, r3, r3
 800339c:	643b      	str	r3, [r7, #64]	; 0x40
 800339e:	4613      	mov	r3, r2
 80033a0:	eb42 0303 	adc.w	r3, r2, r3
 80033a4:	647b      	str	r3, [r7, #68]	; 0x44
 80033a6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80033aa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80033ae:	f7fc ff7f 	bl	80002b0 <__aeabi_uldivmod>
 80033b2:	4602      	mov	r2, r0
 80033b4:	460b      	mov	r3, r1
 80033b6:	4611      	mov	r1, r2
 80033b8:	4b3b      	ldr	r3, [pc, #236]	; (80034a8 <UART_SetConfig+0x2d4>)
 80033ba:	fba3 2301 	umull	r2, r3, r3, r1
 80033be:	095b      	lsrs	r3, r3, #5
 80033c0:	2264      	movs	r2, #100	; 0x64
 80033c2:	fb02 f303 	mul.w	r3, r2, r3
 80033c6:	1acb      	subs	r3, r1, r3
 80033c8:	00db      	lsls	r3, r3, #3
 80033ca:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80033ce:	4b36      	ldr	r3, [pc, #216]	; (80034a8 <UART_SetConfig+0x2d4>)
 80033d0:	fba3 2302 	umull	r2, r3, r3, r2
 80033d4:	095b      	lsrs	r3, r3, #5
 80033d6:	005b      	lsls	r3, r3, #1
 80033d8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80033dc:	441c      	add	r4, r3
 80033de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80033e2:	2200      	movs	r2, #0
 80033e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80033e8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80033ec:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80033f0:	4642      	mov	r2, r8
 80033f2:	464b      	mov	r3, r9
 80033f4:	1891      	adds	r1, r2, r2
 80033f6:	63b9      	str	r1, [r7, #56]	; 0x38
 80033f8:	415b      	adcs	r3, r3
 80033fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80033fc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003400:	4641      	mov	r1, r8
 8003402:	1851      	adds	r1, r2, r1
 8003404:	6339      	str	r1, [r7, #48]	; 0x30
 8003406:	4649      	mov	r1, r9
 8003408:	414b      	adcs	r3, r1
 800340a:	637b      	str	r3, [r7, #52]	; 0x34
 800340c:	f04f 0200 	mov.w	r2, #0
 8003410:	f04f 0300 	mov.w	r3, #0
 8003414:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003418:	4659      	mov	r1, fp
 800341a:	00cb      	lsls	r3, r1, #3
 800341c:	4651      	mov	r1, sl
 800341e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003422:	4651      	mov	r1, sl
 8003424:	00ca      	lsls	r2, r1, #3
 8003426:	4610      	mov	r0, r2
 8003428:	4619      	mov	r1, r3
 800342a:	4603      	mov	r3, r0
 800342c:	4642      	mov	r2, r8
 800342e:	189b      	adds	r3, r3, r2
 8003430:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003434:	464b      	mov	r3, r9
 8003436:	460a      	mov	r2, r1
 8003438:	eb42 0303 	adc.w	r3, r2, r3
 800343c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003440:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	2200      	movs	r2, #0
 8003448:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800344c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003450:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003454:	460b      	mov	r3, r1
 8003456:	18db      	adds	r3, r3, r3
 8003458:	62bb      	str	r3, [r7, #40]	; 0x28
 800345a:	4613      	mov	r3, r2
 800345c:	eb42 0303 	adc.w	r3, r2, r3
 8003460:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003462:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003466:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800346a:	f7fc ff21 	bl	80002b0 <__aeabi_uldivmod>
 800346e:	4602      	mov	r2, r0
 8003470:	460b      	mov	r3, r1
 8003472:	4b0d      	ldr	r3, [pc, #52]	; (80034a8 <UART_SetConfig+0x2d4>)
 8003474:	fba3 1302 	umull	r1, r3, r3, r2
 8003478:	095b      	lsrs	r3, r3, #5
 800347a:	2164      	movs	r1, #100	; 0x64
 800347c:	fb01 f303 	mul.w	r3, r1, r3
 8003480:	1ad3      	subs	r3, r2, r3
 8003482:	00db      	lsls	r3, r3, #3
 8003484:	3332      	adds	r3, #50	; 0x32
 8003486:	4a08      	ldr	r2, [pc, #32]	; (80034a8 <UART_SetConfig+0x2d4>)
 8003488:	fba2 2303 	umull	r2, r3, r2, r3
 800348c:	095b      	lsrs	r3, r3, #5
 800348e:	f003 0207 	and.w	r2, r3, #7
 8003492:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4422      	add	r2, r4
 800349a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800349c:	e105      	b.n	80036aa <UART_SetConfig+0x4d6>
 800349e:	bf00      	nop
 80034a0:	40011000 	.word	0x40011000
 80034a4:	40011400 	.word	0x40011400
 80034a8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80034ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80034b0:	2200      	movs	r2, #0
 80034b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80034b6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80034ba:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80034be:	4642      	mov	r2, r8
 80034c0:	464b      	mov	r3, r9
 80034c2:	1891      	adds	r1, r2, r2
 80034c4:	6239      	str	r1, [r7, #32]
 80034c6:	415b      	adcs	r3, r3
 80034c8:	627b      	str	r3, [r7, #36]	; 0x24
 80034ca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80034ce:	4641      	mov	r1, r8
 80034d0:	1854      	adds	r4, r2, r1
 80034d2:	4649      	mov	r1, r9
 80034d4:	eb43 0501 	adc.w	r5, r3, r1
 80034d8:	f04f 0200 	mov.w	r2, #0
 80034dc:	f04f 0300 	mov.w	r3, #0
 80034e0:	00eb      	lsls	r3, r5, #3
 80034e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80034e6:	00e2      	lsls	r2, r4, #3
 80034e8:	4614      	mov	r4, r2
 80034ea:	461d      	mov	r5, r3
 80034ec:	4643      	mov	r3, r8
 80034ee:	18e3      	adds	r3, r4, r3
 80034f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80034f4:	464b      	mov	r3, r9
 80034f6:	eb45 0303 	adc.w	r3, r5, r3
 80034fa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80034fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	2200      	movs	r2, #0
 8003506:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800350a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800350e:	f04f 0200 	mov.w	r2, #0
 8003512:	f04f 0300 	mov.w	r3, #0
 8003516:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800351a:	4629      	mov	r1, r5
 800351c:	008b      	lsls	r3, r1, #2
 800351e:	4621      	mov	r1, r4
 8003520:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003524:	4621      	mov	r1, r4
 8003526:	008a      	lsls	r2, r1, #2
 8003528:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800352c:	f7fc fec0 	bl	80002b0 <__aeabi_uldivmod>
 8003530:	4602      	mov	r2, r0
 8003532:	460b      	mov	r3, r1
 8003534:	4b60      	ldr	r3, [pc, #384]	; (80036b8 <UART_SetConfig+0x4e4>)
 8003536:	fba3 2302 	umull	r2, r3, r3, r2
 800353a:	095b      	lsrs	r3, r3, #5
 800353c:	011c      	lsls	r4, r3, #4
 800353e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003542:	2200      	movs	r2, #0
 8003544:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003548:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800354c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003550:	4642      	mov	r2, r8
 8003552:	464b      	mov	r3, r9
 8003554:	1891      	adds	r1, r2, r2
 8003556:	61b9      	str	r1, [r7, #24]
 8003558:	415b      	adcs	r3, r3
 800355a:	61fb      	str	r3, [r7, #28]
 800355c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003560:	4641      	mov	r1, r8
 8003562:	1851      	adds	r1, r2, r1
 8003564:	6139      	str	r1, [r7, #16]
 8003566:	4649      	mov	r1, r9
 8003568:	414b      	adcs	r3, r1
 800356a:	617b      	str	r3, [r7, #20]
 800356c:	f04f 0200 	mov.w	r2, #0
 8003570:	f04f 0300 	mov.w	r3, #0
 8003574:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003578:	4659      	mov	r1, fp
 800357a:	00cb      	lsls	r3, r1, #3
 800357c:	4651      	mov	r1, sl
 800357e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003582:	4651      	mov	r1, sl
 8003584:	00ca      	lsls	r2, r1, #3
 8003586:	4610      	mov	r0, r2
 8003588:	4619      	mov	r1, r3
 800358a:	4603      	mov	r3, r0
 800358c:	4642      	mov	r2, r8
 800358e:	189b      	adds	r3, r3, r2
 8003590:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003594:	464b      	mov	r3, r9
 8003596:	460a      	mov	r2, r1
 8003598:	eb42 0303 	adc.w	r3, r2, r3
 800359c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80035a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	2200      	movs	r2, #0
 80035a8:	67bb      	str	r3, [r7, #120]	; 0x78
 80035aa:	67fa      	str	r2, [r7, #124]	; 0x7c
 80035ac:	f04f 0200 	mov.w	r2, #0
 80035b0:	f04f 0300 	mov.w	r3, #0
 80035b4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80035b8:	4649      	mov	r1, r9
 80035ba:	008b      	lsls	r3, r1, #2
 80035bc:	4641      	mov	r1, r8
 80035be:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80035c2:	4641      	mov	r1, r8
 80035c4:	008a      	lsls	r2, r1, #2
 80035c6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80035ca:	f7fc fe71 	bl	80002b0 <__aeabi_uldivmod>
 80035ce:	4602      	mov	r2, r0
 80035d0:	460b      	mov	r3, r1
 80035d2:	4b39      	ldr	r3, [pc, #228]	; (80036b8 <UART_SetConfig+0x4e4>)
 80035d4:	fba3 1302 	umull	r1, r3, r3, r2
 80035d8:	095b      	lsrs	r3, r3, #5
 80035da:	2164      	movs	r1, #100	; 0x64
 80035dc:	fb01 f303 	mul.w	r3, r1, r3
 80035e0:	1ad3      	subs	r3, r2, r3
 80035e2:	011b      	lsls	r3, r3, #4
 80035e4:	3332      	adds	r3, #50	; 0x32
 80035e6:	4a34      	ldr	r2, [pc, #208]	; (80036b8 <UART_SetConfig+0x4e4>)
 80035e8:	fba2 2303 	umull	r2, r3, r2, r3
 80035ec:	095b      	lsrs	r3, r3, #5
 80035ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80035f2:	441c      	add	r4, r3
 80035f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80035f8:	2200      	movs	r2, #0
 80035fa:	673b      	str	r3, [r7, #112]	; 0x70
 80035fc:	677a      	str	r2, [r7, #116]	; 0x74
 80035fe:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003602:	4642      	mov	r2, r8
 8003604:	464b      	mov	r3, r9
 8003606:	1891      	adds	r1, r2, r2
 8003608:	60b9      	str	r1, [r7, #8]
 800360a:	415b      	adcs	r3, r3
 800360c:	60fb      	str	r3, [r7, #12]
 800360e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003612:	4641      	mov	r1, r8
 8003614:	1851      	adds	r1, r2, r1
 8003616:	6039      	str	r1, [r7, #0]
 8003618:	4649      	mov	r1, r9
 800361a:	414b      	adcs	r3, r1
 800361c:	607b      	str	r3, [r7, #4]
 800361e:	f04f 0200 	mov.w	r2, #0
 8003622:	f04f 0300 	mov.w	r3, #0
 8003626:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800362a:	4659      	mov	r1, fp
 800362c:	00cb      	lsls	r3, r1, #3
 800362e:	4651      	mov	r1, sl
 8003630:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003634:	4651      	mov	r1, sl
 8003636:	00ca      	lsls	r2, r1, #3
 8003638:	4610      	mov	r0, r2
 800363a:	4619      	mov	r1, r3
 800363c:	4603      	mov	r3, r0
 800363e:	4642      	mov	r2, r8
 8003640:	189b      	adds	r3, r3, r2
 8003642:	66bb      	str	r3, [r7, #104]	; 0x68
 8003644:	464b      	mov	r3, r9
 8003646:	460a      	mov	r2, r1
 8003648:	eb42 0303 	adc.w	r3, r2, r3
 800364c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800364e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	2200      	movs	r2, #0
 8003656:	663b      	str	r3, [r7, #96]	; 0x60
 8003658:	667a      	str	r2, [r7, #100]	; 0x64
 800365a:	f04f 0200 	mov.w	r2, #0
 800365e:	f04f 0300 	mov.w	r3, #0
 8003662:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003666:	4649      	mov	r1, r9
 8003668:	008b      	lsls	r3, r1, #2
 800366a:	4641      	mov	r1, r8
 800366c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003670:	4641      	mov	r1, r8
 8003672:	008a      	lsls	r2, r1, #2
 8003674:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003678:	f7fc fe1a 	bl	80002b0 <__aeabi_uldivmod>
 800367c:	4602      	mov	r2, r0
 800367e:	460b      	mov	r3, r1
 8003680:	4b0d      	ldr	r3, [pc, #52]	; (80036b8 <UART_SetConfig+0x4e4>)
 8003682:	fba3 1302 	umull	r1, r3, r3, r2
 8003686:	095b      	lsrs	r3, r3, #5
 8003688:	2164      	movs	r1, #100	; 0x64
 800368a:	fb01 f303 	mul.w	r3, r1, r3
 800368e:	1ad3      	subs	r3, r2, r3
 8003690:	011b      	lsls	r3, r3, #4
 8003692:	3332      	adds	r3, #50	; 0x32
 8003694:	4a08      	ldr	r2, [pc, #32]	; (80036b8 <UART_SetConfig+0x4e4>)
 8003696:	fba2 2303 	umull	r2, r3, r2, r3
 800369a:	095b      	lsrs	r3, r3, #5
 800369c:	f003 020f 	and.w	r2, r3, #15
 80036a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4422      	add	r2, r4
 80036a8:	609a      	str	r2, [r3, #8]
}
 80036aa:	bf00      	nop
 80036ac:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80036b0:	46bd      	mov	sp, r7
 80036b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80036b6:	bf00      	nop
 80036b8:	51eb851f 	.word	0x51eb851f

080036bc <__NVIC_SetPriority>:
{
 80036bc:	b480      	push	{r7}
 80036be:	b083      	sub	sp, #12
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	4603      	mov	r3, r0
 80036c4:	6039      	str	r1, [r7, #0]
 80036c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	db0a      	blt.n	80036e6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	b2da      	uxtb	r2, r3
 80036d4:	490c      	ldr	r1, [pc, #48]	; (8003708 <__NVIC_SetPriority+0x4c>)
 80036d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036da:	0112      	lsls	r2, r2, #4
 80036dc:	b2d2      	uxtb	r2, r2
 80036de:	440b      	add	r3, r1
 80036e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80036e4:	e00a      	b.n	80036fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	b2da      	uxtb	r2, r3
 80036ea:	4908      	ldr	r1, [pc, #32]	; (800370c <__NVIC_SetPriority+0x50>)
 80036ec:	79fb      	ldrb	r3, [r7, #7]
 80036ee:	f003 030f 	and.w	r3, r3, #15
 80036f2:	3b04      	subs	r3, #4
 80036f4:	0112      	lsls	r2, r2, #4
 80036f6:	b2d2      	uxtb	r2, r2
 80036f8:	440b      	add	r3, r1
 80036fa:	761a      	strb	r2, [r3, #24]
}
 80036fc:	bf00      	nop
 80036fe:	370c      	adds	r7, #12
 8003700:	46bd      	mov	sp, r7
 8003702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003706:	4770      	bx	lr
 8003708:	e000e100 	.word	0xe000e100
 800370c:	e000ed00 	.word	0xe000ed00

08003710 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003710:	b580      	push	{r7, lr}
 8003712:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003714:	4b05      	ldr	r3, [pc, #20]	; (800372c <SysTick_Handler+0x1c>)
 8003716:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003718:	f002 f814 	bl	8005744 <xTaskGetSchedulerState>
 800371c:	4603      	mov	r3, r0
 800371e:	2b01      	cmp	r3, #1
 8003720:	d001      	beq.n	8003726 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8003722:	f002 ffe9 	bl	80066f8 <xPortSysTickHandler>
  }
}
 8003726:	bf00      	nop
 8003728:	bd80      	pop	{r7, pc}
 800372a:	bf00      	nop
 800372c:	e000e010 	.word	0xe000e010

08003730 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003730:	b580      	push	{r7, lr}
 8003732:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003734:	2100      	movs	r1, #0
 8003736:	f06f 0004 	mvn.w	r0, #4
 800373a:	f7ff ffbf 	bl	80036bc <__NVIC_SetPriority>
#endif
}
 800373e:	bf00      	nop
 8003740:	bd80      	pop	{r7, pc}
	...

08003744 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003744:	b480      	push	{r7}
 8003746:	b083      	sub	sp, #12
 8003748:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800374a:	f3ef 8305 	mrs	r3, IPSR
 800374e:	603b      	str	r3, [r7, #0]
  return(result);
 8003750:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003752:	2b00      	cmp	r3, #0
 8003754:	d003      	beq.n	800375e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003756:	f06f 0305 	mvn.w	r3, #5
 800375a:	607b      	str	r3, [r7, #4]
 800375c:	e00c      	b.n	8003778 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800375e:	4b0a      	ldr	r3, [pc, #40]	; (8003788 <osKernelInitialize+0x44>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d105      	bne.n	8003772 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003766:	4b08      	ldr	r3, [pc, #32]	; (8003788 <osKernelInitialize+0x44>)
 8003768:	2201      	movs	r2, #1
 800376a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800376c:	2300      	movs	r3, #0
 800376e:	607b      	str	r3, [r7, #4]
 8003770:	e002      	b.n	8003778 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003772:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003776:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003778:	687b      	ldr	r3, [r7, #4]
}
 800377a:	4618      	mov	r0, r3
 800377c:	370c      	adds	r7, #12
 800377e:	46bd      	mov	sp, r7
 8003780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003784:	4770      	bx	lr
 8003786:	bf00      	nop
 8003788:	200002a0 	.word	0x200002a0

0800378c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800378c:	b580      	push	{r7, lr}
 800378e:	b082      	sub	sp, #8
 8003790:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003792:	f3ef 8305 	mrs	r3, IPSR
 8003796:	603b      	str	r3, [r7, #0]
  return(result);
 8003798:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800379a:	2b00      	cmp	r3, #0
 800379c:	d003      	beq.n	80037a6 <osKernelStart+0x1a>
    stat = osErrorISR;
 800379e:	f06f 0305 	mvn.w	r3, #5
 80037a2:	607b      	str	r3, [r7, #4]
 80037a4:	e010      	b.n	80037c8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80037a6:	4b0b      	ldr	r3, [pc, #44]	; (80037d4 <osKernelStart+0x48>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	2b01      	cmp	r3, #1
 80037ac:	d109      	bne.n	80037c2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80037ae:	f7ff ffbf 	bl	8003730 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80037b2:	4b08      	ldr	r3, [pc, #32]	; (80037d4 <osKernelStart+0x48>)
 80037b4:	2202      	movs	r2, #2
 80037b6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80037b8:	f001 fb7c 	bl	8004eb4 <vTaskStartScheduler>
      stat = osOK;
 80037bc:	2300      	movs	r3, #0
 80037be:	607b      	str	r3, [r7, #4]
 80037c0:	e002      	b.n	80037c8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80037c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80037c6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80037c8:	687b      	ldr	r3, [r7, #4]
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	3708      	adds	r7, #8
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}
 80037d2:	bf00      	nop
 80037d4:	200002a0 	.word	0x200002a0

080037d8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80037d8:	b580      	push	{r7, lr}
 80037da:	b08e      	sub	sp, #56	; 0x38
 80037dc:	af04      	add	r7, sp, #16
 80037de:	60f8      	str	r0, [r7, #12]
 80037e0:	60b9      	str	r1, [r7, #8]
 80037e2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80037e4:	2300      	movs	r3, #0
 80037e6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80037e8:	f3ef 8305 	mrs	r3, IPSR
 80037ec:	617b      	str	r3, [r7, #20]
  return(result);
 80037ee:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d17e      	bne.n	80038f2 <osThreadNew+0x11a>
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d07b      	beq.n	80038f2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80037fa:	2380      	movs	r3, #128	; 0x80
 80037fc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80037fe:	2318      	movs	r3, #24
 8003800:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003802:	2300      	movs	r3, #0
 8003804:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8003806:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800380a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d045      	beq.n	800389e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d002      	beq.n	8003820 <osThreadNew+0x48>
        name = attr->name;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	699b      	ldr	r3, [r3, #24]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d002      	beq.n	800382e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	699b      	ldr	r3, [r3, #24]
 800382c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800382e:	69fb      	ldr	r3, [r7, #28]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d008      	beq.n	8003846 <osThreadNew+0x6e>
 8003834:	69fb      	ldr	r3, [r7, #28]
 8003836:	2b38      	cmp	r3, #56	; 0x38
 8003838:	d805      	bhi.n	8003846 <osThreadNew+0x6e>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	f003 0301 	and.w	r3, r3, #1
 8003842:	2b00      	cmp	r3, #0
 8003844:	d001      	beq.n	800384a <osThreadNew+0x72>
        return (NULL);
 8003846:	2300      	movs	r3, #0
 8003848:	e054      	b.n	80038f4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	695b      	ldr	r3, [r3, #20]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d003      	beq.n	800385a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	695b      	ldr	r3, [r3, #20]
 8003856:	089b      	lsrs	r3, r3, #2
 8003858:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d00e      	beq.n	8003880 <osThreadNew+0xa8>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	68db      	ldr	r3, [r3, #12]
 8003866:	2b5b      	cmp	r3, #91	; 0x5b
 8003868:	d90a      	bls.n	8003880 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800386e:	2b00      	cmp	r3, #0
 8003870:	d006      	beq.n	8003880 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	695b      	ldr	r3, [r3, #20]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d002      	beq.n	8003880 <osThreadNew+0xa8>
        mem = 1;
 800387a:	2301      	movs	r3, #1
 800387c:	61bb      	str	r3, [r7, #24]
 800387e:	e010      	b.n	80038a2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d10c      	bne.n	80038a2 <osThreadNew+0xca>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	68db      	ldr	r3, [r3, #12]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d108      	bne.n	80038a2 <osThreadNew+0xca>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	691b      	ldr	r3, [r3, #16]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d104      	bne.n	80038a2 <osThreadNew+0xca>
          mem = 0;
 8003898:	2300      	movs	r3, #0
 800389a:	61bb      	str	r3, [r7, #24]
 800389c:	e001      	b.n	80038a2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800389e:	2300      	movs	r3, #0
 80038a0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80038a2:	69bb      	ldr	r3, [r7, #24]
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d110      	bne.n	80038ca <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80038ac:	687a      	ldr	r2, [r7, #4]
 80038ae:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80038b0:	9202      	str	r2, [sp, #8]
 80038b2:	9301      	str	r3, [sp, #4]
 80038b4:	69fb      	ldr	r3, [r7, #28]
 80038b6:	9300      	str	r3, [sp, #0]
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	6a3a      	ldr	r2, [r7, #32]
 80038bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80038be:	68f8      	ldr	r0, [r7, #12]
 80038c0:	f001 f922 	bl	8004b08 <xTaskCreateStatic>
 80038c4:	4603      	mov	r3, r0
 80038c6:	613b      	str	r3, [r7, #16]
 80038c8:	e013      	b.n	80038f2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80038ca:	69bb      	ldr	r3, [r7, #24]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d110      	bne.n	80038f2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80038d0:	6a3b      	ldr	r3, [r7, #32]
 80038d2:	b29a      	uxth	r2, r3
 80038d4:	f107 0310 	add.w	r3, r7, #16
 80038d8:	9301      	str	r3, [sp, #4]
 80038da:	69fb      	ldr	r3, [r7, #28]
 80038dc:	9300      	str	r3, [sp, #0]
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80038e2:	68f8      	ldr	r0, [r7, #12]
 80038e4:	f001 f96d 	bl	8004bc2 <xTaskCreate>
 80038e8:	4603      	mov	r3, r0
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	d001      	beq.n	80038f2 <osThreadNew+0x11a>
            hTask = NULL;
 80038ee:	2300      	movs	r3, #0
 80038f0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80038f2:	693b      	ldr	r3, [r7, #16]
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	3728      	adds	r7, #40	; 0x28
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}

080038fc <osThreadFlagsSet>:
  return (count);
}
#endif /* (configUSE_OS2_THREAD_ENUMERATE == 1) */

#if (configUSE_OS2_THREAD_FLAGS == 1)
uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b088      	sub	sp, #32
 8003900:	af02      	add	r7, sp, #8
 8003902:	6078      	str	r0, [r7, #4]
 8003904:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	617b      	str	r3, [r7, #20]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d002      	beq.n	8003916 <osThreadFlagsSet+0x1a>
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	2b00      	cmp	r3, #0
 8003914:	da03      	bge.n	800391e <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 8003916:	f06f 0303 	mvn.w	r3, #3
 800391a:	60fb      	str	r3, [r7, #12]
 800391c:	e035      	b.n	800398a <osThreadFlagsSet+0x8e>
  }
  else {
    rflags = (uint32_t)osError;
 800391e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003922:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003924:	f3ef 8305 	mrs	r3, IPSR
 8003928:	613b      	str	r3, [r7, #16]
  return(result);
 800392a:	693b      	ldr	r3, [r7, #16]

    if (IS_IRQ()) {
 800392c:	2b00      	cmp	r3, #0
 800392e:	d01f      	beq.n	8003970 <osThreadFlagsSet+0x74>
      yield = pdFALSE;
 8003930:	2300      	movs	r3, #0
 8003932:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 8003934:	f107 0308 	add.w	r3, r7, #8
 8003938:	9300      	str	r3, [sp, #0]
 800393a:	2300      	movs	r3, #0
 800393c:	2201      	movs	r2, #1
 800393e:	6839      	ldr	r1, [r7, #0]
 8003940:	6978      	ldr	r0, [r7, #20]
 8003942:	f002 f89d 	bl	8005a80 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 8003946:	f107 030c 	add.w	r3, r7, #12
 800394a:	2200      	movs	r2, #0
 800394c:	9200      	str	r2, [sp, #0]
 800394e:	2200      	movs	r2, #0
 8003950:	2100      	movs	r1, #0
 8003952:	6978      	ldr	r0, [r7, #20]
 8003954:	f002 f894 	bl	8005a80 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d015      	beq.n	800398a <osThreadFlagsSet+0x8e>
 800395e:	4b0d      	ldr	r3, [pc, #52]	; (8003994 <osThreadFlagsSet+0x98>)
 8003960:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003964:	601a      	str	r2, [r3, #0]
 8003966:	f3bf 8f4f 	dsb	sy
 800396a:	f3bf 8f6f 	isb	sy
 800396e:	e00c      	b.n	800398a <osThreadFlagsSet+0x8e>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 8003970:	2300      	movs	r3, #0
 8003972:	2201      	movs	r2, #1
 8003974:	6839      	ldr	r1, [r7, #0]
 8003976:	6978      	ldr	r0, [r7, #20]
 8003978:	f001 ffca 	bl	8005910 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 800397c:	f107 030c 	add.w	r3, r7, #12
 8003980:	2200      	movs	r2, #0
 8003982:	2100      	movs	r1, #0
 8003984:	6978      	ldr	r0, [r7, #20]
 8003986:	f001 ffc3 	bl	8005910 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 800398a:	68fb      	ldr	r3, [r7, #12]
}
 800398c:	4618      	mov	r0, r3
 800398e:	3718      	adds	r7, #24
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}
 8003994:	e000ed04 	.word	0xe000ed04

08003998 <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 8003998:	b580      	push	{r7, lr}
 800399a:	b08c      	sub	sp, #48	; 0x30
 800399c:	af00      	add	r7, sp, #0
 800399e:	60f8      	str	r0, [r7, #12]
 80039a0:	60b9      	str	r1, [r7, #8]
 80039a2:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80039a4:	f3ef 8305 	mrs	r3, IPSR
 80039a8:	617b      	str	r3, [r7, #20]
  return(result);
 80039aa:	697b      	ldr	r3, [r7, #20]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d003      	beq.n	80039b8 <osThreadFlagsWait+0x20>
    rflags = (uint32_t)osErrorISR;
 80039b0:	f06f 0305 	mvn.w	r3, #5
 80039b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80039b6:	e06b      	b.n	8003a90 <osThreadFlagsWait+0xf8>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	da03      	bge.n	80039c6 <osThreadFlagsWait+0x2e>
    rflags = (uint32_t)osErrorParameter;
 80039be:	f06f 0303 	mvn.w	r3, #3
 80039c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80039c4:	e064      	b.n	8003a90 <osThreadFlagsWait+0xf8>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	f003 0302 	and.w	r3, r3, #2
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d002      	beq.n	80039d6 <osThreadFlagsWait+0x3e>
      clear = 0U;
 80039d0:	2300      	movs	r3, #0
 80039d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80039d4:	e001      	b.n	80039da <osThreadFlagsWait+0x42>
    } else {
      clear = flags;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    rflags = 0U;
 80039da:	2300      	movs	r3, #0
 80039dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    tout   = timeout;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	627b      	str	r3, [r7, #36]	; 0x24

    t0 = xTaskGetTickCount();
 80039e2:	f001 fb79 	bl	80050d8 <xTaskGetTickCount>
 80039e6:	6238      	str	r0, [r7, #32]
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 80039e8:	f107 0210 	add.w	r2, r7, #16
 80039ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80039f0:	2000      	movs	r0, #0
 80039f2:	f001 ff33 	bl	800585c <xTaskNotifyWait>
 80039f6:	61f8      	str	r0, [r7, #28]

      if (rval == pdPASS) {
 80039f8:	69fb      	ldr	r3, [r7, #28]
 80039fa:	2b01      	cmp	r3, #1
 80039fc:	d137      	bne.n	8003a6e <osThreadFlagsWait+0xd6>
        rflags &= flags;
 80039fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	4013      	ands	r3, r2
 8003a04:	62fb      	str	r3, [r7, #44]	; 0x2c
        rflags |= nval;
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	62fb      	str	r3, [r7, #44]	; 0x2c

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	f003 0301 	and.w	r3, r3, #1
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d00c      	beq.n	8003a32 <osThreadFlagsWait+0x9a>
          if ((flags & rflags) == flags) {
 8003a18:	68fa      	ldr	r2, [r7, #12]
 8003a1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a1c:	4013      	ands	r3, r2
 8003a1e:	68fa      	ldr	r2, [r7, #12]
 8003a20:	429a      	cmp	r2, r3
 8003a22:	d032      	beq.n	8003a8a <osThreadFlagsWait+0xf2>
            break;
          } else {
            if (timeout == 0U) {
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d10f      	bne.n	8003a4a <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 8003a2a:	f06f 0302 	mvn.w	r3, #2
 8003a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 8003a30:	e02e      	b.n	8003a90 <osThreadFlagsWait+0xf8>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 8003a32:	68fa      	ldr	r2, [r7, #12]
 8003a34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a36:	4013      	ands	r3, r2
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d128      	bne.n	8003a8e <osThreadFlagsWait+0xf6>
            break;
          } else {
            if (timeout == 0U) {
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d103      	bne.n	8003a4a <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 8003a42:	f06f 0302 	mvn.w	r3, #2
 8003a46:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 8003a48:	e022      	b.n	8003a90 <osThreadFlagsWait+0xf8>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 8003a4a:	f001 fb45 	bl	80050d8 <xTaskGetTickCount>
 8003a4e:	4602      	mov	r2, r0
 8003a50:	6a3b      	ldr	r3, [r7, #32]
 8003a52:	1ad3      	subs	r3, r2, r3
 8003a54:	61bb      	str	r3, [r7, #24]

        if (td > tout) {
 8003a56:	69ba      	ldr	r2, [r7, #24]
 8003a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a5a:	429a      	cmp	r2, r3
 8003a5c:	d902      	bls.n	8003a64 <osThreadFlagsWait+0xcc>
          tout  = 0;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	627b      	str	r3, [r7, #36]	; 0x24
 8003a62:	e00e      	b.n	8003a82 <osThreadFlagsWait+0xea>
        } else {
          tout -= td;
 8003a64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a66:	69bb      	ldr	r3, [r7, #24]
 8003a68:	1ad3      	subs	r3, r2, r3
 8003a6a:	627b      	str	r3, [r7, #36]	; 0x24
 8003a6c:	e009      	b.n	8003a82 <osThreadFlagsWait+0xea>
        }
      }
      else {
        if (timeout == 0) {
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d103      	bne.n	8003a7c <osThreadFlagsWait+0xe4>
          rflags = (uint32_t)osErrorResource;
 8003a74:	f06f 0302 	mvn.w	r3, #2
 8003a78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a7a:	e002      	b.n	8003a82 <osThreadFlagsWait+0xea>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 8003a7c:	f06f 0301 	mvn.w	r3, #1
 8003a80:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
      }
    }
    while (rval != pdFAIL);
 8003a82:	69fb      	ldr	r3, [r7, #28]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d1af      	bne.n	80039e8 <osThreadFlagsWait+0x50>
 8003a88:	e002      	b.n	8003a90 <osThreadFlagsWait+0xf8>
            break;
 8003a8a:	bf00      	nop
 8003a8c:	e000      	b.n	8003a90 <osThreadFlagsWait+0xf8>
            break;
 8003a8e:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 8003a90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	3730      	adds	r7, #48	; 0x30
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}

08003a9a <osDelay>:
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003a9a:	b580      	push	{r7, lr}
 8003a9c:	b084      	sub	sp, #16
 8003a9e:	af00      	add	r7, sp, #0
 8003aa0:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003aa2:	f3ef 8305 	mrs	r3, IPSR
 8003aa6:	60bb      	str	r3, [r7, #8]
  return(result);
 8003aa8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d003      	beq.n	8003ab6 <osDelay+0x1c>
    stat = osErrorISR;
 8003aae:	f06f 0305 	mvn.w	r3, #5
 8003ab2:	60fb      	str	r3, [r7, #12]
 8003ab4:	e007      	b.n	8003ac6 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d002      	beq.n	8003ac6 <osDelay+0x2c>
      vTaskDelay(ticks);
 8003ac0:	6878      	ldr	r0, [r7, #4]
 8003ac2:	f001 f9c3 	bl	8004e4c <vTaskDelay>
    }
  }

  return (stat);
 8003ac6:	68fb      	ldr	r3, [r7, #12]
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	3710      	adds	r7, #16
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}

08003ad0 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b08a      	sub	sp, #40	; 0x28
 8003ad4:	af02      	add	r7, sp, #8
 8003ad6:	60f8      	str	r0, [r7, #12]
 8003ad8:	60b9      	str	r1, [r7, #8]
 8003ada:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8003adc:	2300      	movs	r3, #0
 8003ade:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003ae0:	f3ef 8305 	mrs	r3, IPSR
 8003ae4:	613b      	str	r3, [r7, #16]
  return(result);
 8003ae6:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d15f      	bne.n	8003bac <osMessageQueueNew+0xdc>
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d05c      	beq.n	8003bac <osMessageQueueNew+0xdc>
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d059      	beq.n	8003bac <osMessageQueueNew+0xdc>
    mem = -1;
 8003af8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003afc:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d029      	beq.n	8003b58 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d012      	beq.n	8003b32 <osMessageQueueNew+0x62>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	68db      	ldr	r3, [r3, #12]
 8003b10:	2b4f      	cmp	r3, #79	; 0x4f
 8003b12:	d90e      	bls.n	8003b32 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d00a      	beq.n	8003b32 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	695a      	ldr	r2, [r3, #20]
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	68b9      	ldr	r1, [r7, #8]
 8003b24:	fb01 f303 	mul.w	r3, r1, r3
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d302      	bcc.n	8003b32 <osMessageQueueNew+0x62>
        mem = 1;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	61bb      	str	r3, [r7, #24]
 8003b30:	e014      	b.n	8003b5c <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d110      	bne.n	8003b5c <osMessageQueueNew+0x8c>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	68db      	ldr	r3, [r3, #12]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d10c      	bne.n	8003b5c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d108      	bne.n	8003b5c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	695b      	ldr	r3, [r3, #20]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d104      	bne.n	8003b5c <osMessageQueueNew+0x8c>
          mem = 0;
 8003b52:	2300      	movs	r3, #0
 8003b54:	61bb      	str	r3, [r7, #24]
 8003b56:	e001      	b.n	8003b5c <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003b5c:	69bb      	ldr	r3, [r7, #24]
 8003b5e:	2b01      	cmp	r3, #1
 8003b60:	d10b      	bne.n	8003b7a <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	691a      	ldr	r2, [r3, #16]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	2100      	movs	r1, #0
 8003b6c:	9100      	str	r1, [sp, #0]
 8003b6e:	68b9      	ldr	r1, [r7, #8]
 8003b70:	68f8      	ldr	r0, [r7, #12]
 8003b72:	f000 fa4f 	bl	8004014 <xQueueGenericCreateStatic>
 8003b76:	61f8      	str	r0, [r7, #28]
 8003b78:	e008      	b.n	8003b8c <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8003b7a:	69bb      	ldr	r3, [r7, #24]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d105      	bne.n	8003b8c <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8003b80:	2200      	movs	r2, #0
 8003b82:	68b9      	ldr	r1, [r7, #8]
 8003b84:	68f8      	ldr	r0, [r7, #12]
 8003b86:	f000 fabd 	bl	8004104 <xQueueGenericCreate>
 8003b8a:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8003b8c:	69fb      	ldr	r3, [r7, #28]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d00c      	beq.n	8003bac <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d003      	beq.n	8003ba0 <osMessageQueueNew+0xd0>
        name = attr->name;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	617b      	str	r3, [r7, #20]
 8003b9e:	e001      	b.n	8003ba4 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8003ba4:	6979      	ldr	r1, [r7, #20]
 8003ba6:	69f8      	ldr	r0, [r7, #28]
 8003ba8:	f000 ff50 	bl	8004a4c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8003bac:	69fb      	ldr	r3, [r7, #28]
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	3720      	adds	r7, #32
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}
	...

08003bb8 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b088      	sub	sp, #32
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	60f8      	str	r0, [r7, #12]
 8003bc0:	60b9      	str	r1, [r7, #8]
 8003bc2:	603b      	str	r3, [r7, #0]
 8003bc4:	4613      	mov	r3, r2
 8003bc6:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003bd0:	f3ef 8305 	mrs	r3, IPSR
 8003bd4:	617b      	str	r3, [r7, #20]
  return(result);
 8003bd6:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d028      	beq.n	8003c2e <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003bdc:	69bb      	ldr	r3, [r7, #24]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d005      	beq.n	8003bee <osMessageQueuePut+0x36>
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d002      	beq.n	8003bee <osMessageQueuePut+0x36>
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d003      	beq.n	8003bf6 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8003bee:	f06f 0303 	mvn.w	r3, #3
 8003bf2:	61fb      	str	r3, [r7, #28]
 8003bf4:	e038      	b.n	8003c68 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8003bfa:	f107 0210 	add.w	r2, r7, #16
 8003bfe:	2300      	movs	r3, #0
 8003c00:	68b9      	ldr	r1, [r7, #8]
 8003c02:	69b8      	ldr	r0, [r7, #24]
 8003c04:	f000 fbda 	bl	80043bc <xQueueGenericSendFromISR>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	2b01      	cmp	r3, #1
 8003c0c:	d003      	beq.n	8003c16 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8003c0e:	f06f 0302 	mvn.w	r3, #2
 8003c12:	61fb      	str	r3, [r7, #28]
 8003c14:	e028      	b.n	8003c68 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d025      	beq.n	8003c68 <osMessageQueuePut+0xb0>
 8003c1c:	4b15      	ldr	r3, [pc, #84]	; (8003c74 <osMessageQueuePut+0xbc>)
 8003c1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c22:	601a      	str	r2, [r3, #0]
 8003c24:	f3bf 8f4f 	dsb	sy
 8003c28:	f3bf 8f6f 	isb	sy
 8003c2c:	e01c      	b.n	8003c68 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8003c2e:	69bb      	ldr	r3, [r7, #24]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d002      	beq.n	8003c3a <osMessageQueuePut+0x82>
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d103      	bne.n	8003c42 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8003c3a:	f06f 0303 	mvn.w	r3, #3
 8003c3e:	61fb      	str	r3, [r7, #28]
 8003c40:	e012      	b.n	8003c68 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8003c42:	2300      	movs	r3, #0
 8003c44:	683a      	ldr	r2, [r7, #0]
 8003c46:	68b9      	ldr	r1, [r7, #8]
 8003c48:	69b8      	ldr	r0, [r7, #24]
 8003c4a:	f000 fab9 	bl	80041c0 <xQueueGenericSend>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	d009      	beq.n	8003c68 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d003      	beq.n	8003c62 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8003c5a:	f06f 0301 	mvn.w	r3, #1
 8003c5e:	61fb      	str	r3, [r7, #28]
 8003c60:	e002      	b.n	8003c68 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8003c62:	f06f 0302 	mvn.w	r3, #2
 8003c66:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8003c68:	69fb      	ldr	r3, [r7, #28]
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	3720      	adds	r7, #32
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}
 8003c72:	bf00      	nop
 8003c74:	e000ed04 	.word	0xe000ed04

08003c78 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b088      	sub	sp, #32
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	60f8      	str	r0, [r7, #12]
 8003c80:	60b9      	str	r1, [r7, #8]
 8003c82:	607a      	str	r2, [r7, #4]
 8003c84:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003c8e:	f3ef 8305 	mrs	r3, IPSR
 8003c92:	617b      	str	r3, [r7, #20]
  return(result);
 8003c94:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d028      	beq.n	8003cec <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003c9a:	69bb      	ldr	r3, [r7, #24]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d005      	beq.n	8003cac <osMessageQueueGet+0x34>
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d002      	beq.n	8003cac <osMessageQueueGet+0x34>
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d003      	beq.n	8003cb4 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8003cac:	f06f 0303 	mvn.w	r3, #3
 8003cb0:	61fb      	str	r3, [r7, #28]
 8003cb2:	e037      	b.n	8003d24 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8003cb8:	f107 0310 	add.w	r3, r7, #16
 8003cbc:	461a      	mov	r2, r3
 8003cbe:	68b9      	ldr	r1, [r7, #8]
 8003cc0:	69b8      	ldr	r0, [r7, #24]
 8003cc2:	f000 fcf7 	bl	80046b4 <xQueueReceiveFromISR>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	d003      	beq.n	8003cd4 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8003ccc:	f06f 0302 	mvn.w	r3, #2
 8003cd0:	61fb      	str	r3, [r7, #28]
 8003cd2:	e027      	b.n	8003d24 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d024      	beq.n	8003d24 <osMessageQueueGet+0xac>
 8003cda:	4b15      	ldr	r3, [pc, #84]	; (8003d30 <osMessageQueueGet+0xb8>)
 8003cdc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ce0:	601a      	str	r2, [r3, #0]
 8003ce2:	f3bf 8f4f 	dsb	sy
 8003ce6:	f3bf 8f6f 	isb	sy
 8003cea:	e01b      	b.n	8003d24 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8003cec:	69bb      	ldr	r3, [r7, #24]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d002      	beq.n	8003cf8 <osMessageQueueGet+0x80>
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d103      	bne.n	8003d00 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8003cf8:	f06f 0303 	mvn.w	r3, #3
 8003cfc:	61fb      	str	r3, [r7, #28]
 8003cfe:	e011      	b.n	8003d24 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8003d00:	683a      	ldr	r2, [r7, #0]
 8003d02:	68b9      	ldr	r1, [r7, #8]
 8003d04:	69b8      	ldr	r0, [r7, #24]
 8003d06:	f000 fbf5 	bl	80044f4 <xQueueReceive>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	d009      	beq.n	8003d24 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d003      	beq.n	8003d1e <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8003d16:	f06f 0301 	mvn.w	r3, #1
 8003d1a:	61fb      	str	r3, [r7, #28]
 8003d1c:	e002      	b.n	8003d24 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8003d1e:	f06f 0302 	mvn.w	r3, #2
 8003d22:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8003d24:	69fb      	ldr	r3, [r7, #28]
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	3720      	adds	r7, #32
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}
 8003d2e:	bf00      	nop
 8003d30:	e000ed04 	.word	0xe000ed04

08003d34 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b086      	sub	sp, #24
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d102      	bne.n	8003d4c <osMessageQueueGetCount+0x18>
    count = 0U;
 8003d46:	2300      	movs	r3, #0
 8003d48:	617b      	str	r3, [r7, #20]
 8003d4a:	e00e      	b.n	8003d6a <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003d4c:	f3ef 8305 	mrs	r3, IPSR
 8003d50:	60fb      	str	r3, [r7, #12]
  return(result);
 8003d52:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d004      	beq.n	8003d62 <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 8003d58:	6938      	ldr	r0, [r7, #16]
 8003d5a:	f000 fd49 	bl	80047f0 <uxQueueMessagesWaitingFromISR>
 8003d5e:	6178      	str	r0, [r7, #20]
 8003d60:	e003      	b.n	8003d6a <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 8003d62:	6938      	ldr	r0, [r7, #16]
 8003d64:	f000 fd26 	bl	80047b4 <uxQueueMessagesWaiting>
 8003d68:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 8003d6a:	697b      	ldr	r3, [r7, #20]
}
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	3718      	adds	r7, #24
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bd80      	pop	{r7, pc}

08003d74 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003d74:	b480      	push	{r7}
 8003d76:	b085      	sub	sp, #20
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	60f8      	str	r0, [r7, #12]
 8003d7c:	60b9      	str	r1, [r7, #8]
 8003d7e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	4a07      	ldr	r2, [pc, #28]	; (8003da0 <vApplicationGetIdleTaskMemory+0x2c>)
 8003d84:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	4a06      	ldr	r2, [pc, #24]	; (8003da4 <vApplicationGetIdleTaskMemory+0x30>)
 8003d8a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2280      	movs	r2, #128	; 0x80
 8003d90:	601a      	str	r2, [r3, #0]
}
 8003d92:	bf00      	nop
 8003d94:	3714      	adds	r7, #20
 8003d96:	46bd      	mov	sp, r7
 8003d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9c:	4770      	bx	lr
 8003d9e:	bf00      	nop
 8003da0:	200002a4 	.word	0x200002a4
 8003da4:	20000300 	.word	0x20000300

08003da8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003da8:	b480      	push	{r7}
 8003daa:	b085      	sub	sp, #20
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	60f8      	str	r0, [r7, #12]
 8003db0:	60b9      	str	r1, [r7, #8]
 8003db2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	4a07      	ldr	r2, [pc, #28]	; (8003dd4 <vApplicationGetTimerTaskMemory+0x2c>)
 8003db8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	4a06      	ldr	r2, [pc, #24]	; (8003dd8 <vApplicationGetTimerTaskMemory+0x30>)
 8003dbe:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003dc6:	601a      	str	r2, [r3, #0]
}
 8003dc8:	bf00      	nop
 8003dca:	3714      	adds	r7, #20
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd2:	4770      	bx	lr
 8003dd4:	20000500 	.word	0x20000500
 8003dd8:	2000055c 	.word	0x2000055c

08003ddc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b083      	sub	sp, #12
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	f103 0208 	add.w	r2, r3, #8
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003df4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	f103 0208 	add.w	r2, r3, #8
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	f103 0208 	add.w	r2, r3, #8
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003e10:	bf00      	nop
 8003e12:	370c      	adds	r7, #12
 8003e14:	46bd      	mov	sp, r7
 8003e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1a:	4770      	bx	lr

08003e1c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b083      	sub	sp, #12
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2200      	movs	r2, #0
 8003e28:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003e2a:	bf00      	nop
 8003e2c:	370c      	adds	r7, #12
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e34:	4770      	bx	lr

08003e36 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003e36:	b480      	push	{r7}
 8003e38:	b085      	sub	sp, #20
 8003e3a:	af00      	add	r7, sp, #0
 8003e3c:	6078      	str	r0, [r7, #4]
 8003e3e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	68fa      	ldr	r2, [r7, #12]
 8003e4a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	689a      	ldr	r2, [r3, #8]
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	683a      	ldr	r2, [r7, #0]
 8003e5a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	683a      	ldr	r2, [r7, #0]
 8003e60:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	687a      	ldr	r2, [r7, #4]
 8003e66:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	1c5a      	adds	r2, r3, #1
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	601a      	str	r2, [r3, #0]
}
 8003e72:	bf00      	nop
 8003e74:	3714      	adds	r7, #20
 8003e76:	46bd      	mov	sp, r7
 8003e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7c:	4770      	bx	lr

08003e7e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003e7e:	b480      	push	{r7}
 8003e80:	b085      	sub	sp, #20
 8003e82:	af00      	add	r7, sp, #0
 8003e84:	6078      	str	r0, [r7, #4]
 8003e86:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e94:	d103      	bne.n	8003e9e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	691b      	ldr	r3, [r3, #16]
 8003e9a:	60fb      	str	r3, [r7, #12]
 8003e9c:	e00c      	b.n	8003eb8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	3308      	adds	r3, #8
 8003ea2:	60fb      	str	r3, [r7, #12]
 8003ea4:	e002      	b.n	8003eac <vListInsert+0x2e>
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	60fb      	str	r3, [r7, #12]
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	68ba      	ldr	r2, [r7, #8]
 8003eb4:	429a      	cmp	r2, r3
 8003eb6:	d2f6      	bcs.n	8003ea6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	685a      	ldr	r2, [r3, #4]
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	683a      	ldr	r2, [r7, #0]
 8003ec6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	68fa      	ldr	r2, [r7, #12]
 8003ecc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	683a      	ldr	r2, [r7, #0]
 8003ed2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	687a      	ldr	r2, [r7, #4]
 8003ed8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	1c5a      	adds	r2, r3, #1
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	601a      	str	r2, [r3, #0]
}
 8003ee4:	bf00      	nop
 8003ee6:	3714      	adds	r7, #20
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eee:	4770      	bx	lr

08003ef0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b085      	sub	sp, #20
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	691b      	ldr	r3, [r3, #16]
 8003efc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	687a      	ldr	r2, [r7, #4]
 8003f04:	6892      	ldr	r2, [r2, #8]
 8003f06:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	687a      	ldr	r2, [r7, #4]
 8003f0e:	6852      	ldr	r2, [r2, #4]
 8003f10:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	687a      	ldr	r2, [r7, #4]
 8003f18:	429a      	cmp	r2, r3
 8003f1a:	d103      	bne.n	8003f24 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	689a      	ldr	r2, [r3, #8]
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2200      	movs	r2, #0
 8003f28:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	1e5a      	subs	r2, r3, #1
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	3714      	adds	r7, #20
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f42:	4770      	bx	lr

08003f44 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b084      	sub	sp, #16
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
 8003f4c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d10a      	bne.n	8003f6e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003f58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f5c:	f383 8811 	msr	BASEPRI, r3
 8003f60:	f3bf 8f6f 	isb	sy
 8003f64:	f3bf 8f4f 	dsb	sy
 8003f68:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003f6a:	bf00      	nop
 8003f6c:	e7fe      	b.n	8003f6c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003f6e:	f002 fb31 	bl	80065d4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681a      	ldr	r2, [r3, #0]
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f7a:	68f9      	ldr	r1, [r7, #12]
 8003f7c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003f7e:	fb01 f303 	mul.w	r3, r1, r3
 8003f82:	441a      	add	r2, r3
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681a      	ldr	r2, [r3, #0]
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681a      	ldr	r2, [r3, #0]
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f9e:	3b01      	subs	r3, #1
 8003fa0:	68f9      	ldr	r1, [r7, #12]
 8003fa2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003fa4:	fb01 f303 	mul.w	r3, r1, r3
 8003fa8:	441a      	add	r2, r3
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	22ff      	movs	r2, #255	; 0xff
 8003fb2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	22ff      	movs	r2, #255	; 0xff
 8003fba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d114      	bne.n	8003fee <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	691b      	ldr	r3, [r3, #16]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d01a      	beq.n	8004002 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	3310      	adds	r3, #16
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	f001 f9f9 	bl	80053c8 <xTaskRemoveFromEventList>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d012      	beq.n	8004002 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003fdc:	4b0c      	ldr	r3, [pc, #48]	; (8004010 <xQueueGenericReset+0xcc>)
 8003fde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fe2:	601a      	str	r2, [r3, #0]
 8003fe4:	f3bf 8f4f 	dsb	sy
 8003fe8:	f3bf 8f6f 	isb	sy
 8003fec:	e009      	b.n	8004002 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	3310      	adds	r3, #16
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f7ff fef2 	bl	8003ddc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	3324      	adds	r3, #36	; 0x24
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	f7ff feed 	bl	8003ddc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004002:	f002 fb17 	bl	8006634 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004006:	2301      	movs	r3, #1
}
 8004008:	4618      	mov	r0, r3
 800400a:	3710      	adds	r7, #16
 800400c:	46bd      	mov	sp, r7
 800400e:	bd80      	pop	{r7, pc}
 8004010:	e000ed04 	.word	0xe000ed04

08004014 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004014:	b580      	push	{r7, lr}
 8004016:	b08e      	sub	sp, #56	; 0x38
 8004018:	af02      	add	r7, sp, #8
 800401a:	60f8      	str	r0, [r7, #12]
 800401c:	60b9      	str	r1, [r7, #8]
 800401e:	607a      	str	r2, [r7, #4]
 8004020:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d10a      	bne.n	800403e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800402c:	f383 8811 	msr	BASEPRI, r3
 8004030:	f3bf 8f6f 	isb	sy
 8004034:	f3bf 8f4f 	dsb	sy
 8004038:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800403a:	bf00      	nop
 800403c:	e7fe      	b.n	800403c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d10a      	bne.n	800405a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004044:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004048:	f383 8811 	msr	BASEPRI, r3
 800404c:	f3bf 8f6f 	isb	sy
 8004050:	f3bf 8f4f 	dsb	sy
 8004054:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004056:	bf00      	nop
 8004058:	e7fe      	b.n	8004058 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d002      	beq.n	8004066 <xQueueGenericCreateStatic+0x52>
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d001      	beq.n	800406a <xQueueGenericCreateStatic+0x56>
 8004066:	2301      	movs	r3, #1
 8004068:	e000      	b.n	800406c <xQueueGenericCreateStatic+0x58>
 800406a:	2300      	movs	r3, #0
 800406c:	2b00      	cmp	r3, #0
 800406e:	d10a      	bne.n	8004086 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004070:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004074:	f383 8811 	msr	BASEPRI, r3
 8004078:	f3bf 8f6f 	isb	sy
 800407c:	f3bf 8f4f 	dsb	sy
 8004080:	623b      	str	r3, [r7, #32]
}
 8004082:	bf00      	nop
 8004084:	e7fe      	b.n	8004084 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d102      	bne.n	8004092 <xQueueGenericCreateStatic+0x7e>
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d101      	bne.n	8004096 <xQueueGenericCreateStatic+0x82>
 8004092:	2301      	movs	r3, #1
 8004094:	e000      	b.n	8004098 <xQueueGenericCreateStatic+0x84>
 8004096:	2300      	movs	r3, #0
 8004098:	2b00      	cmp	r3, #0
 800409a:	d10a      	bne.n	80040b2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800409c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040a0:	f383 8811 	msr	BASEPRI, r3
 80040a4:	f3bf 8f6f 	isb	sy
 80040a8:	f3bf 8f4f 	dsb	sy
 80040ac:	61fb      	str	r3, [r7, #28]
}
 80040ae:	bf00      	nop
 80040b0:	e7fe      	b.n	80040b0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80040b2:	2350      	movs	r3, #80	; 0x50
 80040b4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	2b50      	cmp	r3, #80	; 0x50
 80040ba:	d00a      	beq.n	80040d2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80040bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040c0:	f383 8811 	msr	BASEPRI, r3
 80040c4:	f3bf 8f6f 	isb	sy
 80040c8:	f3bf 8f4f 	dsb	sy
 80040cc:	61bb      	str	r3, [r7, #24]
}
 80040ce:	bf00      	nop
 80040d0:	e7fe      	b.n	80040d0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80040d2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80040d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d00d      	beq.n	80040fa <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80040de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040e0:	2201      	movs	r2, #1
 80040e2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80040e6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80040ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040ec:	9300      	str	r3, [sp, #0]
 80040ee:	4613      	mov	r3, r2
 80040f0:	687a      	ldr	r2, [r7, #4]
 80040f2:	68b9      	ldr	r1, [r7, #8]
 80040f4:	68f8      	ldr	r0, [r7, #12]
 80040f6:	f000 f83f 	bl	8004178 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80040fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80040fc:	4618      	mov	r0, r3
 80040fe:	3730      	adds	r7, #48	; 0x30
 8004100:	46bd      	mov	sp, r7
 8004102:	bd80      	pop	{r7, pc}

08004104 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004104:	b580      	push	{r7, lr}
 8004106:	b08a      	sub	sp, #40	; 0x28
 8004108:	af02      	add	r7, sp, #8
 800410a:	60f8      	str	r0, [r7, #12]
 800410c:	60b9      	str	r1, [r7, #8]
 800410e:	4613      	mov	r3, r2
 8004110:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d10a      	bne.n	800412e <xQueueGenericCreate+0x2a>
	__asm volatile
 8004118:	f04f 0350 	mov.w	r3, #80	; 0x50
 800411c:	f383 8811 	msr	BASEPRI, r3
 8004120:	f3bf 8f6f 	isb	sy
 8004124:	f3bf 8f4f 	dsb	sy
 8004128:	613b      	str	r3, [r7, #16]
}
 800412a:	bf00      	nop
 800412c:	e7fe      	b.n	800412c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	68ba      	ldr	r2, [r7, #8]
 8004132:	fb02 f303 	mul.w	r3, r2, r3
 8004136:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004138:	69fb      	ldr	r3, [r7, #28]
 800413a:	3350      	adds	r3, #80	; 0x50
 800413c:	4618      	mov	r0, r3
 800413e:	f002 fb6b 	bl	8006818 <pvPortMalloc>
 8004142:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004144:	69bb      	ldr	r3, [r7, #24]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d011      	beq.n	800416e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800414a:	69bb      	ldr	r3, [r7, #24]
 800414c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	3350      	adds	r3, #80	; 0x50
 8004152:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004154:	69bb      	ldr	r3, [r7, #24]
 8004156:	2200      	movs	r2, #0
 8004158:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800415c:	79fa      	ldrb	r2, [r7, #7]
 800415e:	69bb      	ldr	r3, [r7, #24]
 8004160:	9300      	str	r3, [sp, #0]
 8004162:	4613      	mov	r3, r2
 8004164:	697a      	ldr	r2, [r7, #20]
 8004166:	68b9      	ldr	r1, [r7, #8]
 8004168:	68f8      	ldr	r0, [r7, #12]
 800416a:	f000 f805 	bl	8004178 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800416e:	69bb      	ldr	r3, [r7, #24]
	}
 8004170:	4618      	mov	r0, r3
 8004172:	3720      	adds	r7, #32
 8004174:	46bd      	mov	sp, r7
 8004176:	bd80      	pop	{r7, pc}

08004178 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b084      	sub	sp, #16
 800417c:	af00      	add	r7, sp, #0
 800417e:	60f8      	str	r0, [r7, #12]
 8004180:	60b9      	str	r1, [r7, #8]
 8004182:	607a      	str	r2, [r7, #4]
 8004184:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d103      	bne.n	8004194 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800418c:	69bb      	ldr	r3, [r7, #24]
 800418e:	69ba      	ldr	r2, [r7, #24]
 8004190:	601a      	str	r2, [r3, #0]
 8004192:	e002      	b.n	800419a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004194:	69bb      	ldr	r3, [r7, #24]
 8004196:	687a      	ldr	r2, [r7, #4]
 8004198:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800419a:	69bb      	ldr	r3, [r7, #24]
 800419c:	68fa      	ldr	r2, [r7, #12]
 800419e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80041a0:	69bb      	ldr	r3, [r7, #24]
 80041a2:	68ba      	ldr	r2, [r7, #8]
 80041a4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80041a6:	2101      	movs	r1, #1
 80041a8:	69b8      	ldr	r0, [r7, #24]
 80041aa:	f7ff fecb 	bl	8003f44 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80041ae:	69bb      	ldr	r3, [r7, #24]
 80041b0:	78fa      	ldrb	r2, [r7, #3]
 80041b2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80041b6:	bf00      	nop
 80041b8:	3710      	adds	r7, #16
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}
	...

080041c0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b08e      	sub	sp, #56	; 0x38
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	60f8      	str	r0, [r7, #12]
 80041c8:	60b9      	str	r1, [r7, #8]
 80041ca:	607a      	str	r2, [r7, #4]
 80041cc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80041ce:	2300      	movs	r3, #0
 80041d0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80041d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d10a      	bne.n	80041f2 <xQueueGenericSend+0x32>
	__asm volatile
 80041dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041e0:	f383 8811 	msr	BASEPRI, r3
 80041e4:	f3bf 8f6f 	isb	sy
 80041e8:	f3bf 8f4f 	dsb	sy
 80041ec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80041ee:	bf00      	nop
 80041f0:	e7fe      	b.n	80041f0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d103      	bne.n	8004200 <xQueueGenericSend+0x40>
 80041f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d101      	bne.n	8004204 <xQueueGenericSend+0x44>
 8004200:	2301      	movs	r3, #1
 8004202:	e000      	b.n	8004206 <xQueueGenericSend+0x46>
 8004204:	2300      	movs	r3, #0
 8004206:	2b00      	cmp	r3, #0
 8004208:	d10a      	bne.n	8004220 <xQueueGenericSend+0x60>
	__asm volatile
 800420a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800420e:	f383 8811 	msr	BASEPRI, r3
 8004212:	f3bf 8f6f 	isb	sy
 8004216:	f3bf 8f4f 	dsb	sy
 800421a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800421c:	bf00      	nop
 800421e:	e7fe      	b.n	800421e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	2b02      	cmp	r3, #2
 8004224:	d103      	bne.n	800422e <xQueueGenericSend+0x6e>
 8004226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004228:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800422a:	2b01      	cmp	r3, #1
 800422c:	d101      	bne.n	8004232 <xQueueGenericSend+0x72>
 800422e:	2301      	movs	r3, #1
 8004230:	e000      	b.n	8004234 <xQueueGenericSend+0x74>
 8004232:	2300      	movs	r3, #0
 8004234:	2b00      	cmp	r3, #0
 8004236:	d10a      	bne.n	800424e <xQueueGenericSend+0x8e>
	__asm volatile
 8004238:	f04f 0350 	mov.w	r3, #80	; 0x50
 800423c:	f383 8811 	msr	BASEPRI, r3
 8004240:	f3bf 8f6f 	isb	sy
 8004244:	f3bf 8f4f 	dsb	sy
 8004248:	623b      	str	r3, [r7, #32]
}
 800424a:	bf00      	nop
 800424c:	e7fe      	b.n	800424c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800424e:	f001 fa79 	bl	8005744 <xTaskGetSchedulerState>
 8004252:	4603      	mov	r3, r0
 8004254:	2b00      	cmp	r3, #0
 8004256:	d102      	bne.n	800425e <xQueueGenericSend+0x9e>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d101      	bne.n	8004262 <xQueueGenericSend+0xa2>
 800425e:	2301      	movs	r3, #1
 8004260:	e000      	b.n	8004264 <xQueueGenericSend+0xa4>
 8004262:	2300      	movs	r3, #0
 8004264:	2b00      	cmp	r3, #0
 8004266:	d10a      	bne.n	800427e <xQueueGenericSend+0xbe>
	__asm volatile
 8004268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800426c:	f383 8811 	msr	BASEPRI, r3
 8004270:	f3bf 8f6f 	isb	sy
 8004274:	f3bf 8f4f 	dsb	sy
 8004278:	61fb      	str	r3, [r7, #28]
}
 800427a:	bf00      	nop
 800427c:	e7fe      	b.n	800427c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800427e:	f002 f9a9 	bl	80065d4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004284:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004288:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800428a:	429a      	cmp	r2, r3
 800428c:	d302      	bcc.n	8004294 <xQueueGenericSend+0xd4>
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	2b02      	cmp	r3, #2
 8004292:	d129      	bne.n	80042e8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004294:	683a      	ldr	r2, [r7, #0]
 8004296:	68b9      	ldr	r1, [r7, #8]
 8004298:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800429a:	f000 fac7 	bl	800482c <prvCopyDataToQueue>
 800429e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80042a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d010      	beq.n	80042ca <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80042a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042aa:	3324      	adds	r3, #36	; 0x24
 80042ac:	4618      	mov	r0, r3
 80042ae:	f001 f88b 	bl	80053c8 <xTaskRemoveFromEventList>
 80042b2:	4603      	mov	r3, r0
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d013      	beq.n	80042e0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80042b8:	4b3f      	ldr	r3, [pc, #252]	; (80043b8 <xQueueGenericSend+0x1f8>)
 80042ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042be:	601a      	str	r2, [r3, #0]
 80042c0:	f3bf 8f4f 	dsb	sy
 80042c4:	f3bf 8f6f 	isb	sy
 80042c8:	e00a      	b.n	80042e0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80042ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d007      	beq.n	80042e0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80042d0:	4b39      	ldr	r3, [pc, #228]	; (80043b8 <xQueueGenericSend+0x1f8>)
 80042d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042d6:	601a      	str	r2, [r3, #0]
 80042d8:	f3bf 8f4f 	dsb	sy
 80042dc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80042e0:	f002 f9a8 	bl	8006634 <vPortExitCritical>
				return pdPASS;
 80042e4:	2301      	movs	r3, #1
 80042e6:	e063      	b.n	80043b0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d103      	bne.n	80042f6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80042ee:	f002 f9a1 	bl	8006634 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80042f2:	2300      	movs	r3, #0
 80042f4:	e05c      	b.n	80043b0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80042f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d106      	bne.n	800430a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80042fc:	f107 0314 	add.w	r3, r7, #20
 8004300:	4618      	mov	r0, r3
 8004302:	f001 f8c5 	bl	8005490 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004306:	2301      	movs	r3, #1
 8004308:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800430a:	f002 f993 	bl	8006634 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800430e:	f000 fe37 	bl	8004f80 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004312:	f002 f95f 	bl	80065d4 <vPortEnterCritical>
 8004316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004318:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800431c:	b25b      	sxtb	r3, r3
 800431e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004322:	d103      	bne.n	800432c <xQueueGenericSend+0x16c>
 8004324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004326:	2200      	movs	r2, #0
 8004328:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800432c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800432e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004332:	b25b      	sxtb	r3, r3
 8004334:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004338:	d103      	bne.n	8004342 <xQueueGenericSend+0x182>
 800433a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800433c:	2200      	movs	r2, #0
 800433e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004342:	f002 f977 	bl	8006634 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004346:	1d3a      	adds	r2, r7, #4
 8004348:	f107 0314 	add.w	r3, r7, #20
 800434c:	4611      	mov	r1, r2
 800434e:	4618      	mov	r0, r3
 8004350:	f001 f8b4 	bl	80054bc <xTaskCheckForTimeOut>
 8004354:	4603      	mov	r3, r0
 8004356:	2b00      	cmp	r3, #0
 8004358:	d124      	bne.n	80043a4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800435a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800435c:	f000 fb5e 	bl	8004a1c <prvIsQueueFull>
 8004360:	4603      	mov	r3, r0
 8004362:	2b00      	cmp	r3, #0
 8004364:	d018      	beq.n	8004398 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004368:	3310      	adds	r3, #16
 800436a:	687a      	ldr	r2, [r7, #4]
 800436c:	4611      	mov	r1, r2
 800436e:	4618      	mov	r0, r3
 8004370:	f000 ffda 	bl	8005328 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004374:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004376:	f000 fae9 	bl	800494c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800437a:	f000 fe0f 	bl	8004f9c <xTaskResumeAll>
 800437e:	4603      	mov	r3, r0
 8004380:	2b00      	cmp	r3, #0
 8004382:	f47f af7c 	bne.w	800427e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004386:	4b0c      	ldr	r3, [pc, #48]	; (80043b8 <xQueueGenericSend+0x1f8>)
 8004388:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800438c:	601a      	str	r2, [r3, #0]
 800438e:	f3bf 8f4f 	dsb	sy
 8004392:	f3bf 8f6f 	isb	sy
 8004396:	e772      	b.n	800427e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004398:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800439a:	f000 fad7 	bl	800494c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800439e:	f000 fdfd 	bl	8004f9c <xTaskResumeAll>
 80043a2:	e76c      	b.n	800427e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80043a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80043a6:	f000 fad1 	bl	800494c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80043aa:	f000 fdf7 	bl	8004f9c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80043ae:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80043b0:	4618      	mov	r0, r3
 80043b2:	3738      	adds	r7, #56	; 0x38
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bd80      	pop	{r7, pc}
 80043b8:	e000ed04 	.word	0xe000ed04

080043bc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b090      	sub	sp, #64	; 0x40
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	60f8      	str	r0, [r7, #12]
 80043c4:	60b9      	str	r1, [r7, #8]
 80043c6:	607a      	str	r2, [r7, #4]
 80043c8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80043ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d10a      	bne.n	80043ea <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80043d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043d8:	f383 8811 	msr	BASEPRI, r3
 80043dc:	f3bf 8f6f 	isb	sy
 80043e0:	f3bf 8f4f 	dsb	sy
 80043e4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80043e6:	bf00      	nop
 80043e8:	e7fe      	b.n	80043e8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d103      	bne.n	80043f8 <xQueueGenericSendFromISR+0x3c>
 80043f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d101      	bne.n	80043fc <xQueueGenericSendFromISR+0x40>
 80043f8:	2301      	movs	r3, #1
 80043fa:	e000      	b.n	80043fe <xQueueGenericSendFromISR+0x42>
 80043fc:	2300      	movs	r3, #0
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d10a      	bne.n	8004418 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004406:	f383 8811 	msr	BASEPRI, r3
 800440a:	f3bf 8f6f 	isb	sy
 800440e:	f3bf 8f4f 	dsb	sy
 8004412:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004414:	bf00      	nop
 8004416:	e7fe      	b.n	8004416 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	2b02      	cmp	r3, #2
 800441c:	d103      	bne.n	8004426 <xQueueGenericSendFromISR+0x6a>
 800441e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004420:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004422:	2b01      	cmp	r3, #1
 8004424:	d101      	bne.n	800442a <xQueueGenericSendFromISR+0x6e>
 8004426:	2301      	movs	r3, #1
 8004428:	e000      	b.n	800442c <xQueueGenericSendFromISR+0x70>
 800442a:	2300      	movs	r3, #0
 800442c:	2b00      	cmp	r3, #0
 800442e:	d10a      	bne.n	8004446 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004434:	f383 8811 	msr	BASEPRI, r3
 8004438:	f3bf 8f6f 	isb	sy
 800443c:	f3bf 8f4f 	dsb	sy
 8004440:	623b      	str	r3, [r7, #32]
}
 8004442:	bf00      	nop
 8004444:	e7fe      	b.n	8004444 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004446:	f002 f9a7 	bl	8006798 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800444a:	f3ef 8211 	mrs	r2, BASEPRI
 800444e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004452:	f383 8811 	msr	BASEPRI, r3
 8004456:	f3bf 8f6f 	isb	sy
 800445a:	f3bf 8f4f 	dsb	sy
 800445e:	61fa      	str	r2, [r7, #28]
 8004460:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004462:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004464:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004468:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800446a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800446c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800446e:	429a      	cmp	r2, r3
 8004470:	d302      	bcc.n	8004478 <xQueueGenericSendFromISR+0xbc>
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	2b02      	cmp	r3, #2
 8004476:	d12f      	bne.n	80044d8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800447a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800447e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004486:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004488:	683a      	ldr	r2, [r7, #0]
 800448a:	68b9      	ldr	r1, [r7, #8]
 800448c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800448e:	f000 f9cd 	bl	800482c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004492:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004496:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800449a:	d112      	bne.n	80044c2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800449c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800449e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d016      	beq.n	80044d2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80044a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044a6:	3324      	adds	r3, #36	; 0x24
 80044a8:	4618      	mov	r0, r3
 80044aa:	f000 ff8d 	bl	80053c8 <xTaskRemoveFromEventList>
 80044ae:	4603      	mov	r3, r0
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d00e      	beq.n	80044d2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d00b      	beq.n	80044d2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2201      	movs	r2, #1
 80044be:	601a      	str	r2, [r3, #0]
 80044c0:	e007      	b.n	80044d2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80044c2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80044c6:	3301      	adds	r3, #1
 80044c8:	b2db      	uxtb	r3, r3
 80044ca:	b25a      	sxtb	r2, r3
 80044cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80044d2:	2301      	movs	r3, #1
 80044d4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80044d6:	e001      	b.n	80044dc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80044d8:	2300      	movs	r3, #0
 80044da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80044dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044de:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80044e6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80044e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80044ea:	4618      	mov	r0, r3
 80044ec:	3740      	adds	r7, #64	; 0x40
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}
	...

080044f4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b08c      	sub	sp, #48	; 0x30
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	60f8      	str	r0, [r7, #12]
 80044fc:	60b9      	str	r1, [r7, #8]
 80044fe:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004500:	2300      	movs	r3, #0
 8004502:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800450a:	2b00      	cmp	r3, #0
 800450c:	d10a      	bne.n	8004524 <xQueueReceive+0x30>
	__asm volatile
 800450e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004512:	f383 8811 	msr	BASEPRI, r3
 8004516:	f3bf 8f6f 	isb	sy
 800451a:	f3bf 8f4f 	dsb	sy
 800451e:	623b      	str	r3, [r7, #32]
}
 8004520:	bf00      	nop
 8004522:	e7fe      	b.n	8004522 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d103      	bne.n	8004532 <xQueueReceive+0x3e>
 800452a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800452c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800452e:	2b00      	cmp	r3, #0
 8004530:	d101      	bne.n	8004536 <xQueueReceive+0x42>
 8004532:	2301      	movs	r3, #1
 8004534:	e000      	b.n	8004538 <xQueueReceive+0x44>
 8004536:	2300      	movs	r3, #0
 8004538:	2b00      	cmp	r3, #0
 800453a:	d10a      	bne.n	8004552 <xQueueReceive+0x5e>
	__asm volatile
 800453c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004540:	f383 8811 	msr	BASEPRI, r3
 8004544:	f3bf 8f6f 	isb	sy
 8004548:	f3bf 8f4f 	dsb	sy
 800454c:	61fb      	str	r3, [r7, #28]
}
 800454e:	bf00      	nop
 8004550:	e7fe      	b.n	8004550 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004552:	f001 f8f7 	bl	8005744 <xTaskGetSchedulerState>
 8004556:	4603      	mov	r3, r0
 8004558:	2b00      	cmp	r3, #0
 800455a:	d102      	bne.n	8004562 <xQueueReceive+0x6e>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d101      	bne.n	8004566 <xQueueReceive+0x72>
 8004562:	2301      	movs	r3, #1
 8004564:	e000      	b.n	8004568 <xQueueReceive+0x74>
 8004566:	2300      	movs	r3, #0
 8004568:	2b00      	cmp	r3, #0
 800456a:	d10a      	bne.n	8004582 <xQueueReceive+0x8e>
	__asm volatile
 800456c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004570:	f383 8811 	msr	BASEPRI, r3
 8004574:	f3bf 8f6f 	isb	sy
 8004578:	f3bf 8f4f 	dsb	sy
 800457c:	61bb      	str	r3, [r7, #24]
}
 800457e:	bf00      	nop
 8004580:	e7fe      	b.n	8004580 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004582:	f002 f827 	bl	80065d4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800458a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800458c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800458e:	2b00      	cmp	r3, #0
 8004590:	d01f      	beq.n	80045d2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004592:	68b9      	ldr	r1, [r7, #8]
 8004594:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004596:	f000 f9b3 	bl	8004900 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800459a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800459c:	1e5a      	subs	r2, r3, #1
 800459e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045a0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80045a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045a4:	691b      	ldr	r3, [r3, #16]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d00f      	beq.n	80045ca <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80045aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045ac:	3310      	adds	r3, #16
 80045ae:	4618      	mov	r0, r3
 80045b0:	f000 ff0a 	bl	80053c8 <xTaskRemoveFromEventList>
 80045b4:	4603      	mov	r3, r0
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d007      	beq.n	80045ca <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80045ba:	4b3d      	ldr	r3, [pc, #244]	; (80046b0 <xQueueReceive+0x1bc>)
 80045bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045c0:	601a      	str	r2, [r3, #0]
 80045c2:	f3bf 8f4f 	dsb	sy
 80045c6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80045ca:	f002 f833 	bl	8006634 <vPortExitCritical>
				return pdPASS;
 80045ce:	2301      	movs	r3, #1
 80045d0:	e069      	b.n	80046a6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d103      	bne.n	80045e0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80045d8:	f002 f82c 	bl	8006634 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80045dc:	2300      	movs	r3, #0
 80045de:	e062      	b.n	80046a6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80045e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d106      	bne.n	80045f4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80045e6:	f107 0310 	add.w	r3, r7, #16
 80045ea:	4618      	mov	r0, r3
 80045ec:	f000 ff50 	bl	8005490 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80045f0:	2301      	movs	r3, #1
 80045f2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80045f4:	f002 f81e 	bl	8006634 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80045f8:	f000 fcc2 	bl	8004f80 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80045fc:	f001 ffea 	bl	80065d4 <vPortEnterCritical>
 8004600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004602:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004606:	b25b      	sxtb	r3, r3
 8004608:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800460c:	d103      	bne.n	8004616 <xQueueReceive+0x122>
 800460e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004610:	2200      	movs	r2, #0
 8004612:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004618:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800461c:	b25b      	sxtb	r3, r3
 800461e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004622:	d103      	bne.n	800462c <xQueueReceive+0x138>
 8004624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004626:	2200      	movs	r2, #0
 8004628:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800462c:	f002 f802 	bl	8006634 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004630:	1d3a      	adds	r2, r7, #4
 8004632:	f107 0310 	add.w	r3, r7, #16
 8004636:	4611      	mov	r1, r2
 8004638:	4618      	mov	r0, r3
 800463a:	f000 ff3f 	bl	80054bc <xTaskCheckForTimeOut>
 800463e:	4603      	mov	r3, r0
 8004640:	2b00      	cmp	r3, #0
 8004642:	d123      	bne.n	800468c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004644:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004646:	f000 f9d3 	bl	80049f0 <prvIsQueueEmpty>
 800464a:	4603      	mov	r3, r0
 800464c:	2b00      	cmp	r3, #0
 800464e:	d017      	beq.n	8004680 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004652:	3324      	adds	r3, #36	; 0x24
 8004654:	687a      	ldr	r2, [r7, #4]
 8004656:	4611      	mov	r1, r2
 8004658:	4618      	mov	r0, r3
 800465a:	f000 fe65 	bl	8005328 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800465e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004660:	f000 f974 	bl	800494c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004664:	f000 fc9a 	bl	8004f9c <xTaskResumeAll>
 8004668:	4603      	mov	r3, r0
 800466a:	2b00      	cmp	r3, #0
 800466c:	d189      	bne.n	8004582 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800466e:	4b10      	ldr	r3, [pc, #64]	; (80046b0 <xQueueReceive+0x1bc>)
 8004670:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004674:	601a      	str	r2, [r3, #0]
 8004676:	f3bf 8f4f 	dsb	sy
 800467a:	f3bf 8f6f 	isb	sy
 800467e:	e780      	b.n	8004582 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004680:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004682:	f000 f963 	bl	800494c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004686:	f000 fc89 	bl	8004f9c <xTaskResumeAll>
 800468a:	e77a      	b.n	8004582 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800468c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800468e:	f000 f95d 	bl	800494c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004692:	f000 fc83 	bl	8004f9c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004696:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004698:	f000 f9aa 	bl	80049f0 <prvIsQueueEmpty>
 800469c:	4603      	mov	r3, r0
 800469e:	2b00      	cmp	r3, #0
 80046a0:	f43f af6f 	beq.w	8004582 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80046a4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	3730      	adds	r7, #48	; 0x30
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}
 80046ae:	bf00      	nop
 80046b0:	e000ed04 	.word	0xe000ed04

080046b4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b08e      	sub	sp, #56	; 0x38
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	60f8      	str	r0, [r7, #12]
 80046bc:	60b9      	str	r1, [r7, #8]
 80046be:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80046c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d10a      	bne.n	80046e0 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80046ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046ce:	f383 8811 	msr	BASEPRI, r3
 80046d2:	f3bf 8f6f 	isb	sy
 80046d6:	f3bf 8f4f 	dsb	sy
 80046da:	623b      	str	r3, [r7, #32]
}
 80046dc:	bf00      	nop
 80046de:	e7fe      	b.n	80046de <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d103      	bne.n	80046ee <xQueueReceiveFromISR+0x3a>
 80046e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d101      	bne.n	80046f2 <xQueueReceiveFromISR+0x3e>
 80046ee:	2301      	movs	r3, #1
 80046f0:	e000      	b.n	80046f4 <xQueueReceiveFromISR+0x40>
 80046f2:	2300      	movs	r3, #0
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d10a      	bne.n	800470e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80046f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046fc:	f383 8811 	msr	BASEPRI, r3
 8004700:	f3bf 8f6f 	isb	sy
 8004704:	f3bf 8f4f 	dsb	sy
 8004708:	61fb      	str	r3, [r7, #28]
}
 800470a:	bf00      	nop
 800470c:	e7fe      	b.n	800470c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800470e:	f002 f843 	bl	8006798 <vPortValidateInterruptPriority>
	__asm volatile
 8004712:	f3ef 8211 	mrs	r2, BASEPRI
 8004716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800471a:	f383 8811 	msr	BASEPRI, r3
 800471e:	f3bf 8f6f 	isb	sy
 8004722:	f3bf 8f4f 	dsb	sy
 8004726:	61ba      	str	r2, [r7, #24]
 8004728:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800472a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800472c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800472e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004732:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004736:	2b00      	cmp	r3, #0
 8004738:	d02f      	beq.n	800479a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800473a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800473c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004740:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004744:	68b9      	ldr	r1, [r7, #8]
 8004746:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004748:	f000 f8da 	bl	8004900 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800474c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800474e:	1e5a      	subs	r2, r3, #1
 8004750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004752:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8004754:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004758:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800475c:	d112      	bne.n	8004784 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800475e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004760:	691b      	ldr	r3, [r3, #16]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d016      	beq.n	8004794 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004768:	3310      	adds	r3, #16
 800476a:	4618      	mov	r0, r3
 800476c:	f000 fe2c 	bl	80053c8 <xTaskRemoveFromEventList>
 8004770:	4603      	mov	r3, r0
 8004772:	2b00      	cmp	r3, #0
 8004774:	d00e      	beq.n	8004794 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d00b      	beq.n	8004794 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2201      	movs	r2, #1
 8004780:	601a      	str	r2, [r3, #0]
 8004782:	e007      	b.n	8004794 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004784:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004788:	3301      	adds	r3, #1
 800478a:	b2db      	uxtb	r3, r3
 800478c:	b25a      	sxtb	r2, r3
 800478e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004790:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8004794:	2301      	movs	r3, #1
 8004796:	637b      	str	r3, [r7, #52]	; 0x34
 8004798:	e001      	b.n	800479e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800479a:	2300      	movs	r3, #0
 800479c:	637b      	str	r3, [r7, #52]	; 0x34
 800479e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047a0:	613b      	str	r3, [r7, #16]
	__asm volatile
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	f383 8811 	msr	BASEPRI, r3
}
 80047a8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80047aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	3738      	adds	r7, #56	; 0x38
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}

080047b4 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b084      	sub	sp, #16
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d10a      	bne.n	80047d8 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 80047c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047c6:	f383 8811 	msr	BASEPRI, r3
 80047ca:	f3bf 8f6f 	isb	sy
 80047ce:	f3bf 8f4f 	dsb	sy
 80047d2:	60bb      	str	r3, [r7, #8]
}
 80047d4:	bf00      	nop
 80047d6:	e7fe      	b.n	80047d6 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 80047d8:	f001 fefc 	bl	80065d4 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047e0:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 80047e2:	f001 ff27 	bl	8006634 <vPortExitCritical>

	return uxReturn;
 80047e6:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80047e8:	4618      	mov	r0, r3
 80047ea:	3710      	adds	r7, #16
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd80      	pop	{r7, pc}

080047f0 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 80047f0:	b480      	push	{r7}
 80047f2:	b087      	sub	sp, #28
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 80047fc:	697b      	ldr	r3, [r7, #20]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d10a      	bne.n	8004818 <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 8004802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004806:	f383 8811 	msr	BASEPRI, r3
 800480a:	f3bf 8f6f 	isb	sy
 800480e:	f3bf 8f4f 	dsb	sy
 8004812:	60fb      	str	r3, [r7, #12]
}
 8004814:	bf00      	nop
 8004816:	e7fe      	b.n	8004816 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 8004818:	697b      	ldr	r3, [r7, #20]
 800481a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800481c:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800481e:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8004820:	4618      	mov	r0, r3
 8004822:	371c      	adds	r7, #28
 8004824:	46bd      	mov	sp, r7
 8004826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482a:	4770      	bx	lr

0800482c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b086      	sub	sp, #24
 8004830:	af00      	add	r7, sp, #0
 8004832:	60f8      	str	r0, [r7, #12]
 8004834:	60b9      	str	r1, [r7, #8]
 8004836:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004838:	2300      	movs	r3, #0
 800483a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004840:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004846:	2b00      	cmp	r3, #0
 8004848:	d10d      	bne.n	8004866 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d14d      	bne.n	80048ee <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	689b      	ldr	r3, [r3, #8]
 8004856:	4618      	mov	r0, r3
 8004858:	f000 ff92 	bl	8005780 <xTaskPriorityDisinherit>
 800485c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	2200      	movs	r2, #0
 8004862:	609a      	str	r2, [r3, #8]
 8004864:	e043      	b.n	80048ee <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d119      	bne.n	80048a0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	6858      	ldr	r0, [r3, #4]
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004874:	461a      	mov	r2, r3
 8004876:	68b9      	ldr	r1, [r7, #8]
 8004878:	f002 f9fc 	bl	8006c74 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	685a      	ldr	r2, [r3, #4]
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004884:	441a      	add	r2, r3
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	685a      	ldr	r2, [r3, #4]
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	429a      	cmp	r2, r3
 8004894:	d32b      	bcc.n	80048ee <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681a      	ldr	r2, [r3, #0]
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	605a      	str	r2, [r3, #4]
 800489e:	e026      	b.n	80048ee <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	68d8      	ldr	r0, [r3, #12]
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a8:	461a      	mov	r2, r3
 80048aa:	68b9      	ldr	r1, [r7, #8]
 80048ac:	f002 f9e2 	bl	8006c74 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	68da      	ldr	r2, [r3, #12]
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b8:	425b      	negs	r3, r3
 80048ba:	441a      	add	r2, r3
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	68da      	ldr	r2, [r3, #12]
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	429a      	cmp	r2, r3
 80048ca:	d207      	bcs.n	80048dc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	689a      	ldr	r2, [r3, #8]
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048d4:	425b      	negs	r3, r3
 80048d6:	441a      	add	r2, r3
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2b02      	cmp	r3, #2
 80048e0:	d105      	bne.n	80048ee <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d002      	beq.n	80048ee <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	3b01      	subs	r3, #1
 80048ec:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	1c5a      	adds	r2, r3, #1
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80048f6:	697b      	ldr	r3, [r7, #20]
}
 80048f8:	4618      	mov	r0, r3
 80048fa:	3718      	adds	r7, #24
 80048fc:	46bd      	mov	sp, r7
 80048fe:	bd80      	pop	{r7, pc}

08004900 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b082      	sub	sp, #8
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
 8004908:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800490e:	2b00      	cmp	r3, #0
 8004910:	d018      	beq.n	8004944 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	68da      	ldr	r2, [r3, #12]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800491a:	441a      	add	r2, r3
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	68da      	ldr	r2, [r3, #12]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	429a      	cmp	r2, r3
 800492a:	d303      	bcc.n	8004934 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681a      	ldr	r2, [r3, #0]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	68d9      	ldr	r1, [r3, #12]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800493c:	461a      	mov	r2, r3
 800493e:	6838      	ldr	r0, [r7, #0]
 8004940:	f002 f998 	bl	8006c74 <memcpy>
	}
}
 8004944:	bf00      	nop
 8004946:	3708      	adds	r7, #8
 8004948:	46bd      	mov	sp, r7
 800494a:	bd80      	pop	{r7, pc}

0800494c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b084      	sub	sp, #16
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004954:	f001 fe3e 	bl	80065d4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800495e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004960:	e011      	b.n	8004986 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004966:	2b00      	cmp	r3, #0
 8004968:	d012      	beq.n	8004990 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	3324      	adds	r3, #36	; 0x24
 800496e:	4618      	mov	r0, r3
 8004970:	f000 fd2a 	bl	80053c8 <xTaskRemoveFromEventList>
 8004974:	4603      	mov	r3, r0
 8004976:	2b00      	cmp	r3, #0
 8004978:	d001      	beq.n	800497e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800497a:	f000 fe01 	bl	8005580 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800497e:	7bfb      	ldrb	r3, [r7, #15]
 8004980:	3b01      	subs	r3, #1
 8004982:	b2db      	uxtb	r3, r3
 8004984:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004986:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800498a:	2b00      	cmp	r3, #0
 800498c:	dce9      	bgt.n	8004962 <prvUnlockQueue+0x16>
 800498e:	e000      	b.n	8004992 <prvUnlockQueue+0x46>
					break;
 8004990:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	22ff      	movs	r2, #255	; 0xff
 8004996:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800499a:	f001 fe4b 	bl	8006634 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800499e:	f001 fe19 	bl	80065d4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80049a8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80049aa:	e011      	b.n	80049d0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	691b      	ldr	r3, [r3, #16]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d012      	beq.n	80049da <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	3310      	adds	r3, #16
 80049b8:	4618      	mov	r0, r3
 80049ba:	f000 fd05 	bl	80053c8 <xTaskRemoveFromEventList>
 80049be:	4603      	mov	r3, r0
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d001      	beq.n	80049c8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80049c4:	f000 fddc 	bl	8005580 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80049c8:	7bbb      	ldrb	r3, [r7, #14]
 80049ca:	3b01      	subs	r3, #1
 80049cc:	b2db      	uxtb	r3, r3
 80049ce:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80049d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	dce9      	bgt.n	80049ac <prvUnlockQueue+0x60>
 80049d8:	e000      	b.n	80049dc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80049da:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	22ff      	movs	r2, #255	; 0xff
 80049e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80049e4:	f001 fe26 	bl	8006634 <vPortExitCritical>
}
 80049e8:	bf00      	nop
 80049ea:	3710      	adds	r7, #16
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bd80      	pop	{r7, pc}

080049f0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b084      	sub	sp, #16
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80049f8:	f001 fdec 	bl	80065d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d102      	bne.n	8004a0a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004a04:	2301      	movs	r3, #1
 8004a06:	60fb      	str	r3, [r7, #12]
 8004a08:	e001      	b.n	8004a0e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004a0e:	f001 fe11 	bl	8006634 <vPortExitCritical>

	return xReturn;
 8004a12:	68fb      	ldr	r3, [r7, #12]
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	3710      	adds	r7, #16
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bd80      	pop	{r7, pc}

08004a1c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b084      	sub	sp, #16
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004a24:	f001 fdd6 	bl	80065d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a30:	429a      	cmp	r2, r3
 8004a32:	d102      	bne.n	8004a3a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004a34:	2301      	movs	r3, #1
 8004a36:	60fb      	str	r3, [r7, #12]
 8004a38:	e001      	b.n	8004a3e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004a3e:	f001 fdf9 	bl	8006634 <vPortExitCritical>

	return xReturn;
 8004a42:	68fb      	ldr	r3, [r7, #12]
}
 8004a44:	4618      	mov	r0, r3
 8004a46:	3710      	adds	r7, #16
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	bd80      	pop	{r7, pc}

08004a4c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b085      	sub	sp, #20
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
 8004a54:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004a56:	2300      	movs	r3, #0
 8004a58:	60fb      	str	r3, [r7, #12]
 8004a5a:	e014      	b.n	8004a86 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004a5c:	4a0f      	ldr	r2, [pc, #60]	; (8004a9c <vQueueAddToRegistry+0x50>)
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d10b      	bne.n	8004a80 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004a68:	490c      	ldr	r1, [pc, #48]	; (8004a9c <vQueueAddToRegistry+0x50>)
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	683a      	ldr	r2, [r7, #0]
 8004a6e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004a72:	4a0a      	ldr	r2, [pc, #40]	; (8004a9c <vQueueAddToRegistry+0x50>)
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	00db      	lsls	r3, r3, #3
 8004a78:	4413      	add	r3, r2
 8004a7a:	687a      	ldr	r2, [r7, #4]
 8004a7c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004a7e:	e006      	b.n	8004a8e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	3301      	adds	r3, #1
 8004a84:	60fb      	str	r3, [r7, #12]
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	2b07      	cmp	r3, #7
 8004a8a:	d9e7      	bls.n	8004a5c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004a8c:	bf00      	nop
 8004a8e:	bf00      	nop
 8004a90:	3714      	adds	r7, #20
 8004a92:	46bd      	mov	sp, r7
 8004a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a98:	4770      	bx	lr
 8004a9a:	bf00      	nop
 8004a9c:	2000095c 	.word	0x2000095c

08004aa0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b086      	sub	sp, #24
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	60f8      	str	r0, [r7, #12]
 8004aa8:	60b9      	str	r1, [r7, #8]
 8004aaa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004ab0:	f001 fd90 	bl	80065d4 <vPortEnterCritical>
 8004ab4:	697b      	ldr	r3, [r7, #20]
 8004ab6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004aba:	b25b      	sxtb	r3, r3
 8004abc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ac0:	d103      	bne.n	8004aca <vQueueWaitForMessageRestricted+0x2a>
 8004ac2:	697b      	ldr	r3, [r7, #20]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004ad0:	b25b      	sxtb	r3, r3
 8004ad2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ad6:	d103      	bne.n	8004ae0 <vQueueWaitForMessageRestricted+0x40>
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	2200      	movs	r2, #0
 8004adc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004ae0:	f001 fda8 	bl	8006634 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d106      	bne.n	8004afa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	3324      	adds	r3, #36	; 0x24
 8004af0:	687a      	ldr	r2, [r7, #4]
 8004af2:	68b9      	ldr	r1, [r7, #8]
 8004af4:	4618      	mov	r0, r3
 8004af6:	f000 fc3b 	bl	8005370 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004afa:	6978      	ldr	r0, [r7, #20]
 8004afc:	f7ff ff26 	bl	800494c <prvUnlockQueue>
	}
 8004b00:	bf00      	nop
 8004b02:	3718      	adds	r7, #24
 8004b04:	46bd      	mov	sp, r7
 8004b06:	bd80      	pop	{r7, pc}

08004b08 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b08e      	sub	sp, #56	; 0x38
 8004b0c:	af04      	add	r7, sp, #16
 8004b0e:	60f8      	str	r0, [r7, #12]
 8004b10:	60b9      	str	r1, [r7, #8]
 8004b12:	607a      	str	r2, [r7, #4]
 8004b14:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004b16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d10a      	bne.n	8004b32 <xTaskCreateStatic+0x2a>
	__asm volatile
 8004b1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b20:	f383 8811 	msr	BASEPRI, r3
 8004b24:	f3bf 8f6f 	isb	sy
 8004b28:	f3bf 8f4f 	dsb	sy
 8004b2c:	623b      	str	r3, [r7, #32]
}
 8004b2e:	bf00      	nop
 8004b30:	e7fe      	b.n	8004b30 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004b32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d10a      	bne.n	8004b4e <xTaskCreateStatic+0x46>
	__asm volatile
 8004b38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b3c:	f383 8811 	msr	BASEPRI, r3
 8004b40:	f3bf 8f6f 	isb	sy
 8004b44:	f3bf 8f4f 	dsb	sy
 8004b48:	61fb      	str	r3, [r7, #28]
}
 8004b4a:	bf00      	nop
 8004b4c:	e7fe      	b.n	8004b4c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004b4e:	235c      	movs	r3, #92	; 0x5c
 8004b50:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004b52:	693b      	ldr	r3, [r7, #16]
 8004b54:	2b5c      	cmp	r3, #92	; 0x5c
 8004b56:	d00a      	beq.n	8004b6e <xTaskCreateStatic+0x66>
	__asm volatile
 8004b58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b5c:	f383 8811 	msr	BASEPRI, r3
 8004b60:	f3bf 8f6f 	isb	sy
 8004b64:	f3bf 8f4f 	dsb	sy
 8004b68:	61bb      	str	r3, [r7, #24]
}
 8004b6a:	bf00      	nop
 8004b6c:	e7fe      	b.n	8004b6c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004b6e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004b70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d01e      	beq.n	8004bb4 <xTaskCreateStatic+0xac>
 8004b76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d01b      	beq.n	8004bb4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004b7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b7e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b82:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004b84:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b88:	2202      	movs	r2, #2
 8004b8a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004b8e:	2300      	movs	r3, #0
 8004b90:	9303      	str	r3, [sp, #12]
 8004b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b94:	9302      	str	r3, [sp, #8]
 8004b96:	f107 0314 	add.w	r3, r7, #20
 8004b9a:	9301      	str	r3, [sp, #4]
 8004b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b9e:	9300      	str	r3, [sp, #0]
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	687a      	ldr	r2, [r7, #4]
 8004ba4:	68b9      	ldr	r1, [r7, #8]
 8004ba6:	68f8      	ldr	r0, [r7, #12]
 8004ba8:	f000 f850 	bl	8004c4c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004bac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004bae:	f000 f8dd 	bl	8004d6c <prvAddNewTaskToReadyList>
 8004bb2:	e001      	b.n	8004bb8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004bb8:	697b      	ldr	r3, [r7, #20]
	}
 8004bba:	4618      	mov	r0, r3
 8004bbc:	3728      	adds	r7, #40	; 0x28
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}

08004bc2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004bc2:	b580      	push	{r7, lr}
 8004bc4:	b08c      	sub	sp, #48	; 0x30
 8004bc6:	af04      	add	r7, sp, #16
 8004bc8:	60f8      	str	r0, [r7, #12]
 8004bca:	60b9      	str	r1, [r7, #8]
 8004bcc:	603b      	str	r3, [r7, #0]
 8004bce:	4613      	mov	r3, r2
 8004bd0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004bd2:	88fb      	ldrh	r3, [r7, #6]
 8004bd4:	009b      	lsls	r3, r3, #2
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	f001 fe1e 	bl	8006818 <pvPortMalloc>
 8004bdc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004bde:	697b      	ldr	r3, [r7, #20]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d00e      	beq.n	8004c02 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004be4:	205c      	movs	r0, #92	; 0x5c
 8004be6:	f001 fe17 	bl	8006818 <pvPortMalloc>
 8004bea:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004bec:	69fb      	ldr	r3, [r7, #28]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d003      	beq.n	8004bfa <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004bf2:	69fb      	ldr	r3, [r7, #28]
 8004bf4:	697a      	ldr	r2, [r7, #20]
 8004bf6:	631a      	str	r2, [r3, #48]	; 0x30
 8004bf8:	e005      	b.n	8004c06 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004bfa:	6978      	ldr	r0, [r7, #20]
 8004bfc:	f001 fed8 	bl	80069b0 <vPortFree>
 8004c00:	e001      	b.n	8004c06 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004c02:	2300      	movs	r3, #0
 8004c04:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004c06:	69fb      	ldr	r3, [r7, #28]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d017      	beq.n	8004c3c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004c0c:	69fb      	ldr	r3, [r7, #28]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004c14:	88fa      	ldrh	r2, [r7, #6]
 8004c16:	2300      	movs	r3, #0
 8004c18:	9303      	str	r3, [sp, #12]
 8004c1a:	69fb      	ldr	r3, [r7, #28]
 8004c1c:	9302      	str	r3, [sp, #8]
 8004c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c20:	9301      	str	r3, [sp, #4]
 8004c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c24:	9300      	str	r3, [sp, #0]
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	68b9      	ldr	r1, [r7, #8]
 8004c2a:	68f8      	ldr	r0, [r7, #12]
 8004c2c:	f000 f80e 	bl	8004c4c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004c30:	69f8      	ldr	r0, [r7, #28]
 8004c32:	f000 f89b 	bl	8004d6c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004c36:	2301      	movs	r3, #1
 8004c38:	61bb      	str	r3, [r7, #24]
 8004c3a:	e002      	b.n	8004c42 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004c3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004c40:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004c42:	69bb      	ldr	r3, [r7, #24]
	}
 8004c44:	4618      	mov	r0, r3
 8004c46:	3720      	adds	r7, #32
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bd80      	pop	{r7, pc}

08004c4c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b088      	sub	sp, #32
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	60f8      	str	r0, [r7, #12]
 8004c54:	60b9      	str	r1, [r7, #8]
 8004c56:	607a      	str	r2, [r7, #4]
 8004c58:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c5c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	009b      	lsls	r3, r3, #2
 8004c62:	461a      	mov	r2, r3
 8004c64:	21a5      	movs	r1, #165	; 0xa5
 8004c66:	f002 f813 	bl	8006c90 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004c74:	3b01      	subs	r3, #1
 8004c76:	009b      	lsls	r3, r3, #2
 8004c78:	4413      	add	r3, r2
 8004c7a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004c7c:	69bb      	ldr	r3, [r7, #24]
 8004c7e:	f023 0307 	bic.w	r3, r3, #7
 8004c82:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004c84:	69bb      	ldr	r3, [r7, #24]
 8004c86:	f003 0307 	and.w	r3, r3, #7
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d00a      	beq.n	8004ca4 <prvInitialiseNewTask+0x58>
	__asm volatile
 8004c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c92:	f383 8811 	msr	BASEPRI, r3
 8004c96:	f3bf 8f6f 	isb	sy
 8004c9a:	f3bf 8f4f 	dsb	sy
 8004c9e:	617b      	str	r3, [r7, #20]
}
 8004ca0:	bf00      	nop
 8004ca2:	e7fe      	b.n	8004ca2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d01f      	beq.n	8004cea <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004caa:	2300      	movs	r3, #0
 8004cac:	61fb      	str	r3, [r7, #28]
 8004cae:	e012      	b.n	8004cd6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004cb0:	68ba      	ldr	r2, [r7, #8]
 8004cb2:	69fb      	ldr	r3, [r7, #28]
 8004cb4:	4413      	add	r3, r2
 8004cb6:	7819      	ldrb	r1, [r3, #0]
 8004cb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004cba:	69fb      	ldr	r3, [r7, #28]
 8004cbc:	4413      	add	r3, r2
 8004cbe:	3334      	adds	r3, #52	; 0x34
 8004cc0:	460a      	mov	r2, r1
 8004cc2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004cc4:	68ba      	ldr	r2, [r7, #8]
 8004cc6:	69fb      	ldr	r3, [r7, #28]
 8004cc8:	4413      	add	r3, r2
 8004cca:	781b      	ldrb	r3, [r3, #0]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d006      	beq.n	8004cde <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004cd0:	69fb      	ldr	r3, [r7, #28]
 8004cd2:	3301      	adds	r3, #1
 8004cd4:	61fb      	str	r3, [r7, #28]
 8004cd6:	69fb      	ldr	r3, [r7, #28]
 8004cd8:	2b0f      	cmp	r3, #15
 8004cda:	d9e9      	bls.n	8004cb0 <prvInitialiseNewTask+0x64>
 8004cdc:	e000      	b.n	8004ce0 <prvInitialiseNewTask+0x94>
			{
				break;
 8004cde:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004ce8:	e003      	b.n	8004cf2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cec:	2200      	movs	r2, #0
 8004cee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cf4:	2b37      	cmp	r3, #55	; 0x37
 8004cf6:	d901      	bls.n	8004cfc <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004cf8:	2337      	movs	r3, #55	; 0x37
 8004cfa:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cfe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d00:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d06:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d10:	3304      	adds	r3, #4
 8004d12:	4618      	mov	r0, r3
 8004d14:	f7ff f882 	bl	8003e1c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d1a:	3318      	adds	r3, #24
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	f7ff f87d 	bl	8003e1c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d26:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d2a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d30:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d36:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d40:	2200      	movs	r2, #0
 8004d42:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004d46:	683a      	ldr	r2, [r7, #0]
 8004d48:	68f9      	ldr	r1, [r7, #12]
 8004d4a:	69b8      	ldr	r0, [r7, #24]
 8004d4c:	f001 fb16 	bl	800637c <pxPortInitialiseStack>
 8004d50:	4602      	mov	r2, r0
 8004d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d54:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d002      	beq.n	8004d62 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004d5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d60:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004d62:	bf00      	nop
 8004d64:	3720      	adds	r7, #32
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd80      	pop	{r7, pc}
	...

08004d6c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b082      	sub	sp, #8
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004d74:	f001 fc2e 	bl	80065d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004d78:	4b2d      	ldr	r3, [pc, #180]	; (8004e30 <prvAddNewTaskToReadyList+0xc4>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	3301      	adds	r3, #1
 8004d7e:	4a2c      	ldr	r2, [pc, #176]	; (8004e30 <prvAddNewTaskToReadyList+0xc4>)
 8004d80:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004d82:	4b2c      	ldr	r3, [pc, #176]	; (8004e34 <prvAddNewTaskToReadyList+0xc8>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d109      	bne.n	8004d9e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004d8a:	4a2a      	ldr	r2, [pc, #168]	; (8004e34 <prvAddNewTaskToReadyList+0xc8>)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004d90:	4b27      	ldr	r3, [pc, #156]	; (8004e30 <prvAddNewTaskToReadyList+0xc4>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	2b01      	cmp	r3, #1
 8004d96:	d110      	bne.n	8004dba <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004d98:	f000 fc16 	bl	80055c8 <prvInitialiseTaskLists>
 8004d9c:	e00d      	b.n	8004dba <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004d9e:	4b26      	ldr	r3, [pc, #152]	; (8004e38 <prvAddNewTaskToReadyList+0xcc>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d109      	bne.n	8004dba <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004da6:	4b23      	ldr	r3, [pc, #140]	; (8004e34 <prvAddNewTaskToReadyList+0xc8>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004db0:	429a      	cmp	r2, r3
 8004db2:	d802      	bhi.n	8004dba <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004db4:	4a1f      	ldr	r2, [pc, #124]	; (8004e34 <prvAddNewTaskToReadyList+0xc8>)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004dba:	4b20      	ldr	r3, [pc, #128]	; (8004e3c <prvAddNewTaskToReadyList+0xd0>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	3301      	adds	r3, #1
 8004dc0:	4a1e      	ldr	r2, [pc, #120]	; (8004e3c <prvAddNewTaskToReadyList+0xd0>)
 8004dc2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004dc4:	4b1d      	ldr	r3, [pc, #116]	; (8004e3c <prvAddNewTaskToReadyList+0xd0>)
 8004dc6:	681a      	ldr	r2, [r3, #0]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dd0:	4b1b      	ldr	r3, [pc, #108]	; (8004e40 <prvAddNewTaskToReadyList+0xd4>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	429a      	cmp	r2, r3
 8004dd6:	d903      	bls.n	8004de0 <prvAddNewTaskToReadyList+0x74>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ddc:	4a18      	ldr	r2, [pc, #96]	; (8004e40 <prvAddNewTaskToReadyList+0xd4>)
 8004dde:	6013      	str	r3, [r2, #0]
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004de4:	4613      	mov	r3, r2
 8004de6:	009b      	lsls	r3, r3, #2
 8004de8:	4413      	add	r3, r2
 8004dea:	009b      	lsls	r3, r3, #2
 8004dec:	4a15      	ldr	r2, [pc, #84]	; (8004e44 <prvAddNewTaskToReadyList+0xd8>)
 8004dee:	441a      	add	r2, r3
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	3304      	adds	r3, #4
 8004df4:	4619      	mov	r1, r3
 8004df6:	4610      	mov	r0, r2
 8004df8:	f7ff f81d 	bl	8003e36 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004dfc:	f001 fc1a 	bl	8006634 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004e00:	4b0d      	ldr	r3, [pc, #52]	; (8004e38 <prvAddNewTaskToReadyList+0xcc>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d00e      	beq.n	8004e26 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004e08:	4b0a      	ldr	r3, [pc, #40]	; (8004e34 <prvAddNewTaskToReadyList+0xc8>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e12:	429a      	cmp	r2, r3
 8004e14:	d207      	bcs.n	8004e26 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004e16:	4b0c      	ldr	r3, [pc, #48]	; (8004e48 <prvAddNewTaskToReadyList+0xdc>)
 8004e18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e1c:	601a      	str	r2, [r3, #0]
 8004e1e:	f3bf 8f4f 	dsb	sy
 8004e22:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004e26:	bf00      	nop
 8004e28:	3708      	adds	r7, #8
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}
 8004e2e:	bf00      	nop
 8004e30:	20000e70 	.word	0x20000e70
 8004e34:	2000099c 	.word	0x2000099c
 8004e38:	20000e7c 	.word	0x20000e7c
 8004e3c:	20000e8c 	.word	0x20000e8c
 8004e40:	20000e78 	.word	0x20000e78
 8004e44:	200009a0 	.word	0x200009a0
 8004e48:	e000ed04 	.word	0xe000ed04

08004e4c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b084      	sub	sp, #16
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004e54:	2300      	movs	r3, #0
 8004e56:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d017      	beq.n	8004e8e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004e5e:	4b13      	ldr	r3, [pc, #76]	; (8004eac <vTaskDelay+0x60>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d00a      	beq.n	8004e7c <vTaskDelay+0x30>
	__asm volatile
 8004e66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e6a:	f383 8811 	msr	BASEPRI, r3
 8004e6e:	f3bf 8f6f 	isb	sy
 8004e72:	f3bf 8f4f 	dsb	sy
 8004e76:	60bb      	str	r3, [r7, #8]
}
 8004e78:	bf00      	nop
 8004e7a:	e7fe      	b.n	8004e7a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004e7c:	f000 f880 	bl	8004f80 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004e80:	2100      	movs	r1, #0
 8004e82:	6878      	ldr	r0, [r7, #4]
 8004e84:	f000 fed8 	bl	8005c38 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004e88:	f000 f888 	bl	8004f9c <xTaskResumeAll>
 8004e8c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d107      	bne.n	8004ea4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004e94:	4b06      	ldr	r3, [pc, #24]	; (8004eb0 <vTaskDelay+0x64>)
 8004e96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e9a:	601a      	str	r2, [r3, #0]
 8004e9c:	f3bf 8f4f 	dsb	sy
 8004ea0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004ea4:	bf00      	nop
 8004ea6:	3710      	adds	r7, #16
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd80      	pop	{r7, pc}
 8004eac:	20000e98 	.word	0x20000e98
 8004eb0:	e000ed04 	.word	0xe000ed04

08004eb4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b08a      	sub	sp, #40	; 0x28
 8004eb8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004eba:	2300      	movs	r3, #0
 8004ebc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004ec2:	463a      	mov	r2, r7
 8004ec4:	1d39      	adds	r1, r7, #4
 8004ec6:	f107 0308 	add.w	r3, r7, #8
 8004eca:	4618      	mov	r0, r3
 8004ecc:	f7fe ff52 	bl	8003d74 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004ed0:	6839      	ldr	r1, [r7, #0]
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	68ba      	ldr	r2, [r7, #8]
 8004ed6:	9202      	str	r2, [sp, #8]
 8004ed8:	9301      	str	r3, [sp, #4]
 8004eda:	2300      	movs	r3, #0
 8004edc:	9300      	str	r3, [sp, #0]
 8004ede:	2300      	movs	r3, #0
 8004ee0:	460a      	mov	r2, r1
 8004ee2:	4921      	ldr	r1, [pc, #132]	; (8004f68 <vTaskStartScheduler+0xb4>)
 8004ee4:	4821      	ldr	r0, [pc, #132]	; (8004f6c <vTaskStartScheduler+0xb8>)
 8004ee6:	f7ff fe0f 	bl	8004b08 <xTaskCreateStatic>
 8004eea:	4603      	mov	r3, r0
 8004eec:	4a20      	ldr	r2, [pc, #128]	; (8004f70 <vTaskStartScheduler+0xbc>)
 8004eee:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004ef0:	4b1f      	ldr	r3, [pc, #124]	; (8004f70 <vTaskStartScheduler+0xbc>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d002      	beq.n	8004efe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004ef8:	2301      	movs	r3, #1
 8004efa:	617b      	str	r3, [r7, #20]
 8004efc:	e001      	b.n	8004f02 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004efe:	2300      	movs	r3, #0
 8004f00:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	2b01      	cmp	r3, #1
 8004f06:	d102      	bne.n	8004f0e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004f08:	f000 feea 	bl	8005ce0 <xTimerCreateTimerTask>
 8004f0c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004f0e:	697b      	ldr	r3, [r7, #20]
 8004f10:	2b01      	cmp	r3, #1
 8004f12:	d116      	bne.n	8004f42 <vTaskStartScheduler+0x8e>
	__asm volatile
 8004f14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f18:	f383 8811 	msr	BASEPRI, r3
 8004f1c:	f3bf 8f6f 	isb	sy
 8004f20:	f3bf 8f4f 	dsb	sy
 8004f24:	613b      	str	r3, [r7, #16]
}
 8004f26:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004f28:	4b12      	ldr	r3, [pc, #72]	; (8004f74 <vTaskStartScheduler+0xc0>)
 8004f2a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004f2e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004f30:	4b11      	ldr	r3, [pc, #68]	; (8004f78 <vTaskStartScheduler+0xc4>)
 8004f32:	2201      	movs	r2, #1
 8004f34:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004f36:	4b11      	ldr	r3, [pc, #68]	; (8004f7c <vTaskStartScheduler+0xc8>)
 8004f38:	2200      	movs	r2, #0
 8004f3a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004f3c:	f001 faa8 	bl	8006490 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004f40:	e00e      	b.n	8004f60 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004f42:	697b      	ldr	r3, [r7, #20]
 8004f44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f48:	d10a      	bne.n	8004f60 <vTaskStartScheduler+0xac>
	__asm volatile
 8004f4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f4e:	f383 8811 	msr	BASEPRI, r3
 8004f52:	f3bf 8f6f 	isb	sy
 8004f56:	f3bf 8f4f 	dsb	sy
 8004f5a:	60fb      	str	r3, [r7, #12]
}
 8004f5c:	bf00      	nop
 8004f5e:	e7fe      	b.n	8004f5e <vTaskStartScheduler+0xaa>
}
 8004f60:	bf00      	nop
 8004f62:	3718      	adds	r7, #24
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bd80      	pop	{r7, pc}
 8004f68:	08007d3c 	.word	0x08007d3c
 8004f6c:	08005599 	.word	0x08005599
 8004f70:	20000e94 	.word	0x20000e94
 8004f74:	20000e90 	.word	0x20000e90
 8004f78:	20000e7c 	.word	0x20000e7c
 8004f7c:	20000e74 	.word	0x20000e74

08004f80 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004f80:	b480      	push	{r7}
 8004f82:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004f84:	4b04      	ldr	r3, [pc, #16]	; (8004f98 <vTaskSuspendAll+0x18>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	3301      	adds	r3, #1
 8004f8a:	4a03      	ldr	r2, [pc, #12]	; (8004f98 <vTaskSuspendAll+0x18>)
 8004f8c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004f8e:	bf00      	nop
 8004f90:	46bd      	mov	sp, r7
 8004f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f96:	4770      	bx	lr
 8004f98:	20000e98 	.word	0x20000e98

08004f9c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b084      	sub	sp, #16
 8004fa0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004faa:	4b42      	ldr	r3, [pc, #264]	; (80050b4 <xTaskResumeAll+0x118>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d10a      	bne.n	8004fc8 <xTaskResumeAll+0x2c>
	__asm volatile
 8004fb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fb6:	f383 8811 	msr	BASEPRI, r3
 8004fba:	f3bf 8f6f 	isb	sy
 8004fbe:	f3bf 8f4f 	dsb	sy
 8004fc2:	603b      	str	r3, [r7, #0]
}
 8004fc4:	bf00      	nop
 8004fc6:	e7fe      	b.n	8004fc6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004fc8:	f001 fb04 	bl	80065d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004fcc:	4b39      	ldr	r3, [pc, #228]	; (80050b4 <xTaskResumeAll+0x118>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	3b01      	subs	r3, #1
 8004fd2:	4a38      	ldr	r2, [pc, #224]	; (80050b4 <xTaskResumeAll+0x118>)
 8004fd4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004fd6:	4b37      	ldr	r3, [pc, #220]	; (80050b4 <xTaskResumeAll+0x118>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d162      	bne.n	80050a4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004fde:	4b36      	ldr	r3, [pc, #216]	; (80050b8 <xTaskResumeAll+0x11c>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d05e      	beq.n	80050a4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004fe6:	e02f      	b.n	8005048 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004fe8:	4b34      	ldr	r3, [pc, #208]	; (80050bc <xTaskResumeAll+0x120>)
 8004fea:	68db      	ldr	r3, [r3, #12]
 8004fec:	68db      	ldr	r3, [r3, #12]
 8004fee:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	3318      	adds	r3, #24
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	f7fe ff7b 	bl	8003ef0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	3304      	adds	r3, #4
 8004ffe:	4618      	mov	r0, r3
 8005000:	f7fe ff76 	bl	8003ef0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005008:	4b2d      	ldr	r3, [pc, #180]	; (80050c0 <xTaskResumeAll+0x124>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	429a      	cmp	r2, r3
 800500e:	d903      	bls.n	8005018 <xTaskResumeAll+0x7c>
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005014:	4a2a      	ldr	r2, [pc, #168]	; (80050c0 <xTaskResumeAll+0x124>)
 8005016:	6013      	str	r3, [r2, #0]
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800501c:	4613      	mov	r3, r2
 800501e:	009b      	lsls	r3, r3, #2
 8005020:	4413      	add	r3, r2
 8005022:	009b      	lsls	r3, r3, #2
 8005024:	4a27      	ldr	r2, [pc, #156]	; (80050c4 <xTaskResumeAll+0x128>)
 8005026:	441a      	add	r2, r3
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	3304      	adds	r3, #4
 800502c:	4619      	mov	r1, r3
 800502e:	4610      	mov	r0, r2
 8005030:	f7fe ff01 	bl	8003e36 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005038:	4b23      	ldr	r3, [pc, #140]	; (80050c8 <xTaskResumeAll+0x12c>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800503e:	429a      	cmp	r2, r3
 8005040:	d302      	bcc.n	8005048 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005042:	4b22      	ldr	r3, [pc, #136]	; (80050cc <xTaskResumeAll+0x130>)
 8005044:	2201      	movs	r2, #1
 8005046:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005048:	4b1c      	ldr	r3, [pc, #112]	; (80050bc <xTaskResumeAll+0x120>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d1cb      	bne.n	8004fe8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d001      	beq.n	800505a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005056:	f000 fb55 	bl	8005704 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800505a:	4b1d      	ldr	r3, [pc, #116]	; (80050d0 <xTaskResumeAll+0x134>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d010      	beq.n	8005088 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005066:	f000 f847 	bl	80050f8 <xTaskIncrementTick>
 800506a:	4603      	mov	r3, r0
 800506c:	2b00      	cmp	r3, #0
 800506e:	d002      	beq.n	8005076 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005070:	4b16      	ldr	r3, [pc, #88]	; (80050cc <xTaskResumeAll+0x130>)
 8005072:	2201      	movs	r2, #1
 8005074:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	3b01      	subs	r3, #1
 800507a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d1f1      	bne.n	8005066 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8005082:	4b13      	ldr	r3, [pc, #76]	; (80050d0 <xTaskResumeAll+0x134>)
 8005084:	2200      	movs	r2, #0
 8005086:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005088:	4b10      	ldr	r3, [pc, #64]	; (80050cc <xTaskResumeAll+0x130>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d009      	beq.n	80050a4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005090:	2301      	movs	r3, #1
 8005092:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005094:	4b0f      	ldr	r3, [pc, #60]	; (80050d4 <xTaskResumeAll+0x138>)
 8005096:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800509a:	601a      	str	r2, [r3, #0]
 800509c:	f3bf 8f4f 	dsb	sy
 80050a0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80050a4:	f001 fac6 	bl	8006634 <vPortExitCritical>

	return xAlreadyYielded;
 80050a8:	68bb      	ldr	r3, [r7, #8]
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	3710      	adds	r7, #16
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}
 80050b2:	bf00      	nop
 80050b4:	20000e98 	.word	0x20000e98
 80050b8:	20000e70 	.word	0x20000e70
 80050bc:	20000e30 	.word	0x20000e30
 80050c0:	20000e78 	.word	0x20000e78
 80050c4:	200009a0 	.word	0x200009a0
 80050c8:	2000099c 	.word	0x2000099c
 80050cc:	20000e84 	.word	0x20000e84
 80050d0:	20000e80 	.word	0x20000e80
 80050d4:	e000ed04 	.word	0xe000ed04

080050d8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80050d8:	b480      	push	{r7}
 80050da:	b083      	sub	sp, #12
 80050dc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80050de:	4b05      	ldr	r3, [pc, #20]	; (80050f4 <xTaskGetTickCount+0x1c>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80050e4:	687b      	ldr	r3, [r7, #4]
}
 80050e6:	4618      	mov	r0, r3
 80050e8:	370c      	adds	r7, #12
 80050ea:	46bd      	mov	sp, r7
 80050ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f0:	4770      	bx	lr
 80050f2:	bf00      	nop
 80050f4:	20000e74 	.word	0x20000e74

080050f8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b086      	sub	sp, #24
 80050fc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80050fe:	2300      	movs	r3, #0
 8005100:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005102:	4b4f      	ldr	r3, [pc, #316]	; (8005240 <xTaskIncrementTick+0x148>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	2b00      	cmp	r3, #0
 8005108:	f040 808f 	bne.w	800522a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800510c:	4b4d      	ldr	r3, [pc, #308]	; (8005244 <xTaskIncrementTick+0x14c>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	3301      	adds	r3, #1
 8005112:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005114:	4a4b      	ldr	r2, [pc, #300]	; (8005244 <xTaskIncrementTick+0x14c>)
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800511a:	693b      	ldr	r3, [r7, #16]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d120      	bne.n	8005162 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005120:	4b49      	ldr	r3, [pc, #292]	; (8005248 <xTaskIncrementTick+0x150>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d00a      	beq.n	8005140 <xTaskIncrementTick+0x48>
	__asm volatile
 800512a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800512e:	f383 8811 	msr	BASEPRI, r3
 8005132:	f3bf 8f6f 	isb	sy
 8005136:	f3bf 8f4f 	dsb	sy
 800513a:	603b      	str	r3, [r7, #0]
}
 800513c:	bf00      	nop
 800513e:	e7fe      	b.n	800513e <xTaskIncrementTick+0x46>
 8005140:	4b41      	ldr	r3, [pc, #260]	; (8005248 <xTaskIncrementTick+0x150>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	60fb      	str	r3, [r7, #12]
 8005146:	4b41      	ldr	r3, [pc, #260]	; (800524c <xTaskIncrementTick+0x154>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a3f      	ldr	r2, [pc, #252]	; (8005248 <xTaskIncrementTick+0x150>)
 800514c:	6013      	str	r3, [r2, #0]
 800514e:	4a3f      	ldr	r2, [pc, #252]	; (800524c <xTaskIncrementTick+0x154>)
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	6013      	str	r3, [r2, #0]
 8005154:	4b3e      	ldr	r3, [pc, #248]	; (8005250 <xTaskIncrementTick+0x158>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	3301      	adds	r3, #1
 800515a:	4a3d      	ldr	r2, [pc, #244]	; (8005250 <xTaskIncrementTick+0x158>)
 800515c:	6013      	str	r3, [r2, #0]
 800515e:	f000 fad1 	bl	8005704 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005162:	4b3c      	ldr	r3, [pc, #240]	; (8005254 <xTaskIncrementTick+0x15c>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	693a      	ldr	r2, [r7, #16]
 8005168:	429a      	cmp	r2, r3
 800516a:	d349      	bcc.n	8005200 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800516c:	4b36      	ldr	r3, [pc, #216]	; (8005248 <xTaskIncrementTick+0x150>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d104      	bne.n	8005180 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005176:	4b37      	ldr	r3, [pc, #220]	; (8005254 <xTaskIncrementTick+0x15c>)
 8005178:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800517c:	601a      	str	r2, [r3, #0]
					break;
 800517e:	e03f      	b.n	8005200 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005180:	4b31      	ldr	r3, [pc, #196]	; (8005248 <xTaskIncrementTick+0x150>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	68db      	ldr	r3, [r3, #12]
 8005186:	68db      	ldr	r3, [r3, #12]
 8005188:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005190:	693a      	ldr	r2, [r7, #16]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	429a      	cmp	r2, r3
 8005196:	d203      	bcs.n	80051a0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005198:	4a2e      	ldr	r2, [pc, #184]	; (8005254 <xTaskIncrementTick+0x15c>)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800519e:	e02f      	b.n	8005200 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	3304      	adds	r3, #4
 80051a4:	4618      	mov	r0, r3
 80051a6:	f7fe fea3 	bl	8003ef0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d004      	beq.n	80051bc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	3318      	adds	r3, #24
 80051b6:	4618      	mov	r0, r3
 80051b8:	f7fe fe9a 	bl	8003ef0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051c0:	4b25      	ldr	r3, [pc, #148]	; (8005258 <xTaskIncrementTick+0x160>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	429a      	cmp	r2, r3
 80051c6:	d903      	bls.n	80051d0 <xTaskIncrementTick+0xd8>
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051cc:	4a22      	ldr	r2, [pc, #136]	; (8005258 <xTaskIncrementTick+0x160>)
 80051ce:	6013      	str	r3, [r2, #0]
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051d4:	4613      	mov	r3, r2
 80051d6:	009b      	lsls	r3, r3, #2
 80051d8:	4413      	add	r3, r2
 80051da:	009b      	lsls	r3, r3, #2
 80051dc:	4a1f      	ldr	r2, [pc, #124]	; (800525c <xTaskIncrementTick+0x164>)
 80051de:	441a      	add	r2, r3
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	3304      	adds	r3, #4
 80051e4:	4619      	mov	r1, r3
 80051e6:	4610      	mov	r0, r2
 80051e8:	f7fe fe25 	bl	8003e36 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051f0:	4b1b      	ldr	r3, [pc, #108]	; (8005260 <xTaskIncrementTick+0x168>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051f6:	429a      	cmp	r2, r3
 80051f8:	d3b8      	bcc.n	800516c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80051fa:	2301      	movs	r3, #1
 80051fc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80051fe:	e7b5      	b.n	800516c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005200:	4b17      	ldr	r3, [pc, #92]	; (8005260 <xTaskIncrementTick+0x168>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005206:	4915      	ldr	r1, [pc, #84]	; (800525c <xTaskIncrementTick+0x164>)
 8005208:	4613      	mov	r3, r2
 800520a:	009b      	lsls	r3, r3, #2
 800520c:	4413      	add	r3, r2
 800520e:	009b      	lsls	r3, r3, #2
 8005210:	440b      	add	r3, r1
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	2b01      	cmp	r3, #1
 8005216:	d901      	bls.n	800521c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005218:	2301      	movs	r3, #1
 800521a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800521c:	4b11      	ldr	r3, [pc, #68]	; (8005264 <xTaskIncrementTick+0x16c>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d007      	beq.n	8005234 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005224:	2301      	movs	r3, #1
 8005226:	617b      	str	r3, [r7, #20]
 8005228:	e004      	b.n	8005234 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800522a:	4b0f      	ldr	r3, [pc, #60]	; (8005268 <xTaskIncrementTick+0x170>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	3301      	adds	r3, #1
 8005230:	4a0d      	ldr	r2, [pc, #52]	; (8005268 <xTaskIncrementTick+0x170>)
 8005232:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005234:	697b      	ldr	r3, [r7, #20]
}
 8005236:	4618      	mov	r0, r3
 8005238:	3718      	adds	r7, #24
 800523a:	46bd      	mov	sp, r7
 800523c:	bd80      	pop	{r7, pc}
 800523e:	bf00      	nop
 8005240:	20000e98 	.word	0x20000e98
 8005244:	20000e74 	.word	0x20000e74
 8005248:	20000e28 	.word	0x20000e28
 800524c:	20000e2c 	.word	0x20000e2c
 8005250:	20000e88 	.word	0x20000e88
 8005254:	20000e90 	.word	0x20000e90
 8005258:	20000e78 	.word	0x20000e78
 800525c:	200009a0 	.word	0x200009a0
 8005260:	2000099c 	.word	0x2000099c
 8005264:	20000e84 	.word	0x20000e84
 8005268:	20000e80 	.word	0x20000e80

0800526c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800526c:	b480      	push	{r7}
 800526e:	b085      	sub	sp, #20
 8005270:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005272:	4b28      	ldr	r3, [pc, #160]	; (8005314 <vTaskSwitchContext+0xa8>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d003      	beq.n	8005282 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800527a:	4b27      	ldr	r3, [pc, #156]	; (8005318 <vTaskSwitchContext+0xac>)
 800527c:	2201      	movs	r2, #1
 800527e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005280:	e041      	b.n	8005306 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8005282:	4b25      	ldr	r3, [pc, #148]	; (8005318 <vTaskSwitchContext+0xac>)
 8005284:	2200      	movs	r2, #0
 8005286:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005288:	4b24      	ldr	r3, [pc, #144]	; (800531c <vTaskSwitchContext+0xb0>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	60fb      	str	r3, [r7, #12]
 800528e:	e010      	b.n	80052b2 <vTaskSwitchContext+0x46>
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d10a      	bne.n	80052ac <vTaskSwitchContext+0x40>
	__asm volatile
 8005296:	f04f 0350 	mov.w	r3, #80	; 0x50
 800529a:	f383 8811 	msr	BASEPRI, r3
 800529e:	f3bf 8f6f 	isb	sy
 80052a2:	f3bf 8f4f 	dsb	sy
 80052a6:	607b      	str	r3, [r7, #4]
}
 80052a8:	bf00      	nop
 80052aa:	e7fe      	b.n	80052aa <vTaskSwitchContext+0x3e>
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	3b01      	subs	r3, #1
 80052b0:	60fb      	str	r3, [r7, #12]
 80052b2:	491b      	ldr	r1, [pc, #108]	; (8005320 <vTaskSwitchContext+0xb4>)
 80052b4:	68fa      	ldr	r2, [r7, #12]
 80052b6:	4613      	mov	r3, r2
 80052b8:	009b      	lsls	r3, r3, #2
 80052ba:	4413      	add	r3, r2
 80052bc:	009b      	lsls	r3, r3, #2
 80052be:	440b      	add	r3, r1
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d0e4      	beq.n	8005290 <vTaskSwitchContext+0x24>
 80052c6:	68fa      	ldr	r2, [r7, #12]
 80052c8:	4613      	mov	r3, r2
 80052ca:	009b      	lsls	r3, r3, #2
 80052cc:	4413      	add	r3, r2
 80052ce:	009b      	lsls	r3, r3, #2
 80052d0:	4a13      	ldr	r2, [pc, #76]	; (8005320 <vTaskSwitchContext+0xb4>)
 80052d2:	4413      	add	r3, r2
 80052d4:	60bb      	str	r3, [r7, #8]
 80052d6:	68bb      	ldr	r3, [r7, #8]
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	685a      	ldr	r2, [r3, #4]
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	605a      	str	r2, [r3, #4]
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	685a      	ldr	r2, [r3, #4]
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	3308      	adds	r3, #8
 80052e8:	429a      	cmp	r2, r3
 80052ea:	d104      	bne.n	80052f6 <vTaskSwitchContext+0x8a>
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	685a      	ldr	r2, [r3, #4]
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	605a      	str	r2, [r3, #4]
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	68db      	ldr	r3, [r3, #12]
 80052fc:	4a09      	ldr	r2, [pc, #36]	; (8005324 <vTaskSwitchContext+0xb8>)
 80052fe:	6013      	str	r3, [r2, #0]
 8005300:	4a06      	ldr	r2, [pc, #24]	; (800531c <vTaskSwitchContext+0xb0>)
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	6013      	str	r3, [r2, #0]
}
 8005306:	bf00      	nop
 8005308:	3714      	adds	r7, #20
 800530a:	46bd      	mov	sp, r7
 800530c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005310:	4770      	bx	lr
 8005312:	bf00      	nop
 8005314:	20000e98 	.word	0x20000e98
 8005318:	20000e84 	.word	0x20000e84
 800531c:	20000e78 	.word	0x20000e78
 8005320:	200009a0 	.word	0x200009a0
 8005324:	2000099c 	.word	0x2000099c

08005328 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b084      	sub	sp, #16
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
 8005330:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d10a      	bne.n	800534e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800533c:	f383 8811 	msr	BASEPRI, r3
 8005340:	f3bf 8f6f 	isb	sy
 8005344:	f3bf 8f4f 	dsb	sy
 8005348:	60fb      	str	r3, [r7, #12]
}
 800534a:	bf00      	nop
 800534c:	e7fe      	b.n	800534c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800534e:	4b07      	ldr	r3, [pc, #28]	; (800536c <vTaskPlaceOnEventList+0x44>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	3318      	adds	r3, #24
 8005354:	4619      	mov	r1, r3
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	f7fe fd91 	bl	8003e7e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800535c:	2101      	movs	r1, #1
 800535e:	6838      	ldr	r0, [r7, #0]
 8005360:	f000 fc6a 	bl	8005c38 <prvAddCurrentTaskToDelayedList>
}
 8005364:	bf00      	nop
 8005366:	3710      	adds	r7, #16
 8005368:	46bd      	mov	sp, r7
 800536a:	bd80      	pop	{r7, pc}
 800536c:	2000099c 	.word	0x2000099c

08005370 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005370:	b580      	push	{r7, lr}
 8005372:	b086      	sub	sp, #24
 8005374:	af00      	add	r7, sp, #0
 8005376:	60f8      	str	r0, [r7, #12]
 8005378:	60b9      	str	r1, [r7, #8]
 800537a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d10a      	bne.n	8005398 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8005382:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005386:	f383 8811 	msr	BASEPRI, r3
 800538a:	f3bf 8f6f 	isb	sy
 800538e:	f3bf 8f4f 	dsb	sy
 8005392:	617b      	str	r3, [r7, #20]
}
 8005394:	bf00      	nop
 8005396:	e7fe      	b.n	8005396 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005398:	4b0a      	ldr	r3, [pc, #40]	; (80053c4 <vTaskPlaceOnEventListRestricted+0x54>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	3318      	adds	r3, #24
 800539e:	4619      	mov	r1, r3
 80053a0:	68f8      	ldr	r0, [r7, #12]
 80053a2:	f7fe fd48 	bl	8003e36 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d002      	beq.n	80053b2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80053ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80053b0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80053b2:	6879      	ldr	r1, [r7, #4]
 80053b4:	68b8      	ldr	r0, [r7, #8]
 80053b6:	f000 fc3f 	bl	8005c38 <prvAddCurrentTaskToDelayedList>
	}
 80053ba:	bf00      	nop
 80053bc:	3718      	adds	r7, #24
 80053be:	46bd      	mov	sp, r7
 80053c0:	bd80      	pop	{r7, pc}
 80053c2:	bf00      	nop
 80053c4:	2000099c 	.word	0x2000099c

080053c8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b086      	sub	sp, #24
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	68db      	ldr	r3, [r3, #12]
 80053d4:	68db      	ldr	r3, [r3, #12]
 80053d6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80053d8:	693b      	ldr	r3, [r7, #16]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d10a      	bne.n	80053f4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80053de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053e2:	f383 8811 	msr	BASEPRI, r3
 80053e6:	f3bf 8f6f 	isb	sy
 80053ea:	f3bf 8f4f 	dsb	sy
 80053ee:	60fb      	str	r3, [r7, #12]
}
 80053f0:	bf00      	nop
 80053f2:	e7fe      	b.n	80053f2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80053f4:	693b      	ldr	r3, [r7, #16]
 80053f6:	3318      	adds	r3, #24
 80053f8:	4618      	mov	r0, r3
 80053fa:	f7fe fd79 	bl	8003ef0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80053fe:	4b1e      	ldr	r3, [pc, #120]	; (8005478 <xTaskRemoveFromEventList+0xb0>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d11d      	bne.n	8005442 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005406:	693b      	ldr	r3, [r7, #16]
 8005408:	3304      	adds	r3, #4
 800540a:	4618      	mov	r0, r3
 800540c:	f7fe fd70 	bl	8003ef0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005410:	693b      	ldr	r3, [r7, #16]
 8005412:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005414:	4b19      	ldr	r3, [pc, #100]	; (800547c <xTaskRemoveFromEventList+0xb4>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	429a      	cmp	r2, r3
 800541a:	d903      	bls.n	8005424 <xTaskRemoveFromEventList+0x5c>
 800541c:	693b      	ldr	r3, [r7, #16]
 800541e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005420:	4a16      	ldr	r2, [pc, #88]	; (800547c <xTaskRemoveFromEventList+0xb4>)
 8005422:	6013      	str	r3, [r2, #0]
 8005424:	693b      	ldr	r3, [r7, #16]
 8005426:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005428:	4613      	mov	r3, r2
 800542a:	009b      	lsls	r3, r3, #2
 800542c:	4413      	add	r3, r2
 800542e:	009b      	lsls	r3, r3, #2
 8005430:	4a13      	ldr	r2, [pc, #76]	; (8005480 <xTaskRemoveFromEventList+0xb8>)
 8005432:	441a      	add	r2, r3
 8005434:	693b      	ldr	r3, [r7, #16]
 8005436:	3304      	adds	r3, #4
 8005438:	4619      	mov	r1, r3
 800543a:	4610      	mov	r0, r2
 800543c:	f7fe fcfb 	bl	8003e36 <vListInsertEnd>
 8005440:	e005      	b.n	800544e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	3318      	adds	r3, #24
 8005446:	4619      	mov	r1, r3
 8005448:	480e      	ldr	r0, [pc, #56]	; (8005484 <xTaskRemoveFromEventList+0xbc>)
 800544a:	f7fe fcf4 	bl	8003e36 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800544e:	693b      	ldr	r3, [r7, #16]
 8005450:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005452:	4b0d      	ldr	r3, [pc, #52]	; (8005488 <xTaskRemoveFromEventList+0xc0>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005458:	429a      	cmp	r2, r3
 800545a:	d905      	bls.n	8005468 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800545c:	2301      	movs	r3, #1
 800545e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005460:	4b0a      	ldr	r3, [pc, #40]	; (800548c <xTaskRemoveFromEventList+0xc4>)
 8005462:	2201      	movs	r2, #1
 8005464:	601a      	str	r2, [r3, #0]
 8005466:	e001      	b.n	800546c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005468:	2300      	movs	r3, #0
 800546a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800546c:	697b      	ldr	r3, [r7, #20]
}
 800546e:	4618      	mov	r0, r3
 8005470:	3718      	adds	r7, #24
 8005472:	46bd      	mov	sp, r7
 8005474:	bd80      	pop	{r7, pc}
 8005476:	bf00      	nop
 8005478:	20000e98 	.word	0x20000e98
 800547c:	20000e78 	.word	0x20000e78
 8005480:	200009a0 	.word	0x200009a0
 8005484:	20000e30 	.word	0x20000e30
 8005488:	2000099c 	.word	0x2000099c
 800548c:	20000e84 	.word	0x20000e84

08005490 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005490:	b480      	push	{r7}
 8005492:	b083      	sub	sp, #12
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005498:	4b06      	ldr	r3, [pc, #24]	; (80054b4 <vTaskInternalSetTimeOutState+0x24>)
 800549a:	681a      	ldr	r2, [r3, #0]
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80054a0:	4b05      	ldr	r3, [pc, #20]	; (80054b8 <vTaskInternalSetTimeOutState+0x28>)
 80054a2:	681a      	ldr	r2, [r3, #0]
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	605a      	str	r2, [r3, #4]
}
 80054a8:	bf00      	nop
 80054aa:	370c      	adds	r7, #12
 80054ac:	46bd      	mov	sp, r7
 80054ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b2:	4770      	bx	lr
 80054b4:	20000e88 	.word	0x20000e88
 80054b8:	20000e74 	.word	0x20000e74

080054bc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b088      	sub	sp, #32
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
 80054c4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d10a      	bne.n	80054e2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80054cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054d0:	f383 8811 	msr	BASEPRI, r3
 80054d4:	f3bf 8f6f 	isb	sy
 80054d8:	f3bf 8f4f 	dsb	sy
 80054dc:	613b      	str	r3, [r7, #16]
}
 80054de:	bf00      	nop
 80054e0:	e7fe      	b.n	80054e0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d10a      	bne.n	80054fe <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80054e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054ec:	f383 8811 	msr	BASEPRI, r3
 80054f0:	f3bf 8f6f 	isb	sy
 80054f4:	f3bf 8f4f 	dsb	sy
 80054f8:	60fb      	str	r3, [r7, #12]
}
 80054fa:	bf00      	nop
 80054fc:	e7fe      	b.n	80054fc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80054fe:	f001 f869 	bl	80065d4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005502:	4b1d      	ldr	r3, [pc, #116]	; (8005578 <xTaskCheckForTimeOut+0xbc>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	685b      	ldr	r3, [r3, #4]
 800550c:	69ba      	ldr	r2, [r7, #24]
 800550e:	1ad3      	subs	r3, r2, r3
 8005510:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800551a:	d102      	bne.n	8005522 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800551c:	2300      	movs	r3, #0
 800551e:	61fb      	str	r3, [r7, #28]
 8005520:	e023      	b.n	800556a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681a      	ldr	r2, [r3, #0]
 8005526:	4b15      	ldr	r3, [pc, #84]	; (800557c <xTaskCheckForTimeOut+0xc0>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	429a      	cmp	r2, r3
 800552c:	d007      	beq.n	800553e <xTaskCheckForTimeOut+0x82>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	685b      	ldr	r3, [r3, #4]
 8005532:	69ba      	ldr	r2, [r7, #24]
 8005534:	429a      	cmp	r2, r3
 8005536:	d302      	bcc.n	800553e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005538:	2301      	movs	r3, #1
 800553a:	61fb      	str	r3, [r7, #28]
 800553c:	e015      	b.n	800556a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	697a      	ldr	r2, [r7, #20]
 8005544:	429a      	cmp	r2, r3
 8005546:	d20b      	bcs.n	8005560 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	681a      	ldr	r2, [r3, #0]
 800554c:	697b      	ldr	r3, [r7, #20]
 800554e:	1ad2      	subs	r2, r2, r3
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005554:	6878      	ldr	r0, [r7, #4]
 8005556:	f7ff ff9b 	bl	8005490 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800555a:	2300      	movs	r3, #0
 800555c:	61fb      	str	r3, [r7, #28]
 800555e:	e004      	b.n	800556a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	2200      	movs	r2, #0
 8005564:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005566:	2301      	movs	r3, #1
 8005568:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800556a:	f001 f863 	bl	8006634 <vPortExitCritical>

	return xReturn;
 800556e:	69fb      	ldr	r3, [r7, #28]
}
 8005570:	4618      	mov	r0, r3
 8005572:	3720      	adds	r7, #32
 8005574:	46bd      	mov	sp, r7
 8005576:	bd80      	pop	{r7, pc}
 8005578:	20000e74 	.word	0x20000e74
 800557c:	20000e88 	.word	0x20000e88

08005580 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005580:	b480      	push	{r7}
 8005582:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005584:	4b03      	ldr	r3, [pc, #12]	; (8005594 <vTaskMissedYield+0x14>)
 8005586:	2201      	movs	r2, #1
 8005588:	601a      	str	r2, [r3, #0]
}
 800558a:	bf00      	nop
 800558c:	46bd      	mov	sp, r7
 800558e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005592:	4770      	bx	lr
 8005594:	20000e84 	.word	0x20000e84

08005598 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b082      	sub	sp, #8
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80055a0:	f000 f852 	bl	8005648 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80055a4:	4b06      	ldr	r3, [pc, #24]	; (80055c0 <prvIdleTask+0x28>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	2b01      	cmp	r3, #1
 80055aa:	d9f9      	bls.n	80055a0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80055ac:	4b05      	ldr	r3, [pc, #20]	; (80055c4 <prvIdleTask+0x2c>)
 80055ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055b2:	601a      	str	r2, [r3, #0]
 80055b4:	f3bf 8f4f 	dsb	sy
 80055b8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80055bc:	e7f0      	b.n	80055a0 <prvIdleTask+0x8>
 80055be:	bf00      	nop
 80055c0:	200009a0 	.word	0x200009a0
 80055c4:	e000ed04 	.word	0xe000ed04

080055c8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b082      	sub	sp, #8
 80055cc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80055ce:	2300      	movs	r3, #0
 80055d0:	607b      	str	r3, [r7, #4]
 80055d2:	e00c      	b.n	80055ee <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80055d4:	687a      	ldr	r2, [r7, #4]
 80055d6:	4613      	mov	r3, r2
 80055d8:	009b      	lsls	r3, r3, #2
 80055da:	4413      	add	r3, r2
 80055dc:	009b      	lsls	r3, r3, #2
 80055de:	4a12      	ldr	r2, [pc, #72]	; (8005628 <prvInitialiseTaskLists+0x60>)
 80055e0:	4413      	add	r3, r2
 80055e2:	4618      	mov	r0, r3
 80055e4:	f7fe fbfa 	bl	8003ddc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	3301      	adds	r3, #1
 80055ec:	607b      	str	r3, [r7, #4]
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2b37      	cmp	r3, #55	; 0x37
 80055f2:	d9ef      	bls.n	80055d4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80055f4:	480d      	ldr	r0, [pc, #52]	; (800562c <prvInitialiseTaskLists+0x64>)
 80055f6:	f7fe fbf1 	bl	8003ddc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80055fa:	480d      	ldr	r0, [pc, #52]	; (8005630 <prvInitialiseTaskLists+0x68>)
 80055fc:	f7fe fbee 	bl	8003ddc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005600:	480c      	ldr	r0, [pc, #48]	; (8005634 <prvInitialiseTaskLists+0x6c>)
 8005602:	f7fe fbeb 	bl	8003ddc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005606:	480c      	ldr	r0, [pc, #48]	; (8005638 <prvInitialiseTaskLists+0x70>)
 8005608:	f7fe fbe8 	bl	8003ddc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800560c:	480b      	ldr	r0, [pc, #44]	; (800563c <prvInitialiseTaskLists+0x74>)
 800560e:	f7fe fbe5 	bl	8003ddc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005612:	4b0b      	ldr	r3, [pc, #44]	; (8005640 <prvInitialiseTaskLists+0x78>)
 8005614:	4a05      	ldr	r2, [pc, #20]	; (800562c <prvInitialiseTaskLists+0x64>)
 8005616:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005618:	4b0a      	ldr	r3, [pc, #40]	; (8005644 <prvInitialiseTaskLists+0x7c>)
 800561a:	4a05      	ldr	r2, [pc, #20]	; (8005630 <prvInitialiseTaskLists+0x68>)
 800561c:	601a      	str	r2, [r3, #0]
}
 800561e:	bf00      	nop
 8005620:	3708      	adds	r7, #8
 8005622:	46bd      	mov	sp, r7
 8005624:	bd80      	pop	{r7, pc}
 8005626:	bf00      	nop
 8005628:	200009a0 	.word	0x200009a0
 800562c:	20000e00 	.word	0x20000e00
 8005630:	20000e14 	.word	0x20000e14
 8005634:	20000e30 	.word	0x20000e30
 8005638:	20000e44 	.word	0x20000e44
 800563c:	20000e5c 	.word	0x20000e5c
 8005640:	20000e28 	.word	0x20000e28
 8005644:	20000e2c 	.word	0x20000e2c

08005648 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b082      	sub	sp, #8
 800564c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800564e:	e019      	b.n	8005684 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005650:	f000 ffc0 	bl	80065d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005654:	4b10      	ldr	r3, [pc, #64]	; (8005698 <prvCheckTasksWaitingTermination+0x50>)
 8005656:	68db      	ldr	r3, [r3, #12]
 8005658:	68db      	ldr	r3, [r3, #12]
 800565a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	3304      	adds	r3, #4
 8005660:	4618      	mov	r0, r3
 8005662:	f7fe fc45 	bl	8003ef0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005666:	4b0d      	ldr	r3, [pc, #52]	; (800569c <prvCheckTasksWaitingTermination+0x54>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	3b01      	subs	r3, #1
 800566c:	4a0b      	ldr	r2, [pc, #44]	; (800569c <prvCheckTasksWaitingTermination+0x54>)
 800566e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005670:	4b0b      	ldr	r3, [pc, #44]	; (80056a0 <prvCheckTasksWaitingTermination+0x58>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	3b01      	subs	r3, #1
 8005676:	4a0a      	ldr	r2, [pc, #40]	; (80056a0 <prvCheckTasksWaitingTermination+0x58>)
 8005678:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800567a:	f000 ffdb 	bl	8006634 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800567e:	6878      	ldr	r0, [r7, #4]
 8005680:	f000 f810 	bl	80056a4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005684:	4b06      	ldr	r3, [pc, #24]	; (80056a0 <prvCheckTasksWaitingTermination+0x58>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d1e1      	bne.n	8005650 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800568c:	bf00      	nop
 800568e:	bf00      	nop
 8005690:	3708      	adds	r7, #8
 8005692:	46bd      	mov	sp, r7
 8005694:	bd80      	pop	{r7, pc}
 8005696:	bf00      	nop
 8005698:	20000e44 	.word	0x20000e44
 800569c:	20000e70 	.word	0x20000e70
 80056a0:	20000e58 	.word	0x20000e58

080056a4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b084      	sub	sp, #16
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d108      	bne.n	80056c8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056ba:	4618      	mov	r0, r3
 80056bc:	f001 f978 	bl	80069b0 <vPortFree>
				vPortFree( pxTCB );
 80056c0:	6878      	ldr	r0, [r7, #4]
 80056c2:	f001 f975 	bl	80069b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80056c6:	e018      	b.n	80056fa <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80056ce:	2b01      	cmp	r3, #1
 80056d0:	d103      	bne.n	80056da <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80056d2:	6878      	ldr	r0, [r7, #4]
 80056d4:	f001 f96c 	bl	80069b0 <vPortFree>
	}
 80056d8:	e00f      	b.n	80056fa <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80056e0:	2b02      	cmp	r3, #2
 80056e2:	d00a      	beq.n	80056fa <prvDeleteTCB+0x56>
	__asm volatile
 80056e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056e8:	f383 8811 	msr	BASEPRI, r3
 80056ec:	f3bf 8f6f 	isb	sy
 80056f0:	f3bf 8f4f 	dsb	sy
 80056f4:	60fb      	str	r3, [r7, #12]
}
 80056f6:	bf00      	nop
 80056f8:	e7fe      	b.n	80056f8 <prvDeleteTCB+0x54>
	}
 80056fa:	bf00      	nop
 80056fc:	3710      	adds	r7, #16
 80056fe:	46bd      	mov	sp, r7
 8005700:	bd80      	pop	{r7, pc}
	...

08005704 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005704:	b480      	push	{r7}
 8005706:	b083      	sub	sp, #12
 8005708:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800570a:	4b0c      	ldr	r3, [pc, #48]	; (800573c <prvResetNextTaskUnblockTime+0x38>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d104      	bne.n	800571e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005714:	4b0a      	ldr	r3, [pc, #40]	; (8005740 <prvResetNextTaskUnblockTime+0x3c>)
 8005716:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800571a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800571c:	e008      	b.n	8005730 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800571e:	4b07      	ldr	r3, [pc, #28]	; (800573c <prvResetNextTaskUnblockTime+0x38>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	68db      	ldr	r3, [r3, #12]
 8005724:	68db      	ldr	r3, [r3, #12]
 8005726:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	685b      	ldr	r3, [r3, #4]
 800572c:	4a04      	ldr	r2, [pc, #16]	; (8005740 <prvResetNextTaskUnblockTime+0x3c>)
 800572e:	6013      	str	r3, [r2, #0]
}
 8005730:	bf00      	nop
 8005732:	370c      	adds	r7, #12
 8005734:	46bd      	mov	sp, r7
 8005736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573a:	4770      	bx	lr
 800573c:	20000e28 	.word	0x20000e28
 8005740:	20000e90 	.word	0x20000e90

08005744 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005744:	b480      	push	{r7}
 8005746:	b083      	sub	sp, #12
 8005748:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800574a:	4b0b      	ldr	r3, [pc, #44]	; (8005778 <xTaskGetSchedulerState+0x34>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d102      	bne.n	8005758 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005752:	2301      	movs	r3, #1
 8005754:	607b      	str	r3, [r7, #4]
 8005756:	e008      	b.n	800576a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005758:	4b08      	ldr	r3, [pc, #32]	; (800577c <xTaskGetSchedulerState+0x38>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d102      	bne.n	8005766 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005760:	2302      	movs	r3, #2
 8005762:	607b      	str	r3, [r7, #4]
 8005764:	e001      	b.n	800576a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005766:	2300      	movs	r3, #0
 8005768:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800576a:	687b      	ldr	r3, [r7, #4]
	}
 800576c:	4618      	mov	r0, r3
 800576e:	370c      	adds	r7, #12
 8005770:	46bd      	mov	sp, r7
 8005772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005776:	4770      	bx	lr
 8005778:	20000e7c 	.word	0x20000e7c
 800577c:	20000e98 	.word	0x20000e98

08005780 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005780:	b580      	push	{r7, lr}
 8005782:	b086      	sub	sp, #24
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800578c:	2300      	movs	r3, #0
 800578e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d056      	beq.n	8005844 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005796:	4b2e      	ldr	r3, [pc, #184]	; (8005850 <xTaskPriorityDisinherit+0xd0>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	693a      	ldr	r2, [r7, #16]
 800579c:	429a      	cmp	r2, r3
 800579e:	d00a      	beq.n	80057b6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80057a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057a4:	f383 8811 	msr	BASEPRI, r3
 80057a8:	f3bf 8f6f 	isb	sy
 80057ac:	f3bf 8f4f 	dsb	sy
 80057b0:	60fb      	str	r3, [r7, #12]
}
 80057b2:	bf00      	nop
 80057b4:	e7fe      	b.n	80057b4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80057b6:	693b      	ldr	r3, [r7, #16]
 80057b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d10a      	bne.n	80057d4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80057be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057c2:	f383 8811 	msr	BASEPRI, r3
 80057c6:	f3bf 8f6f 	isb	sy
 80057ca:	f3bf 8f4f 	dsb	sy
 80057ce:	60bb      	str	r3, [r7, #8]
}
 80057d0:	bf00      	nop
 80057d2:	e7fe      	b.n	80057d2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80057d4:	693b      	ldr	r3, [r7, #16]
 80057d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057d8:	1e5a      	subs	r2, r3, #1
 80057da:	693b      	ldr	r3, [r7, #16]
 80057dc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80057de:	693b      	ldr	r3, [r7, #16]
 80057e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057e2:	693b      	ldr	r3, [r7, #16]
 80057e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057e6:	429a      	cmp	r2, r3
 80057e8:	d02c      	beq.n	8005844 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80057ea:	693b      	ldr	r3, [r7, #16]
 80057ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d128      	bne.n	8005844 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	3304      	adds	r3, #4
 80057f6:	4618      	mov	r0, r3
 80057f8:	f7fe fb7a 	bl	8003ef0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005800:	693b      	ldr	r3, [r7, #16]
 8005802:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005804:	693b      	ldr	r3, [r7, #16]
 8005806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005808:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800580c:	693b      	ldr	r3, [r7, #16]
 800580e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005810:	693b      	ldr	r3, [r7, #16]
 8005812:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005814:	4b0f      	ldr	r3, [pc, #60]	; (8005854 <xTaskPriorityDisinherit+0xd4>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	429a      	cmp	r2, r3
 800581a:	d903      	bls.n	8005824 <xTaskPriorityDisinherit+0xa4>
 800581c:	693b      	ldr	r3, [r7, #16]
 800581e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005820:	4a0c      	ldr	r2, [pc, #48]	; (8005854 <xTaskPriorityDisinherit+0xd4>)
 8005822:	6013      	str	r3, [r2, #0]
 8005824:	693b      	ldr	r3, [r7, #16]
 8005826:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005828:	4613      	mov	r3, r2
 800582a:	009b      	lsls	r3, r3, #2
 800582c:	4413      	add	r3, r2
 800582e:	009b      	lsls	r3, r3, #2
 8005830:	4a09      	ldr	r2, [pc, #36]	; (8005858 <xTaskPriorityDisinherit+0xd8>)
 8005832:	441a      	add	r2, r3
 8005834:	693b      	ldr	r3, [r7, #16]
 8005836:	3304      	adds	r3, #4
 8005838:	4619      	mov	r1, r3
 800583a:	4610      	mov	r0, r2
 800583c:	f7fe fafb 	bl	8003e36 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005840:	2301      	movs	r3, #1
 8005842:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005844:	697b      	ldr	r3, [r7, #20]
	}
 8005846:	4618      	mov	r0, r3
 8005848:	3718      	adds	r7, #24
 800584a:	46bd      	mov	sp, r7
 800584c:	bd80      	pop	{r7, pc}
 800584e:	bf00      	nop
 8005850:	2000099c 	.word	0x2000099c
 8005854:	20000e78 	.word	0x20000e78
 8005858:	200009a0 	.word	0x200009a0

0800585c <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800585c:	b580      	push	{r7, lr}
 800585e:	b086      	sub	sp, #24
 8005860:	af00      	add	r7, sp, #0
 8005862:	60f8      	str	r0, [r7, #12]
 8005864:	60b9      	str	r1, [r7, #8]
 8005866:	607a      	str	r2, [r7, #4]
 8005868:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800586a:	f000 feb3 	bl	80065d4 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800586e:	4b26      	ldr	r3, [pc, #152]	; (8005908 <xTaskNotifyWait+0xac>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8005876:	b2db      	uxtb	r3, r3
 8005878:	2b02      	cmp	r3, #2
 800587a:	d01a      	beq.n	80058b2 <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800587c:	4b22      	ldr	r3, [pc, #136]	; (8005908 <xTaskNotifyWait+0xac>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005882:	68fa      	ldr	r2, [r7, #12]
 8005884:	43d2      	mvns	r2, r2
 8005886:	400a      	ands	r2, r1
 8005888:	655a      	str	r2, [r3, #84]	; 0x54

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800588a:	4b1f      	ldr	r3, [pc, #124]	; (8005908 <xTaskNotifyWait+0xac>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	2201      	movs	r2, #1
 8005890:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d00b      	beq.n	80058b2 <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800589a:	2101      	movs	r1, #1
 800589c:	6838      	ldr	r0, [r7, #0]
 800589e:	f000 f9cb 	bl	8005c38 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 80058a2:	4b1a      	ldr	r3, [pc, #104]	; (800590c <xTaskNotifyWait+0xb0>)
 80058a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058a8:	601a      	str	r2, [r3, #0]
 80058aa:	f3bf 8f4f 	dsb	sy
 80058ae:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80058b2:	f000 febf 	bl	8006634 <vPortExitCritical>

		taskENTER_CRITICAL();
 80058b6:	f000 fe8d 	bl	80065d4 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d004      	beq.n	80058ca <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 80058c0:	4b11      	ldr	r3, [pc, #68]	; (8005908 <xTaskNotifyWait+0xac>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80058ca:	4b0f      	ldr	r3, [pc, #60]	; (8005908 <xTaskNotifyWait+0xac>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80058d2:	b2db      	uxtb	r3, r3
 80058d4:	2b02      	cmp	r3, #2
 80058d6:	d002      	beq.n	80058de <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 80058d8:	2300      	movs	r3, #0
 80058da:	617b      	str	r3, [r7, #20]
 80058dc:	e008      	b.n	80058f0 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 80058de:	4b0a      	ldr	r3, [pc, #40]	; (8005908 <xTaskNotifyWait+0xac>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80058e4:	68ba      	ldr	r2, [r7, #8]
 80058e6:	43d2      	mvns	r2, r2
 80058e8:	400a      	ands	r2, r1
 80058ea:	655a      	str	r2, [r3, #84]	; 0x54
				xReturn = pdTRUE;
 80058ec:	2301      	movs	r3, #1
 80058ee:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80058f0:	4b05      	ldr	r3, [pc, #20]	; (8005908 <xTaskNotifyWait+0xac>)
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	2200      	movs	r2, #0
 80058f6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 80058fa:	f000 fe9b 	bl	8006634 <vPortExitCritical>

		return xReturn;
 80058fe:	697b      	ldr	r3, [r7, #20]
	}
 8005900:	4618      	mov	r0, r3
 8005902:	3718      	adds	r7, #24
 8005904:	46bd      	mov	sp, r7
 8005906:	bd80      	pop	{r7, pc}
 8005908:	2000099c 	.word	0x2000099c
 800590c:	e000ed04 	.word	0xe000ed04

08005910 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8005910:	b580      	push	{r7, lr}
 8005912:	b08a      	sub	sp, #40	; 0x28
 8005914:	af00      	add	r7, sp, #0
 8005916:	60f8      	str	r0, [r7, #12]
 8005918:	60b9      	str	r1, [r7, #8]
 800591a:	603b      	str	r3, [r7, #0]
 800591c:	4613      	mov	r3, r2
 800591e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8005920:	2301      	movs	r3, #1
 8005922:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d10a      	bne.n	8005940 <xTaskGenericNotify+0x30>
	__asm volatile
 800592a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800592e:	f383 8811 	msr	BASEPRI, r3
 8005932:	f3bf 8f6f 	isb	sy
 8005936:	f3bf 8f4f 	dsb	sy
 800593a:	61bb      	str	r3, [r7, #24]
}
 800593c:	bf00      	nop
 800593e:	e7fe      	b.n	800593e <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8005944:	f000 fe46 	bl	80065d4 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d003      	beq.n	8005956 <xTaskGenericNotify+0x46>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800594e:	6a3b      	ldr	r3, [r7, #32]
 8005950:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8005956:	6a3b      	ldr	r3, [r7, #32]
 8005958:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800595c:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800595e:	6a3b      	ldr	r3, [r7, #32]
 8005960:	2202      	movs	r2, #2
 8005962:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 8005966:	79fb      	ldrb	r3, [r7, #7]
 8005968:	2b04      	cmp	r3, #4
 800596a:	d828      	bhi.n	80059be <xTaskGenericNotify+0xae>
 800596c:	a201      	add	r2, pc, #4	; (adr r2, 8005974 <xTaskGenericNotify+0x64>)
 800596e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005972:	bf00      	nop
 8005974:	080059df 	.word	0x080059df
 8005978:	08005989 	.word	0x08005989
 800597c:	08005997 	.word	0x08005997
 8005980:	080059a3 	.word	0x080059a3
 8005984:	080059ab 	.word	0x080059ab
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8005988:	6a3b      	ldr	r3, [r7, #32]
 800598a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	431a      	orrs	r2, r3
 8005990:	6a3b      	ldr	r3, [r7, #32]
 8005992:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8005994:	e026      	b.n	80059e4 <xTaskGenericNotify+0xd4>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8005996:	6a3b      	ldr	r3, [r7, #32]
 8005998:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800599a:	1c5a      	adds	r2, r3, #1
 800599c:	6a3b      	ldr	r3, [r7, #32]
 800599e:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 80059a0:	e020      	b.n	80059e4 <xTaskGenericNotify+0xd4>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80059a2:	6a3b      	ldr	r3, [r7, #32]
 80059a4:	68ba      	ldr	r2, [r7, #8]
 80059a6:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 80059a8:	e01c      	b.n	80059e4 <xTaskGenericNotify+0xd4>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80059aa:	7ffb      	ldrb	r3, [r7, #31]
 80059ac:	2b02      	cmp	r3, #2
 80059ae:	d003      	beq.n	80059b8 <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80059b0:	6a3b      	ldr	r3, [r7, #32]
 80059b2:	68ba      	ldr	r2, [r7, #8]
 80059b4:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80059b6:	e015      	b.n	80059e4 <xTaskGenericNotify+0xd4>
						xReturn = pdFAIL;
 80059b8:	2300      	movs	r3, #0
 80059ba:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 80059bc:	e012      	b.n	80059e4 <xTaskGenericNotify+0xd4>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80059be:	6a3b      	ldr	r3, [r7, #32]
 80059c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80059c6:	d00c      	beq.n	80059e2 <xTaskGenericNotify+0xd2>
	__asm volatile
 80059c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059cc:	f383 8811 	msr	BASEPRI, r3
 80059d0:	f3bf 8f6f 	isb	sy
 80059d4:	f3bf 8f4f 	dsb	sy
 80059d8:	617b      	str	r3, [r7, #20]
}
 80059da:	bf00      	nop
 80059dc:	e7fe      	b.n	80059dc <xTaskGenericNotify+0xcc>
					break;
 80059de:	bf00      	nop
 80059e0:	e000      	b.n	80059e4 <xTaskGenericNotify+0xd4>

					break;
 80059e2:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80059e4:	7ffb      	ldrb	r3, [r7, #31]
 80059e6:	2b01      	cmp	r3, #1
 80059e8:	d13a      	bne.n	8005a60 <xTaskGenericNotify+0x150>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80059ea:	6a3b      	ldr	r3, [r7, #32]
 80059ec:	3304      	adds	r3, #4
 80059ee:	4618      	mov	r0, r3
 80059f0:	f7fe fa7e 	bl	8003ef0 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 80059f4:	6a3b      	ldr	r3, [r7, #32]
 80059f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059f8:	4b1d      	ldr	r3, [pc, #116]	; (8005a70 <xTaskGenericNotify+0x160>)
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	429a      	cmp	r2, r3
 80059fe:	d903      	bls.n	8005a08 <xTaskGenericNotify+0xf8>
 8005a00:	6a3b      	ldr	r3, [r7, #32]
 8005a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a04:	4a1a      	ldr	r2, [pc, #104]	; (8005a70 <xTaskGenericNotify+0x160>)
 8005a06:	6013      	str	r3, [r2, #0]
 8005a08:	6a3b      	ldr	r3, [r7, #32]
 8005a0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a0c:	4613      	mov	r3, r2
 8005a0e:	009b      	lsls	r3, r3, #2
 8005a10:	4413      	add	r3, r2
 8005a12:	009b      	lsls	r3, r3, #2
 8005a14:	4a17      	ldr	r2, [pc, #92]	; (8005a74 <xTaskGenericNotify+0x164>)
 8005a16:	441a      	add	r2, r3
 8005a18:	6a3b      	ldr	r3, [r7, #32]
 8005a1a:	3304      	adds	r3, #4
 8005a1c:	4619      	mov	r1, r3
 8005a1e:	4610      	mov	r0, r2
 8005a20:	f7fe fa09 	bl	8003e36 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8005a24:	6a3b      	ldr	r3, [r7, #32]
 8005a26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d00a      	beq.n	8005a42 <xTaskGenericNotify+0x132>
	__asm volatile
 8005a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a30:	f383 8811 	msr	BASEPRI, r3
 8005a34:	f3bf 8f6f 	isb	sy
 8005a38:	f3bf 8f4f 	dsb	sy
 8005a3c:	613b      	str	r3, [r7, #16]
}
 8005a3e:	bf00      	nop
 8005a40:	e7fe      	b.n	8005a40 <xTaskGenericNotify+0x130>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005a42:	6a3b      	ldr	r3, [r7, #32]
 8005a44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a46:	4b0c      	ldr	r3, [pc, #48]	; (8005a78 <xTaskGenericNotify+0x168>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a4c:	429a      	cmp	r2, r3
 8005a4e:	d907      	bls.n	8005a60 <xTaskGenericNotify+0x150>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8005a50:	4b0a      	ldr	r3, [pc, #40]	; (8005a7c <xTaskGenericNotify+0x16c>)
 8005a52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a56:	601a      	str	r2, [r3, #0]
 8005a58:	f3bf 8f4f 	dsb	sy
 8005a5c:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8005a60:	f000 fde8 	bl	8006634 <vPortExitCritical>

		return xReturn;
 8005a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8005a66:	4618      	mov	r0, r3
 8005a68:	3728      	adds	r7, #40	; 0x28
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bd80      	pop	{r7, pc}
 8005a6e:	bf00      	nop
 8005a70:	20000e78 	.word	0x20000e78
 8005a74:	200009a0 	.word	0x200009a0
 8005a78:	2000099c 	.word	0x2000099c
 8005a7c:	e000ed04 	.word	0xe000ed04

08005a80 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b08e      	sub	sp, #56	; 0x38
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	60f8      	str	r0, [r7, #12]
 8005a88:	60b9      	str	r1, [r7, #8]
 8005a8a:	603b      	str	r3, [r7, #0]
 8005a8c:	4613      	mov	r3, r2
 8005a8e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8005a90:	2301      	movs	r3, #1
 8005a92:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d10a      	bne.n	8005ab0 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 8005a9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a9e:	f383 8811 	msr	BASEPRI, r3
 8005aa2:	f3bf 8f6f 	isb	sy
 8005aa6:	f3bf 8f4f 	dsb	sy
 8005aaa:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005aac:	bf00      	nop
 8005aae:	e7fe      	b.n	8005aae <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005ab0:	f000 fe72 	bl	8006798 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 8005ab8:	f3ef 8211 	mrs	r2, BASEPRI
 8005abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ac0:	f383 8811 	msr	BASEPRI, r3
 8005ac4:	f3bf 8f6f 	isb	sy
 8005ac8:	f3bf 8f4f 	dsb	sy
 8005acc:	623a      	str	r2, [r7, #32]
 8005ace:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8005ad0:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d003      	beq.n	8005ae2 <xTaskGenericNotifyFromISR+0x62>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8005ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005adc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8005ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ae4:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8005ae8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8005aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aee:	2202      	movs	r2, #2
 8005af0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 8005af4:	79fb      	ldrb	r3, [r7, #7]
 8005af6:	2b04      	cmp	r3, #4
 8005af8:	d828      	bhi.n	8005b4c <xTaskGenericNotifyFromISR+0xcc>
 8005afa:	a201      	add	r2, pc, #4	; (adr r2, 8005b00 <xTaskGenericNotifyFromISR+0x80>)
 8005afc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b00:	08005b6d 	.word	0x08005b6d
 8005b04:	08005b15 	.word	0x08005b15
 8005b08:	08005b23 	.word	0x08005b23
 8005b0c:	08005b2f 	.word	0x08005b2f
 8005b10:	08005b37 	.word	0x08005b37
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8005b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b16:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	431a      	orrs	r2, r3
 8005b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b1e:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8005b20:	e027      	b.n	8005b72 <xTaskGenericNotifyFromISR+0xf2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8005b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b26:	1c5a      	adds	r2, r3, #1
 8005b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b2a:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8005b2c:	e021      	b.n	8005b72 <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8005b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b30:	68ba      	ldr	r2, [r7, #8]
 8005b32:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8005b34:	e01d      	b.n	8005b72 <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8005b36:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005b3a:	2b02      	cmp	r3, #2
 8005b3c:	d003      	beq.n	8005b46 <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8005b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b40:	68ba      	ldr	r2, [r7, #8]
 8005b42:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8005b44:	e015      	b.n	8005b72 <xTaskGenericNotifyFromISR+0xf2>
						xReturn = pdFAIL;
 8005b46:	2300      	movs	r3, #0
 8005b48:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 8005b4a:	e012      	b.n	8005b72 <xTaskGenericNotifyFromISR+0xf2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8005b4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b54:	d00c      	beq.n	8005b70 <xTaskGenericNotifyFromISR+0xf0>
	__asm volatile
 8005b56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b5a:	f383 8811 	msr	BASEPRI, r3
 8005b5e:	f3bf 8f6f 	isb	sy
 8005b62:	f3bf 8f4f 	dsb	sy
 8005b66:	61bb      	str	r3, [r7, #24]
}
 8005b68:	bf00      	nop
 8005b6a:	e7fe      	b.n	8005b6a <xTaskGenericNotifyFromISR+0xea>
					break;
 8005b6c:	bf00      	nop
 8005b6e:	e000      	b.n	8005b72 <xTaskGenericNotifyFromISR+0xf2>
					break;
 8005b70:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8005b72:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005b76:	2b01      	cmp	r3, #1
 8005b78:	d146      	bne.n	8005c08 <xTaskGenericNotifyFromISR+0x188>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8005b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d00a      	beq.n	8005b98 <xTaskGenericNotifyFromISR+0x118>
	__asm volatile
 8005b82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b86:	f383 8811 	msr	BASEPRI, r3
 8005b8a:	f3bf 8f6f 	isb	sy
 8005b8e:	f3bf 8f4f 	dsb	sy
 8005b92:	617b      	str	r3, [r7, #20]
}
 8005b94:	bf00      	nop
 8005b96:	e7fe      	b.n	8005b96 <xTaskGenericNotifyFromISR+0x116>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b98:	4b21      	ldr	r3, [pc, #132]	; (8005c20 <xTaskGenericNotifyFromISR+0x1a0>)
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d11d      	bne.n	8005bdc <xTaskGenericNotifyFromISR+0x15c>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005ba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ba2:	3304      	adds	r3, #4
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	f7fe f9a3 	bl	8003ef0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bae:	4b1d      	ldr	r3, [pc, #116]	; (8005c24 <xTaskGenericNotifyFromISR+0x1a4>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	429a      	cmp	r2, r3
 8005bb4:	d903      	bls.n	8005bbe <xTaskGenericNotifyFromISR+0x13e>
 8005bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bba:	4a1a      	ldr	r2, [pc, #104]	; (8005c24 <xTaskGenericNotifyFromISR+0x1a4>)
 8005bbc:	6013      	str	r3, [r2, #0]
 8005bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bc2:	4613      	mov	r3, r2
 8005bc4:	009b      	lsls	r3, r3, #2
 8005bc6:	4413      	add	r3, r2
 8005bc8:	009b      	lsls	r3, r3, #2
 8005bca:	4a17      	ldr	r2, [pc, #92]	; (8005c28 <xTaskGenericNotifyFromISR+0x1a8>)
 8005bcc:	441a      	add	r2, r3
 8005bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bd0:	3304      	adds	r3, #4
 8005bd2:	4619      	mov	r1, r3
 8005bd4:	4610      	mov	r0, r2
 8005bd6:	f7fe f92e 	bl	8003e36 <vListInsertEnd>
 8005bda:	e005      	b.n	8005be8 <xTaskGenericNotifyFromISR+0x168>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8005bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bde:	3318      	adds	r3, #24
 8005be0:	4619      	mov	r1, r3
 8005be2:	4812      	ldr	r0, [pc, #72]	; (8005c2c <xTaskGenericNotifyFromISR+0x1ac>)
 8005be4:	f7fe f927 	bl	8003e36 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bec:	4b10      	ldr	r3, [pc, #64]	; (8005c30 <xTaskGenericNotifyFromISR+0x1b0>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bf2:	429a      	cmp	r2, r3
 8005bf4:	d908      	bls.n	8005c08 <xTaskGenericNotifyFromISR+0x188>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8005bf6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d002      	beq.n	8005c02 <xTaskGenericNotifyFromISR+0x182>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8005bfc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005bfe:	2201      	movs	r2, #1
 8005c00:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8005c02:	4b0c      	ldr	r3, [pc, #48]	; (8005c34 <xTaskGenericNotifyFromISR+0x1b4>)
 8005c04:	2201      	movs	r2, #1
 8005c06:	601a      	str	r2, [r3, #0]
 8005c08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c0a:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005c0c:	693b      	ldr	r3, [r7, #16]
 8005c0e:	f383 8811 	msr	BASEPRI, r3
}
 8005c12:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8005c14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8005c16:	4618      	mov	r0, r3
 8005c18:	3738      	adds	r7, #56	; 0x38
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	bd80      	pop	{r7, pc}
 8005c1e:	bf00      	nop
 8005c20:	20000e98 	.word	0x20000e98
 8005c24:	20000e78 	.word	0x20000e78
 8005c28:	200009a0 	.word	0x200009a0
 8005c2c:	20000e30 	.word	0x20000e30
 8005c30:	2000099c 	.word	0x2000099c
 8005c34:	20000e84 	.word	0x20000e84

08005c38 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b084      	sub	sp, #16
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
 8005c40:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005c42:	4b21      	ldr	r3, [pc, #132]	; (8005cc8 <prvAddCurrentTaskToDelayedList+0x90>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005c48:	4b20      	ldr	r3, [pc, #128]	; (8005ccc <prvAddCurrentTaskToDelayedList+0x94>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	3304      	adds	r3, #4
 8005c4e:	4618      	mov	r0, r3
 8005c50:	f7fe f94e 	bl	8003ef0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c5a:	d10a      	bne.n	8005c72 <prvAddCurrentTaskToDelayedList+0x3a>
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d007      	beq.n	8005c72 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005c62:	4b1a      	ldr	r3, [pc, #104]	; (8005ccc <prvAddCurrentTaskToDelayedList+0x94>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	3304      	adds	r3, #4
 8005c68:	4619      	mov	r1, r3
 8005c6a:	4819      	ldr	r0, [pc, #100]	; (8005cd0 <prvAddCurrentTaskToDelayedList+0x98>)
 8005c6c:	f7fe f8e3 	bl	8003e36 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005c70:	e026      	b.n	8005cc0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005c72:	68fa      	ldr	r2, [r7, #12]
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	4413      	add	r3, r2
 8005c78:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005c7a:	4b14      	ldr	r3, [pc, #80]	; (8005ccc <prvAddCurrentTaskToDelayedList+0x94>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	68ba      	ldr	r2, [r7, #8]
 8005c80:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005c82:	68ba      	ldr	r2, [r7, #8]
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	429a      	cmp	r2, r3
 8005c88:	d209      	bcs.n	8005c9e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005c8a:	4b12      	ldr	r3, [pc, #72]	; (8005cd4 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005c8c:	681a      	ldr	r2, [r3, #0]
 8005c8e:	4b0f      	ldr	r3, [pc, #60]	; (8005ccc <prvAddCurrentTaskToDelayedList+0x94>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	3304      	adds	r3, #4
 8005c94:	4619      	mov	r1, r3
 8005c96:	4610      	mov	r0, r2
 8005c98:	f7fe f8f1 	bl	8003e7e <vListInsert>
}
 8005c9c:	e010      	b.n	8005cc0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005c9e:	4b0e      	ldr	r3, [pc, #56]	; (8005cd8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005ca0:	681a      	ldr	r2, [r3, #0]
 8005ca2:	4b0a      	ldr	r3, [pc, #40]	; (8005ccc <prvAddCurrentTaskToDelayedList+0x94>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	3304      	adds	r3, #4
 8005ca8:	4619      	mov	r1, r3
 8005caa:	4610      	mov	r0, r2
 8005cac:	f7fe f8e7 	bl	8003e7e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005cb0:	4b0a      	ldr	r3, [pc, #40]	; (8005cdc <prvAddCurrentTaskToDelayedList+0xa4>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	68ba      	ldr	r2, [r7, #8]
 8005cb6:	429a      	cmp	r2, r3
 8005cb8:	d202      	bcs.n	8005cc0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005cba:	4a08      	ldr	r2, [pc, #32]	; (8005cdc <prvAddCurrentTaskToDelayedList+0xa4>)
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	6013      	str	r3, [r2, #0]
}
 8005cc0:	bf00      	nop
 8005cc2:	3710      	adds	r7, #16
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	bd80      	pop	{r7, pc}
 8005cc8:	20000e74 	.word	0x20000e74
 8005ccc:	2000099c 	.word	0x2000099c
 8005cd0:	20000e5c 	.word	0x20000e5c
 8005cd4:	20000e2c 	.word	0x20000e2c
 8005cd8:	20000e28 	.word	0x20000e28
 8005cdc:	20000e90 	.word	0x20000e90

08005ce0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b08a      	sub	sp, #40	; 0x28
 8005ce4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005cea:	f000 fb07 	bl	80062fc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005cee:	4b1c      	ldr	r3, [pc, #112]	; (8005d60 <xTimerCreateTimerTask+0x80>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d021      	beq.n	8005d3a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005cfe:	1d3a      	adds	r2, r7, #4
 8005d00:	f107 0108 	add.w	r1, r7, #8
 8005d04:	f107 030c 	add.w	r3, r7, #12
 8005d08:	4618      	mov	r0, r3
 8005d0a:	f7fe f84d 	bl	8003da8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005d0e:	6879      	ldr	r1, [r7, #4]
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	68fa      	ldr	r2, [r7, #12]
 8005d14:	9202      	str	r2, [sp, #8]
 8005d16:	9301      	str	r3, [sp, #4]
 8005d18:	2302      	movs	r3, #2
 8005d1a:	9300      	str	r3, [sp, #0]
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	460a      	mov	r2, r1
 8005d20:	4910      	ldr	r1, [pc, #64]	; (8005d64 <xTimerCreateTimerTask+0x84>)
 8005d22:	4811      	ldr	r0, [pc, #68]	; (8005d68 <xTimerCreateTimerTask+0x88>)
 8005d24:	f7fe fef0 	bl	8004b08 <xTaskCreateStatic>
 8005d28:	4603      	mov	r3, r0
 8005d2a:	4a10      	ldr	r2, [pc, #64]	; (8005d6c <xTimerCreateTimerTask+0x8c>)
 8005d2c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005d2e:	4b0f      	ldr	r3, [pc, #60]	; (8005d6c <xTimerCreateTimerTask+0x8c>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d001      	beq.n	8005d3a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005d36:	2301      	movs	r3, #1
 8005d38:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005d3a:	697b      	ldr	r3, [r7, #20]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d10a      	bne.n	8005d56 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d44:	f383 8811 	msr	BASEPRI, r3
 8005d48:	f3bf 8f6f 	isb	sy
 8005d4c:	f3bf 8f4f 	dsb	sy
 8005d50:	613b      	str	r3, [r7, #16]
}
 8005d52:	bf00      	nop
 8005d54:	e7fe      	b.n	8005d54 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005d56:	697b      	ldr	r3, [r7, #20]
}
 8005d58:	4618      	mov	r0, r3
 8005d5a:	3718      	adds	r7, #24
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	bd80      	pop	{r7, pc}
 8005d60:	20000ecc 	.word	0x20000ecc
 8005d64:	08007d44 	.word	0x08007d44
 8005d68:	08005ea5 	.word	0x08005ea5
 8005d6c:	20000ed0 	.word	0x20000ed0

08005d70 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b08a      	sub	sp, #40	; 0x28
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	60f8      	str	r0, [r7, #12]
 8005d78:	60b9      	str	r1, [r7, #8]
 8005d7a:	607a      	str	r2, [r7, #4]
 8005d7c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005d7e:	2300      	movs	r3, #0
 8005d80:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d10a      	bne.n	8005d9e <xTimerGenericCommand+0x2e>
	__asm volatile
 8005d88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d8c:	f383 8811 	msr	BASEPRI, r3
 8005d90:	f3bf 8f6f 	isb	sy
 8005d94:	f3bf 8f4f 	dsb	sy
 8005d98:	623b      	str	r3, [r7, #32]
}
 8005d9a:	bf00      	nop
 8005d9c:	e7fe      	b.n	8005d9c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005d9e:	4b1a      	ldr	r3, [pc, #104]	; (8005e08 <xTimerGenericCommand+0x98>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d02a      	beq.n	8005dfc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005db2:	68bb      	ldr	r3, [r7, #8]
 8005db4:	2b05      	cmp	r3, #5
 8005db6:	dc18      	bgt.n	8005dea <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005db8:	f7ff fcc4 	bl	8005744 <xTaskGetSchedulerState>
 8005dbc:	4603      	mov	r3, r0
 8005dbe:	2b02      	cmp	r3, #2
 8005dc0:	d109      	bne.n	8005dd6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005dc2:	4b11      	ldr	r3, [pc, #68]	; (8005e08 <xTimerGenericCommand+0x98>)
 8005dc4:	6818      	ldr	r0, [r3, #0]
 8005dc6:	f107 0110 	add.w	r1, r7, #16
 8005dca:	2300      	movs	r3, #0
 8005dcc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005dce:	f7fe f9f7 	bl	80041c0 <xQueueGenericSend>
 8005dd2:	6278      	str	r0, [r7, #36]	; 0x24
 8005dd4:	e012      	b.n	8005dfc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005dd6:	4b0c      	ldr	r3, [pc, #48]	; (8005e08 <xTimerGenericCommand+0x98>)
 8005dd8:	6818      	ldr	r0, [r3, #0]
 8005dda:	f107 0110 	add.w	r1, r7, #16
 8005dde:	2300      	movs	r3, #0
 8005de0:	2200      	movs	r2, #0
 8005de2:	f7fe f9ed 	bl	80041c0 <xQueueGenericSend>
 8005de6:	6278      	str	r0, [r7, #36]	; 0x24
 8005de8:	e008      	b.n	8005dfc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005dea:	4b07      	ldr	r3, [pc, #28]	; (8005e08 <xTimerGenericCommand+0x98>)
 8005dec:	6818      	ldr	r0, [r3, #0]
 8005dee:	f107 0110 	add.w	r1, r7, #16
 8005df2:	2300      	movs	r3, #0
 8005df4:	683a      	ldr	r2, [r7, #0]
 8005df6:	f7fe fae1 	bl	80043bc <xQueueGenericSendFromISR>
 8005dfa:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005dfe:	4618      	mov	r0, r3
 8005e00:	3728      	adds	r7, #40	; 0x28
 8005e02:	46bd      	mov	sp, r7
 8005e04:	bd80      	pop	{r7, pc}
 8005e06:	bf00      	nop
 8005e08:	20000ecc 	.word	0x20000ecc

08005e0c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b088      	sub	sp, #32
 8005e10:	af02      	add	r7, sp, #8
 8005e12:	6078      	str	r0, [r7, #4]
 8005e14:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e16:	4b22      	ldr	r3, [pc, #136]	; (8005ea0 <prvProcessExpiredTimer+0x94>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	68db      	ldr	r3, [r3, #12]
 8005e1c:	68db      	ldr	r3, [r3, #12]
 8005e1e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005e20:	697b      	ldr	r3, [r7, #20]
 8005e22:	3304      	adds	r3, #4
 8005e24:	4618      	mov	r0, r3
 8005e26:	f7fe f863 	bl	8003ef0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005e2a:	697b      	ldr	r3, [r7, #20]
 8005e2c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005e30:	f003 0304 	and.w	r3, r3, #4
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d022      	beq.n	8005e7e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005e38:	697b      	ldr	r3, [r7, #20]
 8005e3a:	699a      	ldr	r2, [r3, #24]
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	18d1      	adds	r1, r2, r3
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	683a      	ldr	r2, [r7, #0]
 8005e44:	6978      	ldr	r0, [r7, #20]
 8005e46:	f000 f8d1 	bl	8005fec <prvInsertTimerInActiveList>
 8005e4a:	4603      	mov	r3, r0
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d01f      	beq.n	8005e90 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005e50:	2300      	movs	r3, #0
 8005e52:	9300      	str	r3, [sp, #0]
 8005e54:	2300      	movs	r3, #0
 8005e56:	687a      	ldr	r2, [r7, #4]
 8005e58:	2100      	movs	r1, #0
 8005e5a:	6978      	ldr	r0, [r7, #20]
 8005e5c:	f7ff ff88 	bl	8005d70 <xTimerGenericCommand>
 8005e60:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005e62:	693b      	ldr	r3, [r7, #16]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d113      	bne.n	8005e90 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8005e68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e6c:	f383 8811 	msr	BASEPRI, r3
 8005e70:	f3bf 8f6f 	isb	sy
 8005e74:	f3bf 8f4f 	dsb	sy
 8005e78:	60fb      	str	r3, [r7, #12]
}
 8005e7a:	bf00      	nop
 8005e7c:	e7fe      	b.n	8005e7c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005e7e:	697b      	ldr	r3, [r7, #20]
 8005e80:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005e84:	f023 0301 	bic.w	r3, r3, #1
 8005e88:	b2da      	uxtb	r2, r3
 8005e8a:	697b      	ldr	r3, [r7, #20]
 8005e8c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005e90:	697b      	ldr	r3, [r7, #20]
 8005e92:	6a1b      	ldr	r3, [r3, #32]
 8005e94:	6978      	ldr	r0, [r7, #20]
 8005e96:	4798      	blx	r3
}
 8005e98:	bf00      	nop
 8005e9a:	3718      	adds	r7, #24
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	bd80      	pop	{r7, pc}
 8005ea0:	20000ec4 	.word	0x20000ec4

08005ea4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b084      	sub	sp, #16
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005eac:	f107 0308 	add.w	r3, r7, #8
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	f000 f857 	bl	8005f64 <prvGetNextExpireTime>
 8005eb6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	4619      	mov	r1, r3
 8005ebc:	68f8      	ldr	r0, [r7, #12]
 8005ebe:	f000 f803 	bl	8005ec8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005ec2:	f000 f8d5 	bl	8006070 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005ec6:	e7f1      	b.n	8005eac <prvTimerTask+0x8>

08005ec8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b084      	sub	sp, #16
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
 8005ed0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005ed2:	f7ff f855 	bl	8004f80 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005ed6:	f107 0308 	add.w	r3, r7, #8
 8005eda:	4618      	mov	r0, r3
 8005edc:	f000 f866 	bl	8005fac <prvSampleTimeNow>
 8005ee0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005ee2:	68bb      	ldr	r3, [r7, #8]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d130      	bne.n	8005f4a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d10a      	bne.n	8005f04 <prvProcessTimerOrBlockTask+0x3c>
 8005eee:	687a      	ldr	r2, [r7, #4]
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	429a      	cmp	r2, r3
 8005ef4:	d806      	bhi.n	8005f04 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005ef6:	f7ff f851 	bl	8004f9c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005efa:	68f9      	ldr	r1, [r7, #12]
 8005efc:	6878      	ldr	r0, [r7, #4]
 8005efe:	f7ff ff85 	bl	8005e0c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005f02:	e024      	b.n	8005f4e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d008      	beq.n	8005f1c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005f0a:	4b13      	ldr	r3, [pc, #76]	; (8005f58 <prvProcessTimerOrBlockTask+0x90>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d101      	bne.n	8005f18 <prvProcessTimerOrBlockTask+0x50>
 8005f14:	2301      	movs	r3, #1
 8005f16:	e000      	b.n	8005f1a <prvProcessTimerOrBlockTask+0x52>
 8005f18:	2300      	movs	r3, #0
 8005f1a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005f1c:	4b0f      	ldr	r3, [pc, #60]	; (8005f5c <prvProcessTimerOrBlockTask+0x94>)
 8005f1e:	6818      	ldr	r0, [r3, #0]
 8005f20:	687a      	ldr	r2, [r7, #4]
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	1ad3      	subs	r3, r2, r3
 8005f26:	683a      	ldr	r2, [r7, #0]
 8005f28:	4619      	mov	r1, r3
 8005f2a:	f7fe fdb9 	bl	8004aa0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005f2e:	f7ff f835 	bl	8004f9c <xTaskResumeAll>
 8005f32:	4603      	mov	r3, r0
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d10a      	bne.n	8005f4e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005f38:	4b09      	ldr	r3, [pc, #36]	; (8005f60 <prvProcessTimerOrBlockTask+0x98>)
 8005f3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f3e:	601a      	str	r2, [r3, #0]
 8005f40:	f3bf 8f4f 	dsb	sy
 8005f44:	f3bf 8f6f 	isb	sy
}
 8005f48:	e001      	b.n	8005f4e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005f4a:	f7ff f827 	bl	8004f9c <xTaskResumeAll>
}
 8005f4e:	bf00      	nop
 8005f50:	3710      	adds	r7, #16
 8005f52:	46bd      	mov	sp, r7
 8005f54:	bd80      	pop	{r7, pc}
 8005f56:	bf00      	nop
 8005f58:	20000ec8 	.word	0x20000ec8
 8005f5c:	20000ecc 	.word	0x20000ecc
 8005f60:	e000ed04 	.word	0xe000ed04

08005f64 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005f64:	b480      	push	{r7}
 8005f66:	b085      	sub	sp, #20
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005f6c:	4b0e      	ldr	r3, [pc, #56]	; (8005fa8 <prvGetNextExpireTime+0x44>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d101      	bne.n	8005f7a <prvGetNextExpireTime+0x16>
 8005f76:	2201      	movs	r2, #1
 8005f78:	e000      	b.n	8005f7c <prvGetNextExpireTime+0x18>
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d105      	bne.n	8005f94 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005f88:	4b07      	ldr	r3, [pc, #28]	; (8005fa8 <prvGetNextExpireTime+0x44>)
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	68db      	ldr	r3, [r3, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	60fb      	str	r3, [r7, #12]
 8005f92:	e001      	b.n	8005f98 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005f94:	2300      	movs	r3, #0
 8005f96:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005f98:	68fb      	ldr	r3, [r7, #12]
}
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	3714      	adds	r7, #20
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa4:	4770      	bx	lr
 8005fa6:	bf00      	nop
 8005fa8:	20000ec4 	.word	0x20000ec4

08005fac <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b084      	sub	sp, #16
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005fb4:	f7ff f890 	bl	80050d8 <xTaskGetTickCount>
 8005fb8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005fba:	4b0b      	ldr	r3, [pc, #44]	; (8005fe8 <prvSampleTimeNow+0x3c>)
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	68fa      	ldr	r2, [r7, #12]
 8005fc0:	429a      	cmp	r2, r3
 8005fc2:	d205      	bcs.n	8005fd0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005fc4:	f000 f936 	bl	8006234 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2201      	movs	r2, #1
 8005fcc:	601a      	str	r2, [r3, #0]
 8005fce:	e002      	b.n	8005fd6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005fd6:	4a04      	ldr	r2, [pc, #16]	; (8005fe8 <prvSampleTimeNow+0x3c>)
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
}
 8005fde:	4618      	mov	r0, r3
 8005fe0:	3710      	adds	r7, #16
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bd80      	pop	{r7, pc}
 8005fe6:	bf00      	nop
 8005fe8:	20000ed4 	.word	0x20000ed4

08005fec <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b086      	sub	sp, #24
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	60f8      	str	r0, [r7, #12]
 8005ff4:	60b9      	str	r1, [r7, #8]
 8005ff6:	607a      	str	r2, [r7, #4]
 8005ff8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	68ba      	ldr	r2, [r7, #8]
 8006002:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	68fa      	ldr	r2, [r7, #12]
 8006008:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800600a:	68ba      	ldr	r2, [r7, #8]
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	429a      	cmp	r2, r3
 8006010:	d812      	bhi.n	8006038 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006012:	687a      	ldr	r2, [r7, #4]
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	1ad2      	subs	r2, r2, r3
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	699b      	ldr	r3, [r3, #24]
 800601c:	429a      	cmp	r2, r3
 800601e:	d302      	bcc.n	8006026 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006020:	2301      	movs	r3, #1
 8006022:	617b      	str	r3, [r7, #20]
 8006024:	e01b      	b.n	800605e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006026:	4b10      	ldr	r3, [pc, #64]	; (8006068 <prvInsertTimerInActiveList+0x7c>)
 8006028:	681a      	ldr	r2, [r3, #0]
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	3304      	adds	r3, #4
 800602e:	4619      	mov	r1, r3
 8006030:	4610      	mov	r0, r2
 8006032:	f7fd ff24 	bl	8003e7e <vListInsert>
 8006036:	e012      	b.n	800605e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006038:	687a      	ldr	r2, [r7, #4]
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	429a      	cmp	r2, r3
 800603e:	d206      	bcs.n	800604e <prvInsertTimerInActiveList+0x62>
 8006040:	68ba      	ldr	r2, [r7, #8]
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	429a      	cmp	r2, r3
 8006046:	d302      	bcc.n	800604e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006048:	2301      	movs	r3, #1
 800604a:	617b      	str	r3, [r7, #20]
 800604c:	e007      	b.n	800605e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800604e:	4b07      	ldr	r3, [pc, #28]	; (800606c <prvInsertTimerInActiveList+0x80>)
 8006050:	681a      	ldr	r2, [r3, #0]
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	3304      	adds	r3, #4
 8006056:	4619      	mov	r1, r3
 8006058:	4610      	mov	r0, r2
 800605a:	f7fd ff10 	bl	8003e7e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800605e:	697b      	ldr	r3, [r7, #20]
}
 8006060:	4618      	mov	r0, r3
 8006062:	3718      	adds	r7, #24
 8006064:	46bd      	mov	sp, r7
 8006066:	bd80      	pop	{r7, pc}
 8006068:	20000ec8 	.word	0x20000ec8
 800606c:	20000ec4 	.word	0x20000ec4

08006070 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b08e      	sub	sp, #56	; 0x38
 8006074:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006076:	e0ca      	b.n	800620e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2b00      	cmp	r3, #0
 800607c:	da18      	bge.n	80060b0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800607e:	1d3b      	adds	r3, r7, #4
 8006080:	3304      	adds	r3, #4
 8006082:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006086:	2b00      	cmp	r3, #0
 8006088:	d10a      	bne.n	80060a0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800608a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800608e:	f383 8811 	msr	BASEPRI, r3
 8006092:	f3bf 8f6f 	isb	sy
 8006096:	f3bf 8f4f 	dsb	sy
 800609a:	61fb      	str	r3, [r7, #28]
}
 800609c:	bf00      	nop
 800609e:	e7fe      	b.n	800609e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80060a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80060a6:	6850      	ldr	r0, [r2, #4]
 80060a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80060aa:	6892      	ldr	r2, [r2, #8]
 80060ac:	4611      	mov	r1, r2
 80060ae:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	f2c0 80aa 	blt.w	800620c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80060bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060be:	695b      	ldr	r3, [r3, #20]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d004      	beq.n	80060ce <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80060c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060c6:	3304      	adds	r3, #4
 80060c8:	4618      	mov	r0, r3
 80060ca:	f7fd ff11 	bl	8003ef0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80060ce:	463b      	mov	r3, r7
 80060d0:	4618      	mov	r0, r3
 80060d2:	f7ff ff6b 	bl	8005fac <prvSampleTimeNow>
 80060d6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2b09      	cmp	r3, #9
 80060dc:	f200 8097 	bhi.w	800620e <prvProcessReceivedCommands+0x19e>
 80060e0:	a201      	add	r2, pc, #4	; (adr r2, 80060e8 <prvProcessReceivedCommands+0x78>)
 80060e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060e6:	bf00      	nop
 80060e8:	08006111 	.word	0x08006111
 80060ec:	08006111 	.word	0x08006111
 80060f0:	08006111 	.word	0x08006111
 80060f4:	08006185 	.word	0x08006185
 80060f8:	08006199 	.word	0x08006199
 80060fc:	080061e3 	.word	0x080061e3
 8006100:	08006111 	.word	0x08006111
 8006104:	08006111 	.word	0x08006111
 8006108:	08006185 	.word	0x08006185
 800610c:	08006199 	.word	0x08006199
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006112:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006116:	f043 0301 	orr.w	r3, r3, #1
 800611a:	b2da      	uxtb	r2, r3
 800611c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800611e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006122:	68ba      	ldr	r2, [r7, #8]
 8006124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006126:	699b      	ldr	r3, [r3, #24]
 8006128:	18d1      	adds	r1, r2, r3
 800612a:	68bb      	ldr	r3, [r7, #8]
 800612c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800612e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006130:	f7ff ff5c 	bl	8005fec <prvInsertTimerInActiveList>
 8006134:	4603      	mov	r3, r0
 8006136:	2b00      	cmp	r3, #0
 8006138:	d069      	beq.n	800620e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800613a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800613c:	6a1b      	ldr	r3, [r3, #32]
 800613e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006140:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006144:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006148:	f003 0304 	and.w	r3, r3, #4
 800614c:	2b00      	cmp	r3, #0
 800614e:	d05e      	beq.n	800620e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006150:	68ba      	ldr	r2, [r7, #8]
 8006152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006154:	699b      	ldr	r3, [r3, #24]
 8006156:	441a      	add	r2, r3
 8006158:	2300      	movs	r3, #0
 800615a:	9300      	str	r3, [sp, #0]
 800615c:	2300      	movs	r3, #0
 800615e:	2100      	movs	r1, #0
 8006160:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006162:	f7ff fe05 	bl	8005d70 <xTimerGenericCommand>
 8006166:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006168:	6a3b      	ldr	r3, [r7, #32]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d14f      	bne.n	800620e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800616e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006172:	f383 8811 	msr	BASEPRI, r3
 8006176:	f3bf 8f6f 	isb	sy
 800617a:	f3bf 8f4f 	dsb	sy
 800617e:	61bb      	str	r3, [r7, #24]
}
 8006180:	bf00      	nop
 8006182:	e7fe      	b.n	8006182 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006186:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800618a:	f023 0301 	bic.w	r3, r3, #1
 800618e:	b2da      	uxtb	r2, r3
 8006190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006192:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006196:	e03a      	b.n	800620e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800619a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800619e:	f043 0301 	orr.w	r3, r3, #1
 80061a2:	b2da      	uxtb	r2, r3
 80061a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80061aa:	68ba      	ldr	r2, [r7, #8]
 80061ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ae:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80061b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061b2:	699b      	ldr	r3, [r3, #24]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d10a      	bne.n	80061ce <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80061b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061bc:	f383 8811 	msr	BASEPRI, r3
 80061c0:	f3bf 8f6f 	isb	sy
 80061c4:	f3bf 8f4f 	dsb	sy
 80061c8:	617b      	str	r3, [r7, #20]
}
 80061ca:	bf00      	nop
 80061cc:	e7fe      	b.n	80061cc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80061ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061d0:	699a      	ldr	r2, [r3, #24]
 80061d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061d4:	18d1      	adds	r1, r2, r3
 80061d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80061dc:	f7ff ff06 	bl	8005fec <prvInsertTimerInActiveList>
					break;
 80061e0:	e015      	b.n	800620e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80061e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80061e8:	f003 0302 	and.w	r3, r3, #2
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d103      	bne.n	80061f8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80061f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80061f2:	f000 fbdd 	bl	80069b0 <vPortFree>
 80061f6:	e00a      	b.n	800620e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80061f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80061fe:	f023 0301 	bic.w	r3, r3, #1
 8006202:	b2da      	uxtb	r2, r3
 8006204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006206:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800620a:	e000      	b.n	800620e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800620c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800620e:	4b08      	ldr	r3, [pc, #32]	; (8006230 <prvProcessReceivedCommands+0x1c0>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	1d39      	adds	r1, r7, #4
 8006214:	2200      	movs	r2, #0
 8006216:	4618      	mov	r0, r3
 8006218:	f7fe f96c 	bl	80044f4 <xQueueReceive>
 800621c:	4603      	mov	r3, r0
 800621e:	2b00      	cmp	r3, #0
 8006220:	f47f af2a 	bne.w	8006078 <prvProcessReceivedCommands+0x8>
	}
}
 8006224:	bf00      	nop
 8006226:	bf00      	nop
 8006228:	3730      	adds	r7, #48	; 0x30
 800622a:	46bd      	mov	sp, r7
 800622c:	bd80      	pop	{r7, pc}
 800622e:	bf00      	nop
 8006230:	20000ecc 	.word	0x20000ecc

08006234 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b088      	sub	sp, #32
 8006238:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800623a:	e048      	b.n	80062ce <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800623c:	4b2d      	ldr	r3, [pc, #180]	; (80062f4 <prvSwitchTimerLists+0xc0>)
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	68db      	ldr	r3, [r3, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006246:	4b2b      	ldr	r3, [pc, #172]	; (80062f4 <prvSwitchTimerLists+0xc0>)
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	68db      	ldr	r3, [r3, #12]
 800624c:	68db      	ldr	r3, [r3, #12]
 800624e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	3304      	adds	r3, #4
 8006254:	4618      	mov	r0, r3
 8006256:	f7fd fe4b 	bl	8003ef0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	6a1b      	ldr	r3, [r3, #32]
 800625e:	68f8      	ldr	r0, [r7, #12]
 8006260:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006268:	f003 0304 	and.w	r3, r3, #4
 800626c:	2b00      	cmp	r3, #0
 800626e:	d02e      	beq.n	80062ce <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	699b      	ldr	r3, [r3, #24]
 8006274:	693a      	ldr	r2, [r7, #16]
 8006276:	4413      	add	r3, r2
 8006278:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800627a:	68ba      	ldr	r2, [r7, #8]
 800627c:	693b      	ldr	r3, [r7, #16]
 800627e:	429a      	cmp	r2, r3
 8006280:	d90e      	bls.n	80062a0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	68ba      	ldr	r2, [r7, #8]
 8006286:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	68fa      	ldr	r2, [r7, #12]
 800628c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800628e:	4b19      	ldr	r3, [pc, #100]	; (80062f4 <prvSwitchTimerLists+0xc0>)
 8006290:	681a      	ldr	r2, [r3, #0]
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	3304      	adds	r3, #4
 8006296:	4619      	mov	r1, r3
 8006298:	4610      	mov	r0, r2
 800629a:	f7fd fdf0 	bl	8003e7e <vListInsert>
 800629e:	e016      	b.n	80062ce <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80062a0:	2300      	movs	r3, #0
 80062a2:	9300      	str	r3, [sp, #0]
 80062a4:	2300      	movs	r3, #0
 80062a6:	693a      	ldr	r2, [r7, #16]
 80062a8:	2100      	movs	r1, #0
 80062aa:	68f8      	ldr	r0, [r7, #12]
 80062ac:	f7ff fd60 	bl	8005d70 <xTimerGenericCommand>
 80062b0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d10a      	bne.n	80062ce <prvSwitchTimerLists+0x9a>
	__asm volatile
 80062b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062bc:	f383 8811 	msr	BASEPRI, r3
 80062c0:	f3bf 8f6f 	isb	sy
 80062c4:	f3bf 8f4f 	dsb	sy
 80062c8:	603b      	str	r3, [r7, #0]
}
 80062ca:	bf00      	nop
 80062cc:	e7fe      	b.n	80062cc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80062ce:	4b09      	ldr	r3, [pc, #36]	; (80062f4 <prvSwitchTimerLists+0xc0>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d1b1      	bne.n	800623c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80062d8:	4b06      	ldr	r3, [pc, #24]	; (80062f4 <prvSwitchTimerLists+0xc0>)
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80062de:	4b06      	ldr	r3, [pc, #24]	; (80062f8 <prvSwitchTimerLists+0xc4>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	4a04      	ldr	r2, [pc, #16]	; (80062f4 <prvSwitchTimerLists+0xc0>)
 80062e4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80062e6:	4a04      	ldr	r2, [pc, #16]	; (80062f8 <prvSwitchTimerLists+0xc4>)
 80062e8:	697b      	ldr	r3, [r7, #20]
 80062ea:	6013      	str	r3, [r2, #0]
}
 80062ec:	bf00      	nop
 80062ee:	3718      	adds	r7, #24
 80062f0:	46bd      	mov	sp, r7
 80062f2:	bd80      	pop	{r7, pc}
 80062f4:	20000ec4 	.word	0x20000ec4
 80062f8:	20000ec8 	.word	0x20000ec8

080062fc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b082      	sub	sp, #8
 8006300:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006302:	f000 f967 	bl	80065d4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006306:	4b15      	ldr	r3, [pc, #84]	; (800635c <prvCheckForValidListAndQueue+0x60>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d120      	bne.n	8006350 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800630e:	4814      	ldr	r0, [pc, #80]	; (8006360 <prvCheckForValidListAndQueue+0x64>)
 8006310:	f7fd fd64 	bl	8003ddc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006314:	4813      	ldr	r0, [pc, #76]	; (8006364 <prvCheckForValidListAndQueue+0x68>)
 8006316:	f7fd fd61 	bl	8003ddc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800631a:	4b13      	ldr	r3, [pc, #76]	; (8006368 <prvCheckForValidListAndQueue+0x6c>)
 800631c:	4a10      	ldr	r2, [pc, #64]	; (8006360 <prvCheckForValidListAndQueue+0x64>)
 800631e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006320:	4b12      	ldr	r3, [pc, #72]	; (800636c <prvCheckForValidListAndQueue+0x70>)
 8006322:	4a10      	ldr	r2, [pc, #64]	; (8006364 <prvCheckForValidListAndQueue+0x68>)
 8006324:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006326:	2300      	movs	r3, #0
 8006328:	9300      	str	r3, [sp, #0]
 800632a:	4b11      	ldr	r3, [pc, #68]	; (8006370 <prvCheckForValidListAndQueue+0x74>)
 800632c:	4a11      	ldr	r2, [pc, #68]	; (8006374 <prvCheckForValidListAndQueue+0x78>)
 800632e:	2110      	movs	r1, #16
 8006330:	200a      	movs	r0, #10
 8006332:	f7fd fe6f 	bl	8004014 <xQueueGenericCreateStatic>
 8006336:	4603      	mov	r3, r0
 8006338:	4a08      	ldr	r2, [pc, #32]	; (800635c <prvCheckForValidListAndQueue+0x60>)
 800633a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800633c:	4b07      	ldr	r3, [pc, #28]	; (800635c <prvCheckForValidListAndQueue+0x60>)
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d005      	beq.n	8006350 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006344:	4b05      	ldr	r3, [pc, #20]	; (800635c <prvCheckForValidListAndQueue+0x60>)
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	490b      	ldr	r1, [pc, #44]	; (8006378 <prvCheckForValidListAndQueue+0x7c>)
 800634a:	4618      	mov	r0, r3
 800634c:	f7fe fb7e 	bl	8004a4c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006350:	f000 f970 	bl	8006634 <vPortExitCritical>
}
 8006354:	bf00      	nop
 8006356:	46bd      	mov	sp, r7
 8006358:	bd80      	pop	{r7, pc}
 800635a:	bf00      	nop
 800635c:	20000ecc 	.word	0x20000ecc
 8006360:	20000e9c 	.word	0x20000e9c
 8006364:	20000eb0 	.word	0x20000eb0
 8006368:	20000ec4 	.word	0x20000ec4
 800636c:	20000ec8 	.word	0x20000ec8
 8006370:	20000f78 	.word	0x20000f78
 8006374:	20000ed8 	.word	0x20000ed8
 8006378:	08007d4c 	.word	0x08007d4c

0800637c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800637c:	b480      	push	{r7}
 800637e:	b085      	sub	sp, #20
 8006380:	af00      	add	r7, sp, #0
 8006382:	60f8      	str	r0, [r7, #12]
 8006384:	60b9      	str	r1, [r7, #8]
 8006386:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	3b04      	subs	r3, #4
 800638c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006394:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	3b04      	subs	r3, #4
 800639a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800639c:	68bb      	ldr	r3, [r7, #8]
 800639e:	f023 0201 	bic.w	r2, r3, #1
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	3b04      	subs	r3, #4
 80063aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80063ac:	4a0c      	ldr	r2, [pc, #48]	; (80063e0 <pxPortInitialiseStack+0x64>)
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	3b14      	subs	r3, #20
 80063b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80063b8:	687a      	ldr	r2, [r7, #4]
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	3b04      	subs	r3, #4
 80063c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	f06f 0202 	mvn.w	r2, #2
 80063ca:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	3b20      	subs	r3, #32
 80063d0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80063d2:	68fb      	ldr	r3, [r7, #12]
}
 80063d4:	4618      	mov	r0, r3
 80063d6:	3714      	adds	r7, #20
 80063d8:	46bd      	mov	sp, r7
 80063da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063de:	4770      	bx	lr
 80063e0:	080063e5 	.word	0x080063e5

080063e4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80063e4:	b480      	push	{r7}
 80063e6:	b085      	sub	sp, #20
 80063e8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80063ea:	2300      	movs	r3, #0
 80063ec:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80063ee:	4b12      	ldr	r3, [pc, #72]	; (8006438 <prvTaskExitError+0x54>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80063f6:	d00a      	beq.n	800640e <prvTaskExitError+0x2a>
	__asm volatile
 80063f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063fc:	f383 8811 	msr	BASEPRI, r3
 8006400:	f3bf 8f6f 	isb	sy
 8006404:	f3bf 8f4f 	dsb	sy
 8006408:	60fb      	str	r3, [r7, #12]
}
 800640a:	bf00      	nop
 800640c:	e7fe      	b.n	800640c <prvTaskExitError+0x28>
	__asm volatile
 800640e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006412:	f383 8811 	msr	BASEPRI, r3
 8006416:	f3bf 8f6f 	isb	sy
 800641a:	f3bf 8f4f 	dsb	sy
 800641e:	60bb      	str	r3, [r7, #8]
}
 8006420:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006422:	bf00      	nop
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d0fc      	beq.n	8006424 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800642a:	bf00      	nop
 800642c:	bf00      	nop
 800642e:	3714      	adds	r7, #20
 8006430:	46bd      	mov	sp, r7
 8006432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006436:	4770      	bx	lr
 8006438:	200000c8 	.word	0x200000c8
 800643c:	00000000 	.word	0x00000000

08006440 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006440:	4b07      	ldr	r3, [pc, #28]	; (8006460 <pxCurrentTCBConst2>)
 8006442:	6819      	ldr	r1, [r3, #0]
 8006444:	6808      	ldr	r0, [r1, #0]
 8006446:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800644a:	f380 8809 	msr	PSP, r0
 800644e:	f3bf 8f6f 	isb	sy
 8006452:	f04f 0000 	mov.w	r0, #0
 8006456:	f380 8811 	msr	BASEPRI, r0
 800645a:	4770      	bx	lr
 800645c:	f3af 8000 	nop.w

08006460 <pxCurrentTCBConst2>:
 8006460:	2000099c 	.word	0x2000099c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006464:	bf00      	nop
 8006466:	bf00      	nop

08006468 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006468:	4808      	ldr	r0, [pc, #32]	; (800648c <prvPortStartFirstTask+0x24>)
 800646a:	6800      	ldr	r0, [r0, #0]
 800646c:	6800      	ldr	r0, [r0, #0]
 800646e:	f380 8808 	msr	MSP, r0
 8006472:	f04f 0000 	mov.w	r0, #0
 8006476:	f380 8814 	msr	CONTROL, r0
 800647a:	b662      	cpsie	i
 800647c:	b661      	cpsie	f
 800647e:	f3bf 8f4f 	dsb	sy
 8006482:	f3bf 8f6f 	isb	sy
 8006486:	df00      	svc	0
 8006488:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800648a:	bf00      	nop
 800648c:	e000ed08 	.word	0xe000ed08

08006490 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b086      	sub	sp, #24
 8006494:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006496:	4b46      	ldr	r3, [pc, #280]	; (80065b0 <xPortStartScheduler+0x120>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4a46      	ldr	r2, [pc, #280]	; (80065b4 <xPortStartScheduler+0x124>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d10a      	bne.n	80064b6 <xPortStartScheduler+0x26>
	__asm volatile
 80064a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064a4:	f383 8811 	msr	BASEPRI, r3
 80064a8:	f3bf 8f6f 	isb	sy
 80064ac:	f3bf 8f4f 	dsb	sy
 80064b0:	613b      	str	r3, [r7, #16]
}
 80064b2:	bf00      	nop
 80064b4:	e7fe      	b.n	80064b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80064b6:	4b3e      	ldr	r3, [pc, #248]	; (80065b0 <xPortStartScheduler+0x120>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	4a3f      	ldr	r2, [pc, #252]	; (80065b8 <xPortStartScheduler+0x128>)
 80064bc:	4293      	cmp	r3, r2
 80064be:	d10a      	bne.n	80064d6 <xPortStartScheduler+0x46>
	__asm volatile
 80064c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064c4:	f383 8811 	msr	BASEPRI, r3
 80064c8:	f3bf 8f6f 	isb	sy
 80064cc:	f3bf 8f4f 	dsb	sy
 80064d0:	60fb      	str	r3, [r7, #12]
}
 80064d2:	bf00      	nop
 80064d4:	e7fe      	b.n	80064d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80064d6:	4b39      	ldr	r3, [pc, #228]	; (80065bc <xPortStartScheduler+0x12c>)
 80064d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80064da:	697b      	ldr	r3, [r7, #20]
 80064dc:	781b      	ldrb	r3, [r3, #0]
 80064de:	b2db      	uxtb	r3, r3
 80064e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80064e2:	697b      	ldr	r3, [r7, #20]
 80064e4:	22ff      	movs	r2, #255	; 0xff
 80064e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80064e8:	697b      	ldr	r3, [r7, #20]
 80064ea:	781b      	ldrb	r3, [r3, #0]
 80064ec:	b2db      	uxtb	r3, r3
 80064ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80064f0:	78fb      	ldrb	r3, [r7, #3]
 80064f2:	b2db      	uxtb	r3, r3
 80064f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80064f8:	b2da      	uxtb	r2, r3
 80064fa:	4b31      	ldr	r3, [pc, #196]	; (80065c0 <xPortStartScheduler+0x130>)
 80064fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80064fe:	4b31      	ldr	r3, [pc, #196]	; (80065c4 <xPortStartScheduler+0x134>)
 8006500:	2207      	movs	r2, #7
 8006502:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006504:	e009      	b.n	800651a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006506:	4b2f      	ldr	r3, [pc, #188]	; (80065c4 <xPortStartScheduler+0x134>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	3b01      	subs	r3, #1
 800650c:	4a2d      	ldr	r2, [pc, #180]	; (80065c4 <xPortStartScheduler+0x134>)
 800650e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006510:	78fb      	ldrb	r3, [r7, #3]
 8006512:	b2db      	uxtb	r3, r3
 8006514:	005b      	lsls	r3, r3, #1
 8006516:	b2db      	uxtb	r3, r3
 8006518:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800651a:	78fb      	ldrb	r3, [r7, #3]
 800651c:	b2db      	uxtb	r3, r3
 800651e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006522:	2b80      	cmp	r3, #128	; 0x80
 8006524:	d0ef      	beq.n	8006506 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006526:	4b27      	ldr	r3, [pc, #156]	; (80065c4 <xPortStartScheduler+0x134>)
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f1c3 0307 	rsb	r3, r3, #7
 800652e:	2b04      	cmp	r3, #4
 8006530:	d00a      	beq.n	8006548 <xPortStartScheduler+0xb8>
	__asm volatile
 8006532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006536:	f383 8811 	msr	BASEPRI, r3
 800653a:	f3bf 8f6f 	isb	sy
 800653e:	f3bf 8f4f 	dsb	sy
 8006542:	60bb      	str	r3, [r7, #8]
}
 8006544:	bf00      	nop
 8006546:	e7fe      	b.n	8006546 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006548:	4b1e      	ldr	r3, [pc, #120]	; (80065c4 <xPortStartScheduler+0x134>)
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	021b      	lsls	r3, r3, #8
 800654e:	4a1d      	ldr	r2, [pc, #116]	; (80065c4 <xPortStartScheduler+0x134>)
 8006550:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006552:	4b1c      	ldr	r3, [pc, #112]	; (80065c4 <xPortStartScheduler+0x134>)
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800655a:	4a1a      	ldr	r2, [pc, #104]	; (80065c4 <xPortStartScheduler+0x134>)
 800655c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	b2da      	uxtb	r2, r3
 8006562:	697b      	ldr	r3, [r7, #20]
 8006564:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006566:	4b18      	ldr	r3, [pc, #96]	; (80065c8 <xPortStartScheduler+0x138>)
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	4a17      	ldr	r2, [pc, #92]	; (80065c8 <xPortStartScheduler+0x138>)
 800656c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006570:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006572:	4b15      	ldr	r3, [pc, #84]	; (80065c8 <xPortStartScheduler+0x138>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	4a14      	ldr	r2, [pc, #80]	; (80065c8 <xPortStartScheduler+0x138>)
 8006578:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800657c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800657e:	f000 f8dd 	bl	800673c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006582:	4b12      	ldr	r3, [pc, #72]	; (80065cc <xPortStartScheduler+0x13c>)
 8006584:	2200      	movs	r2, #0
 8006586:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006588:	f000 f8fc 	bl	8006784 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800658c:	4b10      	ldr	r3, [pc, #64]	; (80065d0 <xPortStartScheduler+0x140>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4a0f      	ldr	r2, [pc, #60]	; (80065d0 <xPortStartScheduler+0x140>)
 8006592:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006596:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006598:	f7ff ff66 	bl	8006468 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800659c:	f7fe fe66 	bl	800526c <vTaskSwitchContext>
	prvTaskExitError();
 80065a0:	f7ff ff20 	bl	80063e4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80065a4:	2300      	movs	r3, #0
}
 80065a6:	4618      	mov	r0, r3
 80065a8:	3718      	adds	r7, #24
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bd80      	pop	{r7, pc}
 80065ae:	bf00      	nop
 80065b0:	e000ed00 	.word	0xe000ed00
 80065b4:	410fc271 	.word	0x410fc271
 80065b8:	410fc270 	.word	0x410fc270
 80065bc:	e000e400 	.word	0xe000e400
 80065c0:	20000fc8 	.word	0x20000fc8
 80065c4:	20000fcc 	.word	0x20000fcc
 80065c8:	e000ed20 	.word	0xe000ed20
 80065cc:	200000c8 	.word	0x200000c8
 80065d0:	e000ef34 	.word	0xe000ef34

080065d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80065d4:	b480      	push	{r7}
 80065d6:	b083      	sub	sp, #12
 80065d8:	af00      	add	r7, sp, #0
	__asm volatile
 80065da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065de:	f383 8811 	msr	BASEPRI, r3
 80065e2:	f3bf 8f6f 	isb	sy
 80065e6:	f3bf 8f4f 	dsb	sy
 80065ea:	607b      	str	r3, [r7, #4]
}
 80065ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80065ee:	4b0f      	ldr	r3, [pc, #60]	; (800662c <vPortEnterCritical+0x58>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	3301      	adds	r3, #1
 80065f4:	4a0d      	ldr	r2, [pc, #52]	; (800662c <vPortEnterCritical+0x58>)
 80065f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80065f8:	4b0c      	ldr	r3, [pc, #48]	; (800662c <vPortEnterCritical+0x58>)
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	2b01      	cmp	r3, #1
 80065fe:	d10f      	bne.n	8006620 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006600:	4b0b      	ldr	r3, [pc, #44]	; (8006630 <vPortEnterCritical+0x5c>)
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	b2db      	uxtb	r3, r3
 8006606:	2b00      	cmp	r3, #0
 8006608:	d00a      	beq.n	8006620 <vPortEnterCritical+0x4c>
	__asm volatile
 800660a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800660e:	f383 8811 	msr	BASEPRI, r3
 8006612:	f3bf 8f6f 	isb	sy
 8006616:	f3bf 8f4f 	dsb	sy
 800661a:	603b      	str	r3, [r7, #0]
}
 800661c:	bf00      	nop
 800661e:	e7fe      	b.n	800661e <vPortEnterCritical+0x4a>
	}
}
 8006620:	bf00      	nop
 8006622:	370c      	adds	r7, #12
 8006624:	46bd      	mov	sp, r7
 8006626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662a:	4770      	bx	lr
 800662c:	200000c8 	.word	0x200000c8
 8006630:	e000ed04 	.word	0xe000ed04

08006634 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006634:	b480      	push	{r7}
 8006636:	b083      	sub	sp, #12
 8006638:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800663a:	4b12      	ldr	r3, [pc, #72]	; (8006684 <vPortExitCritical+0x50>)
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d10a      	bne.n	8006658 <vPortExitCritical+0x24>
	__asm volatile
 8006642:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006646:	f383 8811 	msr	BASEPRI, r3
 800664a:	f3bf 8f6f 	isb	sy
 800664e:	f3bf 8f4f 	dsb	sy
 8006652:	607b      	str	r3, [r7, #4]
}
 8006654:	bf00      	nop
 8006656:	e7fe      	b.n	8006656 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006658:	4b0a      	ldr	r3, [pc, #40]	; (8006684 <vPortExitCritical+0x50>)
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	3b01      	subs	r3, #1
 800665e:	4a09      	ldr	r2, [pc, #36]	; (8006684 <vPortExitCritical+0x50>)
 8006660:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006662:	4b08      	ldr	r3, [pc, #32]	; (8006684 <vPortExitCritical+0x50>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d105      	bne.n	8006676 <vPortExitCritical+0x42>
 800666a:	2300      	movs	r3, #0
 800666c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	f383 8811 	msr	BASEPRI, r3
}
 8006674:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006676:	bf00      	nop
 8006678:	370c      	adds	r7, #12
 800667a:	46bd      	mov	sp, r7
 800667c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006680:	4770      	bx	lr
 8006682:	bf00      	nop
 8006684:	200000c8 	.word	0x200000c8
	...

08006690 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006690:	f3ef 8009 	mrs	r0, PSP
 8006694:	f3bf 8f6f 	isb	sy
 8006698:	4b15      	ldr	r3, [pc, #84]	; (80066f0 <pxCurrentTCBConst>)
 800669a:	681a      	ldr	r2, [r3, #0]
 800669c:	f01e 0f10 	tst.w	lr, #16
 80066a0:	bf08      	it	eq
 80066a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80066a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066aa:	6010      	str	r0, [r2, #0]
 80066ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80066b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80066b4:	f380 8811 	msr	BASEPRI, r0
 80066b8:	f3bf 8f4f 	dsb	sy
 80066bc:	f3bf 8f6f 	isb	sy
 80066c0:	f7fe fdd4 	bl	800526c <vTaskSwitchContext>
 80066c4:	f04f 0000 	mov.w	r0, #0
 80066c8:	f380 8811 	msr	BASEPRI, r0
 80066cc:	bc09      	pop	{r0, r3}
 80066ce:	6819      	ldr	r1, [r3, #0]
 80066d0:	6808      	ldr	r0, [r1, #0]
 80066d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066d6:	f01e 0f10 	tst.w	lr, #16
 80066da:	bf08      	it	eq
 80066dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80066e0:	f380 8809 	msr	PSP, r0
 80066e4:	f3bf 8f6f 	isb	sy
 80066e8:	4770      	bx	lr
 80066ea:	bf00      	nop
 80066ec:	f3af 8000 	nop.w

080066f0 <pxCurrentTCBConst>:
 80066f0:	2000099c 	.word	0x2000099c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80066f4:	bf00      	nop
 80066f6:	bf00      	nop

080066f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b082      	sub	sp, #8
 80066fc:	af00      	add	r7, sp, #0
	__asm volatile
 80066fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006702:	f383 8811 	msr	BASEPRI, r3
 8006706:	f3bf 8f6f 	isb	sy
 800670a:	f3bf 8f4f 	dsb	sy
 800670e:	607b      	str	r3, [r7, #4]
}
 8006710:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006712:	f7fe fcf1 	bl	80050f8 <xTaskIncrementTick>
 8006716:	4603      	mov	r3, r0
 8006718:	2b00      	cmp	r3, #0
 800671a:	d003      	beq.n	8006724 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800671c:	4b06      	ldr	r3, [pc, #24]	; (8006738 <xPortSysTickHandler+0x40>)
 800671e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006722:	601a      	str	r2, [r3, #0]
 8006724:	2300      	movs	r3, #0
 8006726:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	f383 8811 	msr	BASEPRI, r3
}
 800672e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006730:	bf00      	nop
 8006732:	3708      	adds	r7, #8
 8006734:	46bd      	mov	sp, r7
 8006736:	bd80      	pop	{r7, pc}
 8006738:	e000ed04 	.word	0xe000ed04

0800673c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800673c:	b480      	push	{r7}
 800673e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006740:	4b0b      	ldr	r3, [pc, #44]	; (8006770 <vPortSetupTimerInterrupt+0x34>)
 8006742:	2200      	movs	r2, #0
 8006744:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006746:	4b0b      	ldr	r3, [pc, #44]	; (8006774 <vPortSetupTimerInterrupt+0x38>)
 8006748:	2200      	movs	r2, #0
 800674a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800674c:	4b0a      	ldr	r3, [pc, #40]	; (8006778 <vPortSetupTimerInterrupt+0x3c>)
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	4a0a      	ldr	r2, [pc, #40]	; (800677c <vPortSetupTimerInterrupt+0x40>)
 8006752:	fba2 2303 	umull	r2, r3, r2, r3
 8006756:	099b      	lsrs	r3, r3, #6
 8006758:	4a09      	ldr	r2, [pc, #36]	; (8006780 <vPortSetupTimerInterrupt+0x44>)
 800675a:	3b01      	subs	r3, #1
 800675c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800675e:	4b04      	ldr	r3, [pc, #16]	; (8006770 <vPortSetupTimerInterrupt+0x34>)
 8006760:	2207      	movs	r2, #7
 8006762:	601a      	str	r2, [r3, #0]
}
 8006764:	bf00      	nop
 8006766:	46bd      	mov	sp, r7
 8006768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676c:	4770      	bx	lr
 800676e:	bf00      	nop
 8006770:	e000e010 	.word	0xe000e010
 8006774:	e000e018 	.word	0xe000e018
 8006778:	200000bc 	.word	0x200000bc
 800677c:	10624dd3 	.word	0x10624dd3
 8006780:	e000e014 	.word	0xe000e014

08006784 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006784:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006794 <vPortEnableVFP+0x10>
 8006788:	6801      	ldr	r1, [r0, #0]
 800678a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800678e:	6001      	str	r1, [r0, #0]
 8006790:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006792:	bf00      	nop
 8006794:	e000ed88 	.word	0xe000ed88

08006798 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006798:	b480      	push	{r7}
 800679a:	b085      	sub	sp, #20
 800679c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800679e:	f3ef 8305 	mrs	r3, IPSR
 80067a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	2b0f      	cmp	r3, #15
 80067a8:	d914      	bls.n	80067d4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80067aa:	4a17      	ldr	r2, [pc, #92]	; (8006808 <vPortValidateInterruptPriority+0x70>)
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	4413      	add	r3, r2
 80067b0:	781b      	ldrb	r3, [r3, #0]
 80067b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80067b4:	4b15      	ldr	r3, [pc, #84]	; (800680c <vPortValidateInterruptPriority+0x74>)
 80067b6:	781b      	ldrb	r3, [r3, #0]
 80067b8:	7afa      	ldrb	r2, [r7, #11]
 80067ba:	429a      	cmp	r2, r3
 80067bc:	d20a      	bcs.n	80067d4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80067be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067c2:	f383 8811 	msr	BASEPRI, r3
 80067c6:	f3bf 8f6f 	isb	sy
 80067ca:	f3bf 8f4f 	dsb	sy
 80067ce:	607b      	str	r3, [r7, #4]
}
 80067d0:	bf00      	nop
 80067d2:	e7fe      	b.n	80067d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80067d4:	4b0e      	ldr	r3, [pc, #56]	; (8006810 <vPortValidateInterruptPriority+0x78>)
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80067dc:	4b0d      	ldr	r3, [pc, #52]	; (8006814 <vPortValidateInterruptPriority+0x7c>)
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	429a      	cmp	r2, r3
 80067e2:	d90a      	bls.n	80067fa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80067e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067e8:	f383 8811 	msr	BASEPRI, r3
 80067ec:	f3bf 8f6f 	isb	sy
 80067f0:	f3bf 8f4f 	dsb	sy
 80067f4:	603b      	str	r3, [r7, #0]
}
 80067f6:	bf00      	nop
 80067f8:	e7fe      	b.n	80067f8 <vPortValidateInterruptPriority+0x60>
	}
 80067fa:	bf00      	nop
 80067fc:	3714      	adds	r7, #20
 80067fe:	46bd      	mov	sp, r7
 8006800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006804:	4770      	bx	lr
 8006806:	bf00      	nop
 8006808:	e000e3f0 	.word	0xe000e3f0
 800680c:	20000fc8 	.word	0x20000fc8
 8006810:	e000ed0c 	.word	0xe000ed0c
 8006814:	20000fcc 	.word	0x20000fcc

08006818 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b08a      	sub	sp, #40	; 0x28
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006820:	2300      	movs	r3, #0
 8006822:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006824:	f7fe fbac 	bl	8004f80 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006828:	4b5b      	ldr	r3, [pc, #364]	; (8006998 <pvPortMalloc+0x180>)
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d101      	bne.n	8006834 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006830:	f000 f920 	bl	8006a74 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006834:	4b59      	ldr	r3, [pc, #356]	; (800699c <pvPortMalloc+0x184>)
 8006836:	681a      	ldr	r2, [r3, #0]
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	4013      	ands	r3, r2
 800683c:	2b00      	cmp	r3, #0
 800683e:	f040 8093 	bne.w	8006968 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d01d      	beq.n	8006884 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006848:	2208      	movs	r2, #8
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	4413      	add	r3, r2
 800684e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	f003 0307 	and.w	r3, r3, #7
 8006856:	2b00      	cmp	r3, #0
 8006858:	d014      	beq.n	8006884 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	f023 0307 	bic.w	r3, r3, #7
 8006860:	3308      	adds	r3, #8
 8006862:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	f003 0307 	and.w	r3, r3, #7
 800686a:	2b00      	cmp	r3, #0
 800686c:	d00a      	beq.n	8006884 <pvPortMalloc+0x6c>
	__asm volatile
 800686e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006872:	f383 8811 	msr	BASEPRI, r3
 8006876:	f3bf 8f6f 	isb	sy
 800687a:	f3bf 8f4f 	dsb	sy
 800687e:	617b      	str	r3, [r7, #20]
}
 8006880:	bf00      	nop
 8006882:	e7fe      	b.n	8006882 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d06e      	beq.n	8006968 <pvPortMalloc+0x150>
 800688a:	4b45      	ldr	r3, [pc, #276]	; (80069a0 <pvPortMalloc+0x188>)
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	687a      	ldr	r2, [r7, #4]
 8006890:	429a      	cmp	r2, r3
 8006892:	d869      	bhi.n	8006968 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006894:	4b43      	ldr	r3, [pc, #268]	; (80069a4 <pvPortMalloc+0x18c>)
 8006896:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006898:	4b42      	ldr	r3, [pc, #264]	; (80069a4 <pvPortMalloc+0x18c>)
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800689e:	e004      	b.n	80068aa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80068a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80068a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80068aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ac:	685b      	ldr	r3, [r3, #4]
 80068ae:	687a      	ldr	r2, [r7, #4]
 80068b0:	429a      	cmp	r2, r3
 80068b2:	d903      	bls.n	80068bc <pvPortMalloc+0xa4>
 80068b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d1f1      	bne.n	80068a0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80068bc:	4b36      	ldr	r3, [pc, #216]	; (8006998 <pvPortMalloc+0x180>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068c2:	429a      	cmp	r2, r3
 80068c4:	d050      	beq.n	8006968 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80068c6:	6a3b      	ldr	r3, [r7, #32]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	2208      	movs	r2, #8
 80068cc:	4413      	add	r3, r2
 80068ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80068d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068d2:	681a      	ldr	r2, [r3, #0]
 80068d4:	6a3b      	ldr	r3, [r7, #32]
 80068d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80068d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068da:	685a      	ldr	r2, [r3, #4]
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	1ad2      	subs	r2, r2, r3
 80068e0:	2308      	movs	r3, #8
 80068e2:	005b      	lsls	r3, r3, #1
 80068e4:	429a      	cmp	r2, r3
 80068e6:	d91f      	bls.n	8006928 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80068e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	4413      	add	r3, r2
 80068ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80068f0:	69bb      	ldr	r3, [r7, #24]
 80068f2:	f003 0307 	and.w	r3, r3, #7
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d00a      	beq.n	8006910 <pvPortMalloc+0xf8>
	__asm volatile
 80068fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068fe:	f383 8811 	msr	BASEPRI, r3
 8006902:	f3bf 8f6f 	isb	sy
 8006906:	f3bf 8f4f 	dsb	sy
 800690a:	613b      	str	r3, [r7, #16]
}
 800690c:	bf00      	nop
 800690e:	e7fe      	b.n	800690e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006912:	685a      	ldr	r2, [r3, #4]
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	1ad2      	subs	r2, r2, r3
 8006918:	69bb      	ldr	r3, [r7, #24]
 800691a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800691c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800691e:	687a      	ldr	r2, [r7, #4]
 8006920:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006922:	69b8      	ldr	r0, [r7, #24]
 8006924:	f000 f908 	bl	8006b38 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006928:	4b1d      	ldr	r3, [pc, #116]	; (80069a0 <pvPortMalloc+0x188>)
 800692a:	681a      	ldr	r2, [r3, #0]
 800692c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800692e:	685b      	ldr	r3, [r3, #4]
 8006930:	1ad3      	subs	r3, r2, r3
 8006932:	4a1b      	ldr	r2, [pc, #108]	; (80069a0 <pvPortMalloc+0x188>)
 8006934:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006936:	4b1a      	ldr	r3, [pc, #104]	; (80069a0 <pvPortMalloc+0x188>)
 8006938:	681a      	ldr	r2, [r3, #0]
 800693a:	4b1b      	ldr	r3, [pc, #108]	; (80069a8 <pvPortMalloc+0x190>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	429a      	cmp	r2, r3
 8006940:	d203      	bcs.n	800694a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006942:	4b17      	ldr	r3, [pc, #92]	; (80069a0 <pvPortMalloc+0x188>)
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	4a18      	ldr	r2, [pc, #96]	; (80069a8 <pvPortMalloc+0x190>)
 8006948:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800694a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800694c:	685a      	ldr	r2, [r3, #4]
 800694e:	4b13      	ldr	r3, [pc, #76]	; (800699c <pvPortMalloc+0x184>)
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	431a      	orrs	r2, r3
 8006954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006956:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800695a:	2200      	movs	r2, #0
 800695c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800695e:	4b13      	ldr	r3, [pc, #76]	; (80069ac <pvPortMalloc+0x194>)
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	3301      	adds	r3, #1
 8006964:	4a11      	ldr	r2, [pc, #68]	; (80069ac <pvPortMalloc+0x194>)
 8006966:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006968:	f7fe fb18 	bl	8004f9c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800696c:	69fb      	ldr	r3, [r7, #28]
 800696e:	f003 0307 	and.w	r3, r3, #7
 8006972:	2b00      	cmp	r3, #0
 8006974:	d00a      	beq.n	800698c <pvPortMalloc+0x174>
	__asm volatile
 8006976:	f04f 0350 	mov.w	r3, #80	; 0x50
 800697a:	f383 8811 	msr	BASEPRI, r3
 800697e:	f3bf 8f6f 	isb	sy
 8006982:	f3bf 8f4f 	dsb	sy
 8006986:	60fb      	str	r3, [r7, #12]
}
 8006988:	bf00      	nop
 800698a:	e7fe      	b.n	800698a <pvPortMalloc+0x172>
	return pvReturn;
 800698c:	69fb      	ldr	r3, [r7, #28]
}
 800698e:	4618      	mov	r0, r3
 8006990:	3728      	adds	r7, #40	; 0x28
 8006992:	46bd      	mov	sp, r7
 8006994:	bd80      	pop	{r7, pc}
 8006996:	bf00      	nop
 8006998:	20004bd8 	.word	0x20004bd8
 800699c:	20004bec 	.word	0x20004bec
 80069a0:	20004bdc 	.word	0x20004bdc
 80069a4:	20004bd0 	.word	0x20004bd0
 80069a8:	20004be0 	.word	0x20004be0
 80069ac:	20004be4 	.word	0x20004be4

080069b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b086      	sub	sp, #24
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d04d      	beq.n	8006a5e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80069c2:	2308      	movs	r3, #8
 80069c4:	425b      	negs	r3, r3
 80069c6:	697a      	ldr	r2, [r7, #20]
 80069c8:	4413      	add	r3, r2
 80069ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80069cc:	697b      	ldr	r3, [r7, #20]
 80069ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80069d0:	693b      	ldr	r3, [r7, #16]
 80069d2:	685a      	ldr	r2, [r3, #4]
 80069d4:	4b24      	ldr	r3, [pc, #144]	; (8006a68 <vPortFree+0xb8>)
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	4013      	ands	r3, r2
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d10a      	bne.n	80069f4 <vPortFree+0x44>
	__asm volatile
 80069de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069e2:	f383 8811 	msr	BASEPRI, r3
 80069e6:	f3bf 8f6f 	isb	sy
 80069ea:	f3bf 8f4f 	dsb	sy
 80069ee:	60fb      	str	r3, [r7, #12]
}
 80069f0:	bf00      	nop
 80069f2:	e7fe      	b.n	80069f2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80069f4:	693b      	ldr	r3, [r7, #16]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d00a      	beq.n	8006a12 <vPortFree+0x62>
	__asm volatile
 80069fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a00:	f383 8811 	msr	BASEPRI, r3
 8006a04:	f3bf 8f6f 	isb	sy
 8006a08:	f3bf 8f4f 	dsb	sy
 8006a0c:	60bb      	str	r3, [r7, #8]
}
 8006a0e:	bf00      	nop
 8006a10:	e7fe      	b.n	8006a10 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006a12:	693b      	ldr	r3, [r7, #16]
 8006a14:	685a      	ldr	r2, [r3, #4]
 8006a16:	4b14      	ldr	r3, [pc, #80]	; (8006a68 <vPortFree+0xb8>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	4013      	ands	r3, r2
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d01e      	beq.n	8006a5e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006a20:	693b      	ldr	r3, [r7, #16]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d11a      	bne.n	8006a5e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006a28:	693b      	ldr	r3, [r7, #16]
 8006a2a:	685a      	ldr	r2, [r3, #4]
 8006a2c:	4b0e      	ldr	r3, [pc, #56]	; (8006a68 <vPortFree+0xb8>)
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	43db      	mvns	r3, r3
 8006a32:	401a      	ands	r2, r3
 8006a34:	693b      	ldr	r3, [r7, #16]
 8006a36:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006a38:	f7fe faa2 	bl	8004f80 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006a3c:	693b      	ldr	r3, [r7, #16]
 8006a3e:	685a      	ldr	r2, [r3, #4]
 8006a40:	4b0a      	ldr	r3, [pc, #40]	; (8006a6c <vPortFree+0xbc>)
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	4413      	add	r3, r2
 8006a46:	4a09      	ldr	r2, [pc, #36]	; (8006a6c <vPortFree+0xbc>)
 8006a48:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006a4a:	6938      	ldr	r0, [r7, #16]
 8006a4c:	f000 f874 	bl	8006b38 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006a50:	4b07      	ldr	r3, [pc, #28]	; (8006a70 <vPortFree+0xc0>)
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	3301      	adds	r3, #1
 8006a56:	4a06      	ldr	r2, [pc, #24]	; (8006a70 <vPortFree+0xc0>)
 8006a58:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006a5a:	f7fe fa9f 	bl	8004f9c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006a5e:	bf00      	nop
 8006a60:	3718      	adds	r7, #24
 8006a62:	46bd      	mov	sp, r7
 8006a64:	bd80      	pop	{r7, pc}
 8006a66:	bf00      	nop
 8006a68:	20004bec 	.word	0x20004bec
 8006a6c:	20004bdc 	.word	0x20004bdc
 8006a70:	20004be8 	.word	0x20004be8

08006a74 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006a74:	b480      	push	{r7}
 8006a76:	b085      	sub	sp, #20
 8006a78:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006a7a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006a7e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006a80:	4b27      	ldr	r3, [pc, #156]	; (8006b20 <prvHeapInit+0xac>)
 8006a82:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	f003 0307 	and.w	r3, r3, #7
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d00c      	beq.n	8006aa8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	3307      	adds	r3, #7
 8006a92:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	f023 0307 	bic.w	r3, r3, #7
 8006a9a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006a9c:	68ba      	ldr	r2, [r7, #8]
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	1ad3      	subs	r3, r2, r3
 8006aa2:	4a1f      	ldr	r2, [pc, #124]	; (8006b20 <prvHeapInit+0xac>)
 8006aa4:	4413      	add	r3, r2
 8006aa6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006aac:	4a1d      	ldr	r2, [pc, #116]	; (8006b24 <prvHeapInit+0xb0>)
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006ab2:	4b1c      	ldr	r3, [pc, #112]	; (8006b24 <prvHeapInit+0xb0>)
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	68ba      	ldr	r2, [r7, #8]
 8006abc:	4413      	add	r3, r2
 8006abe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006ac0:	2208      	movs	r2, #8
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	1a9b      	subs	r3, r3, r2
 8006ac6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	f023 0307 	bic.w	r3, r3, #7
 8006ace:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	4a15      	ldr	r2, [pc, #84]	; (8006b28 <prvHeapInit+0xb4>)
 8006ad4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006ad6:	4b14      	ldr	r3, [pc, #80]	; (8006b28 <prvHeapInit+0xb4>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	2200      	movs	r2, #0
 8006adc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006ade:	4b12      	ldr	r3, [pc, #72]	; (8006b28 <prvHeapInit+0xb4>)
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	68fa      	ldr	r2, [r7, #12]
 8006aee:	1ad2      	subs	r2, r2, r3
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006af4:	4b0c      	ldr	r3, [pc, #48]	; (8006b28 <prvHeapInit+0xb4>)
 8006af6:	681a      	ldr	r2, [r3, #0]
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	685b      	ldr	r3, [r3, #4]
 8006b00:	4a0a      	ldr	r2, [pc, #40]	; (8006b2c <prvHeapInit+0xb8>)
 8006b02:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	685b      	ldr	r3, [r3, #4]
 8006b08:	4a09      	ldr	r2, [pc, #36]	; (8006b30 <prvHeapInit+0xbc>)
 8006b0a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006b0c:	4b09      	ldr	r3, [pc, #36]	; (8006b34 <prvHeapInit+0xc0>)
 8006b0e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006b12:	601a      	str	r2, [r3, #0]
}
 8006b14:	bf00      	nop
 8006b16:	3714      	adds	r7, #20
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1e:	4770      	bx	lr
 8006b20:	20000fd0 	.word	0x20000fd0
 8006b24:	20004bd0 	.word	0x20004bd0
 8006b28:	20004bd8 	.word	0x20004bd8
 8006b2c:	20004be0 	.word	0x20004be0
 8006b30:	20004bdc 	.word	0x20004bdc
 8006b34:	20004bec 	.word	0x20004bec

08006b38 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006b38:	b480      	push	{r7}
 8006b3a:	b085      	sub	sp, #20
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006b40:	4b28      	ldr	r3, [pc, #160]	; (8006be4 <prvInsertBlockIntoFreeList+0xac>)
 8006b42:	60fb      	str	r3, [r7, #12]
 8006b44:	e002      	b.n	8006b4c <prvInsertBlockIntoFreeList+0x14>
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	60fb      	str	r3, [r7, #12]
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	687a      	ldr	r2, [r7, #4]
 8006b52:	429a      	cmp	r2, r3
 8006b54:	d8f7      	bhi.n	8006b46 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	685b      	ldr	r3, [r3, #4]
 8006b5e:	68ba      	ldr	r2, [r7, #8]
 8006b60:	4413      	add	r3, r2
 8006b62:	687a      	ldr	r2, [r7, #4]
 8006b64:	429a      	cmp	r2, r3
 8006b66:	d108      	bne.n	8006b7a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	685a      	ldr	r2, [r3, #4]
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	685b      	ldr	r3, [r3, #4]
 8006b70:	441a      	add	r2, r3
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	685b      	ldr	r3, [r3, #4]
 8006b82:	68ba      	ldr	r2, [r7, #8]
 8006b84:	441a      	add	r2, r3
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	429a      	cmp	r2, r3
 8006b8c:	d118      	bne.n	8006bc0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681a      	ldr	r2, [r3, #0]
 8006b92:	4b15      	ldr	r3, [pc, #84]	; (8006be8 <prvInsertBlockIntoFreeList+0xb0>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	429a      	cmp	r2, r3
 8006b98:	d00d      	beq.n	8006bb6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	685a      	ldr	r2, [r3, #4]
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	685b      	ldr	r3, [r3, #4]
 8006ba4:	441a      	add	r2, r3
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	681a      	ldr	r2, [r3, #0]
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	601a      	str	r2, [r3, #0]
 8006bb4:	e008      	b.n	8006bc8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006bb6:	4b0c      	ldr	r3, [pc, #48]	; (8006be8 <prvInsertBlockIntoFreeList+0xb0>)
 8006bb8:	681a      	ldr	r2, [r3, #0]
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	601a      	str	r2, [r3, #0]
 8006bbe:	e003      	b.n	8006bc8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681a      	ldr	r2, [r3, #0]
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006bc8:	68fa      	ldr	r2, [r7, #12]
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	429a      	cmp	r2, r3
 8006bce:	d002      	beq.n	8006bd6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	687a      	ldr	r2, [r7, #4]
 8006bd4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006bd6:	bf00      	nop
 8006bd8:	3714      	adds	r7, #20
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be0:	4770      	bx	lr
 8006be2:	bf00      	nop
 8006be4:	20004bd0 	.word	0x20004bd0
 8006be8:	20004bd8 	.word	0x20004bd8

08006bec <__errno>:
 8006bec:	4b01      	ldr	r3, [pc, #4]	; (8006bf4 <__errno+0x8>)
 8006bee:	6818      	ldr	r0, [r3, #0]
 8006bf0:	4770      	bx	lr
 8006bf2:	bf00      	nop
 8006bf4:	200000cc 	.word	0x200000cc

08006bf8 <__libc_init_array>:
 8006bf8:	b570      	push	{r4, r5, r6, lr}
 8006bfa:	4d0d      	ldr	r5, [pc, #52]	; (8006c30 <__libc_init_array+0x38>)
 8006bfc:	4c0d      	ldr	r4, [pc, #52]	; (8006c34 <__libc_init_array+0x3c>)
 8006bfe:	1b64      	subs	r4, r4, r5
 8006c00:	10a4      	asrs	r4, r4, #2
 8006c02:	2600      	movs	r6, #0
 8006c04:	42a6      	cmp	r6, r4
 8006c06:	d109      	bne.n	8006c1c <__libc_init_array+0x24>
 8006c08:	4d0b      	ldr	r5, [pc, #44]	; (8006c38 <__libc_init_array+0x40>)
 8006c0a:	4c0c      	ldr	r4, [pc, #48]	; (8006c3c <__libc_init_array+0x44>)
 8006c0c:	f001 f84e 	bl	8007cac <_init>
 8006c10:	1b64      	subs	r4, r4, r5
 8006c12:	10a4      	asrs	r4, r4, #2
 8006c14:	2600      	movs	r6, #0
 8006c16:	42a6      	cmp	r6, r4
 8006c18:	d105      	bne.n	8006c26 <__libc_init_array+0x2e>
 8006c1a:	bd70      	pop	{r4, r5, r6, pc}
 8006c1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c20:	4798      	blx	r3
 8006c22:	3601      	adds	r6, #1
 8006c24:	e7ee      	b.n	8006c04 <__libc_init_array+0xc>
 8006c26:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c2a:	4798      	blx	r3
 8006c2c:	3601      	adds	r6, #1
 8006c2e:	e7f2      	b.n	8006c16 <__libc_init_array+0x1e>
 8006c30:	08007e34 	.word	0x08007e34
 8006c34:	08007e34 	.word	0x08007e34
 8006c38:	08007e34 	.word	0x08007e34
 8006c3c:	08007e38 	.word	0x08007e38

08006c40 <__itoa>:
 8006c40:	1e93      	subs	r3, r2, #2
 8006c42:	2b22      	cmp	r3, #34	; 0x22
 8006c44:	b510      	push	{r4, lr}
 8006c46:	460c      	mov	r4, r1
 8006c48:	d904      	bls.n	8006c54 <__itoa+0x14>
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	700b      	strb	r3, [r1, #0]
 8006c4e:	461c      	mov	r4, r3
 8006c50:	4620      	mov	r0, r4
 8006c52:	bd10      	pop	{r4, pc}
 8006c54:	2a0a      	cmp	r2, #10
 8006c56:	d109      	bne.n	8006c6c <__itoa+0x2c>
 8006c58:	2800      	cmp	r0, #0
 8006c5a:	da07      	bge.n	8006c6c <__itoa+0x2c>
 8006c5c:	232d      	movs	r3, #45	; 0x2d
 8006c5e:	700b      	strb	r3, [r1, #0]
 8006c60:	4240      	negs	r0, r0
 8006c62:	2101      	movs	r1, #1
 8006c64:	4421      	add	r1, r4
 8006c66:	f000 f84d 	bl	8006d04 <__utoa>
 8006c6a:	e7f1      	b.n	8006c50 <__itoa+0x10>
 8006c6c:	2100      	movs	r1, #0
 8006c6e:	e7f9      	b.n	8006c64 <__itoa+0x24>

08006c70 <itoa>:
 8006c70:	f7ff bfe6 	b.w	8006c40 <__itoa>

08006c74 <memcpy>:
 8006c74:	440a      	add	r2, r1
 8006c76:	4291      	cmp	r1, r2
 8006c78:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006c7c:	d100      	bne.n	8006c80 <memcpy+0xc>
 8006c7e:	4770      	bx	lr
 8006c80:	b510      	push	{r4, lr}
 8006c82:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006c86:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006c8a:	4291      	cmp	r1, r2
 8006c8c:	d1f9      	bne.n	8006c82 <memcpy+0xe>
 8006c8e:	bd10      	pop	{r4, pc}

08006c90 <memset>:
 8006c90:	4402      	add	r2, r0
 8006c92:	4603      	mov	r3, r0
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d100      	bne.n	8006c9a <memset+0xa>
 8006c98:	4770      	bx	lr
 8006c9a:	f803 1b01 	strb.w	r1, [r3], #1
 8006c9e:	e7f9      	b.n	8006c94 <memset+0x4>

08006ca0 <iprintf>:
 8006ca0:	b40f      	push	{r0, r1, r2, r3}
 8006ca2:	4b0a      	ldr	r3, [pc, #40]	; (8006ccc <iprintf+0x2c>)
 8006ca4:	b513      	push	{r0, r1, r4, lr}
 8006ca6:	681c      	ldr	r4, [r3, #0]
 8006ca8:	b124      	cbz	r4, 8006cb4 <iprintf+0x14>
 8006caa:	69a3      	ldr	r3, [r4, #24]
 8006cac:	b913      	cbnz	r3, 8006cb4 <iprintf+0x14>
 8006cae:	4620      	mov	r0, r4
 8006cb0:	f000 f8c2 	bl	8006e38 <__sinit>
 8006cb4:	ab05      	add	r3, sp, #20
 8006cb6:	9a04      	ldr	r2, [sp, #16]
 8006cb8:	68a1      	ldr	r1, [r4, #8]
 8006cba:	9301      	str	r3, [sp, #4]
 8006cbc:	4620      	mov	r0, r4
 8006cbe:	f000 fa2d 	bl	800711c <_vfiprintf_r>
 8006cc2:	b002      	add	sp, #8
 8006cc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006cc8:	b004      	add	sp, #16
 8006cca:	4770      	bx	lr
 8006ccc:	200000cc 	.word	0x200000cc

08006cd0 <time>:
 8006cd0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006cd2:	4b0b      	ldr	r3, [pc, #44]	; (8006d00 <time+0x30>)
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	4669      	mov	r1, sp
 8006cd8:	4604      	mov	r4, r0
 8006cda:	6818      	ldr	r0, [r3, #0]
 8006cdc:	f000 f94a 	bl	8006f74 <_gettimeofday_r>
 8006ce0:	2800      	cmp	r0, #0
 8006ce2:	bfbe      	ittt	lt
 8006ce4:	f04f 32ff 	movlt.w	r2, #4294967295	; 0xffffffff
 8006ce8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006cec:	e9cd 2300 	strdlt	r2, r3, [sp]
 8006cf0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006cf4:	b10c      	cbz	r4, 8006cfa <time+0x2a>
 8006cf6:	e9c4 0100 	strd	r0, r1, [r4]
 8006cfa:	b004      	add	sp, #16
 8006cfc:	bd10      	pop	{r4, pc}
 8006cfe:	bf00      	nop
 8006d00:	200000cc 	.word	0x200000cc

08006d04 <__utoa>:
 8006d04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d06:	4c1f      	ldr	r4, [pc, #124]	; (8006d84 <__utoa+0x80>)
 8006d08:	b08b      	sub	sp, #44	; 0x2c
 8006d0a:	4605      	mov	r5, r0
 8006d0c:	460b      	mov	r3, r1
 8006d0e:	466e      	mov	r6, sp
 8006d10:	f104 0c20 	add.w	ip, r4, #32
 8006d14:	6820      	ldr	r0, [r4, #0]
 8006d16:	6861      	ldr	r1, [r4, #4]
 8006d18:	4637      	mov	r7, r6
 8006d1a:	c703      	stmia	r7!, {r0, r1}
 8006d1c:	3408      	adds	r4, #8
 8006d1e:	4564      	cmp	r4, ip
 8006d20:	463e      	mov	r6, r7
 8006d22:	d1f7      	bne.n	8006d14 <__utoa+0x10>
 8006d24:	7921      	ldrb	r1, [r4, #4]
 8006d26:	7139      	strb	r1, [r7, #4]
 8006d28:	1e91      	subs	r1, r2, #2
 8006d2a:	6820      	ldr	r0, [r4, #0]
 8006d2c:	6038      	str	r0, [r7, #0]
 8006d2e:	2922      	cmp	r1, #34	; 0x22
 8006d30:	f04f 0100 	mov.w	r1, #0
 8006d34:	d904      	bls.n	8006d40 <__utoa+0x3c>
 8006d36:	7019      	strb	r1, [r3, #0]
 8006d38:	460b      	mov	r3, r1
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	b00b      	add	sp, #44	; 0x2c
 8006d3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d40:	1e58      	subs	r0, r3, #1
 8006d42:	4684      	mov	ip, r0
 8006d44:	fbb5 f7f2 	udiv	r7, r5, r2
 8006d48:	fb02 5617 	mls	r6, r2, r7, r5
 8006d4c:	3628      	adds	r6, #40	; 0x28
 8006d4e:	446e      	add	r6, sp
 8006d50:	460c      	mov	r4, r1
 8006d52:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8006d56:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8006d5a:	462e      	mov	r6, r5
 8006d5c:	42b2      	cmp	r2, r6
 8006d5e:	f101 0101 	add.w	r1, r1, #1
 8006d62:	463d      	mov	r5, r7
 8006d64:	d9ee      	bls.n	8006d44 <__utoa+0x40>
 8006d66:	2200      	movs	r2, #0
 8006d68:	545a      	strb	r2, [r3, r1]
 8006d6a:	1919      	adds	r1, r3, r4
 8006d6c:	1aa5      	subs	r5, r4, r2
 8006d6e:	42aa      	cmp	r2, r5
 8006d70:	dae3      	bge.n	8006d3a <__utoa+0x36>
 8006d72:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8006d76:	780e      	ldrb	r6, [r1, #0]
 8006d78:	7006      	strb	r6, [r0, #0]
 8006d7a:	3201      	adds	r2, #1
 8006d7c:	f801 5901 	strb.w	r5, [r1], #-1
 8006d80:	e7f4      	b.n	8006d6c <__utoa+0x68>
 8006d82:	bf00      	nop
 8006d84:	08007d70 	.word	0x08007d70

08006d88 <std>:
 8006d88:	2300      	movs	r3, #0
 8006d8a:	b510      	push	{r4, lr}
 8006d8c:	4604      	mov	r4, r0
 8006d8e:	e9c0 3300 	strd	r3, r3, [r0]
 8006d92:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006d96:	6083      	str	r3, [r0, #8]
 8006d98:	8181      	strh	r1, [r0, #12]
 8006d9a:	6643      	str	r3, [r0, #100]	; 0x64
 8006d9c:	81c2      	strh	r2, [r0, #14]
 8006d9e:	6183      	str	r3, [r0, #24]
 8006da0:	4619      	mov	r1, r3
 8006da2:	2208      	movs	r2, #8
 8006da4:	305c      	adds	r0, #92	; 0x5c
 8006da6:	f7ff ff73 	bl	8006c90 <memset>
 8006daa:	4b05      	ldr	r3, [pc, #20]	; (8006dc0 <std+0x38>)
 8006dac:	6263      	str	r3, [r4, #36]	; 0x24
 8006dae:	4b05      	ldr	r3, [pc, #20]	; (8006dc4 <std+0x3c>)
 8006db0:	62a3      	str	r3, [r4, #40]	; 0x28
 8006db2:	4b05      	ldr	r3, [pc, #20]	; (8006dc8 <std+0x40>)
 8006db4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006db6:	4b05      	ldr	r3, [pc, #20]	; (8006dcc <std+0x44>)
 8006db8:	6224      	str	r4, [r4, #32]
 8006dba:	6323      	str	r3, [r4, #48]	; 0x30
 8006dbc:	bd10      	pop	{r4, pc}
 8006dbe:	bf00      	nop
 8006dc0:	080076c5 	.word	0x080076c5
 8006dc4:	080076e7 	.word	0x080076e7
 8006dc8:	0800771f 	.word	0x0800771f
 8006dcc:	08007743 	.word	0x08007743

08006dd0 <_cleanup_r>:
 8006dd0:	4901      	ldr	r1, [pc, #4]	; (8006dd8 <_cleanup_r+0x8>)
 8006dd2:	f000 b8af 	b.w	8006f34 <_fwalk_reent>
 8006dd6:	bf00      	nop
 8006dd8:	08007a1d 	.word	0x08007a1d

08006ddc <__sfmoreglue>:
 8006ddc:	b570      	push	{r4, r5, r6, lr}
 8006dde:	2268      	movs	r2, #104	; 0x68
 8006de0:	1e4d      	subs	r5, r1, #1
 8006de2:	4355      	muls	r5, r2
 8006de4:	460e      	mov	r6, r1
 8006de6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006dea:	f000 f8f9 	bl	8006fe0 <_malloc_r>
 8006dee:	4604      	mov	r4, r0
 8006df0:	b140      	cbz	r0, 8006e04 <__sfmoreglue+0x28>
 8006df2:	2100      	movs	r1, #0
 8006df4:	e9c0 1600 	strd	r1, r6, [r0]
 8006df8:	300c      	adds	r0, #12
 8006dfa:	60a0      	str	r0, [r4, #8]
 8006dfc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006e00:	f7ff ff46 	bl	8006c90 <memset>
 8006e04:	4620      	mov	r0, r4
 8006e06:	bd70      	pop	{r4, r5, r6, pc}

08006e08 <__sfp_lock_acquire>:
 8006e08:	4801      	ldr	r0, [pc, #4]	; (8006e10 <__sfp_lock_acquire+0x8>)
 8006e0a:	f000 b8c6 	b.w	8006f9a <__retarget_lock_acquire_recursive>
 8006e0e:	bf00      	nop
 8006e10:	20004bf1 	.word	0x20004bf1

08006e14 <__sfp_lock_release>:
 8006e14:	4801      	ldr	r0, [pc, #4]	; (8006e1c <__sfp_lock_release+0x8>)
 8006e16:	f000 b8c1 	b.w	8006f9c <__retarget_lock_release_recursive>
 8006e1a:	bf00      	nop
 8006e1c:	20004bf1 	.word	0x20004bf1

08006e20 <__sinit_lock_acquire>:
 8006e20:	4801      	ldr	r0, [pc, #4]	; (8006e28 <__sinit_lock_acquire+0x8>)
 8006e22:	f000 b8ba 	b.w	8006f9a <__retarget_lock_acquire_recursive>
 8006e26:	bf00      	nop
 8006e28:	20004bf2 	.word	0x20004bf2

08006e2c <__sinit_lock_release>:
 8006e2c:	4801      	ldr	r0, [pc, #4]	; (8006e34 <__sinit_lock_release+0x8>)
 8006e2e:	f000 b8b5 	b.w	8006f9c <__retarget_lock_release_recursive>
 8006e32:	bf00      	nop
 8006e34:	20004bf2 	.word	0x20004bf2

08006e38 <__sinit>:
 8006e38:	b510      	push	{r4, lr}
 8006e3a:	4604      	mov	r4, r0
 8006e3c:	f7ff fff0 	bl	8006e20 <__sinit_lock_acquire>
 8006e40:	69a3      	ldr	r3, [r4, #24]
 8006e42:	b11b      	cbz	r3, 8006e4c <__sinit+0x14>
 8006e44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e48:	f7ff bff0 	b.w	8006e2c <__sinit_lock_release>
 8006e4c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006e50:	6523      	str	r3, [r4, #80]	; 0x50
 8006e52:	4b13      	ldr	r3, [pc, #76]	; (8006ea0 <__sinit+0x68>)
 8006e54:	4a13      	ldr	r2, [pc, #76]	; (8006ea4 <__sinit+0x6c>)
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	62a2      	str	r2, [r4, #40]	; 0x28
 8006e5a:	42a3      	cmp	r3, r4
 8006e5c:	bf04      	itt	eq
 8006e5e:	2301      	moveq	r3, #1
 8006e60:	61a3      	streq	r3, [r4, #24]
 8006e62:	4620      	mov	r0, r4
 8006e64:	f000 f820 	bl	8006ea8 <__sfp>
 8006e68:	6060      	str	r0, [r4, #4]
 8006e6a:	4620      	mov	r0, r4
 8006e6c:	f000 f81c 	bl	8006ea8 <__sfp>
 8006e70:	60a0      	str	r0, [r4, #8]
 8006e72:	4620      	mov	r0, r4
 8006e74:	f000 f818 	bl	8006ea8 <__sfp>
 8006e78:	2200      	movs	r2, #0
 8006e7a:	60e0      	str	r0, [r4, #12]
 8006e7c:	2104      	movs	r1, #4
 8006e7e:	6860      	ldr	r0, [r4, #4]
 8006e80:	f7ff ff82 	bl	8006d88 <std>
 8006e84:	68a0      	ldr	r0, [r4, #8]
 8006e86:	2201      	movs	r2, #1
 8006e88:	2109      	movs	r1, #9
 8006e8a:	f7ff ff7d 	bl	8006d88 <std>
 8006e8e:	68e0      	ldr	r0, [r4, #12]
 8006e90:	2202      	movs	r2, #2
 8006e92:	2112      	movs	r1, #18
 8006e94:	f7ff ff78 	bl	8006d88 <std>
 8006e98:	2301      	movs	r3, #1
 8006e9a:	61a3      	str	r3, [r4, #24]
 8006e9c:	e7d2      	b.n	8006e44 <__sinit+0xc>
 8006e9e:	bf00      	nop
 8006ea0:	08007d6c 	.word	0x08007d6c
 8006ea4:	08006dd1 	.word	0x08006dd1

08006ea8 <__sfp>:
 8006ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006eaa:	4607      	mov	r7, r0
 8006eac:	f7ff ffac 	bl	8006e08 <__sfp_lock_acquire>
 8006eb0:	4b1e      	ldr	r3, [pc, #120]	; (8006f2c <__sfp+0x84>)
 8006eb2:	681e      	ldr	r6, [r3, #0]
 8006eb4:	69b3      	ldr	r3, [r6, #24]
 8006eb6:	b913      	cbnz	r3, 8006ebe <__sfp+0x16>
 8006eb8:	4630      	mov	r0, r6
 8006eba:	f7ff ffbd 	bl	8006e38 <__sinit>
 8006ebe:	3648      	adds	r6, #72	; 0x48
 8006ec0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006ec4:	3b01      	subs	r3, #1
 8006ec6:	d503      	bpl.n	8006ed0 <__sfp+0x28>
 8006ec8:	6833      	ldr	r3, [r6, #0]
 8006eca:	b30b      	cbz	r3, 8006f10 <__sfp+0x68>
 8006ecc:	6836      	ldr	r6, [r6, #0]
 8006ece:	e7f7      	b.n	8006ec0 <__sfp+0x18>
 8006ed0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006ed4:	b9d5      	cbnz	r5, 8006f0c <__sfp+0x64>
 8006ed6:	4b16      	ldr	r3, [pc, #88]	; (8006f30 <__sfp+0x88>)
 8006ed8:	60e3      	str	r3, [r4, #12]
 8006eda:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006ede:	6665      	str	r5, [r4, #100]	; 0x64
 8006ee0:	f000 f85a 	bl	8006f98 <__retarget_lock_init_recursive>
 8006ee4:	f7ff ff96 	bl	8006e14 <__sfp_lock_release>
 8006ee8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006eec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006ef0:	6025      	str	r5, [r4, #0]
 8006ef2:	61a5      	str	r5, [r4, #24]
 8006ef4:	2208      	movs	r2, #8
 8006ef6:	4629      	mov	r1, r5
 8006ef8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006efc:	f7ff fec8 	bl	8006c90 <memset>
 8006f00:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006f04:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006f08:	4620      	mov	r0, r4
 8006f0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f0c:	3468      	adds	r4, #104	; 0x68
 8006f0e:	e7d9      	b.n	8006ec4 <__sfp+0x1c>
 8006f10:	2104      	movs	r1, #4
 8006f12:	4638      	mov	r0, r7
 8006f14:	f7ff ff62 	bl	8006ddc <__sfmoreglue>
 8006f18:	4604      	mov	r4, r0
 8006f1a:	6030      	str	r0, [r6, #0]
 8006f1c:	2800      	cmp	r0, #0
 8006f1e:	d1d5      	bne.n	8006ecc <__sfp+0x24>
 8006f20:	f7ff ff78 	bl	8006e14 <__sfp_lock_release>
 8006f24:	230c      	movs	r3, #12
 8006f26:	603b      	str	r3, [r7, #0]
 8006f28:	e7ee      	b.n	8006f08 <__sfp+0x60>
 8006f2a:	bf00      	nop
 8006f2c:	08007d6c 	.word	0x08007d6c
 8006f30:	ffff0001 	.word	0xffff0001

08006f34 <_fwalk_reent>:
 8006f34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f38:	4606      	mov	r6, r0
 8006f3a:	4688      	mov	r8, r1
 8006f3c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006f40:	2700      	movs	r7, #0
 8006f42:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006f46:	f1b9 0901 	subs.w	r9, r9, #1
 8006f4a:	d505      	bpl.n	8006f58 <_fwalk_reent+0x24>
 8006f4c:	6824      	ldr	r4, [r4, #0]
 8006f4e:	2c00      	cmp	r4, #0
 8006f50:	d1f7      	bne.n	8006f42 <_fwalk_reent+0xe>
 8006f52:	4638      	mov	r0, r7
 8006f54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f58:	89ab      	ldrh	r3, [r5, #12]
 8006f5a:	2b01      	cmp	r3, #1
 8006f5c:	d907      	bls.n	8006f6e <_fwalk_reent+0x3a>
 8006f5e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006f62:	3301      	adds	r3, #1
 8006f64:	d003      	beq.n	8006f6e <_fwalk_reent+0x3a>
 8006f66:	4629      	mov	r1, r5
 8006f68:	4630      	mov	r0, r6
 8006f6a:	47c0      	blx	r8
 8006f6c:	4307      	orrs	r7, r0
 8006f6e:	3568      	adds	r5, #104	; 0x68
 8006f70:	e7e9      	b.n	8006f46 <_fwalk_reent+0x12>
	...

08006f74 <_gettimeofday_r>:
 8006f74:	b538      	push	{r3, r4, r5, lr}
 8006f76:	4d07      	ldr	r5, [pc, #28]	; (8006f94 <_gettimeofday_r+0x20>)
 8006f78:	2300      	movs	r3, #0
 8006f7a:	4604      	mov	r4, r0
 8006f7c:	4608      	mov	r0, r1
 8006f7e:	4611      	mov	r1, r2
 8006f80:	602b      	str	r3, [r5, #0]
 8006f82:	f000 fe8b 	bl	8007c9c <_gettimeofday>
 8006f86:	1c43      	adds	r3, r0, #1
 8006f88:	d102      	bne.n	8006f90 <_gettimeofday_r+0x1c>
 8006f8a:	682b      	ldr	r3, [r5, #0]
 8006f8c:	b103      	cbz	r3, 8006f90 <_gettimeofday_r+0x1c>
 8006f8e:	6023      	str	r3, [r4, #0]
 8006f90:	bd38      	pop	{r3, r4, r5, pc}
 8006f92:	bf00      	nop
 8006f94:	20004bfc 	.word	0x20004bfc

08006f98 <__retarget_lock_init_recursive>:
 8006f98:	4770      	bx	lr

08006f9a <__retarget_lock_acquire_recursive>:
 8006f9a:	4770      	bx	lr

08006f9c <__retarget_lock_release_recursive>:
 8006f9c:	4770      	bx	lr
	...

08006fa0 <sbrk_aligned>:
 8006fa0:	b570      	push	{r4, r5, r6, lr}
 8006fa2:	4e0e      	ldr	r6, [pc, #56]	; (8006fdc <sbrk_aligned+0x3c>)
 8006fa4:	460c      	mov	r4, r1
 8006fa6:	6831      	ldr	r1, [r6, #0]
 8006fa8:	4605      	mov	r5, r0
 8006faa:	b911      	cbnz	r1, 8006fb2 <sbrk_aligned+0x12>
 8006fac:	f000 fb7a 	bl	80076a4 <_sbrk_r>
 8006fb0:	6030      	str	r0, [r6, #0]
 8006fb2:	4621      	mov	r1, r4
 8006fb4:	4628      	mov	r0, r5
 8006fb6:	f000 fb75 	bl	80076a4 <_sbrk_r>
 8006fba:	1c43      	adds	r3, r0, #1
 8006fbc:	d00a      	beq.n	8006fd4 <sbrk_aligned+0x34>
 8006fbe:	1cc4      	adds	r4, r0, #3
 8006fc0:	f024 0403 	bic.w	r4, r4, #3
 8006fc4:	42a0      	cmp	r0, r4
 8006fc6:	d007      	beq.n	8006fd8 <sbrk_aligned+0x38>
 8006fc8:	1a21      	subs	r1, r4, r0
 8006fca:	4628      	mov	r0, r5
 8006fcc:	f000 fb6a 	bl	80076a4 <_sbrk_r>
 8006fd0:	3001      	adds	r0, #1
 8006fd2:	d101      	bne.n	8006fd8 <sbrk_aligned+0x38>
 8006fd4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006fd8:	4620      	mov	r0, r4
 8006fda:	bd70      	pop	{r4, r5, r6, pc}
 8006fdc:	20004bf8 	.word	0x20004bf8

08006fe0 <_malloc_r>:
 8006fe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006fe4:	1ccd      	adds	r5, r1, #3
 8006fe6:	f025 0503 	bic.w	r5, r5, #3
 8006fea:	3508      	adds	r5, #8
 8006fec:	2d0c      	cmp	r5, #12
 8006fee:	bf38      	it	cc
 8006ff0:	250c      	movcc	r5, #12
 8006ff2:	2d00      	cmp	r5, #0
 8006ff4:	4607      	mov	r7, r0
 8006ff6:	db01      	blt.n	8006ffc <_malloc_r+0x1c>
 8006ff8:	42a9      	cmp	r1, r5
 8006ffa:	d905      	bls.n	8007008 <_malloc_r+0x28>
 8006ffc:	230c      	movs	r3, #12
 8006ffe:	603b      	str	r3, [r7, #0]
 8007000:	2600      	movs	r6, #0
 8007002:	4630      	mov	r0, r6
 8007004:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007008:	4e2e      	ldr	r6, [pc, #184]	; (80070c4 <_malloc_r+0xe4>)
 800700a:	f000 fdbb 	bl	8007b84 <__malloc_lock>
 800700e:	6833      	ldr	r3, [r6, #0]
 8007010:	461c      	mov	r4, r3
 8007012:	bb34      	cbnz	r4, 8007062 <_malloc_r+0x82>
 8007014:	4629      	mov	r1, r5
 8007016:	4638      	mov	r0, r7
 8007018:	f7ff ffc2 	bl	8006fa0 <sbrk_aligned>
 800701c:	1c43      	adds	r3, r0, #1
 800701e:	4604      	mov	r4, r0
 8007020:	d14d      	bne.n	80070be <_malloc_r+0xde>
 8007022:	6834      	ldr	r4, [r6, #0]
 8007024:	4626      	mov	r6, r4
 8007026:	2e00      	cmp	r6, #0
 8007028:	d140      	bne.n	80070ac <_malloc_r+0xcc>
 800702a:	6823      	ldr	r3, [r4, #0]
 800702c:	4631      	mov	r1, r6
 800702e:	4638      	mov	r0, r7
 8007030:	eb04 0803 	add.w	r8, r4, r3
 8007034:	f000 fb36 	bl	80076a4 <_sbrk_r>
 8007038:	4580      	cmp	r8, r0
 800703a:	d13a      	bne.n	80070b2 <_malloc_r+0xd2>
 800703c:	6821      	ldr	r1, [r4, #0]
 800703e:	3503      	adds	r5, #3
 8007040:	1a6d      	subs	r5, r5, r1
 8007042:	f025 0503 	bic.w	r5, r5, #3
 8007046:	3508      	adds	r5, #8
 8007048:	2d0c      	cmp	r5, #12
 800704a:	bf38      	it	cc
 800704c:	250c      	movcc	r5, #12
 800704e:	4629      	mov	r1, r5
 8007050:	4638      	mov	r0, r7
 8007052:	f7ff ffa5 	bl	8006fa0 <sbrk_aligned>
 8007056:	3001      	adds	r0, #1
 8007058:	d02b      	beq.n	80070b2 <_malloc_r+0xd2>
 800705a:	6823      	ldr	r3, [r4, #0]
 800705c:	442b      	add	r3, r5
 800705e:	6023      	str	r3, [r4, #0]
 8007060:	e00e      	b.n	8007080 <_malloc_r+0xa0>
 8007062:	6822      	ldr	r2, [r4, #0]
 8007064:	1b52      	subs	r2, r2, r5
 8007066:	d41e      	bmi.n	80070a6 <_malloc_r+0xc6>
 8007068:	2a0b      	cmp	r2, #11
 800706a:	d916      	bls.n	800709a <_malloc_r+0xba>
 800706c:	1961      	adds	r1, r4, r5
 800706e:	42a3      	cmp	r3, r4
 8007070:	6025      	str	r5, [r4, #0]
 8007072:	bf18      	it	ne
 8007074:	6059      	strne	r1, [r3, #4]
 8007076:	6863      	ldr	r3, [r4, #4]
 8007078:	bf08      	it	eq
 800707a:	6031      	streq	r1, [r6, #0]
 800707c:	5162      	str	r2, [r4, r5]
 800707e:	604b      	str	r3, [r1, #4]
 8007080:	4638      	mov	r0, r7
 8007082:	f104 060b 	add.w	r6, r4, #11
 8007086:	f000 fd83 	bl	8007b90 <__malloc_unlock>
 800708a:	f026 0607 	bic.w	r6, r6, #7
 800708e:	1d23      	adds	r3, r4, #4
 8007090:	1af2      	subs	r2, r6, r3
 8007092:	d0b6      	beq.n	8007002 <_malloc_r+0x22>
 8007094:	1b9b      	subs	r3, r3, r6
 8007096:	50a3      	str	r3, [r4, r2]
 8007098:	e7b3      	b.n	8007002 <_malloc_r+0x22>
 800709a:	6862      	ldr	r2, [r4, #4]
 800709c:	42a3      	cmp	r3, r4
 800709e:	bf0c      	ite	eq
 80070a0:	6032      	streq	r2, [r6, #0]
 80070a2:	605a      	strne	r2, [r3, #4]
 80070a4:	e7ec      	b.n	8007080 <_malloc_r+0xa0>
 80070a6:	4623      	mov	r3, r4
 80070a8:	6864      	ldr	r4, [r4, #4]
 80070aa:	e7b2      	b.n	8007012 <_malloc_r+0x32>
 80070ac:	4634      	mov	r4, r6
 80070ae:	6876      	ldr	r6, [r6, #4]
 80070b0:	e7b9      	b.n	8007026 <_malloc_r+0x46>
 80070b2:	230c      	movs	r3, #12
 80070b4:	603b      	str	r3, [r7, #0]
 80070b6:	4638      	mov	r0, r7
 80070b8:	f000 fd6a 	bl	8007b90 <__malloc_unlock>
 80070bc:	e7a1      	b.n	8007002 <_malloc_r+0x22>
 80070be:	6025      	str	r5, [r4, #0]
 80070c0:	e7de      	b.n	8007080 <_malloc_r+0xa0>
 80070c2:	bf00      	nop
 80070c4:	20004bf4 	.word	0x20004bf4

080070c8 <__sfputc_r>:
 80070c8:	6893      	ldr	r3, [r2, #8]
 80070ca:	3b01      	subs	r3, #1
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	b410      	push	{r4}
 80070d0:	6093      	str	r3, [r2, #8]
 80070d2:	da08      	bge.n	80070e6 <__sfputc_r+0x1e>
 80070d4:	6994      	ldr	r4, [r2, #24]
 80070d6:	42a3      	cmp	r3, r4
 80070d8:	db01      	blt.n	80070de <__sfputc_r+0x16>
 80070da:	290a      	cmp	r1, #10
 80070dc:	d103      	bne.n	80070e6 <__sfputc_r+0x1e>
 80070de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80070e2:	f000 bb33 	b.w	800774c <__swbuf_r>
 80070e6:	6813      	ldr	r3, [r2, #0]
 80070e8:	1c58      	adds	r0, r3, #1
 80070ea:	6010      	str	r0, [r2, #0]
 80070ec:	7019      	strb	r1, [r3, #0]
 80070ee:	4608      	mov	r0, r1
 80070f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80070f4:	4770      	bx	lr

080070f6 <__sfputs_r>:
 80070f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070f8:	4606      	mov	r6, r0
 80070fa:	460f      	mov	r7, r1
 80070fc:	4614      	mov	r4, r2
 80070fe:	18d5      	adds	r5, r2, r3
 8007100:	42ac      	cmp	r4, r5
 8007102:	d101      	bne.n	8007108 <__sfputs_r+0x12>
 8007104:	2000      	movs	r0, #0
 8007106:	e007      	b.n	8007118 <__sfputs_r+0x22>
 8007108:	f814 1b01 	ldrb.w	r1, [r4], #1
 800710c:	463a      	mov	r2, r7
 800710e:	4630      	mov	r0, r6
 8007110:	f7ff ffda 	bl	80070c8 <__sfputc_r>
 8007114:	1c43      	adds	r3, r0, #1
 8007116:	d1f3      	bne.n	8007100 <__sfputs_r+0xa>
 8007118:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800711c <_vfiprintf_r>:
 800711c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007120:	460d      	mov	r5, r1
 8007122:	b09d      	sub	sp, #116	; 0x74
 8007124:	4614      	mov	r4, r2
 8007126:	4698      	mov	r8, r3
 8007128:	4606      	mov	r6, r0
 800712a:	b118      	cbz	r0, 8007134 <_vfiprintf_r+0x18>
 800712c:	6983      	ldr	r3, [r0, #24]
 800712e:	b90b      	cbnz	r3, 8007134 <_vfiprintf_r+0x18>
 8007130:	f7ff fe82 	bl	8006e38 <__sinit>
 8007134:	4b89      	ldr	r3, [pc, #548]	; (800735c <_vfiprintf_r+0x240>)
 8007136:	429d      	cmp	r5, r3
 8007138:	d11b      	bne.n	8007172 <_vfiprintf_r+0x56>
 800713a:	6875      	ldr	r5, [r6, #4]
 800713c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800713e:	07d9      	lsls	r1, r3, #31
 8007140:	d405      	bmi.n	800714e <_vfiprintf_r+0x32>
 8007142:	89ab      	ldrh	r3, [r5, #12]
 8007144:	059a      	lsls	r2, r3, #22
 8007146:	d402      	bmi.n	800714e <_vfiprintf_r+0x32>
 8007148:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800714a:	f7ff ff26 	bl	8006f9a <__retarget_lock_acquire_recursive>
 800714e:	89ab      	ldrh	r3, [r5, #12]
 8007150:	071b      	lsls	r3, r3, #28
 8007152:	d501      	bpl.n	8007158 <_vfiprintf_r+0x3c>
 8007154:	692b      	ldr	r3, [r5, #16]
 8007156:	b9eb      	cbnz	r3, 8007194 <_vfiprintf_r+0x78>
 8007158:	4629      	mov	r1, r5
 800715a:	4630      	mov	r0, r6
 800715c:	f000 fb5a 	bl	8007814 <__swsetup_r>
 8007160:	b1c0      	cbz	r0, 8007194 <_vfiprintf_r+0x78>
 8007162:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007164:	07dc      	lsls	r4, r3, #31
 8007166:	d50e      	bpl.n	8007186 <_vfiprintf_r+0x6a>
 8007168:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800716c:	b01d      	add	sp, #116	; 0x74
 800716e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007172:	4b7b      	ldr	r3, [pc, #492]	; (8007360 <_vfiprintf_r+0x244>)
 8007174:	429d      	cmp	r5, r3
 8007176:	d101      	bne.n	800717c <_vfiprintf_r+0x60>
 8007178:	68b5      	ldr	r5, [r6, #8]
 800717a:	e7df      	b.n	800713c <_vfiprintf_r+0x20>
 800717c:	4b79      	ldr	r3, [pc, #484]	; (8007364 <_vfiprintf_r+0x248>)
 800717e:	429d      	cmp	r5, r3
 8007180:	bf08      	it	eq
 8007182:	68f5      	ldreq	r5, [r6, #12]
 8007184:	e7da      	b.n	800713c <_vfiprintf_r+0x20>
 8007186:	89ab      	ldrh	r3, [r5, #12]
 8007188:	0598      	lsls	r0, r3, #22
 800718a:	d4ed      	bmi.n	8007168 <_vfiprintf_r+0x4c>
 800718c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800718e:	f7ff ff05 	bl	8006f9c <__retarget_lock_release_recursive>
 8007192:	e7e9      	b.n	8007168 <_vfiprintf_r+0x4c>
 8007194:	2300      	movs	r3, #0
 8007196:	9309      	str	r3, [sp, #36]	; 0x24
 8007198:	2320      	movs	r3, #32
 800719a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800719e:	f8cd 800c 	str.w	r8, [sp, #12]
 80071a2:	2330      	movs	r3, #48	; 0x30
 80071a4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007368 <_vfiprintf_r+0x24c>
 80071a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80071ac:	f04f 0901 	mov.w	r9, #1
 80071b0:	4623      	mov	r3, r4
 80071b2:	469a      	mov	sl, r3
 80071b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80071b8:	b10a      	cbz	r2, 80071be <_vfiprintf_r+0xa2>
 80071ba:	2a25      	cmp	r2, #37	; 0x25
 80071bc:	d1f9      	bne.n	80071b2 <_vfiprintf_r+0x96>
 80071be:	ebba 0b04 	subs.w	fp, sl, r4
 80071c2:	d00b      	beq.n	80071dc <_vfiprintf_r+0xc0>
 80071c4:	465b      	mov	r3, fp
 80071c6:	4622      	mov	r2, r4
 80071c8:	4629      	mov	r1, r5
 80071ca:	4630      	mov	r0, r6
 80071cc:	f7ff ff93 	bl	80070f6 <__sfputs_r>
 80071d0:	3001      	adds	r0, #1
 80071d2:	f000 80aa 	beq.w	800732a <_vfiprintf_r+0x20e>
 80071d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80071d8:	445a      	add	r2, fp
 80071da:	9209      	str	r2, [sp, #36]	; 0x24
 80071dc:	f89a 3000 	ldrb.w	r3, [sl]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	f000 80a2 	beq.w	800732a <_vfiprintf_r+0x20e>
 80071e6:	2300      	movs	r3, #0
 80071e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80071ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80071f0:	f10a 0a01 	add.w	sl, sl, #1
 80071f4:	9304      	str	r3, [sp, #16]
 80071f6:	9307      	str	r3, [sp, #28]
 80071f8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80071fc:	931a      	str	r3, [sp, #104]	; 0x68
 80071fe:	4654      	mov	r4, sl
 8007200:	2205      	movs	r2, #5
 8007202:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007206:	4858      	ldr	r0, [pc, #352]	; (8007368 <_vfiprintf_r+0x24c>)
 8007208:	f7f9 f802 	bl	8000210 <memchr>
 800720c:	9a04      	ldr	r2, [sp, #16]
 800720e:	b9d8      	cbnz	r0, 8007248 <_vfiprintf_r+0x12c>
 8007210:	06d1      	lsls	r1, r2, #27
 8007212:	bf44      	itt	mi
 8007214:	2320      	movmi	r3, #32
 8007216:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800721a:	0713      	lsls	r3, r2, #28
 800721c:	bf44      	itt	mi
 800721e:	232b      	movmi	r3, #43	; 0x2b
 8007220:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007224:	f89a 3000 	ldrb.w	r3, [sl]
 8007228:	2b2a      	cmp	r3, #42	; 0x2a
 800722a:	d015      	beq.n	8007258 <_vfiprintf_r+0x13c>
 800722c:	9a07      	ldr	r2, [sp, #28]
 800722e:	4654      	mov	r4, sl
 8007230:	2000      	movs	r0, #0
 8007232:	f04f 0c0a 	mov.w	ip, #10
 8007236:	4621      	mov	r1, r4
 8007238:	f811 3b01 	ldrb.w	r3, [r1], #1
 800723c:	3b30      	subs	r3, #48	; 0x30
 800723e:	2b09      	cmp	r3, #9
 8007240:	d94e      	bls.n	80072e0 <_vfiprintf_r+0x1c4>
 8007242:	b1b0      	cbz	r0, 8007272 <_vfiprintf_r+0x156>
 8007244:	9207      	str	r2, [sp, #28]
 8007246:	e014      	b.n	8007272 <_vfiprintf_r+0x156>
 8007248:	eba0 0308 	sub.w	r3, r0, r8
 800724c:	fa09 f303 	lsl.w	r3, r9, r3
 8007250:	4313      	orrs	r3, r2
 8007252:	9304      	str	r3, [sp, #16]
 8007254:	46a2      	mov	sl, r4
 8007256:	e7d2      	b.n	80071fe <_vfiprintf_r+0xe2>
 8007258:	9b03      	ldr	r3, [sp, #12]
 800725a:	1d19      	adds	r1, r3, #4
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	9103      	str	r1, [sp, #12]
 8007260:	2b00      	cmp	r3, #0
 8007262:	bfbb      	ittet	lt
 8007264:	425b      	neglt	r3, r3
 8007266:	f042 0202 	orrlt.w	r2, r2, #2
 800726a:	9307      	strge	r3, [sp, #28]
 800726c:	9307      	strlt	r3, [sp, #28]
 800726e:	bfb8      	it	lt
 8007270:	9204      	strlt	r2, [sp, #16]
 8007272:	7823      	ldrb	r3, [r4, #0]
 8007274:	2b2e      	cmp	r3, #46	; 0x2e
 8007276:	d10c      	bne.n	8007292 <_vfiprintf_r+0x176>
 8007278:	7863      	ldrb	r3, [r4, #1]
 800727a:	2b2a      	cmp	r3, #42	; 0x2a
 800727c:	d135      	bne.n	80072ea <_vfiprintf_r+0x1ce>
 800727e:	9b03      	ldr	r3, [sp, #12]
 8007280:	1d1a      	adds	r2, r3, #4
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	9203      	str	r2, [sp, #12]
 8007286:	2b00      	cmp	r3, #0
 8007288:	bfb8      	it	lt
 800728a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800728e:	3402      	adds	r4, #2
 8007290:	9305      	str	r3, [sp, #20]
 8007292:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007378 <_vfiprintf_r+0x25c>
 8007296:	7821      	ldrb	r1, [r4, #0]
 8007298:	2203      	movs	r2, #3
 800729a:	4650      	mov	r0, sl
 800729c:	f7f8 ffb8 	bl	8000210 <memchr>
 80072a0:	b140      	cbz	r0, 80072b4 <_vfiprintf_r+0x198>
 80072a2:	2340      	movs	r3, #64	; 0x40
 80072a4:	eba0 000a 	sub.w	r0, r0, sl
 80072a8:	fa03 f000 	lsl.w	r0, r3, r0
 80072ac:	9b04      	ldr	r3, [sp, #16]
 80072ae:	4303      	orrs	r3, r0
 80072b0:	3401      	adds	r4, #1
 80072b2:	9304      	str	r3, [sp, #16]
 80072b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072b8:	482c      	ldr	r0, [pc, #176]	; (800736c <_vfiprintf_r+0x250>)
 80072ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80072be:	2206      	movs	r2, #6
 80072c0:	f7f8 ffa6 	bl	8000210 <memchr>
 80072c4:	2800      	cmp	r0, #0
 80072c6:	d03f      	beq.n	8007348 <_vfiprintf_r+0x22c>
 80072c8:	4b29      	ldr	r3, [pc, #164]	; (8007370 <_vfiprintf_r+0x254>)
 80072ca:	bb1b      	cbnz	r3, 8007314 <_vfiprintf_r+0x1f8>
 80072cc:	9b03      	ldr	r3, [sp, #12]
 80072ce:	3307      	adds	r3, #7
 80072d0:	f023 0307 	bic.w	r3, r3, #7
 80072d4:	3308      	adds	r3, #8
 80072d6:	9303      	str	r3, [sp, #12]
 80072d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072da:	443b      	add	r3, r7
 80072dc:	9309      	str	r3, [sp, #36]	; 0x24
 80072de:	e767      	b.n	80071b0 <_vfiprintf_r+0x94>
 80072e0:	fb0c 3202 	mla	r2, ip, r2, r3
 80072e4:	460c      	mov	r4, r1
 80072e6:	2001      	movs	r0, #1
 80072e8:	e7a5      	b.n	8007236 <_vfiprintf_r+0x11a>
 80072ea:	2300      	movs	r3, #0
 80072ec:	3401      	adds	r4, #1
 80072ee:	9305      	str	r3, [sp, #20]
 80072f0:	4619      	mov	r1, r3
 80072f2:	f04f 0c0a 	mov.w	ip, #10
 80072f6:	4620      	mov	r0, r4
 80072f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80072fc:	3a30      	subs	r2, #48	; 0x30
 80072fe:	2a09      	cmp	r2, #9
 8007300:	d903      	bls.n	800730a <_vfiprintf_r+0x1ee>
 8007302:	2b00      	cmp	r3, #0
 8007304:	d0c5      	beq.n	8007292 <_vfiprintf_r+0x176>
 8007306:	9105      	str	r1, [sp, #20]
 8007308:	e7c3      	b.n	8007292 <_vfiprintf_r+0x176>
 800730a:	fb0c 2101 	mla	r1, ip, r1, r2
 800730e:	4604      	mov	r4, r0
 8007310:	2301      	movs	r3, #1
 8007312:	e7f0      	b.n	80072f6 <_vfiprintf_r+0x1da>
 8007314:	ab03      	add	r3, sp, #12
 8007316:	9300      	str	r3, [sp, #0]
 8007318:	462a      	mov	r2, r5
 800731a:	4b16      	ldr	r3, [pc, #88]	; (8007374 <_vfiprintf_r+0x258>)
 800731c:	a904      	add	r1, sp, #16
 800731e:	4630      	mov	r0, r6
 8007320:	f3af 8000 	nop.w
 8007324:	4607      	mov	r7, r0
 8007326:	1c78      	adds	r0, r7, #1
 8007328:	d1d6      	bne.n	80072d8 <_vfiprintf_r+0x1bc>
 800732a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800732c:	07d9      	lsls	r1, r3, #31
 800732e:	d405      	bmi.n	800733c <_vfiprintf_r+0x220>
 8007330:	89ab      	ldrh	r3, [r5, #12]
 8007332:	059a      	lsls	r2, r3, #22
 8007334:	d402      	bmi.n	800733c <_vfiprintf_r+0x220>
 8007336:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007338:	f7ff fe30 	bl	8006f9c <__retarget_lock_release_recursive>
 800733c:	89ab      	ldrh	r3, [r5, #12]
 800733e:	065b      	lsls	r3, r3, #25
 8007340:	f53f af12 	bmi.w	8007168 <_vfiprintf_r+0x4c>
 8007344:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007346:	e711      	b.n	800716c <_vfiprintf_r+0x50>
 8007348:	ab03      	add	r3, sp, #12
 800734a:	9300      	str	r3, [sp, #0]
 800734c:	462a      	mov	r2, r5
 800734e:	4b09      	ldr	r3, [pc, #36]	; (8007374 <_vfiprintf_r+0x258>)
 8007350:	a904      	add	r1, sp, #16
 8007352:	4630      	mov	r0, r6
 8007354:	f000 f880 	bl	8007458 <_printf_i>
 8007358:	e7e4      	b.n	8007324 <_vfiprintf_r+0x208>
 800735a:	bf00      	nop
 800735c:	08007db8 	.word	0x08007db8
 8007360:	08007dd8 	.word	0x08007dd8
 8007364:	08007d98 	.word	0x08007d98
 8007368:	08007df8 	.word	0x08007df8
 800736c:	08007e02 	.word	0x08007e02
 8007370:	00000000 	.word	0x00000000
 8007374:	080070f7 	.word	0x080070f7
 8007378:	08007dfe 	.word	0x08007dfe

0800737c <_printf_common>:
 800737c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007380:	4616      	mov	r6, r2
 8007382:	4699      	mov	r9, r3
 8007384:	688a      	ldr	r2, [r1, #8]
 8007386:	690b      	ldr	r3, [r1, #16]
 8007388:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800738c:	4293      	cmp	r3, r2
 800738e:	bfb8      	it	lt
 8007390:	4613      	movlt	r3, r2
 8007392:	6033      	str	r3, [r6, #0]
 8007394:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007398:	4607      	mov	r7, r0
 800739a:	460c      	mov	r4, r1
 800739c:	b10a      	cbz	r2, 80073a2 <_printf_common+0x26>
 800739e:	3301      	adds	r3, #1
 80073a0:	6033      	str	r3, [r6, #0]
 80073a2:	6823      	ldr	r3, [r4, #0]
 80073a4:	0699      	lsls	r1, r3, #26
 80073a6:	bf42      	ittt	mi
 80073a8:	6833      	ldrmi	r3, [r6, #0]
 80073aa:	3302      	addmi	r3, #2
 80073ac:	6033      	strmi	r3, [r6, #0]
 80073ae:	6825      	ldr	r5, [r4, #0]
 80073b0:	f015 0506 	ands.w	r5, r5, #6
 80073b4:	d106      	bne.n	80073c4 <_printf_common+0x48>
 80073b6:	f104 0a19 	add.w	sl, r4, #25
 80073ba:	68e3      	ldr	r3, [r4, #12]
 80073bc:	6832      	ldr	r2, [r6, #0]
 80073be:	1a9b      	subs	r3, r3, r2
 80073c0:	42ab      	cmp	r3, r5
 80073c2:	dc26      	bgt.n	8007412 <_printf_common+0x96>
 80073c4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80073c8:	1e13      	subs	r3, r2, #0
 80073ca:	6822      	ldr	r2, [r4, #0]
 80073cc:	bf18      	it	ne
 80073ce:	2301      	movne	r3, #1
 80073d0:	0692      	lsls	r2, r2, #26
 80073d2:	d42b      	bmi.n	800742c <_printf_common+0xb0>
 80073d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80073d8:	4649      	mov	r1, r9
 80073da:	4638      	mov	r0, r7
 80073dc:	47c0      	blx	r8
 80073de:	3001      	adds	r0, #1
 80073e0:	d01e      	beq.n	8007420 <_printf_common+0xa4>
 80073e2:	6823      	ldr	r3, [r4, #0]
 80073e4:	68e5      	ldr	r5, [r4, #12]
 80073e6:	6832      	ldr	r2, [r6, #0]
 80073e8:	f003 0306 	and.w	r3, r3, #6
 80073ec:	2b04      	cmp	r3, #4
 80073ee:	bf08      	it	eq
 80073f0:	1aad      	subeq	r5, r5, r2
 80073f2:	68a3      	ldr	r3, [r4, #8]
 80073f4:	6922      	ldr	r2, [r4, #16]
 80073f6:	bf0c      	ite	eq
 80073f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80073fc:	2500      	movne	r5, #0
 80073fe:	4293      	cmp	r3, r2
 8007400:	bfc4      	itt	gt
 8007402:	1a9b      	subgt	r3, r3, r2
 8007404:	18ed      	addgt	r5, r5, r3
 8007406:	2600      	movs	r6, #0
 8007408:	341a      	adds	r4, #26
 800740a:	42b5      	cmp	r5, r6
 800740c:	d11a      	bne.n	8007444 <_printf_common+0xc8>
 800740e:	2000      	movs	r0, #0
 8007410:	e008      	b.n	8007424 <_printf_common+0xa8>
 8007412:	2301      	movs	r3, #1
 8007414:	4652      	mov	r2, sl
 8007416:	4649      	mov	r1, r9
 8007418:	4638      	mov	r0, r7
 800741a:	47c0      	blx	r8
 800741c:	3001      	adds	r0, #1
 800741e:	d103      	bne.n	8007428 <_printf_common+0xac>
 8007420:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007424:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007428:	3501      	adds	r5, #1
 800742a:	e7c6      	b.n	80073ba <_printf_common+0x3e>
 800742c:	18e1      	adds	r1, r4, r3
 800742e:	1c5a      	adds	r2, r3, #1
 8007430:	2030      	movs	r0, #48	; 0x30
 8007432:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007436:	4422      	add	r2, r4
 8007438:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800743c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007440:	3302      	adds	r3, #2
 8007442:	e7c7      	b.n	80073d4 <_printf_common+0x58>
 8007444:	2301      	movs	r3, #1
 8007446:	4622      	mov	r2, r4
 8007448:	4649      	mov	r1, r9
 800744a:	4638      	mov	r0, r7
 800744c:	47c0      	blx	r8
 800744e:	3001      	adds	r0, #1
 8007450:	d0e6      	beq.n	8007420 <_printf_common+0xa4>
 8007452:	3601      	adds	r6, #1
 8007454:	e7d9      	b.n	800740a <_printf_common+0x8e>
	...

08007458 <_printf_i>:
 8007458:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800745c:	7e0f      	ldrb	r7, [r1, #24]
 800745e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007460:	2f78      	cmp	r7, #120	; 0x78
 8007462:	4691      	mov	r9, r2
 8007464:	4680      	mov	r8, r0
 8007466:	460c      	mov	r4, r1
 8007468:	469a      	mov	sl, r3
 800746a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800746e:	d807      	bhi.n	8007480 <_printf_i+0x28>
 8007470:	2f62      	cmp	r7, #98	; 0x62
 8007472:	d80a      	bhi.n	800748a <_printf_i+0x32>
 8007474:	2f00      	cmp	r7, #0
 8007476:	f000 80d8 	beq.w	800762a <_printf_i+0x1d2>
 800747a:	2f58      	cmp	r7, #88	; 0x58
 800747c:	f000 80a3 	beq.w	80075c6 <_printf_i+0x16e>
 8007480:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007484:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007488:	e03a      	b.n	8007500 <_printf_i+0xa8>
 800748a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800748e:	2b15      	cmp	r3, #21
 8007490:	d8f6      	bhi.n	8007480 <_printf_i+0x28>
 8007492:	a101      	add	r1, pc, #4	; (adr r1, 8007498 <_printf_i+0x40>)
 8007494:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007498:	080074f1 	.word	0x080074f1
 800749c:	08007505 	.word	0x08007505
 80074a0:	08007481 	.word	0x08007481
 80074a4:	08007481 	.word	0x08007481
 80074a8:	08007481 	.word	0x08007481
 80074ac:	08007481 	.word	0x08007481
 80074b0:	08007505 	.word	0x08007505
 80074b4:	08007481 	.word	0x08007481
 80074b8:	08007481 	.word	0x08007481
 80074bc:	08007481 	.word	0x08007481
 80074c0:	08007481 	.word	0x08007481
 80074c4:	08007611 	.word	0x08007611
 80074c8:	08007535 	.word	0x08007535
 80074cc:	080075f3 	.word	0x080075f3
 80074d0:	08007481 	.word	0x08007481
 80074d4:	08007481 	.word	0x08007481
 80074d8:	08007633 	.word	0x08007633
 80074dc:	08007481 	.word	0x08007481
 80074e0:	08007535 	.word	0x08007535
 80074e4:	08007481 	.word	0x08007481
 80074e8:	08007481 	.word	0x08007481
 80074ec:	080075fb 	.word	0x080075fb
 80074f0:	682b      	ldr	r3, [r5, #0]
 80074f2:	1d1a      	adds	r2, r3, #4
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	602a      	str	r2, [r5, #0]
 80074f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80074fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007500:	2301      	movs	r3, #1
 8007502:	e0a3      	b.n	800764c <_printf_i+0x1f4>
 8007504:	6820      	ldr	r0, [r4, #0]
 8007506:	6829      	ldr	r1, [r5, #0]
 8007508:	0606      	lsls	r6, r0, #24
 800750a:	f101 0304 	add.w	r3, r1, #4
 800750e:	d50a      	bpl.n	8007526 <_printf_i+0xce>
 8007510:	680e      	ldr	r6, [r1, #0]
 8007512:	602b      	str	r3, [r5, #0]
 8007514:	2e00      	cmp	r6, #0
 8007516:	da03      	bge.n	8007520 <_printf_i+0xc8>
 8007518:	232d      	movs	r3, #45	; 0x2d
 800751a:	4276      	negs	r6, r6
 800751c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007520:	485e      	ldr	r0, [pc, #376]	; (800769c <_printf_i+0x244>)
 8007522:	230a      	movs	r3, #10
 8007524:	e019      	b.n	800755a <_printf_i+0x102>
 8007526:	680e      	ldr	r6, [r1, #0]
 8007528:	602b      	str	r3, [r5, #0]
 800752a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800752e:	bf18      	it	ne
 8007530:	b236      	sxthne	r6, r6
 8007532:	e7ef      	b.n	8007514 <_printf_i+0xbc>
 8007534:	682b      	ldr	r3, [r5, #0]
 8007536:	6820      	ldr	r0, [r4, #0]
 8007538:	1d19      	adds	r1, r3, #4
 800753a:	6029      	str	r1, [r5, #0]
 800753c:	0601      	lsls	r1, r0, #24
 800753e:	d501      	bpl.n	8007544 <_printf_i+0xec>
 8007540:	681e      	ldr	r6, [r3, #0]
 8007542:	e002      	b.n	800754a <_printf_i+0xf2>
 8007544:	0646      	lsls	r6, r0, #25
 8007546:	d5fb      	bpl.n	8007540 <_printf_i+0xe8>
 8007548:	881e      	ldrh	r6, [r3, #0]
 800754a:	4854      	ldr	r0, [pc, #336]	; (800769c <_printf_i+0x244>)
 800754c:	2f6f      	cmp	r7, #111	; 0x6f
 800754e:	bf0c      	ite	eq
 8007550:	2308      	moveq	r3, #8
 8007552:	230a      	movne	r3, #10
 8007554:	2100      	movs	r1, #0
 8007556:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800755a:	6865      	ldr	r5, [r4, #4]
 800755c:	60a5      	str	r5, [r4, #8]
 800755e:	2d00      	cmp	r5, #0
 8007560:	bfa2      	ittt	ge
 8007562:	6821      	ldrge	r1, [r4, #0]
 8007564:	f021 0104 	bicge.w	r1, r1, #4
 8007568:	6021      	strge	r1, [r4, #0]
 800756a:	b90e      	cbnz	r6, 8007570 <_printf_i+0x118>
 800756c:	2d00      	cmp	r5, #0
 800756e:	d04d      	beq.n	800760c <_printf_i+0x1b4>
 8007570:	4615      	mov	r5, r2
 8007572:	fbb6 f1f3 	udiv	r1, r6, r3
 8007576:	fb03 6711 	mls	r7, r3, r1, r6
 800757a:	5dc7      	ldrb	r7, [r0, r7]
 800757c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007580:	4637      	mov	r7, r6
 8007582:	42bb      	cmp	r3, r7
 8007584:	460e      	mov	r6, r1
 8007586:	d9f4      	bls.n	8007572 <_printf_i+0x11a>
 8007588:	2b08      	cmp	r3, #8
 800758a:	d10b      	bne.n	80075a4 <_printf_i+0x14c>
 800758c:	6823      	ldr	r3, [r4, #0]
 800758e:	07de      	lsls	r6, r3, #31
 8007590:	d508      	bpl.n	80075a4 <_printf_i+0x14c>
 8007592:	6923      	ldr	r3, [r4, #16]
 8007594:	6861      	ldr	r1, [r4, #4]
 8007596:	4299      	cmp	r1, r3
 8007598:	bfde      	ittt	le
 800759a:	2330      	movle	r3, #48	; 0x30
 800759c:	f805 3c01 	strble.w	r3, [r5, #-1]
 80075a0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80075a4:	1b52      	subs	r2, r2, r5
 80075a6:	6122      	str	r2, [r4, #16]
 80075a8:	f8cd a000 	str.w	sl, [sp]
 80075ac:	464b      	mov	r3, r9
 80075ae:	aa03      	add	r2, sp, #12
 80075b0:	4621      	mov	r1, r4
 80075b2:	4640      	mov	r0, r8
 80075b4:	f7ff fee2 	bl	800737c <_printf_common>
 80075b8:	3001      	adds	r0, #1
 80075ba:	d14c      	bne.n	8007656 <_printf_i+0x1fe>
 80075bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80075c0:	b004      	add	sp, #16
 80075c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075c6:	4835      	ldr	r0, [pc, #212]	; (800769c <_printf_i+0x244>)
 80075c8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80075cc:	6829      	ldr	r1, [r5, #0]
 80075ce:	6823      	ldr	r3, [r4, #0]
 80075d0:	f851 6b04 	ldr.w	r6, [r1], #4
 80075d4:	6029      	str	r1, [r5, #0]
 80075d6:	061d      	lsls	r5, r3, #24
 80075d8:	d514      	bpl.n	8007604 <_printf_i+0x1ac>
 80075da:	07df      	lsls	r7, r3, #31
 80075dc:	bf44      	itt	mi
 80075de:	f043 0320 	orrmi.w	r3, r3, #32
 80075e2:	6023      	strmi	r3, [r4, #0]
 80075e4:	b91e      	cbnz	r6, 80075ee <_printf_i+0x196>
 80075e6:	6823      	ldr	r3, [r4, #0]
 80075e8:	f023 0320 	bic.w	r3, r3, #32
 80075ec:	6023      	str	r3, [r4, #0]
 80075ee:	2310      	movs	r3, #16
 80075f0:	e7b0      	b.n	8007554 <_printf_i+0xfc>
 80075f2:	6823      	ldr	r3, [r4, #0]
 80075f4:	f043 0320 	orr.w	r3, r3, #32
 80075f8:	6023      	str	r3, [r4, #0]
 80075fa:	2378      	movs	r3, #120	; 0x78
 80075fc:	4828      	ldr	r0, [pc, #160]	; (80076a0 <_printf_i+0x248>)
 80075fe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007602:	e7e3      	b.n	80075cc <_printf_i+0x174>
 8007604:	0659      	lsls	r1, r3, #25
 8007606:	bf48      	it	mi
 8007608:	b2b6      	uxthmi	r6, r6
 800760a:	e7e6      	b.n	80075da <_printf_i+0x182>
 800760c:	4615      	mov	r5, r2
 800760e:	e7bb      	b.n	8007588 <_printf_i+0x130>
 8007610:	682b      	ldr	r3, [r5, #0]
 8007612:	6826      	ldr	r6, [r4, #0]
 8007614:	6961      	ldr	r1, [r4, #20]
 8007616:	1d18      	adds	r0, r3, #4
 8007618:	6028      	str	r0, [r5, #0]
 800761a:	0635      	lsls	r5, r6, #24
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	d501      	bpl.n	8007624 <_printf_i+0x1cc>
 8007620:	6019      	str	r1, [r3, #0]
 8007622:	e002      	b.n	800762a <_printf_i+0x1d2>
 8007624:	0670      	lsls	r0, r6, #25
 8007626:	d5fb      	bpl.n	8007620 <_printf_i+0x1c8>
 8007628:	8019      	strh	r1, [r3, #0]
 800762a:	2300      	movs	r3, #0
 800762c:	6123      	str	r3, [r4, #16]
 800762e:	4615      	mov	r5, r2
 8007630:	e7ba      	b.n	80075a8 <_printf_i+0x150>
 8007632:	682b      	ldr	r3, [r5, #0]
 8007634:	1d1a      	adds	r2, r3, #4
 8007636:	602a      	str	r2, [r5, #0]
 8007638:	681d      	ldr	r5, [r3, #0]
 800763a:	6862      	ldr	r2, [r4, #4]
 800763c:	2100      	movs	r1, #0
 800763e:	4628      	mov	r0, r5
 8007640:	f7f8 fde6 	bl	8000210 <memchr>
 8007644:	b108      	cbz	r0, 800764a <_printf_i+0x1f2>
 8007646:	1b40      	subs	r0, r0, r5
 8007648:	6060      	str	r0, [r4, #4]
 800764a:	6863      	ldr	r3, [r4, #4]
 800764c:	6123      	str	r3, [r4, #16]
 800764e:	2300      	movs	r3, #0
 8007650:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007654:	e7a8      	b.n	80075a8 <_printf_i+0x150>
 8007656:	6923      	ldr	r3, [r4, #16]
 8007658:	462a      	mov	r2, r5
 800765a:	4649      	mov	r1, r9
 800765c:	4640      	mov	r0, r8
 800765e:	47d0      	blx	sl
 8007660:	3001      	adds	r0, #1
 8007662:	d0ab      	beq.n	80075bc <_printf_i+0x164>
 8007664:	6823      	ldr	r3, [r4, #0]
 8007666:	079b      	lsls	r3, r3, #30
 8007668:	d413      	bmi.n	8007692 <_printf_i+0x23a>
 800766a:	68e0      	ldr	r0, [r4, #12]
 800766c:	9b03      	ldr	r3, [sp, #12]
 800766e:	4298      	cmp	r0, r3
 8007670:	bfb8      	it	lt
 8007672:	4618      	movlt	r0, r3
 8007674:	e7a4      	b.n	80075c0 <_printf_i+0x168>
 8007676:	2301      	movs	r3, #1
 8007678:	4632      	mov	r2, r6
 800767a:	4649      	mov	r1, r9
 800767c:	4640      	mov	r0, r8
 800767e:	47d0      	blx	sl
 8007680:	3001      	adds	r0, #1
 8007682:	d09b      	beq.n	80075bc <_printf_i+0x164>
 8007684:	3501      	adds	r5, #1
 8007686:	68e3      	ldr	r3, [r4, #12]
 8007688:	9903      	ldr	r1, [sp, #12]
 800768a:	1a5b      	subs	r3, r3, r1
 800768c:	42ab      	cmp	r3, r5
 800768e:	dcf2      	bgt.n	8007676 <_printf_i+0x21e>
 8007690:	e7eb      	b.n	800766a <_printf_i+0x212>
 8007692:	2500      	movs	r5, #0
 8007694:	f104 0619 	add.w	r6, r4, #25
 8007698:	e7f5      	b.n	8007686 <_printf_i+0x22e>
 800769a:	bf00      	nop
 800769c:	08007e09 	.word	0x08007e09
 80076a0:	08007e1a 	.word	0x08007e1a

080076a4 <_sbrk_r>:
 80076a4:	b538      	push	{r3, r4, r5, lr}
 80076a6:	4d06      	ldr	r5, [pc, #24]	; (80076c0 <_sbrk_r+0x1c>)
 80076a8:	2300      	movs	r3, #0
 80076aa:	4604      	mov	r4, r0
 80076ac:	4608      	mov	r0, r1
 80076ae:	602b      	str	r3, [r5, #0]
 80076b0:	f7f9 fd18 	bl	80010e4 <_sbrk>
 80076b4:	1c43      	adds	r3, r0, #1
 80076b6:	d102      	bne.n	80076be <_sbrk_r+0x1a>
 80076b8:	682b      	ldr	r3, [r5, #0]
 80076ba:	b103      	cbz	r3, 80076be <_sbrk_r+0x1a>
 80076bc:	6023      	str	r3, [r4, #0]
 80076be:	bd38      	pop	{r3, r4, r5, pc}
 80076c0:	20004bfc 	.word	0x20004bfc

080076c4 <__sread>:
 80076c4:	b510      	push	{r4, lr}
 80076c6:	460c      	mov	r4, r1
 80076c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076cc:	f000 fab2 	bl	8007c34 <_read_r>
 80076d0:	2800      	cmp	r0, #0
 80076d2:	bfab      	itete	ge
 80076d4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80076d6:	89a3      	ldrhlt	r3, [r4, #12]
 80076d8:	181b      	addge	r3, r3, r0
 80076da:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80076de:	bfac      	ite	ge
 80076e0:	6563      	strge	r3, [r4, #84]	; 0x54
 80076e2:	81a3      	strhlt	r3, [r4, #12]
 80076e4:	bd10      	pop	{r4, pc}

080076e6 <__swrite>:
 80076e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076ea:	461f      	mov	r7, r3
 80076ec:	898b      	ldrh	r3, [r1, #12]
 80076ee:	05db      	lsls	r3, r3, #23
 80076f0:	4605      	mov	r5, r0
 80076f2:	460c      	mov	r4, r1
 80076f4:	4616      	mov	r6, r2
 80076f6:	d505      	bpl.n	8007704 <__swrite+0x1e>
 80076f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076fc:	2302      	movs	r3, #2
 80076fe:	2200      	movs	r2, #0
 8007700:	f000 f9c8 	bl	8007a94 <_lseek_r>
 8007704:	89a3      	ldrh	r3, [r4, #12]
 8007706:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800770a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800770e:	81a3      	strh	r3, [r4, #12]
 8007710:	4632      	mov	r2, r6
 8007712:	463b      	mov	r3, r7
 8007714:	4628      	mov	r0, r5
 8007716:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800771a:	f000 b869 	b.w	80077f0 <_write_r>

0800771e <__sseek>:
 800771e:	b510      	push	{r4, lr}
 8007720:	460c      	mov	r4, r1
 8007722:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007726:	f000 f9b5 	bl	8007a94 <_lseek_r>
 800772a:	1c43      	adds	r3, r0, #1
 800772c:	89a3      	ldrh	r3, [r4, #12]
 800772e:	bf15      	itete	ne
 8007730:	6560      	strne	r0, [r4, #84]	; 0x54
 8007732:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007736:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800773a:	81a3      	strheq	r3, [r4, #12]
 800773c:	bf18      	it	ne
 800773e:	81a3      	strhne	r3, [r4, #12]
 8007740:	bd10      	pop	{r4, pc}

08007742 <__sclose>:
 8007742:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007746:	f000 b8d3 	b.w	80078f0 <_close_r>
	...

0800774c <__swbuf_r>:
 800774c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800774e:	460e      	mov	r6, r1
 8007750:	4614      	mov	r4, r2
 8007752:	4605      	mov	r5, r0
 8007754:	b118      	cbz	r0, 800775e <__swbuf_r+0x12>
 8007756:	6983      	ldr	r3, [r0, #24]
 8007758:	b90b      	cbnz	r3, 800775e <__swbuf_r+0x12>
 800775a:	f7ff fb6d 	bl	8006e38 <__sinit>
 800775e:	4b21      	ldr	r3, [pc, #132]	; (80077e4 <__swbuf_r+0x98>)
 8007760:	429c      	cmp	r4, r3
 8007762:	d12b      	bne.n	80077bc <__swbuf_r+0x70>
 8007764:	686c      	ldr	r4, [r5, #4]
 8007766:	69a3      	ldr	r3, [r4, #24]
 8007768:	60a3      	str	r3, [r4, #8]
 800776a:	89a3      	ldrh	r3, [r4, #12]
 800776c:	071a      	lsls	r2, r3, #28
 800776e:	d52f      	bpl.n	80077d0 <__swbuf_r+0x84>
 8007770:	6923      	ldr	r3, [r4, #16]
 8007772:	b36b      	cbz	r3, 80077d0 <__swbuf_r+0x84>
 8007774:	6923      	ldr	r3, [r4, #16]
 8007776:	6820      	ldr	r0, [r4, #0]
 8007778:	1ac0      	subs	r0, r0, r3
 800777a:	6963      	ldr	r3, [r4, #20]
 800777c:	b2f6      	uxtb	r6, r6
 800777e:	4283      	cmp	r3, r0
 8007780:	4637      	mov	r7, r6
 8007782:	dc04      	bgt.n	800778e <__swbuf_r+0x42>
 8007784:	4621      	mov	r1, r4
 8007786:	4628      	mov	r0, r5
 8007788:	f000 f948 	bl	8007a1c <_fflush_r>
 800778c:	bb30      	cbnz	r0, 80077dc <__swbuf_r+0x90>
 800778e:	68a3      	ldr	r3, [r4, #8]
 8007790:	3b01      	subs	r3, #1
 8007792:	60a3      	str	r3, [r4, #8]
 8007794:	6823      	ldr	r3, [r4, #0]
 8007796:	1c5a      	adds	r2, r3, #1
 8007798:	6022      	str	r2, [r4, #0]
 800779a:	701e      	strb	r6, [r3, #0]
 800779c:	6963      	ldr	r3, [r4, #20]
 800779e:	3001      	adds	r0, #1
 80077a0:	4283      	cmp	r3, r0
 80077a2:	d004      	beq.n	80077ae <__swbuf_r+0x62>
 80077a4:	89a3      	ldrh	r3, [r4, #12]
 80077a6:	07db      	lsls	r3, r3, #31
 80077a8:	d506      	bpl.n	80077b8 <__swbuf_r+0x6c>
 80077aa:	2e0a      	cmp	r6, #10
 80077ac:	d104      	bne.n	80077b8 <__swbuf_r+0x6c>
 80077ae:	4621      	mov	r1, r4
 80077b0:	4628      	mov	r0, r5
 80077b2:	f000 f933 	bl	8007a1c <_fflush_r>
 80077b6:	b988      	cbnz	r0, 80077dc <__swbuf_r+0x90>
 80077b8:	4638      	mov	r0, r7
 80077ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80077bc:	4b0a      	ldr	r3, [pc, #40]	; (80077e8 <__swbuf_r+0x9c>)
 80077be:	429c      	cmp	r4, r3
 80077c0:	d101      	bne.n	80077c6 <__swbuf_r+0x7a>
 80077c2:	68ac      	ldr	r4, [r5, #8]
 80077c4:	e7cf      	b.n	8007766 <__swbuf_r+0x1a>
 80077c6:	4b09      	ldr	r3, [pc, #36]	; (80077ec <__swbuf_r+0xa0>)
 80077c8:	429c      	cmp	r4, r3
 80077ca:	bf08      	it	eq
 80077cc:	68ec      	ldreq	r4, [r5, #12]
 80077ce:	e7ca      	b.n	8007766 <__swbuf_r+0x1a>
 80077d0:	4621      	mov	r1, r4
 80077d2:	4628      	mov	r0, r5
 80077d4:	f000 f81e 	bl	8007814 <__swsetup_r>
 80077d8:	2800      	cmp	r0, #0
 80077da:	d0cb      	beq.n	8007774 <__swbuf_r+0x28>
 80077dc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80077e0:	e7ea      	b.n	80077b8 <__swbuf_r+0x6c>
 80077e2:	bf00      	nop
 80077e4:	08007db8 	.word	0x08007db8
 80077e8:	08007dd8 	.word	0x08007dd8
 80077ec:	08007d98 	.word	0x08007d98

080077f0 <_write_r>:
 80077f0:	b538      	push	{r3, r4, r5, lr}
 80077f2:	4d07      	ldr	r5, [pc, #28]	; (8007810 <_write_r+0x20>)
 80077f4:	4604      	mov	r4, r0
 80077f6:	4608      	mov	r0, r1
 80077f8:	4611      	mov	r1, r2
 80077fa:	2200      	movs	r2, #0
 80077fc:	602a      	str	r2, [r5, #0]
 80077fe:	461a      	mov	r2, r3
 8007800:	f7f9 f896 	bl	8000930 <_write>
 8007804:	1c43      	adds	r3, r0, #1
 8007806:	d102      	bne.n	800780e <_write_r+0x1e>
 8007808:	682b      	ldr	r3, [r5, #0]
 800780a:	b103      	cbz	r3, 800780e <_write_r+0x1e>
 800780c:	6023      	str	r3, [r4, #0]
 800780e:	bd38      	pop	{r3, r4, r5, pc}
 8007810:	20004bfc 	.word	0x20004bfc

08007814 <__swsetup_r>:
 8007814:	4b32      	ldr	r3, [pc, #200]	; (80078e0 <__swsetup_r+0xcc>)
 8007816:	b570      	push	{r4, r5, r6, lr}
 8007818:	681d      	ldr	r5, [r3, #0]
 800781a:	4606      	mov	r6, r0
 800781c:	460c      	mov	r4, r1
 800781e:	b125      	cbz	r5, 800782a <__swsetup_r+0x16>
 8007820:	69ab      	ldr	r3, [r5, #24]
 8007822:	b913      	cbnz	r3, 800782a <__swsetup_r+0x16>
 8007824:	4628      	mov	r0, r5
 8007826:	f7ff fb07 	bl	8006e38 <__sinit>
 800782a:	4b2e      	ldr	r3, [pc, #184]	; (80078e4 <__swsetup_r+0xd0>)
 800782c:	429c      	cmp	r4, r3
 800782e:	d10f      	bne.n	8007850 <__swsetup_r+0x3c>
 8007830:	686c      	ldr	r4, [r5, #4]
 8007832:	89a3      	ldrh	r3, [r4, #12]
 8007834:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007838:	0719      	lsls	r1, r3, #28
 800783a:	d42c      	bmi.n	8007896 <__swsetup_r+0x82>
 800783c:	06dd      	lsls	r5, r3, #27
 800783e:	d411      	bmi.n	8007864 <__swsetup_r+0x50>
 8007840:	2309      	movs	r3, #9
 8007842:	6033      	str	r3, [r6, #0]
 8007844:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007848:	81a3      	strh	r3, [r4, #12]
 800784a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800784e:	e03e      	b.n	80078ce <__swsetup_r+0xba>
 8007850:	4b25      	ldr	r3, [pc, #148]	; (80078e8 <__swsetup_r+0xd4>)
 8007852:	429c      	cmp	r4, r3
 8007854:	d101      	bne.n	800785a <__swsetup_r+0x46>
 8007856:	68ac      	ldr	r4, [r5, #8]
 8007858:	e7eb      	b.n	8007832 <__swsetup_r+0x1e>
 800785a:	4b24      	ldr	r3, [pc, #144]	; (80078ec <__swsetup_r+0xd8>)
 800785c:	429c      	cmp	r4, r3
 800785e:	bf08      	it	eq
 8007860:	68ec      	ldreq	r4, [r5, #12]
 8007862:	e7e6      	b.n	8007832 <__swsetup_r+0x1e>
 8007864:	0758      	lsls	r0, r3, #29
 8007866:	d512      	bpl.n	800788e <__swsetup_r+0x7a>
 8007868:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800786a:	b141      	cbz	r1, 800787e <__swsetup_r+0x6a>
 800786c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007870:	4299      	cmp	r1, r3
 8007872:	d002      	beq.n	800787a <__swsetup_r+0x66>
 8007874:	4630      	mov	r0, r6
 8007876:	f000 f991 	bl	8007b9c <_free_r>
 800787a:	2300      	movs	r3, #0
 800787c:	6363      	str	r3, [r4, #52]	; 0x34
 800787e:	89a3      	ldrh	r3, [r4, #12]
 8007880:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007884:	81a3      	strh	r3, [r4, #12]
 8007886:	2300      	movs	r3, #0
 8007888:	6063      	str	r3, [r4, #4]
 800788a:	6923      	ldr	r3, [r4, #16]
 800788c:	6023      	str	r3, [r4, #0]
 800788e:	89a3      	ldrh	r3, [r4, #12]
 8007890:	f043 0308 	orr.w	r3, r3, #8
 8007894:	81a3      	strh	r3, [r4, #12]
 8007896:	6923      	ldr	r3, [r4, #16]
 8007898:	b94b      	cbnz	r3, 80078ae <__swsetup_r+0x9a>
 800789a:	89a3      	ldrh	r3, [r4, #12]
 800789c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80078a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80078a4:	d003      	beq.n	80078ae <__swsetup_r+0x9a>
 80078a6:	4621      	mov	r1, r4
 80078a8:	4630      	mov	r0, r6
 80078aa:	f000 f92b 	bl	8007b04 <__smakebuf_r>
 80078ae:	89a0      	ldrh	r0, [r4, #12]
 80078b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80078b4:	f010 0301 	ands.w	r3, r0, #1
 80078b8:	d00a      	beq.n	80078d0 <__swsetup_r+0xbc>
 80078ba:	2300      	movs	r3, #0
 80078bc:	60a3      	str	r3, [r4, #8]
 80078be:	6963      	ldr	r3, [r4, #20]
 80078c0:	425b      	negs	r3, r3
 80078c2:	61a3      	str	r3, [r4, #24]
 80078c4:	6923      	ldr	r3, [r4, #16]
 80078c6:	b943      	cbnz	r3, 80078da <__swsetup_r+0xc6>
 80078c8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80078cc:	d1ba      	bne.n	8007844 <__swsetup_r+0x30>
 80078ce:	bd70      	pop	{r4, r5, r6, pc}
 80078d0:	0781      	lsls	r1, r0, #30
 80078d2:	bf58      	it	pl
 80078d4:	6963      	ldrpl	r3, [r4, #20]
 80078d6:	60a3      	str	r3, [r4, #8]
 80078d8:	e7f4      	b.n	80078c4 <__swsetup_r+0xb0>
 80078da:	2000      	movs	r0, #0
 80078dc:	e7f7      	b.n	80078ce <__swsetup_r+0xba>
 80078de:	bf00      	nop
 80078e0:	200000cc 	.word	0x200000cc
 80078e4:	08007db8 	.word	0x08007db8
 80078e8:	08007dd8 	.word	0x08007dd8
 80078ec:	08007d98 	.word	0x08007d98

080078f0 <_close_r>:
 80078f0:	b538      	push	{r3, r4, r5, lr}
 80078f2:	4d06      	ldr	r5, [pc, #24]	; (800790c <_close_r+0x1c>)
 80078f4:	2300      	movs	r3, #0
 80078f6:	4604      	mov	r4, r0
 80078f8:	4608      	mov	r0, r1
 80078fa:	602b      	str	r3, [r5, #0]
 80078fc:	f7f9 fbbd 	bl	800107a <_close>
 8007900:	1c43      	adds	r3, r0, #1
 8007902:	d102      	bne.n	800790a <_close_r+0x1a>
 8007904:	682b      	ldr	r3, [r5, #0]
 8007906:	b103      	cbz	r3, 800790a <_close_r+0x1a>
 8007908:	6023      	str	r3, [r4, #0]
 800790a:	bd38      	pop	{r3, r4, r5, pc}
 800790c:	20004bfc 	.word	0x20004bfc

08007910 <__sflush_r>:
 8007910:	898a      	ldrh	r2, [r1, #12]
 8007912:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007916:	4605      	mov	r5, r0
 8007918:	0710      	lsls	r0, r2, #28
 800791a:	460c      	mov	r4, r1
 800791c:	d458      	bmi.n	80079d0 <__sflush_r+0xc0>
 800791e:	684b      	ldr	r3, [r1, #4]
 8007920:	2b00      	cmp	r3, #0
 8007922:	dc05      	bgt.n	8007930 <__sflush_r+0x20>
 8007924:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007926:	2b00      	cmp	r3, #0
 8007928:	dc02      	bgt.n	8007930 <__sflush_r+0x20>
 800792a:	2000      	movs	r0, #0
 800792c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007930:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007932:	2e00      	cmp	r6, #0
 8007934:	d0f9      	beq.n	800792a <__sflush_r+0x1a>
 8007936:	2300      	movs	r3, #0
 8007938:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800793c:	682f      	ldr	r7, [r5, #0]
 800793e:	602b      	str	r3, [r5, #0]
 8007940:	d032      	beq.n	80079a8 <__sflush_r+0x98>
 8007942:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007944:	89a3      	ldrh	r3, [r4, #12]
 8007946:	075a      	lsls	r2, r3, #29
 8007948:	d505      	bpl.n	8007956 <__sflush_r+0x46>
 800794a:	6863      	ldr	r3, [r4, #4]
 800794c:	1ac0      	subs	r0, r0, r3
 800794e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007950:	b10b      	cbz	r3, 8007956 <__sflush_r+0x46>
 8007952:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007954:	1ac0      	subs	r0, r0, r3
 8007956:	2300      	movs	r3, #0
 8007958:	4602      	mov	r2, r0
 800795a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800795c:	6a21      	ldr	r1, [r4, #32]
 800795e:	4628      	mov	r0, r5
 8007960:	47b0      	blx	r6
 8007962:	1c43      	adds	r3, r0, #1
 8007964:	89a3      	ldrh	r3, [r4, #12]
 8007966:	d106      	bne.n	8007976 <__sflush_r+0x66>
 8007968:	6829      	ldr	r1, [r5, #0]
 800796a:	291d      	cmp	r1, #29
 800796c:	d82c      	bhi.n	80079c8 <__sflush_r+0xb8>
 800796e:	4a2a      	ldr	r2, [pc, #168]	; (8007a18 <__sflush_r+0x108>)
 8007970:	40ca      	lsrs	r2, r1
 8007972:	07d6      	lsls	r6, r2, #31
 8007974:	d528      	bpl.n	80079c8 <__sflush_r+0xb8>
 8007976:	2200      	movs	r2, #0
 8007978:	6062      	str	r2, [r4, #4]
 800797a:	04d9      	lsls	r1, r3, #19
 800797c:	6922      	ldr	r2, [r4, #16]
 800797e:	6022      	str	r2, [r4, #0]
 8007980:	d504      	bpl.n	800798c <__sflush_r+0x7c>
 8007982:	1c42      	adds	r2, r0, #1
 8007984:	d101      	bne.n	800798a <__sflush_r+0x7a>
 8007986:	682b      	ldr	r3, [r5, #0]
 8007988:	b903      	cbnz	r3, 800798c <__sflush_r+0x7c>
 800798a:	6560      	str	r0, [r4, #84]	; 0x54
 800798c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800798e:	602f      	str	r7, [r5, #0]
 8007990:	2900      	cmp	r1, #0
 8007992:	d0ca      	beq.n	800792a <__sflush_r+0x1a>
 8007994:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007998:	4299      	cmp	r1, r3
 800799a:	d002      	beq.n	80079a2 <__sflush_r+0x92>
 800799c:	4628      	mov	r0, r5
 800799e:	f000 f8fd 	bl	8007b9c <_free_r>
 80079a2:	2000      	movs	r0, #0
 80079a4:	6360      	str	r0, [r4, #52]	; 0x34
 80079a6:	e7c1      	b.n	800792c <__sflush_r+0x1c>
 80079a8:	6a21      	ldr	r1, [r4, #32]
 80079aa:	2301      	movs	r3, #1
 80079ac:	4628      	mov	r0, r5
 80079ae:	47b0      	blx	r6
 80079b0:	1c41      	adds	r1, r0, #1
 80079b2:	d1c7      	bne.n	8007944 <__sflush_r+0x34>
 80079b4:	682b      	ldr	r3, [r5, #0]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d0c4      	beq.n	8007944 <__sflush_r+0x34>
 80079ba:	2b1d      	cmp	r3, #29
 80079bc:	d001      	beq.n	80079c2 <__sflush_r+0xb2>
 80079be:	2b16      	cmp	r3, #22
 80079c0:	d101      	bne.n	80079c6 <__sflush_r+0xb6>
 80079c2:	602f      	str	r7, [r5, #0]
 80079c4:	e7b1      	b.n	800792a <__sflush_r+0x1a>
 80079c6:	89a3      	ldrh	r3, [r4, #12]
 80079c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80079cc:	81a3      	strh	r3, [r4, #12]
 80079ce:	e7ad      	b.n	800792c <__sflush_r+0x1c>
 80079d0:	690f      	ldr	r7, [r1, #16]
 80079d2:	2f00      	cmp	r7, #0
 80079d4:	d0a9      	beq.n	800792a <__sflush_r+0x1a>
 80079d6:	0793      	lsls	r3, r2, #30
 80079d8:	680e      	ldr	r6, [r1, #0]
 80079da:	bf08      	it	eq
 80079dc:	694b      	ldreq	r3, [r1, #20]
 80079de:	600f      	str	r7, [r1, #0]
 80079e0:	bf18      	it	ne
 80079e2:	2300      	movne	r3, #0
 80079e4:	eba6 0807 	sub.w	r8, r6, r7
 80079e8:	608b      	str	r3, [r1, #8]
 80079ea:	f1b8 0f00 	cmp.w	r8, #0
 80079ee:	dd9c      	ble.n	800792a <__sflush_r+0x1a>
 80079f0:	6a21      	ldr	r1, [r4, #32]
 80079f2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80079f4:	4643      	mov	r3, r8
 80079f6:	463a      	mov	r2, r7
 80079f8:	4628      	mov	r0, r5
 80079fa:	47b0      	blx	r6
 80079fc:	2800      	cmp	r0, #0
 80079fe:	dc06      	bgt.n	8007a0e <__sflush_r+0xfe>
 8007a00:	89a3      	ldrh	r3, [r4, #12]
 8007a02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a06:	81a3      	strh	r3, [r4, #12]
 8007a08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007a0c:	e78e      	b.n	800792c <__sflush_r+0x1c>
 8007a0e:	4407      	add	r7, r0
 8007a10:	eba8 0800 	sub.w	r8, r8, r0
 8007a14:	e7e9      	b.n	80079ea <__sflush_r+0xda>
 8007a16:	bf00      	nop
 8007a18:	20400001 	.word	0x20400001

08007a1c <_fflush_r>:
 8007a1c:	b538      	push	{r3, r4, r5, lr}
 8007a1e:	690b      	ldr	r3, [r1, #16]
 8007a20:	4605      	mov	r5, r0
 8007a22:	460c      	mov	r4, r1
 8007a24:	b913      	cbnz	r3, 8007a2c <_fflush_r+0x10>
 8007a26:	2500      	movs	r5, #0
 8007a28:	4628      	mov	r0, r5
 8007a2a:	bd38      	pop	{r3, r4, r5, pc}
 8007a2c:	b118      	cbz	r0, 8007a36 <_fflush_r+0x1a>
 8007a2e:	6983      	ldr	r3, [r0, #24]
 8007a30:	b90b      	cbnz	r3, 8007a36 <_fflush_r+0x1a>
 8007a32:	f7ff fa01 	bl	8006e38 <__sinit>
 8007a36:	4b14      	ldr	r3, [pc, #80]	; (8007a88 <_fflush_r+0x6c>)
 8007a38:	429c      	cmp	r4, r3
 8007a3a:	d11b      	bne.n	8007a74 <_fflush_r+0x58>
 8007a3c:	686c      	ldr	r4, [r5, #4]
 8007a3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d0ef      	beq.n	8007a26 <_fflush_r+0xa>
 8007a46:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007a48:	07d0      	lsls	r0, r2, #31
 8007a4a:	d404      	bmi.n	8007a56 <_fflush_r+0x3a>
 8007a4c:	0599      	lsls	r1, r3, #22
 8007a4e:	d402      	bmi.n	8007a56 <_fflush_r+0x3a>
 8007a50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007a52:	f7ff faa2 	bl	8006f9a <__retarget_lock_acquire_recursive>
 8007a56:	4628      	mov	r0, r5
 8007a58:	4621      	mov	r1, r4
 8007a5a:	f7ff ff59 	bl	8007910 <__sflush_r>
 8007a5e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007a60:	07da      	lsls	r2, r3, #31
 8007a62:	4605      	mov	r5, r0
 8007a64:	d4e0      	bmi.n	8007a28 <_fflush_r+0xc>
 8007a66:	89a3      	ldrh	r3, [r4, #12]
 8007a68:	059b      	lsls	r3, r3, #22
 8007a6a:	d4dd      	bmi.n	8007a28 <_fflush_r+0xc>
 8007a6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007a6e:	f7ff fa95 	bl	8006f9c <__retarget_lock_release_recursive>
 8007a72:	e7d9      	b.n	8007a28 <_fflush_r+0xc>
 8007a74:	4b05      	ldr	r3, [pc, #20]	; (8007a8c <_fflush_r+0x70>)
 8007a76:	429c      	cmp	r4, r3
 8007a78:	d101      	bne.n	8007a7e <_fflush_r+0x62>
 8007a7a:	68ac      	ldr	r4, [r5, #8]
 8007a7c:	e7df      	b.n	8007a3e <_fflush_r+0x22>
 8007a7e:	4b04      	ldr	r3, [pc, #16]	; (8007a90 <_fflush_r+0x74>)
 8007a80:	429c      	cmp	r4, r3
 8007a82:	bf08      	it	eq
 8007a84:	68ec      	ldreq	r4, [r5, #12]
 8007a86:	e7da      	b.n	8007a3e <_fflush_r+0x22>
 8007a88:	08007db8 	.word	0x08007db8
 8007a8c:	08007dd8 	.word	0x08007dd8
 8007a90:	08007d98 	.word	0x08007d98

08007a94 <_lseek_r>:
 8007a94:	b538      	push	{r3, r4, r5, lr}
 8007a96:	4d07      	ldr	r5, [pc, #28]	; (8007ab4 <_lseek_r+0x20>)
 8007a98:	4604      	mov	r4, r0
 8007a9a:	4608      	mov	r0, r1
 8007a9c:	4611      	mov	r1, r2
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	602a      	str	r2, [r5, #0]
 8007aa2:	461a      	mov	r2, r3
 8007aa4:	f7f9 fb10 	bl	80010c8 <_lseek>
 8007aa8:	1c43      	adds	r3, r0, #1
 8007aaa:	d102      	bne.n	8007ab2 <_lseek_r+0x1e>
 8007aac:	682b      	ldr	r3, [r5, #0]
 8007aae:	b103      	cbz	r3, 8007ab2 <_lseek_r+0x1e>
 8007ab0:	6023      	str	r3, [r4, #0]
 8007ab2:	bd38      	pop	{r3, r4, r5, pc}
 8007ab4:	20004bfc 	.word	0x20004bfc

08007ab8 <__swhatbuf_r>:
 8007ab8:	b570      	push	{r4, r5, r6, lr}
 8007aba:	460e      	mov	r6, r1
 8007abc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ac0:	2900      	cmp	r1, #0
 8007ac2:	b096      	sub	sp, #88	; 0x58
 8007ac4:	4614      	mov	r4, r2
 8007ac6:	461d      	mov	r5, r3
 8007ac8:	da08      	bge.n	8007adc <__swhatbuf_r+0x24>
 8007aca:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007ace:	2200      	movs	r2, #0
 8007ad0:	602a      	str	r2, [r5, #0]
 8007ad2:	061a      	lsls	r2, r3, #24
 8007ad4:	d410      	bmi.n	8007af8 <__swhatbuf_r+0x40>
 8007ad6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007ada:	e00e      	b.n	8007afa <__swhatbuf_r+0x42>
 8007adc:	466a      	mov	r2, sp
 8007ade:	f000 f8bb 	bl	8007c58 <_fstat_r>
 8007ae2:	2800      	cmp	r0, #0
 8007ae4:	dbf1      	blt.n	8007aca <__swhatbuf_r+0x12>
 8007ae6:	9a01      	ldr	r2, [sp, #4]
 8007ae8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007aec:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007af0:	425a      	negs	r2, r3
 8007af2:	415a      	adcs	r2, r3
 8007af4:	602a      	str	r2, [r5, #0]
 8007af6:	e7ee      	b.n	8007ad6 <__swhatbuf_r+0x1e>
 8007af8:	2340      	movs	r3, #64	; 0x40
 8007afa:	2000      	movs	r0, #0
 8007afc:	6023      	str	r3, [r4, #0]
 8007afe:	b016      	add	sp, #88	; 0x58
 8007b00:	bd70      	pop	{r4, r5, r6, pc}
	...

08007b04 <__smakebuf_r>:
 8007b04:	898b      	ldrh	r3, [r1, #12]
 8007b06:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007b08:	079d      	lsls	r5, r3, #30
 8007b0a:	4606      	mov	r6, r0
 8007b0c:	460c      	mov	r4, r1
 8007b0e:	d507      	bpl.n	8007b20 <__smakebuf_r+0x1c>
 8007b10:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007b14:	6023      	str	r3, [r4, #0]
 8007b16:	6123      	str	r3, [r4, #16]
 8007b18:	2301      	movs	r3, #1
 8007b1a:	6163      	str	r3, [r4, #20]
 8007b1c:	b002      	add	sp, #8
 8007b1e:	bd70      	pop	{r4, r5, r6, pc}
 8007b20:	ab01      	add	r3, sp, #4
 8007b22:	466a      	mov	r2, sp
 8007b24:	f7ff ffc8 	bl	8007ab8 <__swhatbuf_r>
 8007b28:	9900      	ldr	r1, [sp, #0]
 8007b2a:	4605      	mov	r5, r0
 8007b2c:	4630      	mov	r0, r6
 8007b2e:	f7ff fa57 	bl	8006fe0 <_malloc_r>
 8007b32:	b948      	cbnz	r0, 8007b48 <__smakebuf_r+0x44>
 8007b34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b38:	059a      	lsls	r2, r3, #22
 8007b3a:	d4ef      	bmi.n	8007b1c <__smakebuf_r+0x18>
 8007b3c:	f023 0303 	bic.w	r3, r3, #3
 8007b40:	f043 0302 	orr.w	r3, r3, #2
 8007b44:	81a3      	strh	r3, [r4, #12]
 8007b46:	e7e3      	b.n	8007b10 <__smakebuf_r+0xc>
 8007b48:	4b0d      	ldr	r3, [pc, #52]	; (8007b80 <__smakebuf_r+0x7c>)
 8007b4a:	62b3      	str	r3, [r6, #40]	; 0x28
 8007b4c:	89a3      	ldrh	r3, [r4, #12]
 8007b4e:	6020      	str	r0, [r4, #0]
 8007b50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b54:	81a3      	strh	r3, [r4, #12]
 8007b56:	9b00      	ldr	r3, [sp, #0]
 8007b58:	6163      	str	r3, [r4, #20]
 8007b5a:	9b01      	ldr	r3, [sp, #4]
 8007b5c:	6120      	str	r0, [r4, #16]
 8007b5e:	b15b      	cbz	r3, 8007b78 <__smakebuf_r+0x74>
 8007b60:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007b64:	4630      	mov	r0, r6
 8007b66:	f000 f889 	bl	8007c7c <_isatty_r>
 8007b6a:	b128      	cbz	r0, 8007b78 <__smakebuf_r+0x74>
 8007b6c:	89a3      	ldrh	r3, [r4, #12]
 8007b6e:	f023 0303 	bic.w	r3, r3, #3
 8007b72:	f043 0301 	orr.w	r3, r3, #1
 8007b76:	81a3      	strh	r3, [r4, #12]
 8007b78:	89a0      	ldrh	r0, [r4, #12]
 8007b7a:	4305      	orrs	r5, r0
 8007b7c:	81a5      	strh	r5, [r4, #12]
 8007b7e:	e7cd      	b.n	8007b1c <__smakebuf_r+0x18>
 8007b80:	08006dd1 	.word	0x08006dd1

08007b84 <__malloc_lock>:
 8007b84:	4801      	ldr	r0, [pc, #4]	; (8007b8c <__malloc_lock+0x8>)
 8007b86:	f7ff ba08 	b.w	8006f9a <__retarget_lock_acquire_recursive>
 8007b8a:	bf00      	nop
 8007b8c:	20004bf0 	.word	0x20004bf0

08007b90 <__malloc_unlock>:
 8007b90:	4801      	ldr	r0, [pc, #4]	; (8007b98 <__malloc_unlock+0x8>)
 8007b92:	f7ff ba03 	b.w	8006f9c <__retarget_lock_release_recursive>
 8007b96:	bf00      	nop
 8007b98:	20004bf0 	.word	0x20004bf0

08007b9c <_free_r>:
 8007b9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007b9e:	2900      	cmp	r1, #0
 8007ba0:	d044      	beq.n	8007c2c <_free_r+0x90>
 8007ba2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ba6:	9001      	str	r0, [sp, #4]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	f1a1 0404 	sub.w	r4, r1, #4
 8007bae:	bfb8      	it	lt
 8007bb0:	18e4      	addlt	r4, r4, r3
 8007bb2:	f7ff ffe7 	bl	8007b84 <__malloc_lock>
 8007bb6:	4a1e      	ldr	r2, [pc, #120]	; (8007c30 <_free_r+0x94>)
 8007bb8:	9801      	ldr	r0, [sp, #4]
 8007bba:	6813      	ldr	r3, [r2, #0]
 8007bbc:	b933      	cbnz	r3, 8007bcc <_free_r+0x30>
 8007bbe:	6063      	str	r3, [r4, #4]
 8007bc0:	6014      	str	r4, [r2, #0]
 8007bc2:	b003      	add	sp, #12
 8007bc4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007bc8:	f7ff bfe2 	b.w	8007b90 <__malloc_unlock>
 8007bcc:	42a3      	cmp	r3, r4
 8007bce:	d908      	bls.n	8007be2 <_free_r+0x46>
 8007bd0:	6825      	ldr	r5, [r4, #0]
 8007bd2:	1961      	adds	r1, r4, r5
 8007bd4:	428b      	cmp	r3, r1
 8007bd6:	bf01      	itttt	eq
 8007bd8:	6819      	ldreq	r1, [r3, #0]
 8007bda:	685b      	ldreq	r3, [r3, #4]
 8007bdc:	1949      	addeq	r1, r1, r5
 8007bde:	6021      	streq	r1, [r4, #0]
 8007be0:	e7ed      	b.n	8007bbe <_free_r+0x22>
 8007be2:	461a      	mov	r2, r3
 8007be4:	685b      	ldr	r3, [r3, #4]
 8007be6:	b10b      	cbz	r3, 8007bec <_free_r+0x50>
 8007be8:	42a3      	cmp	r3, r4
 8007bea:	d9fa      	bls.n	8007be2 <_free_r+0x46>
 8007bec:	6811      	ldr	r1, [r2, #0]
 8007bee:	1855      	adds	r5, r2, r1
 8007bf0:	42a5      	cmp	r5, r4
 8007bf2:	d10b      	bne.n	8007c0c <_free_r+0x70>
 8007bf4:	6824      	ldr	r4, [r4, #0]
 8007bf6:	4421      	add	r1, r4
 8007bf8:	1854      	adds	r4, r2, r1
 8007bfa:	42a3      	cmp	r3, r4
 8007bfc:	6011      	str	r1, [r2, #0]
 8007bfe:	d1e0      	bne.n	8007bc2 <_free_r+0x26>
 8007c00:	681c      	ldr	r4, [r3, #0]
 8007c02:	685b      	ldr	r3, [r3, #4]
 8007c04:	6053      	str	r3, [r2, #4]
 8007c06:	4421      	add	r1, r4
 8007c08:	6011      	str	r1, [r2, #0]
 8007c0a:	e7da      	b.n	8007bc2 <_free_r+0x26>
 8007c0c:	d902      	bls.n	8007c14 <_free_r+0x78>
 8007c0e:	230c      	movs	r3, #12
 8007c10:	6003      	str	r3, [r0, #0]
 8007c12:	e7d6      	b.n	8007bc2 <_free_r+0x26>
 8007c14:	6825      	ldr	r5, [r4, #0]
 8007c16:	1961      	adds	r1, r4, r5
 8007c18:	428b      	cmp	r3, r1
 8007c1a:	bf04      	itt	eq
 8007c1c:	6819      	ldreq	r1, [r3, #0]
 8007c1e:	685b      	ldreq	r3, [r3, #4]
 8007c20:	6063      	str	r3, [r4, #4]
 8007c22:	bf04      	itt	eq
 8007c24:	1949      	addeq	r1, r1, r5
 8007c26:	6021      	streq	r1, [r4, #0]
 8007c28:	6054      	str	r4, [r2, #4]
 8007c2a:	e7ca      	b.n	8007bc2 <_free_r+0x26>
 8007c2c:	b003      	add	sp, #12
 8007c2e:	bd30      	pop	{r4, r5, pc}
 8007c30:	20004bf4 	.word	0x20004bf4

08007c34 <_read_r>:
 8007c34:	b538      	push	{r3, r4, r5, lr}
 8007c36:	4d07      	ldr	r5, [pc, #28]	; (8007c54 <_read_r+0x20>)
 8007c38:	4604      	mov	r4, r0
 8007c3a:	4608      	mov	r0, r1
 8007c3c:	4611      	mov	r1, r2
 8007c3e:	2200      	movs	r2, #0
 8007c40:	602a      	str	r2, [r5, #0]
 8007c42:	461a      	mov	r2, r3
 8007c44:	f7f9 f9fc 	bl	8001040 <_read>
 8007c48:	1c43      	adds	r3, r0, #1
 8007c4a:	d102      	bne.n	8007c52 <_read_r+0x1e>
 8007c4c:	682b      	ldr	r3, [r5, #0]
 8007c4e:	b103      	cbz	r3, 8007c52 <_read_r+0x1e>
 8007c50:	6023      	str	r3, [r4, #0]
 8007c52:	bd38      	pop	{r3, r4, r5, pc}
 8007c54:	20004bfc 	.word	0x20004bfc

08007c58 <_fstat_r>:
 8007c58:	b538      	push	{r3, r4, r5, lr}
 8007c5a:	4d07      	ldr	r5, [pc, #28]	; (8007c78 <_fstat_r+0x20>)
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	4604      	mov	r4, r0
 8007c60:	4608      	mov	r0, r1
 8007c62:	4611      	mov	r1, r2
 8007c64:	602b      	str	r3, [r5, #0]
 8007c66:	f7f9 fa14 	bl	8001092 <_fstat>
 8007c6a:	1c43      	adds	r3, r0, #1
 8007c6c:	d102      	bne.n	8007c74 <_fstat_r+0x1c>
 8007c6e:	682b      	ldr	r3, [r5, #0]
 8007c70:	b103      	cbz	r3, 8007c74 <_fstat_r+0x1c>
 8007c72:	6023      	str	r3, [r4, #0]
 8007c74:	bd38      	pop	{r3, r4, r5, pc}
 8007c76:	bf00      	nop
 8007c78:	20004bfc 	.word	0x20004bfc

08007c7c <_isatty_r>:
 8007c7c:	b538      	push	{r3, r4, r5, lr}
 8007c7e:	4d06      	ldr	r5, [pc, #24]	; (8007c98 <_isatty_r+0x1c>)
 8007c80:	2300      	movs	r3, #0
 8007c82:	4604      	mov	r4, r0
 8007c84:	4608      	mov	r0, r1
 8007c86:	602b      	str	r3, [r5, #0]
 8007c88:	f7f9 fa13 	bl	80010b2 <_isatty>
 8007c8c:	1c43      	adds	r3, r0, #1
 8007c8e:	d102      	bne.n	8007c96 <_isatty_r+0x1a>
 8007c90:	682b      	ldr	r3, [r5, #0]
 8007c92:	b103      	cbz	r3, 8007c96 <_isatty_r+0x1a>
 8007c94:	6023      	str	r3, [r4, #0]
 8007c96:	bd38      	pop	{r3, r4, r5, pc}
 8007c98:	20004bfc 	.word	0x20004bfc

08007c9c <_gettimeofday>:
 8007c9c:	4b02      	ldr	r3, [pc, #8]	; (8007ca8 <_gettimeofday+0xc>)
 8007c9e:	2258      	movs	r2, #88	; 0x58
 8007ca0:	601a      	str	r2, [r3, #0]
 8007ca2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007ca6:	4770      	bx	lr
 8007ca8:	20004bfc 	.word	0x20004bfc

08007cac <_init>:
 8007cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cae:	bf00      	nop
 8007cb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cb2:	bc08      	pop	{r3}
 8007cb4:	469e      	mov	lr, r3
 8007cb6:	4770      	bx	lr

08007cb8 <_fini>:
 8007cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cba:	bf00      	nop
 8007cbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cbe:	bc08      	pop	{r3}
 8007cc0:	469e      	mov	lr, r3
 8007cc2:	4770      	bx	lr
