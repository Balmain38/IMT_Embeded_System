
Projet_Final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007af4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000168  08007cc4  08007cc4  00017cc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007e2c  08007e2c  00020130  2**0
                  CONTENTS
  4 .ARM          00000008  08007e2c  08007e2c  00017e2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007e34  08007e34  00020130  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007e34  08007e34  00017e34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007e38  08007e38  00017e38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000130  20000000  08007e3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004ad0  20000130  08007f6c  00020130  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004c00  08007f6c  00024c00  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020130  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c042  00000000  00000000  00020160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004198  00000000  00000000  0003c1a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001738  00000000  00000000  00040340  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001580  00000000  00000000  00041a78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019071  00000000  00000000  00042ff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b142  00000000  00000000  0005c069  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00097550  00000000  00000000  000771ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010e6fb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006894  00000000  00000000  0010e74c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000024  00000000  00000000  00114fe0  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000004e  00000000  00000000  00115004  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000130 	.word	0x20000130
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007cac 	.word	0x08007cac

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000134 	.word	0x20000134
 800020c:	08007cac 	.word	0x08007cac

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b084      	sub	sp, #16
 80005b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005ba:	463b      	mov	r3, r7
 80005bc:	2200      	movs	r2, #0
 80005be:	601a      	str	r2, [r3, #0]
 80005c0:	605a      	str	r2, [r3, #4]
 80005c2:	609a      	str	r2, [r3, #8]
 80005c4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005c6:	4b21      	ldr	r3, [pc, #132]	; (800064c <MX_ADC1_Init+0x98>)
 80005c8:	4a21      	ldr	r2, [pc, #132]	; (8000650 <MX_ADC1_Init+0x9c>)
 80005ca:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005cc:	4b1f      	ldr	r3, [pc, #124]	; (800064c <MX_ADC1_Init+0x98>)
 80005ce:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80005d2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005d4:	4b1d      	ldr	r3, [pc, #116]	; (800064c <MX_ADC1_Init+0x98>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80005da:	4b1c      	ldr	r3, [pc, #112]	; (800064c <MX_ADC1_Init+0x98>)
 80005dc:	2200      	movs	r2, #0
 80005de:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005e0:	4b1a      	ldr	r3, [pc, #104]	; (800064c <MX_ADC1_Init+0x98>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005e6:	4b19      	ldr	r3, [pc, #100]	; (800064c <MX_ADC1_Init+0x98>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005ee:	4b17      	ldr	r3, [pc, #92]	; (800064c <MX_ADC1_Init+0x98>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005f4:	4b15      	ldr	r3, [pc, #84]	; (800064c <MX_ADC1_Init+0x98>)
 80005f6:	4a17      	ldr	r2, [pc, #92]	; (8000654 <MX_ADC1_Init+0xa0>)
 80005f8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005fa:	4b14      	ldr	r3, [pc, #80]	; (800064c <MX_ADC1_Init+0x98>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000600:	4b12      	ldr	r3, [pc, #72]	; (800064c <MX_ADC1_Init+0x98>)
 8000602:	2201      	movs	r2, #1
 8000604:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000606:	4b11      	ldr	r3, [pc, #68]	; (800064c <MX_ADC1_Init+0x98>)
 8000608:	2200      	movs	r2, #0
 800060a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800060e:	4b0f      	ldr	r3, [pc, #60]	; (800064c <MX_ADC1_Init+0x98>)
 8000610:	2201      	movs	r2, #1
 8000612:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000614:	480d      	ldr	r0, [pc, #52]	; (800064c <MX_ADC1_Init+0x98>)
 8000616:	f000 fec1 	bl	800139c <HAL_ADC_Init>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000620:	f000 f980 	bl	8000924 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000624:	2300      	movs	r3, #0
 8000626:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000628:	2301      	movs	r3, #1
 800062a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800062c:	2300      	movs	r3, #0
 800062e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000630:	463b      	mov	r3, r7
 8000632:	4619      	mov	r1, r3
 8000634:	4805      	ldr	r0, [pc, #20]	; (800064c <MX_ADC1_Init+0x98>)
 8000636:	f001 f841 	bl	80016bc <HAL_ADC_ConfigChannel>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000640:	f000 f970 	bl	8000924 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000644:	bf00      	nop
 8000646:	3710      	adds	r7, #16
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	2000014c 	.word	0x2000014c
 8000650:	40012000 	.word	0x40012000
 8000654:	0f000001 	.word	0x0f000001

08000658 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b08a      	sub	sp, #40	; 0x28
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000660:	f107 0314 	add.w	r3, r7, #20
 8000664:	2200      	movs	r2, #0
 8000666:	601a      	str	r2, [r3, #0]
 8000668:	605a      	str	r2, [r3, #4]
 800066a:	609a      	str	r2, [r3, #8]
 800066c:	60da      	str	r2, [r3, #12]
 800066e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	4a17      	ldr	r2, [pc, #92]	; (80006d4 <HAL_ADC_MspInit+0x7c>)
 8000676:	4293      	cmp	r3, r2
 8000678:	d127      	bne.n	80006ca <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800067a:	2300      	movs	r3, #0
 800067c:	613b      	str	r3, [r7, #16]
 800067e:	4b16      	ldr	r3, [pc, #88]	; (80006d8 <HAL_ADC_MspInit+0x80>)
 8000680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000682:	4a15      	ldr	r2, [pc, #84]	; (80006d8 <HAL_ADC_MspInit+0x80>)
 8000684:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000688:	6453      	str	r3, [r2, #68]	; 0x44
 800068a:	4b13      	ldr	r3, [pc, #76]	; (80006d8 <HAL_ADC_MspInit+0x80>)
 800068c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800068e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000692:	613b      	str	r3, [r7, #16]
 8000694:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000696:	2300      	movs	r3, #0
 8000698:	60fb      	str	r3, [r7, #12]
 800069a:	4b0f      	ldr	r3, [pc, #60]	; (80006d8 <HAL_ADC_MspInit+0x80>)
 800069c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069e:	4a0e      	ldr	r2, [pc, #56]	; (80006d8 <HAL_ADC_MspInit+0x80>)
 80006a0:	f043 0301 	orr.w	r3, r3, #1
 80006a4:	6313      	str	r3, [r2, #48]	; 0x30
 80006a6:	4b0c      	ldr	r3, [pc, #48]	; (80006d8 <HAL_ADC_MspInit+0x80>)
 80006a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006aa:	f003 0301 	and.w	r3, r3, #1
 80006ae:	60fb      	str	r3, [r7, #12]
 80006b0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = ANA_SENSOR_1_Pin;
 80006b2:	2301      	movs	r3, #1
 80006b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006b6:	2303      	movs	r3, #3
 80006b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ba:	2300      	movs	r3, #0
 80006bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ANA_SENSOR_1_GPIO_Port, &GPIO_InitStruct);
 80006be:	f107 0314 	add.w	r3, r7, #20
 80006c2:	4619      	mov	r1, r3
 80006c4:	4805      	ldr	r0, [pc, #20]	; (80006dc <HAL_ADC_MspInit+0x84>)
 80006c6:	f001 faf9 	bl	8001cbc <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006ca:	bf00      	nop
 80006cc:	3728      	adds	r7, #40	; 0x28
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	40012000 	.word	0x40012000
 80006d8:	40023800 	.word	0x40023800
 80006dc:	40020000 	.word	0x40020000

080006e0 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b088      	sub	sp, #32
 80006e4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e6:	f107 030c 	add.w	r3, r7, #12
 80006ea:	2200      	movs	r2, #0
 80006ec:	601a      	str	r2, [r3, #0]
 80006ee:	605a      	str	r2, [r3, #4]
 80006f0:	609a      	str	r2, [r3, #8]
 80006f2:	60da      	str	r2, [r3, #12]
 80006f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006f6:	2300      	movs	r3, #0
 80006f8:	60bb      	str	r3, [r7, #8]
 80006fa:	4b45      	ldr	r3, [pc, #276]	; (8000810 <MX_GPIO_Init+0x130>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fe:	4a44      	ldr	r2, [pc, #272]	; (8000810 <MX_GPIO_Init+0x130>)
 8000700:	f043 0304 	orr.w	r3, r3, #4
 8000704:	6313      	str	r3, [r2, #48]	; 0x30
 8000706:	4b42      	ldr	r3, [pc, #264]	; (8000810 <MX_GPIO_Init+0x130>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070a:	f003 0304 	and.w	r3, r3, #4
 800070e:	60bb      	str	r3, [r7, #8]
 8000710:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000712:	2300      	movs	r3, #0
 8000714:	607b      	str	r3, [r7, #4]
 8000716:	4b3e      	ldr	r3, [pc, #248]	; (8000810 <MX_GPIO_Init+0x130>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	4a3d      	ldr	r2, [pc, #244]	; (8000810 <MX_GPIO_Init+0x130>)
 800071c:	f043 0301 	orr.w	r3, r3, #1
 8000720:	6313      	str	r3, [r2, #48]	; 0x30
 8000722:	4b3b      	ldr	r3, [pc, #236]	; (8000810 <MX_GPIO_Init+0x130>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	f003 0301 	and.w	r3, r3, #1
 800072a:	607b      	str	r3, [r7, #4]
 800072c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800072e:	2300      	movs	r3, #0
 8000730:	603b      	str	r3, [r7, #0]
 8000732:	4b37      	ldr	r3, [pc, #220]	; (8000810 <MX_GPIO_Init+0x130>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	4a36      	ldr	r2, [pc, #216]	; (8000810 <MX_GPIO_Init+0x130>)
 8000738:	f043 0302 	orr.w	r3, r3, #2
 800073c:	6313      	str	r3, [r2, #48]	; 0x30
 800073e:	4b34      	ldr	r3, [pc, #208]	; (8000810 <MX_GPIO_Init+0x130>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	f003 0302 	and.w	r3, r3, #2
 8000746:	603b      	str	r3, [r7, #0]
 8000748:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_SENSOR_3_Pin|LED_SENSOR_2_Pin|LED_FREQ_SEND_DATA_Pin, GPIO_PIN_RESET);
 800074a:	2200      	movs	r2, #0
 800074c:	2183      	movs	r1, #131	; 0x83
 800074e:	4831      	ldr	r0, [pc, #196]	; (8000814 <MX_GPIO_Init+0x134>)
 8000750:	f001 fc28 	bl	8001fa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_SENSOR_1_GPIO_Port, LED_SENSOR_1_Pin, GPIO_PIN_RESET);
 8000754:	2200      	movs	r2, #0
 8000756:	2101      	movs	r1, #1
 8000758:	482f      	ldr	r0, [pc, #188]	; (8000818 <MX_GPIO_Init+0x138>)
 800075a:	f001 fc23 	bl	8001fa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_SEND_DATA_Pin;
 800075e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000762:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000764:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000768:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076a:	2300      	movs	r3, #0
 800076c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BTN_SEND_DATA_GPIO_Port, &GPIO_InitStruct);
 800076e:	f107 030c 	add.w	r3, r7, #12
 8000772:	4619      	mov	r1, r3
 8000774:	4827      	ldr	r0, [pc, #156]	; (8000814 <MX_GPIO_Init+0x134>)
 8000776:	f001 faa1 	bl	8001cbc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LED_SENSOR_3_Pin|LED_SENSOR_2_Pin|LED_FREQ_SEND_DATA_Pin;
 800077a:	2383      	movs	r3, #131	; 0x83
 800077c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800077e:	2301      	movs	r3, #1
 8000780:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000782:	2300      	movs	r3, #0
 8000784:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000786:	2300      	movs	r3, #0
 8000788:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800078a:	f107 030c 	add.w	r3, r7, #12
 800078e:	4619      	mov	r1, r3
 8000790:	4820      	ldr	r0, [pc, #128]	; (8000814 <MX_GPIO_Init+0x134>)
 8000792:	f001 fa93 	bl	8001cbc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = BTN_PLUS_Pin|BTN_SELECT_Pin;
 8000796:	f240 4302 	movw	r3, #1026	; 0x402
 800079a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800079c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80007a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a2:	2300      	movs	r3, #0
 80007a4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007a6:	f107 030c 	add.w	r3, r7, #12
 80007aa:	4619      	mov	r1, r3
 80007ac:	481b      	ldr	r0, [pc, #108]	; (800081c <MX_GPIO_Init+0x13c>)
 80007ae:	f001 fa85 	bl	8001cbc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_MINUS_Pin;
 80007b2:	2320      	movs	r3, #32
 80007b4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007b6:	2300      	movs	r3, #0
 80007b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ba:	2300      	movs	r3, #0
 80007bc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BTN_MINUS_GPIO_Port, &GPIO_InitStruct);
 80007be:	f107 030c 	add.w	r3, r7, #12
 80007c2:	4619      	mov	r1, r3
 80007c4:	4815      	ldr	r0, [pc, #84]	; (800081c <MX_GPIO_Init+0x13c>)
 80007c6:	f001 fa79 	bl	8001cbc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_SENSOR_1_Pin;
 80007ca:	2301      	movs	r3, #1
 80007cc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ce:	2301      	movs	r3, #1
 80007d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d2:	2300      	movs	r3, #0
 80007d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d6:	2300      	movs	r3, #0
 80007d8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_SENSOR_1_GPIO_Port, &GPIO_InitStruct);
 80007da:	f107 030c 	add.w	r3, r7, #12
 80007de:	4619      	mov	r1, r3
 80007e0:	480d      	ldr	r0, [pc, #52]	; (8000818 <MX_GPIO_Init+0x138>)
 80007e2:	f001 fa6b 	bl	8001cbc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 80007e6:	2200      	movs	r2, #0
 80007e8:	2105      	movs	r1, #5
 80007ea:	2007      	movs	r0, #7
 80007ec:	f001 fa3c 	bl	8001c68 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80007f0:	2007      	movs	r0, #7
 80007f2:	f001 fa55 	bl	8001ca0 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80007f6:	2200      	movs	r2, #0
 80007f8:	2105      	movs	r1, #5
 80007fa:	2028      	movs	r0, #40	; 0x28
 80007fc:	f001 fa34 	bl	8001c68 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000800:	2028      	movs	r0, #40	; 0x28
 8000802:	f001 fa4d 	bl	8001ca0 <HAL_NVIC_EnableIRQ>

}
 8000806:	bf00      	nop
 8000808:	3720      	adds	r7, #32
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	40023800 	.word	0x40023800
 8000814:	40020800 	.word	0x40020800
 8000818:	40020400 	.word	0x40020400
 800081c:	40020000 	.word	0x40020000

08000820 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b094      	sub	sp, #80	; 0x50
 8000824:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000826:	f107 031c 	add.w	r3, r7, #28
 800082a:	2234      	movs	r2, #52	; 0x34
 800082c:	2100      	movs	r1, #0
 800082e:	4618      	mov	r0, r3
 8000830:	f006 fa2e 	bl	8006c90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000834:	f107 0308 	add.w	r3, r7, #8
 8000838:	2200      	movs	r2, #0
 800083a:	601a      	str	r2, [r3, #0]
 800083c:	605a      	str	r2, [r3, #4]
 800083e:	609a      	str	r2, [r3, #8]
 8000840:	60da      	str	r2, [r3, #12]
 8000842:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000844:	2300      	movs	r3, #0
 8000846:	607b      	str	r3, [r7, #4]
 8000848:	4b29      	ldr	r3, [pc, #164]	; (80008f0 <SystemClock_Config+0xd0>)
 800084a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800084c:	4a28      	ldr	r2, [pc, #160]	; (80008f0 <SystemClock_Config+0xd0>)
 800084e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000852:	6413      	str	r3, [r2, #64]	; 0x40
 8000854:	4b26      	ldr	r3, [pc, #152]	; (80008f0 <SystemClock_Config+0xd0>)
 8000856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000858:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800085c:	607b      	str	r3, [r7, #4]
 800085e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000860:	2300      	movs	r3, #0
 8000862:	603b      	str	r3, [r7, #0]
 8000864:	4b23      	ldr	r3, [pc, #140]	; (80008f4 <SystemClock_Config+0xd4>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4a22      	ldr	r2, [pc, #136]	; (80008f4 <SystemClock_Config+0xd4>)
 800086a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800086e:	6013      	str	r3, [r2, #0]
 8000870:	4b20      	ldr	r3, [pc, #128]	; (80008f4 <SystemClock_Config+0xd4>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000878:	603b      	str	r3, [r7, #0]
 800087a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800087c:	2302      	movs	r3, #2
 800087e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000880:	2301      	movs	r3, #1
 8000882:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000884:	2310      	movs	r3, #16
 8000886:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000888:	2302      	movs	r3, #2
 800088a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800088c:	2300      	movs	r3, #0
 800088e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000890:	2310      	movs	r3, #16
 8000892:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000894:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000898:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800089a:	2304      	movs	r3, #4
 800089c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800089e:	2304      	movs	r3, #4
 80008a0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008a2:	2302      	movs	r3, #2
 80008a4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008a6:	f107 031c 	add.w	r3, r7, #28
 80008aa:	4618      	mov	r0, r3
 80008ac:	f001 fdfe 	bl	80024ac <HAL_RCC_OscConfig>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80008b6:	f000 f835 	bl	8000924 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008ba:	230f      	movs	r3, #15
 80008bc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008be:	2302      	movs	r3, #2
 80008c0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008c2:	2300      	movs	r3, #0
 80008c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008cc:	2300      	movs	r3, #0
 80008ce:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008d0:	f107 0308 	add.w	r3, r7, #8
 80008d4:	2102      	movs	r1, #2
 80008d6:	4618      	mov	r0, r3
 80008d8:	f001 fb96 	bl	8002008 <HAL_RCC_ClockConfig>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80008e2:	f000 f81f 	bl	8000924 <Error_Handler>
  }
}
 80008e6:	bf00      	nop
 80008e8:	3750      	adds	r7, #80	; 0x50
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	40023800 	.word	0x40023800
 80008f4:	40007000 	.word	0x40007000

080008f8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	4a06      	ldr	r2, [pc, #24]	; (8000920 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000906:	4293      	cmp	r3, r2
 8000908:	d102      	bne.n	8000910 <HAL_TIM_PeriodElapsedCallback+0x18>
    HAL_IncTick();
 800090a:	f000 fd27 	bl	800135c <HAL_IncTick>
  /* USER CODE BEGIN Callback 1 */
  else{
	  Callback_TIM_5(htim);
  }
  /* USER CODE END Callback 1 */
}
 800090e:	e002      	b.n	8000916 <HAL_TIM_PeriodElapsedCallback+0x1e>
	  Callback_TIM_5(htim);
 8000910:	6878      	ldr	r0, [r7, #4]
 8000912:	f000 f939 	bl	8000b88 <Callback_TIM_5>
}
 8000916:	bf00      	nop
 8000918:	3708      	adds	r7, #8
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	40001000 	.word	0x40001000

08000924 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000928:	b672      	cpsid	i
}
 800092a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800092c:	e7fe      	b.n	800092c <Error_Handler+0x8>
	...

08000930 <_write>:
	.priority=osPriorityNormal, // le niveau est 8 (voir cmsis_os2.h)
	.stack_size=128*4 // Pile de 128 mots de 32 bits
};


int _write(int P_Flux, char* P_Message, int P_Taille) {
 8000930:	b580      	push	{r7, lr}
 8000932:	b086      	sub	sp, #24
 8000934:	af00      	add	r7, sp, #0
 8000936:	60f8      	str	r0, [r7, #12]
 8000938:	60b9      	str	r1, [r7, #8]
 800093a:	607a      	str	r2, [r7, #4]
	HAL_StatusTypeDef Etat = HAL_UART_Transmit(&huart2, (uint8_t *) P_Message, P_Taille, HAL_MAX_DELAY);
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	b29a      	uxth	r2, r3
 8000940:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000944:	68b9      	ldr	r1, [r7, #8]
 8000946:	4808      	ldr	r0, [pc, #32]	; (8000968 <_write+0x38>)
 8000948:	f002 fb41 	bl	8002fce <HAL_UART_Transmit>
 800094c:	4603      	mov	r3, r0
 800094e:	75fb      	strb	r3, [r7, #23]
	if (Etat == HAL_OK){ return P_Taille;}
 8000950:	7dfb      	ldrb	r3, [r7, #23]
 8000952:	2b00      	cmp	r3, #0
 8000954:	d101      	bne.n	800095a <_write+0x2a>
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	e001      	b.n	800095e <_write+0x2e>
	else{return -1;}
 800095a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800095e:	4618      	mov	r0, r3
 8000960:	3718      	adds	r7, #24
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	20000258 	.word	0x20000258

0800096c <Fonction_Thread_Sensor_1>:

void Fonction_Thread_Sensor_1(void* P_Info){
 800096c:	b580      	push	{r7, lr}
 800096e:	b086      	sub	sp, #24
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start(&hadc1);
 8000974:	481c      	ldr	r0, [pc, #112]	; (80009e8 <Fonction_Thread_Sensor_1+0x7c>)
 8000976:	f000 fd55 	bl	8001424 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1);
 800097a:	2101      	movs	r1, #1
 800097c:	481a      	ldr	r0, [pc, #104]	; (80009e8 <Fonction_Thread_Sensor_1+0x7c>)
 800097e:	f000 fe05 	bl	800158c <HAL_ADC_PollForConversion>
	val_sensor_1 = HAL_ADC_GetValue(&hadc1);
 8000982:	4819      	ldr	r0, [pc, #100]	; (80009e8 <Fonction_Thread_Sensor_1+0x7c>)
 8000984:	f000 fe8d 	bl	80016a2 <HAL_ADC_GetValue>
 8000988:	4603      	mov	r3, r0
 800098a:	b29a      	uxth	r2, r3
 800098c:	4b17      	ldr	r3, [pc, #92]	; (80009ec <Fonction_Thread_Sensor_1+0x80>)
 800098e:	801a      	strh	r2, [r3, #0]
	printf('%d\n\r', &val_sensor_1);
 8000990:	4916      	ldr	r1, [pc, #88]	; (80009ec <Fonction_Thread_Sensor_1+0x80>)
 8000992:	4817      	ldr	r0, [pc, #92]	; (80009f0 <Fonction_Thread_Sensor_1+0x84>)
 8000994:	f006 f984 	bl	8006ca0 <iprintf>
	T_DATA Data={.Type=1};
 8000998:	f107 030c 	add.w	r3, r7, #12
 800099c:	2200      	movs	r2, #0
 800099e:	601a      	str	r2, [r3, #0]
 80009a0:	605a      	str	r2, [r3, #4]
 80009a2:	609a      	str	r2, [r3, #8]
 80009a4:	2301      	movs	r3, #1
 80009a6:	733b      	strb	r3, [r7, #12]
	while(1) {
		HAL_ADC_Start(&hadc1);
 80009a8:	480f      	ldr	r0, [pc, #60]	; (80009e8 <Fonction_Thread_Sensor_1+0x7c>)
 80009aa:	f000 fd3b 	bl	8001424 <HAL_ADC_Start>
		// Poll ADC1 Perihperal & TimeOut = 1mSec
		HAL_ADC_PollForConversion(&hadc1, 1);
 80009ae:	2101      	movs	r1, #1
 80009b0:	480d      	ldr	r0, [pc, #52]	; (80009e8 <Fonction_Thread_Sensor_1+0x7c>)
 80009b2:	f000 fdeb 	bl	800158c <HAL_ADC_PollForConversion>
		Data.Timestamp = (uint32_t)(time(NULL));
 80009b6:	2000      	movs	r0, #0
 80009b8:	f006 f98a 	bl	8006cd0 <time>
 80009bc:	4602      	mov	r2, r0
 80009be:	460b      	mov	r3, r1
 80009c0:	4613      	mov	r3, r2
 80009c2:	617b      	str	r3, [r7, #20]
		Data.Value = val_sensor_1;
 80009c4:	4b09      	ldr	r3, [pc, #36]	; (80009ec <Fonction_Thread_Sensor_1+0x80>)
 80009c6:	881b      	ldrh	r3, [r3, #0]
 80009c8:	613b      	str	r3, [r7, #16]
		osMessageQueuePut (Pipe_Reception_Analyse,(void*)&Data, 0, osWaitForever);
 80009ca:	4b0a      	ldr	r3, [pc, #40]	; (80009f4 <Fonction_Thread_Sensor_1+0x88>)
 80009cc:	6818      	ldr	r0, [r3, #0]
 80009ce:	f107 010c 	add.w	r1, r7, #12
 80009d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80009d6:	2200      	movs	r2, #0
 80009d8:	f003 f8ec 	bl	8003bb4 <osMessageQueuePut>
		osDelay(period_sensor_1);
 80009dc:	4b06      	ldr	r3, [pc, #24]	; (80009f8 <Fonction_Thread_Sensor_1+0x8c>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	4618      	mov	r0, r3
 80009e2:	f003 f858 	bl	8003a96 <osDelay>
		HAL_ADC_Start(&hadc1);
 80009e6:	e7df      	b.n	80009a8 <Fonction_Thread_Sensor_1+0x3c>
 80009e8:	2000014c 	.word	0x2000014c
 80009ec:	200001b0 	.word	0x200001b0
 80009f0:	25640a0d 	.word	0x25640a0d
 80009f4:	200001a8 	.word	0x200001a8
 80009f8:	20000000 	.word	0x20000000

080009fc <Fonction_Thread_Sensor_2>:
	}
	osThreadTerminate(NULL);
}

void Fonction_Thread_Sensor_2(void* P_Info){
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b086      	sub	sp, #24
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
	T_DATA Data={.Type=2};
 8000a04:	f107 030c 	add.w	r3, r7, #12
 8000a08:	2200      	movs	r2, #0
 8000a0a:	601a      	str	r2, [r3, #0]
 8000a0c:	605a      	str	r2, [r3, #4]
 8000a0e:	609a      	str	r2, [r3, #8]
 8000a10:	2302      	movs	r3, #2
 8000a12:	733b      	strb	r3, [r7, #12]
	while(1){
		HAL_RNG_GenerateRandomNumber(&hrng, &Data.Value);
 8000a14:	f107 030c 	add.w	r3, r7, #12
 8000a18:	3304      	adds	r3, #4
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	4811      	ldr	r0, [pc, #68]	; (8000a64 <Fonction_Thread_Sensor_2+0x68>)
 8000a1e:	f001 fff3 	bl	8002a08 <HAL_RNG_GenerateRandomNumber>
		Data.Value %= 12;
 8000a22:	6939      	ldr	r1, [r7, #16]
 8000a24:	4b10      	ldr	r3, [pc, #64]	; (8000a68 <Fonction_Thread_Sensor_2+0x6c>)
 8000a26:	fba3 2301 	umull	r2, r3, r3, r1
 8000a2a:	08da      	lsrs	r2, r3, #3
 8000a2c:	4613      	mov	r3, r2
 8000a2e:	005b      	lsls	r3, r3, #1
 8000a30:	4413      	add	r3, r2
 8000a32:	009b      	lsls	r3, r3, #2
 8000a34:	1aca      	subs	r2, r1, r3
 8000a36:	613a      	str	r2, [r7, #16]
		Data.Timestamp = (uint32_t)(time(NULL));
 8000a38:	2000      	movs	r0, #0
 8000a3a:	f006 f949 	bl	8006cd0 <time>
 8000a3e:	4602      	mov	r2, r0
 8000a40:	460b      	mov	r3, r1
 8000a42:	4613      	mov	r3, r2
 8000a44:	617b      	str	r3, [r7, #20]
		osMessageQueuePut (Pipe_Reception_Analyse,(void*)&Data, 0, osWaitForever);
 8000a46:	4b09      	ldr	r3, [pc, #36]	; (8000a6c <Fonction_Thread_Sensor_2+0x70>)
 8000a48:	6818      	ldr	r0, [r3, #0]
 8000a4a:	f107 010c 	add.w	r1, r7, #12
 8000a4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a52:	2200      	movs	r2, #0
 8000a54:	f003 f8ae 	bl	8003bb4 <osMessageQueuePut>
		osDelay(period_sensor_2);
 8000a58:	4b05      	ldr	r3, [pc, #20]	; (8000a70 <Fonction_Thread_Sensor_2+0x74>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f003 f81a 	bl	8003a96 <osDelay>
		HAL_RNG_GenerateRandomNumber(&hrng, &Data.Value);
 8000a62:	e7d7      	b.n	8000a14 <Fonction_Thread_Sensor_2+0x18>
 8000a64:	200001b4 	.word	0x200001b4
 8000a68:	aaaaaaab 	.word	0xaaaaaaab
 8000a6c:	200001a8 	.word	0x200001a8
 8000a70:	20000004 	.word	0x20000004

08000a74 <Fonction_Thread_Sensor_3>:
	}
	osThreadTerminate(NULL);
}

void Fonction_Thread_Sensor_3(void* P_Info){
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b086      	sub	sp, #24
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
	T_DATA Data={.Type=3};
 8000a7c:	f107 030c 	add.w	r3, r7, #12
 8000a80:	2200      	movs	r2, #0
 8000a82:	601a      	str	r2, [r3, #0]
 8000a84:	605a      	str	r2, [r3, #4]
 8000a86:	609a      	str	r2, [r3, #8]
 8000a88:	2303      	movs	r3, #3
 8000a8a:	733b      	strb	r3, [r7, #12]
	while(1){
		HAL_RNG_GenerateRandomNumber(&hrng, &Data.Value);
 8000a8c:	f107 030c 	add.w	r3, r7, #12
 8000a90:	3304      	adds	r3, #4
 8000a92:	4619      	mov	r1, r3
 8000a94:	4811      	ldr	r0, [pc, #68]	; (8000adc <Fonction_Thread_Sensor_3+0x68>)
 8000a96:	f001 ffb7 	bl	8002a08 <HAL_RNG_GenerateRandomNumber>
		Data.Value %= 500;
 8000a9a:	693a      	ldr	r2, [r7, #16]
 8000a9c:	4b10      	ldr	r3, [pc, #64]	; (8000ae0 <Fonction_Thread_Sensor_3+0x6c>)
 8000a9e:	fba3 1302 	umull	r1, r3, r3, r2
 8000aa2:	095b      	lsrs	r3, r3, #5
 8000aa4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000aa8:	fb01 f303 	mul.w	r3, r1, r3
 8000aac:	1ad3      	subs	r3, r2, r3
 8000aae:	613b      	str	r3, [r7, #16]
		Data.Timestamp = (uint32_t)(time(NULL));
 8000ab0:	2000      	movs	r0, #0
 8000ab2:	f006 f90d 	bl	8006cd0 <time>
 8000ab6:	4602      	mov	r2, r0
 8000ab8:	460b      	mov	r3, r1
 8000aba:	4613      	mov	r3, r2
 8000abc:	617b      	str	r3, [r7, #20]
		osMessageQueuePut (Pipe_Reception_Analyse,(void*)&Data, 0, osWaitForever);
 8000abe:	4b09      	ldr	r3, [pc, #36]	; (8000ae4 <Fonction_Thread_Sensor_3+0x70>)
 8000ac0:	6818      	ldr	r0, [r3, #0]
 8000ac2:	f107 010c 	add.w	r1, r7, #12
 8000ac6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000aca:	2200      	movs	r2, #0
 8000acc:	f003 f872 	bl	8003bb4 <osMessageQueuePut>
		osDelay(period_sensor_3);
 8000ad0:	4b05      	ldr	r3, [pc, #20]	; (8000ae8 <Fonction_Thread_Sensor_3+0x74>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f002 ffde 	bl	8003a96 <osDelay>
		HAL_RNG_GenerateRandomNumber(&hrng, &Data.Value);
 8000ada:	e7d7      	b.n	8000a8c <Fonction_Thread_Sensor_3+0x18>
 8000adc:	200001b4 	.word	0x200001b4
 8000ae0:	10624dd3 	.word	0x10624dd3
 8000ae4:	200001a8 	.word	0x200001a8
 8000ae8:	20000008 	.word	0x20000008

08000aec <Fonction_Thread_Send>:
	}
	osThreadTerminate(NULL);
}

void Fonction_Thread_Send(void* P_Info){
 8000aec:	b590      	push	{r4, r7, lr}
 8000aee:	b087      	sub	sp, #28
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
	T_DATA Data;
	while(1){
		osThreadFlagsWait (FLAG_SEND_DATA, osFlagsWaitAll, HAL_MAX_DELAY);
 8000af4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000af8:	2101      	movs	r1, #1
 8000afa:	2001      	movs	r0, #1
 8000afc:	f002 ff4a 	bl	8003994 <osThreadFlagsWait>
		int i;
		osMessageQueueGetCount(&i);
 8000b00:	f107 0308 	add.w	r3, r7, #8
 8000b04:	4618      	mov	r0, r3
 8000b06:	f003 f913 	bl	8003d30 <osMessageQueueGetCount>
		while(i--){
 8000b0a:	e031      	b.n	8000b70 <Fonction_Thread_Send+0x84>
			if (osMessageQueueGet(Pipe_Reception_Analyse,(void*)&Data, 0, osWaitForever) == osOK){
 8000b0c:	4b1b      	ldr	r3, [pc, #108]	; (8000b7c <Fonction_Thread_Send+0x90>)
 8000b0e:	6818      	ldr	r0, [r3, #0]
 8000b10:	f107 010c 	add.w	r1, r7, #12
 8000b14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b18:	2200      	movs	r2, #0
 8000b1a:	f003 f8ab 	bl	8003c74 <osMessageQueueGet>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d125      	bne.n	8000b70 <Fonction_Thread_Send+0x84>
				memcpy(json_message + sizeof(char) * INDEX_TIME, itoa(Data.Timestamp), sizeof(Data.Timestamp));
 8000b24:	4b16      	ldr	r3, [pc, #88]	; (8000b80 <Fonction_Thread_Send+0x94>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	1cdc      	adds	r4, r3, #3
 8000b2a:	697b      	ldr	r3, [r7, #20]
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f006 f89f 	bl	8006c70 <itoa>
 8000b32:	4603      	mov	r3, r0
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	6023      	str	r3, [r4, #0]
				memcpy(json_message + sizeof(char) * INDEX_VALUE, itoa(Data.Value), sizeof(Data.Value));
 8000b38:	4b11      	ldr	r3, [pc, #68]	; (8000b80 <Fonction_Thread_Send+0x94>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	f103 0414 	add.w	r4, r3, #20
 8000b40:	693b      	ldr	r3, [r7, #16]
 8000b42:	4618      	mov	r0, r3
 8000b44:	f006 f894 	bl	8006c70 <itoa>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	6023      	str	r3, [r4, #0]
				memcpy(json_message + sizeof(char) * INDEX_TYPE, itoa(Data.Type), sizeof(Data.Type));
 8000b4e:	4b0c      	ldr	r3, [pc, #48]	; (8000b80 <Fonction_Thread_Send+0x94>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	f103 0410 	add.w	r4, r3, #16
 8000b56:	7b3b      	ldrb	r3, [r7, #12]
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f006 f889 	bl	8006c70 <itoa>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	781b      	ldrb	r3, [r3, #0]
 8000b62:	7023      	strb	r3, [r4, #0]
				// send via UART
				printf("%s", json_message);
 8000b64:	4b06      	ldr	r3, [pc, #24]	; (8000b80 <Fonction_Thread_Send+0x94>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4619      	mov	r1, r3
 8000b6a:	4806      	ldr	r0, [pc, #24]	; (8000b84 <Fonction_Thread_Send+0x98>)
 8000b6c:	f006 f898 	bl	8006ca0 <iprintf>
		while(i--){
 8000b70:	68bb      	ldr	r3, [r7, #8]
 8000b72:	1e5a      	subs	r2, r3, #1
 8000b74:	60ba      	str	r2, [r7, #8]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d1c8      	bne.n	8000b0c <Fonction_Thread_Send+0x20>
	while(1){
 8000b7a:	e7bb      	b.n	8000af4 <Fonction_Thread_Send+0x8>
 8000b7c:	200001a8 	.word	0x200001a8
 8000b80:	20000010 	.word	0x20000010
 8000b84:	08007d38 	.word	0x08007d38

08000b88 <Callback_TIM_5>:
	osThreadTerminate(NULL);
}


// Intéruption Timer pour Send Data
void Callback_TIM_5(TIM_HandleTypeDef* P_Timer){
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
	if (P_Timer == &htim5) {
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	4a06      	ldr	r2, [pc, #24]	; (8000bac <Callback_TIM_5+0x24>)
 8000b94:	4293      	cmp	r3, r2
 8000b96:	d105      	bne.n	8000ba4 <Callback_TIM_5+0x1c>
		osThreadFlagsSet(Thread_Send_Data,FLAG_SEND_DATA);
 8000b98:	4b05      	ldr	r3, [pc, #20]	; (8000bb0 <Callback_TIM_5+0x28>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	2101      	movs	r1, #1
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f002 feaa 	bl	80038f8 <osThreadFlagsSet>
	}
}
 8000ba4:	bf00      	nop
 8000ba6:	3708      	adds	r7, #8
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	20000210 	.word	0x20000210
 8000bb0:	200001ac 	.word	0x200001ac

08000bb4 <HAL_GPIO_EXTI_Callback>:

// Intéruption Bouton Bleu pour Send Data
void HAL_GPIO_EXTI_Callback(uint16_t P_Pin){
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	4603      	mov	r3, r0
 8000bbc:	80fb      	strh	r3, [r7, #6]
	if (P_Pin == BTN_SEND_DATA_Pin){
 8000bbe:	88fb      	ldrh	r3, [r7, #6]
 8000bc0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000bc4:	d106      	bne.n	8000bd4 <HAL_GPIO_EXTI_Callback+0x20>
		osThreadFlagsSet (Thread_Send_Data,FLAG_SEND_DATA);
 8000bc6:	4b61      	ldr	r3, [pc, #388]	; (8000d4c <HAL_GPIO_EXTI_Callback+0x198>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	2101      	movs	r1, #1
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f002 fe93 	bl	80038f8 <osThreadFlagsSet>
	}
	else if (P_Pin == BTN_MINUS_Pin && state_config != 0){
		if (state_config != 4 && *(PERIOD[state_config]) > 100) PERIOD[state_config] -= 100;
		else if (state_config == 4 && *(PERIOD[state_config]) > 1000) PERIOD[state_config] -= 1000;
	}
}
 8000bd2:	e0b7      	b.n	8000d44 <HAL_GPIO_EXTI_Callback+0x190>
	else if (P_Pin == BTN_SELECT_Pin){
 8000bd4:	88fb      	ldrh	r3, [r7, #6]
 8000bd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000bda:	d13c      	bne.n	8000c56 <HAL_GPIO_EXTI_Callback+0xa2>
		if(state_config != 0){
 8000bdc:	4b5c      	ldr	r3, [pc, #368]	; (8000d50 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d013      	beq.n	8000c0c <HAL_GPIO_EXTI_Callback+0x58>
			PORT[state_config]->ODR &= ~PIN[state_config];
 8000be4:	4b5a      	ldr	r3, [pc, #360]	; (8000d50 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a5a      	ldr	r2, [pc, #360]	; (8000d54 <HAL_GPIO_EXTI_Callback+0x1a0>)
 8000bea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bee:	695a      	ldr	r2, [r3, #20]
 8000bf0:	4b57      	ldr	r3, [pc, #348]	; (8000d50 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4958      	ldr	r1, [pc, #352]	; (8000d58 <HAL_GPIO_EXTI_Callback+0x1a4>)
 8000bf6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000bfa:	43db      	mvns	r3, r3
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	4b54      	ldr	r3, [pc, #336]	; (8000d50 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	4954      	ldr	r1, [pc, #336]	; (8000d54 <HAL_GPIO_EXTI_Callback+0x1a0>)
 8000c04:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000c08:	4002      	ands	r2, r0
 8000c0a:	615a      	str	r2, [r3, #20]
		state_config ++;
 8000c0c:	4b50      	ldr	r3, [pc, #320]	; (8000d50 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	3301      	adds	r3, #1
 8000c12:	4a4f      	ldr	r2, [pc, #316]	; (8000d50 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000c14:	6013      	str	r3, [r2, #0]
		if(state_config > 4){state_config = 0;}
 8000c16:	4b4e      	ldr	r3, [pc, #312]	; (8000d50 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	2b04      	cmp	r3, #4
 8000c1c:	dd02      	ble.n	8000c24 <HAL_GPIO_EXTI_Callback+0x70>
 8000c1e:	4b4c      	ldr	r3, [pc, #304]	; (8000d50 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	601a      	str	r2, [r3, #0]
		if(state_config != 0){
 8000c24:	4b4a      	ldr	r3, [pc, #296]	; (8000d50 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	f000 808b 	beq.w	8000d44 <HAL_GPIO_EXTI_Callback+0x190>
			PORT[state_config]->ODR |= PIN[state_config];
 8000c2e:	4b48      	ldr	r3, [pc, #288]	; (8000d50 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	4a48      	ldr	r2, [pc, #288]	; (8000d54 <HAL_GPIO_EXTI_Callback+0x1a0>)
 8000c34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c38:	695a      	ldr	r2, [r3, #20]
 8000c3a:	4b45      	ldr	r3, [pc, #276]	; (8000d50 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	4946      	ldr	r1, [pc, #280]	; (8000d58 <HAL_GPIO_EXTI_Callback+0x1a4>)
 8000c40:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000c44:	4618      	mov	r0, r3
 8000c46:	4b42      	ldr	r3, [pc, #264]	; (8000d50 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	4942      	ldr	r1, [pc, #264]	; (8000d54 <HAL_GPIO_EXTI_Callback+0x1a0>)
 8000c4c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000c50:	4302      	orrs	r2, r0
 8000c52:	615a      	str	r2, [r3, #20]
}
 8000c54:	e076      	b.n	8000d44 <HAL_GPIO_EXTI_Callback+0x190>
	else if (P_Pin == BTN_PLUS_Pin && state_config != 0){
 8000c56:	88fb      	ldrh	r3, [r7, #6]
 8000c58:	2b02      	cmp	r3, #2
 8000c5a:	d138      	bne.n	8000cce <HAL_GPIO_EXTI_Callback+0x11a>
 8000c5c:	4b3c      	ldr	r3, [pc, #240]	; (8000d50 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d034      	beq.n	8000cce <HAL_GPIO_EXTI_Callback+0x11a>
		if (state_config != 4 && *(PERIOD[state_config]) < 2000) PERIOD[state_config] += 100;
 8000c64:	4b3a      	ldr	r3, [pc, #232]	; (8000d50 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	2b04      	cmp	r3, #4
 8000c6a:	d015      	beq.n	8000c98 <HAL_GPIO_EXTI_Callback+0xe4>
 8000c6c:	4b38      	ldr	r3, [pc, #224]	; (8000d50 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a3a      	ldr	r2, [pc, #232]	; (8000d5c <HAL_GPIO_EXTI_Callback+0x1a8>)
 8000c72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000c7c:	da0c      	bge.n	8000c98 <HAL_GPIO_EXTI_Callback+0xe4>
 8000c7e:	4b34      	ldr	r3, [pc, #208]	; (8000d50 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	4a36      	ldr	r2, [pc, #216]	; (8000d5c <HAL_GPIO_EXTI_Callback+0x1a8>)
 8000c84:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000c88:	4b31      	ldr	r3, [pc, #196]	; (8000d50 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	f502 72c8 	add.w	r2, r2, #400	; 0x190
 8000c90:	4932      	ldr	r1, [pc, #200]	; (8000d5c <HAL_GPIO_EXTI_Callback+0x1a8>)
 8000c92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8000c96:	e054      	b.n	8000d42 <HAL_GPIO_EXTI_Callback+0x18e>
		else if (state_config == 4 && *(PERIOD[state_config]) < 10000) PERIOD[state_config] += 1000;
 8000c98:	4b2d      	ldr	r3, [pc, #180]	; (8000d50 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	2b04      	cmp	r3, #4
 8000c9e:	d150      	bne.n	8000d42 <HAL_GPIO_EXTI_Callback+0x18e>
 8000ca0:	4b2b      	ldr	r3, [pc, #172]	; (8000d50 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a2d      	ldr	r2, [pc, #180]	; (8000d5c <HAL_GPIO_EXTI_Callback+0x1a8>)
 8000ca6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	f242 720f 	movw	r2, #9999	; 0x270f
 8000cb0:	4293      	cmp	r3, r2
 8000cb2:	dc46      	bgt.n	8000d42 <HAL_GPIO_EXTI_Callback+0x18e>
 8000cb4:	4b26      	ldr	r3, [pc, #152]	; (8000d50 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a28      	ldr	r2, [pc, #160]	; (8000d5c <HAL_GPIO_EXTI_Callback+0x1a8>)
 8000cba:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000cbe:	4b24      	ldr	r3, [pc, #144]	; (8000d50 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	f502 627a 	add.w	r2, r2, #4000	; 0xfa0
 8000cc6:	4925      	ldr	r1, [pc, #148]	; (8000d5c <HAL_GPIO_EXTI_Callback+0x1a8>)
 8000cc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if (state_config != 4 && *(PERIOD[state_config]) < 2000) PERIOD[state_config] += 100;
 8000ccc:	e039      	b.n	8000d42 <HAL_GPIO_EXTI_Callback+0x18e>
	else if (P_Pin == BTN_MINUS_Pin && state_config != 0){
 8000cce:	88fb      	ldrh	r3, [r7, #6]
 8000cd0:	2b20      	cmp	r3, #32
 8000cd2:	d137      	bne.n	8000d44 <HAL_GPIO_EXTI_Callback+0x190>
 8000cd4:	4b1e      	ldr	r3, [pc, #120]	; (8000d50 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d033      	beq.n	8000d44 <HAL_GPIO_EXTI_Callback+0x190>
		if (state_config != 4 && *(PERIOD[state_config]) > 100) PERIOD[state_config] -= 100;
 8000cdc:	4b1c      	ldr	r3, [pc, #112]	; (8000d50 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	2b04      	cmp	r3, #4
 8000ce2:	d014      	beq.n	8000d0e <HAL_GPIO_EXTI_Callback+0x15a>
 8000ce4:	4b1a      	ldr	r3, [pc, #104]	; (8000d50 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a1c      	ldr	r2, [pc, #112]	; (8000d5c <HAL_GPIO_EXTI_Callback+0x1a8>)
 8000cea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	2b64      	cmp	r3, #100	; 0x64
 8000cf2:	dd0c      	ble.n	8000d0e <HAL_GPIO_EXTI_Callback+0x15a>
 8000cf4:	4b16      	ldr	r3, [pc, #88]	; (8000d50 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a18      	ldr	r2, [pc, #96]	; (8000d5c <HAL_GPIO_EXTI_Callback+0x1a8>)
 8000cfa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000cfe:	4b14      	ldr	r3, [pc, #80]	; (8000d50 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	f5a2 72c8 	sub.w	r2, r2, #400	; 0x190
 8000d06:	4915      	ldr	r1, [pc, #84]	; (8000d5c <HAL_GPIO_EXTI_Callback+0x1a8>)
 8000d08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8000d0c:	e01a      	b.n	8000d44 <HAL_GPIO_EXTI_Callback+0x190>
		else if (state_config == 4 && *(PERIOD[state_config]) > 1000) PERIOD[state_config] -= 1000;
 8000d0e:	4b10      	ldr	r3, [pc, #64]	; (8000d50 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	2b04      	cmp	r3, #4
 8000d14:	d116      	bne.n	8000d44 <HAL_GPIO_EXTI_Callback+0x190>
 8000d16:	4b0e      	ldr	r3, [pc, #56]	; (8000d50 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	4a10      	ldr	r2, [pc, #64]	; (8000d5c <HAL_GPIO_EXTI_Callback+0x1a8>)
 8000d1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000d26:	dd0d      	ble.n	8000d44 <HAL_GPIO_EXTI_Callback+0x190>
 8000d28:	4b09      	ldr	r3, [pc, #36]	; (8000d50 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a0b      	ldr	r2, [pc, #44]	; (8000d5c <HAL_GPIO_EXTI_Callback+0x1a8>)
 8000d2e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000d32:	4b07      	ldr	r3, [pc, #28]	; (8000d50 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	f5a2 627a 	sub.w	r2, r2, #4000	; 0xfa0
 8000d3a:	4908      	ldr	r1, [pc, #32]	; (8000d5c <HAL_GPIO_EXTI_Callback+0x1a8>)
 8000d3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000d40:	e000      	b.n	8000d44 <HAL_GPIO_EXTI_Callback+0x190>
		if (state_config != 4 && *(PERIOD[state_config]) < 2000) PERIOD[state_config] += 100;
 8000d42:	bf00      	nop
}
 8000d44:	bf00      	nop
 8000d46:	3708      	adds	r7, #8
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	200001ac 	.word	0x200001ac
 8000d50:	20000194 	.word	0x20000194
 8000d54:	20000014 	.word	0x20000014
 8000d58:	20000024 	.word	0x20000024
 8000d5c:	20000198 	.word	0x20000198

08000d60 <main>:

int main(){
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
	PERIOD[0] = &period_sensor_1;
 8000d64:	4b1d      	ldr	r3, [pc, #116]	; (8000ddc <main+0x7c>)
 8000d66:	4a1e      	ldr	r2, [pc, #120]	; (8000de0 <main+0x80>)
 8000d68:	601a      	str	r2, [r3, #0]
	PERIOD[1] = &period_sensor_2;
 8000d6a:	4b1c      	ldr	r3, [pc, #112]	; (8000ddc <main+0x7c>)
 8000d6c:	4a1d      	ldr	r2, [pc, #116]	; (8000de4 <main+0x84>)
 8000d6e:	605a      	str	r2, [r3, #4]
	PERIOD[2] = &period_sensor_3;
 8000d70:	4b1a      	ldr	r3, [pc, #104]	; (8000ddc <main+0x7c>)
 8000d72:	4a1d      	ldr	r2, [pc, #116]	; (8000de8 <main+0x88>)
 8000d74:	609a      	str	r2, [r3, #8]
	PERIOD[3] = &period_send;
 8000d76:	4b19      	ldr	r3, [pc, #100]	; (8000ddc <main+0x7c>)
 8000d78:	4a1c      	ldr	r2, [pc, #112]	; (8000dec <main+0x8c>)
 8000d7a:	60da      	str	r2, [r3, #12]
	HAL_Init();
 8000d7c:	f000 facc 	bl	8001318 <HAL_Init>
	SystemClock_Config();
 8000d80:	f7ff fd4e 	bl	8000820 <SystemClock_Config>
	MX_GPIO_Init();
 8000d84:	f7ff fcac 	bl	80006e0 <MX_GPIO_Init>
	MX_ADC1_Init();
 8000d88:	f7ff fc14 	bl	80005b4 <MX_ADC1_Init>
	MX_RNG_Init();
 8000d8c:	f000 f844 	bl	8000e18 <MX_RNG_Init>
	MX_USART2_UART_Init();
 8000d90:	f000 fa26 	bl	80011e0 <MX_USART2_UART_Init>
	osKernelInitialize();
 8000d94:	f002 fcd4 	bl	8003740 <osKernelInitialize>
	Pipe_Reception_Analyse= osMessageQueueNew (TAILLE_PIPE_RECEPTION_ANALYSE, sizeof(uint8_t),NULL);
 8000d98:	2200      	movs	r2, #0
 8000d9a:	2101      	movs	r1, #1
 8000d9c:	2014      	movs	r0, #20
 8000d9e:	f002 fe95 	bl	8003acc <osMessageQueueNew>
 8000da2:	4603      	mov	r3, r0
 8000da4:	4a12      	ldr	r2, [pc, #72]	; (8000df0 <main+0x90>)
 8000da6:	6013      	str	r3, [r2, #0]
	osThreadNew(Fonction_Thread_Sensor_1, NULL, &Config_Thread_Sensor_1);
 8000da8:	4a12      	ldr	r2, [pc, #72]	; (8000df4 <main+0x94>)
 8000daa:	2100      	movs	r1, #0
 8000dac:	4812      	ldr	r0, [pc, #72]	; (8000df8 <main+0x98>)
 8000dae:	f002 fd11 	bl	80037d4 <osThreadNew>
	osThreadNew(Fonction_Thread_Sensor_2, NULL, &Config_Thread_Sensor_2);
 8000db2:	4a12      	ldr	r2, [pc, #72]	; (8000dfc <main+0x9c>)
 8000db4:	2100      	movs	r1, #0
 8000db6:	4812      	ldr	r0, [pc, #72]	; (8000e00 <main+0xa0>)
 8000db8:	f002 fd0c 	bl	80037d4 <osThreadNew>
	osThreadNew(Fonction_Thread_Sensor_3, NULL, &Config_Thread_Sensor_3);
 8000dbc:	4a11      	ldr	r2, [pc, #68]	; (8000e04 <main+0xa4>)
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	4811      	ldr	r0, [pc, #68]	; (8000e08 <main+0xa8>)
 8000dc2:	f002 fd07 	bl	80037d4 <osThreadNew>
	Thread_Send_Data = osThreadNew(Fonction_Thread_Send, NULL, &Config_Thread_Send);
 8000dc6:	4a11      	ldr	r2, [pc, #68]	; (8000e0c <main+0xac>)
 8000dc8:	2100      	movs	r1, #0
 8000dca:	4811      	ldr	r0, [pc, #68]	; (8000e10 <main+0xb0>)
 8000dcc:	f002 fd02 	bl	80037d4 <osThreadNew>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	4a10      	ldr	r2, [pc, #64]	; (8000e14 <main+0xb4>)
 8000dd4:	6013      	str	r3, [r2, #0]
	osKernelStart();
 8000dd6:	f002 fcd7 	bl	8003788 <osKernelStart>
	while(1);
 8000dda:	e7fe      	b.n	8000dda <main+0x7a>
 8000ddc:	20000198 	.word	0x20000198
 8000de0:	20000000 	.word	0x20000000
 8000de4:	20000004 	.word	0x20000004
 8000de8:	20000008 	.word	0x20000008
 8000dec:	2000000c 	.word	0x2000000c
 8000df0:	200001a8 	.word	0x200001a8
 8000df4:	2000002c 	.word	0x2000002c
 8000df8:	0800096d 	.word	0x0800096d
 8000dfc:	20000050 	.word	0x20000050
 8000e00:	080009fd 	.word	0x080009fd
 8000e04:	20000074 	.word	0x20000074
 8000e08:	08000a75 	.word	0x08000a75
 8000e0c:	20000098 	.word	0x20000098
 8000e10:	08000aed 	.word	0x08000aed
 8000e14:	200001ac 	.word	0x200001ac

08000e18 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8000e1c:	4b06      	ldr	r3, [pc, #24]	; (8000e38 <MX_RNG_Init+0x20>)
 8000e1e:	4a07      	ldr	r2, [pc, #28]	; (8000e3c <MX_RNG_Init+0x24>)
 8000e20:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8000e22:	4805      	ldr	r0, [pc, #20]	; (8000e38 <MX_RNG_Init+0x20>)
 8000e24:	f001 fdc6 	bl	80029b4 <HAL_RNG_Init>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8000e2e:	f7ff fd79 	bl	8000924 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8000e32:	bf00      	nop
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	200001b4 	.word	0x200001b4
 8000e3c:	40080000 	.word	0x40080000

08000e40 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b085      	sub	sp, #20
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]

  if(rngHandle->Instance==RNG)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a0b      	ldr	r2, [pc, #44]	; (8000e7c <HAL_RNG_MspInit+0x3c>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d10d      	bne.n	8000e6e <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8000e52:	2300      	movs	r3, #0
 8000e54:	60fb      	str	r3, [r7, #12]
 8000e56:	4b0a      	ldr	r3, [pc, #40]	; (8000e80 <HAL_RNG_MspInit+0x40>)
 8000e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5a:	4a09      	ldr	r2, [pc, #36]	; (8000e80 <HAL_RNG_MspInit+0x40>)
 8000e5c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000e60:	6313      	str	r3, [r2, #48]	; 0x30
 8000e62:	4b07      	ldr	r3, [pc, #28]	; (8000e80 <HAL_RNG_MspInit+0x40>)
 8000e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e66:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000e6a:	60fb      	str	r3, [r7, #12]
 8000e6c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 8000e6e:	bf00      	nop
 8000e70:	3714      	adds	r7, #20
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	40080000 	.word	0x40080000
 8000e80:	40023800 	.word	0x40023800

08000e84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	607b      	str	r3, [r7, #4]
 8000e8e:	4b12      	ldr	r3, [pc, #72]	; (8000ed8 <HAL_MspInit+0x54>)
 8000e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e92:	4a11      	ldr	r2, [pc, #68]	; (8000ed8 <HAL_MspInit+0x54>)
 8000e94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e98:	6453      	str	r3, [r2, #68]	; 0x44
 8000e9a:	4b0f      	ldr	r3, [pc, #60]	; (8000ed8 <HAL_MspInit+0x54>)
 8000e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ea2:	607b      	str	r3, [r7, #4]
 8000ea4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	603b      	str	r3, [r7, #0]
 8000eaa:	4b0b      	ldr	r3, [pc, #44]	; (8000ed8 <HAL_MspInit+0x54>)
 8000eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eae:	4a0a      	ldr	r2, [pc, #40]	; (8000ed8 <HAL_MspInit+0x54>)
 8000eb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000eb4:	6413      	str	r3, [r2, #64]	; 0x40
 8000eb6:	4b08      	ldr	r3, [pc, #32]	; (8000ed8 <HAL_MspInit+0x54>)
 8000eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ebe:	603b      	str	r3, [r7, #0]
 8000ec0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	210f      	movs	r1, #15
 8000ec6:	f06f 0001 	mvn.w	r0, #1
 8000eca:	f000 fecd 	bl	8001c68 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ece:	bf00      	nop
 8000ed0:	3708      	adds	r7, #8
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	40023800 	.word	0x40023800

08000edc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b08e      	sub	sp, #56	; 0x38
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000eec:	2300      	movs	r3, #0
 8000eee:	60fb      	str	r3, [r7, #12]
 8000ef0:	4b33      	ldr	r3, [pc, #204]	; (8000fc0 <HAL_InitTick+0xe4>)
 8000ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef4:	4a32      	ldr	r2, [pc, #200]	; (8000fc0 <HAL_InitTick+0xe4>)
 8000ef6:	f043 0310 	orr.w	r3, r3, #16
 8000efa:	6413      	str	r3, [r2, #64]	; 0x40
 8000efc:	4b30      	ldr	r3, [pc, #192]	; (8000fc0 <HAL_InitTick+0xe4>)
 8000efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f00:	f003 0310 	and.w	r3, r3, #16
 8000f04:	60fb      	str	r3, [r7, #12]
 8000f06:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000f08:	f107 0210 	add.w	r2, r7, #16
 8000f0c:	f107 0314 	add.w	r3, r7, #20
 8000f10:	4611      	mov	r1, r2
 8000f12:	4618      	mov	r0, r3
 8000f14:	f001 fa98 	bl	8002448 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000f18:	6a3b      	ldr	r3, [r7, #32]
 8000f1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000f1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d103      	bne.n	8000f2a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000f22:	f001 fa69 	bl	80023f8 <HAL_RCC_GetPCLK1Freq>
 8000f26:	6378      	str	r0, [r7, #52]	; 0x34
 8000f28:	e004      	b.n	8000f34 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000f2a:	f001 fa65 	bl	80023f8 <HAL_RCC_GetPCLK1Freq>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	005b      	lsls	r3, r3, #1
 8000f32:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000f34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f36:	4a23      	ldr	r2, [pc, #140]	; (8000fc4 <HAL_InitTick+0xe8>)
 8000f38:	fba2 2303 	umull	r2, r3, r2, r3
 8000f3c:	0c9b      	lsrs	r3, r3, #18
 8000f3e:	3b01      	subs	r3, #1
 8000f40:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000f42:	4b21      	ldr	r3, [pc, #132]	; (8000fc8 <HAL_InitTick+0xec>)
 8000f44:	4a21      	ldr	r2, [pc, #132]	; (8000fcc <HAL_InitTick+0xf0>)
 8000f46:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000f48:	4b1f      	ldr	r3, [pc, #124]	; (8000fc8 <HAL_InitTick+0xec>)
 8000f4a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f4e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000f50:	4a1d      	ldr	r2, [pc, #116]	; (8000fc8 <HAL_InitTick+0xec>)
 8000f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f54:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000f56:	4b1c      	ldr	r3, [pc, #112]	; (8000fc8 <HAL_InitTick+0xec>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f5c:	4b1a      	ldr	r3, [pc, #104]	; (8000fc8 <HAL_InitTick+0xec>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f62:	4b19      	ldr	r3, [pc, #100]	; (8000fc8 <HAL_InitTick+0xec>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000f68:	4817      	ldr	r0, [pc, #92]	; (8000fc8 <HAL_InitTick+0xec>)
 8000f6a:	f001 fda3 	bl	8002ab4 <HAL_TIM_Base_Init>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000f74:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d11b      	bne.n	8000fb4 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000f7c:	4812      	ldr	r0, [pc, #72]	; (8000fc8 <HAL_InitTick+0xec>)
 8000f7e:	f001 fde9 	bl	8002b54 <HAL_TIM_Base_Start_IT>
 8000f82:	4603      	mov	r3, r0
 8000f84:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000f88:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d111      	bne.n	8000fb4 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000f90:	2036      	movs	r0, #54	; 0x36
 8000f92:	f000 fe85 	bl	8001ca0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	2b0f      	cmp	r3, #15
 8000f9a:	d808      	bhi.n	8000fae <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	6879      	ldr	r1, [r7, #4]
 8000fa0:	2036      	movs	r0, #54	; 0x36
 8000fa2:	f000 fe61 	bl	8001c68 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fa6:	4a0a      	ldr	r2, [pc, #40]	; (8000fd0 <HAL_InitTick+0xf4>)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	6013      	str	r3, [r2, #0]
 8000fac:	e002      	b.n	8000fb4 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000fb4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	3738      	adds	r7, #56	; 0x38
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	40023800 	.word	0x40023800
 8000fc4:	431bde83 	.word	0x431bde83
 8000fc8:	200001c4 	.word	0x200001c4
 8000fcc:	40001000 	.word	0x40001000
 8000fd0:	200000c0 	.word	0x200000c0

08000fd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fd8:	e7fe      	b.n	8000fd8 <NMI_Handler+0x4>

08000fda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fda:	b480      	push	{r7}
 8000fdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fde:	e7fe      	b.n	8000fde <HardFault_Handler+0x4>

08000fe0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fe4:	e7fe      	b.n	8000fe4 <MemManage_Handler+0x4>

08000fe6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fe6:	b480      	push	{r7}
 8000fe8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fea:	e7fe      	b.n	8000fea <BusFault_Handler+0x4>

08000fec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ff0:	e7fe      	b.n	8000ff0 <UsageFault_Handler+0x4>

08000ff2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ff2:	b480      	push	{r7}
 8000ff4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ff6:	bf00      	nop
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr

08001000 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_PLUS_Pin);
 8001004:	2002      	movs	r0, #2
 8001006:	f000 ffe7 	bl	8001fd8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800100a:	bf00      	nop
 800100c:	bd80      	pop	{r7, pc}

0800100e <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800100e:	b580      	push	{r7, lr}
 8001010:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_SELECT_Pin);
 8001012:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001016:	f000 ffdf 	bl	8001fd8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BTN_SEND_DATA_Pin);
 800101a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800101e:	f000 ffdb 	bl	8001fd8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001022:	bf00      	nop
 8001024:	bd80      	pop	{r7, pc}
	...

08001028 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC channel underrun error interrupt.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800102c:	4802      	ldr	r0, [pc, #8]	; (8001038 <TIM6_DAC_IRQHandler+0x10>)
 800102e:	f001 fddf 	bl	8002bf0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001032:	bf00      	nop
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	200001c4 	.word	0x200001c4

0800103c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b086      	sub	sp, #24
 8001040:	af00      	add	r7, sp, #0
 8001042:	60f8      	str	r0, [r7, #12]
 8001044:	60b9      	str	r1, [r7, #8]
 8001046:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001048:	2300      	movs	r3, #0
 800104a:	617b      	str	r3, [r7, #20]
 800104c:	e00a      	b.n	8001064 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800104e:	f3af 8000 	nop.w
 8001052:	4601      	mov	r1, r0
 8001054:	68bb      	ldr	r3, [r7, #8]
 8001056:	1c5a      	adds	r2, r3, #1
 8001058:	60ba      	str	r2, [r7, #8]
 800105a:	b2ca      	uxtb	r2, r1
 800105c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800105e:	697b      	ldr	r3, [r7, #20]
 8001060:	3301      	adds	r3, #1
 8001062:	617b      	str	r3, [r7, #20]
 8001064:	697a      	ldr	r2, [r7, #20]
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	429a      	cmp	r2, r3
 800106a:	dbf0      	blt.n	800104e <_read+0x12>
  }

  return len;
 800106c:	687b      	ldr	r3, [r7, #4]
}
 800106e:	4618      	mov	r0, r3
 8001070:	3718      	adds	r7, #24
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}

08001076 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001076:	b480      	push	{r7}
 8001078:	b083      	sub	sp, #12
 800107a:	af00      	add	r7, sp, #0
 800107c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800107e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001082:	4618      	mov	r0, r3
 8001084:	370c      	adds	r7, #12
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr

0800108e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800108e:	b480      	push	{r7}
 8001090:	b083      	sub	sp, #12
 8001092:	af00      	add	r7, sp, #0
 8001094:	6078      	str	r0, [r7, #4]
 8001096:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800109e:	605a      	str	r2, [r3, #4]
  return 0;
 80010a0:	2300      	movs	r3, #0
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	370c      	adds	r7, #12
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr

080010ae <_isatty>:

int _isatty(int file)
{
 80010ae:	b480      	push	{r7}
 80010b0:	b083      	sub	sp, #12
 80010b2:	af00      	add	r7, sp, #0
 80010b4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80010b6:	2301      	movs	r3, #1
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	370c      	adds	r7, #12
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr

080010c4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b085      	sub	sp, #20
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	60f8      	str	r0, [r7, #12]
 80010cc:	60b9      	str	r1, [r7, #8]
 80010ce:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80010d0:	2300      	movs	r3, #0
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	3714      	adds	r7, #20
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr
	...

080010e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b086      	sub	sp, #24
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010e8:	4a14      	ldr	r2, [pc, #80]	; (800113c <_sbrk+0x5c>)
 80010ea:	4b15      	ldr	r3, [pc, #84]	; (8001140 <_sbrk+0x60>)
 80010ec:	1ad3      	subs	r3, r2, r3
 80010ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010f4:	4b13      	ldr	r3, [pc, #76]	; (8001144 <_sbrk+0x64>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d102      	bne.n	8001102 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010fc:	4b11      	ldr	r3, [pc, #68]	; (8001144 <_sbrk+0x64>)
 80010fe:	4a12      	ldr	r2, [pc, #72]	; (8001148 <_sbrk+0x68>)
 8001100:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001102:	4b10      	ldr	r3, [pc, #64]	; (8001144 <_sbrk+0x64>)
 8001104:	681a      	ldr	r2, [r3, #0]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4413      	add	r3, r2
 800110a:	693a      	ldr	r2, [r7, #16]
 800110c:	429a      	cmp	r2, r3
 800110e:	d207      	bcs.n	8001120 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001110:	f005 fd6c 	bl	8006bec <__errno>
 8001114:	4603      	mov	r3, r0
 8001116:	220c      	movs	r2, #12
 8001118:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800111a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800111e:	e009      	b.n	8001134 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001120:	4b08      	ldr	r3, [pc, #32]	; (8001144 <_sbrk+0x64>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001126:	4b07      	ldr	r3, [pc, #28]	; (8001144 <_sbrk+0x64>)
 8001128:	681a      	ldr	r2, [r3, #0]
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	4413      	add	r3, r2
 800112e:	4a05      	ldr	r2, [pc, #20]	; (8001144 <_sbrk+0x64>)
 8001130:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001132:	68fb      	ldr	r3, [r7, #12]
}
 8001134:	4618      	mov	r0, r3
 8001136:	3718      	adds	r7, #24
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	20008000 	.word	0x20008000
 8001140:	00000400 	.word	0x00000400
 8001144:	2000020c 	.word	0x2000020c
 8001148:	20004c00 	.word	0x20004c00

0800114c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001150:	4b06      	ldr	r3, [pc, #24]	; (800116c <SystemInit+0x20>)
 8001152:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001156:	4a05      	ldr	r2, [pc, #20]	; (800116c <SystemInit+0x20>)
 8001158:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800115c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001160:	bf00      	nop
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop
 800116c:	e000ed00 	.word	0xe000ed00

08001170 <HAL_TIM_Base_MspInit>:
  HAL_TIM_MspPostInit(&htim11);

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001170:	b480      	push	{r7}
 8001172:	b085      	sub	sp, #20
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM5)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a15      	ldr	r2, [pc, #84]	; (80011d4 <HAL_TIM_Base_MspInit+0x64>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d10e      	bne.n	80011a0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001182:	2300      	movs	r3, #0
 8001184:	60fb      	str	r3, [r7, #12]
 8001186:	4b14      	ldr	r3, [pc, #80]	; (80011d8 <HAL_TIM_Base_MspInit+0x68>)
 8001188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800118a:	4a13      	ldr	r2, [pc, #76]	; (80011d8 <HAL_TIM_Base_MspInit+0x68>)
 800118c:	f043 0308 	orr.w	r3, r3, #8
 8001190:	6413      	str	r3, [r2, #64]	; 0x40
 8001192:	4b11      	ldr	r3, [pc, #68]	; (80011d8 <HAL_TIM_Base_MspInit+0x68>)
 8001194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001196:	f003 0308 	and.w	r3, r3, #8
 800119a:	60fb      	str	r3, [r7, #12]
 800119c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM11_CLK_ENABLE();
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 800119e:	e012      	b.n	80011c6 <HAL_TIM_Base_MspInit+0x56>
  else if(tim_baseHandle->Instance==TIM11)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a0d      	ldr	r2, [pc, #52]	; (80011dc <HAL_TIM_Base_MspInit+0x6c>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d10d      	bne.n	80011c6 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80011aa:	2300      	movs	r3, #0
 80011ac:	60bb      	str	r3, [r7, #8]
 80011ae:	4b0a      	ldr	r3, [pc, #40]	; (80011d8 <HAL_TIM_Base_MspInit+0x68>)
 80011b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011b2:	4a09      	ldr	r2, [pc, #36]	; (80011d8 <HAL_TIM_Base_MspInit+0x68>)
 80011b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011b8:	6453      	str	r3, [r2, #68]	; 0x44
 80011ba:	4b07      	ldr	r3, [pc, #28]	; (80011d8 <HAL_TIM_Base_MspInit+0x68>)
 80011bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011c2:	60bb      	str	r3, [r7, #8]
 80011c4:	68bb      	ldr	r3, [r7, #8]
}
 80011c6:	bf00      	nop
 80011c8:	3714      	adds	r7, #20
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop
 80011d4:	40000c00 	.word	0x40000c00
 80011d8:	40023800 	.word	0x40023800
 80011dc:	40014800 	.word	0x40014800

080011e0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011e4:	4b11      	ldr	r3, [pc, #68]	; (800122c <MX_USART2_UART_Init+0x4c>)
 80011e6:	4a12      	ldr	r2, [pc, #72]	; (8001230 <MX_USART2_UART_Init+0x50>)
 80011e8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80011ea:	4b10      	ldr	r3, [pc, #64]	; (800122c <MX_USART2_UART_Init+0x4c>)
 80011ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011f0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011f2:	4b0e      	ldr	r3, [pc, #56]	; (800122c <MX_USART2_UART_Init+0x4c>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011f8:	4b0c      	ldr	r3, [pc, #48]	; (800122c <MX_USART2_UART_Init+0x4c>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011fe:	4b0b      	ldr	r3, [pc, #44]	; (800122c <MX_USART2_UART_Init+0x4c>)
 8001200:	2200      	movs	r2, #0
 8001202:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001204:	4b09      	ldr	r3, [pc, #36]	; (800122c <MX_USART2_UART_Init+0x4c>)
 8001206:	220c      	movs	r2, #12
 8001208:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800120a:	4b08      	ldr	r3, [pc, #32]	; (800122c <MX_USART2_UART_Init+0x4c>)
 800120c:	2200      	movs	r2, #0
 800120e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001210:	4b06      	ldr	r3, [pc, #24]	; (800122c <MX_USART2_UART_Init+0x4c>)
 8001212:	2200      	movs	r2, #0
 8001214:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001216:	4805      	ldr	r0, [pc, #20]	; (800122c <MX_USART2_UART_Init+0x4c>)
 8001218:	f001 fe8c 	bl	8002f34 <HAL_UART_Init>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001222:	f7ff fb7f 	bl	8000924 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001226:	bf00      	nop
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	20000258 	.word	0x20000258
 8001230:	40004400 	.word	0x40004400

08001234 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b08a      	sub	sp, #40	; 0x28
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800123c:	f107 0314 	add.w	r3, r7, #20
 8001240:	2200      	movs	r2, #0
 8001242:	601a      	str	r2, [r3, #0]
 8001244:	605a      	str	r2, [r3, #4]
 8001246:	609a      	str	r2, [r3, #8]
 8001248:	60da      	str	r2, [r3, #12]
 800124a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a19      	ldr	r2, [pc, #100]	; (80012b8 <HAL_UART_MspInit+0x84>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d12b      	bne.n	80012ae <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001256:	2300      	movs	r3, #0
 8001258:	613b      	str	r3, [r7, #16]
 800125a:	4b18      	ldr	r3, [pc, #96]	; (80012bc <HAL_UART_MspInit+0x88>)
 800125c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800125e:	4a17      	ldr	r2, [pc, #92]	; (80012bc <HAL_UART_MspInit+0x88>)
 8001260:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001264:	6413      	str	r3, [r2, #64]	; 0x40
 8001266:	4b15      	ldr	r3, [pc, #84]	; (80012bc <HAL_UART_MspInit+0x88>)
 8001268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800126e:	613b      	str	r3, [r7, #16]
 8001270:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001272:	2300      	movs	r3, #0
 8001274:	60fb      	str	r3, [r7, #12]
 8001276:	4b11      	ldr	r3, [pc, #68]	; (80012bc <HAL_UART_MspInit+0x88>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127a:	4a10      	ldr	r2, [pc, #64]	; (80012bc <HAL_UART_MspInit+0x88>)
 800127c:	f043 0301 	orr.w	r3, r3, #1
 8001280:	6313      	str	r3, [r2, #48]	; 0x30
 8001282:	4b0e      	ldr	r3, [pc, #56]	; (80012bc <HAL_UART_MspInit+0x88>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001286:	f003 0301 	and.w	r3, r3, #1
 800128a:	60fb      	str	r3, [r7, #12]
 800128c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800128e:	230c      	movs	r3, #12
 8001290:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001292:	2302      	movs	r3, #2
 8001294:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001296:	2300      	movs	r3, #0
 8001298:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800129a:	2303      	movs	r3, #3
 800129c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800129e:	2307      	movs	r3, #7
 80012a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012a2:	f107 0314 	add.w	r3, r7, #20
 80012a6:	4619      	mov	r1, r3
 80012a8:	4805      	ldr	r0, [pc, #20]	; (80012c0 <HAL_UART_MspInit+0x8c>)
 80012aa:	f000 fd07 	bl	8001cbc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80012ae:	bf00      	nop
 80012b0:	3728      	adds	r7, #40	; 0x28
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	40004400 	.word	0x40004400
 80012bc:	40023800 	.word	0x40023800
 80012c0:	40020000 	.word	0x40020000

080012c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 80012c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012fc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012c8:	480d      	ldr	r0, [pc, #52]	; (8001300 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80012ca:	490e      	ldr	r1, [pc, #56]	; (8001304 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80012cc:	4a0e      	ldr	r2, [pc, #56]	; (8001308 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80012ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012d0:	e002      	b.n	80012d8 <LoopCopyDataInit>

080012d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012d6:	3304      	adds	r3, #4

080012d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012dc:	d3f9      	bcc.n	80012d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012de:	4a0b      	ldr	r2, [pc, #44]	; (800130c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80012e0:	4c0b      	ldr	r4, [pc, #44]	; (8001310 <LoopFillZerobss+0x26>)
  movs r3, #0
 80012e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012e4:	e001      	b.n	80012ea <LoopFillZerobss>

080012e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012e8:	3204      	adds	r2, #4

080012ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012ec:	d3fb      	bcc.n	80012e6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80012ee:	f7ff ff2d 	bl	800114c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012f2:	f005 fc81 	bl	8006bf8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012f6:	f7ff fd33 	bl	8000d60 <main>
  bx  lr    
 80012fa:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80012fc:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001300:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001304:	20000130 	.word	0x20000130
  ldr r2, =_sidata
 8001308:	08007e3c 	.word	0x08007e3c
  ldr r2, =_sbss
 800130c:	20000130 	.word	0x20000130
  ldr r4, =_ebss
 8001310:	20004c00 	.word	0x20004c00

08001314 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001314:	e7fe      	b.n	8001314 <ADC_IRQHandler>
	...

08001318 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800131c:	4b0e      	ldr	r3, [pc, #56]	; (8001358 <HAL_Init+0x40>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a0d      	ldr	r2, [pc, #52]	; (8001358 <HAL_Init+0x40>)
 8001322:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001326:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001328:	4b0b      	ldr	r3, [pc, #44]	; (8001358 <HAL_Init+0x40>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a0a      	ldr	r2, [pc, #40]	; (8001358 <HAL_Init+0x40>)
 800132e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001332:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001334:	4b08      	ldr	r3, [pc, #32]	; (8001358 <HAL_Init+0x40>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a07      	ldr	r2, [pc, #28]	; (8001358 <HAL_Init+0x40>)
 800133a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800133e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001340:	2003      	movs	r0, #3
 8001342:	f000 fc86 	bl	8001c52 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001346:	200f      	movs	r0, #15
 8001348:	f7ff fdc8 	bl	8000edc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800134c:	f7ff fd9a 	bl	8000e84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001350:	2300      	movs	r3, #0
}
 8001352:	4618      	mov	r0, r3
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	40023c00 	.word	0x40023c00

0800135c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001360:	4b06      	ldr	r3, [pc, #24]	; (800137c <HAL_IncTick+0x20>)
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	461a      	mov	r2, r3
 8001366:	4b06      	ldr	r3, [pc, #24]	; (8001380 <HAL_IncTick+0x24>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4413      	add	r3, r2
 800136c:	4a04      	ldr	r2, [pc, #16]	; (8001380 <HAL_IncTick+0x24>)
 800136e:	6013      	str	r3, [r2, #0]
}
 8001370:	bf00      	nop
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr
 800137a:	bf00      	nop
 800137c:	200000c4 	.word	0x200000c4
 8001380:	2000029c 	.word	0x2000029c

08001384 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  return uwTick;
 8001388:	4b03      	ldr	r3, [pc, #12]	; (8001398 <HAL_GetTick+0x14>)
 800138a:	681b      	ldr	r3, [r3, #0]
}
 800138c:	4618      	mov	r0, r3
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop
 8001398:	2000029c 	.word	0x2000029c

0800139c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b084      	sub	sp, #16
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013a4:	2300      	movs	r3, #0
 80013a6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d101      	bne.n	80013b2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80013ae:	2301      	movs	r3, #1
 80013b0:	e033      	b.n	800141a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d109      	bne.n	80013ce <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80013ba:	6878      	ldr	r0, [r7, #4]
 80013bc:	f7ff f94c 	bl	8000658 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2200      	movs	r2, #0
 80013c4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2200      	movs	r2, #0
 80013ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d2:	f003 0310 	and.w	r3, r3, #16
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d118      	bne.n	800140c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013de:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80013e2:	f023 0302 	bic.w	r3, r3, #2
 80013e6:	f043 0202 	orr.w	r2, r3, #2
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80013ee:	6878      	ldr	r0, [r7, #4]
 80013f0:	f000 fa86 	bl	8001900 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2200      	movs	r2, #0
 80013f8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fe:	f023 0303 	bic.w	r3, r3, #3
 8001402:	f043 0201 	orr.w	r2, r3, #1
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	641a      	str	r2, [r3, #64]	; 0x40
 800140a:	e001      	b.n	8001410 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800140c:	2301      	movs	r3, #1
 800140e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2200      	movs	r2, #0
 8001414:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001418:	7bfb      	ldrb	r3, [r7, #15]
}
 800141a:	4618      	mov	r0, r3
 800141c:	3710      	adds	r7, #16
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
	...

08001424 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001424:	b480      	push	{r7}
 8001426:	b085      	sub	sp, #20
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800142c:	2300      	movs	r3, #0
 800142e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001436:	2b01      	cmp	r3, #1
 8001438:	d101      	bne.n	800143e <HAL_ADC_Start+0x1a>
 800143a:	2302      	movs	r3, #2
 800143c:	e097      	b.n	800156e <HAL_ADC_Start+0x14a>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2201      	movs	r2, #1
 8001442:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	689b      	ldr	r3, [r3, #8]
 800144c:	f003 0301 	and.w	r3, r3, #1
 8001450:	2b01      	cmp	r3, #1
 8001452:	d018      	beq.n	8001486 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	689a      	ldr	r2, [r3, #8]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f042 0201 	orr.w	r2, r2, #1
 8001462:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001464:	4b45      	ldr	r3, [pc, #276]	; (800157c <HAL_ADC_Start+0x158>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a45      	ldr	r2, [pc, #276]	; (8001580 <HAL_ADC_Start+0x15c>)
 800146a:	fba2 2303 	umull	r2, r3, r2, r3
 800146e:	0c9a      	lsrs	r2, r3, #18
 8001470:	4613      	mov	r3, r2
 8001472:	005b      	lsls	r3, r3, #1
 8001474:	4413      	add	r3, r2
 8001476:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001478:	e002      	b.n	8001480 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800147a:	68bb      	ldr	r3, [r7, #8]
 800147c:	3b01      	subs	r3, #1
 800147e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001480:	68bb      	ldr	r3, [r7, #8]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d1f9      	bne.n	800147a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	689b      	ldr	r3, [r3, #8]
 800148c:	f003 0301 	and.w	r3, r3, #1
 8001490:	2b01      	cmp	r3, #1
 8001492:	d15f      	bne.n	8001554 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001498:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800149c:	f023 0301 	bic.w	r3, r3, #1
 80014a0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d007      	beq.n	80014c6 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ba:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80014be:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80014d2:	d106      	bne.n	80014e2 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014d8:	f023 0206 	bic.w	r2, r3, #6
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	645a      	str	r2, [r3, #68]	; 0x44
 80014e0:	e002      	b.n	80014e8 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2200      	movs	r2, #0
 80014e6:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2200      	movs	r2, #0
 80014ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80014f0:	4b24      	ldr	r3, [pc, #144]	; (8001584 <HAL_ADC_Start+0x160>)
 80014f2:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80014fc:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	f003 031f 	and.w	r3, r3, #31
 8001506:	2b00      	cmp	r3, #0
 8001508:	d10f      	bne.n	800152a <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	689b      	ldr	r3, [r3, #8]
 8001510:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001514:	2b00      	cmp	r3, #0
 8001516:	d129      	bne.n	800156c <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	689a      	ldr	r2, [r3, #8]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001526:	609a      	str	r2, [r3, #8]
 8001528:	e020      	b.n	800156c <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4a16      	ldr	r2, [pc, #88]	; (8001588 <HAL_ADC_Start+0x164>)
 8001530:	4293      	cmp	r3, r2
 8001532:	d11b      	bne.n	800156c <HAL_ADC_Start+0x148>
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	689b      	ldr	r3, [r3, #8]
 800153a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800153e:	2b00      	cmp	r3, #0
 8001540:	d114      	bne.n	800156c <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	689a      	ldr	r2, [r3, #8]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001550:	609a      	str	r2, [r3, #8]
 8001552:	e00b      	b.n	800156c <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001558:	f043 0210 	orr.w	r2, r3, #16
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001564:	f043 0201 	orr.w	r2, r3, #1
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800156c:	2300      	movs	r3, #0
}
 800156e:	4618      	mov	r0, r3
 8001570:	3714      	adds	r7, #20
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr
 800157a:	bf00      	nop
 800157c:	200000bc 	.word	0x200000bc
 8001580:	431bde83 	.word	0x431bde83
 8001584:	40012300 	.word	0x40012300
 8001588:	40012000 	.word	0x40012000

0800158c <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b084      	sub	sp, #16
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
 8001594:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001596:	2300      	movs	r3, #0
 8001598:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	689b      	ldr	r3, [r3, #8]
 80015a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015a8:	d113      	bne.n	80015d2 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	689b      	ldr	r3, [r3, #8]
 80015b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80015b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80015b8:	d10b      	bne.n	80015d2 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015be:	f043 0220 	orr.w	r2, r3, #32
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2200      	movs	r2, #0
 80015ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
 80015d0:	e063      	b.n	800169a <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80015d2:	f7ff fed7 	bl	8001384 <HAL_GetTick>
 80015d6:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80015d8:	e021      	b.n	800161e <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80015e0:	d01d      	beq.n	800161e <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d007      	beq.n	80015f8 <HAL_ADC_PollForConversion+0x6c>
 80015e8:	f7ff fecc 	bl	8001384 <HAL_GetTick>
 80015ec:	4602      	mov	r2, r0
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	1ad3      	subs	r3, r2, r3
 80015f2:	683a      	ldr	r2, [r7, #0]
 80015f4:	429a      	cmp	r2, r3
 80015f6:	d212      	bcs.n	800161e <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f003 0302 	and.w	r3, r3, #2
 8001602:	2b02      	cmp	r3, #2
 8001604:	d00b      	beq.n	800161e <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160a:	f043 0204 	orr.w	r2, r3, #4
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2200      	movs	r2, #0
 8001616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 800161a:	2303      	movs	r3, #3
 800161c:	e03d      	b.n	800169a <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f003 0302 	and.w	r3, r3, #2
 8001628:	2b02      	cmp	r3, #2
 800162a:	d1d6      	bne.n	80015da <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f06f 0212 	mvn.w	r2, #18
 8001634:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	689b      	ldr	r3, [r3, #8]
 8001648:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800164c:	2b00      	cmp	r3, #0
 800164e:	d123      	bne.n	8001698 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001654:	2b00      	cmp	r3, #0
 8001656:	d11f      	bne.n	8001698 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800165e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001662:	2b00      	cmp	r3, #0
 8001664:	d006      	beq.n	8001674 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001670:	2b00      	cmp	r3, #0
 8001672:	d111      	bne.n	8001698 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001678:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001684:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001688:	2b00      	cmp	r3, #0
 800168a:	d105      	bne.n	8001698 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001690:	f043 0201 	orr.w	r2, r3, #1
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001698:	2300      	movs	r3, #0
}
 800169a:	4618      	mov	r0, r3
 800169c:	3710      	adds	r7, #16
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}

080016a2 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80016a2:	b480      	push	{r7}
 80016a4:	b083      	sub	sp, #12
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	370c      	adds	r7, #12
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr

080016bc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80016bc:	b480      	push	{r7}
 80016be:	b085      	sub	sp, #20
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
 80016c4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80016c6:	2300      	movs	r3, #0
 80016c8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80016d0:	2b01      	cmp	r3, #1
 80016d2:	d101      	bne.n	80016d8 <HAL_ADC_ConfigChannel+0x1c>
 80016d4:	2302      	movs	r3, #2
 80016d6:	e105      	b.n	80018e4 <HAL_ADC_ConfigChannel+0x228>
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2201      	movs	r2, #1
 80016dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	2b09      	cmp	r3, #9
 80016e6:	d925      	bls.n	8001734 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	68d9      	ldr	r1, [r3, #12]
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	b29b      	uxth	r3, r3
 80016f4:	461a      	mov	r2, r3
 80016f6:	4613      	mov	r3, r2
 80016f8:	005b      	lsls	r3, r3, #1
 80016fa:	4413      	add	r3, r2
 80016fc:	3b1e      	subs	r3, #30
 80016fe:	2207      	movs	r2, #7
 8001700:	fa02 f303 	lsl.w	r3, r2, r3
 8001704:	43da      	mvns	r2, r3
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	400a      	ands	r2, r1
 800170c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	68d9      	ldr	r1, [r3, #12]
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	689a      	ldr	r2, [r3, #8]
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	b29b      	uxth	r3, r3
 800171e:	4618      	mov	r0, r3
 8001720:	4603      	mov	r3, r0
 8001722:	005b      	lsls	r3, r3, #1
 8001724:	4403      	add	r3, r0
 8001726:	3b1e      	subs	r3, #30
 8001728:	409a      	lsls	r2, r3
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	430a      	orrs	r2, r1
 8001730:	60da      	str	r2, [r3, #12]
 8001732:	e022      	b.n	800177a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	6919      	ldr	r1, [r3, #16]
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	b29b      	uxth	r3, r3
 8001740:	461a      	mov	r2, r3
 8001742:	4613      	mov	r3, r2
 8001744:	005b      	lsls	r3, r3, #1
 8001746:	4413      	add	r3, r2
 8001748:	2207      	movs	r2, #7
 800174a:	fa02 f303 	lsl.w	r3, r2, r3
 800174e:	43da      	mvns	r2, r3
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	400a      	ands	r2, r1
 8001756:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	6919      	ldr	r1, [r3, #16]
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	689a      	ldr	r2, [r3, #8]
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	b29b      	uxth	r3, r3
 8001768:	4618      	mov	r0, r3
 800176a:	4603      	mov	r3, r0
 800176c:	005b      	lsls	r3, r3, #1
 800176e:	4403      	add	r3, r0
 8001770:	409a      	lsls	r2, r3
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	430a      	orrs	r2, r1
 8001778:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	2b06      	cmp	r3, #6
 8001780:	d824      	bhi.n	80017cc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	685a      	ldr	r2, [r3, #4]
 800178c:	4613      	mov	r3, r2
 800178e:	009b      	lsls	r3, r3, #2
 8001790:	4413      	add	r3, r2
 8001792:	3b05      	subs	r3, #5
 8001794:	221f      	movs	r2, #31
 8001796:	fa02 f303 	lsl.w	r3, r2, r3
 800179a:	43da      	mvns	r2, r3
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	400a      	ands	r2, r1
 80017a2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	b29b      	uxth	r3, r3
 80017b0:	4618      	mov	r0, r3
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	685a      	ldr	r2, [r3, #4]
 80017b6:	4613      	mov	r3, r2
 80017b8:	009b      	lsls	r3, r3, #2
 80017ba:	4413      	add	r3, r2
 80017bc:	3b05      	subs	r3, #5
 80017be:	fa00 f203 	lsl.w	r2, r0, r3
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	430a      	orrs	r2, r1
 80017c8:	635a      	str	r2, [r3, #52]	; 0x34
 80017ca:	e04c      	b.n	8001866 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	2b0c      	cmp	r3, #12
 80017d2:	d824      	bhi.n	800181e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	685a      	ldr	r2, [r3, #4]
 80017de:	4613      	mov	r3, r2
 80017e0:	009b      	lsls	r3, r3, #2
 80017e2:	4413      	add	r3, r2
 80017e4:	3b23      	subs	r3, #35	; 0x23
 80017e6:	221f      	movs	r2, #31
 80017e8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ec:	43da      	mvns	r2, r3
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	400a      	ands	r2, r1
 80017f4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	b29b      	uxth	r3, r3
 8001802:	4618      	mov	r0, r3
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	685a      	ldr	r2, [r3, #4]
 8001808:	4613      	mov	r3, r2
 800180a:	009b      	lsls	r3, r3, #2
 800180c:	4413      	add	r3, r2
 800180e:	3b23      	subs	r3, #35	; 0x23
 8001810:	fa00 f203 	lsl.w	r2, r0, r3
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	430a      	orrs	r2, r1
 800181a:	631a      	str	r2, [r3, #48]	; 0x30
 800181c:	e023      	b.n	8001866 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	685a      	ldr	r2, [r3, #4]
 8001828:	4613      	mov	r3, r2
 800182a:	009b      	lsls	r3, r3, #2
 800182c:	4413      	add	r3, r2
 800182e:	3b41      	subs	r3, #65	; 0x41
 8001830:	221f      	movs	r2, #31
 8001832:	fa02 f303 	lsl.w	r3, r2, r3
 8001836:	43da      	mvns	r2, r3
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	400a      	ands	r2, r1
 800183e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	b29b      	uxth	r3, r3
 800184c:	4618      	mov	r0, r3
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	685a      	ldr	r2, [r3, #4]
 8001852:	4613      	mov	r3, r2
 8001854:	009b      	lsls	r3, r3, #2
 8001856:	4413      	add	r3, r2
 8001858:	3b41      	subs	r3, #65	; 0x41
 800185a:	fa00 f203 	lsl.w	r2, r0, r3
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	430a      	orrs	r2, r1
 8001864:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001866:	4b22      	ldr	r3, [pc, #136]	; (80018f0 <HAL_ADC_ConfigChannel+0x234>)
 8001868:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a21      	ldr	r2, [pc, #132]	; (80018f4 <HAL_ADC_ConfigChannel+0x238>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d109      	bne.n	8001888 <HAL_ADC_ConfigChannel+0x1cc>
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	2b12      	cmp	r3, #18
 800187a:	d105      	bne.n	8001888 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a19      	ldr	r2, [pc, #100]	; (80018f4 <HAL_ADC_ConfigChannel+0x238>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d123      	bne.n	80018da <HAL_ADC_ConfigChannel+0x21e>
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	2b10      	cmp	r3, #16
 8001898:	d003      	beq.n	80018a2 <HAL_ADC_ConfigChannel+0x1e6>
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	2b11      	cmp	r3, #17
 80018a0:	d11b      	bne.n	80018da <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	2b10      	cmp	r3, #16
 80018b4:	d111      	bne.n	80018da <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80018b6:	4b10      	ldr	r3, [pc, #64]	; (80018f8 <HAL_ADC_ConfigChannel+0x23c>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a10      	ldr	r2, [pc, #64]	; (80018fc <HAL_ADC_ConfigChannel+0x240>)
 80018bc:	fba2 2303 	umull	r2, r3, r2, r3
 80018c0:	0c9a      	lsrs	r2, r3, #18
 80018c2:	4613      	mov	r3, r2
 80018c4:	009b      	lsls	r3, r3, #2
 80018c6:	4413      	add	r3, r2
 80018c8:	005b      	lsls	r3, r3, #1
 80018ca:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80018cc:	e002      	b.n	80018d4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80018ce:	68bb      	ldr	r3, [r7, #8]
 80018d0:	3b01      	subs	r3, #1
 80018d2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d1f9      	bne.n	80018ce <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2200      	movs	r2, #0
 80018de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80018e2:	2300      	movs	r3, #0
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	3714      	adds	r7, #20
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr
 80018f0:	40012300 	.word	0x40012300
 80018f4:	40012000 	.word	0x40012000
 80018f8:	200000bc 	.word	0x200000bc
 80018fc:	431bde83 	.word	0x431bde83

08001900 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001900:	b480      	push	{r7}
 8001902:	b085      	sub	sp, #20
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001908:	4b79      	ldr	r3, [pc, #484]	; (8001af0 <ADC_Init+0x1f0>)
 800190a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	685a      	ldr	r2, [r3, #4]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	431a      	orrs	r2, r3
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	685a      	ldr	r2, [r3, #4]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001934:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	6859      	ldr	r1, [r3, #4]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	691b      	ldr	r3, [r3, #16]
 8001940:	021a      	lsls	r2, r3, #8
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	430a      	orrs	r2, r1
 8001948:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	685a      	ldr	r2, [r3, #4]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001958:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	6859      	ldr	r1, [r3, #4]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	689a      	ldr	r2, [r3, #8]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	430a      	orrs	r2, r1
 800196a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	689a      	ldr	r2, [r3, #8]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800197a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	6899      	ldr	r1, [r3, #8]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	68da      	ldr	r2, [r3, #12]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	430a      	orrs	r2, r1
 800198c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001992:	4a58      	ldr	r2, [pc, #352]	; (8001af4 <ADC_Init+0x1f4>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d022      	beq.n	80019de <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	689a      	ldr	r2, [r3, #8]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80019a6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	6899      	ldr	r1, [r3, #8]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	430a      	orrs	r2, r1
 80019b8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	689a      	ldr	r2, [r3, #8]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80019c8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	6899      	ldr	r1, [r3, #8]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	430a      	orrs	r2, r1
 80019da:	609a      	str	r2, [r3, #8]
 80019dc:	e00f      	b.n	80019fe <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	689a      	ldr	r2, [r3, #8]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80019ec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	689a      	ldr	r2, [r3, #8]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80019fc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	689a      	ldr	r2, [r3, #8]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f022 0202 	bic.w	r2, r2, #2
 8001a0c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	6899      	ldr	r1, [r3, #8]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	7e1b      	ldrb	r3, [r3, #24]
 8001a18:	005a      	lsls	r2, r3, #1
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	430a      	orrs	r2, r1
 8001a20:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d01b      	beq.n	8001a64 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	685a      	ldr	r2, [r3, #4]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001a3a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	685a      	ldr	r2, [r3, #4]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001a4a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	6859      	ldr	r1, [r3, #4]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a56:	3b01      	subs	r3, #1
 8001a58:	035a      	lsls	r2, r3, #13
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	430a      	orrs	r2, r1
 8001a60:	605a      	str	r2, [r3, #4]
 8001a62:	e007      	b.n	8001a74 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	685a      	ldr	r2, [r3, #4]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a72:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001a82:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	69db      	ldr	r3, [r3, #28]
 8001a8e:	3b01      	subs	r3, #1
 8001a90:	051a      	lsls	r2, r3, #20
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	430a      	orrs	r2, r1
 8001a98:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	689a      	ldr	r2, [r3, #8]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001aa8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	6899      	ldr	r1, [r3, #8]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001ab6:	025a      	lsls	r2, r3, #9
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	430a      	orrs	r2, r1
 8001abe:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	689a      	ldr	r2, [r3, #8]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ace:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	6899      	ldr	r1, [r3, #8]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	695b      	ldr	r3, [r3, #20]
 8001ada:	029a      	lsls	r2, r3, #10
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	430a      	orrs	r2, r1
 8001ae2:	609a      	str	r2, [r3, #8]
}
 8001ae4:	bf00      	nop
 8001ae6:	3714      	adds	r7, #20
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr
 8001af0:	40012300 	.word	0x40012300
 8001af4:	0f000001 	.word	0x0f000001

08001af8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b085      	sub	sp, #20
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	f003 0307 	and.w	r3, r3, #7
 8001b06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b08:	4b0c      	ldr	r3, [pc, #48]	; (8001b3c <__NVIC_SetPriorityGrouping+0x44>)
 8001b0a:	68db      	ldr	r3, [r3, #12]
 8001b0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b0e:	68ba      	ldr	r2, [r7, #8]
 8001b10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b14:	4013      	ands	r3, r2
 8001b16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b2a:	4a04      	ldr	r2, [pc, #16]	; (8001b3c <__NVIC_SetPriorityGrouping+0x44>)
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	60d3      	str	r3, [r2, #12]
}
 8001b30:	bf00      	nop
 8001b32:	3714      	adds	r7, #20
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr
 8001b3c:	e000ed00 	.word	0xe000ed00

08001b40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b44:	4b04      	ldr	r3, [pc, #16]	; (8001b58 <__NVIC_GetPriorityGrouping+0x18>)
 8001b46:	68db      	ldr	r3, [r3, #12]
 8001b48:	0a1b      	lsrs	r3, r3, #8
 8001b4a:	f003 0307 	and.w	r3, r3, #7
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr
 8001b58:	e000ed00 	.word	0xe000ed00

08001b5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b083      	sub	sp, #12
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	4603      	mov	r3, r0
 8001b64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	db0b      	blt.n	8001b86 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b6e:	79fb      	ldrb	r3, [r7, #7]
 8001b70:	f003 021f 	and.w	r2, r3, #31
 8001b74:	4907      	ldr	r1, [pc, #28]	; (8001b94 <__NVIC_EnableIRQ+0x38>)
 8001b76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b7a:	095b      	lsrs	r3, r3, #5
 8001b7c:	2001      	movs	r0, #1
 8001b7e:	fa00 f202 	lsl.w	r2, r0, r2
 8001b82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b86:	bf00      	nop
 8001b88:	370c      	adds	r7, #12
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr
 8001b92:	bf00      	nop
 8001b94:	e000e100 	.word	0xe000e100

08001b98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	6039      	str	r1, [r7, #0]
 8001ba2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ba4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	db0a      	blt.n	8001bc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	b2da      	uxtb	r2, r3
 8001bb0:	490c      	ldr	r1, [pc, #48]	; (8001be4 <__NVIC_SetPriority+0x4c>)
 8001bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb6:	0112      	lsls	r2, r2, #4
 8001bb8:	b2d2      	uxtb	r2, r2
 8001bba:	440b      	add	r3, r1
 8001bbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bc0:	e00a      	b.n	8001bd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	b2da      	uxtb	r2, r3
 8001bc6:	4908      	ldr	r1, [pc, #32]	; (8001be8 <__NVIC_SetPriority+0x50>)
 8001bc8:	79fb      	ldrb	r3, [r7, #7]
 8001bca:	f003 030f 	and.w	r3, r3, #15
 8001bce:	3b04      	subs	r3, #4
 8001bd0:	0112      	lsls	r2, r2, #4
 8001bd2:	b2d2      	uxtb	r2, r2
 8001bd4:	440b      	add	r3, r1
 8001bd6:	761a      	strb	r2, [r3, #24]
}
 8001bd8:	bf00      	nop
 8001bda:	370c      	adds	r7, #12
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr
 8001be4:	e000e100 	.word	0xe000e100
 8001be8:	e000ed00 	.word	0xe000ed00

08001bec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b089      	sub	sp, #36	; 0x24
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	60f8      	str	r0, [r7, #12]
 8001bf4:	60b9      	str	r1, [r7, #8]
 8001bf6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	f003 0307 	and.w	r3, r3, #7
 8001bfe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c00:	69fb      	ldr	r3, [r7, #28]
 8001c02:	f1c3 0307 	rsb	r3, r3, #7
 8001c06:	2b04      	cmp	r3, #4
 8001c08:	bf28      	it	cs
 8001c0a:	2304      	movcs	r3, #4
 8001c0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	3304      	adds	r3, #4
 8001c12:	2b06      	cmp	r3, #6
 8001c14:	d902      	bls.n	8001c1c <NVIC_EncodePriority+0x30>
 8001c16:	69fb      	ldr	r3, [r7, #28]
 8001c18:	3b03      	subs	r3, #3
 8001c1a:	e000      	b.n	8001c1e <NVIC_EncodePriority+0x32>
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c20:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001c24:	69bb      	ldr	r3, [r7, #24]
 8001c26:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2a:	43da      	mvns	r2, r3
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	401a      	ands	r2, r3
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c34:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c3e:	43d9      	mvns	r1, r3
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c44:	4313      	orrs	r3, r2
         );
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3724      	adds	r7, #36	; 0x24
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr

08001c52 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c52:	b580      	push	{r7, lr}
 8001c54:	b082      	sub	sp, #8
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c5a:	6878      	ldr	r0, [r7, #4]
 8001c5c:	f7ff ff4c 	bl	8001af8 <__NVIC_SetPriorityGrouping>
}
 8001c60:	bf00      	nop
 8001c62:	3708      	adds	r7, #8
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}

08001c68 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b086      	sub	sp, #24
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	4603      	mov	r3, r0
 8001c70:	60b9      	str	r1, [r7, #8]
 8001c72:	607a      	str	r2, [r7, #4]
 8001c74:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c76:	2300      	movs	r3, #0
 8001c78:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c7a:	f7ff ff61 	bl	8001b40 <__NVIC_GetPriorityGrouping>
 8001c7e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c80:	687a      	ldr	r2, [r7, #4]
 8001c82:	68b9      	ldr	r1, [r7, #8]
 8001c84:	6978      	ldr	r0, [r7, #20]
 8001c86:	f7ff ffb1 	bl	8001bec <NVIC_EncodePriority>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c90:	4611      	mov	r1, r2
 8001c92:	4618      	mov	r0, r3
 8001c94:	f7ff ff80 	bl	8001b98 <__NVIC_SetPriority>
}
 8001c98:	bf00      	nop
 8001c9a:	3718      	adds	r7, #24
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}

08001ca0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b082      	sub	sp, #8
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f7ff ff54 	bl	8001b5c <__NVIC_EnableIRQ>
}
 8001cb4:	bf00      	nop
 8001cb6:	3708      	adds	r7, #8
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}

08001cbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b089      	sub	sp, #36	; 0x24
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
 8001cc4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	61fb      	str	r3, [r7, #28]
 8001cd6:	e14d      	b.n	8001f74 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001cd8:	2201      	movs	r2, #1
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	697a      	ldr	r2, [r7, #20]
 8001ce8:	4013      	ands	r3, r2
 8001cea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001cec:	693a      	ldr	r2, [r7, #16]
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	f040 813c 	bne.w	8001f6e <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	f003 0303 	and.w	r3, r3, #3
 8001cfe:	2b01      	cmp	r3, #1
 8001d00:	d005      	beq.n	8001d0e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d0a:	2b02      	cmp	r3, #2
 8001d0c:	d130      	bne.n	8001d70 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d14:	69fb      	ldr	r3, [r7, #28]
 8001d16:	005b      	lsls	r3, r3, #1
 8001d18:	2203      	movs	r2, #3
 8001d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1e:	43db      	mvns	r3, r3
 8001d20:	69ba      	ldr	r2, [r7, #24]
 8001d22:	4013      	ands	r3, r2
 8001d24:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	68da      	ldr	r2, [r3, #12]
 8001d2a:	69fb      	ldr	r3, [r7, #28]
 8001d2c:	005b      	lsls	r3, r3, #1
 8001d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d32:	69ba      	ldr	r2, [r7, #24]
 8001d34:	4313      	orrs	r3, r2
 8001d36:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	69ba      	ldr	r2, [r7, #24]
 8001d3c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d44:	2201      	movs	r2, #1
 8001d46:	69fb      	ldr	r3, [r7, #28]
 8001d48:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4c:	43db      	mvns	r3, r3
 8001d4e:	69ba      	ldr	r2, [r7, #24]
 8001d50:	4013      	ands	r3, r2
 8001d52:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	091b      	lsrs	r3, r3, #4
 8001d5a:	f003 0201 	and.w	r2, r3, #1
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	fa02 f303 	lsl.w	r3, r2, r3
 8001d64:	69ba      	ldr	r2, [r7, #24]
 8001d66:	4313      	orrs	r3, r2
 8001d68:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	69ba      	ldr	r2, [r7, #24]
 8001d6e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	f003 0303 	and.w	r3, r3, #3
 8001d78:	2b03      	cmp	r3, #3
 8001d7a:	d017      	beq.n	8001dac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	68db      	ldr	r3, [r3, #12]
 8001d80:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d82:	69fb      	ldr	r3, [r7, #28]
 8001d84:	005b      	lsls	r3, r3, #1
 8001d86:	2203      	movs	r2, #3
 8001d88:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8c:	43db      	mvns	r3, r3
 8001d8e:	69ba      	ldr	r2, [r7, #24]
 8001d90:	4013      	ands	r3, r2
 8001d92:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	689a      	ldr	r2, [r3, #8]
 8001d98:	69fb      	ldr	r3, [r7, #28]
 8001d9a:	005b      	lsls	r3, r3, #1
 8001d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001da0:	69ba      	ldr	r2, [r7, #24]
 8001da2:	4313      	orrs	r3, r2
 8001da4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	69ba      	ldr	r2, [r7, #24]
 8001daa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	f003 0303 	and.w	r3, r3, #3
 8001db4:	2b02      	cmp	r3, #2
 8001db6:	d123      	bne.n	8001e00 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001db8:	69fb      	ldr	r3, [r7, #28]
 8001dba:	08da      	lsrs	r2, r3, #3
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	3208      	adds	r2, #8
 8001dc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	f003 0307 	and.w	r3, r3, #7
 8001dcc:	009b      	lsls	r3, r3, #2
 8001dce:	220f      	movs	r2, #15
 8001dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd4:	43db      	mvns	r3, r3
 8001dd6:	69ba      	ldr	r2, [r7, #24]
 8001dd8:	4013      	ands	r3, r2
 8001dda:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	691a      	ldr	r2, [r3, #16]
 8001de0:	69fb      	ldr	r3, [r7, #28]
 8001de2:	f003 0307 	and.w	r3, r3, #7
 8001de6:	009b      	lsls	r3, r3, #2
 8001de8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dec:	69ba      	ldr	r2, [r7, #24]
 8001dee:	4313      	orrs	r3, r2
 8001df0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001df2:	69fb      	ldr	r3, [r7, #28]
 8001df4:	08da      	lsrs	r2, r3, #3
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	3208      	adds	r2, #8
 8001dfa:	69b9      	ldr	r1, [r7, #24]
 8001dfc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	005b      	lsls	r3, r3, #1
 8001e0a:	2203      	movs	r2, #3
 8001e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e10:	43db      	mvns	r3, r3
 8001e12:	69ba      	ldr	r2, [r7, #24]
 8001e14:	4013      	ands	r3, r2
 8001e16:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	f003 0203 	and.w	r2, r3, #3
 8001e20:	69fb      	ldr	r3, [r7, #28]
 8001e22:	005b      	lsls	r3, r3, #1
 8001e24:	fa02 f303 	lsl.w	r3, r2, r3
 8001e28:	69ba      	ldr	r2, [r7, #24]
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	69ba      	ldr	r2, [r7, #24]
 8001e32:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	f000 8096 	beq.w	8001f6e <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e42:	2300      	movs	r3, #0
 8001e44:	60fb      	str	r3, [r7, #12]
 8001e46:	4b51      	ldr	r3, [pc, #324]	; (8001f8c <HAL_GPIO_Init+0x2d0>)
 8001e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e4a:	4a50      	ldr	r2, [pc, #320]	; (8001f8c <HAL_GPIO_Init+0x2d0>)
 8001e4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e50:	6453      	str	r3, [r2, #68]	; 0x44
 8001e52:	4b4e      	ldr	r3, [pc, #312]	; (8001f8c <HAL_GPIO_Init+0x2d0>)
 8001e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e5a:	60fb      	str	r3, [r7, #12]
 8001e5c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e5e:	4a4c      	ldr	r2, [pc, #304]	; (8001f90 <HAL_GPIO_Init+0x2d4>)
 8001e60:	69fb      	ldr	r3, [r7, #28]
 8001e62:	089b      	lsrs	r3, r3, #2
 8001e64:	3302      	adds	r3, #2
 8001e66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e6c:	69fb      	ldr	r3, [r7, #28]
 8001e6e:	f003 0303 	and.w	r3, r3, #3
 8001e72:	009b      	lsls	r3, r3, #2
 8001e74:	220f      	movs	r2, #15
 8001e76:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7a:	43db      	mvns	r3, r3
 8001e7c:	69ba      	ldr	r2, [r7, #24]
 8001e7e:	4013      	ands	r3, r2
 8001e80:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	4a43      	ldr	r2, [pc, #268]	; (8001f94 <HAL_GPIO_Init+0x2d8>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d00d      	beq.n	8001ea6 <HAL_GPIO_Init+0x1ea>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4a42      	ldr	r2, [pc, #264]	; (8001f98 <HAL_GPIO_Init+0x2dc>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d007      	beq.n	8001ea2 <HAL_GPIO_Init+0x1e6>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	4a41      	ldr	r2, [pc, #260]	; (8001f9c <HAL_GPIO_Init+0x2e0>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d101      	bne.n	8001e9e <HAL_GPIO_Init+0x1e2>
 8001e9a:	2302      	movs	r3, #2
 8001e9c:	e004      	b.n	8001ea8 <HAL_GPIO_Init+0x1ec>
 8001e9e:	2307      	movs	r3, #7
 8001ea0:	e002      	b.n	8001ea8 <HAL_GPIO_Init+0x1ec>
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e000      	b.n	8001ea8 <HAL_GPIO_Init+0x1ec>
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	69fa      	ldr	r2, [r7, #28]
 8001eaa:	f002 0203 	and.w	r2, r2, #3
 8001eae:	0092      	lsls	r2, r2, #2
 8001eb0:	4093      	lsls	r3, r2
 8001eb2:	69ba      	ldr	r2, [r7, #24]
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001eb8:	4935      	ldr	r1, [pc, #212]	; (8001f90 <HAL_GPIO_Init+0x2d4>)
 8001eba:	69fb      	ldr	r3, [r7, #28]
 8001ebc:	089b      	lsrs	r3, r3, #2
 8001ebe:	3302      	adds	r3, #2
 8001ec0:	69ba      	ldr	r2, [r7, #24]
 8001ec2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ec6:	4b36      	ldr	r3, [pc, #216]	; (8001fa0 <HAL_GPIO_Init+0x2e4>)
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	43db      	mvns	r3, r3
 8001ed0:	69ba      	ldr	r2, [r7, #24]
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d003      	beq.n	8001eea <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8001ee2:	69ba      	ldr	r2, [r7, #24]
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001eea:	4a2d      	ldr	r2, [pc, #180]	; (8001fa0 <HAL_GPIO_Init+0x2e4>)
 8001eec:	69bb      	ldr	r3, [r7, #24]
 8001eee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ef0:	4b2b      	ldr	r3, [pc, #172]	; (8001fa0 <HAL_GPIO_Init+0x2e4>)
 8001ef2:	68db      	ldr	r3, [r3, #12]
 8001ef4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	43db      	mvns	r3, r3
 8001efa:	69ba      	ldr	r2, [r7, #24]
 8001efc:	4013      	ands	r3, r2
 8001efe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d003      	beq.n	8001f14 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8001f0c:	69ba      	ldr	r2, [r7, #24]
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	4313      	orrs	r3, r2
 8001f12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f14:	4a22      	ldr	r2, [pc, #136]	; (8001fa0 <HAL_GPIO_Init+0x2e4>)
 8001f16:	69bb      	ldr	r3, [r7, #24]
 8001f18:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f1a:	4b21      	ldr	r3, [pc, #132]	; (8001fa0 <HAL_GPIO_Init+0x2e4>)
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	43db      	mvns	r3, r3
 8001f24:	69ba      	ldr	r2, [r7, #24]
 8001f26:	4013      	ands	r3, r2
 8001f28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d003      	beq.n	8001f3e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001f36:	69ba      	ldr	r2, [r7, #24]
 8001f38:	693b      	ldr	r3, [r7, #16]
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f3e:	4a18      	ldr	r2, [pc, #96]	; (8001fa0 <HAL_GPIO_Init+0x2e4>)
 8001f40:	69bb      	ldr	r3, [r7, #24]
 8001f42:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f44:	4b16      	ldr	r3, [pc, #88]	; (8001fa0 <HAL_GPIO_Init+0x2e4>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	43db      	mvns	r3, r3
 8001f4e:	69ba      	ldr	r2, [r7, #24]
 8001f50:	4013      	ands	r3, r2
 8001f52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d003      	beq.n	8001f68 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001f60:	69ba      	ldr	r2, [r7, #24]
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	4313      	orrs	r3, r2
 8001f66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f68:	4a0d      	ldr	r2, [pc, #52]	; (8001fa0 <HAL_GPIO_Init+0x2e4>)
 8001f6a:	69bb      	ldr	r3, [r7, #24]
 8001f6c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f6e:	69fb      	ldr	r3, [r7, #28]
 8001f70:	3301      	adds	r3, #1
 8001f72:	61fb      	str	r3, [r7, #28]
 8001f74:	69fb      	ldr	r3, [r7, #28]
 8001f76:	2b0f      	cmp	r3, #15
 8001f78:	f67f aeae 	bls.w	8001cd8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f7c:	bf00      	nop
 8001f7e:	bf00      	nop
 8001f80:	3724      	adds	r7, #36	; 0x24
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr
 8001f8a:	bf00      	nop
 8001f8c:	40023800 	.word	0x40023800
 8001f90:	40013800 	.word	0x40013800
 8001f94:	40020000 	.word	0x40020000
 8001f98:	40020400 	.word	0x40020400
 8001f9c:	40020800 	.word	0x40020800
 8001fa0:	40013c00 	.word	0x40013c00

08001fa4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b083      	sub	sp, #12
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
 8001fac:	460b      	mov	r3, r1
 8001fae:	807b      	strh	r3, [r7, #2]
 8001fb0:	4613      	mov	r3, r2
 8001fb2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001fb4:	787b      	ldrb	r3, [r7, #1]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d003      	beq.n	8001fc2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fba:	887a      	ldrh	r2, [r7, #2]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001fc0:	e003      	b.n	8001fca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001fc2:	887b      	ldrh	r3, [r7, #2]
 8001fc4:	041a      	lsls	r2, r3, #16
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	619a      	str	r2, [r3, #24]
}
 8001fca:	bf00      	nop
 8001fcc:	370c      	adds	r7, #12
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr
	...

08001fd8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	4603      	mov	r3, r0
 8001fe0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001fe2:	4b08      	ldr	r3, [pc, #32]	; (8002004 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001fe4:	695a      	ldr	r2, [r3, #20]
 8001fe6:	88fb      	ldrh	r3, [r7, #6]
 8001fe8:	4013      	ands	r3, r2
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d006      	beq.n	8001ffc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001fee:	4a05      	ldr	r2, [pc, #20]	; (8002004 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ff0:	88fb      	ldrh	r3, [r7, #6]
 8001ff2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001ff4:	88fb      	ldrh	r3, [r7, #6]
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f7fe fddc 	bl	8000bb4 <HAL_GPIO_EXTI_Callback>
  }
}
 8001ffc:	bf00      	nop
 8001ffe:	3708      	adds	r7, #8
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}
 8002004:	40013c00 	.word	0x40013c00

08002008 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b084      	sub	sp, #16
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
 8002010:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d101      	bne.n	800201c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002018:	2301      	movs	r3, #1
 800201a:	e0cc      	b.n	80021b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800201c:	4b68      	ldr	r3, [pc, #416]	; (80021c0 <HAL_RCC_ClockConfig+0x1b8>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f003 0307 	and.w	r3, r3, #7
 8002024:	683a      	ldr	r2, [r7, #0]
 8002026:	429a      	cmp	r2, r3
 8002028:	d90c      	bls.n	8002044 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800202a:	4b65      	ldr	r3, [pc, #404]	; (80021c0 <HAL_RCC_ClockConfig+0x1b8>)
 800202c:	683a      	ldr	r2, [r7, #0]
 800202e:	b2d2      	uxtb	r2, r2
 8002030:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002032:	4b63      	ldr	r3, [pc, #396]	; (80021c0 <HAL_RCC_ClockConfig+0x1b8>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 0307 	and.w	r3, r3, #7
 800203a:	683a      	ldr	r2, [r7, #0]
 800203c:	429a      	cmp	r2, r3
 800203e:	d001      	beq.n	8002044 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	e0b8      	b.n	80021b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f003 0302 	and.w	r3, r3, #2
 800204c:	2b00      	cmp	r3, #0
 800204e:	d020      	beq.n	8002092 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f003 0304 	and.w	r3, r3, #4
 8002058:	2b00      	cmp	r3, #0
 800205a:	d005      	beq.n	8002068 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800205c:	4b59      	ldr	r3, [pc, #356]	; (80021c4 <HAL_RCC_ClockConfig+0x1bc>)
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	4a58      	ldr	r2, [pc, #352]	; (80021c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002062:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002066:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f003 0308 	and.w	r3, r3, #8
 8002070:	2b00      	cmp	r3, #0
 8002072:	d005      	beq.n	8002080 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002074:	4b53      	ldr	r3, [pc, #332]	; (80021c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	4a52      	ldr	r2, [pc, #328]	; (80021c4 <HAL_RCC_ClockConfig+0x1bc>)
 800207a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800207e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002080:	4b50      	ldr	r3, [pc, #320]	; (80021c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002082:	689b      	ldr	r3, [r3, #8]
 8002084:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	494d      	ldr	r1, [pc, #308]	; (80021c4 <HAL_RCC_ClockConfig+0x1bc>)
 800208e:	4313      	orrs	r3, r2
 8002090:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 0301 	and.w	r3, r3, #1
 800209a:	2b00      	cmp	r3, #0
 800209c:	d044      	beq.n	8002128 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d107      	bne.n	80020b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020a6:	4b47      	ldr	r3, [pc, #284]	; (80021c4 <HAL_RCC_ClockConfig+0x1bc>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d119      	bne.n	80020e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	e07f      	b.n	80021b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	2b02      	cmp	r3, #2
 80020bc:	d003      	beq.n	80020c6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020c2:	2b03      	cmp	r3, #3
 80020c4:	d107      	bne.n	80020d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020c6:	4b3f      	ldr	r3, [pc, #252]	; (80021c4 <HAL_RCC_ClockConfig+0x1bc>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d109      	bne.n	80020e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e06f      	b.n	80021b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020d6:	4b3b      	ldr	r3, [pc, #236]	; (80021c4 <HAL_RCC_ClockConfig+0x1bc>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 0302 	and.w	r3, r3, #2
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d101      	bne.n	80020e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	e067      	b.n	80021b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020e6:	4b37      	ldr	r3, [pc, #220]	; (80021c4 <HAL_RCC_ClockConfig+0x1bc>)
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	f023 0203 	bic.w	r2, r3, #3
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	4934      	ldr	r1, [pc, #208]	; (80021c4 <HAL_RCC_ClockConfig+0x1bc>)
 80020f4:	4313      	orrs	r3, r2
 80020f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020f8:	f7ff f944 	bl	8001384 <HAL_GetTick>
 80020fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020fe:	e00a      	b.n	8002116 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002100:	f7ff f940 	bl	8001384 <HAL_GetTick>
 8002104:	4602      	mov	r2, r0
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	f241 3288 	movw	r2, #5000	; 0x1388
 800210e:	4293      	cmp	r3, r2
 8002110:	d901      	bls.n	8002116 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002112:	2303      	movs	r3, #3
 8002114:	e04f      	b.n	80021b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002116:	4b2b      	ldr	r3, [pc, #172]	; (80021c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	f003 020c 	and.w	r2, r3, #12
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	429a      	cmp	r2, r3
 8002126:	d1eb      	bne.n	8002100 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002128:	4b25      	ldr	r3, [pc, #148]	; (80021c0 <HAL_RCC_ClockConfig+0x1b8>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f003 0307 	and.w	r3, r3, #7
 8002130:	683a      	ldr	r2, [r7, #0]
 8002132:	429a      	cmp	r2, r3
 8002134:	d20c      	bcs.n	8002150 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002136:	4b22      	ldr	r3, [pc, #136]	; (80021c0 <HAL_RCC_ClockConfig+0x1b8>)
 8002138:	683a      	ldr	r2, [r7, #0]
 800213a:	b2d2      	uxtb	r2, r2
 800213c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800213e:	4b20      	ldr	r3, [pc, #128]	; (80021c0 <HAL_RCC_ClockConfig+0x1b8>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 0307 	and.w	r3, r3, #7
 8002146:	683a      	ldr	r2, [r7, #0]
 8002148:	429a      	cmp	r2, r3
 800214a:	d001      	beq.n	8002150 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800214c:	2301      	movs	r3, #1
 800214e:	e032      	b.n	80021b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 0304 	and.w	r3, r3, #4
 8002158:	2b00      	cmp	r3, #0
 800215a:	d008      	beq.n	800216e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800215c:	4b19      	ldr	r3, [pc, #100]	; (80021c4 <HAL_RCC_ClockConfig+0x1bc>)
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	68db      	ldr	r3, [r3, #12]
 8002168:	4916      	ldr	r1, [pc, #88]	; (80021c4 <HAL_RCC_ClockConfig+0x1bc>)
 800216a:	4313      	orrs	r3, r2
 800216c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 0308 	and.w	r3, r3, #8
 8002176:	2b00      	cmp	r3, #0
 8002178:	d009      	beq.n	800218e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800217a:	4b12      	ldr	r3, [pc, #72]	; (80021c4 <HAL_RCC_ClockConfig+0x1bc>)
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	691b      	ldr	r3, [r3, #16]
 8002186:	00db      	lsls	r3, r3, #3
 8002188:	490e      	ldr	r1, [pc, #56]	; (80021c4 <HAL_RCC_ClockConfig+0x1bc>)
 800218a:	4313      	orrs	r3, r2
 800218c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800218e:	f000 f821 	bl	80021d4 <HAL_RCC_GetSysClockFreq>
 8002192:	4602      	mov	r2, r0
 8002194:	4b0b      	ldr	r3, [pc, #44]	; (80021c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	091b      	lsrs	r3, r3, #4
 800219a:	f003 030f 	and.w	r3, r3, #15
 800219e:	490a      	ldr	r1, [pc, #40]	; (80021c8 <HAL_RCC_ClockConfig+0x1c0>)
 80021a0:	5ccb      	ldrb	r3, [r1, r3]
 80021a2:	fa22 f303 	lsr.w	r3, r2, r3
 80021a6:	4a09      	ldr	r2, [pc, #36]	; (80021cc <HAL_RCC_ClockConfig+0x1c4>)
 80021a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80021aa:	4b09      	ldr	r3, [pc, #36]	; (80021d0 <HAL_RCC_ClockConfig+0x1c8>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4618      	mov	r0, r3
 80021b0:	f7fe fe94 	bl	8000edc <HAL_InitTick>

  return HAL_OK;
 80021b4:	2300      	movs	r3, #0
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3710      	adds	r7, #16
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	40023c00 	.word	0x40023c00
 80021c4:	40023800 	.word	0x40023800
 80021c8:	08007d54 	.word	0x08007d54
 80021cc:	200000bc 	.word	0x200000bc
 80021d0:	200000c0 	.word	0x200000c0

080021d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80021d8:	b094      	sub	sp, #80	; 0x50
 80021da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80021dc:	2300      	movs	r3, #0
 80021de:	647b      	str	r3, [r7, #68]	; 0x44
 80021e0:	2300      	movs	r3, #0
 80021e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80021e4:	2300      	movs	r3, #0
 80021e6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80021e8:	2300      	movs	r3, #0
 80021ea:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80021ec:	4b79      	ldr	r3, [pc, #484]	; (80023d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	f003 030c 	and.w	r3, r3, #12
 80021f4:	2b08      	cmp	r3, #8
 80021f6:	d00d      	beq.n	8002214 <HAL_RCC_GetSysClockFreq+0x40>
 80021f8:	2b08      	cmp	r3, #8
 80021fa:	f200 80e1 	bhi.w	80023c0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d002      	beq.n	8002208 <HAL_RCC_GetSysClockFreq+0x34>
 8002202:	2b04      	cmp	r3, #4
 8002204:	d003      	beq.n	800220e <HAL_RCC_GetSysClockFreq+0x3a>
 8002206:	e0db      	b.n	80023c0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002208:	4b73      	ldr	r3, [pc, #460]	; (80023d8 <HAL_RCC_GetSysClockFreq+0x204>)
 800220a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800220c:	e0db      	b.n	80023c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800220e:	4b73      	ldr	r3, [pc, #460]	; (80023dc <HAL_RCC_GetSysClockFreq+0x208>)
 8002210:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002212:	e0d8      	b.n	80023c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002214:	4b6f      	ldr	r3, [pc, #444]	; (80023d4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800221c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800221e:	4b6d      	ldr	r3, [pc, #436]	; (80023d4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002226:	2b00      	cmp	r3, #0
 8002228:	d063      	beq.n	80022f2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800222a:	4b6a      	ldr	r3, [pc, #424]	; (80023d4 <HAL_RCC_GetSysClockFreq+0x200>)
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	099b      	lsrs	r3, r3, #6
 8002230:	2200      	movs	r2, #0
 8002232:	63bb      	str	r3, [r7, #56]	; 0x38
 8002234:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002236:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002238:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800223c:	633b      	str	r3, [r7, #48]	; 0x30
 800223e:	2300      	movs	r3, #0
 8002240:	637b      	str	r3, [r7, #52]	; 0x34
 8002242:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002246:	4622      	mov	r2, r4
 8002248:	462b      	mov	r3, r5
 800224a:	f04f 0000 	mov.w	r0, #0
 800224e:	f04f 0100 	mov.w	r1, #0
 8002252:	0159      	lsls	r1, r3, #5
 8002254:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002258:	0150      	lsls	r0, r2, #5
 800225a:	4602      	mov	r2, r0
 800225c:	460b      	mov	r3, r1
 800225e:	4621      	mov	r1, r4
 8002260:	1a51      	subs	r1, r2, r1
 8002262:	6139      	str	r1, [r7, #16]
 8002264:	4629      	mov	r1, r5
 8002266:	eb63 0301 	sbc.w	r3, r3, r1
 800226a:	617b      	str	r3, [r7, #20]
 800226c:	f04f 0200 	mov.w	r2, #0
 8002270:	f04f 0300 	mov.w	r3, #0
 8002274:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002278:	4659      	mov	r1, fp
 800227a:	018b      	lsls	r3, r1, #6
 800227c:	4651      	mov	r1, sl
 800227e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002282:	4651      	mov	r1, sl
 8002284:	018a      	lsls	r2, r1, #6
 8002286:	4651      	mov	r1, sl
 8002288:	ebb2 0801 	subs.w	r8, r2, r1
 800228c:	4659      	mov	r1, fp
 800228e:	eb63 0901 	sbc.w	r9, r3, r1
 8002292:	f04f 0200 	mov.w	r2, #0
 8002296:	f04f 0300 	mov.w	r3, #0
 800229a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800229e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80022a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80022a6:	4690      	mov	r8, r2
 80022a8:	4699      	mov	r9, r3
 80022aa:	4623      	mov	r3, r4
 80022ac:	eb18 0303 	adds.w	r3, r8, r3
 80022b0:	60bb      	str	r3, [r7, #8]
 80022b2:	462b      	mov	r3, r5
 80022b4:	eb49 0303 	adc.w	r3, r9, r3
 80022b8:	60fb      	str	r3, [r7, #12]
 80022ba:	f04f 0200 	mov.w	r2, #0
 80022be:	f04f 0300 	mov.w	r3, #0
 80022c2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80022c6:	4629      	mov	r1, r5
 80022c8:	024b      	lsls	r3, r1, #9
 80022ca:	4621      	mov	r1, r4
 80022cc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80022d0:	4621      	mov	r1, r4
 80022d2:	024a      	lsls	r2, r1, #9
 80022d4:	4610      	mov	r0, r2
 80022d6:	4619      	mov	r1, r3
 80022d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022da:	2200      	movs	r2, #0
 80022dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80022de:	62fa      	str	r2, [r7, #44]	; 0x2c
 80022e0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80022e4:	f7fd ffe4 	bl	80002b0 <__aeabi_uldivmod>
 80022e8:	4602      	mov	r2, r0
 80022ea:	460b      	mov	r3, r1
 80022ec:	4613      	mov	r3, r2
 80022ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80022f0:	e058      	b.n	80023a4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022f2:	4b38      	ldr	r3, [pc, #224]	; (80023d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	099b      	lsrs	r3, r3, #6
 80022f8:	2200      	movs	r2, #0
 80022fa:	4618      	mov	r0, r3
 80022fc:	4611      	mov	r1, r2
 80022fe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002302:	623b      	str	r3, [r7, #32]
 8002304:	2300      	movs	r3, #0
 8002306:	627b      	str	r3, [r7, #36]	; 0x24
 8002308:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800230c:	4642      	mov	r2, r8
 800230e:	464b      	mov	r3, r9
 8002310:	f04f 0000 	mov.w	r0, #0
 8002314:	f04f 0100 	mov.w	r1, #0
 8002318:	0159      	lsls	r1, r3, #5
 800231a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800231e:	0150      	lsls	r0, r2, #5
 8002320:	4602      	mov	r2, r0
 8002322:	460b      	mov	r3, r1
 8002324:	4641      	mov	r1, r8
 8002326:	ebb2 0a01 	subs.w	sl, r2, r1
 800232a:	4649      	mov	r1, r9
 800232c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002330:	f04f 0200 	mov.w	r2, #0
 8002334:	f04f 0300 	mov.w	r3, #0
 8002338:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800233c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002340:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002344:	ebb2 040a 	subs.w	r4, r2, sl
 8002348:	eb63 050b 	sbc.w	r5, r3, fp
 800234c:	f04f 0200 	mov.w	r2, #0
 8002350:	f04f 0300 	mov.w	r3, #0
 8002354:	00eb      	lsls	r3, r5, #3
 8002356:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800235a:	00e2      	lsls	r2, r4, #3
 800235c:	4614      	mov	r4, r2
 800235e:	461d      	mov	r5, r3
 8002360:	4643      	mov	r3, r8
 8002362:	18e3      	adds	r3, r4, r3
 8002364:	603b      	str	r3, [r7, #0]
 8002366:	464b      	mov	r3, r9
 8002368:	eb45 0303 	adc.w	r3, r5, r3
 800236c:	607b      	str	r3, [r7, #4]
 800236e:	f04f 0200 	mov.w	r2, #0
 8002372:	f04f 0300 	mov.w	r3, #0
 8002376:	e9d7 4500 	ldrd	r4, r5, [r7]
 800237a:	4629      	mov	r1, r5
 800237c:	028b      	lsls	r3, r1, #10
 800237e:	4621      	mov	r1, r4
 8002380:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002384:	4621      	mov	r1, r4
 8002386:	028a      	lsls	r2, r1, #10
 8002388:	4610      	mov	r0, r2
 800238a:	4619      	mov	r1, r3
 800238c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800238e:	2200      	movs	r2, #0
 8002390:	61bb      	str	r3, [r7, #24]
 8002392:	61fa      	str	r2, [r7, #28]
 8002394:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002398:	f7fd ff8a 	bl	80002b0 <__aeabi_uldivmod>
 800239c:	4602      	mov	r2, r0
 800239e:	460b      	mov	r3, r1
 80023a0:	4613      	mov	r3, r2
 80023a2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80023a4:	4b0b      	ldr	r3, [pc, #44]	; (80023d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	0c1b      	lsrs	r3, r3, #16
 80023aa:	f003 0303 	and.w	r3, r3, #3
 80023ae:	3301      	adds	r3, #1
 80023b0:	005b      	lsls	r3, r3, #1
 80023b2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80023b4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80023b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80023bc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80023be:	e002      	b.n	80023c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80023c0:	4b05      	ldr	r3, [pc, #20]	; (80023d8 <HAL_RCC_GetSysClockFreq+0x204>)
 80023c2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80023c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	3750      	adds	r7, #80	; 0x50
 80023cc:	46bd      	mov	sp, r7
 80023ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80023d2:	bf00      	nop
 80023d4:	40023800 	.word	0x40023800
 80023d8:	00f42400 	.word	0x00f42400
 80023dc:	007a1200 	.word	0x007a1200

080023e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023e0:	b480      	push	{r7}
 80023e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023e4:	4b03      	ldr	r3, [pc, #12]	; (80023f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80023e6:	681b      	ldr	r3, [r3, #0]
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr
 80023f2:	bf00      	nop
 80023f4:	200000bc 	.word	0x200000bc

080023f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80023fc:	f7ff fff0 	bl	80023e0 <HAL_RCC_GetHCLKFreq>
 8002400:	4602      	mov	r2, r0
 8002402:	4b05      	ldr	r3, [pc, #20]	; (8002418 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	0a9b      	lsrs	r3, r3, #10
 8002408:	f003 0307 	and.w	r3, r3, #7
 800240c:	4903      	ldr	r1, [pc, #12]	; (800241c <HAL_RCC_GetPCLK1Freq+0x24>)
 800240e:	5ccb      	ldrb	r3, [r1, r3]
 8002410:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002414:	4618      	mov	r0, r3
 8002416:	bd80      	pop	{r7, pc}
 8002418:	40023800 	.word	0x40023800
 800241c:	08007d64 	.word	0x08007d64

08002420 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002424:	f7ff ffdc 	bl	80023e0 <HAL_RCC_GetHCLKFreq>
 8002428:	4602      	mov	r2, r0
 800242a:	4b05      	ldr	r3, [pc, #20]	; (8002440 <HAL_RCC_GetPCLK2Freq+0x20>)
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	0b5b      	lsrs	r3, r3, #13
 8002430:	f003 0307 	and.w	r3, r3, #7
 8002434:	4903      	ldr	r1, [pc, #12]	; (8002444 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002436:	5ccb      	ldrb	r3, [r1, r3]
 8002438:	fa22 f303 	lsr.w	r3, r2, r3
}
 800243c:	4618      	mov	r0, r3
 800243e:	bd80      	pop	{r7, pc}
 8002440:	40023800 	.word	0x40023800
 8002444:	08007d64 	.word	0x08007d64

08002448 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002448:	b480      	push	{r7}
 800244a:	b083      	sub	sp, #12
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
 8002450:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	220f      	movs	r2, #15
 8002456:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002458:	4b12      	ldr	r3, [pc, #72]	; (80024a4 <HAL_RCC_GetClockConfig+0x5c>)
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	f003 0203 	and.w	r2, r3, #3
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002464:	4b0f      	ldr	r3, [pc, #60]	; (80024a4 <HAL_RCC_GetClockConfig+0x5c>)
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002470:	4b0c      	ldr	r3, [pc, #48]	; (80024a4 <HAL_RCC_GetClockConfig+0x5c>)
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800247c:	4b09      	ldr	r3, [pc, #36]	; (80024a4 <HAL_RCC_GetClockConfig+0x5c>)
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	08db      	lsrs	r3, r3, #3
 8002482:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800248a:	4b07      	ldr	r3, [pc, #28]	; (80024a8 <HAL_RCC_GetClockConfig+0x60>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 0207 	and.w	r2, r3, #7
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	601a      	str	r2, [r3, #0]
}
 8002496:	bf00      	nop
 8002498:	370c      	adds	r7, #12
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr
 80024a2:	bf00      	nop
 80024a4:	40023800 	.word	0x40023800
 80024a8:	40023c00 	.word	0x40023c00

080024ac <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b086      	sub	sp, #24
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d101      	bne.n	80024be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e273      	b.n	80029a6 <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 0301 	and.w	r3, r3, #1
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d075      	beq.n	80025b6 <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80024ca:	4b88      	ldr	r3, [pc, #544]	; (80026ec <HAL_RCC_OscConfig+0x240>)
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	f003 030c 	and.w	r3, r3, #12
 80024d2:	2b04      	cmp	r3, #4
 80024d4:	d00c      	beq.n	80024f0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024d6:	4b85      	ldr	r3, [pc, #532]	; (80026ec <HAL_RCC_OscConfig+0x240>)
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80024de:	2b08      	cmp	r3, #8
 80024e0:	d112      	bne.n	8002508 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024e2:	4b82      	ldr	r3, [pc, #520]	; (80026ec <HAL_RCC_OscConfig+0x240>)
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024ee:	d10b      	bne.n	8002508 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024f0:	4b7e      	ldr	r3, [pc, #504]	; (80026ec <HAL_RCC_OscConfig+0x240>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d05b      	beq.n	80025b4 <HAL_RCC_OscConfig+0x108>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d157      	bne.n	80025b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	e24e      	b.n	80029a6 <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002510:	d106      	bne.n	8002520 <HAL_RCC_OscConfig+0x74>
 8002512:	4b76      	ldr	r3, [pc, #472]	; (80026ec <HAL_RCC_OscConfig+0x240>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a75      	ldr	r2, [pc, #468]	; (80026ec <HAL_RCC_OscConfig+0x240>)
 8002518:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800251c:	6013      	str	r3, [r2, #0]
 800251e:	e01d      	b.n	800255c <HAL_RCC_OscConfig+0xb0>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002528:	d10c      	bne.n	8002544 <HAL_RCC_OscConfig+0x98>
 800252a:	4b70      	ldr	r3, [pc, #448]	; (80026ec <HAL_RCC_OscConfig+0x240>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a6f      	ldr	r2, [pc, #444]	; (80026ec <HAL_RCC_OscConfig+0x240>)
 8002530:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002534:	6013      	str	r3, [r2, #0]
 8002536:	4b6d      	ldr	r3, [pc, #436]	; (80026ec <HAL_RCC_OscConfig+0x240>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a6c      	ldr	r2, [pc, #432]	; (80026ec <HAL_RCC_OscConfig+0x240>)
 800253c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002540:	6013      	str	r3, [r2, #0]
 8002542:	e00b      	b.n	800255c <HAL_RCC_OscConfig+0xb0>
 8002544:	4b69      	ldr	r3, [pc, #420]	; (80026ec <HAL_RCC_OscConfig+0x240>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a68      	ldr	r2, [pc, #416]	; (80026ec <HAL_RCC_OscConfig+0x240>)
 800254a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800254e:	6013      	str	r3, [r2, #0]
 8002550:	4b66      	ldr	r3, [pc, #408]	; (80026ec <HAL_RCC_OscConfig+0x240>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a65      	ldr	r2, [pc, #404]	; (80026ec <HAL_RCC_OscConfig+0x240>)
 8002556:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800255a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d013      	beq.n	800258c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002564:	f7fe ff0e 	bl	8001384 <HAL_GetTick>
 8002568:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800256a:	e008      	b.n	800257e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800256c:	f7fe ff0a 	bl	8001384 <HAL_GetTick>
 8002570:	4602      	mov	r2, r0
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	1ad3      	subs	r3, r2, r3
 8002576:	2b64      	cmp	r3, #100	; 0x64
 8002578:	d901      	bls.n	800257e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800257a:	2303      	movs	r3, #3
 800257c:	e213      	b.n	80029a6 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800257e:	4b5b      	ldr	r3, [pc, #364]	; (80026ec <HAL_RCC_OscConfig+0x240>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002586:	2b00      	cmp	r3, #0
 8002588:	d0f0      	beq.n	800256c <HAL_RCC_OscConfig+0xc0>
 800258a:	e014      	b.n	80025b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800258c:	f7fe fefa 	bl	8001384 <HAL_GetTick>
 8002590:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002592:	e008      	b.n	80025a6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002594:	f7fe fef6 	bl	8001384 <HAL_GetTick>
 8002598:	4602      	mov	r2, r0
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	2b64      	cmp	r3, #100	; 0x64
 80025a0:	d901      	bls.n	80025a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80025a2:	2303      	movs	r3, #3
 80025a4:	e1ff      	b.n	80029a6 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025a6:	4b51      	ldr	r3, [pc, #324]	; (80026ec <HAL_RCC_OscConfig+0x240>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d1f0      	bne.n	8002594 <HAL_RCC_OscConfig+0xe8>
 80025b2:	e000      	b.n	80025b6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 0302 	and.w	r3, r3, #2
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d063      	beq.n	800268a <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80025c2:	4b4a      	ldr	r3, [pc, #296]	; (80026ec <HAL_RCC_OscConfig+0x240>)
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	f003 030c 	and.w	r3, r3, #12
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d00b      	beq.n	80025e6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025ce:	4b47      	ldr	r3, [pc, #284]	; (80026ec <HAL_RCC_OscConfig+0x240>)
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80025d6:	2b08      	cmp	r3, #8
 80025d8:	d11c      	bne.n	8002614 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025da:	4b44      	ldr	r3, [pc, #272]	; (80026ec <HAL_RCC_OscConfig+0x240>)
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d116      	bne.n	8002614 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025e6:	4b41      	ldr	r3, [pc, #260]	; (80026ec <HAL_RCC_OscConfig+0x240>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 0302 	and.w	r3, r3, #2
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d005      	beq.n	80025fe <HAL_RCC_OscConfig+0x152>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	68db      	ldr	r3, [r3, #12]
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d001      	beq.n	80025fe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e1d3      	b.n	80029a6 <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025fe:	4b3b      	ldr	r3, [pc, #236]	; (80026ec <HAL_RCC_OscConfig+0x240>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	691b      	ldr	r3, [r3, #16]
 800260a:	00db      	lsls	r3, r3, #3
 800260c:	4937      	ldr	r1, [pc, #220]	; (80026ec <HAL_RCC_OscConfig+0x240>)
 800260e:	4313      	orrs	r3, r2
 8002610:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002612:	e03a      	b.n	800268a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	68db      	ldr	r3, [r3, #12]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d020      	beq.n	800265e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800261c:	4b34      	ldr	r3, [pc, #208]	; (80026f0 <HAL_RCC_OscConfig+0x244>)
 800261e:	2201      	movs	r2, #1
 8002620:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002622:	f7fe feaf 	bl	8001384 <HAL_GetTick>
 8002626:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002628:	e008      	b.n	800263c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800262a:	f7fe feab 	bl	8001384 <HAL_GetTick>
 800262e:	4602      	mov	r2, r0
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	1ad3      	subs	r3, r2, r3
 8002634:	2b02      	cmp	r3, #2
 8002636:	d901      	bls.n	800263c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002638:	2303      	movs	r3, #3
 800263a:	e1b4      	b.n	80029a6 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800263c:	4b2b      	ldr	r3, [pc, #172]	; (80026ec <HAL_RCC_OscConfig+0x240>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 0302 	and.w	r3, r3, #2
 8002644:	2b00      	cmp	r3, #0
 8002646:	d0f0      	beq.n	800262a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002648:	4b28      	ldr	r3, [pc, #160]	; (80026ec <HAL_RCC_OscConfig+0x240>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	691b      	ldr	r3, [r3, #16]
 8002654:	00db      	lsls	r3, r3, #3
 8002656:	4925      	ldr	r1, [pc, #148]	; (80026ec <HAL_RCC_OscConfig+0x240>)
 8002658:	4313      	orrs	r3, r2
 800265a:	600b      	str	r3, [r1, #0]
 800265c:	e015      	b.n	800268a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800265e:	4b24      	ldr	r3, [pc, #144]	; (80026f0 <HAL_RCC_OscConfig+0x244>)
 8002660:	2200      	movs	r2, #0
 8002662:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002664:	f7fe fe8e 	bl	8001384 <HAL_GetTick>
 8002668:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800266a:	e008      	b.n	800267e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800266c:	f7fe fe8a 	bl	8001384 <HAL_GetTick>
 8002670:	4602      	mov	r2, r0
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	1ad3      	subs	r3, r2, r3
 8002676:	2b02      	cmp	r3, #2
 8002678:	d901      	bls.n	800267e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800267a:	2303      	movs	r3, #3
 800267c:	e193      	b.n	80029a6 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800267e:	4b1b      	ldr	r3, [pc, #108]	; (80026ec <HAL_RCC_OscConfig+0x240>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 0302 	and.w	r3, r3, #2
 8002686:	2b00      	cmp	r3, #0
 8002688:	d1f0      	bne.n	800266c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 0308 	and.w	r3, r3, #8
 8002692:	2b00      	cmp	r3, #0
 8002694:	d036      	beq.n	8002704 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	695b      	ldr	r3, [r3, #20]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d016      	beq.n	80026cc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800269e:	4b15      	ldr	r3, [pc, #84]	; (80026f4 <HAL_RCC_OscConfig+0x248>)
 80026a0:	2201      	movs	r2, #1
 80026a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026a4:	f7fe fe6e 	bl	8001384 <HAL_GetTick>
 80026a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026aa:	e008      	b.n	80026be <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026ac:	f7fe fe6a 	bl	8001384 <HAL_GetTick>
 80026b0:	4602      	mov	r2, r0
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	2b02      	cmp	r3, #2
 80026b8:	d901      	bls.n	80026be <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80026ba:	2303      	movs	r3, #3
 80026bc:	e173      	b.n	80029a6 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026be:	4b0b      	ldr	r3, [pc, #44]	; (80026ec <HAL_RCC_OscConfig+0x240>)
 80026c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026c2:	f003 0302 	and.w	r3, r3, #2
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d0f0      	beq.n	80026ac <HAL_RCC_OscConfig+0x200>
 80026ca:	e01b      	b.n	8002704 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026cc:	4b09      	ldr	r3, [pc, #36]	; (80026f4 <HAL_RCC_OscConfig+0x248>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026d2:	f7fe fe57 	bl	8001384 <HAL_GetTick>
 80026d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026d8:	e00e      	b.n	80026f8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026da:	f7fe fe53 	bl	8001384 <HAL_GetTick>
 80026de:	4602      	mov	r2, r0
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	1ad3      	subs	r3, r2, r3
 80026e4:	2b02      	cmp	r3, #2
 80026e6:	d907      	bls.n	80026f8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80026e8:	2303      	movs	r3, #3
 80026ea:	e15c      	b.n	80029a6 <HAL_RCC_OscConfig+0x4fa>
 80026ec:	40023800 	.word	0x40023800
 80026f0:	42470000 	.word	0x42470000
 80026f4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026f8:	4b8a      	ldr	r3, [pc, #552]	; (8002924 <HAL_RCC_OscConfig+0x478>)
 80026fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026fc:	f003 0302 	and.w	r3, r3, #2
 8002700:	2b00      	cmp	r3, #0
 8002702:	d1ea      	bne.n	80026da <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 0304 	and.w	r3, r3, #4
 800270c:	2b00      	cmp	r3, #0
 800270e:	f000 8097 	beq.w	8002840 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002712:	2300      	movs	r3, #0
 8002714:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002716:	4b83      	ldr	r3, [pc, #524]	; (8002924 <HAL_RCC_OscConfig+0x478>)
 8002718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800271e:	2b00      	cmp	r3, #0
 8002720:	d10f      	bne.n	8002742 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002722:	2300      	movs	r3, #0
 8002724:	60bb      	str	r3, [r7, #8]
 8002726:	4b7f      	ldr	r3, [pc, #508]	; (8002924 <HAL_RCC_OscConfig+0x478>)
 8002728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272a:	4a7e      	ldr	r2, [pc, #504]	; (8002924 <HAL_RCC_OscConfig+0x478>)
 800272c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002730:	6413      	str	r3, [r2, #64]	; 0x40
 8002732:	4b7c      	ldr	r3, [pc, #496]	; (8002924 <HAL_RCC_OscConfig+0x478>)
 8002734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002736:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800273a:	60bb      	str	r3, [r7, #8]
 800273c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800273e:	2301      	movs	r3, #1
 8002740:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002742:	4b79      	ldr	r3, [pc, #484]	; (8002928 <HAL_RCC_OscConfig+0x47c>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800274a:	2b00      	cmp	r3, #0
 800274c:	d118      	bne.n	8002780 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800274e:	4b76      	ldr	r3, [pc, #472]	; (8002928 <HAL_RCC_OscConfig+0x47c>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a75      	ldr	r2, [pc, #468]	; (8002928 <HAL_RCC_OscConfig+0x47c>)
 8002754:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002758:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800275a:	f7fe fe13 	bl	8001384 <HAL_GetTick>
 800275e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002760:	e008      	b.n	8002774 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002762:	f7fe fe0f 	bl	8001384 <HAL_GetTick>
 8002766:	4602      	mov	r2, r0
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	1ad3      	subs	r3, r2, r3
 800276c:	2b02      	cmp	r3, #2
 800276e:	d901      	bls.n	8002774 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002770:	2303      	movs	r3, #3
 8002772:	e118      	b.n	80029a6 <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002774:	4b6c      	ldr	r3, [pc, #432]	; (8002928 <HAL_RCC_OscConfig+0x47c>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800277c:	2b00      	cmp	r3, #0
 800277e:	d0f0      	beq.n	8002762 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	2b01      	cmp	r3, #1
 8002786:	d106      	bne.n	8002796 <HAL_RCC_OscConfig+0x2ea>
 8002788:	4b66      	ldr	r3, [pc, #408]	; (8002924 <HAL_RCC_OscConfig+0x478>)
 800278a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800278c:	4a65      	ldr	r2, [pc, #404]	; (8002924 <HAL_RCC_OscConfig+0x478>)
 800278e:	f043 0301 	orr.w	r3, r3, #1
 8002792:	6713      	str	r3, [r2, #112]	; 0x70
 8002794:	e01c      	b.n	80027d0 <HAL_RCC_OscConfig+0x324>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	2b05      	cmp	r3, #5
 800279c:	d10c      	bne.n	80027b8 <HAL_RCC_OscConfig+0x30c>
 800279e:	4b61      	ldr	r3, [pc, #388]	; (8002924 <HAL_RCC_OscConfig+0x478>)
 80027a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027a2:	4a60      	ldr	r2, [pc, #384]	; (8002924 <HAL_RCC_OscConfig+0x478>)
 80027a4:	f043 0304 	orr.w	r3, r3, #4
 80027a8:	6713      	str	r3, [r2, #112]	; 0x70
 80027aa:	4b5e      	ldr	r3, [pc, #376]	; (8002924 <HAL_RCC_OscConfig+0x478>)
 80027ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ae:	4a5d      	ldr	r2, [pc, #372]	; (8002924 <HAL_RCC_OscConfig+0x478>)
 80027b0:	f043 0301 	orr.w	r3, r3, #1
 80027b4:	6713      	str	r3, [r2, #112]	; 0x70
 80027b6:	e00b      	b.n	80027d0 <HAL_RCC_OscConfig+0x324>
 80027b8:	4b5a      	ldr	r3, [pc, #360]	; (8002924 <HAL_RCC_OscConfig+0x478>)
 80027ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027bc:	4a59      	ldr	r2, [pc, #356]	; (8002924 <HAL_RCC_OscConfig+0x478>)
 80027be:	f023 0301 	bic.w	r3, r3, #1
 80027c2:	6713      	str	r3, [r2, #112]	; 0x70
 80027c4:	4b57      	ldr	r3, [pc, #348]	; (8002924 <HAL_RCC_OscConfig+0x478>)
 80027c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027c8:	4a56      	ldr	r2, [pc, #344]	; (8002924 <HAL_RCC_OscConfig+0x478>)
 80027ca:	f023 0304 	bic.w	r3, r3, #4
 80027ce:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d015      	beq.n	8002804 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027d8:	f7fe fdd4 	bl	8001384 <HAL_GetTick>
 80027dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027de:	e00a      	b.n	80027f6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027e0:	f7fe fdd0 	bl	8001384 <HAL_GetTick>
 80027e4:	4602      	mov	r2, r0
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d901      	bls.n	80027f6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80027f2:	2303      	movs	r3, #3
 80027f4:	e0d7      	b.n	80029a6 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027f6:	4b4b      	ldr	r3, [pc, #300]	; (8002924 <HAL_RCC_OscConfig+0x478>)
 80027f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027fa:	f003 0302 	and.w	r3, r3, #2
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d0ee      	beq.n	80027e0 <HAL_RCC_OscConfig+0x334>
 8002802:	e014      	b.n	800282e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002804:	f7fe fdbe 	bl	8001384 <HAL_GetTick>
 8002808:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800280a:	e00a      	b.n	8002822 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800280c:	f7fe fdba 	bl	8001384 <HAL_GetTick>
 8002810:	4602      	mov	r2, r0
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	f241 3288 	movw	r2, #5000	; 0x1388
 800281a:	4293      	cmp	r3, r2
 800281c:	d901      	bls.n	8002822 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800281e:	2303      	movs	r3, #3
 8002820:	e0c1      	b.n	80029a6 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002822:	4b40      	ldr	r3, [pc, #256]	; (8002924 <HAL_RCC_OscConfig+0x478>)
 8002824:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002826:	f003 0302 	and.w	r3, r3, #2
 800282a:	2b00      	cmp	r3, #0
 800282c:	d1ee      	bne.n	800280c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800282e:	7dfb      	ldrb	r3, [r7, #23]
 8002830:	2b01      	cmp	r3, #1
 8002832:	d105      	bne.n	8002840 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002834:	4b3b      	ldr	r3, [pc, #236]	; (8002924 <HAL_RCC_OscConfig+0x478>)
 8002836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002838:	4a3a      	ldr	r2, [pc, #232]	; (8002924 <HAL_RCC_OscConfig+0x478>)
 800283a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800283e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	699b      	ldr	r3, [r3, #24]
 8002844:	2b00      	cmp	r3, #0
 8002846:	f000 80ad 	beq.w	80029a4 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800284a:	4b36      	ldr	r3, [pc, #216]	; (8002924 <HAL_RCC_OscConfig+0x478>)
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	f003 030c 	and.w	r3, r3, #12
 8002852:	2b08      	cmp	r3, #8
 8002854:	d060      	beq.n	8002918 <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	699b      	ldr	r3, [r3, #24]
 800285a:	2b02      	cmp	r3, #2
 800285c:	d145      	bne.n	80028ea <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800285e:	4b33      	ldr	r3, [pc, #204]	; (800292c <HAL_RCC_OscConfig+0x480>)
 8002860:	2200      	movs	r2, #0
 8002862:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002864:	f7fe fd8e 	bl	8001384 <HAL_GetTick>
 8002868:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800286a:	e008      	b.n	800287e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800286c:	f7fe fd8a 	bl	8001384 <HAL_GetTick>
 8002870:	4602      	mov	r2, r0
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	1ad3      	subs	r3, r2, r3
 8002876:	2b02      	cmp	r3, #2
 8002878:	d901      	bls.n	800287e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800287a:	2303      	movs	r3, #3
 800287c:	e093      	b.n	80029a6 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800287e:	4b29      	ldr	r3, [pc, #164]	; (8002924 <HAL_RCC_OscConfig+0x478>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002886:	2b00      	cmp	r3, #0
 8002888:	d1f0      	bne.n	800286c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	69da      	ldr	r2, [r3, #28]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6a1b      	ldr	r3, [r3, #32]
 8002892:	431a      	orrs	r2, r3
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002898:	019b      	lsls	r3, r3, #6
 800289a:	431a      	orrs	r2, r3
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028a0:	085b      	lsrs	r3, r3, #1
 80028a2:	3b01      	subs	r3, #1
 80028a4:	041b      	lsls	r3, r3, #16
 80028a6:	431a      	orrs	r2, r3
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ac:	061b      	lsls	r3, r3, #24
 80028ae:	431a      	orrs	r2, r3
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b4:	071b      	lsls	r3, r3, #28
 80028b6:	491b      	ldr	r1, [pc, #108]	; (8002924 <HAL_RCC_OscConfig+0x478>)
 80028b8:	4313      	orrs	r3, r2
 80028ba:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028bc:	4b1b      	ldr	r3, [pc, #108]	; (800292c <HAL_RCC_OscConfig+0x480>)
 80028be:	2201      	movs	r2, #1
 80028c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028c2:	f7fe fd5f 	bl	8001384 <HAL_GetTick>
 80028c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028c8:	e008      	b.n	80028dc <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028ca:	f7fe fd5b 	bl	8001384 <HAL_GetTick>
 80028ce:	4602      	mov	r2, r0
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	1ad3      	subs	r3, r2, r3
 80028d4:	2b02      	cmp	r3, #2
 80028d6:	d901      	bls.n	80028dc <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 80028d8:	2303      	movs	r3, #3
 80028da:	e064      	b.n	80029a6 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028dc:	4b11      	ldr	r3, [pc, #68]	; (8002924 <HAL_RCC_OscConfig+0x478>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d0f0      	beq.n	80028ca <HAL_RCC_OscConfig+0x41e>
 80028e8:	e05c      	b.n	80029a4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028ea:	4b10      	ldr	r3, [pc, #64]	; (800292c <HAL_RCC_OscConfig+0x480>)
 80028ec:	2200      	movs	r2, #0
 80028ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028f0:	f7fe fd48 	bl	8001384 <HAL_GetTick>
 80028f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028f6:	e008      	b.n	800290a <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028f8:	f7fe fd44 	bl	8001384 <HAL_GetTick>
 80028fc:	4602      	mov	r2, r0
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	2b02      	cmp	r3, #2
 8002904:	d901      	bls.n	800290a <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8002906:	2303      	movs	r3, #3
 8002908:	e04d      	b.n	80029a6 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800290a:	4b06      	ldr	r3, [pc, #24]	; (8002924 <HAL_RCC_OscConfig+0x478>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002912:	2b00      	cmp	r3, #0
 8002914:	d1f0      	bne.n	80028f8 <HAL_RCC_OscConfig+0x44c>
 8002916:	e045      	b.n	80029a4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	699b      	ldr	r3, [r3, #24]
 800291c:	2b01      	cmp	r3, #1
 800291e:	d107      	bne.n	8002930 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	e040      	b.n	80029a6 <HAL_RCC_OscConfig+0x4fa>
 8002924:	40023800 	.word	0x40023800
 8002928:	40007000 	.word	0x40007000
 800292c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002930:	4b1f      	ldr	r3, [pc, #124]	; (80029b0 <HAL_RCC_OscConfig+0x504>)
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	699b      	ldr	r3, [r3, #24]
 800293a:	2b01      	cmp	r3, #1
 800293c:	d030      	beq.n	80029a0 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002948:	429a      	cmp	r2, r3
 800294a:	d129      	bne.n	80029a0 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002956:	429a      	cmp	r2, r3
 8002958:	d122      	bne.n	80029a0 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800295a:	68fa      	ldr	r2, [r7, #12]
 800295c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002960:	4013      	ands	r3, r2
 8002962:	687a      	ldr	r2, [r7, #4]
 8002964:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002966:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002968:	4293      	cmp	r3, r2
 800296a:	d119      	bne.n	80029a0 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002976:	085b      	lsrs	r3, r3, #1
 8002978:	3b01      	subs	r3, #1
 800297a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800297c:	429a      	cmp	r2, r3
 800297e:	d10f      	bne.n	80029a0 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800298a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800298c:	429a      	cmp	r2, r3
 800298e:	d107      	bne.n	80029a0 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800299a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800299c:	429a      	cmp	r2, r3
 800299e:	d001      	beq.n	80029a4 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	e000      	b.n	80029a6 <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 80029a4:	2300      	movs	r3, #0
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	3718      	adds	r7, #24
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	bf00      	nop
 80029b0:	40023800 	.word	0x40023800

080029b4 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b082      	sub	sp, #8
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d101      	bne.n	80029c6 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e01c      	b.n	8002a00 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	795b      	ldrb	r3, [r3, #5]
 80029ca:	b2db      	uxtb	r3, r3
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d105      	bne.n	80029dc <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2200      	movs	r2, #0
 80029d4:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	f7fe fa32 	bl	8000e40 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2202      	movs	r2, #2
 80029e0:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f042 0204 	orr.w	r2, r2, #4
 80029f0:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2201      	movs	r2, #1
 80029f6:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2200      	movs	r2, #0
 80029fc:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 80029fe:	2300      	movs	r3, #0
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	3708      	adds	r7, #8
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}

08002a08 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b084      	sub	sp, #16
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
 8002a10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002a12:	2300      	movs	r3, #0
 8002a14:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	791b      	ldrb	r3, [r3, #4]
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d101      	bne.n	8002a22 <HAL_RNG_GenerateRandomNumber+0x1a>
 8002a1e:	2302      	movs	r3, #2
 8002a20:	e044      	b.n	8002aac <HAL_RNG_GenerateRandomNumber+0xa4>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2201      	movs	r2, #1
 8002a26:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	795b      	ldrb	r3, [r3, #5]
 8002a2c:	b2db      	uxtb	r3, r3
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d133      	bne.n	8002a9a <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2202      	movs	r2, #2
 8002a36:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002a38:	f7fe fca4 	bl	8001384 <HAL_GetTick>
 8002a3c:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8002a3e:	e018      	b.n	8002a72 <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8002a40:	f7fe fca0 	bl	8001384 <HAL_GetTick>
 8002a44:	4602      	mov	r2, r0
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	1ad3      	subs	r3, r2, r3
 8002a4a:	2b02      	cmp	r3, #2
 8002a4c:	d911      	bls.n	8002a72 <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	f003 0301 	and.w	r3, r3, #1
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	d00a      	beq.n	8002a72 <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2201      	movs	r2, #1
 8002a60:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2202      	movs	r2, #2
 8002a66:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e01c      	b.n	8002aac <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	f003 0301 	and.w	r3, r3, #1
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d1df      	bne.n	8002a40 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	689a      	ldr	r2, [r3, #8]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	68da      	ldr	r2, [r3, #12]
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2201      	movs	r2, #1
 8002a96:	715a      	strb	r2, [r3, #5]
 8002a98:	e004      	b.n	8002aa4 <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2204      	movs	r2, #4
 8002a9e:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	711a      	strb	r2, [r3, #4]

  return status;
 8002aaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	3710      	adds	r7, #16
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}

08002ab4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b082      	sub	sp, #8
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d101      	bne.n	8002ac6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e041      	b.n	8002b4a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d106      	bne.n	8002ae0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f7fe fb48 	bl	8001170 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2202      	movs	r2, #2
 8002ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	3304      	adds	r3, #4
 8002af0:	4619      	mov	r1, r3
 8002af2:	4610      	mov	r0, r2
 8002af4:	f000 f9ac 	bl	8002e50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2201      	movs	r2, #1
 8002afc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2201      	movs	r2, #1
 8002b04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2201      	movs	r2, #1
 8002b14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2201      	movs	r2, #1
 8002b24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2201      	movs	r2, #1
 8002b34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2201      	movs	r2, #1
 8002b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b48:	2300      	movs	r3, #0
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3708      	adds	r7, #8
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
	...

08002b54 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b085      	sub	sp, #20
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	2b01      	cmp	r3, #1
 8002b66:	d001      	beq.n	8002b6c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	e035      	b.n	8002bd8 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2202      	movs	r2, #2
 8002b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	68da      	ldr	r2, [r3, #12]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f042 0201 	orr.w	r2, r2, #1
 8002b82:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a16      	ldr	r2, [pc, #88]	; (8002be4 <HAL_TIM_Base_Start_IT+0x90>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d009      	beq.n	8002ba2 <HAL_TIM_Base_Start_IT+0x4e>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a15      	ldr	r2, [pc, #84]	; (8002be8 <HAL_TIM_Base_Start_IT+0x94>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d004      	beq.n	8002ba2 <HAL_TIM_Base_Start_IT+0x4e>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a13      	ldr	r2, [pc, #76]	; (8002bec <HAL_TIM_Base_Start_IT+0x98>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d111      	bne.n	8002bc6 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	f003 0307 	and.w	r3, r3, #7
 8002bac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	2b06      	cmp	r3, #6
 8002bb2:	d010      	beq.n	8002bd6 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	681a      	ldr	r2, [r3, #0]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f042 0201 	orr.w	r2, r2, #1
 8002bc2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bc4:	e007      	b.n	8002bd6 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f042 0201 	orr.w	r2, r2, #1
 8002bd4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002bd6:	2300      	movs	r3, #0
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	3714      	adds	r7, #20
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be2:	4770      	bx	lr
 8002be4:	40010000 	.word	0x40010000
 8002be8:	40000c00 	.word	0x40000c00
 8002bec:	40014000 	.word	0x40014000

08002bf0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b082      	sub	sp, #8
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	691b      	ldr	r3, [r3, #16]
 8002bfe:	f003 0302 	and.w	r3, r3, #2
 8002c02:	2b02      	cmp	r3, #2
 8002c04:	d122      	bne.n	8002c4c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	68db      	ldr	r3, [r3, #12]
 8002c0c:	f003 0302 	and.w	r3, r3, #2
 8002c10:	2b02      	cmp	r3, #2
 8002c12:	d11b      	bne.n	8002c4c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f06f 0202 	mvn.w	r2, #2
 8002c1c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2201      	movs	r2, #1
 8002c22:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	699b      	ldr	r3, [r3, #24]
 8002c2a:	f003 0303 	and.w	r3, r3, #3
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d003      	beq.n	8002c3a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	f000 f8ee 	bl	8002e14 <HAL_TIM_IC_CaptureCallback>
 8002c38:	e005      	b.n	8002c46 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	f000 f8e0 	bl	8002e00 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c40:	6878      	ldr	r0, [r7, #4]
 8002c42:	f000 f8f1 	bl	8002e28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	691b      	ldr	r3, [r3, #16]
 8002c52:	f003 0304 	and.w	r3, r3, #4
 8002c56:	2b04      	cmp	r3, #4
 8002c58:	d122      	bne.n	8002ca0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	f003 0304 	and.w	r3, r3, #4
 8002c64:	2b04      	cmp	r3, #4
 8002c66:	d11b      	bne.n	8002ca0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f06f 0204 	mvn.w	r2, #4
 8002c70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2202      	movs	r2, #2
 8002c76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	699b      	ldr	r3, [r3, #24]
 8002c7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d003      	beq.n	8002c8e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f000 f8c4 	bl	8002e14 <HAL_TIM_IC_CaptureCallback>
 8002c8c:	e005      	b.n	8002c9a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f000 f8b6 	bl	8002e00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c94:	6878      	ldr	r0, [r7, #4]
 8002c96:	f000 f8c7 	bl	8002e28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	691b      	ldr	r3, [r3, #16]
 8002ca6:	f003 0308 	and.w	r3, r3, #8
 8002caa:	2b08      	cmp	r3, #8
 8002cac:	d122      	bne.n	8002cf4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	68db      	ldr	r3, [r3, #12]
 8002cb4:	f003 0308 	and.w	r3, r3, #8
 8002cb8:	2b08      	cmp	r3, #8
 8002cba:	d11b      	bne.n	8002cf4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f06f 0208 	mvn.w	r2, #8
 8002cc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2204      	movs	r2, #4
 8002cca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	69db      	ldr	r3, [r3, #28]
 8002cd2:	f003 0303 	and.w	r3, r3, #3
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d003      	beq.n	8002ce2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cda:	6878      	ldr	r0, [r7, #4]
 8002cdc:	f000 f89a 	bl	8002e14 <HAL_TIM_IC_CaptureCallback>
 8002ce0:	e005      	b.n	8002cee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	f000 f88c 	bl	8002e00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ce8:	6878      	ldr	r0, [r7, #4]
 8002cea:	f000 f89d 	bl	8002e28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	691b      	ldr	r3, [r3, #16]
 8002cfa:	f003 0310 	and.w	r3, r3, #16
 8002cfe:	2b10      	cmp	r3, #16
 8002d00:	d122      	bne.n	8002d48 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	68db      	ldr	r3, [r3, #12]
 8002d08:	f003 0310 	and.w	r3, r3, #16
 8002d0c:	2b10      	cmp	r3, #16
 8002d0e:	d11b      	bne.n	8002d48 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f06f 0210 	mvn.w	r2, #16
 8002d18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2208      	movs	r2, #8
 8002d1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	69db      	ldr	r3, [r3, #28]
 8002d26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d003      	beq.n	8002d36 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	f000 f870 	bl	8002e14 <HAL_TIM_IC_CaptureCallback>
 8002d34:	e005      	b.n	8002d42 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	f000 f862 	bl	8002e00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d3c:	6878      	ldr	r0, [r7, #4]
 8002d3e:	f000 f873 	bl	8002e28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2200      	movs	r2, #0
 8002d46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	691b      	ldr	r3, [r3, #16]
 8002d4e:	f003 0301 	and.w	r3, r3, #1
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d10e      	bne.n	8002d74 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	68db      	ldr	r3, [r3, #12]
 8002d5c:	f003 0301 	and.w	r3, r3, #1
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	d107      	bne.n	8002d74 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f06f 0201 	mvn.w	r2, #1
 8002d6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	f7fd fdc2 	bl	80008f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	691b      	ldr	r3, [r3, #16]
 8002d7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d7e:	2b80      	cmp	r3, #128	; 0x80
 8002d80:	d10e      	bne.n	8002da0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	68db      	ldr	r3, [r3, #12]
 8002d88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d8c:	2b80      	cmp	r3, #128	; 0x80
 8002d8e:	d107      	bne.n	8002da0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002d98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	f000 f8c0 	bl	8002f20 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	691b      	ldr	r3, [r3, #16]
 8002da6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002daa:	2b40      	cmp	r3, #64	; 0x40
 8002dac:	d10e      	bne.n	8002dcc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	68db      	ldr	r3, [r3, #12]
 8002db4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002db8:	2b40      	cmp	r3, #64	; 0x40
 8002dba:	d107      	bne.n	8002dcc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002dc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002dc6:	6878      	ldr	r0, [r7, #4]
 8002dc8:	f000 f838 	bl	8002e3c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	691b      	ldr	r3, [r3, #16]
 8002dd2:	f003 0320 	and.w	r3, r3, #32
 8002dd6:	2b20      	cmp	r3, #32
 8002dd8:	d10e      	bne.n	8002df8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	68db      	ldr	r3, [r3, #12]
 8002de0:	f003 0320 	and.w	r3, r3, #32
 8002de4:	2b20      	cmp	r3, #32
 8002de6:	d107      	bne.n	8002df8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f06f 0220 	mvn.w	r2, #32
 8002df0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	f000 f88a 	bl	8002f0c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002df8:	bf00      	nop
 8002dfa:	3708      	adds	r7, #8
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}

08002e00 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b083      	sub	sp, #12
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002e08:	bf00      	nop
 8002e0a:	370c      	adds	r7, #12
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e12:	4770      	bx	lr

08002e14 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b083      	sub	sp, #12
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002e1c:	bf00      	nop
 8002e1e:	370c      	adds	r7, #12
 8002e20:	46bd      	mov	sp, r7
 8002e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e26:	4770      	bx	lr

08002e28 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b083      	sub	sp, #12
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002e30:	bf00      	nop
 8002e32:	370c      	adds	r7, #12
 8002e34:	46bd      	mov	sp, r7
 8002e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3a:	4770      	bx	lr

08002e3c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b083      	sub	sp, #12
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002e44:	bf00      	nop
 8002e46:	370c      	adds	r7, #12
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4e:	4770      	bx	lr

08002e50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b085      	sub	sp, #20
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
 8002e58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	4a26      	ldr	r2, [pc, #152]	; (8002efc <TIM_Base_SetConfig+0xac>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d003      	beq.n	8002e70 <TIM_Base_SetConfig+0x20>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	4a25      	ldr	r2, [pc, #148]	; (8002f00 <TIM_Base_SetConfig+0xb0>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d108      	bne.n	8002e82 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	68fa      	ldr	r2, [r7, #12]
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	4a1d      	ldr	r2, [pc, #116]	; (8002efc <TIM_Base_SetConfig+0xac>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d00b      	beq.n	8002ea2 <TIM_Base_SetConfig+0x52>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	4a1c      	ldr	r2, [pc, #112]	; (8002f00 <TIM_Base_SetConfig+0xb0>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d007      	beq.n	8002ea2 <TIM_Base_SetConfig+0x52>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	4a1b      	ldr	r2, [pc, #108]	; (8002f04 <TIM_Base_SetConfig+0xb4>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d003      	beq.n	8002ea2 <TIM_Base_SetConfig+0x52>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	4a1a      	ldr	r2, [pc, #104]	; (8002f08 <TIM_Base_SetConfig+0xb8>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d108      	bne.n	8002eb4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ea8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	68db      	ldr	r3, [r3, #12]
 8002eae:	68fa      	ldr	r2, [r7, #12]
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	695b      	ldr	r3, [r3, #20]
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	68fa      	ldr	r2, [r7, #12]
 8002ec6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	689a      	ldr	r2, [r3, #8]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	4a08      	ldr	r2, [pc, #32]	; (8002efc <TIM_Base_SetConfig+0xac>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d103      	bne.n	8002ee8 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	691a      	ldr	r2, [r3, #16]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2201      	movs	r2, #1
 8002eec:	615a      	str	r2, [r3, #20]
}
 8002eee:	bf00      	nop
 8002ef0:	3714      	adds	r7, #20
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef8:	4770      	bx	lr
 8002efa:	bf00      	nop
 8002efc:	40010000 	.word	0x40010000
 8002f00:	40000c00 	.word	0x40000c00
 8002f04:	40014000 	.word	0x40014000
 8002f08:	40014800 	.word	0x40014800

08002f0c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b083      	sub	sp, #12
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002f14:	bf00      	nop
 8002f16:	370c      	adds	r7, #12
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1e:	4770      	bx	lr

08002f20 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b083      	sub	sp, #12
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002f28:	bf00      	nop
 8002f2a:	370c      	adds	r7, #12
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f32:	4770      	bx	lr

08002f34 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b082      	sub	sp, #8
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d101      	bne.n	8002f46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e03f      	b.n	8002fc6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d106      	bne.n	8002f60 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2200      	movs	r2, #0
 8002f56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f7fe f96a 	bl	8001234 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2224      	movs	r2, #36	; 0x24
 8002f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	68da      	ldr	r2, [r3, #12]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f76:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002f78:	6878      	ldr	r0, [r7, #4]
 8002f7a:	f000 f929 	bl	80031d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	691a      	ldr	r2, [r3, #16]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002f8c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	695a      	ldr	r2, [r3, #20]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f9c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	68da      	ldr	r2, [r3, #12]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002fac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2220      	movs	r2, #32
 8002fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2220      	movs	r2, #32
 8002fc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002fc4:	2300      	movs	r3, #0
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3708      	adds	r7, #8
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}

08002fce <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fce:	b580      	push	{r7, lr}
 8002fd0:	b08a      	sub	sp, #40	; 0x28
 8002fd2:	af02      	add	r7, sp, #8
 8002fd4:	60f8      	str	r0, [r7, #12]
 8002fd6:	60b9      	str	r1, [r7, #8]
 8002fd8:	603b      	str	r3, [r7, #0]
 8002fda:	4613      	mov	r3, r2
 8002fdc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	2b20      	cmp	r3, #32
 8002fec:	d17c      	bne.n	80030e8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d002      	beq.n	8002ffa <HAL_UART_Transmit+0x2c>
 8002ff4:	88fb      	ldrh	r3, [r7, #6]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d101      	bne.n	8002ffe <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e075      	b.n	80030ea <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003004:	2b01      	cmp	r3, #1
 8003006:	d101      	bne.n	800300c <HAL_UART_Transmit+0x3e>
 8003008:	2302      	movs	r3, #2
 800300a:	e06e      	b.n	80030ea <HAL_UART_Transmit+0x11c>
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2201      	movs	r2, #1
 8003010:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2200      	movs	r2, #0
 8003018:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	2221      	movs	r2, #33	; 0x21
 800301e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003022:	f7fe f9af 	bl	8001384 <HAL_GetTick>
 8003026:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	88fa      	ldrh	r2, [r7, #6]
 800302c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	88fa      	ldrh	r2, [r7, #6]
 8003032:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800303c:	d108      	bne.n	8003050 <HAL_UART_Transmit+0x82>
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	691b      	ldr	r3, [r3, #16]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d104      	bne.n	8003050 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003046:	2300      	movs	r3, #0
 8003048:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	61bb      	str	r3, [r7, #24]
 800304e:	e003      	b.n	8003058 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003054:	2300      	movs	r3, #0
 8003056:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2200      	movs	r2, #0
 800305c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003060:	e02a      	b.n	80030b8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	9300      	str	r3, [sp, #0]
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	2200      	movs	r2, #0
 800306a:	2180      	movs	r1, #128	; 0x80
 800306c:	68f8      	ldr	r0, [r7, #12]
 800306e:	f000 f840 	bl	80030f2 <UART_WaitOnFlagUntilTimeout>
 8003072:	4603      	mov	r3, r0
 8003074:	2b00      	cmp	r3, #0
 8003076:	d001      	beq.n	800307c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003078:	2303      	movs	r3, #3
 800307a:	e036      	b.n	80030ea <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800307c:	69fb      	ldr	r3, [r7, #28]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d10b      	bne.n	800309a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003082:	69bb      	ldr	r3, [r7, #24]
 8003084:	881b      	ldrh	r3, [r3, #0]
 8003086:	461a      	mov	r2, r3
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003090:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003092:	69bb      	ldr	r3, [r7, #24]
 8003094:	3302      	adds	r3, #2
 8003096:	61bb      	str	r3, [r7, #24]
 8003098:	e007      	b.n	80030aa <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800309a:	69fb      	ldr	r3, [r7, #28]
 800309c:	781a      	ldrb	r2, [r3, #0]
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80030a4:	69fb      	ldr	r3, [r7, #28]
 80030a6:	3301      	adds	r3, #1
 80030a8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80030ae:	b29b      	uxth	r3, r3
 80030b0:	3b01      	subs	r3, #1
 80030b2:	b29a      	uxth	r2, r3
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80030bc:	b29b      	uxth	r3, r3
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d1cf      	bne.n	8003062 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	9300      	str	r3, [sp, #0]
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	2200      	movs	r2, #0
 80030ca:	2140      	movs	r1, #64	; 0x40
 80030cc:	68f8      	ldr	r0, [r7, #12]
 80030ce:	f000 f810 	bl	80030f2 <UART_WaitOnFlagUntilTimeout>
 80030d2:	4603      	mov	r3, r0
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d001      	beq.n	80030dc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80030d8:	2303      	movs	r3, #3
 80030da:	e006      	b.n	80030ea <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2220      	movs	r2, #32
 80030e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80030e4:	2300      	movs	r3, #0
 80030e6:	e000      	b.n	80030ea <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80030e8:	2302      	movs	r3, #2
  }
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3720      	adds	r7, #32
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}

080030f2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80030f2:	b580      	push	{r7, lr}
 80030f4:	b090      	sub	sp, #64	; 0x40
 80030f6:	af00      	add	r7, sp, #0
 80030f8:	60f8      	str	r0, [r7, #12]
 80030fa:	60b9      	str	r1, [r7, #8]
 80030fc:	603b      	str	r3, [r7, #0]
 80030fe:	4613      	mov	r3, r2
 8003100:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003102:	e050      	b.n	80031a6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003104:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003106:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800310a:	d04c      	beq.n	80031a6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800310c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800310e:	2b00      	cmp	r3, #0
 8003110:	d007      	beq.n	8003122 <UART_WaitOnFlagUntilTimeout+0x30>
 8003112:	f7fe f937 	bl	8001384 <HAL_GetTick>
 8003116:	4602      	mov	r2, r0
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	1ad3      	subs	r3, r2, r3
 800311c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800311e:	429a      	cmp	r2, r3
 8003120:	d241      	bcs.n	80031a6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	330c      	adds	r3, #12
 8003128:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800312a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800312c:	e853 3f00 	ldrex	r3, [r3]
 8003130:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003134:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003138:	63fb      	str	r3, [r7, #60]	; 0x3c
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	330c      	adds	r3, #12
 8003140:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003142:	637a      	str	r2, [r7, #52]	; 0x34
 8003144:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003146:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003148:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800314a:	e841 2300 	strex	r3, r2, [r1]
 800314e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003152:	2b00      	cmp	r3, #0
 8003154:	d1e5      	bne.n	8003122 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	3314      	adds	r3, #20
 800315c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	e853 3f00 	ldrex	r3, [r3]
 8003164:	613b      	str	r3, [r7, #16]
   return(result);
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	f023 0301 	bic.w	r3, r3, #1
 800316c:	63bb      	str	r3, [r7, #56]	; 0x38
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	3314      	adds	r3, #20
 8003174:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003176:	623a      	str	r2, [r7, #32]
 8003178:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800317a:	69f9      	ldr	r1, [r7, #28]
 800317c:	6a3a      	ldr	r2, [r7, #32]
 800317e:	e841 2300 	strex	r3, r2, [r1]
 8003182:	61bb      	str	r3, [r7, #24]
   return(result);
 8003184:	69bb      	ldr	r3, [r7, #24]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d1e5      	bne.n	8003156 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2220      	movs	r2, #32
 800318e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	2220      	movs	r2, #32
 8003196:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2200      	movs	r2, #0
 800319e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80031a2:	2303      	movs	r3, #3
 80031a4:	e00f      	b.n	80031c6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	681a      	ldr	r2, [r3, #0]
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	4013      	ands	r3, r2
 80031b0:	68ba      	ldr	r2, [r7, #8]
 80031b2:	429a      	cmp	r2, r3
 80031b4:	bf0c      	ite	eq
 80031b6:	2301      	moveq	r3, #1
 80031b8:	2300      	movne	r3, #0
 80031ba:	b2db      	uxtb	r3, r3
 80031bc:	461a      	mov	r2, r3
 80031be:	79fb      	ldrb	r3, [r7, #7]
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d09f      	beq.n	8003104 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80031c4:	2300      	movs	r3, #0
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	3740      	adds	r7, #64	; 0x40
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}
	...

080031d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80031d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031d4:	b0c0      	sub	sp, #256	; 0x100
 80031d6:	af00      	add	r7, sp, #0
 80031d8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	691b      	ldr	r3, [r3, #16]
 80031e4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80031e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031ec:	68d9      	ldr	r1, [r3, #12]
 80031ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	ea40 0301 	orr.w	r3, r0, r1
 80031f8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80031fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031fe:	689a      	ldr	r2, [r3, #8]
 8003200:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003204:	691b      	ldr	r3, [r3, #16]
 8003206:	431a      	orrs	r2, r3
 8003208:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800320c:	695b      	ldr	r3, [r3, #20]
 800320e:	431a      	orrs	r2, r3
 8003210:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003214:	69db      	ldr	r3, [r3, #28]
 8003216:	4313      	orrs	r3, r2
 8003218:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800321c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	68db      	ldr	r3, [r3, #12]
 8003224:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003228:	f021 010c 	bic.w	r1, r1, #12
 800322c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003236:	430b      	orrs	r3, r1
 8003238:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800323a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	695b      	ldr	r3, [r3, #20]
 8003242:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003246:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800324a:	6999      	ldr	r1, [r3, #24]
 800324c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003250:	681a      	ldr	r2, [r3, #0]
 8003252:	ea40 0301 	orr.w	r3, r0, r1
 8003256:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003258:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800325c:	681a      	ldr	r2, [r3, #0]
 800325e:	4b8f      	ldr	r3, [pc, #572]	; (800349c <UART_SetConfig+0x2cc>)
 8003260:	429a      	cmp	r2, r3
 8003262:	d005      	beq.n	8003270 <UART_SetConfig+0xa0>
 8003264:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	4b8d      	ldr	r3, [pc, #564]	; (80034a0 <UART_SetConfig+0x2d0>)
 800326c:	429a      	cmp	r2, r3
 800326e:	d104      	bne.n	800327a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003270:	f7ff f8d6 	bl	8002420 <HAL_RCC_GetPCLK2Freq>
 8003274:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003278:	e003      	b.n	8003282 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800327a:	f7ff f8bd 	bl	80023f8 <HAL_RCC_GetPCLK1Freq>
 800327e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003282:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003286:	69db      	ldr	r3, [r3, #28]
 8003288:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800328c:	f040 810c 	bne.w	80034a8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003290:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003294:	2200      	movs	r2, #0
 8003296:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800329a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800329e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80032a2:	4622      	mov	r2, r4
 80032a4:	462b      	mov	r3, r5
 80032a6:	1891      	adds	r1, r2, r2
 80032a8:	65b9      	str	r1, [r7, #88]	; 0x58
 80032aa:	415b      	adcs	r3, r3
 80032ac:	65fb      	str	r3, [r7, #92]	; 0x5c
 80032ae:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80032b2:	4621      	mov	r1, r4
 80032b4:	eb12 0801 	adds.w	r8, r2, r1
 80032b8:	4629      	mov	r1, r5
 80032ba:	eb43 0901 	adc.w	r9, r3, r1
 80032be:	f04f 0200 	mov.w	r2, #0
 80032c2:	f04f 0300 	mov.w	r3, #0
 80032c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80032ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80032ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80032d2:	4690      	mov	r8, r2
 80032d4:	4699      	mov	r9, r3
 80032d6:	4623      	mov	r3, r4
 80032d8:	eb18 0303 	adds.w	r3, r8, r3
 80032dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80032e0:	462b      	mov	r3, r5
 80032e2:	eb49 0303 	adc.w	r3, r9, r3
 80032e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80032ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	2200      	movs	r2, #0
 80032f2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80032f6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80032fa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80032fe:	460b      	mov	r3, r1
 8003300:	18db      	adds	r3, r3, r3
 8003302:	653b      	str	r3, [r7, #80]	; 0x50
 8003304:	4613      	mov	r3, r2
 8003306:	eb42 0303 	adc.w	r3, r2, r3
 800330a:	657b      	str	r3, [r7, #84]	; 0x54
 800330c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003310:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003314:	f7fc ffcc 	bl	80002b0 <__aeabi_uldivmod>
 8003318:	4602      	mov	r2, r0
 800331a:	460b      	mov	r3, r1
 800331c:	4b61      	ldr	r3, [pc, #388]	; (80034a4 <UART_SetConfig+0x2d4>)
 800331e:	fba3 2302 	umull	r2, r3, r3, r2
 8003322:	095b      	lsrs	r3, r3, #5
 8003324:	011c      	lsls	r4, r3, #4
 8003326:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800332a:	2200      	movs	r2, #0
 800332c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003330:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003334:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003338:	4642      	mov	r2, r8
 800333a:	464b      	mov	r3, r9
 800333c:	1891      	adds	r1, r2, r2
 800333e:	64b9      	str	r1, [r7, #72]	; 0x48
 8003340:	415b      	adcs	r3, r3
 8003342:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003344:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003348:	4641      	mov	r1, r8
 800334a:	eb12 0a01 	adds.w	sl, r2, r1
 800334e:	4649      	mov	r1, r9
 8003350:	eb43 0b01 	adc.w	fp, r3, r1
 8003354:	f04f 0200 	mov.w	r2, #0
 8003358:	f04f 0300 	mov.w	r3, #0
 800335c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003360:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003364:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003368:	4692      	mov	sl, r2
 800336a:	469b      	mov	fp, r3
 800336c:	4643      	mov	r3, r8
 800336e:	eb1a 0303 	adds.w	r3, sl, r3
 8003372:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003376:	464b      	mov	r3, r9
 8003378:	eb4b 0303 	adc.w	r3, fp, r3
 800337c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003380:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	2200      	movs	r2, #0
 8003388:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800338c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003390:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003394:	460b      	mov	r3, r1
 8003396:	18db      	adds	r3, r3, r3
 8003398:	643b      	str	r3, [r7, #64]	; 0x40
 800339a:	4613      	mov	r3, r2
 800339c:	eb42 0303 	adc.w	r3, r2, r3
 80033a0:	647b      	str	r3, [r7, #68]	; 0x44
 80033a2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80033a6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80033aa:	f7fc ff81 	bl	80002b0 <__aeabi_uldivmod>
 80033ae:	4602      	mov	r2, r0
 80033b0:	460b      	mov	r3, r1
 80033b2:	4611      	mov	r1, r2
 80033b4:	4b3b      	ldr	r3, [pc, #236]	; (80034a4 <UART_SetConfig+0x2d4>)
 80033b6:	fba3 2301 	umull	r2, r3, r3, r1
 80033ba:	095b      	lsrs	r3, r3, #5
 80033bc:	2264      	movs	r2, #100	; 0x64
 80033be:	fb02 f303 	mul.w	r3, r2, r3
 80033c2:	1acb      	subs	r3, r1, r3
 80033c4:	00db      	lsls	r3, r3, #3
 80033c6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80033ca:	4b36      	ldr	r3, [pc, #216]	; (80034a4 <UART_SetConfig+0x2d4>)
 80033cc:	fba3 2302 	umull	r2, r3, r3, r2
 80033d0:	095b      	lsrs	r3, r3, #5
 80033d2:	005b      	lsls	r3, r3, #1
 80033d4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80033d8:	441c      	add	r4, r3
 80033da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80033de:	2200      	movs	r2, #0
 80033e0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80033e4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80033e8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80033ec:	4642      	mov	r2, r8
 80033ee:	464b      	mov	r3, r9
 80033f0:	1891      	adds	r1, r2, r2
 80033f2:	63b9      	str	r1, [r7, #56]	; 0x38
 80033f4:	415b      	adcs	r3, r3
 80033f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80033f8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80033fc:	4641      	mov	r1, r8
 80033fe:	1851      	adds	r1, r2, r1
 8003400:	6339      	str	r1, [r7, #48]	; 0x30
 8003402:	4649      	mov	r1, r9
 8003404:	414b      	adcs	r3, r1
 8003406:	637b      	str	r3, [r7, #52]	; 0x34
 8003408:	f04f 0200 	mov.w	r2, #0
 800340c:	f04f 0300 	mov.w	r3, #0
 8003410:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003414:	4659      	mov	r1, fp
 8003416:	00cb      	lsls	r3, r1, #3
 8003418:	4651      	mov	r1, sl
 800341a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800341e:	4651      	mov	r1, sl
 8003420:	00ca      	lsls	r2, r1, #3
 8003422:	4610      	mov	r0, r2
 8003424:	4619      	mov	r1, r3
 8003426:	4603      	mov	r3, r0
 8003428:	4642      	mov	r2, r8
 800342a:	189b      	adds	r3, r3, r2
 800342c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003430:	464b      	mov	r3, r9
 8003432:	460a      	mov	r2, r1
 8003434:	eb42 0303 	adc.w	r3, r2, r3
 8003438:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800343c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	2200      	movs	r2, #0
 8003444:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003448:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800344c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003450:	460b      	mov	r3, r1
 8003452:	18db      	adds	r3, r3, r3
 8003454:	62bb      	str	r3, [r7, #40]	; 0x28
 8003456:	4613      	mov	r3, r2
 8003458:	eb42 0303 	adc.w	r3, r2, r3
 800345c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800345e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003462:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003466:	f7fc ff23 	bl	80002b0 <__aeabi_uldivmod>
 800346a:	4602      	mov	r2, r0
 800346c:	460b      	mov	r3, r1
 800346e:	4b0d      	ldr	r3, [pc, #52]	; (80034a4 <UART_SetConfig+0x2d4>)
 8003470:	fba3 1302 	umull	r1, r3, r3, r2
 8003474:	095b      	lsrs	r3, r3, #5
 8003476:	2164      	movs	r1, #100	; 0x64
 8003478:	fb01 f303 	mul.w	r3, r1, r3
 800347c:	1ad3      	subs	r3, r2, r3
 800347e:	00db      	lsls	r3, r3, #3
 8003480:	3332      	adds	r3, #50	; 0x32
 8003482:	4a08      	ldr	r2, [pc, #32]	; (80034a4 <UART_SetConfig+0x2d4>)
 8003484:	fba2 2303 	umull	r2, r3, r2, r3
 8003488:	095b      	lsrs	r3, r3, #5
 800348a:	f003 0207 	and.w	r2, r3, #7
 800348e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4422      	add	r2, r4
 8003496:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003498:	e105      	b.n	80036a6 <UART_SetConfig+0x4d6>
 800349a:	bf00      	nop
 800349c:	40011000 	.word	0x40011000
 80034a0:	40011400 	.word	0x40011400
 80034a4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80034a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80034ac:	2200      	movs	r2, #0
 80034ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80034b2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80034b6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80034ba:	4642      	mov	r2, r8
 80034bc:	464b      	mov	r3, r9
 80034be:	1891      	adds	r1, r2, r2
 80034c0:	6239      	str	r1, [r7, #32]
 80034c2:	415b      	adcs	r3, r3
 80034c4:	627b      	str	r3, [r7, #36]	; 0x24
 80034c6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80034ca:	4641      	mov	r1, r8
 80034cc:	1854      	adds	r4, r2, r1
 80034ce:	4649      	mov	r1, r9
 80034d0:	eb43 0501 	adc.w	r5, r3, r1
 80034d4:	f04f 0200 	mov.w	r2, #0
 80034d8:	f04f 0300 	mov.w	r3, #0
 80034dc:	00eb      	lsls	r3, r5, #3
 80034de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80034e2:	00e2      	lsls	r2, r4, #3
 80034e4:	4614      	mov	r4, r2
 80034e6:	461d      	mov	r5, r3
 80034e8:	4643      	mov	r3, r8
 80034ea:	18e3      	adds	r3, r4, r3
 80034ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80034f0:	464b      	mov	r3, r9
 80034f2:	eb45 0303 	adc.w	r3, r5, r3
 80034f6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80034fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	2200      	movs	r2, #0
 8003502:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003506:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800350a:	f04f 0200 	mov.w	r2, #0
 800350e:	f04f 0300 	mov.w	r3, #0
 8003512:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003516:	4629      	mov	r1, r5
 8003518:	008b      	lsls	r3, r1, #2
 800351a:	4621      	mov	r1, r4
 800351c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003520:	4621      	mov	r1, r4
 8003522:	008a      	lsls	r2, r1, #2
 8003524:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003528:	f7fc fec2 	bl	80002b0 <__aeabi_uldivmod>
 800352c:	4602      	mov	r2, r0
 800352e:	460b      	mov	r3, r1
 8003530:	4b60      	ldr	r3, [pc, #384]	; (80036b4 <UART_SetConfig+0x4e4>)
 8003532:	fba3 2302 	umull	r2, r3, r3, r2
 8003536:	095b      	lsrs	r3, r3, #5
 8003538:	011c      	lsls	r4, r3, #4
 800353a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800353e:	2200      	movs	r2, #0
 8003540:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003544:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003548:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800354c:	4642      	mov	r2, r8
 800354e:	464b      	mov	r3, r9
 8003550:	1891      	adds	r1, r2, r2
 8003552:	61b9      	str	r1, [r7, #24]
 8003554:	415b      	adcs	r3, r3
 8003556:	61fb      	str	r3, [r7, #28]
 8003558:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800355c:	4641      	mov	r1, r8
 800355e:	1851      	adds	r1, r2, r1
 8003560:	6139      	str	r1, [r7, #16]
 8003562:	4649      	mov	r1, r9
 8003564:	414b      	adcs	r3, r1
 8003566:	617b      	str	r3, [r7, #20]
 8003568:	f04f 0200 	mov.w	r2, #0
 800356c:	f04f 0300 	mov.w	r3, #0
 8003570:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003574:	4659      	mov	r1, fp
 8003576:	00cb      	lsls	r3, r1, #3
 8003578:	4651      	mov	r1, sl
 800357a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800357e:	4651      	mov	r1, sl
 8003580:	00ca      	lsls	r2, r1, #3
 8003582:	4610      	mov	r0, r2
 8003584:	4619      	mov	r1, r3
 8003586:	4603      	mov	r3, r0
 8003588:	4642      	mov	r2, r8
 800358a:	189b      	adds	r3, r3, r2
 800358c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003590:	464b      	mov	r3, r9
 8003592:	460a      	mov	r2, r1
 8003594:	eb42 0303 	adc.w	r3, r2, r3
 8003598:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800359c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	2200      	movs	r2, #0
 80035a4:	67bb      	str	r3, [r7, #120]	; 0x78
 80035a6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80035a8:	f04f 0200 	mov.w	r2, #0
 80035ac:	f04f 0300 	mov.w	r3, #0
 80035b0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80035b4:	4649      	mov	r1, r9
 80035b6:	008b      	lsls	r3, r1, #2
 80035b8:	4641      	mov	r1, r8
 80035ba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80035be:	4641      	mov	r1, r8
 80035c0:	008a      	lsls	r2, r1, #2
 80035c2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80035c6:	f7fc fe73 	bl	80002b0 <__aeabi_uldivmod>
 80035ca:	4602      	mov	r2, r0
 80035cc:	460b      	mov	r3, r1
 80035ce:	4b39      	ldr	r3, [pc, #228]	; (80036b4 <UART_SetConfig+0x4e4>)
 80035d0:	fba3 1302 	umull	r1, r3, r3, r2
 80035d4:	095b      	lsrs	r3, r3, #5
 80035d6:	2164      	movs	r1, #100	; 0x64
 80035d8:	fb01 f303 	mul.w	r3, r1, r3
 80035dc:	1ad3      	subs	r3, r2, r3
 80035de:	011b      	lsls	r3, r3, #4
 80035e0:	3332      	adds	r3, #50	; 0x32
 80035e2:	4a34      	ldr	r2, [pc, #208]	; (80036b4 <UART_SetConfig+0x4e4>)
 80035e4:	fba2 2303 	umull	r2, r3, r2, r3
 80035e8:	095b      	lsrs	r3, r3, #5
 80035ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80035ee:	441c      	add	r4, r3
 80035f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80035f4:	2200      	movs	r2, #0
 80035f6:	673b      	str	r3, [r7, #112]	; 0x70
 80035f8:	677a      	str	r2, [r7, #116]	; 0x74
 80035fa:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80035fe:	4642      	mov	r2, r8
 8003600:	464b      	mov	r3, r9
 8003602:	1891      	adds	r1, r2, r2
 8003604:	60b9      	str	r1, [r7, #8]
 8003606:	415b      	adcs	r3, r3
 8003608:	60fb      	str	r3, [r7, #12]
 800360a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800360e:	4641      	mov	r1, r8
 8003610:	1851      	adds	r1, r2, r1
 8003612:	6039      	str	r1, [r7, #0]
 8003614:	4649      	mov	r1, r9
 8003616:	414b      	adcs	r3, r1
 8003618:	607b      	str	r3, [r7, #4]
 800361a:	f04f 0200 	mov.w	r2, #0
 800361e:	f04f 0300 	mov.w	r3, #0
 8003622:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003626:	4659      	mov	r1, fp
 8003628:	00cb      	lsls	r3, r1, #3
 800362a:	4651      	mov	r1, sl
 800362c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003630:	4651      	mov	r1, sl
 8003632:	00ca      	lsls	r2, r1, #3
 8003634:	4610      	mov	r0, r2
 8003636:	4619      	mov	r1, r3
 8003638:	4603      	mov	r3, r0
 800363a:	4642      	mov	r2, r8
 800363c:	189b      	adds	r3, r3, r2
 800363e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003640:	464b      	mov	r3, r9
 8003642:	460a      	mov	r2, r1
 8003644:	eb42 0303 	adc.w	r3, r2, r3
 8003648:	66fb      	str	r3, [r7, #108]	; 0x6c
 800364a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	2200      	movs	r2, #0
 8003652:	663b      	str	r3, [r7, #96]	; 0x60
 8003654:	667a      	str	r2, [r7, #100]	; 0x64
 8003656:	f04f 0200 	mov.w	r2, #0
 800365a:	f04f 0300 	mov.w	r3, #0
 800365e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003662:	4649      	mov	r1, r9
 8003664:	008b      	lsls	r3, r1, #2
 8003666:	4641      	mov	r1, r8
 8003668:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800366c:	4641      	mov	r1, r8
 800366e:	008a      	lsls	r2, r1, #2
 8003670:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003674:	f7fc fe1c 	bl	80002b0 <__aeabi_uldivmod>
 8003678:	4602      	mov	r2, r0
 800367a:	460b      	mov	r3, r1
 800367c:	4b0d      	ldr	r3, [pc, #52]	; (80036b4 <UART_SetConfig+0x4e4>)
 800367e:	fba3 1302 	umull	r1, r3, r3, r2
 8003682:	095b      	lsrs	r3, r3, #5
 8003684:	2164      	movs	r1, #100	; 0x64
 8003686:	fb01 f303 	mul.w	r3, r1, r3
 800368a:	1ad3      	subs	r3, r2, r3
 800368c:	011b      	lsls	r3, r3, #4
 800368e:	3332      	adds	r3, #50	; 0x32
 8003690:	4a08      	ldr	r2, [pc, #32]	; (80036b4 <UART_SetConfig+0x4e4>)
 8003692:	fba2 2303 	umull	r2, r3, r2, r3
 8003696:	095b      	lsrs	r3, r3, #5
 8003698:	f003 020f 	and.w	r2, r3, #15
 800369c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4422      	add	r2, r4
 80036a4:	609a      	str	r2, [r3, #8]
}
 80036a6:	bf00      	nop
 80036a8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80036ac:	46bd      	mov	sp, r7
 80036ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80036b2:	bf00      	nop
 80036b4:	51eb851f 	.word	0x51eb851f

080036b8 <__NVIC_SetPriority>:
{
 80036b8:	b480      	push	{r7}
 80036ba:	b083      	sub	sp, #12
 80036bc:	af00      	add	r7, sp, #0
 80036be:	4603      	mov	r3, r0
 80036c0:	6039      	str	r1, [r7, #0]
 80036c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	db0a      	blt.n	80036e2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	b2da      	uxtb	r2, r3
 80036d0:	490c      	ldr	r1, [pc, #48]	; (8003704 <__NVIC_SetPriority+0x4c>)
 80036d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036d6:	0112      	lsls	r2, r2, #4
 80036d8:	b2d2      	uxtb	r2, r2
 80036da:	440b      	add	r3, r1
 80036dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80036e0:	e00a      	b.n	80036f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	b2da      	uxtb	r2, r3
 80036e6:	4908      	ldr	r1, [pc, #32]	; (8003708 <__NVIC_SetPriority+0x50>)
 80036e8:	79fb      	ldrb	r3, [r7, #7]
 80036ea:	f003 030f 	and.w	r3, r3, #15
 80036ee:	3b04      	subs	r3, #4
 80036f0:	0112      	lsls	r2, r2, #4
 80036f2:	b2d2      	uxtb	r2, r2
 80036f4:	440b      	add	r3, r1
 80036f6:	761a      	strb	r2, [r3, #24]
}
 80036f8:	bf00      	nop
 80036fa:	370c      	adds	r7, #12
 80036fc:	46bd      	mov	sp, r7
 80036fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003702:	4770      	bx	lr
 8003704:	e000e100 	.word	0xe000e100
 8003708:	e000ed00 	.word	0xe000ed00

0800370c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800370c:	b580      	push	{r7, lr}
 800370e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003710:	4b05      	ldr	r3, [pc, #20]	; (8003728 <SysTick_Handler+0x1c>)
 8003712:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003714:	f002 f814 	bl	8005740 <xTaskGetSchedulerState>
 8003718:	4603      	mov	r3, r0
 800371a:	2b01      	cmp	r3, #1
 800371c:	d001      	beq.n	8003722 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800371e:	f002 ffeb 	bl	80066f8 <xPortSysTickHandler>
  }
}
 8003722:	bf00      	nop
 8003724:	bd80      	pop	{r7, pc}
 8003726:	bf00      	nop
 8003728:	e000e010 	.word	0xe000e010

0800372c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800372c:	b580      	push	{r7, lr}
 800372e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003730:	2100      	movs	r1, #0
 8003732:	f06f 0004 	mvn.w	r0, #4
 8003736:	f7ff ffbf 	bl	80036b8 <__NVIC_SetPriority>
#endif
}
 800373a:	bf00      	nop
 800373c:	bd80      	pop	{r7, pc}
	...

08003740 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003740:	b480      	push	{r7}
 8003742:	b083      	sub	sp, #12
 8003744:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003746:	f3ef 8305 	mrs	r3, IPSR
 800374a:	603b      	str	r3, [r7, #0]
  return(result);
 800374c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800374e:	2b00      	cmp	r3, #0
 8003750:	d003      	beq.n	800375a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003752:	f06f 0305 	mvn.w	r3, #5
 8003756:	607b      	str	r3, [r7, #4]
 8003758:	e00c      	b.n	8003774 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800375a:	4b0a      	ldr	r3, [pc, #40]	; (8003784 <osKernelInitialize+0x44>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d105      	bne.n	800376e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003762:	4b08      	ldr	r3, [pc, #32]	; (8003784 <osKernelInitialize+0x44>)
 8003764:	2201      	movs	r2, #1
 8003766:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003768:	2300      	movs	r3, #0
 800376a:	607b      	str	r3, [r7, #4]
 800376c:	e002      	b.n	8003774 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800376e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003772:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003774:	687b      	ldr	r3, [r7, #4]
}
 8003776:	4618      	mov	r0, r3
 8003778:	370c      	adds	r7, #12
 800377a:	46bd      	mov	sp, r7
 800377c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003780:	4770      	bx	lr
 8003782:	bf00      	nop
 8003784:	200002a0 	.word	0x200002a0

08003788 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003788:	b580      	push	{r7, lr}
 800378a:	b082      	sub	sp, #8
 800378c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800378e:	f3ef 8305 	mrs	r3, IPSR
 8003792:	603b      	str	r3, [r7, #0]
  return(result);
 8003794:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003796:	2b00      	cmp	r3, #0
 8003798:	d003      	beq.n	80037a2 <osKernelStart+0x1a>
    stat = osErrorISR;
 800379a:	f06f 0305 	mvn.w	r3, #5
 800379e:	607b      	str	r3, [r7, #4]
 80037a0:	e010      	b.n	80037c4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80037a2:	4b0b      	ldr	r3, [pc, #44]	; (80037d0 <osKernelStart+0x48>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	2b01      	cmp	r3, #1
 80037a8:	d109      	bne.n	80037be <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80037aa:	f7ff ffbf 	bl	800372c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80037ae:	4b08      	ldr	r3, [pc, #32]	; (80037d0 <osKernelStart+0x48>)
 80037b0:	2202      	movs	r2, #2
 80037b2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80037b4:	f001 fb7c 	bl	8004eb0 <vTaskStartScheduler>
      stat = osOK;
 80037b8:	2300      	movs	r3, #0
 80037ba:	607b      	str	r3, [r7, #4]
 80037bc:	e002      	b.n	80037c4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80037be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80037c2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80037c4:	687b      	ldr	r3, [r7, #4]
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3708      	adds	r7, #8
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	bf00      	nop
 80037d0:	200002a0 	.word	0x200002a0

080037d4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b08e      	sub	sp, #56	; 0x38
 80037d8:	af04      	add	r7, sp, #16
 80037da:	60f8      	str	r0, [r7, #12]
 80037dc:	60b9      	str	r1, [r7, #8]
 80037de:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80037e0:	2300      	movs	r3, #0
 80037e2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80037e4:	f3ef 8305 	mrs	r3, IPSR
 80037e8:	617b      	str	r3, [r7, #20]
  return(result);
 80037ea:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d17e      	bne.n	80038ee <osThreadNew+0x11a>
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d07b      	beq.n	80038ee <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80037f6:	2380      	movs	r3, #128	; 0x80
 80037f8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80037fa:	2318      	movs	r3, #24
 80037fc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80037fe:	2300      	movs	r3, #0
 8003800:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8003802:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003806:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d045      	beq.n	800389a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d002      	beq.n	800381c <osThreadNew+0x48>
        name = attr->name;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	699b      	ldr	r3, [r3, #24]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d002      	beq.n	800382a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	699b      	ldr	r3, [r3, #24]
 8003828:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800382a:	69fb      	ldr	r3, [r7, #28]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d008      	beq.n	8003842 <osThreadNew+0x6e>
 8003830:	69fb      	ldr	r3, [r7, #28]
 8003832:	2b38      	cmp	r3, #56	; 0x38
 8003834:	d805      	bhi.n	8003842 <osThreadNew+0x6e>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	f003 0301 	and.w	r3, r3, #1
 800383e:	2b00      	cmp	r3, #0
 8003840:	d001      	beq.n	8003846 <osThreadNew+0x72>
        return (NULL);
 8003842:	2300      	movs	r3, #0
 8003844:	e054      	b.n	80038f0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	695b      	ldr	r3, [r3, #20]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d003      	beq.n	8003856 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	695b      	ldr	r3, [r3, #20]
 8003852:	089b      	lsrs	r3, r3, #2
 8003854:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d00e      	beq.n	800387c <osThreadNew+0xa8>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	68db      	ldr	r3, [r3, #12]
 8003862:	2b5b      	cmp	r3, #91	; 0x5b
 8003864:	d90a      	bls.n	800387c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800386a:	2b00      	cmp	r3, #0
 800386c:	d006      	beq.n	800387c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	695b      	ldr	r3, [r3, #20]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d002      	beq.n	800387c <osThreadNew+0xa8>
        mem = 1;
 8003876:	2301      	movs	r3, #1
 8003878:	61bb      	str	r3, [r7, #24]
 800387a:	e010      	b.n	800389e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d10c      	bne.n	800389e <osThreadNew+0xca>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	68db      	ldr	r3, [r3, #12]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d108      	bne.n	800389e <osThreadNew+0xca>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	691b      	ldr	r3, [r3, #16]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d104      	bne.n	800389e <osThreadNew+0xca>
          mem = 0;
 8003894:	2300      	movs	r3, #0
 8003896:	61bb      	str	r3, [r7, #24]
 8003898:	e001      	b.n	800389e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800389a:	2300      	movs	r3, #0
 800389c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800389e:	69bb      	ldr	r3, [r7, #24]
 80038a0:	2b01      	cmp	r3, #1
 80038a2:	d110      	bne.n	80038c6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80038a8:	687a      	ldr	r2, [r7, #4]
 80038aa:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80038ac:	9202      	str	r2, [sp, #8]
 80038ae:	9301      	str	r3, [sp, #4]
 80038b0:	69fb      	ldr	r3, [r7, #28]
 80038b2:	9300      	str	r3, [sp, #0]
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	6a3a      	ldr	r2, [r7, #32]
 80038b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80038ba:	68f8      	ldr	r0, [r7, #12]
 80038bc:	f001 f922 	bl	8004b04 <xTaskCreateStatic>
 80038c0:	4603      	mov	r3, r0
 80038c2:	613b      	str	r3, [r7, #16]
 80038c4:	e013      	b.n	80038ee <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80038c6:	69bb      	ldr	r3, [r7, #24]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d110      	bne.n	80038ee <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80038cc:	6a3b      	ldr	r3, [r7, #32]
 80038ce:	b29a      	uxth	r2, r3
 80038d0:	f107 0310 	add.w	r3, r7, #16
 80038d4:	9301      	str	r3, [sp, #4]
 80038d6:	69fb      	ldr	r3, [r7, #28]
 80038d8:	9300      	str	r3, [sp, #0]
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80038de:	68f8      	ldr	r0, [r7, #12]
 80038e0:	f001 f96d 	bl	8004bbe <xTaskCreate>
 80038e4:	4603      	mov	r3, r0
 80038e6:	2b01      	cmp	r3, #1
 80038e8:	d001      	beq.n	80038ee <osThreadNew+0x11a>
            hTask = NULL;
 80038ea:	2300      	movs	r3, #0
 80038ec:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80038ee:	693b      	ldr	r3, [r7, #16]
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	3728      	adds	r7, #40	; 0x28
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd80      	pop	{r7, pc}

080038f8 <osThreadFlagsSet>:
  return (count);
}
#endif /* (configUSE_OS2_THREAD_ENUMERATE == 1) */

#if (configUSE_OS2_THREAD_FLAGS == 1)
uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b088      	sub	sp, #32
 80038fc:	af02      	add	r7, sp, #8
 80038fe:	6078      	str	r0, [r7, #4]
 8003900:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	617b      	str	r3, [r7, #20]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d002      	beq.n	8003912 <osThreadFlagsSet+0x1a>
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	2b00      	cmp	r3, #0
 8003910:	da03      	bge.n	800391a <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 8003912:	f06f 0303 	mvn.w	r3, #3
 8003916:	60fb      	str	r3, [r7, #12]
 8003918:	e035      	b.n	8003986 <osThreadFlagsSet+0x8e>
  }
  else {
    rflags = (uint32_t)osError;
 800391a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800391e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003920:	f3ef 8305 	mrs	r3, IPSR
 8003924:	613b      	str	r3, [r7, #16]
  return(result);
 8003926:	693b      	ldr	r3, [r7, #16]

    if (IS_IRQ()) {
 8003928:	2b00      	cmp	r3, #0
 800392a:	d01f      	beq.n	800396c <osThreadFlagsSet+0x74>
      yield = pdFALSE;
 800392c:	2300      	movs	r3, #0
 800392e:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 8003930:	f107 0308 	add.w	r3, r7, #8
 8003934:	9300      	str	r3, [sp, #0]
 8003936:	2300      	movs	r3, #0
 8003938:	2201      	movs	r2, #1
 800393a:	6839      	ldr	r1, [r7, #0]
 800393c:	6978      	ldr	r0, [r7, #20]
 800393e:	f002 f89d 	bl	8005a7c <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 8003942:	f107 030c 	add.w	r3, r7, #12
 8003946:	2200      	movs	r2, #0
 8003948:	9200      	str	r2, [sp, #0]
 800394a:	2200      	movs	r2, #0
 800394c:	2100      	movs	r1, #0
 800394e:	6978      	ldr	r0, [r7, #20]
 8003950:	f002 f894 	bl	8005a7c <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d015      	beq.n	8003986 <osThreadFlagsSet+0x8e>
 800395a:	4b0d      	ldr	r3, [pc, #52]	; (8003990 <osThreadFlagsSet+0x98>)
 800395c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003960:	601a      	str	r2, [r3, #0]
 8003962:	f3bf 8f4f 	dsb	sy
 8003966:	f3bf 8f6f 	isb	sy
 800396a:	e00c      	b.n	8003986 <osThreadFlagsSet+0x8e>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 800396c:	2300      	movs	r3, #0
 800396e:	2201      	movs	r2, #1
 8003970:	6839      	ldr	r1, [r7, #0]
 8003972:	6978      	ldr	r0, [r7, #20]
 8003974:	f001 ffca 	bl	800590c <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 8003978:	f107 030c 	add.w	r3, r7, #12
 800397c:	2200      	movs	r2, #0
 800397e:	2100      	movs	r1, #0
 8003980:	6978      	ldr	r0, [r7, #20]
 8003982:	f001 ffc3 	bl	800590c <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 8003986:	68fb      	ldr	r3, [r7, #12]
}
 8003988:	4618      	mov	r0, r3
 800398a:	3718      	adds	r7, #24
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}
 8003990:	e000ed04 	.word	0xe000ed04

08003994 <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 8003994:	b580      	push	{r7, lr}
 8003996:	b08c      	sub	sp, #48	; 0x30
 8003998:	af00      	add	r7, sp, #0
 800399a:	60f8      	str	r0, [r7, #12]
 800399c:	60b9      	str	r1, [r7, #8]
 800399e:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80039a0:	f3ef 8305 	mrs	r3, IPSR
 80039a4:	617b      	str	r3, [r7, #20]
  return(result);
 80039a6:	697b      	ldr	r3, [r7, #20]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d003      	beq.n	80039b4 <osThreadFlagsWait+0x20>
    rflags = (uint32_t)osErrorISR;
 80039ac:	f06f 0305 	mvn.w	r3, #5
 80039b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80039b2:	e06b      	b.n	8003a8c <osThreadFlagsWait+0xf8>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	da03      	bge.n	80039c2 <osThreadFlagsWait+0x2e>
    rflags = (uint32_t)osErrorParameter;
 80039ba:	f06f 0303 	mvn.w	r3, #3
 80039be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80039c0:	e064      	b.n	8003a8c <osThreadFlagsWait+0xf8>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	f003 0302 	and.w	r3, r3, #2
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d002      	beq.n	80039d2 <osThreadFlagsWait+0x3e>
      clear = 0U;
 80039cc:	2300      	movs	r3, #0
 80039ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80039d0:	e001      	b.n	80039d6 <osThreadFlagsWait+0x42>
    } else {
      clear = flags;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    rflags = 0U;
 80039d6:	2300      	movs	r3, #0
 80039d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    tout   = timeout;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	627b      	str	r3, [r7, #36]	; 0x24

    t0 = xTaskGetTickCount();
 80039de:	f001 fb79 	bl	80050d4 <xTaskGetTickCount>
 80039e2:	6238      	str	r0, [r7, #32]
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 80039e4:	f107 0210 	add.w	r2, r7, #16
 80039e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80039ec:	2000      	movs	r0, #0
 80039ee:	f001 ff33 	bl	8005858 <xTaskNotifyWait>
 80039f2:	61f8      	str	r0, [r7, #28]

      if (rval == pdPASS) {
 80039f4:	69fb      	ldr	r3, [r7, #28]
 80039f6:	2b01      	cmp	r3, #1
 80039f8:	d137      	bne.n	8003a6a <osThreadFlagsWait+0xd6>
        rflags &= flags;
 80039fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	4013      	ands	r3, r2
 8003a00:	62fb      	str	r3, [r7, #44]	; 0x2c
        rflags |= nval;
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a06:	4313      	orrs	r3, r2
 8003a08:	62fb      	str	r3, [r7, #44]	; 0x2c

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	f003 0301 	and.w	r3, r3, #1
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d00c      	beq.n	8003a2e <osThreadFlagsWait+0x9a>
          if ((flags & rflags) == flags) {
 8003a14:	68fa      	ldr	r2, [r7, #12]
 8003a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a18:	4013      	ands	r3, r2
 8003a1a:	68fa      	ldr	r2, [r7, #12]
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	d032      	beq.n	8003a86 <osThreadFlagsWait+0xf2>
            break;
          } else {
            if (timeout == 0U) {
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d10f      	bne.n	8003a46 <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 8003a26:	f06f 0302 	mvn.w	r3, #2
 8003a2a:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 8003a2c:	e02e      	b.n	8003a8c <osThreadFlagsWait+0xf8>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 8003a2e:	68fa      	ldr	r2, [r7, #12]
 8003a30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a32:	4013      	ands	r3, r2
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d128      	bne.n	8003a8a <osThreadFlagsWait+0xf6>
            break;
          } else {
            if (timeout == 0U) {
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d103      	bne.n	8003a46 <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 8003a3e:	f06f 0302 	mvn.w	r3, #2
 8003a42:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 8003a44:	e022      	b.n	8003a8c <osThreadFlagsWait+0xf8>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 8003a46:	f001 fb45 	bl	80050d4 <xTaskGetTickCount>
 8003a4a:	4602      	mov	r2, r0
 8003a4c:	6a3b      	ldr	r3, [r7, #32]
 8003a4e:	1ad3      	subs	r3, r2, r3
 8003a50:	61bb      	str	r3, [r7, #24]

        if (td > tout) {
 8003a52:	69ba      	ldr	r2, [r7, #24]
 8003a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a56:	429a      	cmp	r2, r3
 8003a58:	d902      	bls.n	8003a60 <osThreadFlagsWait+0xcc>
          tout  = 0;
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	627b      	str	r3, [r7, #36]	; 0x24
 8003a5e:	e00e      	b.n	8003a7e <osThreadFlagsWait+0xea>
        } else {
          tout -= td;
 8003a60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a62:	69bb      	ldr	r3, [r7, #24]
 8003a64:	1ad3      	subs	r3, r2, r3
 8003a66:	627b      	str	r3, [r7, #36]	; 0x24
 8003a68:	e009      	b.n	8003a7e <osThreadFlagsWait+0xea>
        }
      }
      else {
        if (timeout == 0) {
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d103      	bne.n	8003a78 <osThreadFlagsWait+0xe4>
          rflags = (uint32_t)osErrorResource;
 8003a70:	f06f 0302 	mvn.w	r3, #2
 8003a74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a76:	e002      	b.n	8003a7e <osThreadFlagsWait+0xea>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 8003a78:	f06f 0301 	mvn.w	r3, #1
 8003a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
      }
    }
    while (rval != pdFAIL);
 8003a7e:	69fb      	ldr	r3, [r7, #28]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d1af      	bne.n	80039e4 <osThreadFlagsWait+0x50>
 8003a84:	e002      	b.n	8003a8c <osThreadFlagsWait+0xf8>
            break;
 8003a86:	bf00      	nop
 8003a88:	e000      	b.n	8003a8c <osThreadFlagsWait+0xf8>
            break;
 8003a8a:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 8003a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	3730      	adds	r7, #48	; 0x30
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}

08003a96 <osDelay>:
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003a96:	b580      	push	{r7, lr}
 8003a98:	b084      	sub	sp, #16
 8003a9a:	af00      	add	r7, sp, #0
 8003a9c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003a9e:	f3ef 8305 	mrs	r3, IPSR
 8003aa2:	60bb      	str	r3, [r7, #8]
  return(result);
 8003aa4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d003      	beq.n	8003ab2 <osDelay+0x1c>
    stat = osErrorISR;
 8003aaa:	f06f 0305 	mvn.w	r3, #5
 8003aae:	60fb      	str	r3, [r7, #12]
 8003ab0:	e007      	b.n	8003ac2 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d002      	beq.n	8003ac2 <osDelay+0x2c>
      vTaskDelay(ticks);
 8003abc:	6878      	ldr	r0, [r7, #4]
 8003abe:	f001 f9c3 	bl	8004e48 <vTaskDelay>
    }
  }

  return (stat);
 8003ac2:	68fb      	ldr	r3, [r7, #12]
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	3710      	adds	r7, #16
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}

08003acc <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b08a      	sub	sp, #40	; 0x28
 8003ad0:	af02      	add	r7, sp, #8
 8003ad2:	60f8      	str	r0, [r7, #12]
 8003ad4:	60b9      	str	r1, [r7, #8]
 8003ad6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003adc:	f3ef 8305 	mrs	r3, IPSR
 8003ae0:	613b      	str	r3, [r7, #16]
  return(result);
 8003ae2:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d15f      	bne.n	8003ba8 <osMessageQueueNew+0xdc>
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d05c      	beq.n	8003ba8 <osMessageQueueNew+0xdc>
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d059      	beq.n	8003ba8 <osMessageQueueNew+0xdc>
    mem = -1;
 8003af4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003af8:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d029      	beq.n	8003b54 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d012      	beq.n	8003b2e <osMessageQueueNew+0x62>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	68db      	ldr	r3, [r3, #12]
 8003b0c:	2b4f      	cmp	r3, #79	; 0x4f
 8003b0e:	d90e      	bls.n	8003b2e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d00a      	beq.n	8003b2e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	695a      	ldr	r2, [r3, #20]
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	68b9      	ldr	r1, [r7, #8]
 8003b20:	fb01 f303 	mul.w	r3, r1, r3
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d302      	bcc.n	8003b2e <osMessageQueueNew+0x62>
        mem = 1;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	61bb      	str	r3, [r7, #24]
 8003b2c:	e014      	b.n	8003b58 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d110      	bne.n	8003b58 <osMessageQueueNew+0x8c>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	68db      	ldr	r3, [r3, #12]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d10c      	bne.n	8003b58 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d108      	bne.n	8003b58 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	695b      	ldr	r3, [r3, #20]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d104      	bne.n	8003b58 <osMessageQueueNew+0x8c>
          mem = 0;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	61bb      	str	r3, [r7, #24]
 8003b52:	e001      	b.n	8003b58 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8003b54:	2300      	movs	r3, #0
 8003b56:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003b58:	69bb      	ldr	r3, [r7, #24]
 8003b5a:	2b01      	cmp	r3, #1
 8003b5c:	d10b      	bne.n	8003b76 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	691a      	ldr	r2, [r3, #16]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	2100      	movs	r1, #0
 8003b68:	9100      	str	r1, [sp, #0]
 8003b6a:	68b9      	ldr	r1, [r7, #8]
 8003b6c:	68f8      	ldr	r0, [r7, #12]
 8003b6e:	f000 fa4f 	bl	8004010 <xQueueGenericCreateStatic>
 8003b72:	61f8      	str	r0, [r7, #28]
 8003b74:	e008      	b.n	8003b88 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8003b76:	69bb      	ldr	r3, [r7, #24]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d105      	bne.n	8003b88 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	68b9      	ldr	r1, [r7, #8]
 8003b80:	68f8      	ldr	r0, [r7, #12]
 8003b82:	f000 fabd 	bl	8004100 <xQueueGenericCreate>
 8003b86:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8003b88:	69fb      	ldr	r3, [r7, #28]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d00c      	beq.n	8003ba8 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d003      	beq.n	8003b9c <osMessageQueueNew+0xd0>
        name = attr->name;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	617b      	str	r3, [r7, #20]
 8003b9a:	e001      	b.n	8003ba0 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8003ba0:	6979      	ldr	r1, [r7, #20]
 8003ba2:	69f8      	ldr	r0, [r7, #28]
 8003ba4:	f000 ff50 	bl	8004a48 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8003ba8:	69fb      	ldr	r3, [r7, #28]
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	3720      	adds	r7, #32
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}
	...

08003bb4 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b088      	sub	sp, #32
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	60f8      	str	r0, [r7, #12]
 8003bbc:	60b9      	str	r1, [r7, #8]
 8003bbe:	603b      	str	r3, [r7, #0]
 8003bc0:	4613      	mov	r3, r2
 8003bc2:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003bcc:	f3ef 8305 	mrs	r3, IPSR
 8003bd0:	617b      	str	r3, [r7, #20]
  return(result);
 8003bd2:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d028      	beq.n	8003c2a <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003bd8:	69bb      	ldr	r3, [r7, #24]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d005      	beq.n	8003bea <osMessageQueuePut+0x36>
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d002      	beq.n	8003bea <osMessageQueuePut+0x36>
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d003      	beq.n	8003bf2 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8003bea:	f06f 0303 	mvn.w	r3, #3
 8003bee:	61fb      	str	r3, [r7, #28]
 8003bf0:	e038      	b.n	8003c64 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8003bf6:	f107 0210 	add.w	r2, r7, #16
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	68b9      	ldr	r1, [r7, #8]
 8003bfe:	69b8      	ldr	r0, [r7, #24]
 8003c00:	f000 fbda 	bl	80043b8 <xQueueGenericSendFromISR>
 8003c04:	4603      	mov	r3, r0
 8003c06:	2b01      	cmp	r3, #1
 8003c08:	d003      	beq.n	8003c12 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8003c0a:	f06f 0302 	mvn.w	r3, #2
 8003c0e:	61fb      	str	r3, [r7, #28]
 8003c10:	e028      	b.n	8003c64 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d025      	beq.n	8003c64 <osMessageQueuePut+0xb0>
 8003c18:	4b15      	ldr	r3, [pc, #84]	; (8003c70 <osMessageQueuePut+0xbc>)
 8003c1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c1e:	601a      	str	r2, [r3, #0]
 8003c20:	f3bf 8f4f 	dsb	sy
 8003c24:	f3bf 8f6f 	isb	sy
 8003c28:	e01c      	b.n	8003c64 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8003c2a:	69bb      	ldr	r3, [r7, #24]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d002      	beq.n	8003c36 <osMessageQueuePut+0x82>
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d103      	bne.n	8003c3e <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8003c36:	f06f 0303 	mvn.w	r3, #3
 8003c3a:	61fb      	str	r3, [r7, #28]
 8003c3c:	e012      	b.n	8003c64 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8003c3e:	2300      	movs	r3, #0
 8003c40:	683a      	ldr	r2, [r7, #0]
 8003c42:	68b9      	ldr	r1, [r7, #8]
 8003c44:	69b8      	ldr	r0, [r7, #24]
 8003c46:	f000 fab9 	bl	80041bc <xQueueGenericSend>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	2b01      	cmp	r3, #1
 8003c4e:	d009      	beq.n	8003c64 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d003      	beq.n	8003c5e <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8003c56:	f06f 0301 	mvn.w	r3, #1
 8003c5a:	61fb      	str	r3, [r7, #28]
 8003c5c:	e002      	b.n	8003c64 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8003c5e:	f06f 0302 	mvn.w	r3, #2
 8003c62:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8003c64:	69fb      	ldr	r3, [r7, #28]
}
 8003c66:	4618      	mov	r0, r3
 8003c68:	3720      	adds	r7, #32
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}
 8003c6e:	bf00      	nop
 8003c70:	e000ed04 	.word	0xe000ed04

08003c74 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b088      	sub	sp, #32
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	60f8      	str	r0, [r7, #12]
 8003c7c:	60b9      	str	r1, [r7, #8]
 8003c7e:	607a      	str	r2, [r7, #4]
 8003c80:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8003c86:	2300      	movs	r3, #0
 8003c88:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003c8a:	f3ef 8305 	mrs	r3, IPSR
 8003c8e:	617b      	str	r3, [r7, #20]
  return(result);
 8003c90:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d028      	beq.n	8003ce8 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003c96:	69bb      	ldr	r3, [r7, #24]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d005      	beq.n	8003ca8 <osMessageQueueGet+0x34>
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d002      	beq.n	8003ca8 <osMessageQueueGet+0x34>
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d003      	beq.n	8003cb0 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8003ca8:	f06f 0303 	mvn.w	r3, #3
 8003cac:	61fb      	str	r3, [r7, #28]
 8003cae:	e037      	b.n	8003d20 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8003cb4:	f107 0310 	add.w	r3, r7, #16
 8003cb8:	461a      	mov	r2, r3
 8003cba:	68b9      	ldr	r1, [r7, #8]
 8003cbc:	69b8      	ldr	r0, [r7, #24]
 8003cbe:	f000 fcf7 	bl	80046b0 <xQueueReceiveFromISR>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	2b01      	cmp	r3, #1
 8003cc6:	d003      	beq.n	8003cd0 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8003cc8:	f06f 0302 	mvn.w	r3, #2
 8003ccc:	61fb      	str	r3, [r7, #28]
 8003cce:	e027      	b.n	8003d20 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8003cd0:	693b      	ldr	r3, [r7, #16]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d024      	beq.n	8003d20 <osMessageQueueGet+0xac>
 8003cd6:	4b15      	ldr	r3, [pc, #84]	; (8003d2c <osMessageQueueGet+0xb8>)
 8003cd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003cdc:	601a      	str	r2, [r3, #0]
 8003cde:	f3bf 8f4f 	dsb	sy
 8003ce2:	f3bf 8f6f 	isb	sy
 8003ce6:	e01b      	b.n	8003d20 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8003ce8:	69bb      	ldr	r3, [r7, #24]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d002      	beq.n	8003cf4 <osMessageQueueGet+0x80>
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d103      	bne.n	8003cfc <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8003cf4:	f06f 0303 	mvn.w	r3, #3
 8003cf8:	61fb      	str	r3, [r7, #28]
 8003cfa:	e011      	b.n	8003d20 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8003cfc:	683a      	ldr	r2, [r7, #0]
 8003cfe:	68b9      	ldr	r1, [r7, #8]
 8003d00:	69b8      	ldr	r0, [r7, #24]
 8003d02:	f000 fbf5 	bl	80044f0 <xQueueReceive>
 8003d06:	4603      	mov	r3, r0
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	d009      	beq.n	8003d20 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d003      	beq.n	8003d1a <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8003d12:	f06f 0301 	mvn.w	r3, #1
 8003d16:	61fb      	str	r3, [r7, #28]
 8003d18:	e002      	b.n	8003d20 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8003d1a:	f06f 0302 	mvn.w	r3, #2
 8003d1e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8003d20:	69fb      	ldr	r3, [r7, #28]
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	3720      	adds	r7, #32
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}
 8003d2a:	bf00      	nop
 8003d2c:	e000ed04 	.word	0xe000ed04

08003d30 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b086      	sub	sp, #24
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d102      	bne.n	8003d48 <osMessageQueueGetCount+0x18>
    count = 0U;
 8003d42:	2300      	movs	r3, #0
 8003d44:	617b      	str	r3, [r7, #20]
 8003d46:	e00e      	b.n	8003d66 <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003d48:	f3ef 8305 	mrs	r3, IPSR
 8003d4c:	60fb      	str	r3, [r7, #12]
  return(result);
 8003d4e:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d004      	beq.n	8003d5e <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 8003d54:	6938      	ldr	r0, [r7, #16]
 8003d56:	f000 fd49 	bl	80047ec <uxQueueMessagesWaitingFromISR>
 8003d5a:	6178      	str	r0, [r7, #20]
 8003d5c:	e003      	b.n	8003d66 <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 8003d5e:	6938      	ldr	r0, [r7, #16]
 8003d60:	f000 fd26 	bl	80047b0 <uxQueueMessagesWaiting>
 8003d64:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 8003d66:	697b      	ldr	r3, [r7, #20]
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	3718      	adds	r7, #24
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}

08003d70 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003d70:	b480      	push	{r7}
 8003d72:	b085      	sub	sp, #20
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	60f8      	str	r0, [r7, #12]
 8003d78:	60b9      	str	r1, [r7, #8]
 8003d7a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	4a07      	ldr	r2, [pc, #28]	; (8003d9c <vApplicationGetIdleTaskMemory+0x2c>)
 8003d80:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	4a06      	ldr	r2, [pc, #24]	; (8003da0 <vApplicationGetIdleTaskMemory+0x30>)
 8003d86:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2280      	movs	r2, #128	; 0x80
 8003d8c:	601a      	str	r2, [r3, #0]
}
 8003d8e:	bf00      	nop
 8003d90:	3714      	adds	r7, #20
 8003d92:	46bd      	mov	sp, r7
 8003d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d98:	4770      	bx	lr
 8003d9a:	bf00      	nop
 8003d9c:	200002a4 	.word	0x200002a4
 8003da0:	20000300 	.word	0x20000300

08003da4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003da4:	b480      	push	{r7}
 8003da6:	b085      	sub	sp, #20
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	60f8      	str	r0, [r7, #12]
 8003dac:	60b9      	str	r1, [r7, #8]
 8003dae:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	4a07      	ldr	r2, [pc, #28]	; (8003dd0 <vApplicationGetTimerTaskMemory+0x2c>)
 8003db4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	4a06      	ldr	r2, [pc, #24]	; (8003dd4 <vApplicationGetTimerTaskMemory+0x30>)
 8003dba:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003dc2:	601a      	str	r2, [r3, #0]
}
 8003dc4:	bf00      	nop
 8003dc6:	3714      	adds	r7, #20
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dce:	4770      	bx	lr
 8003dd0:	20000500 	.word	0x20000500
 8003dd4:	2000055c 	.word	0x2000055c

08003dd8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b083      	sub	sp, #12
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	f103 0208 	add.w	r2, r3, #8
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003df0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	f103 0208 	add.w	r2, r3, #8
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	f103 0208 	add.w	r2, r3, #8
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003e0c:	bf00      	nop
 8003e0e:	370c      	adds	r7, #12
 8003e10:	46bd      	mov	sp, r7
 8003e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e16:	4770      	bx	lr

08003e18 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b083      	sub	sp, #12
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2200      	movs	r2, #0
 8003e24:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003e26:	bf00      	nop
 8003e28:	370c      	adds	r7, #12
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e30:	4770      	bx	lr

08003e32 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003e32:	b480      	push	{r7}
 8003e34:	b085      	sub	sp, #20
 8003e36:	af00      	add	r7, sp, #0
 8003e38:	6078      	str	r0, [r7, #4]
 8003e3a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	68fa      	ldr	r2, [r7, #12]
 8003e46:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	689a      	ldr	r2, [r3, #8]
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	683a      	ldr	r2, [r7, #0]
 8003e56:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	683a      	ldr	r2, [r7, #0]
 8003e5c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	687a      	ldr	r2, [r7, #4]
 8003e62:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	1c5a      	adds	r2, r3, #1
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	601a      	str	r2, [r3, #0]
}
 8003e6e:	bf00      	nop
 8003e70:	3714      	adds	r7, #20
 8003e72:	46bd      	mov	sp, r7
 8003e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e78:	4770      	bx	lr

08003e7a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003e7a:	b480      	push	{r7}
 8003e7c:	b085      	sub	sp, #20
 8003e7e:	af00      	add	r7, sp, #0
 8003e80:	6078      	str	r0, [r7, #4]
 8003e82:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e90:	d103      	bne.n	8003e9a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	691b      	ldr	r3, [r3, #16]
 8003e96:	60fb      	str	r3, [r7, #12]
 8003e98:	e00c      	b.n	8003eb4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	3308      	adds	r3, #8
 8003e9e:	60fb      	str	r3, [r7, #12]
 8003ea0:	e002      	b.n	8003ea8 <vListInsert+0x2e>
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	60fb      	str	r3, [r7, #12]
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	68ba      	ldr	r2, [r7, #8]
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	d2f6      	bcs.n	8003ea2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	685a      	ldr	r2, [r3, #4]
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	683a      	ldr	r2, [r7, #0]
 8003ec2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	68fa      	ldr	r2, [r7, #12]
 8003ec8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	683a      	ldr	r2, [r7, #0]
 8003ece:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	687a      	ldr	r2, [r7, #4]
 8003ed4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	1c5a      	adds	r2, r3, #1
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	601a      	str	r2, [r3, #0]
}
 8003ee0:	bf00      	nop
 8003ee2:	3714      	adds	r7, #20
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eea:	4770      	bx	lr

08003eec <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003eec:	b480      	push	{r7}
 8003eee:	b085      	sub	sp, #20
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	691b      	ldr	r3, [r3, #16]
 8003ef8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	687a      	ldr	r2, [r7, #4]
 8003f00:	6892      	ldr	r2, [r2, #8]
 8003f02:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	687a      	ldr	r2, [r7, #4]
 8003f0a:	6852      	ldr	r2, [r2, #4]
 8003f0c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	687a      	ldr	r2, [r7, #4]
 8003f14:	429a      	cmp	r2, r3
 8003f16:	d103      	bne.n	8003f20 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	689a      	ldr	r2, [r3, #8]
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2200      	movs	r2, #0
 8003f24:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	1e5a      	subs	r2, r3, #1
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	3714      	adds	r7, #20
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3e:	4770      	bx	lr

08003f40 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b084      	sub	sp, #16
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
 8003f48:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d10a      	bne.n	8003f6a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f58:	f383 8811 	msr	BASEPRI, r3
 8003f5c:	f3bf 8f6f 	isb	sy
 8003f60:	f3bf 8f4f 	dsb	sy
 8003f64:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003f66:	bf00      	nop
 8003f68:	e7fe      	b.n	8003f68 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003f6a:	f002 fb33 	bl	80065d4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681a      	ldr	r2, [r3, #0]
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f76:	68f9      	ldr	r1, [r7, #12]
 8003f78:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003f7a:	fb01 f303 	mul.w	r3, r1, r3
 8003f7e:	441a      	add	r2, r3
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2200      	movs	r2, #0
 8003f88:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681a      	ldr	r2, [r3, #0]
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681a      	ldr	r2, [r3, #0]
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f9a:	3b01      	subs	r3, #1
 8003f9c:	68f9      	ldr	r1, [r7, #12]
 8003f9e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003fa0:	fb01 f303 	mul.w	r3, r1, r3
 8003fa4:	441a      	add	r2, r3
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	22ff      	movs	r2, #255	; 0xff
 8003fae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	22ff      	movs	r2, #255	; 0xff
 8003fb6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d114      	bne.n	8003fea <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	691b      	ldr	r3, [r3, #16]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d01a      	beq.n	8003ffe <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	3310      	adds	r3, #16
 8003fcc:	4618      	mov	r0, r3
 8003fce:	f001 f9f9 	bl	80053c4 <xTaskRemoveFromEventList>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d012      	beq.n	8003ffe <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003fd8:	4b0c      	ldr	r3, [pc, #48]	; (800400c <xQueueGenericReset+0xcc>)
 8003fda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fde:	601a      	str	r2, [r3, #0]
 8003fe0:	f3bf 8f4f 	dsb	sy
 8003fe4:	f3bf 8f6f 	isb	sy
 8003fe8:	e009      	b.n	8003ffe <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	3310      	adds	r3, #16
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f7ff fef2 	bl	8003dd8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	3324      	adds	r3, #36	; 0x24
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	f7ff feed 	bl	8003dd8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003ffe:	f002 fb19 	bl	8006634 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004002:	2301      	movs	r3, #1
}
 8004004:	4618      	mov	r0, r3
 8004006:	3710      	adds	r7, #16
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}
 800400c:	e000ed04 	.word	0xe000ed04

08004010 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004010:	b580      	push	{r7, lr}
 8004012:	b08e      	sub	sp, #56	; 0x38
 8004014:	af02      	add	r7, sp, #8
 8004016:	60f8      	str	r0, [r7, #12]
 8004018:	60b9      	str	r1, [r7, #8]
 800401a:	607a      	str	r2, [r7, #4]
 800401c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d10a      	bne.n	800403a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004024:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004028:	f383 8811 	msr	BASEPRI, r3
 800402c:	f3bf 8f6f 	isb	sy
 8004030:	f3bf 8f4f 	dsb	sy
 8004034:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004036:	bf00      	nop
 8004038:	e7fe      	b.n	8004038 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d10a      	bne.n	8004056 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004044:	f383 8811 	msr	BASEPRI, r3
 8004048:	f3bf 8f6f 	isb	sy
 800404c:	f3bf 8f4f 	dsb	sy
 8004050:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004052:	bf00      	nop
 8004054:	e7fe      	b.n	8004054 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d002      	beq.n	8004062 <xQueueGenericCreateStatic+0x52>
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d001      	beq.n	8004066 <xQueueGenericCreateStatic+0x56>
 8004062:	2301      	movs	r3, #1
 8004064:	e000      	b.n	8004068 <xQueueGenericCreateStatic+0x58>
 8004066:	2300      	movs	r3, #0
 8004068:	2b00      	cmp	r3, #0
 800406a:	d10a      	bne.n	8004082 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800406c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004070:	f383 8811 	msr	BASEPRI, r3
 8004074:	f3bf 8f6f 	isb	sy
 8004078:	f3bf 8f4f 	dsb	sy
 800407c:	623b      	str	r3, [r7, #32]
}
 800407e:	bf00      	nop
 8004080:	e7fe      	b.n	8004080 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d102      	bne.n	800408e <xQueueGenericCreateStatic+0x7e>
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d101      	bne.n	8004092 <xQueueGenericCreateStatic+0x82>
 800408e:	2301      	movs	r3, #1
 8004090:	e000      	b.n	8004094 <xQueueGenericCreateStatic+0x84>
 8004092:	2300      	movs	r3, #0
 8004094:	2b00      	cmp	r3, #0
 8004096:	d10a      	bne.n	80040ae <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004098:	f04f 0350 	mov.w	r3, #80	; 0x50
 800409c:	f383 8811 	msr	BASEPRI, r3
 80040a0:	f3bf 8f6f 	isb	sy
 80040a4:	f3bf 8f4f 	dsb	sy
 80040a8:	61fb      	str	r3, [r7, #28]
}
 80040aa:	bf00      	nop
 80040ac:	e7fe      	b.n	80040ac <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80040ae:	2350      	movs	r3, #80	; 0x50
 80040b0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	2b50      	cmp	r3, #80	; 0x50
 80040b6:	d00a      	beq.n	80040ce <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80040b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040bc:	f383 8811 	msr	BASEPRI, r3
 80040c0:	f3bf 8f6f 	isb	sy
 80040c4:	f3bf 8f4f 	dsb	sy
 80040c8:	61bb      	str	r3, [r7, #24]
}
 80040ca:	bf00      	nop
 80040cc:	e7fe      	b.n	80040cc <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80040ce:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80040d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d00d      	beq.n	80040f6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80040da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040dc:	2201      	movs	r2, #1
 80040de:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80040e2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80040e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040e8:	9300      	str	r3, [sp, #0]
 80040ea:	4613      	mov	r3, r2
 80040ec:	687a      	ldr	r2, [r7, #4]
 80040ee:	68b9      	ldr	r1, [r7, #8]
 80040f0:	68f8      	ldr	r0, [r7, #12]
 80040f2:	f000 f83f 	bl	8004174 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80040f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80040f8:	4618      	mov	r0, r3
 80040fa:	3730      	adds	r7, #48	; 0x30
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd80      	pop	{r7, pc}

08004100 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004100:	b580      	push	{r7, lr}
 8004102:	b08a      	sub	sp, #40	; 0x28
 8004104:	af02      	add	r7, sp, #8
 8004106:	60f8      	str	r0, [r7, #12]
 8004108:	60b9      	str	r1, [r7, #8]
 800410a:	4613      	mov	r3, r2
 800410c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d10a      	bne.n	800412a <xQueueGenericCreate+0x2a>
	__asm volatile
 8004114:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004118:	f383 8811 	msr	BASEPRI, r3
 800411c:	f3bf 8f6f 	isb	sy
 8004120:	f3bf 8f4f 	dsb	sy
 8004124:	613b      	str	r3, [r7, #16]
}
 8004126:	bf00      	nop
 8004128:	e7fe      	b.n	8004128 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	68ba      	ldr	r2, [r7, #8]
 800412e:	fb02 f303 	mul.w	r3, r2, r3
 8004132:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004134:	69fb      	ldr	r3, [r7, #28]
 8004136:	3350      	adds	r3, #80	; 0x50
 8004138:	4618      	mov	r0, r3
 800413a:	f002 fb6d 	bl	8006818 <pvPortMalloc>
 800413e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004140:	69bb      	ldr	r3, [r7, #24]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d011      	beq.n	800416a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004146:	69bb      	ldr	r3, [r7, #24]
 8004148:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	3350      	adds	r3, #80	; 0x50
 800414e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004150:	69bb      	ldr	r3, [r7, #24]
 8004152:	2200      	movs	r2, #0
 8004154:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004158:	79fa      	ldrb	r2, [r7, #7]
 800415a:	69bb      	ldr	r3, [r7, #24]
 800415c:	9300      	str	r3, [sp, #0]
 800415e:	4613      	mov	r3, r2
 8004160:	697a      	ldr	r2, [r7, #20]
 8004162:	68b9      	ldr	r1, [r7, #8]
 8004164:	68f8      	ldr	r0, [r7, #12]
 8004166:	f000 f805 	bl	8004174 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800416a:	69bb      	ldr	r3, [r7, #24]
	}
 800416c:	4618      	mov	r0, r3
 800416e:	3720      	adds	r7, #32
 8004170:	46bd      	mov	sp, r7
 8004172:	bd80      	pop	{r7, pc}

08004174 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b084      	sub	sp, #16
 8004178:	af00      	add	r7, sp, #0
 800417a:	60f8      	str	r0, [r7, #12]
 800417c:	60b9      	str	r1, [r7, #8]
 800417e:	607a      	str	r2, [r7, #4]
 8004180:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004182:	68bb      	ldr	r3, [r7, #8]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d103      	bne.n	8004190 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004188:	69bb      	ldr	r3, [r7, #24]
 800418a:	69ba      	ldr	r2, [r7, #24]
 800418c:	601a      	str	r2, [r3, #0]
 800418e:	e002      	b.n	8004196 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004190:	69bb      	ldr	r3, [r7, #24]
 8004192:	687a      	ldr	r2, [r7, #4]
 8004194:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004196:	69bb      	ldr	r3, [r7, #24]
 8004198:	68fa      	ldr	r2, [r7, #12]
 800419a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800419c:	69bb      	ldr	r3, [r7, #24]
 800419e:	68ba      	ldr	r2, [r7, #8]
 80041a0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80041a2:	2101      	movs	r1, #1
 80041a4:	69b8      	ldr	r0, [r7, #24]
 80041a6:	f7ff fecb 	bl	8003f40 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80041aa:	69bb      	ldr	r3, [r7, #24]
 80041ac:	78fa      	ldrb	r2, [r7, #3]
 80041ae:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80041b2:	bf00      	nop
 80041b4:	3710      	adds	r7, #16
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}
	...

080041bc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b08e      	sub	sp, #56	; 0x38
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	60f8      	str	r0, [r7, #12]
 80041c4:	60b9      	str	r1, [r7, #8]
 80041c6:	607a      	str	r2, [r7, #4]
 80041c8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80041ca:	2300      	movs	r3, #0
 80041cc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80041d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d10a      	bne.n	80041ee <xQueueGenericSend+0x32>
	__asm volatile
 80041d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041dc:	f383 8811 	msr	BASEPRI, r3
 80041e0:	f3bf 8f6f 	isb	sy
 80041e4:	f3bf 8f4f 	dsb	sy
 80041e8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80041ea:	bf00      	nop
 80041ec:	e7fe      	b.n	80041ec <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d103      	bne.n	80041fc <xQueueGenericSend+0x40>
 80041f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d101      	bne.n	8004200 <xQueueGenericSend+0x44>
 80041fc:	2301      	movs	r3, #1
 80041fe:	e000      	b.n	8004202 <xQueueGenericSend+0x46>
 8004200:	2300      	movs	r3, #0
 8004202:	2b00      	cmp	r3, #0
 8004204:	d10a      	bne.n	800421c <xQueueGenericSend+0x60>
	__asm volatile
 8004206:	f04f 0350 	mov.w	r3, #80	; 0x50
 800420a:	f383 8811 	msr	BASEPRI, r3
 800420e:	f3bf 8f6f 	isb	sy
 8004212:	f3bf 8f4f 	dsb	sy
 8004216:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004218:	bf00      	nop
 800421a:	e7fe      	b.n	800421a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	2b02      	cmp	r3, #2
 8004220:	d103      	bne.n	800422a <xQueueGenericSend+0x6e>
 8004222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004224:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004226:	2b01      	cmp	r3, #1
 8004228:	d101      	bne.n	800422e <xQueueGenericSend+0x72>
 800422a:	2301      	movs	r3, #1
 800422c:	e000      	b.n	8004230 <xQueueGenericSend+0x74>
 800422e:	2300      	movs	r3, #0
 8004230:	2b00      	cmp	r3, #0
 8004232:	d10a      	bne.n	800424a <xQueueGenericSend+0x8e>
	__asm volatile
 8004234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004238:	f383 8811 	msr	BASEPRI, r3
 800423c:	f3bf 8f6f 	isb	sy
 8004240:	f3bf 8f4f 	dsb	sy
 8004244:	623b      	str	r3, [r7, #32]
}
 8004246:	bf00      	nop
 8004248:	e7fe      	b.n	8004248 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800424a:	f001 fa79 	bl	8005740 <xTaskGetSchedulerState>
 800424e:	4603      	mov	r3, r0
 8004250:	2b00      	cmp	r3, #0
 8004252:	d102      	bne.n	800425a <xQueueGenericSend+0x9e>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d101      	bne.n	800425e <xQueueGenericSend+0xa2>
 800425a:	2301      	movs	r3, #1
 800425c:	e000      	b.n	8004260 <xQueueGenericSend+0xa4>
 800425e:	2300      	movs	r3, #0
 8004260:	2b00      	cmp	r3, #0
 8004262:	d10a      	bne.n	800427a <xQueueGenericSend+0xbe>
	__asm volatile
 8004264:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004268:	f383 8811 	msr	BASEPRI, r3
 800426c:	f3bf 8f6f 	isb	sy
 8004270:	f3bf 8f4f 	dsb	sy
 8004274:	61fb      	str	r3, [r7, #28]
}
 8004276:	bf00      	nop
 8004278:	e7fe      	b.n	8004278 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800427a:	f002 f9ab 	bl	80065d4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800427e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004280:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004284:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004286:	429a      	cmp	r2, r3
 8004288:	d302      	bcc.n	8004290 <xQueueGenericSend+0xd4>
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	2b02      	cmp	r3, #2
 800428e:	d129      	bne.n	80042e4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004290:	683a      	ldr	r2, [r7, #0]
 8004292:	68b9      	ldr	r1, [r7, #8]
 8004294:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004296:	f000 fac7 	bl	8004828 <prvCopyDataToQueue>
 800429a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800429c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800429e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d010      	beq.n	80042c6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80042a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042a6:	3324      	adds	r3, #36	; 0x24
 80042a8:	4618      	mov	r0, r3
 80042aa:	f001 f88b 	bl	80053c4 <xTaskRemoveFromEventList>
 80042ae:	4603      	mov	r3, r0
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d013      	beq.n	80042dc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80042b4:	4b3f      	ldr	r3, [pc, #252]	; (80043b4 <xQueueGenericSend+0x1f8>)
 80042b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042ba:	601a      	str	r2, [r3, #0]
 80042bc:	f3bf 8f4f 	dsb	sy
 80042c0:	f3bf 8f6f 	isb	sy
 80042c4:	e00a      	b.n	80042dc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80042c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d007      	beq.n	80042dc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80042cc:	4b39      	ldr	r3, [pc, #228]	; (80043b4 <xQueueGenericSend+0x1f8>)
 80042ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042d2:	601a      	str	r2, [r3, #0]
 80042d4:	f3bf 8f4f 	dsb	sy
 80042d8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80042dc:	f002 f9aa 	bl	8006634 <vPortExitCritical>
				return pdPASS;
 80042e0:	2301      	movs	r3, #1
 80042e2:	e063      	b.n	80043ac <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d103      	bne.n	80042f2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80042ea:	f002 f9a3 	bl	8006634 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80042ee:	2300      	movs	r3, #0
 80042f0:	e05c      	b.n	80043ac <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80042f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d106      	bne.n	8004306 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80042f8:	f107 0314 	add.w	r3, r7, #20
 80042fc:	4618      	mov	r0, r3
 80042fe:	f001 f8c5 	bl	800548c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004302:	2301      	movs	r3, #1
 8004304:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004306:	f002 f995 	bl	8006634 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800430a:	f000 fe37 	bl	8004f7c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800430e:	f002 f961 	bl	80065d4 <vPortEnterCritical>
 8004312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004314:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004318:	b25b      	sxtb	r3, r3
 800431a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800431e:	d103      	bne.n	8004328 <xQueueGenericSend+0x16c>
 8004320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004322:	2200      	movs	r2, #0
 8004324:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800432a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800432e:	b25b      	sxtb	r3, r3
 8004330:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004334:	d103      	bne.n	800433e <xQueueGenericSend+0x182>
 8004336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004338:	2200      	movs	r2, #0
 800433a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800433e:	f002 f979 	bl	8006634 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004342:	1d3a      	adds	r2, r7, #4
 8004344:	f107 0314 	add.w	r3, r7, #20
 8004348:	4611      	mov	r1, r2
 800434a:	4618      	mov	r0, r3
 800434c:	f001 f8b4 	bl	80054b8 <xTaskCheckForTimeOut>
 8004350:	4603      	mov	r3, r0
 8004352:	2b00      	cmp	r3, #0
 8004354:	d124      	bne.n	80043a0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004356:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004358:	f000 fb5e 	bl	8004a18 <prvIsQueueFull>
 800435c:	4603      	mov	r3, r0
 800435e:	2b00      	cmp	r3, #0
 8004360:	d018      	beq.n	8004394 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004364:	3310      	adds	r3, #16
 8004366:	687a      	ldr	r2, [r7, #4]
 8004368:	4611      	mov	r1, r2
 800436a:	4618      	mov	r0, r3
 800436c:	f000 ffda 	bl	8005324 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004370:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004372:	f000 fae9 	bl	8004948 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004376:	f000 fe0f 	bl	8004f98 <xTaskResumeAll>
 800437a:	4603      	mov	r3, r0
 800437c:	2b00      	cmp	r3, #0
 800437e:	f47f af7c 	bne.w	800427a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004382:	4b0c      	ldr	r3, [pc, #48]	; (80043b4 <xQueueGenericSend+0x1f8>)
 8004384:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004388:	601a      	str	r2, [r3, #0]
 800438a:	f3bf 8f4f 	dsb	sy
 800438e:	f3bf 8f6f 	isb	sy
 8004392:	e772      	b.n	800427a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004394:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004396:	f000 fad7 	bl	8004948 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800439a:	f000 fdfd 	bl	8004f98 <xTaskResumeAll>
 800439e:	e76c      	b.n	800427a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80043a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80043a2:	f000 fad1 	bl	8004948 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80043a6:	f000 fdf7 	bl	8004f98 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80043aa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80043ac:	4618      	mov	r0, r3
 80043ae:	3738      	adds	r7, #56	; 0x38
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bd80      	pop	{r7, pc}
 80043b4:	e000ed04 	.word	0xe000ed04

080043b8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b090      	sub	sp, #64	; 0x40
 80043bc:	af00      	add	r7, sp, #0
 80043be:	60f8      	str	r0, [r7, #12]
 80043c0:	60b9      	str	r1, [r7, #8]
 80043c2:	607a      	str	r2, [r7, #4]
 80043c4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80043ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d10a      	bne.n	80043e6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80043d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043d4:	f383 8811 	msr	BASEPRI, r3
 80043d8:	f3bf 8f6f 	isb	sy
 80043dc:	f3bf 8f4f 	dsb	sy
 80043e0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80043e2:	bf00      	nop
 80043e4:	e7fe      	b.n	80043e4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d103      	bne.n	80043f4 <xQueueGenericSendFromISR+0x3c>
 80043ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d101      	bne.n	80043f8 <xQueueGenericSendFromISR+0x40>
 80043f4:	2301      	movs	r3, #1
 80043f6:	e000      	b.n	80043fa <xQueueGenericSendFromISR+0x42>
 80043f8:	2300      	movs	r3, #0
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d10a      	bne.n	8004414 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80043fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004402:	f383 8811 	msr	BASEPRI, r3
 8004406:	f3bf 8f6f 	isb	sy
 800440a:	f3bf 8f4f 	dsb	sy
 800440e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004410:	bf00      	nop
 8004412:	e7fe      	b.n	8004412 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	2b02      	cmp	r3, #2
 8004418:	d103      	bne.n	8004422 <xQueueGenericSendFromISR+0x6a>
 800441a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800441c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800441e:	2b01      	cmp	r3, #1
 8004420:	d101      	bne.n	8004426 <xQueueGenericSendFromISR+0x6e>
 8004422:	2301      	movs	r3, #1
 8004424:	e000      	b.n	8004428 <xQueueGenericSendFromISR+0x70>
 8004426:	2300      	movs	r3, #0
 8004428:	2b00      	cmp	r3, #0
 800442a:	d10a      	bne.n	8004442 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800442c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004430:	f383 8811 	msr	BASEPRI, r3
 8004434:	f3bf 8f6f 	isb	sy
 8004438:	f3bf 8f4f 	dsb	sy
 800443c:	623b      	str	r3, [r7, #32]
}
 800443e:	bf00      	nop
 8004440:	e7fe      	b.n	8004440 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004442:	f002 f9a9 	bl	8006798 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004446:	f3ef 8211 	mrs	r2, BASEPRI
 800444a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800444e:	f383 8811 	msr	BASEPRI, r3
 8004452:	f3bf 8f6f 	isb	sy
 8004456:	f3bf 8f4f 	dsb	sy
 800445a:	61fa      	str	r2, [r7, #28]
 800445c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800445e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004460:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004464:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004468:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800446a:	429a      	cmp	r2, r3
 800446c:	d302      	bcc.n	8004474 <xQueueGenericSendFromISR+0xbc>
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	2b02      	cmp	r3, #2
 8004472:	d12f      	bne.n	80044d4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004476:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800447a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800447e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004480:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004482:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004484:	683a      	ldr	r2, [r7, #0]
 8004486:	68b9      	ldr	r1, [r7, #8]
 8004488:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800448a:	f000 f9cd 	bl	8004828 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800448e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004492:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004496:	d112      	bne.n	80044be <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800449a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800449c:	2b00      	cmp	r3, #0
 800449e:	d016      	beq.n	80044ce <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80044a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044a2:	3324      	adds	r3, #36	; 0x24
 80044a4:	4618      	mov	r0, r3
 80044a6:	f000 ff8d 	bl	80053c4 <xTaskRemoveFromEventList>
 80044aa:	4603      	mov	r3, r0
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d00e      	beq.n	80044ce <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d00b      	beq.n	80044ce <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2201      	movs	r2, #1
 80044ba:	601a      	str	r2, [r3, #0]
 80044bc:	e007      	b.n	80044ce <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80044be:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80044c2:	3301      	adds	r3, #1
 80044c4:	b2db      	uxtb	r3, r3
 80044c6:	b25a      	sxtb	r2, r3
 80044c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80044ce:	2301      	movs	r3, #1
 80044d0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80044d2:	e001      	b.n	80044d8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80044d4:	2300      	movs	r3, #0
 80044d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80044d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044da:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80044e2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80044e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80044e6:	4618      	mov	r0, r3
 80044e8:	3740      	adds	r7, #64	; 0x40
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bd80      	pop	{r7, pc}
	...

080044f0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b08c      	sub	sp, #48	; 0x30
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	60f8      	str	r0, [r7, #12]
 80044f8:	60b9      	str	r1, [r7, #8]
 80044fa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80044fc:	2300      	movs	r3, #0
 80044fe:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004506:	2b00      	cmp	r3, #0
 8004508:	d10a      	bne.n	8004520 <xQueueReceive+0x30>
	__asm volatile
 800450a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800450e:	f383 8811 	msr	BASEPRI, r3
 8004512:	f3bf 8f6f 	isb	sy
 8004516:	f3bf 8f4f 	dsb	sy
 800451a:	623b      	str	r3, [r7, #32]
}
 800451c:	bf00      	nop
 800451e:	e7fe      	b.n	800451e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d103      	bne.n	800452e <xQueueReceive+0x3e>
 8004526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800452a:	2b00      	cmp	r3, #0
 800452c:	d101      	bne.n	8004532 <xQueueReceive+0x42>
 800452e:	2301      	movs	r3, #1
 8004530:	e000      	b.n	8004534 <xQueueReceive+0x44>
 8004532:	2300      	movs	r3, #0
 8004534:	2b00      	cmp	r3, #0
 8004536:	d10a      	bne.n	800454e <xQueueReceive+0x5e>
	__asm volatile
 8004538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800453c:	f383 8811 	msr	BASEPRI, r3
 8004540:	f3bf 8f6f 	isb	sy
 8004544:	f3bf 8f4f 	dsb	sy
 8004548:	61fb      	str	r3, [r7, #28]
}
 800454a:	bf00      	nop
 800454c:	e7fe      	b.n	800454c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800454e:	f001 f8f7 	bl	8005740 <xTaskGetSchedulerState>
 8004552:	4603      	mov	r3, r0
 8004554:	2b00      	cmp	r3, #0
 8004556:	d102      	bne.n	800455e <xQueueReceive+0x6e>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d101      	bne.n	8004562 <xQueueReceive+0x72>
 800455e:	2301      	movs	r3, #1
 8004560:	e000      	b.n	8004564 <xQueueReceive+0x74>
 8004562:	2300      	movs	r3, #0
 8004564:	2b00      	cmp	r3, #0
 8004566:	d10a      	bne.n	800457e <xQueueReceive+0x8e>
	__asm volatile
 8004568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800456c:	f383 8811 	msr	BASEPRI, r3
 8004570:	f3bf 8f6f 	isb	sy
 8004574:	f3bf 8f4f 	dsb	sy
 8004578:	61bb      	str	r3, [r7, #24]
}
 800457a:	bf00      	nop
 800457c:	e7fe      	b.n	800457c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800457e:	f002 f829 	bl	80065d4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004586:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800458a:	2b00      	cmp	r3, #0
 800458c:	d01f      	beq.n	80045ce <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800458e:	68b9      	ldr	r1, [r7, #8]
 8004590:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004592:	f000 f9b3 	bl	80048fc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004598:	1e5a      	subs	r2, r3, #1
 800459a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800459c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800459e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045a0:	691b      	ldr	r3, [r3, #16]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d00f      	beq.n	80045c6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80045a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045a8:	3310      	adds	r3, #16
 80045aa:	4618      	mov	r0, r3
 80045ac:	f000 ff0a 	bl	80053c4 <xTaskRemoveFromEventList>
 80045b0:	4603      	mov	r3, r0
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d007      	beq.n	80045c6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80045b6:	4b3d      	ldr	r3, [pc, #244]	; (80046ac <xQueueReceive+0x1bc>)
 80045b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045bc:	601a      	str	r2, [r3, #0]
 80045be:	f3bf 8f4f 	dsb	sy
 80045c2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80045c6:	f002 f835 	bl	8006634 <vPortExitCritical>
				return pdPASS;
 80045ca:	2301      	movs	r3, #1
 80045cc:	e069      	b.n	80046a2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d103      	bne.n	80045dc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80045d4:	f002 f82e 	bl	8006634 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80045d8:	2300      	movs	r3, #0
 80045da:	e062      	b.n	80046a2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80045dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d106      	bne.n	80045f0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80045e2:	f107 0310 	add.w	r3, r7, #16
 80045e6:	4618      	mov	r0, r3
 80045e8:	f000 ff50 	bl	800548c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80045ec:	2301      	movs	r3, #1
 80045ee:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80045f0:	f002 f820 	bl	8006634 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80045f4:	f000 fcc2 	bl	8004f7c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80045f8:	f001 ffec 	bl	80065d4 <vPortEnterCritical>
 80045fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045fe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004602:	b25b      	sxtb	r3, r3
 8004604:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004608:	d103      	bne.n	8004612 <xQueueReceive+0x122>
 800460a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800460c:	2200      	movs	r2, #0
 800460e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004614:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004618:	b25b      	sxtb	r3, r3
 800461a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800461e:	d103      	bne.n	8004628 <xQueueReceive+0x138>
 8004620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004622:	2200      	movs	r2, #0
 8004624:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004628:	f002 f804 	bl	8006634 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800462c:	1d3a      	adds	r2, r7, #4
 800462e:	f107 0310 	add.w	r3, r7, #16
 8004632:	4611      	mov	r1, r2
 8004634:	4618      	mov	r0, r3
 8004636:	f000 ff3f 	bl	80054b8 <xTaskCheckForTimeOut>
 800463a:	4603      	mov	r3, r0
 800463c:	2b00      	cmp	r3, #0
 800463e:	d123      	bne.n	8004688 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004640:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004642:	f000 f9d3 	bl	80049ec <prvIsQueueEmpty>
 8004646:	4603      	mov	r3, r0
 8004648:	2b00      	cmp	r3, #0
 800464a:	d017      	beq.n	800467c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800464c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800464e:	3324      	adds	r3, #36	; 0x24
 8004650:	687a      	ldr	r2, [r7, #4]
 8004652:	4611      	mov	r1, r2
 8004654:	4618      	mov	r0, r3
 8004656:	f000 fe65 	bl	8005324 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800465a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800465c:	f000 f974 	bl	8004948 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004660:	f000 fc9a 	bl	8004f98 <xTaskResumeAll>
 8004664:	4603      	mov	r3, r0
 8004666:	2b00      	cmp	r3, #0
 8004668:	d189      	bne.n	800457e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800466a:	4b10      	ldr	r3, [pc, #64]	; (80046ac <xQueueReceive+0x1bc>)
 800466c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004670:	601a      	str	r2, [r3, #0]
 8004672:	f3bf 8f4f 	dsb	sy
 8004676:	f3bf 8f6f 	isb	sy
 800467a:	e780      	b.n	800457e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800467c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800467e:	f000 f963 	bl	8004948 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004682:	f000 fc89 	bl	8004f98 <xTaskResumeAll>
 8004686:	e77a      	b.n	800457e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004688:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800468a:	f000 f95d 	bl	8004948 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800468e:	f000 fc83 	bl	8004f98 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004692:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004694:	f000 f9aa 	bl	80049ec <prvIsQueueEmpty>
 8004698:	4603      	mov	r3, r0
 800469a:	2b00      	cmp	r3, #0
 800469c:	f43f af6f 	beq.w	800457e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80046a0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	3730      	adds	r7, #48	; 0x30
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}
 80046aa:	bf00      	nop
 80046ac:	e000ed04 	.word	0xe000ed04

080046b0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b08e      	sub	sp, #56	; 0x38
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	60f8      	str	r0, [r7, #12]
 80046b8:	60b9      	str	r1, [r7, #8]
 80046ba:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80046c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d10a      	bne.n	80046dc <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80046c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046ca:	f383 8811 	msr	BASEPRI, r3
 80046ce:	f3bf 8f6f 	isb	sy
 80046d2:	f3bf 8f4f 	dsb	sy
 80046d6:	623b      	str	r3, [r7, #32]
}
 80046d8:	bf00      	nop
 80046da:	e7fe      	b.n	80046da <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d103      	bne.n	80046ea <xQueueReceiveFromISR+0x3a>
 80046e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d101      	bne.n	80046ee <xQueueReceiveFromISR+0x3e>
 80046ea:	2301      	movs	r3, #1
 80046ec:	e000      	b.n	80046f0 <xQueueReceiveFromISR+0x40>
 80046ee:	2300      	movs	r3, #0
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d10a      	bne.n	800470a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80046f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046f8:	f383 8811 	msr	BASEPRI, r3
 80046fc:	f3bf 8f6f 	isb	sy
 8004700:	f3bf 8f4f 	dsb	sy
 8004704:	61fb      	str	r3, [r7, #28]
}
 8004706:	bf00      	nop
 8004708:	e7fe      	b.n	8004708 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800470a:	f002 f845 	bl	8006798 <vPortValidateInterruptPriority>
	__asm volatile
 800470e:	f3ef 8211 	mrs	r2, BASEPRI
 8004712:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004716:	f383 8811 	msr	BASEPRI, r3
 800471a:	f3bf 8f6f 	isb	sy
 800471e:	f3bf 8f4f 	dsb	sy
 8004722:	61ba      	str	r2, [r7, #24]
 8004724:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8004726:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004728:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800472a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800472c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800472e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004732:	2b00      	cmp	r3, #0
 8004734:	d02f      	beq.n	8004796 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8004736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004738:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800473c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004740:	68b9      	ldr	r1, [r7, #8]
 8004742:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004744:	f000 f8da 	bl	80048fc <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800474a:	1e5a      	subs	r2, r3, #1
 800474c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800474e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8004750:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004754:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004758:	d112      	bne.n	8004780 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800475a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800475c:	691b      	ldr	r3, [r3, #16]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d016      	beq.n	8004790 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004764:	3310      	adds	r3, #16
 8004766:	4618      	mov	r0, r3
 8004768:	f000 fe2c 	bl	80053c4 <xTaskRemoveFromEventList>
 800476c:	4603      	mov	r3, r0
 800476e:	2b00      	cmp	r3, #0
 8004770:	d00e      	beq.n	8004790 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d00b      	beq.n	8004790 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2201      	movs	r2, #1
 800477c:	601a      	str	r2, [r3, #0]
 800477e:	e007      	b.n	8004790 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004780:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004784:	3301      	adds	r3, #1
 8004786:	b2db      	uxtb	r3, r3
 8004788:	b25a      	sxtb	r2, r3
 800478a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800478c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8004790:	2301      	movs	r3, #1
 8004792:	637b      	str	r3, [r7, #52]	; 0x34
 8004794:	e001      	b.n	800479a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8004796:	2300      	movs	r3, #0
 8004798:	637b      	str	r3, [r7, #52]	; 0x34
 800479a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800479c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800479e:	693b      	ldr	r3, [r7, #16]
 80047a0:	f383 8811 	msr	BASEPRI, r3
}
 80047a4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80047a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80047a8:	4618      	mov	r0, r3
 80047aa:	3738      	adds	r7, #56	; 0x38
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}

080047b0 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b084      	sub	sp, #16
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d10a      	bne.n	80047d4 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 80047be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047c2:	f383 8811 	msr	BASEPRI, r3
 80047c6:	f3bf 8f6f 	isb	sy
 80047ca:	f3bf 8f4f 	dsb	sy
 80047ce:	60bb      	str	r3, [r7, #8]
}
 80047d0:	bf00      	nop
 80047d2:	e7fe      	b.n	80047d2 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 80047d4:	f001 fefe 	bl	80065d4 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047dc:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 80047de:	f001 ff29 	bl	8006634 <vPortExitCritical>

	return uxReturn;
 80047e2:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80047e4:	4618      	mov	r0, r3
 80047e6:	3710      	adds	r7, #16
 80047e8:	46bd      	mov	sp, r7
 80047ea:	bd80      	pop	{r7, pc}

080047ec <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 80047ec:	b480      	push	{r7}
 80047ee:	b087      	sub	sp, #28
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d10a      	bne.n	8004814 <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 80047fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004802:	f383 8811 	msr	BASEPRI, r3
 8004806:	f3bf 8f6f 	isb	sy
 800480a:	f3bf 8f4f 	dsb	sy
 800480e:	60fb      	str	r3, [r7, #12]
}
 8004810:	bf00      	nop
 8004812:	e7fe      	b.n	8004812 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004818:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800481a:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800481c:	4618      	mov	r0, r3
 800481e:	371c      	adds	r7, #28
 8004820:	46bd      	mov	sp, r7
 8004822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004826:	4770      	bx	lr

08004828 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b086      	sub	sp, #24
 800482c:	af00      	add	r7, sp, #0
 800482e:	60f8      	str	r0, [r7, #12]
 8004830:	60b9      	str	r1, [r7, #8]
 8004832:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004834:	2300      	movs	r3, #0
 8004836:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800483c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004842:	2b00      	cmp	r3, #0
 8004844:	d10d      	bne.n	8004862 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d14d      	bne.n	80048ea <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	4618      	mov	r0, r3
 8004854:	f000 ff92 	bl	800577c <xTaskPriorityDisinherit>
 8004858:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	2200      	movs	r2, #0
 800485e:	609a      	str	r2, [r3, #8]
 8004860:	e043      	b.n	80048ea <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d119      	bne.n	800489c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	6858      	ldr	r0, [r3, #4]
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004870:	461a      	mov	r2, r3
 8004872:	68b9      	ldr	r1, [r7, #8]
 8004874:	f002 f9fe 	bl	8006c74 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	685a      	ldr	r2, [r3, #4]
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004880:	441a      	add	r2, r3
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	685a      	ldr	r2, [r3, #4]
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	689b      	ldr	r3, [r3, #8]
 800488e:	429a      	cmp	r2, r3
 8004890:	d32b      	bcc.n	80048ea <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681a      	ldr	r2, [r3, #0]
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	605a      	str	r2, [r3, #4]
 800489a:	e026      	b.n	80048ea <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	68d8      	ldr	r0, [r3, #12]
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a4:	461a      	mov	r2, r3
 80048a6:	68b9      	ldr	r1, [r7, #8]
 80048a8:	f002 f9e4 	bl	8006c74 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	68da      	ldr	r2, [r3, #12]
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b4:	425b      	negs	r3, r3
 80048b6:	441a      	add	r2, r3
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	68da      	ldr	r2, [r3, #12]
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	429a      	cmp	r2, r3
 80048c6:	d207      	bcs.n	80048d8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	689a      	ldr	r2, [r3, #8]
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048d0:	425b      	negs	r3, r3
 80048d2:	441a      	add	r2, r3
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2b02      	cmp	r3, #2
 80048dc:	d105      	bne.n	80048ea <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d002      	beq.n	80048ea <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	3b01      	subs	r3, #1
 80048e8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80048ea:	693b      	ldr	r3, [r7, #16]
 80048ec:	1c5a      	adds	r2, r3, #1
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80048f2:	697b      	ldr	r3, [r7, #20]
}
 80048f4:	4618      	mov	r0, r3
 80048f6:	3718      	adds	r7, #24
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bd80      	pop	{r7, pc}

080048fc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b082      	sub	sp, #8
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
 8004904:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800490a:	2b00      	cmp	r3, #0
 800490c:	d018      	beq.n	8004940 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	68da      	ldr	r2, [r3, #12]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004916:	441a      	add	r2, r3
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	68da      	ldr	r2, [r3, #12]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	689b      	ldr	r3, [r3, #8]
 8004924:	429a      	cmp	r2, r3
 8004926:	d303      	bcc.n	8004930 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681a      	ldr	r2, [r3, #0]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	68d9      	ldr	r1, [r3, #12]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004938:	461a      	mov	r2, r3
 800493a:	6838      	ldr	r0, [r7, #0]
 800493c:	f002 f99a 	bl	8006c74 <memcpy>
	}
}
 8004940:	bf00      	nop
 8004942:	3708      	adds	r7, #8
 8004944:	46bd      	mov	sp, r7
 8004946:	bd80      	pop	{r7, pc}

08004948 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b084      	sub	sp, #16
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004950:	f001 fe40 	bl	80065d4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800495a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800495c:	e011      	b.n	8004982 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004962:	2b00      	cmp	r3, #0
 8004964:	d012      	beq.n	800498c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	3324      	adds	r3, #36	; 0x24
 800496a:	4618      	mov	r0, r3
 800496c:	f000 fd2a 	bl	80053c4 <xTaskRemoveFromEventList>
 8004970:	4603      	mov	r3, r0
 8004972:	2b00      	cmp	r3, #0
 8004974:	d001      	beq.n	800497a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004976:	f000 fe01 	bl	800557c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800497a:	7bfb      	ldrb	r3, [r7, #15]
 800497c:	3b01      	subs	r3, #1
 800497e:	b2db      	uxtb	r3, r3
 8004980:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004982:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004986:	2b00      	cmp	r3, #0
 8004988:	dce9      	bgt.n	800495e <prvUnlockQueue+0x16>
 800498a:	e000      	b.n	800498e <prvUnlockQueue+0x46>
					break;
 800498c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	22ff      	movs	r2, #255	; 0xff
 8004992:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004996:	f001 fe4d 	bl	8006634 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800499a:	f001 fe1b 	bl	80065d4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80049a4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80049a6:	e011      	b.n	80049cc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	691b      	ldr	r3, [r3, #16]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d012      	beq.n	80049d6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	3310      	adds	r3, #16
 80049b4:	4618      	mov	r0, r3
 80049b6:	f000 fd05 	bl	80053c4 <xTaskRemoveFromEventList>
 80049ba:	4603      	mov	r3, r0
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d001      	beq.n	80049c4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80049c0:	f000 fddc 	bl	800557c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80049c4:	7bbb      	ldrb	r3, [r7, #14]
 80049c6:	3b01      	subs	r3, #1
 80049c8:	b2db      	uxtb	r3, r3
 80049ca:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80049cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	dce9      	bgt.n	80049a8 <prvUnlockQueue+0x60>
 80049d4:	e000      	b.n	80049d8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80049d6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	22ff      	movs	r2, #255	; 0xff
 80049dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80049e0:	f001 fe28 	bl	8006634 <vPortExitCritical>
}
 80049e4:	bf00      	nop
 80049e6:	3710      	adds	r7, #16
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bd80      	pop	{r7, pc}

080049ec <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b084      	sub	sp, #16
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80049f4:	f001 fdee 	bl	80065d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d102      	bne.n	8004a06 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004a00:	2301      	movs	r3, #1
 8004a02:	60fb      	str	r3, [r7, #12]
 8004a04:	e001      	b.n	8004a0a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004a06:	2300      	movs	r3, #0
 8004a08:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004a0a:	f001 fe13 	bl	8006634 <vPortExitCritical>

	return xReturn;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	3710      	adds	r7, #16
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bd80      	pop	{r7, pc}

08004a18 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b084      	sub	sp, #16
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004a20:	f001 fdd8 	bl	80065d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a2c:	429a      	cmp	r2, r3
 8004a2e:	d102      	bne.n	8004a36 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004a30:	2301      	movs	r3, #1
 8004a32:	60fb      	str	r3, [r7, #12]
 8004a34:	e001      	b.n	8004a3a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004a36:	2300      	movs	r3, #0
 8004a38:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004a3a:	f001 fdfb 	bl	8006634 <vPortExitCritical>

	return xReturn;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	3710      	adds	r7, #16
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bd80      	pop	{r7, pc}

08004a48 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004a48:	b480      	push	{r7}
 8004a4a:	b085      	sub	sp, #20
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
 8004a50:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004a52:	2300      	movs	r3, #0
 8004a54:	60fb      	str	r3, [r7, #12]
 8004a56:	e014      	b.n	8004a82 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004a58:	4a0f      	ldr	r2, [pc, #60]	; (8004a98 <vQueueAddToRegistry+0x50>)
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d10b      	bne.n	8004a7c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004a64:	490c      	ldr	r1, [pc, #48]	; (8004a98 <vQueueAddToRegistry+0x50>)
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	683a      	ldr	r2, [r7, #0]
 8004a6a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004a6e:	4a0a      	ldr	r2, [pc, #40]	; (8004a98 <vQueueAddToRegistry+0x50>)
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	00db      	lsls	r3, r3, #3
 8004a74:	4413      	add	r3, r2
 8004a76:	687a      	ldr	r2, [r7, #4]
 8004a78:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004a7a:	e006      	b.n	8004a8a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	3301      	adds	r3, #1
 8004a80:	60fb      	str	r3, [r7, #12]
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	2b07      	cmp	r3, #7
 8004a86:	d9e7      	bls.n	8004a58 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004a88:	bf00      	nop
 8004a8a:	bf00      	nop
 8004a8c:	3714      	adds	r7, #20
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a94:	4770      	bx	lr
 8004a96:	bf00      	nop
 8004a98:	2000095c 	.word	0x2000095c

08004a9c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b086      	sub	sp, #24
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	60f8      	str	r0, [r7, #12]
 8004aa4:	60b9      	str	r1, [r7, #8]
 8004aa6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004aac:	f001 fd92 	bl	80065d4 <vPortEnterCritical>
 8004ab0:	697b      	ldr	r3, [r7, #20]
 8004ab2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004ab6:	b25b      	sxtb	r3, r3
 8004ab8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004abc:	d103      	bne.n	8004ac6 <vQueueWaitForMessageRestricted+0x2a>
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004acc:	b25b      	sxtb	r3, r3
 8004ace:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ad2:	d103      	bne.n	8004adc <vQueueWaitForMessageRestricted+0x40>
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004adc:	f001 fdaa 	bl	8006634 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d106      	bne.n	8004af6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	3324      	adds	r3, #36	; 0x24
 8004aec:	687a      	ldr	r2, [r7, #4]
 8004aee:	68b9      	ldr	r1, [r7, #8]
 8004af0:	4618      	mov	r0, r3
 8004af2:	f000 fc3b 	bl	800536c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004af6:	6978      	ldr	r0, [r7, #20]
 8004af8:	f7ff ff26 	bl	8004948 <prvUnlockQueue>
	}
 8004afc:	bf00      	nop
 8004afe:	3718      	adds	r7, #24
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bd80      	pop	{r7, pc}

08004b04 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b08e      	sub	sp, #56	; 0x38
 8004b08:	af04      	add	r7, sp, #16
 8004b0a:	60f8      	str	r0, [r7, #12]
 8004b0c:	60b9      	str	r1, [r7, #8]
 8004b0e:	607a      	str	r2, [r7, #4]
 8004b10:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004b12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d10a      	bne.n	8004b2e <xTaskCreateStatic+0x2a>
	__asm volatile
 8004b18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b1c:	f383 8811 	msr	BASEPRI, r3
 8004b20:	f3bf 8f6f 	isb	sy
 8004b24:	f3bf 8f4f 	dsb	sy
 8004b28:	623b      	str	r3, [r7, #32]
}
 8004b2a:	bf00      	nop
 8004b2c:	e7fe      	b.n	8004b2c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004b2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d10a      	bne.n	8004b4a <xTaskCreateStatic+0x46>
	__asm volatile
 8004b34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b38:	f383 8811 	msr	BASEPRI, r3
 8004b3c:	f3bf 8f6f 	isb	sy
 8004b40:	f3bf 8f4f 	dsb	sy
 8004b44:	61fb      	str	r3, [r7, #28]
}
 8004b46:	bf00      	nop
 8004b48:	e7fe      	b.n	8004b48 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004b4a:	235c      	movs	r3, #92	; 0x5c
 8004b4c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004b4e:	693b      	ldr	r3, [r7, #16]
 8004b50:	2b5c      	cmp	r3, #92	; 0x5c
 8004b52:	d00a      	beq.n	8004b6a <xTaskCreateStatic+0x66>
	__asm volatile
 8004b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b58:	f383 8811 	msr	BASEPRI, r3
 8004b5c:	f3bf 8f6f 	isb	sy
 8004b60:	f3bf 8f4f 	dsb	sy
 8004b64:	61bb      	str	r3, [r7, #24]
}
 8004b66:	bf00      	nop
 8004b68:	e7fe      	b.n	8004b68 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004b6a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004b6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d01e      	beq.n	8004bb0 <xTaskCreateStatic+0xac>
 8004b72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d01b      	beq.n	8004bb0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004b78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b7a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b7e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004b80:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b84:	2202      	movs	r2, #2
 8004b86:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	9303      	str	r3, [sp, #12]
 8004b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b90:	9302      	str	r3, [sp, #8]
 8004b92:	f107 0314 	add.w	r3, r7, #20
 8004b96:	9301      	str	r3, [sp, #4]
 8004b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b9a:	9300      	str	r3, [sp, #0]
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	687a      	ldr	r2, [r7, #4]
 8004ba0:	68b9      	ldr	r1, [r7, #8]
 8004ba2:	68f8      	ldr	r0, [r7, #12]
 8004ba4:	f000 f850 	bl	8004c48 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004ba8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004baa:	f000 f8dd 	bl	8004d68 <prvAddNewTaskToReadyList>
 8004bae:	e001      	b.n	8004bb4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004bb4:	697b      	ldr	r3, [r7, #20]
	}
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	3728      	adds	r7, #40	; 0x28
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bd80      	pop	{r7, pc}

08004bbe <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004bbe:	b580      	push	{r7, lr}
 8004bc0:	b08c      	sub	sp, #48	; 0x30
 8004bc2:	af04      	add	r7, sp, #16
 8004bc4:	60f8      	str	r0, [r7, #12]
 8004bc6:	60b9      	str	r1, [r7, #8]
 8004bc8:	603b      	str	r3, [r7, #0]
 8004bca:	4613      	mov	r3, r2
 8004bcc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004bce:	88fb      	ldrh	r3, [r7, #6]
 8004bd0:	009b      	lsls	r3, r3, #2
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	f001 fe20 	bl	8006818 <pvPortMalloc>
 8004bd8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d00e      	beq.n	8004bfe <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004be0:	205c      	movs	r0, #92	; 0x5c
 8004be2:	f001 fe19 	bl	8006818 <pvPortMalloc>
 8004be6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004be8:	69fb      	ldr	r3, [r7, #28]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d003      	beq.n	8004bf6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004bee:	69fb      	ldr	r3, [r7, #28]
 8004bf0:	697a      	ldr	r2, [r7, #20]
 8004bf2:	631a      	str	r2, [r3, #48]	; 0x30
 8004bf4:	e005      	b.n	8004c02 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004bf6:	6978      	ldr	r0, [r7, #20]
 8004bf8:	f001 feda 	bl	80069b0 <vPortFree>
 8004bfc:	e001      	b.n	8004c02 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004bfe:	2300      	movs	r3, #0
 8004c00:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004c02:	69fb      	ldr	r3, [r7, #28]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d017      	beq.n	8004c38 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004c08:	69fb      	ldr	r3, [r7, #28]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004c10:	88fa      	ldrh	r2, [r7, #6]
 8004c12:	2300      	movs	r3, #0
 8004c14:	9303      	str	r3, [sp, #12]
 8004c16:	69fb      	ldr	r3, [r7, #28]
 8004c18:	9302      	str	r3, [sp, #8]
 8004c1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c1c:	9301      	str	r3, [sp, #4]
 8004c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c20:	9300      	str	r3, [sp, #0]
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	68b9      	ldr	r1, [r7, #8]
 8004c26:	68f8      	ldr	r0, [r7, #12]
 8004c28:	f000 f80e 	bl	8004c48 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004c2c:	69f8      	ldr	r0, [r7, #28]
 8004c2e:	f000 f89b 	bl	8004d68 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004c32:	2301      	movs	r3, #1
 8004c34:	61bb      	str	r3, [r7, #24]
 8004c36:	e002      	b.n	8004c3e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004c38:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004c3c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004c3e:	69bb      	ldr	r3, [r7, #24]
	}
 8004c40:	4618      	mov	r0, r3
 8004c42:	3720      	adds	r7, #32
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd80      	pop	{r7, pc}

08004c48 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b088      	sub	sp, #32
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	60f8      	str	r0, [r7, #12]
 8004c50:	60b9      	str	r1, [r7, #8]
 8004c52:	607a      	str	r2, [r7, #4]
 8004c54:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c58:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	009b      	lsls	r3, r3, #2
 8004c5e:	461a      	mov	r2, r3
 8004c60:	21a5      	movs	r1, #165	; 0xa5
 8004c62:	f002 f815 	bl	8006c90 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004c70:	3b01      	subs	r3, #1
 8004c72:	009b      	lsls	r3, r3, #2
 8004c74:	4413      	add	r3, r2
 8004c76:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004c78:	69bb      	ldr	r3, [r7, #24]
 8004c7a:	f023 0307 	bic.w	r3, r3, #7
 8004c7e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004c80:	69bb      	ldr	r3, [r7, #24]
 8004c82:	f003 0307 	and.w	r3, r3, #7
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d00a      	beq.n	8004ca0 <prvInitialiseNewTask+0x58>
	__asm volatile
 8004c8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c8e:	f383 8811 	msr	BASEPRI, r3
 8004c92:	f3bf 8f6f 	isb	sy
 8004c96:	f3bf 8f4f 	dsb	sy
 8004c9a:	617b      	str	r3, [r7, #20]
}
 8004c9c:	bf00      	nop
 8004c9e:	e7fe      	b.n	8004c9e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d01f      	beq.n	8004ce6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	61fb      	str	r3, [r7, #28]
 8004caa:	e012      	b.n	8004cd2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004cac:	68ba      	ldr	r2, [r7, #8]
 8004cae:	69fb      	ldr	r3, [r7, #28]
 8004cb0:	4413      	add	r3, r2
 8004cb2:	7819      	ldrb	r1, [r3, #0]
 8004cb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004cb6:	69fb      	ldr	r3, [r7, #28]
 8004cb8:	4413      	add	r3, r2
 8004cba:	3334      	adds	r3, #52	; 0x34
 8004cbc:	460a      	mov	r2, r1
 8004cbe:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004cc0:	68ba      	ldr	r2, [r7, #8]
 8004cc2:	69fb      	ldr	r3, [r7, #28]
 8004cc4:	4413      	add	r3, r2
 8004cc6:	781b      	ldrb	r3, [r3, #0]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d006      	beq.n	8004cda <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004ccc:	69fb      	ldr	r3, [r7, #28]
 8004cce:	3301      	adds	r3, #1
 8004cd0:	61fb      	str	r3, [r7, #28]
 8004cd2:	69fb      	ldr	r3, [r7, #28]
 8004cd4:	2b0f      	cmp	r3, #15
 8004cd6:	d9e9      	bls.n	8004cac <prvInitialiseNewTask+0x64>
 8004cd8:	e000      	b.n	8004cdc <prvInitialiseNewTask+0x94>
			{
				break;
 8004cda:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cde:	2200      	movs	r2, #0
 8004ce0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004ce4:	e003      	b.n	8004cee <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ce8:	2200      	movs	r2, #0
 8004cea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cf0:	2b37      	cmp	r3, #55	; 0x37
 8004cf2:	d901      	bls.n	8004cf8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004cf4:	2337      	movs	r3, #55	; 0x37
 8004cf6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cfa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004cfc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d02:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d06:	2200      	movs	r2, #0
 8004d08:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d0c:	3304      	adds	r3, #4
 8004d0e:	4618      	mov	r0, r3
 8004d10:	f7ff f882 	bl	8003e18 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d16:	3318      	adds	r3, #24
 8004d18:	4618      	mov	r0, r3
 8004d1a:	f7ff f87d 	bl	8003e18 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d22:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d26:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d2c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d32:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d36:	2200      	movs	r2, #0
 8004d38:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004d42:	683a      	ldr	r2, [r7, #0]
 8004d44:	68f9      	ldr	r1, [r7, #12]
 8004d46:	69b8      	ldr	r0, [r7, #24]
 8004d48:	f001 fb16 	bl	8006378 <pxPortInitialiseStack>
 8004d4c:	4602      	mov	r2, r0
 8004d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d50:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004d52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d002      	beq.n	8004d5e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d5c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004d5e:	bf00      	nop
 8004d60:	3720      	adds	r7, #32
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}
	...

08004d68 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b082      	sub	sp, #8
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004d70:	f001 fc30 	bl	80065d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004d74:	4b2d      	ldr	r3, [pc, #180]	; (8004e2c <prvAddNewTaskToReadyList+0xc4>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	3301      	adds	r3, #1
 8004d7a:	4a2c      	ldr	r2, [pc, #176]	; (8004e2c <prvAddNewTaskToReadyList+0xc4>)
 8004d7c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004d7e:	4b2c      	ldr	r3, [pc, #176]	; (8004e30 <prvAddNewTaskToReadyList+0xc8>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d109      	bne.n	8004d9a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004d86:	4a2a      	ldr	r2, [pc, #168]	; (8004e30 <prvAddNewTaskToReadyList+0xc8>)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004d8c:	4b27      	ldr	r3, [pc, #156]	; (8004e2c <prvAddNewTaskToReadyList+0xc4>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	2b01      	cmp	r3, #1
 8004d92:	d110      	bne.n	8004db6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004d94:	f000 fc16 	bl	80055c4 <prvInitialiseTaskLists>
 8004d98:	e00d      	b.n	8004db6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004d9a:	4b26      	ldr	r3, [pc, #152]	; (8004e34 <prvAddNewTaskToReadyList+0xcc>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d109      	bne.n	8004db6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004da2:	4b23      	ldr	r3, [pc, #140]	; (8004e30 <prvAddNewTaskToReadyList+0xc8>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dac:	429a      	cmp	r2, r3
 8004dae:	d802      	bhi.n	8004db6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004db0:	4a1f      	ldr	r2, [pc, #124]	; (8004e30 <prvAddNewTaskToReadyList+0xc8>)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004db6:	4b20      	ldr	r3, [pc, #128]	; (8004e38 <prvAddNewTaskToReadyList+0xd0>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	3301      	adds	r3, #1
 8004dbc:	4a1e      	ldr	r2, [pc, #120]	; (8004e38 <prvAddNewTaskToReadyList+0xd0>)
 8004dbe:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004dc0:	4b1d      	ldr	r3, [pc, #116]	; (8004e38 <prvAddNewTaskToReadyList+0xd0>)
 8004dc2:	681a      	ldr	r2, [r3, #0]
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dcc:	4b1b      	ldr	r3, [pc, #108]	; (8004e3c <prvAddNewTaskToReadyList+0xd4>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	429a      	cmp	r2, r3
 8004dd2:	d903      	bls.n	8004ddc <prvAddNewTaskToReadyList+0x74>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dd8:	4a18      	ldr	r2, [pc, #96]	; (8004e3c <prvAddNewTaskToReadyList+0xd4>)
 8004dda:	6013      	str	r3, [r2, #0]
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004de0:	4613      	mov	r3, r2
 8004de2:	009b      	lsls	r3, r3, #2
 8004de4:	4413      	add	r3, r2
 8004de6:	009b      	lsls	r3, r3, #2
 8004de8:	4a15      	ldr	r2, [pc, #84]	; (8004e40 <prvAddNewTaskToReadyList+0xd8>)
 8004dea:	441a      	add	r2, r3
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	3304      	adds	r3, #4
 8004df0:	4619      	mov	r1, r3
 8004df2:	4610      	mov	r0, r2
 8004df4:	f7ff f81d 	bl	8003e32 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004df8:	f001 fc1c 	bl	8006634 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004dfc:	4b0d      	ldr	r3, [pc, #52]	; (8004e34 <prvAddNewTaskToReadyList+0xcc>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d00e      	beq.n	8004e22 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004e04:	4b0a      	ldr	r3, [pc, #40]	; (8004e30 <prvAddNewTaskToReadyList+0xc8>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e0e:	429a      	cmp	r2, r3
 8004e10:	d207      	bcs.n	8004e22 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004e12:	4b0c      	ldr	r3, [pc, #48]	; (8004e44 <prvAddNewTaskToReadyList+0xdc>)
 8004e14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e18:	601a      	str	r2, [r3, #0]
 8004e1a:	f3bf 8f4f 	dsb	sy
 8004e1e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004e22:	bf00      	nop
 8004e24:	3708      	adds	r7, #8
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bd80      	pop	{r7, pc}
 8004e2a:	bf00      	nop
 8004e2c:	20000e70 	.word	0x20000e70
 8004e30:	2000099c 	.word	0x2000099c
 8004e34:	20000e7c 	.word	0x20000e7c
 8004e38:	20000e8c 	.word	0x20000e8c
 8004e3c:	20000e78 	.word	0x20000e78
 8004e40:	200009a0 	.word	0x200009a0
 8004e44:	e000ed04 	.word	0xe000ed04

08004e48 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b084      	sub	sp, #16
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004e50:	2300      	movs	r3, #0
 8004e52:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d017      	beq.n	8004e8a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004e5a:	4b13      	ldr	r3, [pc, #76]	; (8004ea8 <vTaskDelay+0x60>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d00a      	beq.n	8004e78 <vTaskDelay+0x30>
	__asm volatile
 8004e62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e66:	f383 8811 	msr	BASEPRI, r3
 8004e6a:	f3bf 8f6f 	isb	sy
 8004e6e:	f3bf 8f4f 	dsb	sy
 8004e72:	60bb      	str	r3, [r7, #8]
}
 8004e74:	bf00      	nop
 8004e76:	e7fe      	b.n	8004e76 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004e78:	f000 f880 	bl	8004f7c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004e7c:	2100      	movs	r1, #0
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	f000 fed8 	bl	8005c34 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004e84:	f000 f888 	bl	8004f98 <xTaskResumeAll>
 8004e88:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d107      	bne.n	8004ea0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004e90:	4b06      	ldr	r3, [pc, #24]	; (8004eac <vTaskDelay+0x64>)
 8004e92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e96:	601a      	str	r2, [r3, #0]
 8004e98:	f3bf 8f4f 	dsb	sy
 8004e9c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004ea0:	bf00      	nop
 8004ea2:	3710      	adds	r7, #16
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bd80      	pop	{r7, pc}
 8004ea8:	20000e98 	.word	0x20000e98
 8004eac:	e000ed04 	.word	0xe000ed04

08004eb0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b08a      	sub	sp, #40	; 0x28
 8004eb4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004eba:	2300      	movs	r3, #0
 8004ebc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004ebe:	463a      	mov	r2, r7
 8004ec0:	1d39      	adds	r1, r7, #4
 8004ec2:	f107 0308 	add.w	r3, r7, #8
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	f7fe ff52 	bl	8003d70 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004ecc:	6839      	ldr	r1, [r7, #0]
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	68ba      	ldr	r2, [r7, #8]
 8004ed2:	9202      	str	r2, [sp, #8]
 8004ed4:	9301      	str	r3, [sp, #4]
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	9300      	str	r3, [sp, #0]
 8004eda:	2300      	movs	r3, #0
 8004edc:	460a      	mov	r2, r1
 8004ede:	4921      	ldr	r1, [pc, #132]	; (8004f64 <vTaskStartScheduler+0xb4>)
 8004ee0:	4821      	ldr	r0, [pc, #132]	; (8004f68 <vTaskStartScheduler+0xb8>)
 8004ee2:	f7ff fe0f 	bl	8004b04 <xTaskCreateStatic>
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	4a20      	ldr	r2, [pc, #128]	; (8004f6c <vTaskStartScheduler+0xbc>)
 8004eea:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004eec:	4b1f      	ldr	r3, [pc, #124]	; (8004f6c <vTaskStartScheduler+0xbc>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d002      	beq.n	8004efa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	617b      	str	r3, [r7, #20]
 8004ef8:	e001      	b.n	8004efe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004efa:	2300      	movs	r3, #0
 8004efc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	2b01      	cmp	r3, #1
 8004f02:	d102      	bne.n	8004f0a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004f04:	f000 feea 	bl	8005cdc <xTimerCreateTimerTask>
 8004f08:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	2b01      	cmp	r3, #1
 8004f0e:	d116      	bne.n	8004f3e <vTaskStartScheduler+0x8e>
	__asm volatile
 8004f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f14:	f383 8811 	msr	BASEPRI, r3
 8004f18:	f3bf 8f6f 	isb	sy
 8004f1c:	f3bf 8f4f 	dsb	sy
 8004f20:	613b      	str	r3, [r7, #16]
}
 8004f22:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004f24:	4b12      	ldr	r3, [pc, #72]	; (8004f70 <vTaskStartScheduler+0xc0>)
 8004f26:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004f2a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004f2c:	4b11      	ldr	r3, [pc, #68]	; (8004f74 <vTaskStartScheduler+0xc4>)
 8004f2e:	2201      	movs	r2, #1
 8004f30:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004f32:	4b11      	ldr	r3, [pc, #68]	; (8004f78 <vTaskStartScheduler+0xc8>)
 8004f34:	2200      	movs	r2, #0
 8004f36:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004f38:	f001 faaa 	bl	8006490 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004f3c:	e00e      	b.n	8004f5c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f44:	d10a      	bne.n	8004f5c <vTaskStartScheduler+0xac>
	__asm volatile
 8004f46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f4a:	f383 8811 	msr	BASEPRI, r3
 8004f4e:	f3bf 8f6f 	isb	sy
 8004f52:	f3bf 8f4f 	dsb	sy
 8004f56:	60fb      	str	r3, [r7, #12]
}
 8004f58:	bf00      	nop
 8004f5a:	e7fe      	b.n	8004f5a <vTaskStartScheduler+0xaa>
}
 8004f5c:	bf00      	nop
 8004f5e:	3718      	adds	r7, #24
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bd80      	pop	{r7, pc}
 8004f64:	08007d3c 	.word	0x08007d3c
 8004f68:	08005595 	.word	0x08005595
 8004f6c:	20000e94 	.word	0x20000e94
 8004f70:	20000e90 	.word	0x20000e90
 8004f74:	20000e7c 	.word	0x20000e7c
 8004f78:	20000e74 	.word	0x20000e74

08004f7c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004f80:	4b04      	ldr	r3, [pc, #16]	; (8004f94 <vTaskSuspendAll+0x18>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	3301      	adds	r3, #1
 8004f86:	4a03      	ldr	r2, [pc, #12]	; (8004f94 <vTaskSuspendAll+0x18>)
 8004f88:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004f8a:	bf00      	nop
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f92:	4770      	bx	lr
 8004f94:	20000e98 	.word	0x20000e98

08004f98 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b084      	sub	sp, #16
 8004f9c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004fa6:	4b42      	ldr	r3, [pc, #264]	; (80050b0 <xTaskResumeAll+0x118>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d10a      	bne.n	8004fc4 <xTaskResumeAll+0x2c>
	__asm volatile
 8004fae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fb2:	f383 8811 	msr	BASEPRI, r3
 8004fb6:	f3bf 8f6f 	isb	sy
 8004fba:	f3bf 8f4f 	dsb	sy
 8004fbe:	603b      	str	r3, [r7, #0]
}
 8004fc0:	bf00      	nop
 8004fc2:	e7fe      	b.n	8004fc2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004fc4:	f001 fb06 	bl	80065d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004fc8:	4b39      	ldr	r3, [pc, #228]	; (80050b0 <xTaskResumeAll+0x118>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	3b01      	subs	r3, #1
 8004fce:	4a38      	ldr	r2, [pc, #224]	; (80050b0 <xTaskResumeAll+0x118>)
 8004fd0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004fd2:	4b37      	ldr	r3, [pc, #220]	; (80050b0 <xTaskResumeAll+0x118>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d162      	bne.n	80050a0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004fda:	4b36      	ldr	r3, [pc, #216]	; (80050b4 <xTaskResumeAll+0x11c>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d05e      	beq.n	80050a0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004fe2:	e02f      	b.n	8005044 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004fe4:	4b34      	ldr	r3, [pc, #208]	; (80050b8 <xTaskResumeAll+0x120>)
 8004fe6:	68db      	ldr	r3, [r3, #12]
 8004fe8:	68db      	ldr	r3, [r3, #12]
 8004fea:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	3318      	adds	r3, #24
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	f7fe ff7b 	bl	8003eec <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	3304      	adds	r3, #4
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	f7fe ff76 	bl	8003eec <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005004:	4b2d      	ldr	r3, [pc, #180]	; (80050bc <xTaskResumeAll+0x124>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	429a      	cmp	r2, r3
 800500a:	d903      	bls.n	8005014 <xTaskResumeAll+0x7c>
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005010:	4a2a      	ldr	r2, [pc, #168]	; (80050bc <xTaskResumeAll+0x124>)
 8005012:	6013      	str	r3, [r2, #0]
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005018:	4613      	mov	r3, r2
 800501a:	009b      	lsls	r3, r3, #2
 800501c:	4413      	add	r3, r2
 800501e:	009b      	lsls	r3, r3, #2
 8005020:	4a27      	ldr	r2, [pc, #156]	; (80050c0 <xTaskResumeAll+0x128>)
 8005022:	441a      	add	r2, r3
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	3304      	adds	r3, #4
 8005028:	4619      	mov	r1, r3
 800502a:	4610      	mov	r0, r2
 800502c:	f7fe ff01 	bl	8003e32 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005034:	4b23      	ldr	r3, [pc, #140]	; (80050c4 <xTaskResumeAll+0x12c>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800503a:	429a      	cmp	r2, r3
 800503c:	d302      	bcc.n	8005044 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800503e:	4b22      	ldr	r3, [pc, #136]	; (80050c8 <xTaskResumeAll+0x130>)
 8005040:	2201      	movs	r2, #1
 8005042:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005044:	4b1c      	ldr	r3, [pc, #112]	; (80050b8 <xTaskResumeAll+0x120>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d1cb      	bne.n	8004fe4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d001      	beq.n	8005056 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005052:	f000 fb55 	bl	8005700 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005056:	4b1d      	ldr	r3, [pc, #116]	; (80050cc <xTaskResumeAll+0x134>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d010      	beq.n	8005084 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005062:	f000 f847 	bl	80050f4 <xTaskIncrementTick>
 8005066:	4603      	mov	r3, r0
 8005068:	2b00      	cmp	r3, #0
 800506a:	d002      	beq.n	8005072 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800506c:	4b16      	ldr	r3, [pc, #88]	; (80050c8 <xTaskResumeAll+0x130>)
 800506e:	2201      	movs	r2, #1
 8005070:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	3b01      	subs	r3, #1
 8005076:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d1f1      	bne.n	8005062 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800507e:	4b13      	ldr	r3, [pc, #76]	; (80050cc <xTaskResumeAll+0x134>)
 8005080:	2200      	movs	r2, #0
 8005082:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005084:	4b10      	ldr	r3, [pc, #64]	; (80050c8 <xTaskResumeAll+0x130>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d009      	beq.n	80050a0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800508c:	2301      	movs	r3, #1
 800508e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005090:	4b0f      	ldr	r3, [pc, #60]	; (80050d0 <xTaskResumeAll+0x138>)
 8005092:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005096:	601a      	str	r2, [r3, #0]
 8005098:	f3bf 8f4f 	dsb	sy
 800509c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80050a0:	f001 fac8 	bl	8006634 <vPortExitCritical>

	return xAlreadyYielded;
 80050a4:	68bb      	ldr	r3, [r7, #8]
}
 80050a6:	4618      	mov	r0, r3
 80050a8:	3710      	adds	r7, #16
 80050aa:	46bd      	mov	sp, r7
 80050ac:	bd80      	pop	{r7, pc}
 80050ae:	bf00      	nop
 80050b0:	20000e98 	.word	0x20000e98
 80050b4:	20000e70 	.word	0x20000e70
 80050b8:	20000e30 	.word	0x20000e30
 80050bc:	20000e78 	.word	0x20000e78
 80050c0:	200009a0 	.word	0x200009a0
 80050c4:	2000099c 	.word	0x2000099c
 80050c8:	20000e84 	.word	0x20000e84
 80050cc:	20000e80 	.word	0x20000e80
 80050d0:	e000ed04 	.word	0xe000ed04

080050d4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80050d4:	b480      	push	{r7}
 80050d6:	b083      	sub	sp, #12
 80050d8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80050da:	4b05      	ldr	r3, [pc, #20]	; (80050f0 <xTaskGetTickCount+0x1c>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80050e0:	687b      	ldr	r3, [r7, #4]
}
 80050e2:	4618      	mov	r0, r3
 80050e4:	370c      	adds	r7, #12
 80050e6:	46bd      	mov	sp, r7
 80050e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ec:	4770      	bx	lr
 80050ee:	bf00      	nop
 80050f0:	20000e74 	.word	0x20000e74

080050f4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b086      	sub	sp, #24
 80050f8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80050fa:	2300      	movs	r3, #0
 80050fc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80050fe:	4b4f      	ldr	r3, [pc, #316]	; (800523c <xTaskIncrementTick+0x148>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	2b00      	cmp	r3, #0
 8005104:	f040 808f 	bne.w	8005226 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005108:	4b4d      	ldr	r3, [pc, #308]	; (8005240 <xTaskIncrementTick+0x14c>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	3301      	adds	r3, #1
 800510e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005110:	4a4b      	ldr	r2, [pc, #300]	; (8005240 <xTaskIncrementTick+0x14c>)
 8005112:	693b      	ldr	r3, [r7, #16]
 8005114:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d120      	bne.n	800515e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800511c:	4b49      	ldr	r3, [pc, #292]	; (8005244 <xTaskIncrementTick+0x150>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d00a      	beq.n	800513c <xTaskIncrementTick+0x48>
	__asm volatile
 8005126:	f04f 0350 	mov.w	r3, #80	; 0x50
 800512a:	f383 8811 	msr	BASEPRI, r3
 800512e:	f3bf 8f6f 	isb	sy
 8005132:	f3bf 8f4f 	dsb	sy
 8005136:	603b      	str	r3, [r7, #0]
}
 8005138:	bf00      	nop
 800513a:	e7fe      	b.n	800513a <xTaskIncrementTick+0x46>
 800513c:	4b41      	ldr	r3, [pc, #260]	; (8005244 <xTaskIncrementTick+0x150>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	60fb      	str	r3, [r7, #12]
 8005142:	4b41      	ldr	r3, [pc, #260]	; (8005248 <xTaskIncrementTick+0x154>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4a3f      	ldr	r2, [pc, #252]	; (8005244 <xTaskIncrementTick+0x150>)
 8005148:	6013      	str	r3, [r2, #0]
 800514a:	4a3f      	ldr	r2, [pc, #252]	; (8005248 <xTaskIncrementTick+0x154>)
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	6013      	str	r3, [r2, #0]
 8005150:	4b3e      	ldr	r3, [pc, #248]	; (800524c <xTaskIncrementTick+0x158>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	3301      	adds	r3, #1
 8005156:	4a3d      	ldr	r2, [pc, #244]	; (800524c <xTaskIncrementTick+0x158>)
 8005158:	6013      	str	r3, [r2, #0]
 800515a:	f000 fad1 	bl	8005700 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800515e:	4b3c      	ldr	r3, [pc, #240]	; (8005250 <xTaskIncrementTick+0x15c>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	693a      	ldr	r2, [r7, #16]
 8005164:	429a      	cmp	r2, r3
 8005166:	d349      	bcc.n	80051fc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005168:	4b36      	ldr	r3, [pc, #216]	; (8005244 <xTaskIncrementTick+0x150>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d104      	bne.n	800517c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005172:	4b37      	ldr	r3, [pc, #220]	; (8005250 <xTaskIncrementTick+0x15c>)
 8005174:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005178:	601a      	str	r2, [r3, #0]
					break;
 800517a:	e03f      	b.n	80051fc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800517c:	4b31      	ldr	r3, [pc, #196]	; (8005244 <xTaskIncrementTick+0x150>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	68db      	ldr	r3, [r3, #12]
 8005182:	68db      	ldr	r3, [r3, #12]
 8005184:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	685b      	ldr	r3, [r3, #4]
 800518a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800518c:	693a      	ldr	r2, [r7, #16]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	429a      	cmp	r2, r3
 8005192:	d203      	bcs.n	800519c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005194:	4a2e      	ldr	r2, [pc, #184]	; (8005250 <xTaskIncrementTick+0x15c>)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800519a:	e02f      	b.n	80051fc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	3304      	adds	r3, #4
 80051a0:	4618      	mov	r0, r3
 80051a2:	f7fe fea3 	bl	8003eec <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d004      	beq.n	80051b8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	3318      	adds	r3, #24
 80051b2:	4618      	mov	r0, r3
 80051b4:	f7fe fe9a 	bl	8003eec <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051bc:	4b25      	ldr	r3, [pc, #148]	; (8005254 <xTaskIncrementTick+0x160>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	429a      	cmp	r2, r3
 80051c2:	d903      	bls.n	80051cc <xTaskIncrementTick+0xd8>
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051c8:	4a22      	ldr	r2, [pc, #136]	; (8005254 <xTaskIncrementTick+0x160>)
 80051ca:	6013      	str	r3, [r2, #0]
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051d0:	4613      	mov	r3, r2
 80051d2:	009b      	lsls	r3, r3, #2
 80051d4:	4413      	add	r3, r2
 80051d6:	009b      	lsls	r3, r3, #2
 80051d8:	4a1f      	ldr	r2, [pc, #124]	; (8005258 <xTaskIncrementTick+0x164>)
 80051da:	441a      	add	r2, r3
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	3304      	adds	r3, #4
 80051e0:	4619      	mov	r1, r3
 80051e2:	4610      	mov	r0, r2
 80051e4:	f7fe fe25 	bl	8003e32 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051ec:	4b1b      	ldr	r3, [pc, #108]	; (800525c <xTaskIncrementTick+0x168>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051f2:	429a      	cmp	r2, r3
 80051f4:	d3b8      	bcc.n	8005168 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80051f6:	2301      	movs	r3, #1
 80051f8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80051fa:	e7b5      	b.n	8005168 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80051fc:	4b17      	ldr	r3, [pc, #92]	; (800525c <xTaskIncrementTick+0x168>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005202:	4915      	ldr	r1, [pc, #84]	; (8005258 <xTaskIncrementTick+0x164>)
 8005204:	4613      	mov	r3, r2
 8005206:	009b      	lsls	r3, r3, #2
 8005208:	4413      	add	r3, r2
 800520a:	009b      	lsls	r3, r3, #2
 800520c:	440b      	add	r3, r1
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	2b01      	cmp	r3, #1
 8005212:	d901      	bls.n	8005218 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005214:	2301      	movs	r3, #1
 8005216:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005218:	4b11      	ldr	r3, [pc, #68]	; (8005260 <xTaskIncrementTick+0x16c>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d007      	beq.n	8005230 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005220:	2301      	movs	r3, #1
 8005222:	617b      	str	r3, [r7, #20]
 8005224:	e004      	b.n	8005230 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005226:	4b0f      	ldr	r3, [pc, #60]	; (8005264 <xTaskIncrementTick+0x170>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	3301      	adds	r3, #1
 800522c:	4a0d      	ldr	r2, [pc, #52]	; (8005264 <xTaskIncrementTick+0x170>)
 800522e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005230:	697b      	ldr	r3, [r7, #20]
}
 8005232:	4618      	mov	r0, r3
 8005234:	3718      	adds	r7, #24
 8005236:	46bd      	mov	sp, r7
 8005238:	bd80      	pop	{r7, pc}
 800523a:	bf00      	nop
 800523c:	20000e98 	.word	0x20000e98
 8005240:	20000e74 	.word	0x20000e74
 8005244:	20000e28 	.word	0x20000e28
 8005248:	20000e2c 	.word	0x20000e2c
 800524c:	20000e88 	.word	0x20000e88
 8005250:	20000e90 	.word	0x20000e90
 8005254:	20000e78 	.word	0x20000e78
 8005258:	200009a0 	.word	0x200009a0
 800525c:	2000099c 	.word	0x2000099c
 8005260:	20000e84 	.word	0x20000e84
 8005264:	20000e80 	.word	0x20000e80

08005268 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005268:	b480      	push	{r7}
 800526a:	b085      	sub	sp, #20
 800526c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800526e:	4b28      	ldr	r3, [pc, #160]	; (8005310 <vTaskSwitchContext+0xa8>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d003      	beq.n	800527e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005276:	4b27      	ldr	r3, [pc, #156]	; (8005314 <vTaskSwitchContext+0xac>)
 8005278:	2201      	movs	r2, #1
 800527a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800527c:	e041      	b.n	8005302 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800527e:	4b25      	ldr	r3, [pc, #148]	; (8005314 <vTaskSwitchContext+0xac>)
 8005280:	2200      	movs	r2, #0
 8005282:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005284:	4b24      	ldr	r3, [pc, #144]	; (8005318 <vTaskSwitchContext+0xb0>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	60fb      	str	r3, [r7, #12]
 800528a:	e010      	b.n	80052ae <vTaskSwitchContext+0x46>
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d10a      	bne.n	80052a8 <vTaskSwitchContext+0x40>
	__asm volatile
 8005292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005296:	f383 8811 	msr	BASEPRI, r3
 800529a:	f3bf 8f6f 	isb	sy
 800529e:	f3bf 8f4f 	dsb	sy
 80052a2:	607b      	str	r3, [r7, #4]
}
 80052a4:	bf00      	nop
 80052a6:	e7fe      	b.n	80052a6 <vTaskSwitchContext+0x3e>
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	3b01      	subs	r3, #1
 80052ac:	60fb      	str	r3, [r7, #12]
 80052ae:	491b      	ldr	r1, [pc, #108]	; (800531c <vTaskSwitchContext+0xb4>)
 80052b0:	68fa      	ldr	r2, [r7, #12]
 80052b2:	4613      	mov	r3, r2
 80052b4:	009b      	lsls	r3, r3, #2
 80052b6:	4413      	add	r3, r2
 80052b8:	009b      	lsls	r3, r3, #2
 80052ba:	440b      	add	r3, r1
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d0e4      	beq.n	800528c <vTaskSwitchContext+0x24>
 80052c2:	68fa      	ldr	r2, [r7, #12]
 80052c4:	4613      	mov	r3, r2
 80052c6:	009b      	lsls	r3, r3, #2
 80052c8:	4413      	add	r3, r2
 80052ca:	009b      	lsls	r3, r3, #2
 80052cc:	4a13      	ldr	r2, [pc, #76]	; (800531c <vTaskSwitchContext+0xb4>)
 80052ce:	4413      	add	r3, r2
 80052d0:	60bb      	str	r3, [r7, #8]
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	685a      	ldr	r2, [r3, #4]
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	605a      	str	r2, [r3, #4]
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	685a      	ldr	r2, [r3, #4]
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	3308      	adds	r3, #8
 80052e4:	429a      	cmp	r2, r3
 80052e6:	d104      	bne.n	80052f2 <vTaskSwitchContext+0x8a>
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	685a      	ldr	r2, [r3, #4]
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	605a      	str	r2, [r3, #4]
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	685b      	ldr	r3, [r3, #4]
 80052f6:	68db      	ldr	r3, [r3, #12]
 80052f8:	4a09      	ldr	r2, [pc, #36]	; (8005320 <vTaskSwitchContext+0xb8>)
 80052fa:	6013      	str	r3, [r2, #0]
 80052fc:	4a06      	ldr	r2, [pc, #24]	; (8005318 <vTaskSwitchContext+0xb0>)
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	6013      	str	r3, [r2, #0]
}
 8005302:	bf00      	nop
 8005304:	3714      	adds	r7, #20
 8005306:	46bd      	mov	sp, r7
 8005308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530c:	4770      	bx	lr
 800530e:	bf00      	nop
 8005310:	20000e98 	.word	0x20000e98
 8005314:	20000e84 	.word	0x20000e84
 8005318:	20000e78 	.word	0x20000e78
 800531c:	200009a0 	.word	0x200009a0
 8005320:	2000099c 	.word	0x2000099c

08005324 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b084      	sub	sp, #16
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
 800532c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d10a      	bne.n	800534a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005334:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005338:	f383 8811 	msr	BASEPRI, r3
 800533c:	f3bf 8f6f 	isb	sy
 8005340:	f3bf 8f4f 	dsb	sy
 8005344:	60fb      	str	r3, [r7, #12]
}
 8005346:	bf00      	nop
 8005348:	e7fe      	b.n	8005348 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800534a:	4b07      	ldr	r3, [pc, #28]	; (8005368 <vTaskPlaceOnEventList+0x44>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	3318      	adds	r3, #24
 8005350:	4619      	mov	r1, r3
 8005352:	6878      	ldr	r0, [r7, #4]
 8005354:	f7fe fd91 	bl	8003e7a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005358:	2101      	movs	r1, #1
 800535a:	6838      	ldr	r0, [r7, #0]
 800535c:	f000 fc6a 	bl	8005c34 <prvAddCurrentTaskToDelayedList>
}
 8005360:	bf00      	nop
 8005362:	3710      	adds	r7, #16
 8005364:	46bd      	mov	sp, r7
 8005366:	bd80      	pop	{r7, pc}
 8005368:	2000099c 	.word	0x2000099c

0800536c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800536c:	b580      	push	{r7, lr}
 800536e:	b086      	sub	sp, #24
 8005370:	af00      	add	r7, sp, #0
 8005372:	60f8      	str	r0, [r7, #12]
 8005374:	60b9      	str	r1, [r7, #8]
 8005376:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d10a      	bne.n	8005394 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800537e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005382:	f383 8811 	msr	BASEPRI, r3
 8005386:	f3bf 8f6f 	isb	sy
 800538a:	f3bf 8f4f 	dsb	sy
 800538e:	617b      	str	r3, [r7, #20]
}
 8005390:	bf00      	nop
 8005392:	e7fe      	b.n	8005392 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005394:	4b0a      	ldr	r3, [pc, #40]	; (80053c0 <vTaskPlaceOnEventListRestricted+0x54>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	3318      	adds	r3, #24
 800539a:	4619      	mov	r1, r3
 800539c:	68f8      	ldr	r0, [r7, #12]
 800539e:	f7fe fd48 	bl	8003e32 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d002      	beq.n	80053ae <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80053a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80053ac:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80053ae:	6879      	ldr	r1, [r7, #4]
 80053b0:	68b8      	ldr	r0, [r7, #8]
 80053b2:	f000 fc3f 	bl	8005c34 <prvAddCurrentTaskToDelayedList>
	}
 80053b6:	bf00      	nop
 80053b8:	3718      	adds	r7, #24
 80053ba:	46bd      	mov	sp, r7
 80053bc:	bd80      	pop	{r7, pc}
 80053be:	bf00      	nop
 80053c0:	2000099c 	.word	0x2000099c

080053c4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b086      	sub	sp, #24
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	68db      	ldr	r3, [r3, #12]
 80053d0:	68db      	ldr	r3, [r3, #12]
 80053d2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80053d4:	693b      	ldr	r3, [r7, #16]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d10a      	bne.n	80053f0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80053da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053de:	f383 8811 	msr	BASEPRI, r3
 80053e2:	f3bf 8f6f 	isb	sy
 80053e6:	f3bf 8f4f 	dsb	sy
 80053ea:	60fb      	str	r3, [r7, #12]
}
 80053ec:	bf00      	nop
 80053ee:	e7fe      	b.n	80053ee <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80053f0:	693b      	ldr	r3, [r7, #16]
 80053f2:	3318      	adds	r3, #24
 80053f4:	4618      	mov	r0, r3
 80053f6:	f7fe fd79 	bl	8003eec <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80053fa:	4b1e      	ldr	r3, [pc, #120]	; (8005474 <xTaskRemoveFromEventList+0xb0>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d11d      	bne.n	800543e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005402:	693b      	ldr	r3, [r7, #16]
 8005404:	3304      	adds	r3, #4
 8005406:	4618      	mov	r0, r3
 8005408:	f7fe fd70 	bl	8003eec <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800540c:	693b      	ldr	r3, [r7, #16]
 800540e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005410:	4b19      	ldr	r3, [pc, #100]	; (8005478 <xTaskRemoveFromEventList+0xb4>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	429a      	cmp	r2, r3
 8005416:	d903      	bls.n	8005420 <xTaskRemoveFromEventList+0x5c>
 8005418:	693b      	ldr	r3, [r7, #16]
 800541a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800541c:	4a16      	ldr	r2, [pc, #88]	; (8005478 <xTaskRemoveFromEventList+0xb4>)
 800541e:	6013      	str	r3, [r2, #0]
 8005420:	693b      	ldr	r3, [r7, #16]
 8005422:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005424:	4613      	mov	r3, r2
 8005426:	009b      	lsls	r3, r3, #2
 8005428:	4413      	add	r3, r2
 800542a:	009b      	lsls	r3, r3, #2
 800542c:	4a13      	ldr	r2, [pc, #76]	; (800547c <xTaskRemoveFromEventList+0xb8>)
 800542e:	441a      	add	r2, r3
 8005430:	693b      	ldr	r3, [r7, #16]
 8005432:	3304      	adds	r3, #4
 8005434:	4619      	mov	r1, r3
 8005436:	4610      	mov	r0, r2
 8005438:	f7fe fcfb 	bl	8003e32 <vListInsertEnd>
 800543c:	e005      	b.n	800544a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800543e:	693b      	ldr	r3, [r7, #16]
 8005440:	3318      	adds	r3, #24
 8005442:	4619      	mov	r1, r3
 8005444:	480e      	ldr	r0, [pc, #56]	; (8005480 <xTaskRemoveFromEventList+0xbc>)
 8005446:	f7fe fcf4 	bl	8003e32 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800544a:	693b      	ldr	r3, [r7, #16]
 800544c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800544e:	4b0d      	ldr	r3, [pc, #52]	; (8005484 <xTaskRemoveFromEventList+0xc0>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005454:	429a      	cmp	r2, r3
 8005456:	d905      	bls.n	8005464 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005458:	2301      	movs	r3, #1
 800545a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800545c:	4b0a      	ldr	r3, [pc, #40]	; (8005488 <xTaskRemoveFromEventList+0xc4>)
 800545e:	2201      	movs	r2, #1
 8005460:	601a      	str	r2, [r3, #0]
 8005462:	e001      	b.n	8005468 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005464:	2300      	movs	r3, #0
 8005466:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005468:	697b      	ldr	r3, [r7, #20]
}
 800546a:	4618      	mov	r0, r3
 800546c:	3718      	adds	r7, #24
 800546e:	46bd      	mov	sp, r7
 8005470:	bd80      	pop	{r7, pc}
 8005472:	bf00      	nop
 8005474:	20000e98 	.word	0x20000e98
 8005478:	20000e78 	.word	0x20000e78
 800547c:	200009a0 	.word	0x200009a0
 8005480:	20000e30 	.word	0x20000e30
 8005484:	2000099c 	.word	0x2000099c
 8005488:	20000e84 	.word	0x20000e84

0800548c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800548c:	b480      	push	{r7}
 800548e:	b083      	sub	sp, #12
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005494:	4b06      	ldr	r3, [pc, #24]	; (80054b0 <vTaskInternalSetTimeOutState+0x24>)
 8005496:	681a      	ldr	r2, [r3, #0]
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800549c:	4b05      	ldr	r3, [pc, #20]	; (80054b4 <vTaskInternalSetTimeOutState+0x28>)
 800549e:	681a      	ldr	r2, [r3, #0]
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	605a      	str	r2, [r3, #4]
}
 80054a4:	bf00      	nop
 80054a6:	370c      	adds	r7, #12
 80054a8:	46bd      	mov	sp, r7
 80054aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ae:	4770      	bx	lr
 80054b0:	20000e88 	.word	0x20000e88
 80054b4:	20000e74 	.word	0x20000e74

080054b8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b088      	sub	sp, #32
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
 80054c0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d10a      	bne.n	80054de <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80054c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054cc:	f383 8811 	msr	BASEPRI, r3
 80054d0:	f3bf 8f6f 	isb	sy
 80054d4:	f3bf 8f4f 	dsb	sy
 80054d8:	613b      	str	r3, [r7, #16]
}
 80054da:	bf00      	nop
 80054dc:	e7fe      	b.n	80054dc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d10a      	bne.n	80054fa <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80054e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054e8:	f383 8811 	msr	BASEPRI, r3
 80054ec:	f3bf 8f6f 	isb	sy
 80054f0:	f3bf 8f4f 	dsb	sy
 80054f4:	60fb      	str	r3, [r7, #12]
}
 80054f6:	bf00      	nop
 80054f8:	e7fe      	b.n	80054f8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80054fa:	f001 f86b 	bl	80065d4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80054fe:	4b1d      	ldr	r3, [pc, #116]	; (8005574 <xTaskCheckForTimeOut+0xbc>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	685b      	ldr	r3, [r3, #4]
 8005508:	69ba      	ldr	r2, [r7, #24]
 800550a:	1ad3      	subs	r3, r2, r3
 800550c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005516:	d102      	bne.n	800551e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005518:	2300      	movs	r3, #0
 800551a:	61fb      	str	r3, [r7, #28]
 800551c:	e023      	b.n	8005566 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681a      	ldr	r2, [r3, #0]
 8005522:	4b15      	ldr	r3, [pc, #84]	; (8005578 <xTaskCheckForTimeOut+0xc0>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	429a      	cmp	r2, r3
 8005528:	d007      	beq.n	800553a <xTaskCheckForTimeOut+0x82>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	69ba      	ldr	r2, [r7, #24]
 8005530:	429a      	cmp	r2, r3
 8005532:	d302      	bcc.n	800553a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005534:	2301      	movs	r3, #1
 8005536:	61fb      	str	r3, [r7, #28]
 8005538:	e015      	b.n	8005566 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	697a      	ldr	r2, [r7, #20]
 8005540:	429a      	cmp	r2, r3
 8005542:	d20b      	bcs.n	800555c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	681a      	ldr	r2, [r3, #0]
 8005548:	697b      	ldr	r3, [r7, #20]
 800554a:	1ad2      	subs	r2, r2, r3
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005550:	6878      	ldr	r0, [r7, #4]
 8005552:	f7ff ff9b 	bl	800548c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005556:	2300      	movs	r3, #0
 8005558:	61fb      	str	r3, [r7, #28]
 800555a:	e004      	b.n	8005566 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	2200      	movs	r2, #0
 8005560:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005562:	2301      	movs	r3, #1
 8005564:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005566:	f001 f865 	bl	8006634 <vPortExitCritical>

	return xReturn;
 800556a:	69fb      	ldr	r3, [r7, #28]
}
 800556c:	4618      	mov	r0, r3
 800556e:	3720      	adds	r7, #32
 8005570:	46bd      	mov	sp, r7
 8005572:	bd80      	pop	{r7, pc}
 8005574:	20000e74 	.word	0x20000e74
 8005578:	20000e88 	.word	0x20000e88

0800557c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800557c:	b480      	push	{r7}
 800557e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005580:	4b03      	ldr	r3, [pc, #12]	; (8005590 <vTaskMissedYield+0x14>)
 8005582:	2201      	movs	r2, #1
 8005584:	601a      	str	r2, [r3, #0]
}
 8005586:	bf00      	nop
 8005588:	46bd      	mov	sp, r7
 800558a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558e:	4770      	bx	lr
 8005590:	20000e84 	.word	0x20000e84

08005594 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b082      	sub	sp, #8
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800559c:	f000 f852 	bl	8005644 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80055a0:	4b06      	ldr	r3, [pc, #24]	; (80055bc <prvIdleTask+0x28>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	2b01      	cmp	r3, #1
 80055a6:	d9f9      	bls.n	800559c <prvIdleTask+0x8>
			{
				taskYIELD();
 80055a8:	4b05      	ldr	r3, [pc, #20]	; (80055c0 <prvIdleTask+0x2c>)
 80055aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055ae:	601a      	str	r2, [r3, #0]
 80055b0:	f3bf 8f4f 	dsb	sy
 80055b4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80055b8:	e7f0      	b.n	800559c <prvIdleTask+0x8>
 80055ba:	bf00      	nop
 80055bc:	200009a0 	.word	0x200009a0
 80055c0:	e000ed04 	.word	0xe000ed04

080055c4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b082      	sub	sp, #8
 80055c8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80055ca:	2300      	movs	r3, #0
 80055cc:	607b      	str	r3, [r7, #4]
 80055ce:	e00c      	b.n	80055ea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80055d0:	687a      	ldr	r2, [r7, #4]
 80055d2:	4613      	mov	r3, r2
 80055d4:	009b      	lsls	r3, r3, #2
 80055d6:	4413      	add	r3, r2
 80055d8:	009b      	lsls	r3, r3, #2
 80055da:	4a12      	ldr	r2, [pc, #72]	; (8005624 <prvInitialiseTaskLists+0x60>)
 80055dc:	4413      	add	r3, r2
 80055de:	4618      	mov	r0, r3
 80055e0:	f7fe fbfa 	bl	8003dd8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	3301      	adds	r3, #1
 80055e8:	607b      	str	r3, [r7, #4]
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2b37      	cmp	r3, #55	; 0x37
 80055ee:	d9ef      	bls.n	80055d0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80055f0:	480d      	ldr	r0, [pc, #52]	; (8005628 <prvInitialiseTaskLists+0x64>)
 80055f2:	f7fe fbf1 	bl	8003dd8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80055f6:	480d      	ldr	r0, [pc, #52]	; (800562c <prvInitialiseTaskLists+0x68>)
 80055f8:	f7fe fbee 	bl	8003dd8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80055fc:	480c      	ldr	r0, [pc, #48]	; (8005630 <prvInitialiseTaskLists+0x6c>)
 80055fe:	f7fe fbeb 	bl	8003dd8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005602:	480c      	ldr	r0, [pc, #48]	; (8005634 <prvInitialiseTaskLists+0x70>)
 8005604:	f7fe fbe8 	bl	8003dd8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005608:	480b      	ldr	r0, [pc, #44]	; (8005638 <prvInitialiseTaskLists+0x74>)
 800560a:	f7fe fbe5 	bl	8003dd8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800560e:	4b0b      	ldr	r3, [pc, #44]	; (800563c <prvInitialiseTaskLists+0x78>)
 8005610:	4a05      	ldr	r2, [pc, #20]	; (8005628 <prvInitialiseTaskLists+0x64>)
 8005612:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005614:	4b0a      	ldr	r3, [pc, #40]	; (8005640 <prvInitialiseTaskLists+0x7c>)
 8005616:	4a05      	ldr	r2, [pc, #20]	; (800562c <prvInitialiseTaskLists+0x68>)
 8005618:	601a      	str	r2, [r3, #0]
}
 800561a:	bf00      	nop
 800561c:	3708      	adds	r7, #8
 800561e:	46bd      	mov	sp, r7
 8005620:	bd80      	pop	{r7, pc}
 8005622:	bf00      	nop
 8005624:	200009a0 	.word	0x200009a0
 8005628:	20000e00 	.word	0x20000e00
 800562c:	20000e14 	.word	0x20000e14
 8005630:	20000e30 	.word	0x20000e30
 8005634:	20000e44 	.word	0x20000e44
 8005638:	20000e5c 	.word	0x20000e5c
 800563c:	20000e28 	.word	0x20000e28
 8005640:	20000e2c 	.word	0x20000e2c

08005644 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b082      	sub	sp, #8
 8005648:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800564a:	e019      	b.n	8005680 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800564c:	f000 ffc2 	bl	80065d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005650:	4b10      	ldr	r3, [pc, #64]	; (8005694 <prvCheckTasksWaitingTermination+0x50>)
 8005652:	68db      	ldr	r3, [r3, #12]
 8005654:	68db      	ldr	r3, [r3, #12]
 8005656:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	3304      	adds	r3, #4
 800565c:	4618      	mov	r0, r3
 800565e:	f7fe fc45 	bl	8003eec <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005662:	4b0d      	ldr	r3, [pc, #52]	; (8005698 <prvCheckTasksWaitingTermination+0x54>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	3b01      	subs	r3, #1
 8005668:	4a0b      	ldr	r2, [pc, #44]	; (8005698 <prvCheckTasksWaitingTermination+0x54>)
 800566a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800566c:	4b0b      	ldr	r3, [pc, #44]	; (800569c <prvCheckTasksWaitingTermination+0x58>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	3b01      	subs	r3, #1
 8005672:	4a0a      	ldr	r2, [pc, #40]	; (800569c <prvCheckTasksWaitingTermination+0x58>)
 8005674:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005676:	f000 ffdd 	bl	8006634 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800567a:	6878      	ldr	r0, [r7, #4]
 800567c:	f000 f810 	bl	80056a0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005680:	4b06      	ldr	r3, [pc, #24]	; (800569c <prvCheckTasksWaitingTermination+0x58>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d1e1      	bne.n	800564c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005688:	bf00      	nop
 800568a:	bf00      	nop
 800568c:	3708      	adds	r7, #8
 800568e:	46bd      	mov	sp, r7
 8005690:	bd80      	pop	{r7, pc}
 8005692:	bf00      	nop
 8005694:	20000e44 	.word	0x20000e44
 8005698:	20000e70 	.word	0x20000e70
 800569c:	20000e58 	.word	0x20000e58

080056a0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b084      	sub	sp, #16
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d108      	bne.n	80056c4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056b6:	4618      	mov	r0, r3
 80056b8:	f001 f97a 	bl	80069b0 <vPortFree>
				vPortFree( pxTCB );
 80056bc:	6878      	ldr	r0, [r7, #4]
 80056be:	f001 f977 	bl	80069b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80056c2:	e018      	b.n	80056f6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80056ca:	2b01      	cmp	r3, #1
 80056cc:	d103      	bne.n	80056d6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80056ce:	6878      	ldr	r0, [r7, #4]
 80056d0:	f001 f96e 	bl	80069b0 <vPortFree>
	}
 80056d4:	e00f      	b.n	80056f6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80056dc:	2b02      	cmp	r3, #2
 80056de:	d00a      	beq.n	80056f6 <prvDeleteTCB+0x56>
	__asm volatile
 80056e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056e4:	f383 8811 	msr	BASEPRI, r3
 80056e8:	f3bf 8f6f 	isb	sy
 80056ec:	f3bf 8f4f 	dsb	sy
 80056f0:	60fb      	str	r3, [r7, #12]
}
 80056f2:	bf00      	nop
 80056f4:	e7fe      	b.n	80056f4 <prvDeleteTCB+0x54>
	}
 80056f6:	bf00      	nop
 80056f8:	3710      	adds	r7, #16
 80056fa:	46bd      	mov	sp, r7
 80056fc:	bd80      	pop	{r7, pc}
	...

08005700 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005700:	b480      	push	{r7}
 8005702:	b083      	sub	sp, #12
 8005704:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005706:	4b0c      	ldr	r3, [pc, #48]	; (8005738 <prvResetNextTaskUnblockTime+0x38>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d104      	bne.n	800571a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005710:	4b0a      	ldr	r3, [pc, #40]	; (800573c <prvResetNextTaskUnblockTime+0x3c>)
 8005712:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005716:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005718:	e008      	b.n	800572c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800571a:	4b07      	ldr	r3, [pc, #28]	; (8005738 <prvResetNextTaskUnblockTime+0x38>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	68db      	ldr	r3, [r3, #12]
 8005720:	68db      	ldr	r3, [r3, #12]
 8005722:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	4a04      	ldr	r2, [pc, #16]	; (800573c <prvResetNextTaskUnblockTime+0x3c>)
 800572a:	6013      	str	r3, [r2, #0]
}
 800572c:	bf00      	nop
 800572e:	370c      	adds	r7, #12
 8005730:	46bd      	mov	sp, r7
 8005732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005736:	4770      	bx	lr
 8005738:	20000e28 	.word	0x20000e28
 800573c:	20000e90 	.word	0x20000e90

08005740 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005740:	b480      	push	{r7}
 8005742:	b083      	sub	sp, #12
 8005744:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005746:	4b0b      	ldr	r3, [pc, #44]	; (8005774 <xTaskGetSchedulerState+0x34>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d102      	bne.n	8005754 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800574e:	2301      	movs	r3, #1
 8005750:	607b      	str	r3, [r7, #4]
 8005752:	e008      	b.n	8005766 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005754:	4b08      	ldr	r3, [pc, #32]	; (8005778 <xTaskGetSchedulerState+0x38>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d102      	bne.n	8005762 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800575c:	2302      	movs	r3, #2
 800575e:	607b      	str	r3, [r7, #4]
 8005760:	e001      	b.n	8005766 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005762:	2300      	movs	r3, #0
 8005764:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005766:	687b      	ldr	r3, [r7, #4]
	}
 8005768:	4618      	mov	r0, r3
 800576a:	370c      	adds	r7, #12
 800576c:	46bd      	mov	sp, r7
 800576e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005772:	4770      	bx	lr
 8005774:	20000e7c 	.word	0x20000e7c
 8005778:	20000e98 	.word	0x20000e98

0800577c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800577c:	b580      	push	{r7, lr}
 800577e:	b086      	sub	sp, #24
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005788:	2300      	movs	r3, #0
 800578a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d056      	beq.n	8005840 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005792:	4b2e      	ldr	r3, [pc, #184]	; (800584c <xTaskPriorityDisinherit+0xd0>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	693a      	ldr	r2, [r7, #16]
 8005798:	429a      	cmp	r2, r3
 800579a:	d00a      	beq.n	80057b2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800579c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057a0:	f383 8811 	msr	BASEPRI, r3
 80057a4:	f3bf 8f6f 	isb	sy
 80057a8:	f3bf 8f4f 	dsb	sy
 80057ac:	60fb      	str	r3, [r7, #12]
}
 80057ae:	bf00      	nop
 80057b0:	e7fe      	b.n	80057b0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80057b2:	693b      	ldr	r3, [r7, #16]
 80057b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d10a      	bne.n	80057d0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80057ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057be:	f383 8811 	msr	BASEPRI, r3
 80057c2:	f3bf 8f6f 	isb	sy
 80057c6:	f3bf 8f4f 	dsb	sy
 80057ca:	60bb      	str	r3, [r7, #8]
}
 80057cc:	bf00      	nop
 80057ce:	e7fe      	b.n	80057ce <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80057d0:	693b      	ldr	r3, [r7, #16]
 80057d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057d4:	1e5a      	subs	r2, r3, #1
 80057d6:	693b      	ldr	r3, [r7, #16]
 80057d8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80057da:	693b      	ldr	r3, [r7, #16]
 80057dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057de:	693b      	ldr	r3, [r7, #16]
 80057e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057e2:	429a      	cmp	r2, r3
 80057e4:	d02c      	beq.n	8005840 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80057e6:	693b      	ldr	r3, [r7, #16]
 80057e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d128      	bne.n	8005840 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80057ee:	693b      	ldr	r3, [r7, #16]
 80057f0:	3304      	adds	r3, #4
 80057f2:	4618      	mov	r0, r3
 80057f4:	f7fe fb7a 	bl	8003eec <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80057f8:	693b      	ldr	r3, [r7, #16]
 80057fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005800:	693b      	ldr	r3, [r7, #16]
 8005802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005804:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005808:	693b      	ldr	r3, [r7, #16]
 800580a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800580c:	693b      	ldr	r3, [r7, #16]
 800580e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005810:	4b0f      	ldr	r3, [pc, #60]	; (8005850 <xTaskPriorityDisinherit+0xd4>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	429a      	cmp	r2, r3
 8005816:	d903      	bls.n	8005820 <xTaskPriorityDisinherit+0xa4>
 8005818:	693b      	ldr	r3, [r7, #16]
 800581a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800581c:	4a0c      	ldr	r2, [pc, #48]	; (8005850 <xTaskPriorityDisinherit+0xd4>)
 800581e:	6013      	str	r3, [r2, #0]
 8005820:	693b      	ldr	r3, [r7, #16]
 8005822:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005824:	4613      	mov	r3, r2
 8005826:	009b      	lsls	r3, r3, #2
 8005828:	4413      	add	r3, r2
 800582a:	009b      	lsls	r3, r3, #2
 800582c:	4a09      	ldr	r2, [pc, #36]	; (8005854 <xTaskPriorityDisinherit+0xd8>)
 800582e:	441a      	add	r2, r3
 8005830:	693b      	ldr	r3, [r7, #16]
 8005832:	3304      	adds	r3, #4
 8005834:	4619      	mov	r1, r3
 8005836:	4610      	mov	r0, r2
 8005838:	f7fe fafb 	bl	8003e32 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800583c:	2301      	movs	r3, #1
 800583e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005840:	697b      	ldr	r3, [r7, #20]
	}
 8005842:	4618      	mov	r0, r3
 8005844:	3718      	adds	r7, #24
 8005846:	46bd      	mov	sp, r7
 8005848:	bd80      	pop	{r7, pc}
 800584a:	bf00      	nop
 800584c:	2000099c 	.word	0x2000099c
 8005850:	20000e78 	.word	0x20000e78
 8005854:	200009a0 	.word	0x200009a0

08005858 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8005858:	b580      	push	{r7, lr}
 800585a:	b086      	sub	sp, #24
 800585c:	af00      	add	r7, sp, #0
 800585e:	60f8      	str	r0, [r7, #12]
 8005860:	60b9      	str	r1, [r7, #8]
 8005862:	607a      	str	r2, [r7, #4]
 8005864:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8005866:	f000 feb5 	bl	80065d4 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800586a:	4b26      	ldr	r3, [pc, #152]	; (8005904 <xTaskNotifyWait+0xac>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8005872:	b2db      	uxtb	r3, r3
 8005874:	2b02      	cmp	r3, #2
 8005876:	d01a      	beq.n	80058ae <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8005878:	4b22      	ldr	r3, [pc, #136]	; (8005904 <xTaskNotifyWait+0xac>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800587e:	68fa      	ldr	r2, [r7, #12]
 8005880:	43d2      	mvns	r2, r2
 8005882:	400a      	ands	r2, r1
 8005884:	655a      	str	r2, [r3, #84]	; 0x54

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8005886:	4b1f      	ldr	r3, [pc, #124]	; (8005904 <xTaskNotifyWait+0xac>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	2201      	movs	r2, #1
 800588c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d00b      	beq.n	80058ae <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005896:	2101      	movs	r1, #1
 8005898:	6838      	ldr	r0, [r7, #0]
 800589a:	f000 f9cb 	bl	8005c34 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800589e:	4b1a      	ldr	r3, [pc, #104]	; (8005908 <xTaskNotifyWait+0xb0>)
 80058a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058a4:	601a      	str	r2, [r3, #0]
 80058a6:	f3bf 8f4f 	dsb	sy
 80058aa:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80058ae:	f000 fec1 	bl	8006634 <vPortExitCritical>

		taskENTER_CRITICAL();
 80058b2:	f000 fe8f 	bl	80065d4 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d004      	beq.n	80058c6 <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 80058bc:	4b11      	ldr	r3, [pc, #68]	; (8005904 <xTaskNotifyWait+0xac>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80058c6:	4b0f      	ldr	r3, [pc, #60]	; (8005904 <xTaskNotifyWait+0xac>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80058ce:	b2db      	uxtb	r3, r3
 80058d0:	2b02      	cmp	r3, #2
 80058d2:	d002      	beq.n	80058da <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 80058d4:	2300      	movs	r3, #0
 80058d6:	617b      	str	r3, [r7, #20]
 80058d8:	e008      	b.n	80058ec <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 80058da:	4b0a      	ldr	r3, [pc, #40]	; (8005904 <xTaskNotifyWait+0xac>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80058e0:	68ba      	ldr	r2, [r7, #8]
 80058e2:	43d2      	mvns	r2, r2
 80058e4:	400a      	ands	r2, r1
 80058e6:	655a      	str	r2, [r3, #84]	; 0x54
				xReturn = pdTRUE;
 80058e8:	2301      	movs	r3, #1
 80058ea:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80058ec:	4b05      	ldr	r3, [pc, #20]	; (8005904 <xTaskNotifyWait+0xac>)
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	2200      	movs	r2, #0
 80058f2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 80058f6:	f000 fe9d 	bl	8006634 <vPortExitCritical>

		return xReturn;
 80058fa:	697b      	ldr	r3, [r7, #20]
	}
 80058fc:	4618      	mov	r0, r3
 80058fe:	3718      	adds	r7, #24
 8005900:	46bd      	mov	sp, r7
 8005902:	bd80      	pop	{r7, pc}
 8005904:	2000099c 	.word	0x2000099c
 8005908:	e000ed04 	.word	0xe000ed04

0800590c <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800590c:	b580      	push	{r7, lr}
 800590e:	b08a      	sub	sp, #40	; 0x28
 8005910:	af00      	add	r7, sp, #0
 8005912:	60f8      	str	r0, [r7, #12]
 8005914:	60b9      	str	r1, [r7, #8]
 8005916:	603b      	str	r3, [r7, #0]
 8005918:	4613      	mov	r3, r2
 800591a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800591c:	2301      	movs	r3, #1
 800591e:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d10a      	bne.n	800593c <xTaskGenericNotify+0x30>
	__asm volatile
 8005926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800592a:	f383 8811 	msr	BASEPRI, r3
 800592e:	f3bf 8f6f 	isb	sy
 8005932:	f3bf 8f4f 	dsb	sy
 8005936:	61bb      	str	r3, [r7, #24]
}
 8005938:	bf00      	nop
 800593a:	e7fe      	b.n	800593a <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8005940:	f000 fe48 	bl	80065d4 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d003      	beq.n	8005952 <xTaskGenericNotify+0x46>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800594a:	6a3b      	ldr	r3, [r7, #32]
 800594c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8005952:	6a3b      	ldr	r3, [r7, #32]
 8005954:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8005958:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800595a:	6a3b      	ldr	r3, [r7, #32]
 800595c:	2202      	movs	r2, #2
 800595e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 8005962:	79fb      	ldrb	r3, [r7, #7]
 8005964:	2b04      	cmp	r3, #4
 8005966:	d828      	bhi.n	80059ba <xTaskGenericNotify+0xae>
 8005968:	a201      	add	r2, pc, #4	; (adr r2, 8005970 <xTaskGenericNotify+0x64>)
 800596a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800596e:	bf00      	nop
 8005970:	080059db 	.word	0x080059db
 8005974:	08005985 	.word	0x08005985
 8005978:	08005993 	.word	0x08005993
 800597c:	0800599f 	.word	0x0800599f
 8005980:	080059a7 	.word	0x080059a7
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8005984:	6a3b      	ldr	r3, [r7, #32]
 8005986:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	431a      	orrs	r2, r3
 800598c:	6a3b      	ldr	r3, [r7, #32]
 800598e:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8005990:	e026      	b.n	80059e0 <xTaskGenericNotify+0xd4>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8005992:	6a3b      	ldr	r3, [r7, #32]
 8005994:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005996:	1c5a      	adds	r2, r3, #1
 8005998:	6a3b      	ldr	r3, [r7, #32]
 800599a:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800599c:	e020      	b.n	80059e0 <xTaskGenericNotify+0xd4>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800599e:	6a3b      	ldr	r3, [r7, #32]
 80059a0:	68ba      	ldr	r2, [r7, #8]
 80059a2:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 80059a4:	e01c      	b.n	80059e0 <xTaskGenericNotify+0xd4>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80059a6:	7ffb      	ldrb	r3, [r7, #31]
 80059a8:	2b02      	cmp	r3, #2
 80059aa:	d003      	beq.n	80059b4 <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80059ac:	6a3b      	ldr	r3, [r7, #32]
 80059ae:	68ba      	ldr	r2, [r7, #8]
 80059b0:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80059b2:	e015      	b.n	80059e0 <xTaskGenericNotify+0xd4>
						xReturn = pdFAIL;
 80059b4:	2300      	movs	r3, #0
 80059b6:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 80059b8:	e012      	b.n	80059e0 <xTaskGenericNotify+0xd4>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80059ba:	6a3b      	ldr	r3, [r7, #32]
 80059bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80059c2:	d00c      	beq.n	80059de <xTaskGenericNotify+0xd2>
	__asm volatile
 80059c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059c8:	f383 8811 	msr	BASEPRI, r3
 80059cc:	f3bf 8f6f 	isb	sy
 80059d0:	f3bf 8f4f 	dsb	sy
 80059d4:	617b      	str	r3, [r7, #20]
}
 80059d6:	bf00      	nop
 80059d8:	e7fe      	b.n	80059d8 <xTaskGenericNotify+0xcc>
					break;
 80059da:	bf00      	nop
 80059dc:	e000      	b.n	80059e0 <xTaskGenericNotify+0xd4>

					break;
 80059de:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80059e0:	7ffb      	ldrb	r3, [r7, #31]
 80059e2:	2b01      	cmp	r3, #1
 80059e4:	d13a      	bne.n	8005a5c <xTaskGenericNotify+0x150>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80059e6:	6a3b      	ldr	r3, [r7, #32]
 80059e8:	3304      	adds	r3, #4
 80059ea:	4618      	mov	r0, r3
 80059ec:	f7fe fa7e 	bl	8003eec <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 80059f0:	6a3b      	ldr	r3, [r7, #32]
 80059f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059f4:	4b1d      	ldr	r3, [pc, #116]	; (8005a6c <xTaskGenericNotify+0x160>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	429a      	cmp	r2, r3
 80059fa:	d903      	bls.n	8005a04 <xTaskGenericNotify+0xf8>
 80059fc:	6a3b      	ldr	r3, [r7, #32]
 80059fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a00:	4a1a      	ldr	r2, [pc, #104]	; (8005a6c <xTaskGenericNotify+0x160>)
 8005a02:	6013      	str	r3, [r2, #0]
 8005a04:	6a3b      	ldr	r3, [r7, #32]
 8005a06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a08:	4613      	mov	r3, r2
 8005a0a:	009b      	lsls	r3, r3, #2
 8005a0c:	4413      	add	r3, r2
 8005a0e:	009b      	lsls	r3, r3, #2
 8005a10:	4a17      	ldr	r2, [pc, #92]	; (8005a70 <xTaskGenericNotify+0x164>)
 8005a12:	441a      	add	r2, r3
 8005a14:	6a3b      	ldr	r3, [r7, #32]
 8005a16:	3304      	adds	r3, #4
 8005a18:	4619      	mov	r1, r3
 8005a1a:	4610      	mov	r0, r2
 8005a1c:	f7fe fa09 	bl	8003e32 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8005a20:	6a3b      	ldr	r3, [r7, #32]
 8005a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d00a      	beq.n	8005a3e <xTaskGenericNotify+0x132>
	__asm volatile
 8005a28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a2c:	f383 8811 	msr	BASEPRI, r3
 8005a30:	f3bf 8f6f 	isb	sy
 8005a34:	f3bf 8f4f 	dsb	sy
 8005a38:	613b      	str	r3, [r7, #16]
}
 8005a3a:	bf00      	nop
 8005a3c:	e7fe      	b.n	8005a3c <xTaskGenericNotify+0x130>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005a3e:	6a3b      	ldr	r3, [r7, #32]
 8005a40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a42:	4b0c      	ldr	r3, [pc, #48]	; (8005a74 <xTaskGenericNotify+0x168>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a48:	429a      	cmp	r2, r3
 8005a4a:	d907      	bls.n	8005a5c <xTaskGenericNotify+0x150>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8005a4c:	4b0a      	ldr	r3, [pc, #40]	; (8005a78 <xTaskGenericNotify+0x16c>)
 8005a4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a52:	601a      	str	r2, [r3, #0]
 8005a54:	f3bf 8f4f 	dsb	sy
 8005a58:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8005a5c:	f000 fdea 	bl	8006634 <vPortExitCritical>

		return xReturn;
 8005a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8005a62:	4618      	mov	r0, r3
 8005a64:	3728      	adds	r7, #40	; 0x28
 8005a66:	46bd      	mov	sp, r7
 8005a68:	bd80      	pop	{r7, pc}
 8005a6a:	bf00      	nop
 8005a6c:	20000e78 	.word	0x20000e78
 8005a70:	200009a0 	.word	0x200009a0
 8005a74:	2000099c 	.word	0x2000099c
 8005a78:	e000ed04 	.word	0xe000ed04

08005a7c <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b08e      	sub	sp, #56	; 0x38
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	60f8      	str	r0, [r7, #12]
 8005a84:	60b9      	str	r1, [r7, #8]
 8005a86:	603b      	str	r3, [r7, #0]
 8005a88:	4613      	mov	r3, r2
 8005a8a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d10a      	bne.n	8005aac <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 8005a96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a9a:	f383 8811 	msr	BASEPRI, r3
 8005a9e:	f3bf 8f6f 	isb	sy
 8005aa2:	f3bf 8f4f 	dsb	sy
 8005aa6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005aa8:	bf00      	nop
 8005aaa:	e7fe      	b.n	8005aaa <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005aac:	f000 fe74 	bl	8006798 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 8005ab4:	f3ef 8211 	mrs	r2, BASEPRI
 8005ab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005abc:	f383 8811 	msr	BASEPRI, r3
 8005ac0:	f3bf 8f6f 	isb	sy
 8005ac4:	f3bf 8f4f 	dsb	sy
 8005ac8:	623a      	str	r2, [r7, #32]
 8005aca:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8005acc:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005ace:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d003      	beq.n	8005ade <xTaskGenericNotifyFromISR+0x62>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8005ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ad8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8005ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ae0:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8005ae4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8005ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aea:	2202      	movs	r2, #2
 8005aec:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 8005af0:	79fb      	ldrb	r3, [r7, #7]
 8005af2:	2b04      	cmp	r3, #4
 8005af4:	d828      	bhi.n	8005b48 <xTaskGenericNotifyFromISR+0xcc>
 8005af6:	a201      	add	r2, pc, #4	; (adr r2, 8005afc <xTaskGenericNotifyFromISR+0x80>)
 8005af8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005afc:	08005b69 	.word	0x08005b69
 8005b00:	08005b11 	.word	0x08005b11
 8005b04:	08005b1f 	.word	0x08005b1f
 8005b08:	08005b2b 	.word	0x08005b2b
 8005b0c:	08005b33 	.word	0x08005b33
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8005b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b12:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005b14:	68bb      	ldr	r3, [r7, #8]
 8005b16:	431a      	orrs	r2, r3
 8005b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b1a:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8005b1c:	e027      	b.n	8005b6e <xTaskGenericNotifyFromISR+0xf2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8005b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b22:	1c5a      	adds	r2, r3, #1
 8005b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b26:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8005b28:	e021      	b.n	8005b6e <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8005b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b2c:	68ba      	ldr	r2, [r7, #8]
 8005b2e:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8005b30:	e01d      	b.n	8005b6e <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8005b32:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005b36:	2b02      	cmp	r3, #2
 8005b38:	d003      	beq.n	8005b42 <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8005b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b3c:	68ba      	ldr	r2, [r7, #8]
 8005b3e:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8005b40:	e015      	b.n	8005b6e <xTaskGenericNotifyFromISR+0xf2>
						xReturn = pdFAIL;
 8005b42:	2300      	movs	r3, #0
 8005b44:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 8005b46:	e012      	b.n	8005b6e <xTaskGenericNotifyFromISR+0xf2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8005b48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b50:	d00c      	beq.n	8005b6c <xTaskGenericNotifyFromISR+0xf0>
	__asm volatile
 8005b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b56:	f383 8811 	msr	BASEPRI, r3
 8005b5a:	f3bf 8f6f 	isb	sy
 8005b5e:	f3bf 8f4f 	dsb	sy
 8005b62:	61bb      	str	r3, [r7, #24]
}
 8005b64:	bf00      	nop
 8005b66:	e7fe      	b.n	8005b66 <xTaskGenericNotifyFromISR+0xea>
					break;
 8005b68:	bf00      	nop
 8005b6a:	e000      	b.n	8005b6e <xTaskGenericNotifyFromISR+0xf2>
					break;
 8005b6c:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8005b6e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005b72:	2b01      	cmp	r3, #1
 8005b74:	d146      	bne.n	8005c04 <xTaskGenericNotifyFromISR+0x188>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8005b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d00a      	beq.n	8005b94 <xTaskGenericNotifyFromISR+0x118>
	__asm volatile
 8005b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b82:	f383 8811 	msr	BASEPRI, r3
 8005b86:	f3bf 8f6f 	isb	sy
 8005b8a:	f3bf 8f4f 	dsb	sy
 8005b8e:	617b      	str	r3, [r7, #20]
}
 8005b90:	bf00      	nop
 8005b92:	e7fe      	b.n	8005b92 <xTaskGenericNotifyFromISR+0x116>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b94:	4b21      	ldr	r3, [pc, #132]	; (8005c1c <xTaskGenericNotifyFromISR+0x1a0>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d11d      	bne.n	8005bd8 <xTaskGenericNotifyFromISR+0x15c>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b9e:	3304      	adds	r3, #4
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	f7fe f9a3 	bl	8003eec <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ba8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005baa:	4b1d      	ldr	r3, [pc, #116]	; (8005c20 <xTaskGenericNotifyFromISR+0x1a4>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	429a      	cmp	r2, r3
 8005bb0:	d903      	bls.n	8005bba <xTaskGenericNotifyFromISR+0x13e>
 8005bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bb6:	4a1a      	ldr	r2, [pc, #104]	; (8005c20 <xTaskGenericNotifyFromISR+0x1a4>)
 8005bb8:	6013      	str	r3, [r2, #0]
 8005bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bbe:	4613      	mov	r3, r2
 8005bc0:	009b      	lsls	r3, r3, #2
 8005bc2:	4413      	add	r3, r2
 8005bc4:	009b      	lsls	r3, r3, #2
 8005bc6:	4a17      	ldr	r2, [pc, #92]	; (8005c24 <xTaskGenericNotifyFromISR+0x1a8>)
 8005bc8:	441a      	add	r2, r3
 8005bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bcc:	3304      	adds	r3, #4
 8005bce:	4619      	mov	r1, r3
 8005bd0:	4610      	mov	r0, r2
 8005bd2:	f7fe f92e 	bl	8003e32 <vListInsertEnd>
 8005bd6:	e005      	b.n	8005be4 <xTaskGenericNotifyFromISR+0x168>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8005bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bda:	3318      	adds	r3, #24
 8005bdc:	4619      	mov	r1, r3
 8005bde:	4812      	ldr	r0, [pc, #72]	; (8005c28 <xTaskGenericNotifyFromISR+0x1ac>)
 8005be0:	f7fe f927 	bl	8003e32 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005be6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005be8:	4b10      	ldr	r3, [pc, #64]	; (8005c2c <xTaskGenericNotifyFromISR+0x1b0>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bee:	429a      	cmp	r2, r3
 8005bf0:	d908      	bls.n	8005c04 <xTaskGenericNotifyFromISR+0x188>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8005bf2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d002      	beq.n	8005bfe <xTaskGenericNotifyFromISR+0x182>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8005bf8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8005bfe:	4b0c      	ldr	r3, [pc, #48]	; (8005c30 <xTaskGenericNotifyFromISR+0x1b4>)
 8005c00:	2201      	movs	r2, #1
 8005c02:	601a      	str	r2, [r3, #0]
 8005c04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c06:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005c08:	693b      	ldr	r3, [r7, #16]
 8005c0a:	f383 8811 	msr	BASEPRI, r3
}
 8005c0e:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8005c10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8005c12:	4618      	mov	r0, r3
 8005c14:	3738      	adds	r7, #56	; 0x38
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bd80      	pop	{r7, pc}
 8005c1a:	bf00      	nop
 8005c1c:	20000e98 	.word	0x20000e98
 8005c20:	20000e78 	.word	0x20000e78
 8005c24:	200009a0 	.word	0x200009a0
 8005c28:	20000e30 	.word	0x20000e30
 8005c2c:	2000099c 	.word	0x2000099c
 8005c30:	20000e84 	.word	0x20000e84

08005c34 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b084      	sub	sp, #16
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
 8005c3c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005c3e:	4b21      	ldr	r3, [pc, #132]	; (8005cc4 <prvAddCurrentTaskToDelayedList+0x90>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005c44:	4b20      	ldr	r3, [pc, #128]	; (8005cc8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	3304      	adds	r3, #4
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	f7fe f94e 	bl	8003eec <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c56:	d10a      	bne.n	8005c6e <prvAddCurrentTaskToDelayedList+0x3a>
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d007      	beq.n	8005c6e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005c5e:	4b1a      	ldr	r3, [pc, #104]	; (8005cc8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	3304      	adds	r3, #4
 8005c64:	4619      	mov	r1, r3
 8005c66:	4819      	ldr	r0, [pc, #100]	; (8005ccc <prvAddCurrentTaskToDelayedList+0x98>)
 8005c68:	f7fe f8e3 	bl	8003e32 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005c6c:	e026      	b.n	8005cbc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005c6e:	68fa      	ldr	r2, [r7, #12]
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	4413      	add	r3, r2
 8005c74:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005c76:	4b14      	ldr	r3, [pc, #80]	; (8005cc8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	68ba      	ldr	r2, [r7, #8]
 8005c7c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005c7e:	68ba      	ldr	r2, [r7, #8]
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	429a      	cmp	r2, r3
 8005c84:	d209      	bcs.n	8005c9a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005c86:	4b12      	ldr	r3, [pc, #72]	; (8005cd0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005c88:	681a      	ldr	r2, [r3, #0]
 8005c8a:	4b0f      	ldr	r3, [pc, #60]	; (8005cc8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	3304      	adds	r3, #4
 8005c90:	4619      	mov	r1, r3
 8005c92:	4610      	mov	r0, r2
 8005c94:	f7fe f8f1 	bl	8003e7a <vListInsert>
}
 8005c98:	e010      	b.n	8005cbc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005c9a:	4b0e      	ldr	r3, [pc, #56]	; (8005cd4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005c9c:	681a      	ldr	r2, [r3, #0]
 8005c9e:	4b0a      	ldr	r3, [pc, #40]	; (8005cc8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	3304      	adds	r3, #4
 8005ca4:	4619      	mov	r1, r3
 8005ca6:	4610      	mov	r0, r2
 8005ca8:	f7fe f8e7 	bl	8003e7a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005cac:	4b0a      	ldr	r3, [pc, #40]	; (8005cd8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	68ba      	ldr	r2, [r7, #8]
 8005cb2:	429a      	cmp	r2, r3
 8005cb4:	d202      	bcs.n	8005cbc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005cb6:	4a08      	ldr	r2, [pc, #32]	; (8005cd8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	6013      	str	r3, [r2, #0]
}
 8005cbc:	bf00      	nop
 8005cbe:	3710      	adds	r7, #16
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	bd80      	pop	{r7, pc}
 8005cc4:	20000e74 	.word	0x20000e74
 8005cc8:	2000099c 	.word	0x2000099c
 8005ccc:	20000e5c 	.word	0x20000e5c
 8005cd0:	20000e2c 	.word	0x20000e2c
 8005cd4:	20000e28 	.word	0x20000e28
 8005cd8:	20000e90 	.word	0x20000e90

08005cdc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b08a      	sub	sp, #40	; 0x28
 8005ce0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005ce6:	f000 fb07 	bl	80062f8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005cea:	4b1c      	ldr	r3, [pc, #112]	; (8005d5c <xTimerCreateTimerTask+0x80>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d021      	beq.n	8005d36 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005cfa:	1d3a      	adds	r2, r7, #4
 8005cfc:	f107 0108 	add.w	r1, r7, #8
 8005d00:	f107 030c 	add.w	r3, r7, #12
 8005d04:	4618      	mov	r0, r3
 8005d06:	f7fe f84d 	bl	8003da4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005d0a:	6879      	ldr	r1, [r7, #4]
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	68fa      	ldr	r2, [r7, #12]
 8005d10:	9202      	str	r2, [sp, #8]
 8005d12:	9301      	str	r3, [sp, #4]
 8005d14:	2302      	movs	r3, #2
 8005d16:	9300      	str	r3, [sp, #0]
 8005d18:	2300      	movs	r3, #0
 8005d1a:	460a      	mov	r2, r1
 8005d1c:	4910      	ldr	r1, [pc, #64]	; (8005d60 <xTimerCreateTimerTask+0x84>)
 8005d1e:	4811      	ldr	r0, [pc, #68]	; (8005d64 <xTimerCreateTimerTask+0x88>)
 8005d20:	f7fe fef0 	bl	8004b04 <xTaskCreateStatic>
 8005d24:	4603      	mov	r3, r0
 8005d26:	4a10      	ldr	r2, [pc, #64]	; (8005d68 <xTimerCreateTimerTask+0x8c>)
 8005d28:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005d2a:	4b0f      	ldr	r3, [pc, #60]	; (8005d68 <xTimerCreateTimerTask+0x8c>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d001      	beq.n	8005d36 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005d32:	2301      	movs	r3, #1
 8005d34:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005d36:	697b      	ldr	r3, [r7, #20]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d10a      	bne.n	8005d52 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005d3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d40:	f383 8811 	msr	BASEPRI, r3
 8005d44:	f3bf 8f6f 	isb	sy
 8005d48:	f3bf 8f4f 	dsb	sy
 8005d4c:	613b      	str	r3, [r7, #16]
}
 8005d4e:	bf00      	nop
 8005d50:	e7fe      	b.n	8005d50 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005d52:	697b      	ldr	r3, [r7, #20]
}
 8005d54:	4618      	mov	r0, r3
 8005d56:	3718      	adds	r7, #24
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	bd80      	pop	{r7, pc}
 8005d5c:	20000ecc 	.word	0x20000ecc
 8005d60:	08007d44 	.word	0x08007d44
 8005d64:	08005ea1 	.word	0x08005ea1
 8005d68:	20000ed0 	.word	0x20000ed0

08005d6c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b08a      	sub	sp, #40	; 0x28
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	60f8      	str	r0, [r7, #12]
 8005d74:	60b9      	str	r1, [r7, #8]
 8005d76:	607a      	str	r2, [r7, #4]
 8005d78:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d10a      	bne.n	8005d9a <xTimerGenericCommand+0x2e>
	__asm volatile
 8005d84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d88:	f383 8811 	msr	BASEPRI, r3
 8005d8c:	f3bf 8f6f 	isb	sy
 8005d90:	f3bf 8f4f 	dsb	sy
 8005d94:	623b      	str	r3, [r7, #32]
}
 8005d96:	bf00      	nop
 8005d98:	e7fe      	b.n	8005d98 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005d9a:	4b1a      	ldr	r3, [pc, #104]	; (8005e04 <xTimerGenericCommand+0x98>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d02a      	beq.n	8005df8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	2b05      	cmp	r3, #5
 8005db2:	dc18      	bgt.n	8005de6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005db4:	f7ff fcc4 	bl	8005740 <xTaskGetSchedulerState>
 8005db8:	4603      	mov	r3, r0
 8005dba:	2b02      	cmp	r3, #2
 8005dbc:	d109      	bne.n	8005dd2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005dbe:	4b11      	ldr	r3, [pc, #68]	; (8005e04 <xTimerGenericCommand+0x98>)
 8005dc0:	6818      	ldr	r0, [r3, #0]
 8005dc2:	f107 0110 	add.w	r1, r7, #16
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005dca:	f7fe f9f7 	bl	80041bc <xQueueGenericSend>
 8005dce:	6278      	str	r0, [r7, #36]	; 0x24
 8005dd0:	e012      	b.n	8005df8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005dd2:	4b0c      	ldr	r3, [pc, #48]	; (8005e04 <xTimerGenericCommand+0x98>)
 8005dd4:	6818      	ldr	r0, [r3, #0]
 8005dd6:	f107 0110 	add.w	r1, r7, #16
 8005dda:	2300      	movs	r3, #0
 8005ddc:	2200      	movs	r2, #0
 8005dde:	f7fe f9ed 	bl	80041bc <xQueueGenericSend>
 8005de2:	6278      	str	r0, [r7, #36]	; 0x24
 8005de4:	e008      	b.n	8005df8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005de6:	4b07      	ldr	r3, [pc, #28]	; (8005e04 <xTimerGenericCommand+0x98>)
 8005de8:	6818      	ldr	r0, [r3, #0]
 8005dea:	f107 0110 	add.w	r1, r7, #16
 8005dee:	2300      	movs	r3, #0
 8005df0:	683a      	ldr	r2, [r7, #0]
 8005df2:	f7fe fae1 	bl	80043b8 <xQueueGenericSendFromISR>
 8005df6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	3728      	adds	r7, #40	; 0x28
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bd80      	pop	{r7, pc}
 8005e02:	bf00      	nop
 8005e04:	20000ecc 	.word	0x20000ecc

08005e08 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b088      	sub	sp, #32
 8005e0c:	af02      	add	r7, sp, #8
 8005e0e:	6078      	str	r0, [r7, #4]
 8005e10:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e12:	4b22      	ldr	r3, [pc, #136]	; (8005e9c <prvProcessExpiredTimer+0x94>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	68db      	ldr	r3, [r3, #12]
 8005e18:	68db      	ldr	r3, [r3, #12]
 8005e1a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005e1c:	697b      	ldr	r3, [r7, #20]
 8005e1e:	3304      	adds	r3, #4
 8005e20:	4618      	mov	r0, r3
 8005e22:	f7fe f863 	bl	8003eec <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005e26:	697b      	ldr	r3, [r7, #20]
 8005e28:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005e2c:	f003 0304 	and.w	r3, r3, #4
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d022      	beq.n	8005e7a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005e34:	697b      	ldr	r3, [r7, #20]
 8005e36:	699a      	ldr	r2, [r3, #24]
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	18d1      	adds	r1, r2, r3
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	683a      	ldr	r2, [r7, #0]
 8005e40:	6978      	ldr	r0, [r7, #20]
 8005e42:	f000 f8d1 	bl	8005fe8 <prvInsertTimerInActiveList>
 8005e46:	4603      	mov	r3, r0
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d01f      	beq.n	8005e8c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	9300      	str	r3, [sp, #0]
 8005e50:	2300      	movs	r3, #0
 8005e52:	687a      	ldr	r2, [r7, #4]
 8005e54:	2100      	movs	r1, #0
 8005e56:	6978      	ldr	r0, [r7, #20]
 8005e58:	f7ff ff88 	bl	8005d6c <xTimerGenericCommand>
 8005e5c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005e5e:	693b      	ldr	r3, [r7, #16]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d113      	bne.n	8005e8c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8005e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e68:	f383 8811 	msr	BASEPRI, r3
 8005e6c:	f3bf 8f6f 	isb	sy
 8005e70:	f3bf 8f4f 	dsb	sy
 8005e74:	60fb      	str	r3, [r7, #12]
}
 8005e76:	bf00      	nop
 8005e78:	e7fe      	b.n	8005e78 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005e7a:	697b      	ldr	r3, [r7, #20]
 8005e7c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005e80:	f023 0301 	bic.w	r3, r3, #1
 8005e84:	b2da      	uxtb	r2, r3
 8005e86:	697b      	ldr	r3, [r7, #20]
 8005e88:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005e8c:	697b      	ldr	r3, [r7, #20]
 8005e8e:	6a1b      	ldr	r3, [r3, #32]
 8005e90:	6978      	ldr	r0, [r7, #20]
 8005e92:	4798      	blx	r3
}
 8005e94:	bf00      	nop
 8005e96:	3718      	adds	r7, #24
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	bd80      	pop	{r7, pc}
 8005e9c:	20000ec4 	.word	0x20000ec4

08005ea0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b084      	sub	sp, #16
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005ea8:	f107 0308 	add.w	r3, r7, #8
 8005eac:	4618      	mov	r0, r3
 8005eae:	f000 f857 	bl	8005f60 <prvGetNextExpireTime>
 8005eb2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	4619      	mov	r1, r3
 8005eb8:	68f8      	ldr	r0, [r7, #12]
 8005eba:	f000 f803 	bl	8005ec4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005ebe:	f000 f8d5 	bl	800606c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005ec2:	e7f1      	b.n	8005ea8 <prvTimerTask+0x8>

08005ec4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b084      	sub	sp, #16
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
 8005ecc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005ece:	f7ff f855 	bl	8004f7c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005ed2:	f107 0308 	add.w	r3, r7, #8
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	f000 f866 	bl	8005fa8 <prvSampleTimeNow>
 8005edc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d130      	bne.n	8005f46 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d10a      	bne.n	8005f00 <prvProcessTimerOrBlockTask+0x3c>
 8005eea:	687a      	ldr	r2, [r7, #4]
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	429a      	cmp	r2, r3
 8005ef0:	d806      	bhi.n	8005f00 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005ef2:	f7ff f851 	bl	8004f98 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005ef6:	68f9      	ldr	r1, [r7, #12]
 8005ef8:	6878      	ldr	r0, [r7, #4]
 8005efa:	f7ff ff85 	bl	8005e08 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005efe:	e024      	b.n	8005f4a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d008      	beq.n	8005f18 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005f06:	4b13      	ldr	r3, [pc, #76]	; (8005f54 <prvProcessTimerOrBlockTask+0x90>)
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d101      	bne.n	8005f14 <prvProcessTimerOrBlockTask+0x50>
 8005f10:	2301      	movs	r3, #1
 8005f12:	e000      	b.n	8005f16 <prvProcessTimerOrBlockTask+0x52>
 8005f14:	2300      	movs	r3, #0
 8005f16:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005f18:	4b0f      	ldr	r3, [pc, #60]	; (8005f58 <prvProcessTimerOrBlockTask+0x94>)
 8005f1a:	6818      	ldr	r0, [r3, #0]
 8005f1c:	687a      	ldr	r2, [r7, #4]
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	1ad3      	subs	r3, r2, r3
 8005f22:	683a      	ldr	r2, [r7, #0]
 8005f24:	4619      	mov	r1, r3
 8005f26:	f7fe fdb9 	bl	8004a9c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005f2a:	f7ff f835 	bl	8004f98 <xTaskResumeAll>
 8005f2e:	4603      	mov	r3, r0
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d10a      	bne.n	8005f4a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005f34:	4b09      	ldr	r3, [pc, #36]	; (8005f5c <prvProcessTimerOrBlockTask+0x98>)
 8005f36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f3a:	601a      	str	r2, [r3, #0]
 8005f3c:	f3bf 8f4f 	dsb	sy
 8005f40:	f3bf 8f6f 	isb	sy
}
 8005f44:	e001      	b.n	8005f4a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005f46:	f7ff f827 	bl	8004f98 <xTaskResumeAll>
}
 8005f4a:	bf00      	nop
 8005f4c:	3710      	adds	r7, #16
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bd80      	pop	{r7, pc}
 8005f52:	bf00      	nop
 8005f54:	20000ec8 	.word	0x20000ec8
 8005f58:	20000ecc 	.word	0x20000ecc
 8005f5c:	e000ed04 	.word	0xe000ed04

08005f60 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005f60:	b480      	push	{r7}
 8005f62:	b085      	sub	sp, #20
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005f68:	4b0e      	ldr	r3, [pc, #56]	; (8005fa4 <prvGetNextExpireTime+0x44>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d101      	bne.n	8005f76 <prvGetNextExpireTime+0x16>
 8005f72:	2201      	movs	r2, #1
 8005f74:	e000      	b.n	8005f78 <prvGetNextExpireTime+0x18>
 8005f76:	2200      	movs	r2, #0
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d105      	bne.n	8005f90 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005f84:	4b07      	ldr	r3, [pc, #28]	; (8005fa4 <prvGetNextExpireTime+0x44>)
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	68db      	ldr	r3, [r3, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	60fb      	str	r3, [r7, #12]
 8005f8e:	e001      	b.n	8005f94 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005f90:	2300      	movs	r3, #0
 8005f92:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005f94:	68fb      	ldr	r3, [r7, #12]
}
 8005f96:	4618      	mov	r0, r3
 8005f98:	3714      	adds	r7, #20
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa0:	4770      	bx	lr
 8005fa2:	bf00      	nop
 8005fa4:	20000ec4 	.word	0x20000ec4

08005fa8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b084      	sub	sp, #16
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005fb0:	f7ff f890 	bl	80050d4 <xTaskGetTickCount>
 8005fb4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005fb6:	4b0b      	ldr	r3, [pc, #44]	; (8005fe4 <prvSampleTimeNow+0x3c>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	68fa      	ldr	r2, [r7, #12]
 8005fbc:	429a      	cmp	r2, r3
 8005fbe:	d205      	bcs.n	8005fcc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005fc0:	f000 f936 	bl	8006230 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2201      	movs	r2, #1
 8005fc8:	601a      	str	r2, [r3, #0]
 8005fca:	e002      	b.n	8005fd2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2200      	movs	r2, #0
 8005fd0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005fd2:	4a04      	ldr	r2, [pc, #16]	; (8005fe4 <prvSampleTimeNow+0x3c>)
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
}
 8005fda:	4618      	mov	r0, r3
 8005fdc:	3710      	adds	r7, #16
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bd80      	pop	{r7, pc}
 8005fe2:	bf00      	nop
 8005fe4:	20000ed4 	.word	0x20000ed4

08005fe8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b086      	sub	sp, #24
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	60f8      	str	r0, [r7, #12]
 8005ff0:	60b9      	str	r1, [r7, #8]
 8005ff2:	607a      	str	r2, [r7, #4]
 8005ff4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	68ba      	ldr	r2, [r7, #8]
 8005ffe:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	68fa      	ldr	r2, [r7, #12]
 8006004:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006006:	68ba      	ldr	r2, [r7, #8]
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	429a      	cmp	r2, r3
 800600c:	d812      	bhi.n	8006034 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800600e:	687a      	ldr	r2, [r7, #4]
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	1ad2      	subs	r2, r2, r3
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	699b      	ldr	r3, [r3, #24]
 8006018:	429a      	cmp	r2, r3
 800601a:	d302      	bcc.n	8006022 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800601c:	2301      	movs	r3, #1
 800601e:	617b      	str	r3, [r7, #20]
 8006020:	e01b      	b.n	800605a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006022:	4b10      	ldr	r3, [pc, #64]	; (8006064 <prvInsertTimerInActiveList+0x7c>)
 8006024:	681a      	ldr	r2, [r3, #0]
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	3304      	adds	r3, #4
 800602a:	4619      	mov	r1, r3
 800602c:	4610      	mov	r0, r2
 800602e:	f7fd ff24 	bl	8003e7a <vListInsert>
 8006032:	e012      	b.n	800605a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006034:	687a      	ldr	r2, [r7, #4]
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	429a      	cmp	r2, r3
 800603a:	d206      	bcs.n	800604a <prvInsertTimerInActiveList+0x62>
 800603c:	68ba      	ldr	r2, [r7, #8]
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	429a      	cmp	r2, r3
 8006042:	d302      	bcc.n	800604a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006044:	2301      	movs	r3, #1
 8006046:	617b      	str	r3, [r7, #20]
 8006048:	e007      	b.n	800605a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800604a:	4b07      	ldr	r3, [pc, #28]	; (8006068 <prvInsertTimerInActiveList+0x80>)
 800604c:	681a      	ldr	r2, [r3, #0]
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	3304      	adds	r3, #4
 8006052:	4619      	mov	r1, r3
 8006054:	4610      	mov	r0, r2
 8006056:	f7fd ff10 	bl	8003e7a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800605a:	697b      	ldr	r3, [r7, #20]
}
 800605c:	4618      	mov	r0, r3
 800605e:	3718      	adds	r7, #24
 8006060:	46bd      	mov	sp, r7
 8006062:	bd80      	pop	{r7, pc}
 8006064:	20000ec8 	.word	0x20000ec8
 8006068:	20000ec4 	.word	0x20000ec4

0800606c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b08e      	sub	sp, #56	; 0x38
 8006070:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006072:	e0ca      	b.n	800620a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2b00      	cmp	r3, #0
 8006078:	da18      	bge.n	80060ac <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800607a:	1d3b      	adds	r3, r7, #4
 800607c:	3304      	adds	r3, #4
 800607e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006082:	2b00      	cmp	r3, #0
 8006084:	d10a      	bne.n	800609c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800608a:	f383 8811 	msr	BASEPRI, r3
 800608e:	f3bf 8f6f 	isb	sy
 8006092:	f3bf 8f4f 	dsb	sy
 8006096:	61fb      	str	r3, [r7, #28]
}
 8006098:	bf00      	nop
 800609a:	e7fe      	b.n	800609a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800609c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80060a2:	6850      	ldr	r0, [r2, #4]
 80060a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80060a6:	6892      	ldr	r2, [r2, #8]
 80060a8:	4611      	mov	r1, r2
 80060aa:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	f2c0 80aa 	blt.w	8006208 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80060b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060ba:	695b      	ldr	r3, [r3, #20]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d004      	beq.n	80060ca <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80060c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060c2:	3304      	adds	r3, #4
 80060c4:	4618      	mov	r0, r3
 80060c6:	f7fd ff11 	bl	8003eec <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80060ca:	463b      	mov	r3, r7
 80060cc:	4618      	mov	r0, r3
 80060ce:	f7ff ff6b 	bl	8005fa8 <prvSampleTimeNow>
 80060d2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2b09      	cmp	r3, #9
 80060d8:	f200 8097 	bhi.w	800620a <prvProcessReceivedCommands+0x19e>
 80060dc:	a201      	add	r2, pc, #4	; (adr r2, 80060e4 <prvProcessReceivedCommands+0x78>)
 80060de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060e2:	bf00      	nop
 80060e4:	0800610d 	.word	0x0800610d
 80060e8:	0800610d 	.word	0x0800610d
 80060ec:	0800610d 	.word	0x0800610d
 80060f0:	08006181 	.word	0x08006181
 80060f4:	08006195 	.word	0x08006195
 80060f8:	080061df 	.word	0x080061df
 80060fc:	0800610d 	.word	0x0800610d
 8006100:	0800610d 	.word	0x0800610d
 8006104:	08006181 	.word	0x08006181
 8006108:	08006195 	.word	0x08006195
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800610c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800610e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006112:	f043 0301 	orr.w	r3, r3, #1
 8006116:	b2da      	uxtb	r2, r3
 8006118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800611a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800611e:	68ba      	ldr	r2, [r7, #8]
 8006120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006122:	699b      	ldr	r3, [r3, #24]
 8006124:	18d1      	adds	r1, r2, r3
 8006126:	68bb      	ldr	r3, [r7, #8]
 8006128:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800612a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800612c:	f7ff ff5c 	bl	8005fe8 <prvInsertTimerInActiveList>
 8006130:	4603      	mov	r3, r0
 8006132:	2b00      	cmp	r3, #0
 8006134:	d069      	beq.n	800620a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006138:	6a1b      	ldr	r3, [r3, #32]
 800613a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800613c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800613e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006140:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006144:	f003 0304 	and.w	r3, r3, #4
 8006148:	2b00      	cmp	r3, #0
 800614a:	d05e      	beq.n	800620a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800614c:	68ba      	ldr	r2, [r7, #8]
 800614e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006150:	699b      	ldr	r3, [r3, #24]
 8006152:	441a      	add	r2, r3
 8006154:	2300      	movs	r3, #0
 8006156:	9300      	str	r3, [sp, #0]
 8006158:	2300      	movs	r3, #0
 800615a:	2100      	movs	r1, #0
 800615c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800615e:	f7ff fe05 	bl	8005d6c <xTimerGenericCommand>
 8006162:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006164:	6a3b      	ldr	r3, [r7, #32]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d14f      	bne.n	800620a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800616a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800616e:	f383 8811 	msr	BASEPRI, r3
 8006172:	f3bf 8f6f 	isb	sy
 8006176:	f3bf 8f4f 	dsb	sy
 800617a:	61bb      	str	r3, [r7, #24]
}
 800617c:	bf00      	nop
 800617e:	e7fe      	b.n	800617e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006182:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006186:	f023 0301 	bic.w	r3, r3, #1
 800618a:	b2da      	uxtb	r2, r3
 800618c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800618e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006192:	e03a      	b.n	800620a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006196:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800619a:	f043 0301 	orr.w	r3, r3, #1
 800619e:	b2da      	uxtb	r2, r3
 80061a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80061a6:	68ba      	ldr	r2, [r7, #8]
 80061a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061aa:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80061ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ae:	699b      	ldr	r3, [r3, #24]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d10a      	bne.n	80061ca <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80061b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061b8:	f383 8811 	msr	BASEPRI, r3
 80061bc:	f3bf 8f6f 	isb	sy
 80061c0:	f3bf 8f4f 	dsb	sy
 80061c4:	617b      	str	r3, [r7, #20]
}
 80061c6:	bf00      	nop
 80061c8:	e7fe      	b.n	80061c8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80061ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061cc:	699a      	ldr	r2, [r3, #24]
 80061ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061d0:	18d1      	adds	r1, r2, r3
 80061d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80061d8:	f7ff ff06 	bl	8005fe8 <prvInsertTimerInActiveList>
					break;
 80061dc:	e015      	b.n	800620a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80061de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80061e4:	f003 0302 	and.w	r3, r3, #2
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d103      	bne.n	80061f4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80061ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80061ee:	f000 fbdf 	bl	80069b0 <vPortFree>
 80061f2:	e00a      	b.n	800620a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80061f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80061fa:	f023 0301 	bic.w	r3, r3, #1
 80061fe:	b2da      	uxtb	r2, r3
 8006200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006202:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006206:	e000      	b.n	800620a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006208:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800620a:	4b08      	ldr	r3, [pc, #32]	; (800622c <prvProcessReceivedCommands+0x1c0>)
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	1d39      	adds	r1, r7, #4
 8006210:	2200      	movs	r2, #0
 8006212:	4618      	mov	r0, r3
 8006214:	f7fe f96c 	bl	80044f0 <xQueueReceive>
 8006218:	4603      	mov	r3, r0
 800621a:	2b00      	cmp	r3, #0
 800621c:	f47f af2a 	bne.w	8006074 <prvProcessReceivedCommands+0x8>
	}
}
 8006220:	bf00      	nop
 8006222:	bf00      	nop
 8006224:	3730      	adds	r7, #48	; 0x30
 8006226:	46bd      	mov	sp, r7
 8006228:	bd80      	pop	{r7, pc}
 800622a:	bf00      	nop
 800622c:	20000ecc 	.word	0x20000ecc

08006230 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b088      	sub	sp, #32
 8006234:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006236:	e048      	b.n	80062ca <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006238:	4b2d      	ldr	r3, [pc, #180]	; (80062f0 <prvSwitchTimerLists+0xc0>)
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	68db      	ldr	r3, [r3, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006242:	4b2b      	ldr	r3, [pc, #172]	; (80062f0 <prvSwitchTimerLists+0xc0>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	68db      	ldr	r3, [r3, #12]
 8006248:	68db      	ldr	r3, [r3, #12]
 800624a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	3304      	adds	r3, #4
 8006250:	4618      	mov	r0, r3
 8006252:	f7fd fe4b 	bl	8003eec <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	6a1b      	ldr	r3, [r3, #32]
 800625a:	68f8      	ldr	r0, [r7, #12]
 800625c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006264:	f003 0304 	and.w	r3, r3, #4
 8006268:	2b00      	cmp	r3, #0
 800626a:	d02e      	beq.n	80062ca <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	699b      	ldr	r3, [r3, #24]
 8006270:	693a      	ldr	r2, [r7, #16]
 8006272:	4413      	add	r3, r2
 8006274:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006276:	68ba      	ldr	r2, [r7, #8]
 8006278:	693b      	ldr	r3, [r7, #16]
 800627a:	429a      	cmp	r2, r3
 800627c:	d90e      	bls.n	800629c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	68ba      	ldr	r2, [r7, #8]
 8006282:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	68fa      	ldr	r2, [r7, #12]
 8006288:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800628a:	4b19      	ldr	r3, [pc, #100]	; (80062f0 <prvSwitchTimerLists+0xc0>)
 800628c:	681a      	ldr	r2, [r3, #0]
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	3304      	adds	r3, #4
 8006292:	4619      	mov	r1, r3
 8006294:	4610      	mov	r0, r2
 8006296:	f7fd fdf0 	bl	8003e7a <vListInsert>
 800629a:	e016      	b.n	80062ca <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800629c:	2300      	movs	r3, #0
 800629e:	9300      	str	r3, [sp, #0]
 80062a0:	2300      	movs	r3, #0
 80062a2:	693a      	ldr	r2, [r7, #16]
 80062a4:	2100      	movs	r1, #0
 80062a6:	68f8      	ldr	r0, [r7, #12]
 80062a8:	f7ff fd60 	bl	8005d6c <xTimerGenericCommand>
 80062ac:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d10a      	bne.n	80062ca <prvSwitchTimerLists+0x9a>
	__asm volatile
 80062b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062b8:	f383 8811 	msr	BASEPRI, r3
 80062bc:	f3bf 8f6f 	isb	sy
 80062c0:	f3bf 8f4f 	dsb	sy
 80062c4:	603b      	str	r3, [r7, #0]
}
 80062c6:	bf00      	nop
 80062c8:	e7fe      	b.n	80062c8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80062ca:	4b09      	ldr	r3, [pc, #36]	; (80062f0 <prvSwitchTimerLists+0xc0>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d1b1      	bne.n	8006238 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80062d4:	4b06      	ldr	r3, [pc, #24]	; (80062f0 <prvSwitchTimerLists+0xc0>)
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80062da:	4b06      	ldr	r3, [pc, #24]	; (80062f4 <prvSwitchTimerLists+0xc4>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4a04      	ldr	r2, [pc, #16]	; (80062f0 <prvSwitchTimerLists+0xc0>)
 80062e0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80062e2:	4a04      	ldr	r2, [pc, #16]	; (80062f4 <prvSwitchTimerLists+0xc4>)
 80062e4:	697b      	ldr	r3, [r7, #20]
 80062e6:	6013      	str	r3, [r2, #0]
}
 80062e8:	bf00      	nop
 80062ea:	3718      	adds	r7, #24
 80062ec:	46bd      	mov	sp, r7
 80062ee:	bd80      	pop	{r7, pc}
 80062f0:	20000ec4 	.word	0x20000ec4
 80062f4:	20000ec8 	.word	0x20000ec8

080062f8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b082      	sub	sp, #8
 80062fc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80062fe:	f000 f969 	bl	80065d4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006302:	4b15      	ldr	r3, [pc, #84]	; (8006358 <prvCheckForValidListAndQueue+0x60>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d120      	bne.n	800634c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800630a:	4814      	ldr	r0, [pc, #80]	; (800635c <prvCheckForValidListAndQueue+0x64>)
 800630c:	f7fd fd64 	bl	8003dd8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006310:	4813      	ldr	r0, [pc, #76]	; (8006360 <prvCheckForValidListAndQueue+0x68>)
 8006312:	f7fd fd61 	bl	8003dd8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006316:	4b13      	ldr	r3, [pc, #76]	; (8006364 <prvCheckForValidListAndQueue+0x6c>)
 8006318:	4a10      	ldr	r2, [pc, #64]	; (800635c <prvCheckForValidListAndQueue+0x64>)
 800631a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800631c:	4b12      	ldr	r3, [pc, #72]	; (8006368 <prvCheckForValidListAndQueue+0x70>)
 800631e:	4a10      	ldr	r2, [pc, #64]	; (8006360 <prvCheckForValidListAndQueue+0x68>)
 8006320:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006322:	2300      	movs	r3, #0
 8006324:	9300      	str	r3, [sp, #0]
 8006326:	4b11      	ldr	r3, [pc, #68]	; (800636c <prvCheckForValidListAndQueue+0x74>)
 8006328:	4a11      	ldr	r2, [pc, #68]	; (8006370 <prvCheckForValidListAndQueue+0x78>)
 800632a:	2110      	movs	r1, #16
 800632c:	200a      	movs	r0, #10
 800632e:	f7fd fe6f 	bl	8004010 <xQueueGenericCreateStatic>
 8006332:	4603      	mov	r3, r0
 8006334:	4a08      	ldr	r2, [pc, #32]	; (8006358 <prvCheckForValidListAndQueue+0x60>)
 8006336:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006338:	4b07      	ldr	r3, [pc, #28]	; (8006358 <prvCheckForValidListAndQueue+0x60>)
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d005      	beq.n	800634c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006340:	4b05      	ldr	r3, [pc, #20]	; (8006358 <prvCheckForValidListAndQueue+0x60>)
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	490b      	ldr	r1, [pc, #44]	; (8006374 <prvCheckForValidListAndQueue+0x7c>)
 8006346:	4618      	mov	r0, r3
 8006348:	f7fe fb7e 	bl	8004a48 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800634c:	f000 f972 	bl	8006634 <vPortExitCritical>
}
 8006350:	bf00      	nop
 8006352:	46bd      	mov	sp, r7
 8006354:	bd80      	pop	{r7, pc}
 8006356:	bf00      	nop
 8006358:	20000ecc 	.word	0x20000ecc
 800635c:	20000e9c 	.word	0x20000e9c
 8006360:	20000eb0 	.word	0x20000eb0
 8006364:	20000ec4 	.word	0x20000ec4
 8006368:	20000ec8 	.word	0x20000ec8
 800636c:	20000f78 	.word	0x20000f78
 8006370:	20000ed8 	.word	0x20000ed8
 8006374:	08007d4c 	.word	0x08007d4c

08006378 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006378:	b480      	push	{r7}
 800637a:	b085      	sub	sp, #20
 800637c:	af00      	add	r7, sp, #0
 800637e:	60f8      	str	r0, [r7, #12]
 8006380:	60b9      	str	r1, [r7, #8]
 8006382:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	3b04      	subs	r3, #4
 8006388:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006390:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	3b04      	subs	r3, #4
 8006396:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006398:	68bb      	ldr	r3, [r7, #8]
 800639a:	f023 0201 	bic.w	r2, r3, #1
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	3b04      	subs	r3, #4
 80063a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80063a8:	4a0c      	ldr	r2, [pc, #48]	; (80063dc <pxPortInitialiseStack+0x64>)
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	3b14      	subs	r3, #20
 80063b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80063b4:	687a      	ldr	r2, [r7, #4]
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	3b04      	subs	r3, #4
 80063be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	f06f 0202 	mvn.w	r2, #2
 80063c6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	3b20      	subs	r3, #32
 80063cc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80063ce:	68fb      	ldr	r3, [r7, #12]
}
 80063d0:	4618      	mov	r0, r3
 80063d2:	3714      	adds	r7, #20
 80063d4:	46bd      	mov	sp, r7
 80063d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063da:	4770      	bx	lr
 80063dc:	080063e1 	.word	0x080063e1

080063e0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80063e0:	b480      	push	{r7}
 80063e2:	b085      	sub	sp, #20
 80063e4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80063e6:	2300      	movs	r3, #0
 80063e8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80063ea:	4b12      	ldr	r3, [pc, #72]	; (8006434 <prvTaskExitError+0x54>)
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80063f2:	d00a      	beq.n	800640a <prvTaskExitError+0x2a>
	__asm volatile
 80063f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063f8:	f383 8811 	msr	BASEPRI, r3
 80063fc:	f3bf 8f6f 	isb	sy
 8006400:	f3bf 8f4f 	dsb	sy
 8006404:	60fb      	str	r3, [r7, #12]
}
 8006406:	bf00      	nop
 8006408:	e7fe      	b.n	8006408 <prvTaskExitError+0x28>
	__asm volatile
 800640a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800640e:	f383 8811 	msr	BASEPRI, r3
 8006412:	f3bf 8f6f 	isb	sy
 8006416:	f3bf 8f4f 	dsb	sy
 800641a:	60bb      	str	r3, [r7, #8]
}
 800641c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800641e:	bf00      	nop
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d0fc      	beq.n	8006420 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006426:	bf00      	nop
 8006428:	bf00      	nop
 800642a:	3714      	adds	r7, #20
 800642c:	46bd      	mov	sp, r7
 800642e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006432:	4770      	bx	lr
 8006434:	200000c8 	.word	0x200000c8
	...

08006440 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006440:	4b07      	ldr	r3, [pc, #28]	; (8006460 <pxCurrentTCBConst2>)
 8006442:	6819      	ldr	r1, [r3, #0]
 8006444:	6808      	ldr	r0, [r1, #0]
 8006446:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800644a:	f380 8809 	msr	PSP, r0
 800644e:	f3bf 8f6f 	isb	sy
 8006452:	f04f 0000 	mov.w	r0, #0
 8006456:	f380 8811 	msr	BASEPRI, r0
 800645a:	4770      	bx	lr
 800645c:	f3af 8000 	nop.w

08006460 <pxCurrentTCBConst2>:
 8006460:	2000099c 	.word	0x2000099c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006464:	bf00      	nop
 8006466:	bf00      	nop

08006468 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006468:	4808      	ldr	r0, [pc, #32]	; (800648c <prvPortStartFirstTask+0x24>)
 800646a:	6800      	ldr	r0, [r0, #0]
 800646c:	6800      	ldr	r0, [r0, #0]
 800646e:	f380 8808 	msr	MSP, r0
 8006472:	f04f 0000 	mov.w	r0, #0
 8006476:	f380 8814 	msr	CONTROL, r0
 800647a:	b662      	cpsie	i
 800647c:	b661      	cpsie	f
 800647e:	f3bf 8f4f 	dsb	sy
 8006482:	f3bf 8f6f 	isb	sy
 8006486:	df00      	svc	0
 8006488:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800648a:	bf00      	nop
 800648c:	e000ed08 	.word	0xe000ed08

08006490 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b086      	sub	sp, #24
 8006494:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006496:	4b46      	ldr	r3, [pc, #280]	; (80065b0 <xPortStartScheduler+0x120>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4a46      	ldr	r2, [pc, #280]	; (80065b4 <xPortStartScheduler+0x124>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d10a      	bne.n	80064b6 <xPortStartScheduler+0x26>
	__asm volatile
 80064a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064a4:	f383 8811 	msr	BASEPRI, r3
 80064a8:	f3bf 8f6f 	isb	sy
 80064ac:	f3bf 8f4f 	dsb	sy
 80064b0:	613b      	str	r3, [r7, #16]
}
 80064b2:	bf00      	nop
 80064b4:	e7fe      	b.n	80064b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80064b6:	4b3e      	ldr	r3, [pc, #248]	; (80065b0 <xPortStartScheduler+0x120>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	4a3f      	ldr	r2, [pc, #252]	; (80065b8 <xPortStartScheduler+0x128>)
 80064bc:	4293      	cmp	r3, r2
 80064be:	d10a      	bne.n	80064d6 <xPortStartScheduler+0x46>
	__asm volatile
 80064c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064c4:	f383 8811 	msr	BASEPRI, r3
 80064c8:	f3bf 8f6f 	isb	sy
 80064cc:	f3bf 8f4f 	dsb	sy
 80064d0:	60fb      	str	r3, [r7, #12]
}
 80064d2:	bf00      	nop
 80064d4:	e7fe      	b.n	80064d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80064d6:	4b39      	ldr	r3, [pc, #228]	; (80065bc <xPortStartScheduler+0x12c>)
 80064d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80064da:	697b      	ldr	r3, [r7, #20]
 80064dc:	781b      	ldrb	r3, [r3, #0]
 80064de:	b2db      	uxtb	r3, r3
 80064e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80064e2:	697b      	ldr	r3, [r7, #20]
 80064e4:	22ff      	movs	r2, #255	; 0xff
 80064e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80064e8:	697b      	ldr	r3, [r7, #20]
 80064ea:	781b      	ldrb	r3, [r3, #0]
 80064ec:	b2db      	uxtb	r3, r3
 80064ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80064f0:	78fb      	ldrb	r3, [r7, #3]
 80064f2:	b2db      	uxtb	r3, r3
 80064f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80064f8:	b2da      	uxtb	r2, r3
 80064fa:	4b31      	ldr	r3, [pc, #196]	; (80065c0 <xPortStartScheduler+0x130>)
 80064fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80064fe:	4b31      	ldr	r3, [pc, #196]	; (80065c4 <xPortStartScheduler+0x134>)
 8006500:	2207      	movs	r2, #7
 8006502:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006504:	e009      	b.n	800651a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006506:	4b2f      	ldr	r3, [pc, #188]	; (80065c4 <xPortStartScheduler+0x134>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	3b01      	subs	r3, #1
 800650c:	4a2d      	ldr	r2, [pc, #180]	; (80065c4 <xPortStartScheduler+0x134>)
 800650e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006510:	78fb      	ldrb	r3, [r7, #3]
 8006512:	b2db      	uxtb	r3, r3
 8006514:	005b      	lsls	r3, r3, #1
 8006516:	b2db      	uxtb	r3, r3
 8006518:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800651a:	78fb      	ldrb	r3, [r7, #3]
 800651c:	b2db      	uxtb	r3, r3
 800651e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006522:	2b80      	cmp	r3, #128	; 0x80
 8006524:	d0ef      	beq.n	8006506 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006526:	4b27      	ldr	r3, [pc, #156]	; (80065c4 <xPortStartScheduler+0x134>)
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f1c3 0307 	rsb	r3, r3, #7
 800652e:	2b04      	cmp	r3, #4
 8006530:	d00a      	beq.n	8006548 <xPortStartScheduler+0xb8>
	__asm volatile
 8006532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006536:	f383 8811 	msr	BASEPRI, r3
 800653a:	f3bf 8f6f 	isb	sy
 800653e:	f3bf 8f4f 	dsb	sy
 8006542:	60bb      	str	r3, [r7, #8]
}
 8006544:	bf00      	nop
 8006546:	e7fe      	b.n	8006546 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006548:	4b1e      	ldr	r3, [pc, #120]	; (80065c4 <xPortStartScheduler+0x134>)
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	021b      	lsls	r3, r3, #8
 800654e:	4a1d      	ldr	r2, [pc, #116]	; (80065c4 <xPortStartScheduler+0x134>)
 8006550:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006552:	4b1c      	ldr	r3, [pc, #112]	; (80065c4 <xPortStartScheduler+0x134>)
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800655a:	4a1a      	ldr	r2, [pc, #104]	; (80065c4 <xPortStartScheduler+0x134>)
 800655c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	b2da      	uxtb	r2, r3
 8006562:	697b      	ldr	r3, [r7, #20]
 8006564:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006566:	4b18      	ldr	r3, [pc, #96]	; (80065c8 <xPortStartScheduler+0x138>)
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	4a17      	ldr	r2, [pc, #92]	; (80065c8 <xPortStartScheduler+0x138>)
 800656c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006570:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006572:	4b15      	ldr	r3, [pc, #84]	; (80065c8 <xPortStartScheduler+0x138>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	4a14      	ldr	r2, [pc, #80]	; (80065c8 <xPortStartScheduler+0x138>)
 8006578:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800657c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800657e:	f000 f8dd 	bl	800673c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006582:	4b12      	ldr	r3, [pc, #72]	; (80065cc <xPortStartScheduler+0x13c>)
 8006584:	2200      	movs	r2, #0
 8006586:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006588:	f000 f8fc 	bl	8006784 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800658c:	4b10      	ldr	r3, [pc, #64]	; (80065d0 <xPortStartScheduler+0x140>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4a0f      	ldr	r2, [pc, #60]	; (80065d0 <xPortStartScheduler+0x140>)
 8006592:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006596:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006598:	f7ff ff66 	bl	8006468 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800659c:	f7fe fe64 	bl	8005268 <vTaskSwitchContext>
	prvTaskExitError();
 80065a0:	f7ff ff1e 	bl	80063e0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80065a4:	2300      	movs	r3, #0
}
 80065a6:	4618      	mov	r0, r3
 80065a8:	3718      	adds	r7, #24
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bd80      	pop	{r7, pc}
 80065ae:	bf00      	nop
 80065b0:	e000ed00 	.word	0xe000ed00
 80065b4:	410fc271 	.word	0x410fc271
 80065b8:	410fc270 	.word	0x410fc270
 80065bc:	e000e400 	.word	0xe000e400
 80065c0:	20000fc8 	.word	0x20000fc8
 80065c4:	20000fcc 	.word	0x20000fcc
 80065c8:	e000ed20 	.word	0xe000ed20
 80065cc:	200000c8 	.word	0x200000c8
 80065d0:	e000ef34 	.word	0xe000ef34

080065d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80065d4:	b480      	push	{r7}
 80065d6:	b083      	sub	sp, #12
 80065d8:	af00      	add	r7, sp, #0
	__asm volatile
 80065da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065de:	f383 8811 	msr	BASEPRI, r3
 80065e2:	f3bf 8f6f 	isb	sy
 80065e6:	f3bf 8f4f 	dsb	sy
 80065ea:	607b      	str	r3, [r7, #4]
}
 80065ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80065ee:	4b0f      	ldr	r3, [pc, #60]	; (800662c <vPortEnterCritical+0x58>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	3301      	adds	r3, #1
 80065f4:	4a0d      	ldr	r2, [pc, #52]	; (800662c <vPortEnterCritical+0x58>)
 80065f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80065f8:	4b0c      	ldr	r3, [pc, #48]	; (800662c <vPortEnterCritical+0x58>)
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	2b01      	cmp	r3, #1
 80065fe:	d10f      	bne.n	8006620 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006600:	4b0b      	ldr	r3, [pc, #44]	; (8006630 <vPortEnterCritical+0x5c>)
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	b2db      	uxtb	r3, r3
 8006606:	2b00      	cmp	r3, #0
 8006608:	d00a      	beq.n	8006620 <vPortEnterCritical+0x4c>
	__asm volatile
 800660a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800660e:	f383 8811 	msr	BASEPRI, r3
 8006612:	f3bf 8f6f 	isb	sy
 8006616:	f3bf 8f4f 	dsb	sy
 800661a:	603b      	str	r3, [r7, #0]
}
 800661c:	bf00      	nop
 800661e:	e7fe      	b.n	800661e <vPortEnterCritical+0x4a>
	}
}
 8006620:	bf00      	nop
 8006622:	370c      	adds	r7, #12
 8006624:	46bd      	mov	sp, r7
 8006626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662a:	4770      	bx	lr
 800662c:	200000c8 	.word	0x200000c8
 8006630:	e000ed04 	.word	0xe000ed04

08006634 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006634:	b480      	push	{r7}
 8006636:	b083      	sub	sp, #12
 8006638:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800663a:	4b12      	ldr	r3, [pc, #72]	; (8006684 <vPortExitCritical+0x50>)
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d10a      	bne.n	8006658 <vPortExitCritical+0x24>
	__asm volatile
 8006642:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006646:	f383 8811 	msr	BASEPRI, r3
 800664a:	f3bf 8f6f 	isb	sy
 800664e:	f3bf 8f4f 	dsb	sy
 8006652:	607b      	str	r3, [r7, #4]
}
 8006654:	bf00      	nop
 8006656:	e7fe      	b.n	8006656 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006658:	4b0a      	ldr	r3, [pc, #40]	; (8006684 <vPortExitCritical+0x50>)
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	3b01      	subs	r3, #1
 800665e:	4a09      	ldr	r2, [pc, #36]	; (8006684 <vPortExitCritical+0x50>)
 8006660:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006662:	4b08      	ldr	r3, [pc, #32]	; (8006684 <vPortExitCritical+0x50>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d105      	bne.n	8006676 <vPortExitCritical+0x42>
 800666a:	2300      	movs	r3, #0
 800666c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	f383 8811 	msr	BASEPRI, r3
}
 8006674:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006676:	bf00      	nop
 8006678:	370c      	adds	r7, #12
 800667a:	46bd      	mov	sp, r7
 800667c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006680:	4770      	bx	lr
 8006682:	bf00      	nop
 8006684:	200000c8 	.word	0x200000c8
	...

08006690 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006690:	f3ef 8009 	mrs	r0, PSP
 8006694:	f3bf 8f6f 	isb	sy
 8006698:	4b15      	ldr	r3, [pc, #84]	; (80066f0 <pxCurrentTCBConst>)
 800669a:	681a      	ldr	r2, [r3, #0]
 800669c:	f01e 0f10 	tst.w	lr, #16
 80066a0:	bf08      	it	eq
 80066a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80066a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066aa:	6010      	str	r0, [r2, #0]
 80066ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80066b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80066b4:	f380 8811 	msr	BASEPRI, r0
 80066b8:	f3bf 8f4f 	dsb	sy
 80066bc:	f3bf 8f6f 	isb	sy
 80066c0:	f7fe fdd2 	bl	8005268 <vTaskSwitchContext>
 80066c4:	f04f 0000 	mov.w	r0, #0
 80066c8:	f380 8811 	msr	BASEPRI, r0
 80066cc:	bc09      	pop	{r0, r3}
 80066ce:	6819      	ldr	r1, [r3, #0]
 80066d0:	6808      	ldr	r0, [r1, #0]
 80066d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066d6:	f01e 0f10 	tst.w	lr, #16
 80066da:	bf08      	it	eq
 80066dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80066e0:	f380 8809 	msr	PSP, r0
 80066e4:	f3bf 8f6f 	isb	sy
 80066e8:	4770      	bx	lr
 80066ea:	bf00      	nop
 80066ec:	f3af 8000 	nop.w

080066f0 <pxCurrentTCBConst>:
 80066f0:	2000099c 	.word	0x2000099c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80066f4:	bf00      	nop
 80066f6:	bf00      	nop

080066f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b082      	sub	sp, #8
 80066fc:	af00      	add	r7, sp, #0
	__asm volatile
 80066fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006702:	f383 8811 	msr	BASEPRI, r3
 8006706:	f3bf 8f6f 	isb	sy
 800670a:	f3bf 8f4f 	dsb	sy
 800670e:	607b      	str	r3, [r7, #4]
}
 8006710:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006712:	f7fe fcef 	bl	80050f4 <xTaskIncrementTick>
 8006716:	4603      	mov	r3, r0
 8006718:	2b00      	cmp	r3, #0
 800671a:	d003      	beq.n	8006724 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800671c:	4b06      	ldr	r3, [pc, #24]	; (8006738 <xPortSysTickHandler+0x40>)
 800671e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006722:	601a      	str	r2, [r3, #0]
 8006724:	2300      	movs	r3, #0
 8006726:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	f383 8811 	msr	BASEPRI, r3
}
 800672e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006730:	bf00      	nop
 8006732:	3708      	adds	r7, #8
 8006734:	46bd      	mov	sp, r7
 8006736:	bd80      	pop	{r7, pc}
 8006738:	e000ed04 	.word	0xe000ed04

0800673c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800673c:	b480      	push	{r7}
 800673e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006740:	4b0b      	ldr	r3, [pc, #44]	; (8006770 <vPortSetupTimerInterrupt+0x34>)
 8006742:	2200      	movs	r2, #0
 8006744:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006746:	4b0b      	ldr	r3, [pc, #44]	; (8006774 <vPortSetupTimerInterrupt+0x38>)
 8006748:	2200      	movs	r2, #0
 800674a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800674c:	4b0a      	ldr	r3, [pc, #40]	; (8006778 <vPortSetupTimerInterrupt+0x3c>)
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	4a0a      	ldr	r2, [pc, #40]	; (800677c <vPortSetupTimerInterrupt+0x40>)
 8006752:	fba2 2303 	umull	r2, r3, r2, r3
 8006756:	099b      	lsrs	r3, r3, #6
 8006758:	4a09      	ldr	r2, [pc, #36]	; (8006780 <vPortSetupTimerInterrupt+0x44>)
 800675a:	3b01      	subs	r3, #1
 800675c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800675e:	4b04      	ldr	r3, [pc, #16]	; (8006770 <vPortSetupTimerInterrupt+0x34>)
 8006760:	2207      	movs	r2, #7
 8006762:	601a      	str	r2, [r3, #0]
}
 8006764:	bf00      	nop
 8006766:	46bd      	mov	sp, r7
 8006768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676c:	4770      	bx	lr
 800676e:	bf00      	nop
 8006770:	e000e010 	.word	0xe000e010
 8006774:	e000e018 	.word	0xe000e018
 8006778:	200000bc 	.word	0x200000bc
 800677c:	10624dd3 	.word	0x10624dd3
 8006780:	e000e014 	.word	0xe000e014

08006784 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006784:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006794 <vPortEnableVFP+0x10>
 8006788:	6801      	ldr	r1, [r0, #0]
 800678a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800678e:	6001      	str	r1, [r0, #0]
 8006790:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006792:	bf00      	nop
 8006794:	e000ed88 	.word	0xe000ed88

08006798 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006798:	b480      	push	{r7}
 800679a:	b085      	sub	sp, #20
 800679c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800679e:	f3ef 8305 	mrs	r3, IPSR
 80067a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	2b0f      	cmp	r3, #15
 80067a8:	d914      	bls.n	80067d4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80067aa:	4a17      	ldr	r2, [pc, #92]	; (8006808 <vPortValidateInterruptPriority+0x70>)
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	4413      	add	r3, r2
 80067b0:	781b      	ldrb	r3, [r3, #0]
 80067b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80067b4:	4b15      	ldr	r3, [pc, #84]	; (800680c <vPortValidateInterruptPriority+0x74>)
 80067b6:	781b      	ldrb	r3, [r3, #0]
 80067b8:	7afa      	ldrb	r2, [r7, #11]
 80067ba:	429a      	cmp	r2, r3
 80067bc:	d20a      	bcs.n	80067d4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80067be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067c2:	f383 8811 	msr	BASEPRI, r3
 80067c6:	f3bf 8f6f 	isb	sy
 80067ca:	f3bf 8f4f 	dsb	sy
 80067ce:	607b      	str	r3, [r7, #4]
}
 80067d0:	bf00      	nop
 80067d2:	e7fe      	b.n	80067d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80067d4:	4b0e      	ldr	r3, [pc, #56]	; (8006810 <vPortValidateInterruptPriority+0x78>)
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80067dc:	4b0d      	ldr	r3, [pc, #52]	; (8006814 <vPortValidateInterruptPriority+0x7c>)
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	429a      	cmp	r2, r3
 80067e2:	d90a      	bls.n	80067fa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80067e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067e8:	f383 8811 	msr	BASEPRI, r3
 80067ec:	f3bf 8f6f 	isb	sy
 80067f0:	f3bf 8f4f 	dsb	sy
 80067f4:	603b      	str	r3, [r7, #0]
}
 80067f6:	bf00      	nop
 80067f8:	e7fe      	b.n	80067f8 <vPortValidateInterruptPriority+0x60>
	}
 80067fa:	bf00      	nop
 80067fc:	3714      	adds	r7, #20
 80067fe:	46bd      	mov	sp, r7
 8006800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006804:	4770      	bx	lr
 8006806:	bf00      	nop
 8006808:	e000e3f0 	.word	0xe000e3f0
 800680c:	20000fc8 	.word	0x20000fc8
 8006810:	e000ed0c 	.word	0xe000ed0c
 8006814:	20000fcc 	.word	0x20000fcc

08006818 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b08a      	sub	sp, #40	; 0x28
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006820:	2300      	movs	r3, #0
 8006822:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006824:	f7fe fbaa 	bl	8004f7c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006828:	4b5b      	ldr	r3, [pc, #364]	; (8006998 <pvPortMalloc+0x180>)
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d101      	bne.n	8006834 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006830:	f000 f920 	bl	8006a74 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006834:	4b59      	ldr	r3, [pc, #356]	; (800699c <pvPortMalloc+0x184>)
 8006836:	681a      	ldr	r2, [r3, #0]
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	4013      	ands	r3, r2
 800683c:	2b00      	cmp	r3, #0
 800683e:	f040 8093 	bne.w	8006968 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d01d      	beq.n	8006884 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006848:	2208      	movs	r2, #8
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	4413      	add	r3, r2
 800684e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	f003 0307 	and.w	r3, r3, #7
 8006856:	2b00      	cmp	r3, #0
 8006858:	d014      	beq.n	8006884 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	f023 0307 	bic.w	r3, r3, #7
 8006860:	3308      	adds	r3, #8
 8006862:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	f003 0307 	and.w	r3, r3, #7
 800686a:	2b00      	cmp	r3, #0
 800686c:	d00a      	beq.n	8006884 <pvPortMalloc+0x6c>
	__asm volatile
 800686e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006872:	f383 8811 	msr	BASEPRI, r3
 8006876:	f3bf 8f6f 	isb	sy
 800687a:	f3bf 8f4f 	dsb	sy
 800687e:	617b      	str	r3, [r7, #20]
}
 8006880:	bf00      	nop
 8006882:	e7fe      	b.n	8006882 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d06e      	beq.n	8006968 <pvPortMalloc+0x150>
 800688a:	4b45      	ldr	r3, [pc, #276]	; (80069a0 <pvPortMalloc+0x188>)
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	687a      	ldr	r2, [r7, #4]
 8006890:	429a      	cmp	r2, r3
 8006892:	d869      	bhi.n	8006968 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006894:	4b43      	ldr	r3, [pc, #268]	; (80069a4 <pvPortMalloc+0x18c>)
 8006896:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006898:	4b42      	ldr	r3, [pc, #264]	; (80069a4 <pvPortMalloc+0x18c>)
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800689e:	e004      	b.n	80068aa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80068a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80068a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80068aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ac:	685b      	ldr	r3, [r3, #4]
 80068ae:	687a      	ldr	r2, [r7, #4]
 80068b0:	429a      	cmp	r2, r3
 80068b2:	d903      	bls.n	80068bc <pvPortMalloc+0xa4>
 80068b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d1f1      	bne.n	80068a0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80068bc:	4b36      	ldr	r3, [pc, #216]	; (8006998 <pvPortMalloc+0x180>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068c2:	429a      	cmp	r2, r3
 80068c4:	d050      	beq.n	8006968 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80068c6:	6a3b      	ldr	r3, [r7, #32]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	2208      	movs	r2, #8
 80068cc:	4413      	add	r3, r2
 80068ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80068d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068d2:	681a      	ldr	r2, [r3, #0]
 80068d4:	6a3b      	ldr	r3, [r7, #32]
 80068d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80068d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068da:	685a      	ldr	r2, [r3, #4]
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	1ad2      	subs	r2, r2, r3
 80068e0:	2308      	movs	r3, #8
 80068e2:	005b      	lsls	r3, r3, #1
 80068e4:	429a      	cmp	r2, r3
 80068e6:	d91f      	bls.n	8006928 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80068e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	4413      	add	r3, r2
 80068ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80068f0:	69bb      	ldr	r3, [r7, #24]
 80068f2:	f003 0307 	and.w	r3, r3, #7
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d00a      	beq.n	8006910 <pvPortMalloc+0xf8>
	__asm volatile
 80068fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068fe:	f383 8811 	msr	BASEPRI, r3
 8006902:	f3bf 8f6f 	isb	sy
 8006906:	f3bf 8f4f 	dsb	sy
 800690a:	613b      	str	r3, [r7, #16]
}
 800690c:	bf00      	nop
 800690e:	e7fe      	b.n	800690e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006912:	685a      	ldr	r2, [r3, #4]
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	1ad2      	subs	r2, r2, r3
 8006918:	69bb      	ldr	r3, [r7, #24]
 800691a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800691c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800691e:	687a      	ldr	r2, [r7, #4]
 8006920:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006922:	69b8      	ldr	r0, [r7, #24]
 8006924:	f000 f908 	bl	8006b38 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006928:	4b1d      	ldr	r3, [pc, #116]	; (80069a0 <pvPortMalloc+0x188>)
 800692a:	681a      	ldr	r2, [r3, #0]
 800692c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800692e:	685b      	ldr	r3, [r3, #4]
 8006930:	1ad3      	subs	r3, r2, r3
 8006932:	4a1b      	ldr	r2, [pc, #108]	; (80069a0 <pvPortMalloc+0x188>)
 8006934:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006936:	4b1a      	ldr	r3, [pc, #104]	; (80069a0 <pvPortMalloc+0x188>)
 8006938:	681a      	ldr	r2, [r3, #0]
 800693a:	4b1b      	ldr	r3, [pc, #108]	; (80069a8 <pvPortMalloc+0x190>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	429a      	cmp	r2, r3
 8006940:	d203      	bcs.n	800694a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006942:	4b17      	ldr	r3, [pc, #92]	; (80069a0 <pvPortMalloc+0x188>)
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	4a18      	ldr	r2, [pc, #96]	; (80069a8 <pvPortMalloc+0x190>)
 8006948:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800694a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800694c:	685a      	ldr	r2, [r3, #4]
 800694e:	4b13      	ldr	r3, [pc, #76]	; (800699c <pvPortMalloc+0x184>)
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	431a      	orrs	r2, r3
 8006954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006956:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800695a:	2200      	movs	r2, #0
 800695c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800695e:	4b13      	ldr	r3, [pc, #76]	; (80069ac <pvPortMalloc+0x194>)
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	3301      	adds	r3, #1
 8006964:	4a11      	ldr	r2, [pc, #68]	; (80069ac <pvPortMalloc+0x194>)
 8006966:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006968:	f7fe fb16 	bl	8004f98 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800696c:	69fb      	ldr	r3, [r7, #28]
 800696e:	f003 0307 	and.w	r3, r3, #7
 8006972:	2b00      	cmp	r3, #0
 8006974:	d00a      	beq.n	800698c <pvPortMalloc+0x174>
	__asm volatile
 8006976:	f04f 0350 	mov.w	r3, #80	; 0x50
 800697a:	f383 8811 	msr	BASEPRI, r3
 800697e:	f3bf 8f6f 	isb	sy
 8006982:	f3bf 8f4f 	dsb	sy
 8006986:	60fb      	str	r3, [r7, #12]
}
 8006988:	bf00      	nop
 800698a:	e7fe      	b.n	800698a <pvPortMalloc+0x172>
	return pvReturn;
 800698c:	69fb      	ldr	r3, [r7, #28]
}
 800698e:	4618      	mov	r0, r3
 8006990:	3728      	adds	r7, #40	; 0x28
 8006992:	46bd      	mov	sp, r7
 8006994:	bd80      	pop	{r7, pc}
 8006996:	bf00      	nop
 8006998:	20004bd8 	.word	0x20004bd8
 800699c:	20004bec 	.word	0x20004bec
 80069a0:	20004bdc 	.word	0x20004bdc
 80069a4:	20004bd0 	.word	0x20004bd0
 80069a8:	20004be0 	.word	0x20004be0
 80069ac:	20004be4 	.word	0x20004be4

080069b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b086      	sub	sp, #24
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d04d      	beq.n	8006a5e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80069c2:	2308      	movs	r3, #8
 80069c4:	425b      	negs	r3, r3
 80069c6:	697a      	ldr	r2, [r7, #20]
 80069c8:	4413      	add	r3, r2
 80069ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80069cc:	697b      	ldr	r3, [r7, #20]
 80069ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80069d0:	693b      	ldr	r3, [r7, #16]
 80069d2:	685a      	ldr	r2, [r3, #4]
 80069d4:	4b24      	ldr	r3, [pc, #144]	; (8006a68 <vPortFree+0xb8>)
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	4013      	ands	r3, r2
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d10a      	bne.n	80069f4 <vPortFree+0x44>
	__asm volatile
 80069de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069e2:	f383 8811 	msr	BASEPRI, r3
 80069e6:	f3bf 8f6f 	isb	sy
 80069ea:	f3bf 8f4f 	dsb	sy
 80069ee:	60fb      	str	r3, [r7, #12]
}
 80069f0:	bf00      	nop
 80069f2:	e7fe      	b.n	80069f2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80069f4:	693b      	ldr	r3, [r7, #16]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d00a      	beq.n	8006a12 <vPortFree+0x62>
	__asm volatile
 80069fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a00:	f383 8811 	msr	BASEPRI, r3
 8006a04:	f3bf 8f6f 	isb	sy
 8006a08:	f3bf 8f4f 	dsb	sy
 8006a0c:	60bb      	str	r3, [r7, #8]
}
 8006a0e:	bf00      	nop
 8006a10:	e7fe      	b.n	8006a10 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006a12:	693b      	ldr	r3, [r7, #16]
 8006a14:	685a      	ldr	r2, [r3, #4]
 8006a16:	4b14      	ldr	r3, [pc, #80]	; (8006a68 <vPortFree+0xb8>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	4013      	ands	r3, r2
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d01e      	beq.n	8006a5e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006a20:	693b      	ldr	r3, [r7, #16]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d11a      	bne.n	8006a5e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006a28:	693b      	ldr	r3, [r7, #16]
 8006a2a:	685a      	ldr	r2, [r3, #4]
 8006a2c:	4b0e      	ldr	r3, [pc, #56]	; (8006a68 <vPortFree+0xb8>)
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	43db      	mvns	r3, r3
 8006a32:	401a      	ands	r2, r3
 8006a34:	693b      	ldr	r3, [r7, #16]
 8006a36:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006a38:	f7fe faa0 	bl	8004f7c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006a3c:	693b      	ldr	r3, [r7, #16]
 8006a3e:	685a      	ldr	r2, [r3, #4]
 8006a40:	4b0a      	ldr	r3, [pc, #40]	; (8006a6c <vPortFree+0xbc>)
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	4413      	add	r3, r2
 8006a46:	4a09      	ldr	r2, [pc, #36]	; (8006a6c <vPortFree+0xbc>)
 8006a48:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006a4a:	6938      	ldr	r0, [r7, #16]
 8006a4c:	f000 f874 	bl	8006b38 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006a50:	4b07      	ldr	r3, [pc, #28]	; (8006a70 <vPortFree+0xc0>)
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	3301      	adds	r3, #1
 8006a56:	4a06      	ldr	r2, [pc, #24]	; (8006a70 <vPortFree+0xc0>)
 8006a58:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006a5a:	f7fe fa9d 	bl	8004f98 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006a5e:	bf00      	nop
 8006a60:	3718      	adds	r7, #24
 8006a62:	46bd      	mov	sp, r7
 8006a64:	bd80      	pop	{r7, pc}
 8006a66:	bf00      	nop
 8006a68:	20004bec 	.word	0x20004bec
 8006a6c:	20004bdc 	.word	0x20004bdc
 8006a70:	20004be8 	.word	0x20004be8

08006a74 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006a74:	b480      	push	{r7}
 8006a76:	b085      	sub	sp, #20
 8006a78:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006a7a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006a7e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006a80:	4b27      	ldr	r3, [pc, #156]	; (8006b20 <prvHeapInit+0xac>)
 8006a82:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	f003 0307 	and.w	r3, r3, #7
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d00c      	beq.n	8006aa8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	3307      	adds	r3, #7
 8006a92:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	f023 0307 	bic.w	r3, r3, #7
 8006a9a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006a9c:	68ba      	ldr	r2, [r7, #8]
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	1ad3      	subs	r3, r2, r3
 8006aa2:	4a1f      	ldr	r2, [pc, #124]	; (8006b20 <prvHeapInit+0xac>)
 8006aa4:	4413      	add	r3, r2
 8006aa6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006aac:	4a1d      	ldr	r2, [pc, #116]	; (8006b24 <prvHeapInit+0xb0>)
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006ab2:	4b1c      	ldr	r3, [pc, #112]	; (8006b24 <prvHeapInit+0xb0>)
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	68ba      	ldr	r2, [r7, #8]
 8006abc:	4413      	add	r3, r2
 8006abe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006ac0:	2208      	movs	r2, #8
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	1a9b      	subs	r3, r3, r2
 8006ac6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	f023 0307 	bic.w	r3, r3, #7
 8006ace:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	4a15      	ldr	r2, [pc, #84]	; (8006b28 <prvHeapInit+0xb4>)
 8006ad4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006ad6:	4b14      	ldr	r3, [pc, #80]	; (8006b28 <prvHeapInit+0xb4>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	2200      	movs	r2, #0
 8006adc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006ade:	4b12      	ldr	r3, [pc, #72]	; (8006b28 <prvHeapInit+0xb4>)
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	68fa      	ldr	r2, [r7, #12]
 8006aee:	1ad2      	subs	r2, r2, r3
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006af4:	4b0c      	ldr	r3, [pc, #48]	; (8006b28 <prvHeapInit+0xb4>)
 8006af6:	681a      	ldr	r2, [r3, #0]
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	685b      	ldr	r3, [r3, #4]
 8006b00:	4a0a      	ldr	r2, [pc, #40]	; (8006b2c <prvHeapInit+0xb8>)
 8006b02:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	685b      	ldr	r3, [r3, #4]
 8006b08:	4a09      	ldr	r2, [pc, #36]	; (8006b30 <prvHeapInit+0xbc>)
 8006b0a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006b0c:	4b09      	ldr	r3, [pc, #36]	; (8006b34 <prvHeapInit+0xc0>)
 8006b0e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006b12:	601a      	str	r2, [r3, #0]
}
 8006b14:	bf00      	nop
 8006b16:	3714      	adds	r7, #20
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1e:	4770      	bx	lr
 8006b20:	20000fd0 	.word	0x20000fd0
 8006b24:	20004bd0 	.word	0x20004bd0
 8006b28:	20004bd8 	.word	0x20004bd8
 8006b2c:	20004be0 	.word	0x20004be0
 8006b30:	20004bdc 	.word	0x20004bdc
 8006b34:	20004bec 	.word	0x20004bec

08006b38 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006b38:	b480      	push	{r7}
 8006b3a:	b085      	sub	sp, #20
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006b40:	4b28      	ldr	r3, [pc, #160]	; (8006be4 <prvInsertBlockIntoFreeList+0xac>)
 8006b42:	60fb      	str	r3, [r7, #12]
 8006b44:	e002      	b.n	8006b4c <prvInsertBlockIntoFreeList+0x14>
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	60fb      	str	r3, [r7, #12]
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	687a      	ldr	r2, [r7, #4]
 8006b52:	429a      	cmp	r2, r3
 8006b54:	d8f7      	bhi.n	8006b46 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	685b      	ldr	r3, [r3, #4]
 8006b5e:	68ba      	ldr	r2, [r7, #8]
 8006b60:	4413      	add	r3, r2
 8006b62:	687a      	ldr	r2, [r7, #4]
 8006b64:	429a      	cmp	r2, r3
 8006b66:	d108      	bne.n	8006b7a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	685a      	ldr	r2, [r3, #4]
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	685b      	ldr	r3, [r3, #4]
 8006b70:	441a      	add	r2, r3
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	685b      	ldr	r3, [r3, #4]
 8006b82:	68ba      	ldr	r2, [r7, #8]
 8006b84:	441a      	add	r2, r3
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	429a      	cmp	r2, r3
 8006b8c:	d118      	bne.n	8006bc0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681a      	ldr	r2, [r3, #0]
 8006b92:	4b15      	ldr	r3, [pc, #84]	; (8006be8 <prvInsertBlockIntoFreeList+0xb0>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	429a      	cmp	r2, r3
 8006b98:	d00d      	beq.n	8006bb6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	685a      	ldr	r2, [r3, #4]
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	685b      	ldr	r3, [r3, #4]
 8006ba4:	441a      	add	r2, r3
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	681a      	ldr	r2, [r3, #0]
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	601a      	str	r2, [r3, #0]
 8006bb4:	e008      	b.n	8006bc8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006bb6:	4b0c      	ldr	r3, [pc, #48]	; (8006be8 <prvInsertBlockIntoFreeList+0xb0>)
 8006bb8:	681a      	ldr	r2, [r3, #0]
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	601a      	str	r2, [r3, #0]
 8006bbe:	e003      	b.n	8006bc8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681a      	ldr	r2, [r3, #0]
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006bc8:	68fa      	ldr	r2, [r7, #12]
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	429a      	cmp	r2, r3
 8006bce:	d002      	beq.n	8006bd6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	687a      	ldr	r2, [r7, #4]
 8006bd4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006bd6:	bf00      	nop
 8006bd8:	3714      	adds	r7, #20
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be0:	4770      	bx	lr
 8006be2:	bf00      	nop
 8006be4:	20004bd0 	.word	0x20004bd0
 8006be8:	20004bd8 	.word	0x20004bd8

08006bec <__errno>:
 8006bec:	4b01      	ldr	r3, [pc, #4]	; (8006bf4 <__errno+0x8>)
 8006bee:	6818      	ldr	r0, [r3, #0]
 8006bf0:	4770      	bx	lr
 8006bf2:	bf00      	nop
 8006bf4:	200000cc 	.word	0x200000cc

08006bf8 <__libc_init_array>:
 8006bf8:	b570      	push	{r4, r5, r6, lr}
 8006bfa:	4d0d      	ldr	r5, [pc, #52]	; (8006c30 <__libc_init_array+0x38>)
 8006bfc:	4c0d      	ldr	r4, [pc, #52]	; (8006c34 <__libc_init_array+0x3c>)
 8006bfe:	1b64      	subs	r4, r4, r5
 8006c00:	10a4      	asrs	r4, r4, #2
 8006c02:	2600      	movs	r6, #0
 8006c04:	42a6      	cmp	r6, r4
 8006c06:	d109      	bne.n	8006c1c <__libc_init_array+0x24>
 8006c08:	4d0b      	ldr	r5, [pc, #44]	; (8006c38 <__libc_init_array+0x40>)
 8006c0a:	4c0c      	ldr	r4, [pc, #48]	; (8006c3c <__libc_init_array+0x44>)
 8006c0c:	f001 f84e 	bl	8007cac <_init>
 8006c10:	1b64      	subs	r4, r4, r5
 8006c12:	10a4      	asrs	r4, r4, #2
 8006c14:	2600      	movs	r6, #0
 8006c16:	42a6      	cmp	r6, r4
 8006c18:	d105      	bne.n	8006c26 <__libc_init_array+0x2e>
 8006c1a:	bd70      	pop	{r4, r5, r6, pc}
 8006c1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c20:	4798      	blx	r3
 8006c22:	3601      	adds	r6, #1
 8006c24:	e7ee      	b.n	8006c04 <__libc_init_array+0xc>
 8006c26:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c2a:	4798      	blx	r3
 8006c2c:	3601      	adds	r6, #1
 8006c2e:	e7f2      	b.n	8006c16 <__libc_init_array+0x1e>
 8006c30:	08007e34 	.word	0x08007e34
 8006c34:	08007e34 	.word	0x08007e34
 8006c38:	08007e34 	.word	0x08007e34
 8006c3c:	08007e38 	.word	0x08007e38

08006c40 <__itoa>:
 8006c40:	1e93      	subs	r3, r2, #2
 8006c42:	2b22      	cmp	r3, #34	; 0x22
 8006c44:	b510      	push	{r4, lr}
 8006c46:	460c      	mov	r4, r1
 8006c48:	d904      	bls.n	8006c54 <__itoa+0x14>
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	700b      	strb	r3, [r1, #0]
 8006c4e:	461c      	mov	r4, r3
 8006c50:	4620      	mov	r0, r4
 8006c52:	bd10      	pop	{r4, pc}
 8006c54:	2a0a      	cmp	r2, #10
 8006c56:	d109      	bne.n	8006c6c <__itoa+0x2c>
 8006c58:	2800      	cmp	r0, #0
 8006c5a:	da07      	bge.n	8006c6c <__itoa+0x2c>
 8006c5c:	232d      	movs	r3, #45	; 0x2d
 8006c5e:	700b      	strb	r3, [r1, #0]
 8006c60:	4240      	negs	r0, r0
 8006c62:	2101      	movs	r1, #1
 8006c64:	4421      	add	r1, r4
 8006c66:	f000 f84d 	bl	8006d04 <__utoa>
 8006c6a:	e7f1      	b.n	8006c50 <__itoa+0x10>
 8006c6c:	2100      	movs	r1, #0
 8006c6e:	e7f9      	b.n	8006c64 <__itoa+0x24>

08006c70 <itoa>:
 8006c70:	f7ff bfe6 	b.w	8006c40 <__itoa>

08006c74 <memcpy>:
 8006c74:	440a      	add	r2, r1
 8006c76:	4291      	cmp	r1, r2
 8006c78:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006c7c:	d100      	bne.n	8006c80 <memcpy+0xc>
 8006c7e:	4770      	bx	lr
 8006c80:	b510      	push	{r4, lr}
 8006c82:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006c86:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006c8a:	4291      	cmp	r1, r2
 8006c8c:	d1f9      	bne.n	8006c82 <memcpy+0xe>
 8006c8e:	bd10      	pop	{r4, pc}

08006c90 <memset>:
 8006c90:	4402      	add	r2, r0
 8006c92:	4603      	mov	r3, r0
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d100      	bne.n	8006c9a <memset+0xa>
 8006c98:	4770      	bx	lr
 8006c9a:	f803 1b01 	strb.w	r1, [r3], #1
 8006c9e:	e7f9      	b.n	8006c94 <memset+0x4>

08006ca0 <iprintf>:
 8006ca0:	b40f      	push	{r0, r1, r2, r3}
 8006ca2:	4b0a      	ldr	r3, [pc, #40]	; (8006ccc <iprintf+0x2c>)
 8006ca4:	b513      	push	{r0, r1, r4, lr}
 8006ca6:	681c      	ldr	r4, [r3, #0]
 8006ca8:	b124      	cbz	r4, 8006cb4 <iprintf+0x14>
 8006caa:	69a3      	ldr	r3, [r4, #24]
 8006cac:	b913      	cbnz	r3, 8006cb4 <iprintf+0x14>
 8006cae:	4620      	mov	r0, r4
 8006cb0:	f000 f8c2 	bl	8006e38 <__sinit>
 8006cb4:	ab05      	add	r3, sp, #20
 8006cb6:	9a04      	ldr	r2, [sp, #16]
 8006cb8:	68a1      	ldr	r1, [r4, #8]
 8006cba:	9301      	str	r3, [sp, #4]
 8006cbc:	4620      	mov	r0, r4
 8006cbe:	f000 fa2d 	bl	800711c <_vfiprintf_r>
 8006cc2:	b002      	add	sp, #8
 8006cc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006cc8:	b004      	add	sp, #16
 8006cca:	4770      	bx	lr
 8006ccc:	200000cc 	.word	0x200000cc

08006cd0 <time>:
 8006cd0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006cd2:	4b0b      	ldr	r3, [pc, #44]	; (8006d00 <time+0x30>)
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	4669      	mov	r1, sp
 8006cd8:	4604      	mov	r4, r0
 8006cda:	6818      	ldr	r0, [r3, #0]
 8006cdc:	f000 f94a 	bl	8006f74 <_gettimeofday_r>
 8006ce0:	2800      	cmp	r0, #0
 8006ce2:	bfbe      	ittt	lt
 8006ce4:	f04f 32ff 	movlt.w	r2, #4294967295	; 0xffffffff
 8006ce8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006cec:	e9cd 2300 	strdlt	r2, r3, [sp]
 8006cf0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006cf4:	b10c      	cbz	r4, 8006cfa <time+0x2a>
 8006cf6:	e9c4 0100 	strd	r0, r1, [r4]
 8006cfa:	b004      	add	sp, #16
 8006cfc:	bd10      	pop	{r4, pc}
 8006cfe:	bf00      	nop
 8006d00:	200000cc 	.word	0x200000cc

08006d04 <__utoa>:
 8006d04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d06:	4c1f      	ldr	r4, [pc, #124]	; (8006d84 <__utoa+0x80>)
 8006d08:	b08b      	sub	sp, #44	; 0x2c
 8006d0a:	4605      	mov	r5, r0
 8006d0c:	460b      	mov	r3, r1
 8006d0e:	466e      	mov	r6, sp
 8006d10:	f104 0c20 	add.w	ip, r4, #32
 8006d14:	6820      	ldr	r0, [r4, #0]
 8006d16:	6861      	ldr	r1, [r4, #4]
 8006d18:	4637      	mov	r7, r6
 8006d1a:	c703      	stmia	r7!, {r0, r1}
 8006d1c:	3408      	adds	r4, #8
 8006d1e:	4564      	cmp	r4, ip
 8006d20:	463e      	mov	r6, r7
 8006d22:	d1f7      	bne.n	8006d14 <__utoa+0x10>
 8006d24:	7921      	ldrb	r1, [r4, #4]
 8006d26:	7139      	strb	r1, [r7, #4]
 8006d28:	1e91      	subs	r1, r2, #2
 8006d2a:	6820      	ldr	r0, [r4, #0]
 8006d2c:	6038      	str	r0, [r7, #0]
 8006d2e:	2922      	cmp	r1, #34	; 0x22
 8006d30:	f04f 0100 	mov.w	r1, #0
 8006d34:	d904      	bls.n	8006d40 <__utoa+0x3c>
 8006d36:	7019      	strb	r1, [r3, #0]
 8006d38:	460b      	mov	r3, r1
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	b00b      	add	sp, #44	; 0x2c
 8006d3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d40:	1e58      	subs	r0, r3, #1
 8006d42:	4684      	mov	ip, r0
 8006d44:	fbb5 f7f2 	udiv	r7, r5, r2
 8006d48:	fb02 5617 	mls	r6, r2, r7, r5
 8006d4c:	3628      	adds	r6, #40	; 0x28
 8006d4e:	446e      	add	r6, sp
 8006d50:	460c      	mov	r4, r1
 8006d52:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8006d56:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8006d5a:	462e      	mov	r6, r5
 8006d5c:	42b2      	cmp	r2, r6
 8006d5e:	f101 0101 	add.w	r1, r1, #1
 8006d62:	463d      	mov	r5, r7
 8006d64:	d9ee      	bls.n	8006d44 <__utoa+0x40>
 8006d66:	2200      	movs	r2, #0
 8006d68:	545a      	strb	r2, [r3, r1]
 8006d6a:	1919      	adds	r1, r3, r4
 8006d6c:	1aa5      	subs	r5, r4, r2
 8006d6e:	42aa      	cmp	r2, r5
 8006d70:	dae3      	bge.n	8006d3a <__utoa+0x36>
 8006d72:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8006d76:	780e      	ldrb	r6, [r1, #0]
 8006d78:	7006      	strb	r6, [r0, #0]
 8006d7a:	3201      	adds	r2, #1
 8006d7c:	f801 5901 	strb.w	r5, [r1], #-1
 8006d80:	e7f4      	b.n	8006d6c <__utoa+0x68>
 8006d82:	bf00      	nop
 8006d84:	08007d70 	.word	0x08007d70

08006d88 <std>:
 8006d88:	2300      	movs	r3, #0
 8006d8a:	b510      	push	{r4, lr}
 8006d8c:	4604      	mov	r4, r0
 8006d8e:	e9c0 3300 	strd	r3, r3, [r0]
 8006d92:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006d96:	6083      	str	r3, [r0, #8]
 8006d98:	8181      	strh	r1, [r0, #12]
 8006d9a:	6643      	str	r3, [r0, #100]	; 0x64
 8006d9c:	81c2      	strh	r2, [r0, #14]
 8006d9e:	6183      	str	r3, [r0, #24]
 8006da0:	4619      	mov	r1, r3
 8006da2:	2208      	movs	r2, #8
 8006da4:	305c      	adds	r0, #92	; 0x5c
 8006da6:	f7ff ff73 	bl	8006c90 <memset>
 8006daa:	4b05      	ldr	r3, [pc, #20]	; (8006dc0 <std+0x38>)
 8006dac:	6263      	str	r3, [r4, #36]	; 0x24
 8006dae:	4b05      	ldr	r3, [pc, #20]	; (8006dc4 <std+0x3c>)
 8006db0:	62a3      	str	r3, [r4, #40]	; 0x28
 8006db2:	4b05      	ldr	r3, [pc, #20]	; (8006dc8 <std+0x40>)
 8006db4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006db6:	4b05      	ldr	r3, [pc, #20]	; (8006dcc <std+0x44>)
 8006db8:	6224      	str	r4, [r4, #32]
 8006dba:	6323      	str	r3, [r4, #48]	; 0x30
 8006dbc:	bd10      	pop	{r4, pc}
 8006dbe:	bf00      	nop
 8006dc0:	080076c5 	.word	0x080076c5
 8006dc4:	080076e7 	.word	0x080076e7
 8006dc8:	0800771f 	.word	0x0800771f
 8006dcc:	08007743 	.word	0x08007743

08006dd0 <_cleanup_r>:
 8006dd0:	4901      	ldr	r1, [pc, #4]	; (8006dd8 <_cleanup_r+0x8>)
 8006dd2:	f000 b8af 	b.w	8006f34 <_fwalk_reent>
 8006dd6:	bf00      	nop
 8006dd8:	08007a1d 	.word	0x08007a1d

08006ddc <__sfmoreglue>:
 8006ddc:	b570      	push	{r4, r5, r6, lr}
 8006dde:	2268      	movs	r2, #104	; 0x68
 8006de0:	1e4d      	subs	r5, r1, #1
 8006de2:	4355      	muls	r5, r2
 8006de4:	460e      	mov	r6, r1
 8006de6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006dea:	f000 f8f9 	bl	8006fe0 <_malloc_r>
 8006dee:	4604      	mov	r4, r0
 8006df0:	b140      	cbz	r0, 8006e04 <__sfmoreglue+0x28>
 8006df2:	2100      	movs	r1, #0
 8006df4:	e9c0 1600 	strd	r1, r6, [r0]
 8006df8:	300c      	adds	r0, #12
 8006dfa:	60a0      	str	r0, [r4, #8]
 8006dfc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006e00:	f7ff ff46 	bl	8006c90 <memset>
 8006e04:	4620      	mov	r0, r4
 8006e06:	bd70      	pop	{r4, r5, r6, pc}

08006e08 <__sfp_lock_acquire>:
 8006e08:	4801      	ldr	r0, [pc, #4]	; (8006e10 <__sfp_lock_acquire+0x8>)
 8006e0a:	f000 b8c6 	b.w	8006f9a <__retarget_lock_acquire_recursive>
 8006e0e:	bf00      	nop
 8006e10:	20004bf1 	.word	0x20004bf1

08006e14 <__sfp_lock_release>:
 8006e14:	4801      	ldr	r0, [pc, #4]	; (8006e1c <__sfp_lock_release+0x8>)
 8006e16:	f000 b8c1 	b.w	8006f9c <__retarget_lock_release_recursive>
 8006e1a:	bf00      	nop
 8006e1c:	20004bf1 	.word	0x20004bf1

08006e20 <__sinit_lock_acquire>:
 8006e20:	4801      	ldr	r0, [pc, #4]	; (8006e28 <__sinit_lock_acquire+0x8>)
 8006e22:	f000 b8ba 	b.w	8006f9a <__retarget_lock_acquire_recursive>
 8006e26:	bf00      	nop
 8006e28:	20004bf2 	.word	0x20004bf2

08006e2c <__sinit_lock_release>:
 8006e2c:	4801      	ldr	r0, [pc, #4]	; (8006e34 <__sinit_lock_release+0x8>)
 8006e2e:	f000 b8b5 	b.w	8006f9c <__retarget_lock_release_recursive>
 8006e32:	bf00      	nop
 8006e34:	20004bf2 	.word	0x20004bf2

08006e38 <__sinit>:
 8006e38:	b510      	push	{r4, lr}
 8006e3a:	4604      	mov	r4, r0
 8006e3c:	f7ff fff0 	bl	8006e20 <__sinit_lock_acquire>
 8006e40:	69a3      	ldr	r3, [r4, #24]
 8006e42:	b11b      	cbz	r3, 8006e4c <__sinit+0x14>
 8006e44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e48:	f7ff bff0 	b.w	8006e2c <__sinit_lock_release>
 8006e4c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006e50:	6523      	str	r3, [r4, #80]	; 0x50
 8006e52:	4b13      	ldr	r3, [pc, #76]	; (8006ea0 <__sinit+0x68>)
 8006e54:	4a13      	ldr	r2, [pc, #76]	; (8006ea4 <__sinit+0x6c>)
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	62a2      	str	r2, [r4, #40]	; 0x28
 8006e5a:	42a3      	cmp	r3, r4
 8006e5c:	bf04      	itt	eq
 8006e5e:	2301      	moveq	r3, #1
 8006e60:	61a3      	streq	r3, [r4, #24]
 8006e62:	4620      	mov	r0, r4
 8006e64:	f000 f820 	bl	8006ea8 <__sfp>
 8006e68:	6060      	str	r0, [r4, #4]
 8006e6a:	4620      	mov	r0, r4
 8006e6c:	f000 f81c 	bl	8006ea8 <__sfp>
 8006e70:	60a0      	str	r0, [r4, #8]
 8006e72:	4620      	mov	r0, r4
 8006e74:	f000 f818 	bl	8006ea8 <__sfp>
 8006e78:	2200      	movs	r2, #0
 8006e7a:	60e0      	str	r0, [r4, #12]
 8006e7c:	2104      	movs	r1, #4
 8006e7e:	6860      	ldr	r0, [r4, #4]
 8006e80:	f7ff ff82 	bl	8006d88 <std>
 8006e84:	68a0      	ldr	r0, [r4, #8]
 8006e86:	2201      	movs	r2, #1
 8006e88:	2109      	movs	r1, #9
 8006e8a:	f7ff ff7d 	bl	8006d88 <std>
 8006e8e:	68e0      	ldr	r0, [r4, #12]
 8006e90:	2202      	movs	r2, #2
 8006e92:	2112      	movs	r1, #18
 8006e94:	f7ff ff78 	bl	8006d88 <std>
 8006e98:	2301      	movs	r3, #1
 8006e9a:	61a3      	str	r3, [r4, #24]
 8006e9c:	e7d2      	b.n	8006e44 <__sinit+0xc>
 8006e9e:	bf00      	nop
 8006ea0:	08007d6c 	.word	0x08007d6c
 8006ea4:	08006dd1 	.word	0x08006dd1

08006ea8 <__sfp>:
 8006ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006eaa:	4607      	mov	r7, r0
 8006eac:	f7ff ffac 	bl	8006e08 <__sfp_lock_acquire>
 8006eb0:	4b1e      	ldr	r3, [pc, #120]	; (8006f2c <__sfp+0x84>)
 8006eb2:	681e      	ldr	r6, [r3, #0]
 8006eb4:	69b3      	ldr	r3, [r6, #24]
 8006eb6:	b913      	cbnz	r3, 8006ebe <__sfp+0x16>
 8006eb8:	4630      	mov	r0, r6
 8006eba:	f7ff ffbd 	bl	8006e38 <__sinit>
 8006ebe:	3648      	adds	r6, #72	; 0x48
 8006ec0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006ec4:	3b01      	subs	r3, #1
 8006ec6:	d503      	bpl.n	8006ed0 <__sfp+0x28>
 8006ec8:	6833      	ldr	r3, [r6, #0]
 8006eca:	b30b      	cbz	r3, 8006f10 <__sfp+0x68>
 8006ecc:	6836      	ldr	r6, [r6, #0]
 8006ece:	e7f7      	b.n	8006ec0 <__sfp+0x18>
 8006ed0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006ed4:	b9d5      	cbnz	r5, 8006f0c <__sfp+0x64>
 8006ed6:	4b16      	ldr	r3, [pc, #88]	; (8006f30 <__sfp+0x88>)
 8006ed8:	60e3      	str	r3, [r4, #12]
 8006eda:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006ede:	6665      	str	r5, [r4, #100]	; 0x64
 8006ee0:	f000 f85a 	bl	8006f98 <__retarget_lock_init_recursive>
 8006ee4:	f7ff ff96 	bl	8006e14 <__sfp_lock_release>
 8006ee8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006eec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006ef0:	6025      	str	r5, [r4, #0]
 8006ef2:	61a5      	str	r5, [r4, #24]
 8006ef4:	2208      	movs	r2, #8
 8006ef6:	4629      	mov	r1, r5
 8006ef8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006efc:	f7ff fec8 	bl	8006c90 <memset>
 8006f00:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006f04:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006f08:	4620      	mov	r0, r4
 8006f0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f0c:	3468      	adds	r4, #104	; 0x68
 8006f0e:	e7d9      	b.n	8006ec4 <__sfp+0x1c>
 8006f10:	2104      	movs	r1, #4
 8006f12:	4638      	mov	r0, r7
 8006f14:	f7ff ff62 	bl	8006ddc <__sfmoreglue>
 8006f18:	4604      	mov	r4, r0
 8006f1a:	6030      	str	r0, [r6, #0]
 8006f1c:	2800      	cmp	r0, #0
 8006f1e:	d1d5      	bne.n	8006ecc <__sfp+0x24>
 8006f20:	f7ff ff78 	bl	8006e14 <__sfp_lock_release>
 8006f24:	230c      	movs	r3, #12
 8006f26:	603b      	str	r3, [r7, #0]
 8006f28:	e7ee      	b.n	8006f08 <__sfp+0x60>
 8006f2a:	bf00      	nop
 8006f2c:	08007d6c 	.word	0x08007d6c
 8006f30:	ffff0001 	.word	0xffff0001

08006f34 <_fwalk_reent>:
 8006f34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f38:	4606      	mov	r6, r0
 8006f3a:	4688      	mov	r8, r1
 8006f3c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006f40:	2700      	movs	r7, #0
 8006f42:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006f46:	f1b9 0901 	subs.w	r9, r9, #1
 8006f4a:	d505      	bpl.n	8006f58 <_fwalk_reent+0x24>
 8006f4c:	6824      	ldr	r4, [r4, #0]
 8006f4e:	2c00      	cmp	r4, #0
 8006f50:	d1f7      	bne.n	8006f42 <_fwalk_reent+0xe>
 8006f52:	4638      	mov	r0, r7
 8006f54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f58:	89ab      	ldrh	r3, [r5, #12]
 8006f5a:	2b01      	cmp	r3, #1
 8006f5c:	d907      	bls.n	8006f6e <_fwalk_reent+0x3a>
 8006f5e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006f62:	3301      	adds	r3, #1
 8006f64:	d003      	beq.n	8006f6e <_fwalk_reent+0x3a>
 8006f66:	4629      	mov	r1, r5
 8006f68:	4630      	mov	r0, r6
 8006f6a:	47c0      	blx	r8
 8006f6c:	4307      	orrs	r7, r0
 8006f6e:	3568      	adds	r5, #104	; 0x68
 8006f70:	e7e9      	b.n	8006f46 <_fwalk_reent+0x12>
	...

08006f74 <_gettimeofday_r>:
 8006f74:	b538      	push	{r3, r4, r5, lr}
 8006f76:	4d07      	ldr	r5, [pc, #28]	; (8006f94 <_gettimeofday_r+0x20>)
 8006f78:	2300      	movs	r3, #0
 8006f7a:	4604      	mov	r4, r0
 8006f7c:	4608      	mov	r0, r1
 8006f7e:	4611      	mov	r1, r2
 8006f80:	602b      	str	r3, [r5, #0]
 8006f82:	f000 fe8b 	bl	8007c9c <_gettimeofday>
 8006f86:	1c43      	adds	r3, r0, #1
 8006f88:	d102      	bne.n	8006f90 <_gettimeofday_r+0x1c>
 8006f8a:	682b      	ldr	r3, [r5, #0]
 8006f8c:	b103      	cbz	r3, 8006f90 <_gettimeofday_r+0x1c>
 8006f8e:	6023      	str	r3, [r4, #0]
 8006f90:	bd38      	pop	{r3, r4, r5, pc}
 8006f92:	bf00      	nop
 8006f94:	20004bfc 	.word	0x20004bfc

08006f98 <__retarget_lock_init_recursive>:
 8006f98:	4770      	bx	lr

08006f9a <__retarget_lock_acquire_recursive>:
 8006f9a:	4770      	bx	lr

08006f9c <__retarget_lock_release_recursive>:
 8006f9c:	4770      	bx	lr
	...

08006fa0 <sbrk_aligned>:
 8006fa0:	b570      	push	{r4, r5, r6, lr}
 8006fa2:	4e0e      	ldr	r6, [pc, #56]	; (8006fdc <sbrk_aligned+0x3c>)
 8006fa4:	460c      	mov	r4, r1
 8006fa6:	6831      	ldr	r1, [r6, #0]
 8006fa8:	4605      	mov	r5, r0
 8006faa:	b911      	cbnz	r1, 8006fb2 <sbrk_aligned+0x12>
 8006fac:	f000 fb7a 	bl	80076a4 <_sbrk_r>
 8006fb0:	6030      	str	r0, [r6, #0]
 8006fb2:	4621      	mov	r1, r4
 8006fb4:	4628      	mov	r0, r5
 8006fb6:	f000 fb75 	bl	80076a4 <_sbrk_r>
 8006fba:	1c43      	adds	r3, r0, #1
 8006fbc:	d00a      	beq.n	8006fd4 <sbrk_aligned+0x34>
 8006fbe:	1cc4      	adds	r4, r0, #3
 8006fc0:	f024 0403 	bic.w	r4, r4, #3
 8006fc4:	42a0      	cmp	r0, r4
 8006fc6:	d007      	beq.n	8006fd8 <sbrk_aligned+0x38>
 8006fc8:	1a21      	subs	r1, r4, r0
 8006fca:	4628      	mov	r0, r5
 8006fcc:	f000 fb6a 	bl	80076a4 <_sbrk_r>
 8006fd0:	3001      	adds	r0, #1
 8006fd2:	d101      	bne.n	8006fd8 <sbrk_aligned+0x38>
 8006fd4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006fd8:	4620      	mov	r0, r4
 8006fda:	bd70      	pop	{r4, r5, r6, pc}
 8006fdc:	20004bf8 	.word	0x20004bf8

08006fe0 <_malloc_r>:
 8006fe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006fe4:	1ccd      	adds	r5, r1, #3
 8006fe6:	f025 0503 	bic.w	r5, r5, #3
 8006fea:	3508      	adds	r5, #8
 8006fec:	2d0c      	cmp	r5, #12
 8006fee:	bf38      	it	cc
 8006ff0:	250c      	movcc	r5, #12
 8006ff2:	2d00      	cmp	r5, #0
 8006ff4:	4607      	mov	r7, r0
 8006ff6:	db01      	blt.n	8006ffc <_malloc_r+0x1c>
 8006ff8:	42a9      	cmp	r1, r5
 8006ffa:	d905      	bls.n	8007008 <_malloc_r+0x28>
 8006ffc:	230c      	movs	r3, #12
 8006ffe:	603b      	str	r3, [r7, #0]
 8007000:	2600      	movs	r6, #0
 8007002:	4630      	mov	r0, r6
 8007004:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007008:	4e2e      	ldr	r6, [pc, #184]	; (80070c4 <_malloc_r+0xe4>)
 800700a:	f000 fdbb 	bl	8007b84 <__malloc_lock>
 800700e:	6833      	ldr	r3, [r6, #0]
 8007010:	461c      	mov	r4, r3
 8007012:	bb34      	cbnz	r4, 8007062 <_malloc_r+0x82>
 8007014:	4629      	mov	r1, r5
 8007016:	4638      	mov	r0, r7
 8007018:	f7ff ffc2 	bl	8006fa0 <sbrk_aligned>
 800701c:	1c43      	adds	r3, r0, #1
 800701e:	4604      	mov	r4, r0
 8007020:	d14d      	bne.n	80070be <_malloc_r+0xde>
 8007022:	6834      	ldr	r4, [r6, #0]
 8007024:	4626      	mov	r6, r4
 8007026:	2e00      	cmp	r6, #0
 8007028:	d140      	bne.n	80070ac <_malloc_r+0xcc>
 800702a:	6823      	ldr	r3, [r4, #0]
 800702c:	4631      	mov	r1, r6
 800702e:	4638      	mov	r0, r7
 8007030:	eb04 0803 	add.w	r8, r4, r3
 8007034:	f000 fb36 	bl	80076a4 <_sbrk_r>
 8007038:	4580      	cmp	r8, r0
 800703a:	d13a      	bne.n	80070b2 <_malloc_r+0xd2>
 800703c:	6821      	ldr	r1, [r4, #0]
 800703e:	3503      	adds	r5, #3
 8007040:	1a6d      	subs	r5, r5, r1
 8007042:	f025 0503 	bic.w	r5, r5, #3
 8007046:	3508      	adds	r5, #8
 8007048:	2d0c      	cmp	r5, #12
 800704a:	bf38      	it	cc
 800704c:	250c      	movcc	r5, #12
 800704e:	4629      	mov	r1, r5
 8007050:	4638      	mov	r0, r7
 8007052:	f7ff ffa5 	bl	8006fa0 <sbrk_aligned>
 8007056:	3001      	adds	r0, #1
 8007058:	d02b      	beq.n	80070b2 <_malloc_r+0xd2>
 800705a:	6823      	ldr	r3, [r4, #0]
 800705c:	442b      	add	r3, r5
 800705e:	6023      	str	r3, [r4, #0]
 8007060:	e00e      	b.n	8007080 <_malloc_r+0xa0>
 8007062:	6822      	ldr	r2, [r4, #0]
 8007064:	1b52      	subs	r2, r2, r5
 8007066:	d41e      	bmi.n	80070a6 <_malloc_r+0xc6>
 8007068:	2a0b      	cmp	r2, #11
 800706a:	d916      	bls.n	800709a <_malloc_r+0xba>
 800706c:	1961      	adds	r1, r4, r5
 800706e:	42a3      	cmp	r3, r4
 8007070:	6025      	str	r5, [r4, #0]
 8007072:	bf18      	it	ne
 8007074:	6059      	strne	r1, [r3, #4]
 8007076:	6863      	ldr	r3, [r4, #4]
 8007078:	bf08      	it	eq
 800707a:	6031      	streq	r1, [r6, #0]
 800707c:	5162      	str	r2, [r4, r5]
 800707e:	604b      	str	r3, [r1, #4]
 8007080:	4638      	mov	r0, r7
 8007082:	f104 060b 	add.w	r6, r4, #11
 8007086:	f000 fd83 	bl	8007b90 <__malloc_unlock>
 800708a:	f026 0607 	bic.w	r6, r6, #7
 800708e:	1d23      	adds	r3, r4, #4
 8007090:	1af2      	subs	r2, r6, r3
 8007092:	d0b6      	beq.n	8007002 <_malloc_r+0x22>
 8007094:	1b9b      	subs	r3, r3, r6
 8007096:	50a3      	str	r3, [r4, r2]
 8007098:	e7b3      	b.n	8007002 <_malloc_r+0x22>
 800709a:	6862      	ldr	r2, [r4, #4]
 800709c:	42a3      	cmp	r3, r4
 800709e:	bf0c      	ite	eq
 80070a0:	6032      	streq	r2, [r6, #0]
 80070a2:	605a      	strne	r2, [r3, #4]
 80070a4:	e7ec      	b.n	8007080 <_malloc_r+0xa0>
 80070a6:	4623      	mov	r3, r4
 80070a8:	6864      	ldr	r4, [r4, #4]
 80070aa:	e7b2      	b.n	8007012 <_malloc_r+0x32>
 80070ac:	4634      	mov	r4, r6
 80070ae:	6876      	ldr	r6, [r6, #4]
 80070b0:	e7b9      	b.n	8007026 <_malloc_r+0x46>
 80070b2:	230c      	movs	r3, #12
 80070b4:	603b      	str	r3, [r7, #0]
 80070b6:	4638      	mov	r0, r7
 80070b8:	f000 fd6a 	bl	8007b90 <__malloc_unlock>
 80070bc:	e7a1      	b.n	8007002 <_malloc_r+0x22>
 80070be:	6025      	str	r5, [r4, #0]
 80070c0:	e7de      	b.n	8007080 <_malloc_r+0xa0>
 80070c2:	bf00      	nop
 80070c4:	20004bf4 	.word	0x20004bf4

080070c8 <__sfputc_r>:
 80070c8:	6893      	ldr	r3, [r2, #8]
 80070ca:	3b01      	subs	r3, #1
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	b410      	push	{r4}
 80070d0:	6093      	str	r3, [r2, #8]
 80070d2:	da08      	bge.n	80070e6 <__sfputc_r+0x1e>
 80070d4:	6994      	ldr	r4, [r2, #24]
 80070d6:	42a3      	cmp	r3, r4
 80070d8:	db01      	blt.n	80070de <__sfputc_r+0x16>
 80070da:	290a      	cmp	r1, #10
 80070dc:	d103      	bne.n	80070e6 <__sfputc_r+0x1e>
 80070de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80070e2:	f000 bb33 	b.w	800774c <__swbuf_r>
 80070e6:	6813      	ldr	r3, [r2, #0]
 80070e8:	1c58      	adds	r0, r3, #1
 80070ea:	6010      	str	r0, [r2, #0]
 80070ec:	7019      	strb	r1, [r3, #0]
 80070ee:	4608      	mov	r0, r1
 80070f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80070f4:	4770      	bx	lr

080070f6 <__sfputs_r>:
 80070f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070f8:	4606      	mov	r6, r0
 80070fa:	460f      	mov	r7, r1
 80070fc:	4614      	mov	r4, r2
 80070fe:	18d5      	adds	r5, r2, r3
 8007100:	42ac      	cmp	r4, r5
 8007102:	d101      	bne.n	8007108 <__sfputs_r+0x12>
 8007104:	2000      	movs	r0, #0
 8007106:	e007      	b.n	8007118 <__sfputs_r+0x22>
 8007108:	f814 1b01 	ldrb.w	r1, [r4], #1
 800710c:	463a      	mov	r2, r7
 800710e:	4630      	mov	r0, r6
 8007110:	f7ff ffda 	bl	80070c8 <__sfputc_r>
 8007114:	1c43      	adds	r3, r0, #1
 8007116:	d1f3      	bne.n	8007100 <__sfputs_r+0xa>
 8007118:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800711c <_vfiprintf_r>:
 800711c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007120:	460d      	mov	r5, r1
 8007122:	b09d      	sub	sp, #116	; 0x74
 8007124:	4614      	mov	r4, r2
 8007126:	4698      	mov	r8, r3
 8007128:	4606      	mov	r6, r0
 800712a:	b118      	cbz	r0, 8007134 <_vfiprintf_r+0x18>
 800712c:	6983      	ldr	r3, [r0, #24]
 800712e:	b90b      	cbnz	r3, 8007134 <_vfiprintf_r+0x18>
 8007130:	f7ff fe82 	bl	8006e38 <__sinit>
 8007134:	4b89      	ldr	r3, [pc, #548]	; (800735c <_vfiprintf_r+0x240>)
 8007136:	429d      	cmp	r5, r3
 8007138:	d11b      	bne.n	8007172 <_vfiprintf_r+0x56>
 800713a:	6875      	ldr	r5, [r6, #4]
 800713c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800713e:	07d9      	lsls	r1, r3, #31
 8007140:	d405      	bmi.n	800714e <_vfiprintf_r+0x32>
 8007142:	89ab      	ldrh	r3, [r5, #12]
 8007144:	059a      	lsls	r2, r3, #22
 8007146:	d402      	bmi.n	800714e <_vfiprintf_r+0x32>
 8007148:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800714a:	f7ff ff26 	bl	8006f9a <__retarget_lock_acquire_recursive>
 800714e:	89ab      	ldrh	r3, [r5, #12]
 8007150:	071b      	lsls	r3, r3, #28
 8007152:	d501      	bpl.n	8007158 <_vfiprintf_r+0x3c>
 8007154:	692b      	ldr	r3, [r5, #16]
 8007156:	b9eb      	cbnz	r3, 8007194 <_vfiprintf_r+0x78>
 8007158:	4629      	mov	r1, r5
 800715a:	4630      	mov	r0, r6
 800715c:	f000 fb5a 	bl	8007814 <__swsetup_r>
 8007160:	b1c0      	cbz	r0, 8007194 <_vfiprintf_r+0x78>
 8007162:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007164:	07dc      	lsls	r4, r3, #31
 8007166:	d50e      	bpl.n	8007186 <_vfiprintf_r+0x6a>
 8007168:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800716c:	b01d      	add	sp, #116	; 0x74
 800716e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007172:	4b7b      	ldr	r3, [pc, #492]	; (8007360 <_vfiprintf_r+0x244>)
 8007174:	429d      	cmp	r5, r3
 8007176:	d101      	bne.n	800717c <_vfiprintf_r+0x60>
 8007178:	68b5      	ldr	r5, [r6, #8]
 800717a:	e7df      	b.n	800713c <_vfiprintf_r+0x20>
 800717c:	4b79      	ldr	r3, [pc, #484]	; (8007364 <_vfiprintf_r+0x248>)
 800717e:	429d      	cmp	r5, r3
 8007180:	bf08      	it	eq
 8007182:	68f5      	ldreq	r5, [r6, #12]
 8007184:	e7da      	b.n	800713c <_vfiprintf_r+0x20>
 8007186:	89ab      	ldrh	r3, [r5, #12]
 8007188:	0598      	lsls	r0, r3, #22
 800718a:	d4ed      	bmi.n	8007168 <_vfiprintf_r+0x4c>
 800718c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800718e:	f7ff ff05 	bl	8006f9c <__retarget_lock_release_recursive>
 8007192:	e7e9      	b.n	8007168 <_vfiprintf_r+0x4c>
 8007194:	2300      	movs	r3, #0
 8007196:	9309      	str	r3, [sp, #36]	; 0x24
 8007198:	2320      	movs	r3, #32
 800719a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800719e:	f8cd 800c 	str.w	r8, [sp, #12]
 80071a2:	2330      	movs	r3, #48	; 0x30
 80071a4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007368 <_vfiprintf_r+0x24c>
 80071a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80071ac:	f04f 0901 	mov.w	r9, #1
 80071b0:	4623      	mov	r3, r4
 80071b2:	469a      	mov	sl, r3
 80071b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80071b8:	b10a      	cbz	r2, 80071be <_vfiprintf_r+0xa2>
 80071ba:	2a25      	cmp	r2, #37	; 0x25
 80071bc:	d1f9      	bne.n	80071b2 <_vfiprintf_r+0x96>
 80071be:	ebba 0b04 	subs.w	fp, sl, r4
 80071c2:	d00b      	beq.n	80071dc <_vfiprintf_r+0xc0>
 80071c4:	465b      	mov	r3, fp
 80071c6:	4622      	mov	r2, r4
 80071c8:	4629      	mov	r1, r5
 80071ca:	4630      	mov	r0, r6
 80071cc:	f7ff ff93 	bl	80070f6 <__sfputs_r>
 80071d0:	3001      	adds	r0, #1
 80071d2:	f000 80aa 	beq.w	800732a <_vfiprintf_r+0x20e>
 80071d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80071d8:	445a      	add	r2, fp
 80071da:	9209      	str	r2, [sp, #36]	; 0x24
 80071dc:	f89a 3000 	ldrb.w	r3, [sl]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	f000 80a2 	beq.w	800732a <_vfiprintf_r+0x20e>
 80071e6:	2300      	movs	r3, #0
 80071e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80071ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80071f0:	f10a 0a01 	add.w	sl, sl, #1
 80071f4:	9304      	str	r3, [sp, #16]
 80071f6:	9307      	str	r3, [sp, #28]
 80071f8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80071fc:	931a      	str	r3, [sp, #104]	; 0x68
 80071fe:	4654      	mov	r4, sl
 8007200:	2205      	movs	r2, #5
 8007202:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007206:	4858      	ldr	r0, [pc, #352]	; (8007368 <_vfiprintf_r+0x24c>)
 8007208:	f7f9 f802 	bl	8000210 <memchr>
 800720c:	9a04      	ldr	r2, [sp, #16]
 800720e:	b9d8      	cbnz	r0, 8007248 <_vfiprintf_r+0x12c>
 8007210:	06d1      	lsls	r1, r2, #27
 8007212:	bf44      	itt	mi
 8007214:	2320      	movmi	r3, #32
 8007216:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800721a:	0713      	lsls	r3, r2, #28
 800721c:	bf44      	itt	mi
 800721e:	232b      	movmi	r3, #43	; 0x2b
 8007220:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007224:	f89a 3000 	ldrb.w	r3, [sl]
 8007228:	2b2a      	cmp	r3, #42	; 0x2a
 800722a:	d015      	beq.n	8007258 <_vfiprintf_r+0x13c>
 800722c:	9a07      	ldr	r2, [sp, #28]
 800722e:	4654      	mov	r4, sl
 8007230:	2000      	movs	r0, #0
 8007232:	f04f 0c0a 	mov.w	ip, #10
 8007236:	4621      	mov	r1, r4
 8007238:	f811 3b01 	ldrb.w	r3, [r1], #1
 800723c:	3b30      	subs	r3, #48	; 0x30
 800723e:	2b09      	cmp	r3, #9
 8007240:	d94e      	bls.n	80072e0 <_vfiprintf_r+0x1c4>
 8007242:	b1b0      	cbz	r0, 8007272 <_vfiprintf_r+0x156>
 8007244:	9207      	str	r2, [sp, #28]
 8007246:	e014      	b.n	8007272 <_vfiprintf_r+0x156>
 8007248:	eba0 0308 	sub.w	r3, r0, r8
 800724c:	fa09 f303 	lsl.w	r3, r9, r3
 8007250:	4313      	orrs	r3, r2
 8007252:	9304      	str	r3, [sp, #16]
 8007254:	46a2      	mov	sl, r4
 8007256:	e7d2      	b.n	80071fe <_vfiprintf_r+0xe2>
 8007258:	9b03      	ldr	r3, [sp, #12]
 800725a:	1d19      	adds	r1, r3, #4
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	9103      	str	r1, [sp, #12]
 8007260:	2b00      	cmp	r3, #0
 8007262:	bfbb      	ittet	lt
 8007264:	425b      	neglt	r3, r3
 8007266:	f042 0202 	orrlt.w	r2, r2, #2
 800726a:	9307      	strge	r3, [sp, #28]
 800726c:	9307      	strlt	r3, [sp, #28]
 800726e:	bfb8      	it	lt
 8007270:	9204      	strlt	r2, [sp, #16]
 8007272:	7823      	ldrb	r3, [r4, #0]
 8007274:	2b2e      	cmp	r3, #46	; 0x2e
 8007276:	d10c      	bne.n	8007292 <_vfiprintf_r+0x176>
 8007278:	7863      	ldrb	r3, [r4, #1]
 800727a:	2b2a      	cmp	r3, #42	; 0x2a
 800727c:	d135      	bne.n	80072ea <_vfiprintf_r+0x1ce>
 800727e:	9b03      	ldr	r3, [sp, #12]
 8007280:	1d1a      	adds	r2, r3, #4
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	9203      	str	r2, [sp, #12]
 8007286:	2b00      	cmp	r3, #0
 8007288:	bfb8      	it	lt
 800728a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800728e:	3402      	adds	r4, #2
 8007290:	9305      	str	r3, [sp, #20]
 8007292:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007378 <_vfiprintf_r+0x25c>
 8007296:	7821      	ldrb	r1, [r4, #0]
 8007298:	2203      	movs	r2, #3
 800729a:	4650      	mov	r0, sl
 800729c:	f7f8 ffb8 	bl	8000210 <memchr>
 80072a0:	b140      	cbz	r0, 80072b4 <_vfiprintf_r+0x198>
 80072a2:	2340      	movs	r3, #64	; 0x40
 80072a4:	eba0 000a 	sub.w	r0, r0, sl
 80072a8:	fa03 f000 	lsl.w	r0, r3, r0
 80072ac:	9b04      	ldr	r3, [sp, #16]
 80072ae:	4303      	orrs	r3, r0
 80072b0:	3401      	adds	r4, #1
 80072b2:	9304      	str	r3, [sp, #16]
 80072b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072b8:	482c      	ldr	r0, [pc, #176]	; (800736c <_vfiprintf_r+0x250>)
 80072ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80072be:	2206      	movs	r2, #6
 80072c0:	f7f8 ffa6 	bl	8000210 <memchr>
 80072c4:	2800      	cmp	r0, #0
 80072c6:	d03f      	beq.n	8007348 <_vfiprintf_r+0x22c>
 80072c8:	4b29      	ldr	r3, [pc, #164]	; (8007370 <_vfiprintf_r+0x254>)
 80072ca:	bb1b      	cbnz	r3, 8007314 <_vfiprintf_r+0x1f8>
 80072cc:	9b03      	ldr	r3, [sp, #12]
 80072ce:	3307      	adds	r3, #7
 80072d0:	f023 0307 	bic.w	r3, r3, #7
 80072d4:	3308      	adds	r3, #8
 80072d6:	9303      	str	r3, [sp, #12]
 80072d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072da:	443b      	add	r3, r7
 80072dc:	9309      	str	r3, [sp, #36]	; 0x24
 80072de:	e767      	b.n	80071b0 <_vfiprintf_r+0x94>
 80072e0:	fb0c 3202 	mla	r2, ip, r2, r3
 80072e4:	460c      	mov	r4, r1
 80072e6:	2001      	movs	r0, #1
 80072e8:	e7a5      	b.n	8007236 <_vfiprintf_r+0x11a>
 80072ea:	2300      	movs	r3, #0
 80072ec:	3401      	adds	r4, #1
 80072ee:	9305      	str	r3, [sp, #20]
 80072f0:	4619      	mov	r1, r3
 80072f2:	f04f 0c0a 	mov.w	ip, #10
 80072f6:	4620      	mov	r0, r4
 80072f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80072fc:	3a30      	subs	r2, #48	; 0x30
 80072fe:	2a09      	cmp	r2, #9
 8007300:	d903      	bls.n	800730a <_vfiprintf_r+0x1ee>
 8007302:	2b00      	cmp	r3, #0
 8007304:	d0c5      	beq.n	8007292 <_vfiprintf_r+0x176>
 8007306:	9105      	str	r1, [sp, #20]
 8007308:	e7c3      	b.n	8007292 <_vfiprintf_r+0x176>
 800730a:	fb0c 2101 	mla	r1, ip, r1, r2
 800730e:	4604      	mov	r4, r0
 8007310:	2301      	movs	r3, #1
 8007312:	e7f0      	b.n	80072f6 <_vfiprintf_r+0x1da>
 8007314:	ab03      	add	r3, sp, #12
 8007316:	9300      	str	r3, [sp, #0]
 8007318:	462a      	mov	r2, r5
 800731a:	4b16      	ldr	r3, [pc, #88]	; (8007374 <_vfiprintf_r+0x258>)
 800731c:	a904      	add	r1, sp, #16
 800731e:	4630      	mov	r0, r6
 8007320:	f3af 8000 	nop.w
 8007324:	4607      	mov	r7, r0
 8007326:	1c78      	adds	r0, r7, #1
 8007328:	d1d6      	bne.n	80072d8 <_vfiprintf_r+0x1bc>
 800732a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800732c:	07d9      	lsls	r1, r3, #31
 800732e:	d405      	bmi.n	800733c <_vfiprintf_r+0x220>
 8007330:	89ab      	ldrh	r3, [r5, #12]
 8007332:	059a      	lsls	r2, r3, #22
 8007334:	d402      	bmi.n	800733c <_vfiprintf_r+0x220>
 8007336:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007338:	f7ff fe30 	bl	8006f9c <__retarget_lock_release_recursive>
 800733c:	89ab      	ldrh	r3, [r5, #12]
 800733e:	065b      	lsls	r3, r3, #25
 8007340:	f53f af12 	bmi.w	8007168 <_vfiprintf_r+0x4c>
 8007344:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007346:	e711      	b.n	800716c <_vfiprintf_r+0x50>
 8007348:	ab03      	add	r3, sp, #12
 800734a:	9300      	str	r3, [sp, #0]
 800734c:	462a      	mov	r2, r5
 800734e:	4b09      	ldr	r3, [pc, #36]	; (8007374 <_vfiprintf_r+0x258>)
 8007350:	a904      	add	r1, sp, #16
 8007352:	4630      	mov	r0, r6
 8007354:	f000 f880 	bl	8007458 <_printf_i>
 8007358:	e7e4      	b.n	8007324 <_vfiprintf_r+0x208>
 800735a:	bf00      	nop
 800735c:	08007db8 	.word	0x08007db8
 8007360:	08007dd8 	.word	0x08007dd8
 8007364:	08007d98 	.word	0x08007d98
 8007368:	08007df8 	.word	0x08007df8
 800736c:	08007e02 	.word	0x08007e02
 8007370:	00000000 	.word	0x00000000
 8007374:	080070f7 	.word	0x080070f7
 8007378:	08007dfe 	.word	0x08007dfe

0800737c <_printf_common>:
 800737c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007380:	4616      	mov	r6, r2
 8007382:	4699      	mov	r9, r3
 8007384:	688a      	ldr	r2, [r1, #8]
 8007386:	690b      	ldr	r3, [r1, #16]
 8007388:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800738c:	4293      	cmp	r3, r2
 800738e:	bfb8      	it	lt
 8007390:	4613      	movlt	r3, r2
 8007392:	6033      	str	r3, [r6, #0]
 8007394:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007398:	4607      	mov	r7, r0
 800739a:	460c      	mov	r4, r1
 800739c:	b10a      	cbz	r2, 80073a2 <_printf_common+0x26>
 800739e:	3301      	adds	r3, #1
 80073a0:	6033      	str	r3, [r6, #0]
 80073a2:	6823      	ldr	r3, [r4, #0]
 80073a4:	0699      	lsls	r1, r3, #26
 80073a6:	bf42      	ittt	mi
 80073a8:	6833      	ldrmi	r3, [r6, #0]
 80073aa:	3302      	addmi	r3, #2
 80073ac:	6033      	strmi	r3, [r6, #0]
 80073ae:	6825      	ldr	r5, [r4, #0]
 80073b0:	f015 0506 	ands.w	r5, r5, #6
 80073b4:	d106      	bne.n	80073c4 <_printf_common+0x48>
 80073b6:	f104 0a19 	add.w	sl, r4, #25
 80073ba:	68e3      	ldr	r3, [r4, #12]
 80073bc:	6832      	ldr	r2, [r6, #0]
 80073be:	1a9b      	subs	r3, r3, r2
 80073c0:	42ab      	cmp	r3, r5
 80073c2:	dc26      	bgt.n	8007412 <_printf_common+0x96>
 80073c4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80073c8:	1e13      	subs	r3, r2, #0
 80073ca:	6822      	ldr	r2, [r4, #0]
 80073cc:	bf18      	it	ne
 80073ce:	2301      	movne	r3, #1
 80073d0:	0692      	lsls	r2, r2, #26
 80073d2:	d42b      	bmi.n	800742c <_printf_common+0xb0>
 80073d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80073d8:	4649      	mov	r1, r9
 80073da:	4638      	mov	r0, r7
 80073dc:	47c0      	blx	r8
 80073de:	3001      	adds	r0, #1
 80073e0:	d01e      	beq.n	8007420 <_printf_common+0xa4>
 80073e2:	6823      	ldr	r3, [r4, #0]
 80073e4:	68e5      	ldr	r5, [r4, #12]
 80073e6:	6832      	ldr	r2, [r6, #0]
 80073e8:	f003 0306 	and.w	r3, r3, #6
 80073ec:	2b04      	cmp	r3, #4
 80073ee:	bf08      	it	eq
 80073f0:	1aad      	subeq	r5, r5, r2
 80073f2:	68a3      	ldr	r3, [r4, #8]
 80073f4:	6922      	ldr	r2, [r4, #16]
 80073f6:	bf0c      	ite	eq
 80073f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80073fc:	2500      	movne	r5, #0
 80073fe:	4293      	cmp	r3, r2
 8007400:	bfc4      	itt	gt
 8007402:	1a9b      	subgt	r3, r3, r2
 8007404:	18ed      	addgt	r5, r5, r3
 8007406:	2600      	movs	r6, #0
 8007408:	341a      	adds	r4, #26
 800740a:	42b5      	cmp	r5, r6
 800740c:	d11a      	bne.n	8007444 <_printf_common+0xc8>
 800740e:	2000      	movs	r0, #0
 8007410:	e008      	b.n	8007424 <_printf_common+0xa8>
 8007412:	2301      	movs	r3, #1
 8007414:	4652      	mov	r2, sl
 8007416:	4649      	mov	r1, r9
 8007418:	4638      	mov	r0, r7
 800741a:	47c0      	blx	r8
 800741c:	3001      	adds	r0, #1
 800741e:	d103      	bne.n	8007428 <_printf_common+0xac>
 8007420:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007424:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007428:	3501      	adds	r5, #1
 800742a:	e7c6      	b.n	80073ba <_printf_common+0x3e>
 800742c:	18e1      	adds	r1, r4, r3
 800742e:	1c5a      	adds	r2, r3, #1
 8007430:	2030      	movs	r0, #48	; 0x30
 8007432:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007436:	4422      	add	r2, r4
 8007438:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800743c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007440:	3302      	adds	r3, #2
 8007442:	e7c7      	b.n	80073d4 <_printf_common+0x58>
 8007444:	2301      	movs	r3, #1
 8007446:	4622      	mov	r2, r4
 8007448:	4649      	mov	r1, r9
 800744a:	4638      	mov	r0, r7
 800744c:	47c0      	blx	r8
 800744e:	3001      	adds	r0, #1
 8007450:	d0e6      	beq.n	8007420 <_printf_common+0xa4>
 8007452:	3601      	adds	r6, #1
 8007454:	e7d9      	b.n	800740a <_printf_common+0x8e>
	...

08007458 <_printf_i>:
 8007458:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800745c:	7e0f      	ldrb	r7, [r1, #24]
 800745e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007460:	2f78      	cmp	r7, #120	; 0x78
 8007462:	4691      	mov	r9, r2
 8007464:	4680      	mov	r8, r0
 8007466:	460c      	mov	r4, r1
 8007468:	469a      	mov	sl, r3
 800746a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800746e:	d807      	bhi.n	8007480 <_printf_i+0x28>
 8007470:	2f62      	cmp	r7, #98	; 0x62
 8007472:	d80a      	bhi.n	800748a <_printf_i+0x32>
 8007474:	2f00      	cmp	r7, #0
 8007476:	f000 80d8 	beq.w	800762a <_printf_i+0x1d2>
 800747a:	2f58      	cmp	r7, #88	; 0x58
 800747c:	f000 80a3 	beq.w	80075c6 <_printf_i+0x16e>
 8007480:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007484:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007488:	e03a      	b.n	8007500 <_printf_i+0xa8>
 800748a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800748e:	2b15      	cmp	r3, #21
 8007490:	d8f6      	bhi.n	8007480 <_printf_i+0x28>
 8007492:	a101      	add	r1, pc, #4	; (adr r1, 8007498 <_printf_i+0x40>)
 8007494:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007498:	080074f1 	.word	0x080074f1
 800749c:	08007505 	.word	0x08007505
 80074a0:	08007481 	.word	0x08007481
 80074a4:	08007481 	.word	0x08007481
 80074a8:	08007481 	.word	0x08007481
 80074ac:	08007481 	.word	0x08007481
 80074b0:	08007505 	.word	0x08007505
 80074b4:	08007481 	.word	0x08007481
 80074b8:	08007481 	.word	0x08007481
 80074bc:	08007481 	.word	0x08007481
 80074c0:	08007481 	.word	0x08007481
 80074c4:	08007611 	.word	0x08007611
 80074c8:	08007535 	.word	0x08007535
 80074cc:	080075f3 	.word	0x080075f3
 80074d0:	08007481 	.word	0x08007481
 80074d4:	08007481 	.word	0x08007481
 80074d8:	08007633 	.word	0x08007633
 80074dc:	08007481 	.word	0x08007481
 80074e0:	08007535 	.word	0x08007535
 80074e4:	08007481 	.word	0x08007481
 80074e8:	08007481 	.word	0x08007481
 80074ec:	080075fb 	.word	0x080075fb
 80074f0:	682b      	ldr	r3, [r5, #0]
 80074f2:	1d1a      	adds	r2, r3, #4
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	602a      	str	r2, [r5, #0]
 80074f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80074fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007500:	2301      	movs	r3, #1
 8007502:	e0a3      	b.n	800764c <_printf_i+0x1f4>
 8007504:	6820      	ldr	r0, [r4, #0]
 8007506:	6829      	ldr	r1, [r5, #0]
 8007508:	0606      	lsls	r6, r0, #24
 800750a:	f101 0304 	add.w	r3, r1, #4
 800750e:	d50a      	bpl.n	8007526 <_printf_i+0xce>
 8007510:	680e      	ldr	r6, [r1, #0]
 8007512:	602b      	str	r3, [r5, #0]
 8007514:	2e00      	cmp	r6, #0
 8007516:	da03      	bge.n	8007520 <_printf_i+0xc8>
 8007518:	232d      	movs	r3, #45	; 0x2d
 800751a:	4276      	negs	r6, r6
 800751c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007520:	485e      	ldr	r0, [pc, #376]	; (800769c <_printf_i+0x244>)
 8007522:	230a      	movs	r3, #10
 8007524:	e019      	b.n	800755a <_printf_i+0x102>
 8007526:	680e      	ldr	r6, [r1, #0]
 8007528:	602b      	str	r3, [r5, #0]
 800752a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800752e:	bf18      	it	ne
 8007530:	b236      	sxthne	r6, r6
 8007532:	e7ef      	b.n	8007514 <_printf_i+0xbc>
 8007534:	682b      	ldr	r3, [r5, #0]
 8007536:	6820      	ldr	r0, [r4, #0]
 8007538:	1d19      	adds	r1, r3, #4
 800753a:	6029      	str	r1, [r5, #0]
 800753c:	0601      	lsls	r1, r0, #24
 800753e:	d501      	bpl.n	8007544 <_printf_i+0xec>
 8007540:	681e      	ldr	r6, [r3, #0]
 8007542:	e002      	b.n	800754a <_printf_i+0xf2>
 8007544:	0646      	lsls	r6, r0, #25
 8007546:	d5fb      	bpl.n	8007540 <_printf_i+0xe8>
 8007548:	881e      	ldrh	r6, [r3, #0]
 800754a:	4854      	ldr	r0, [pc, #336]	; (800769c <_printf_i+0x244>)
 800754c:	2f6f      	cmp	r7, #111	; 0x6f
 800754e:	bf0c      	ite	eq
 8007550:	2308      	moveq	r3, #8
 8007552:	230a      	movne	r3, #10
 8007554:	2100      	movs	r1, #0
 8007556:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800755a:	6865      	ldr	r5, [r4, #4]
 800755c:	60a5      	str	r5, [r4, #8]
 800755e:	2d00      	cmp	r5, #0
 8007560:	bfa2      	ittt	ge
 8007562:	6821      	ldrge	r1, [r4, #0]
 8007564:	f021 0104 	bicge.w	r1, r1, #4
 8007568:	6021      	strge	r1, [r4, #0]
 800756a:	b90e      	cbnz	r6, 8007570 <_printf_i+0x118>
 800756c:	2d00      	cmp	r5, #0
 800756e:	d04d      	beq.n	800760c <_printf_i+0x1b4>
 8007570:	4615      	mov	r5, r2
 8007572:	fbb6 f1f3 	udiv	r1, r6, r3
 8007576:	fb03 6711 	mls	r7, r3, r1, r6
 800757a:	5dc7      	ldrb	r7, [r0, r7]
 800757c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007580:	4637      	mov	r7, r6
 8007582:	42bb      	cmp	r3, r7
 8007584:	460e      	mov	r6, r1
 8007586:	d9f4      	bls.n	8007572 <_printf_i+0x11a>
 8007588:	2b08      	cmp	r3, #8
 800758a:	d10b      	bne.n	80075a4 <_printf_i+0x14c>
 800758c:	6823      	ldr	r3, [r4, #0]
 800758e:	07de      	lsls	r6, r3, #31
 8007590:	d508      	bpl.n	80075a4 <_printf_i+0x14c>
 8007592:	6923      	ldr	r3, [r4, #16]
 8007594:	6861      	ldr	r1, [r4, #4]
 8007596:	4299      	cmp	r1, r3
 8007598:	bfde      	ittt	le
 800759a:	2330      	movle	r3, #48	; 0x30
 800759c:	f805 3c01 	strble.w	r3, [r5, #-1]
 80075a0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80075a4:	1b52      	subs	r2, r2, r5
 80075a6:	6122      	str	r2, [r4, #16]
 80075a8:	f8cd a000 	str.w	sl, [sp]
 80075ac:	464b      	mov	r3, r9
 80075ae:	aa03      	add	r2, sp, #12
 80075b0:	4621      	mov	r1, r4
 80075b2:	4640      	mov	r0, r8
 80075b4:	f7ff fee2 	bl	800737c <_printf_common>
 80075b8:	3001      	adds	r0, #1
 80075ba:	d14c      	bne.n	8007656 <_printf_i+0x1fe>
 80075bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80075c0:	b004      	add	sp, #16
 80075c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075c6:	4835      	ldr	r0, [pc, #212]	; (800769c <_printf_i+0x244>)
 80075c8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80075cc:	6829      	ldr	r1, [r5, #0]
 80075ce:	6823      	ldr	r3, [r4, #0]
 80075d0:	f851 6b04 	ldr.w	r6, [r1], #4
 80075d4:	6029      	str	r1, [r5, #0]
 80075d6:	061d      	lsls	r5, r3, #24
 80075d8:	d514      	bpl.n	8007604 <_printf_i+0x1ac>
 80075da:	07df      	lsls	r7, r3, #31
 80075dc:	bf44      	itt	mi
 80075de:	f043 0320 	orrmi.w	r3, r3, #32
 80075e2:	6023      	strmi	r3, [r4, #0]
 80075e4:	b91e      	cbnz	r6, 80075ee <_printf_i+0x196>
 80075e6:	6823      	ldr	r3, [r4, #0]
 80075e8:	f023 0320 	bic.w	r3, r3, #32
 80075ec:	6023      	str	r3, [r4, #0]
 80075ee:	2310      	movs	r3, #16
 80075f0:	e7b0      	b.n	8007554 <_printf_i+0xfc>
 80075f2:	6823      	ldr	r3, [r4, #0]
 80075f4:	f043 0320 	orr.w	r3, r3, #32
 80075f8:	6023      	str	r3, [r4, #0]
 80075fa:	2378      	movs	r3, #120	; 0x78
 80075fc:	4828      	ldr	r0, [pc, #160]	; (80076a0 <_printf_i+0x248>)
 80075fe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007602:	e7e3      	b.n	80075cc <_printf_i+0x174>
 8007604:	0659      	lsls	r1, r3, #25
 8007606:	bf48      	it	mi
 8007608:	b2b6      	uxthmi	r6, r6
 800760a:	e7e6      	b.n	80075da <_printf_i+0x182>
 800760c:	4615      	mov	r5, r2
 800760e:	e7bb      	b.n	8007588 <_printf_i+0x130>
 8007610:	682b      	ldr	r3, [r5, #0]
 8007612:	6826      	ldr	r6, [r4, #0]
 8007614:	6961      	ldr	r1, [r4, #20]
 8007616:	1d18      	adds	r0, r3, #4
 8007618:	6028      	str	r0, [r5, #0]
 800761a:	0635      	lsls	r5, r6, #24
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	d501      	bpl.n	8007624 <_printf_i+0x1cc>
 8007620:	6019      	str	r1, [r3, #0]
 8007622:	e002      	b.n	800762a <_printf_i+0x1d2>
 8007624:	0670      	lsls	r0, r6, #25
 8007626:	d5fb      	bpl.n	8007620 <_printf_i+0x1c8>
 8007628:	8019      	strh	r1, [r3, #0]
 800762a:	2300      	movs	r3, #0
 800762c:	6123      	str	r3, [r4, #16]
 800762e:	4615      	mov	r5, r2
 8007630:	e7ba      	b.n	80075a8 <_printf_i+0x150>
 8007632:	682b      	ldr	r3, [r5, #0]
 8007634:	1d1a      	adds	r2, r3, #4
 8007636:	602a      	str	r2, [r5, #0]
 8007638:	681d      	ldr	r5, [r3, #0]
 800763a:	6862      	ldr	r2, [r4, #4]
 800763c:	2100      	movs	r1, #0
 800763e:	4628      	mov	r0, r5
 8007640:	f7f8 fde6 	bl	8000210 <memchr>
 8007644:	b108      	cbz	r0, 800764a <_printf_i+0x1f2>
 8007646:	1b40      	subs	r0, r0, r5
 8007648:	6060      	str	r0, [r4, #4]
 800764a:	6863      	ldr	r3, [r4, #4]
 800764c:	6123      	str	r3, [r4, #16]
 800764e:	2300      	movs	r3, #0
 8007650:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007654:	e7a8      	b.n	80075a8 <_printf_i+0x150>
 8007656:	6923      	ldr	r3, [r4, #16]
 8007658:	462a      	mov	r2, r5
 800765a:	4649      	mov	r1, r9
 800765c:	4640      	mov	r0, r8
 800765e:	47d0      	blx	sl
 8007660:	3001      	adds	r0, #1
 8007662:	d0ab      	beq.n	80075bc <_printf_i+0x164>
 8007664:	6823      	ldr	r3, [r4, #0]
 8007666:	079b      	lsls	r3, r3, #30
 8007668:	d413      	bmi.n	8007692 <_printf_i+0x23a>
 800766a:	68e0      	ldr	r0, [r4, #12]
 800766c:	9b03      	ldr	r3, [sp, #12]
 800766e:	4298      	cmp	r0, r3
 8007670:	bfb8      	it	lt
 8007672:	4618      	movlt	r0, r3
 8007674:	e7a4      	b.n	80075c0 <_printf_i+0x168>
 8007676:	2301      	movs	r3, #1
 8007678:	4632      	mov	r2, r6
 800767a:	4649      	mov	r1, r9
 800767c:	4640      	mov	r0, r8
 800767e:	47d0      	blx	sl
 8007680:	3001      	adds	r0, #1
 8007682:	d09b      	beq.n	80075bc <_printf_i+0x164>
 8007684:	3501      	adds	r5, #1
 8007686:	68e3      	ldr	r3, [r4, #12]
 8007688:	9903      	ldr	r1, [sp, #12]
 800768a:	1a5b      	subs	r3, r3, r1
 800768c:	42ab      	cmp	r3, r5
 800768e:	dcf2      	bgt.n	8007676 <_printf_i+0x21e>
 8007690:	e7eb      	b.n	800766a <_printf_i+0x212>
 8007692:	2500      	movs	r5, #0
 8007694:	f104 0619 	add.w	r6, r4, #25
 8007698:	e7f5      	b.n	8007686 <_printf_i+0x22e>
 800769a:	bf00      	nop
 800769c:	08007e09 	.word	0x08007e09
 80076a0:	08007e1a 	.word	0x08007e1a

080076a4 <_sbrk_r>:
 80076a4:	b538      	push	{r3, r4, r5, lr}
 80076a6:	4d06      	ldr	r5, [pc, #24]	; (80076c0 <_sbrk_r+0x1c>)
 80076a8:	2300      	movs	r3, #0
 80076aa:	4604      	mov	r4, r0
 80076ac:	4608      	mov	r0, r1
 80076ae:	602b      	str	r3, [r5, #0]
 80076b0:	f7f9 fd16 	bl	80010e0 <_sbrk>
 80076b4:	1c43      	adds	r3, r0, #1
 80076b6:	d102      	bne.n	80076be <_sbrk_r+0x1a>
 80076b8:	682b      	ldr	r3, [r5, #0]
 80076ba:	b103      	cbz	r3, 80076be <_sbrk_r+0x1a>
 80076bc:	6023      	str	r3, [r4, #0]
 80076be:	bd38      	pop	{r3, r4, r5, pc}
 80076c0:	20004bfc 	.word	0x20004bfc

080076c4 <__sread>:
 80076c4:	b510      	push	{r4, lr}
 80076c6:	460c      	mov	r4, r1
 80076c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076cc:	f000 fab2 	bl	8007c34 <_read_r>
 80076d0:	2800      	cmp	r0, #0
 80076d2:	bfab      	itete	ge
 80076d4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80076d6:	89a3      	ldrhlt	r3, [r4, #12]
 80076d8:	181b      	addge	r3, r3, r0
 80076da:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80076de:	bfac      	ite	ge
 80076e0:	6563      	strge	r3, [r4, #84]	; 0x54
 80076e2:	81a3      	strhlt	r3, [r4, #12]
 80076e4:	bd10      	pop	{r4, pc}

080076e6 <__swrite>:
 80076e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076ea:	461f      	mov	r7, r3
 80076ec:	898b      	ldrh	r3, [r1, #12]
 80076ee:	05db      	lsls	r3, r3, #23
 80076f0:	4605      	mov	r5, r0
 80076f2:	460c      	mov	r4, r1
 80076f4:	4616      	mov	r6, r2
 80076f6:	d505      	bpl.n	8007704 <__swrite+0x1e>
 80076f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076fc:	2302      	movs	r3, #2
 80076fe:	2200      	movs	r2, #0
 8007700:	f000 f9c8 	bl	8007a94 <_lseek_r>
 8007704:	89a3      	ldrh	r3, [r4, #12]
 8007706:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800770a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800770e:	81a3      	strh	r3, [r4, #12]
 8007710:	4632      	mov	r2, r6
 8007712:	463b      	mov	r3, r7
 8007714:	4628      	mov	r0, r5
 8007716:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800771a:	f000 b869 	b.w	80077f0 <_write_r>

0800771e <__sseek>:
 800771e:	b510      	push	{r4, lr}
 8007720:	460c      	mov	r4, r1
 8007722:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007726:	f000 f9b5 	bl	8007a94 <_lseek_r>
 800772a:	1c43      	adds	r3, r0, #1
 800772c:	89a3      	ldrh	r3, [r4, #12]
 800772e:	bf15      	itete	ne
 8007730:	6560      	strne	r0, [r4, #84]	; 0x54
 8007732:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007736:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800773a:	81a3      	strheq	r3, [r4, #12]
 800773c:	bf18      	it	ne
 800773e:	81a3      	strhne	r3, [r4, #12]
 8007740:	bd10      	pop	{r4, pc}

08007742 <__sclose>:
 8007742:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007746:	f000 b8d3 	b.w	80078f0 <_close_r>
	...

0800774c <__swbuf_r>:
 800774c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800774e:	460e      	mov	r6, r1
 8007750:	4614      	mov	r4, r2
 8007752:	4605      	mov	r5, r0
 8007754:	b118      	cbz	r0, 800775e <__swbuf_r+0x12>
 8007756:	6983      	ldr	r3, [r0, #24]
 8007758:	b90b      	cbnz	r3, 800775e <__swbuf_r+0x12>
 800775a:	f7ff fb6d 	bl	8006e38 <__sinit>
 800775e:	4b21      	ldr	r3, [pc, #132]	; (80077e4 <__swbuf_r+0x98>)
 8007760:	429c      	cmp	r4, r3
 8007762:	d12b      	bne.n	80077bc <__swbuf_r+0x70>
 8007764:	686c      	ldr	r4, [r5, #4]
 8007766:	69a3      	ldr	r3, [r4, #24]
 8007768:	60a3      	str	r3, [r4, #8]
 800776a:	89a3      	ldrh	r3, [r4, #12]
 800776c:	071a      	lsls	r2, r3, #28
 800776e:	d52f      	bpl.n	80077d0 <__swbuf_r+0x84>
 8007770:	6923      	ldr	r3, [r4, #16]
 8007772:	b36b      	cbz	r3, 80077d0 <__swbuf_r+0x84>
 8007774:	6923      	ldr	r3, [r4, #16]
 8007776:	6820      	ldr	r0, [r4, #0]
 8007778:	1ac0      	subs	r0, r0, r3
 800777a:	6963      	ldr	r3, [r4, #20]
 800777c:	b2f6      	uxtb	r6, r6
 800777e:	4283      	cmp	r3, r0
 8007780:	4637      	mov	r7, r6
 8007782:	dc04      	bgt.n	800778e <__swbuf_r+0x42>
 8007784:	4621      	mov	r1, r4
 8007786:	4628      	mov	r0, r5
 8007788:	f000 f948 	bl	8007a1c <_fflush_r>
 800778c:	bb30      	cbnz	r0, 80077dc <__swbuf_r+0x90>
 800778e:	68a3      	ldr	r3, [r4, #8]
 8007790:	3b01      	subs	r3, #1
 8007792:	60a3      	str	r3, [r4, #8]
 8007794:	6823      	ldr	r3, [r4, #0]
 8007796:	1c5a      	adds	r2, r3, #1
 8007798:	6022      	str	r2, [r4, #0]
 800779a:	701e      	strb	r6, [r3, #0]
 800779c:	6963      	ldr	r3, [r4, #20]
 800779e:	3001      	adds	r0, #1
 80077a0:	4283      	cmp	r3, r0
 80077a2:	d004      	beq.n	80077ae <__swbuf_r+0x62>
 80077a4:	89a3      	ldrh	r3, [r4, #12]
 80077a6:	07db      	lsls	r3, r3, #31
 80077a8:	d506      	bpl.n	80077b8 <__swbuf_r+0x6c>
 80077aa:	2e0a      	cmp	r6, #10
 80077ac:	d104      	bne.n	80077b8 <__swbuf_r+0x6c>
 80077ae:	4621      	mov	r1, r4
 80077b0:	4628      	mov	r0, r5
 80077b2:	f000 f933 	bl	8007a1c <_fflush_r>
 80077b6:	b988      	cbnz	r0, 80077dc <__swbuf_r+0x90>
 80077b8:	4638      	mov	r0, r7
 80077ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80077bc:	4b0a      	ldr	r3, [pc, #40]	; (80077e8 <__swbuf_r+0x9c>)
 80077be:	429c      	cmp	r4, r3
 80077c0:	d101      	bne.n	80077c6 <__swbuf_r+0x7a>
 80077c2:	68ac      	ldr	r4, [r5, #8]
 80077c4:	e7cf      	b.n	8007766 <__swbuf_r+0x1a>
 80077c6:	4b09      	ldr	r3, [pc, #36]	; (80077ec <__swbuf_r+0xa0>)
 80077c8:	429c      	cmp	r4, r3
 80077ca:	bf08      	it	eq
 80077cc:	68ec      	ldreq	r4, [r5, #12]
 80077ce:	e7ca      	b.n	8007766 <__swbuf_r+0x1a>
 80077d0:	4621      	mov	r1, r4
 80077d2:	4628      	mov	r0, r5
 80077d4:	f000 f81e 	bl	8007814 <__swsetup_r>
 80077d8:	2800      	cmp	r0, #0
 80077da:	d0cb      	beq.n	8007774 <__swbuf_r+0x28>
 80077dc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80077e0:	e7ea      	b.n	80077b8 <__swbuf_r+0x6c>
 80077e2:	bf00      	nop
 80077e4:	08007db8 	.word	0x08007db8
 80077e8:	08007dd8 	.word	0x08007dd8
 80077ec:	08007d98 	.word	0x08007d98

080077f0 <_write_r>:
 80077f0:	b538      	push	{r3, r4, r5, lr}
 80077f2:	4d07      	ldr	r5, [pc, #28]	; (8007810 <_write_r+0x20>)
 80077f4:	4604      	mov	r4, r0
 80077f6:	4608      	mov	r0, r1
 80077f8:	4611      	mov	r1, r2
 80077fa:	2200      	movs	r2, #0
 80077fc:	602a      	str	r2, [r5, #0]
 80077fe:	461a      	mov	r2, r3
 8007800:	f7f9 f896 	bl	8000930 <_write>
 8007804:	1c43      	adds	r3, r0, #1
 8007806:	d102      	bne.n	800780e <_write_r+0x1e>
 8007808:	682b      	ldr	r3, [r5, #0]
 800780a:	b103      	cbz	r3, 800780e <_write_r+0x1e>
 800780c:	6023      	str	r3, [r4, #0]
 800780e:	bd38      	pop	{r3, r4, r5, pc}
 8007810:	20004bfc 	.word	0x20004bfc

08007814 <__swsetup_r>:
 8007814:	4b32      	ldr	r3, [pc, #200]	; (80078e0 <__swsetup_r+0xcc>)
 8007816:	b570      	push	{r4, r5, r6, lr}
 8007818:	681d      	ldr	r5, [r3, #0]
 800781a:	4606      	mov	r6, r0
 800781c:	460c      	mov	r4, r1
 800781e:	b125      	cbz	r5, 800782a <__swsetup_r+0x16>
 8007820:	69ab      	ldr	r3, [r5, #24]
 8007822:	b913      	cbnz	r3, 800782a <__swsetup_r+0x16>
 8007824:	4628      	mov	r0, r5
 8007826:	f7ff fb07 	bl	8006e38 <__sinit>
 800782a:	4b2e      	ldr	r3, [pc, #184]	; (80078e4 <__swsetup_r+0xd0>)
 800782c:	429c      	cmp	r4, r3
 800782e:	d10f      	bne.n	8007850 <__swsetup_r+0x3c>
 8007830:	686c      	ldr	r4, [r5, #4]
 8007832:	89a3      	ldrh	r3, [r4, #12]
 8007834:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007838:	0719      	lsls	r1, r3, #28
 800783a:	d42c      	bmi.n	8007896 <__swsetup_r+0x82>
 800783c:	06dd      	lsls	r5, r3, #27
 800783e:	d411      	bmi.n	8007864 <__swsetup_r+0x50>
 8007840:	2309      	movs	r3, #9
 8007842:	6033      	str	r3, [r6, #0]
 8007844:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007848:	81a3      	strh	r3, [r4, #12]
 800784a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800784e:	e03e      	b.n	80078ce <__swsetup_r+0xba>
 8007850:	4b25      	ldr	r3, [pc, #148]	; (80078e8 <__swsetup_r+0xd4>)
 8007852:	429c      	cmp	r4, r3
 8007854:	d101      	bne.n	800785a <__swsetup_r+0x46>
 8007856:	68ac      	ldr	r4, [r5, #8]
 8007858:	e7eb      	b.n	8007832 <__swsetup_r+0x1e>
 800785a:	4b24      	ldr	r3, [pc, #144]	; (80078ec <__swsetup_r+0xd8>)
 800785c:	429c      	cmp	r4, r3
 800785e:	bf08      	it	eq
 8007860:	68ec      	ldreq	r4, [r5, #12]
 8007862:	e7e6      	b.n	8007832 <__swsetup_r+0x1e>
 8007864:	0758      	lsls	r0, r3, #29
 8007866:	d512      	bpl.n	800788e <__swsetup_r+0x7a>
 8007868:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800786a:	b141      	cbz	r1, 800787e <__swsetup_r+0x6a>
 800786c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007870:	4299      	cmp	r1, r3
 8007872:	d002      	beq.n	800787a <__swsetup_r+0x66>
 8007874:	4630      	mov	r0, r6
 8007876:	f000 f991 	bl	8007b9c <_free_r>
 800787a:	2300      	movs	r3, #0
 800787c:	6363      	str	r3, [r4, #52]	; 0x34
 800787e:	89a3      	ldrh	r3, [r4, #12]
 8007880:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007884:	81a3      	strh	r3, [r4, #12]
 8007886:	2300      	movs	r3, #0
 8007888:	6063      	str	r3, [r4, #4]
 800788a:	6923      	ldr	r3, [r4, #16]
 800788c:	6023      	str	r3, [r4, #0]
 800788e:	89a3      	ldrh	r3, [r4, #12]
 8007890:	f043 0308 	orr.w	r3, r3, #8
 8007894:	81a3      	strh	r3, [r4, #12]
 8007896:	6923      	ldr	r3, [r4, #16]
 8007898:	b94b      	cbnz	r3, 80078ae <__swsetup_r+0x9a>
 800789a:	89a3      	ldrh	r3, [r4, #12]
 800789c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80078a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80078a4:	d003      	beq.n	80078ae <__swsetup_r+0x9a>
 80078a6:	4621      	mov	r1, r4
 80078a8:	4630      	mov	r0, r6
 80078aa:	f000 f92b 	bl	8007b04 <__smakebuf_r>
 80078ae:	89a0      	ldrh	r0, [r4, #12]
 80078b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80078b4:	f010 0301 	ands.w	r3, r0, #1
 80078b8:	d00a      	beq.n	80078d0 <__swsetup_r+0xbc>
 80078ba:	2300      	movs	r3, #0
 80078bc:	60a3      	str	r3, [r4, #8]
 80078be:	6963      	ldr	r3, [r4, #20]
 80078c0:	425b      	negs	r3, r3
 80078c2:	61a3      	str	r3, [r4, #24]
 80078c4:	6923      	ldr	r3, [r4, #16]
 80078c6:	b943      	cbnz	r3, 80078da <__swsetup_r+0xc6>
 80078c8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80078cc:	d1ba      	bne.n	8007844 <__swsetup_r+0x30>
 80078ce:	bd70      	pop	{r4, r5, r6, pc}
 80078d0:	0781      	lsls	r1, r0, #30
 80078d2:	bf58      	it	pl
 80078d4:	6963      	ldrpl	r3, [r4, #20]
 80078d6:	60a3      	str	r3, [r4, #8]
 80078d8:	e7f4      	b.n	80078c4 <__swsetup_r+0xb0>
 80078da:	2000      	movs	r0, #0
 80078dc:	e7f7      	b.n	80078ce <__swsetup_r+0xba>
 80078de:	bf00      	nop
 80078e0:	200000cc 	.word	0x200000cc
 80078e4:	08007db8 	.word	0x08007db8
 80078e8:	08007dd8 	.word	0x08007dd8
 80078ec:	08007d98 	.word	0x08007d98

080078f0 <_close_r>:
 80078f0:	b538      	push	{r3, r4, r5, lr}
 80078f2:	4d06      	ldr	r5, [pc, #24]	; (800790c <_close_r+0x1c>)
 80078f4:	2300      	movs	r3, #0
 80078f6:	4604      	mov	r4, r0
 80078f8:	4608      	mov	r0, r1
 80078fa:	602b      	str	r3, [r5, #0]
 80078fc:	f7f9 fbbb 	bl	8001076 <_close>
 8007900:	1c43      	adds	r3, r0, #1
 8007902:	d102      	bne.n	800790a <_close_r+0x1a>
 8007904:	682b      	ldr	r3, [r5, #0]
 8007906:	b103      	cbz	r3, 800790a <_close_r+0x1a>
 8007908:	6023      	str	r3, [r4, #0]
 800790a:	bd38      	pop	{r3, r4, r5, pc}
 800790c:	20004bfc 	.word	0x20004bfc

08007910 <__sflush_r>:
 8007910:	898a      	ldrh	r2, [r1, #12]
 8007912:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007916:	4605      	mov	r5, r0
 8007918:	0710      	lsls	r0, r2, #28
 800791a:	460c      	mov	r4, r1
 800791c:	d458      	bmi.n	80079d0 <__sflush_r+0xc0>
 800791e:	684b      	ldr	r3, [r1, #4]
 8007920:	2b00      	cmp	r3, #0
 8007922:	dc05      	bgt.n	8007930 <__sflush_r+0x20>
 8007924:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007926:	2b00      	cmp	r3, #0
 8007928:	dc02      	bgt.n	8007930 <__sflush_r+0x20>
 800792a:	2000      	movs	r0, #0
 800792c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007930:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007932:	2e00      	cmp	r6, #0
 8007934:	d0f9      	beq.n	800792a <__sflush_r+0x1a>
 8007936:	2300      	movs	r3, #0
 8007938:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800793c:	682f      	ldr	r7, [r5, #0]
 800793e:	602b      	str	r3, [r5, #0]
 8007940:	d032      	beq.n	80079a8 <__sflush_r+0x98>
 8007942:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007944:	89a3      	ldrh	r3, [r4, #12]
 8007946:	075a      	lsls	r2, r3, #29
 8007948:	d505      	bpl.n	8007956 <__sflush_r+0x46>
 800794a:	6863      	ldr	r3, [r4, #4]
 800794c:	1ac0      	subs	r0, r0, r3
 800794e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007950:	b10b      	cbz	r3, 8007956 <__sflush_r+0x46>
 8007952:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007954:	1ac0      	subs	r0, r0, r3
 8007956:	2300      	movs	r3, #0
 8007958:	4602      	mov	r2, r0
 800795a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800795c:	6a21      	ldr	r1, [r4, #32]
 800795e:	4628      	mov	r0, r5
 8007960:	47b0      	blx	r6
 8007962:	1c43      	adds	r3, r0, #1
 8007964:	89a3      	ldrh	r3, [r4, #12]
 8007966:	d106      	bne.n	8007976 <__sflush_r+0x66>
 8007968:	6829      	ldr	r1, [r5, #0]
 800796a:	291d      	cmp	r1, #29
 800796c:	d82c      	bhi.n	80079c8 <__sflush_r+0xb8>
 800796e:	4a2a      	ldr	r2, [pc, #168]	; (8007a18 <__sflush_r+0x108>)
 8007970:	40ca      	lsrs	r2, r1
 8007972:	07d6      	lsls	r6, r2, #31
 8007974:	d528      	bpl.n	80079c8 <__sflush_r+0xb8>
 8007976:	2200      	movs	r2, #0
 8007978:	6062      	str	r2, [r4, #4]
 800797a:	04d9      	lsls	r1, r3, #19
 800797c:	6922      	ldr	r2, [r4, #16]
 800797e:	6022      	str	r2, [r4, #0]
 8007980:	d504      	bpl.n	800798c <__sflush_r+0x7c>
 8007982:	1c42      	adds	r2, r0, #1
 8007984:	d101      	bne.n	800798a <__sflush_r+0x7a>
 8007986:	682b      	ldr	r3, [r5, #0]
 8007988:	b903      	cbnz	r3, 800798c <__sflush_r+0x7c>
 800798a:	6560      	str	r0, [r4, #84]	; 0x54
 800798c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800798e:	602f      	str	r7, [r5, #0]
 8007990:	2900      	cmp	r1, #0
 8007992:	d0ca      	beq.n	800792a <__sflush_r+0x1a>
 8007994:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007998:	4299      	cmp	r1, r3
 800799a:	d002      	beq.n	80079a2 <__sflush_r+0x92>
 800799c:	4628      	mov	r0, r5
 800799e:	f000 f8fd 	bl	8007b9c <_free_r>
 80079a2:	2000      	movs	r0, #0
 80079a4:	6360      	str	r0, [r4, #52]	; 0x34
 80079a6:	e7c1      	b.n	800792c <__sflush_r+0x1c>
 80079a8:	6a21      	ldr	r1, [r4, #32]
 80079aa:	2301      	movs	r3, #1
 80079ac:	4628      	mov	r0, r5
 80079ae:	47b0      	blx	r6
 80079b0:	1c41      	adds	r1, r0, #1
 80079b2:	d1c7      	bne.n	8007944 <__sflush_r+0x34>
 80079b4:	682b      	ldr	r3, [r5, #0]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d0c4      	beq.n	8007944 <__sflush_r+0x34>
 80079ba:	2b1d      	cmp	r3, #29
 80079bc:	d001      	beq.n	80079c2 <__sflush_r+0xb2>
 80079be:	2b16      	cmp	r3, #22
 80079c0:	d101      	bne.n	80079c6 <__sflush_r+0xb6>
 80079c2:	602f      	str	r7, [r5, #0]
 80079c4:	e7b1      	b.n	800792a <__sflush_r+0x1a>
 80079c6:	89a3      	ldrh	r3, [r4, #12]
 80079c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80079cc:	81a3      	strh	r3, [r4, #12]
 80079ce:	e7ad      	b.n	800792c <__sflush_r+0x1c>
 80079d0:	690f      	ldr	r7, [r1, #16]
 80079d2:	2f00      	cmp	r7, #0
 80079d4:	d0a9      	beq.n	800792a <__sflush_r+0x1a>
 80079d6:	0793      	lsls	r3, r2, #30
 80079d8:	680e      	ldr	r6, [r1, #0]
 80079da:	bf08      	it	eq
 80079dc:	694b      	ldreq	r3, [r1, #20]
 80079de:	600f      	str	r7, [r1, #0]
 80079e0:	bf18      	it	ne
 80079e2:	2300      	movne	r3, #0
 80079e4:	eba6 0807 	sub.w	r8, r6, r7
 80079e8:	608b      	str	r3, [r1, #8]
 80079ea:	f1b8 0f00 	cmp.w	r8, #0
 80079ee:	dd9c      	ble.n	800792a <__sflush_r+0x1a>
 80079f0:	6a21      	ldr	r1, [r4, #32]
 80079f2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80079f4:	4643      	mov	r3, r8
 80079f6:	463a      	mov	r2, r7
 80079f8:	4628      	mov	r0, r5
 80079fa:	47b0      	blx	r6
 80079fc:	2800      	cmp	r0, #0
 80079fe:	dc06      	bgt.n	8007a0e <__sflush_r+0xfe>
 8007a00:	89a3      	ldrh	r3, [r4, #12]
 8007a02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a06:	81a3      	strh	r3, [r4, #12]
 8007a08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007a0c:	e78e      	b.n	800792c <__sflush_r+0x1c>
 8007a0e:	4407      	add	r7, r0
 8007a10:	eba8 0800 	sub.w	r8, r8, r0
 8007a14:	e7e9      	b.n	80079ea <__sflush_r+0xda>
 8007a16:	bf00      	nop
 8007a18:	20400001 	.word	0x20400001

08007a1c <_fflush_r>:
 8007a1c:	b538      	push	{r3, r4, r5, lr}
 8007a1e:	690b      	ldr	r3, [r1, #16]
 8007a20:	4605      	mov	r5, r0
 8007a22:	460c      	mov	r4, r1
 8007a24:	b913      	cbnz	r3, 8007a2c <_fflush_r+0x10>
 8007a26:	2500      	movs	r5, #0
 8007a28:	4628      	mov	r0, r5
 8007a2a:	bd38      	pop	{r3, r4, r5, pc}
 8007a2c:	b118      	cbz	r0, 8007a36 <_fflush_r+0x1a>
 8007a2e:	6983      	ldr	r3, [r0, #24]
 8007a30:	b90b      	cbnz	r3, 8007a36 <_fflush_r+0x1a>
 8007a32:	f7ff fa01 	bl	8006e38 <__sinit>
 8007a36:	4b14      	ldr	r3, [pc, #80]	; (8007a88 <_fflush_r+0x6c>)
 8007a38:	429c      	cmp	r4, r3
 8007a3a:	d11b      	bne.n	8007a74 <_fflush_r+0x58>
 8007a3c:	686c      	ldr	r4, [r5, #4]
 8007a3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d0ef      	beq.n	8007a26 <_fflush_r+0xa>
 8007a46:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007a48:	07d0      	lsls	r0, r2, #31
 8007a4a:	d404      	bmi.n	8007a56 <_fflush_r+0x3a>
 8007a4c:	0599      	lsls	r1, r3, #22
 8007a4e:	d402      	bmi.n	8007a56 <_fflush_r+0x3a>
 8007a50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007a52:	f7ff faa2 	bl	8006f9a <__retarget_lock_acquire_recursive>
 8007a56:	4628      	mov	r0, r5
 8007a58:	4621      	mov	r1, r4
 8007a5a:	f7ff ff59 	bl	8007910 <__sflush_r>
 8007a5e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007a60:	07da      	lsls	r2, r3, #31
 8007a62:	4605      	mov	r5, r0
 8007a64:	d4e0      	bmi.n	8007a28 <_fflush_r+0xc>
 8007a66:	89a3      	ldrh	r3, [r4, #12]
 8007a68:	059b      	lsls	r3, r3, #22
 8007a6a:	d4dd      	bmi.n	8007a28 <_fflush_r+0xc>
 8007a6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007a6e:	f7ff fa95 	bl	8006f9c <__retarget_lock_release_recursive>
 8007a72:	e7d9      	b.n	8007a28 <_fflush_r+0xc>
 8007a74:	4b05      	ldr	r3, [pc, #20]	; (8007a8c <_fflush_r+0x70>)
 8007a76:	429c      	cmp	r4, r3
 8007a78:	d101      	bne.n	8007a7e <_fflush_r+0x62>
 8007a7a:	68ac      	ldr	r4, [r5, #8]
 8007a7c:	e7df      	b.n	8007a3e <_fflush_r+0x22>
 8007a7e:	4b04      	ldr	r3, [pc, #16]	; (8007a90 <_fflush_r+0x74>)
 8007a80:	429c      	cmp	r4, r3
 8007a82:	bf08      	it	eq
 8007a84:	68ec      	ldreq	r4, [r5, #12]
 8007a86:	e7da      	b.n	8007a3e <_fflush_r+0x22>
 8007a88:	08007db8 	.word	0x08007db8
 8007a8c:	08007dd8 	.word	0x08007dd8
 8007a90:	08007d98 	.word	0x08007d98

08007a94 <_lseek_r>:
 8007a94:	b538      	push	{r3, r4, r5, lr}
 8007a96:	4d07      	ldr	r5, [pc, #28]	; (8007ab4 <_lseek_r+0x20>)
 8007a98:	4604      	mov	r4, r0
 8007a9a:	4608      	mov	r0, r1
 8007a9c:	4611      	mov	r1, r2
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	602a      	str	r2, [r5, #0]
 8007aa2:	461a      	mov	r2, r3
 8007aa4:	f7f9 fb0e 	bl	80010c4 <_lseek>
 8007aa8:	1c43      	adds	r3, r0, #1
 8007aaa:	d102      	bne.n	8007ab2 <_lseek_r+0x1e>
 8007aac:	682b      	ldr	r3, [r5, #0]
 8007aae:	b103      	cbz	r3, 8007ab2 <_lseek_r+0x1e>
 8007ab0:	6023      	str	r3, [r4, #0]
 8007ab2:	bd38      	pop	{r3, r4, r5, pc}
 8007ab4:	20004bfc 	.word	0x20004bfc

08007ab8 <__swhatbuf_r>:
 8007ab8:	b570      	push	{r4, r5, r6, lr}
 8007aba:	460e      	mov	r6, r1
 8007abc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ac0:	2900      	cmp	r1, #0
 8007ac2:	b096      	sub	sp, #88	; 0x58
 8007ac4:	4614      	mov	r4, r2
 8007ac6:	461d      	mov	r5, r3
 8007ac8:	da08      	bge.n	8007adc <__swhatbuf_r+0x24>
 8007aca:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007ace:	2200      	movs	r2, #0
 8007ad0:	602a      	str	r2, [r5, #0]
 8007ad2:	061a      	lsls	r2, r3, #24
 8007ad4:	d410      	bmi.n	8007af8 <__swhatbuf_r+0x40>
 8007ad6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007ada:	e00e      	b.n	8007afa <__swhatbuf_r+0x42>
 8007adc:	466a      	mov	r2, sp
 8007ade:	f000 f8bb 	bl	8007c58 <_fstat_r>
 8007ae2:	2800      	cmp	r0, #0
 8007ae4:	dbf1      	blt.n	8007aca <__swhatbuf_r+0x12>
 8007ae6:	9a01      	ldr	r2, [sp, #4]
 8007ae8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007aec:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007af0:	425a      	negs	r2, r3
 8007af2:	415a      	adcs	r2, r3
 8007af4:	602a      	str	r2, [r5, #0]
 8007af6:	e7ee      	b.n	8007ad6 <__swhatbuf_r+0x1e>
 8007af8:	2340      	movs	r3, #64	; 0x40
 8007afa:	2000      	movs	r0, #0
 8007afc:	6023      	str	r3, [r4, #0]
 8007afe:	b016      	add	sp, #88	; 0x58
 8007b00:	bd70      	pop	{r4, r5, r6, pc}
	...

08007b04 <__smakebuf_r>:
 8007b04:	898b      	ldrh	r3, [r1, #12]
 8007b06:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007b08:	079d      	lsls	r5, r3, #30
 8007b0a:	4606      	mov	r6, r0
 8007b0c:	460c      	mov	r4, r1
 8007b0e:	d507      	bpl.n	8007b20 <__smakebuf_r+0x1c>
 8007b10:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007b14:	6023      	str	r3, [r4, #0]
 8007b16:	6123      	str	r3, [r4, #16]
 8007b18:	2301      	movs	r3, #1
 8007b1a:	6163      	str	r3, [r4, #20]
 8007b1c:	b002      	add	sp, #8
 8007b1e:	bd70      	pop	{r4, r5, r6, pc}
 8007b20:	ab01      	add	r3, sp, #4
 8007b22:	466a      	mov	r2, sp
 8007b24:	f7ff ffc8 	bl	8007ab8 <__swhatbuf_r>
 8007b28:	9900      	ldr	r1, [sp, #0]
 8007b2a:	4605      	mov	r5, r0
 8007b2c:	4630      	mov	r0, r6
 8007b2e:	f7ff fa57 	bl	8006fe0 <_malloc_r>
 8007b32:	b948      	cbnz	r0, 8007b48 <__smakebuf_r+0x44>
 8007b34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b38:	059a      	lsls	r2, r3, #22
 8007b3a:	d4ef      	bmi.n	8007b1c <__smakebuf_r+0x18>
 8007b3c:	f023 0303 	bic.w	r3, r3, #3
 8007b40:	f043 0302 	orr.w	r3, r3, #2
 8007b44:	81a3      	strh	r3, [r4, #12]
 8007b46:	e7e3      	b.n	8007b10 <__smakebuf_r+0xc>
 8007b48:	4b0d      	ldr	r3, [pc, #52]	; (8007b80 <__smakebuf_r+0x7c>)
 8007b4a:	62b3      	str	r3, [r6, #40]	; 0x28
 8007b4c:	89a3      	ldrh	r3, [r4, #12]
 8007b4e:	6020      	str	r0, [r4, #0]
 8007b50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b54:	81a3      	strh	r3, [r4, #12]
 8007b56:	9b00      	ldr	r3, [sp, #0]
 8007b58:	6163      	str	r3, [r4, #20]
 8007b5a:	9b01      	ldr	r3, [sp, #4]
 8007b5c:	6120      	str	r0, [r4, #16]
 8007b5e:	b15b      	cbz	r3, 8007b78 <__smakebuf_r+0x74>
 8007b60:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007b64:	4630      	mov	r0, r6
 8007b66:	f000 f889 	bl	8007c7c <_isatty_r>
 8007b6a:	b128      	cbz	r0, 8007b78 <__smakebuf_r+0x74>
 8007b6c:	89a3      	ldrh	r3, [r4, #12]
 8007b6e:	f023 0303 	bic.w	r3, r3, #3
 8007b72:	f043 0301 	orr.w	r3, r3, #1
 8007b76:	81a3      	strh	r3, [r4, #12]
 8007b78:	89a0      	ldrh	r0, [r4, #12]
 8007b7a:	4305      	orrs	r5, r0
 8007b7c:	81a5      	strh	r5, [r4, #12]
 8007b7e:	e7cd      	b.n	8007b1c <__smakebuf_r+0x18>
 8007b80:	08006dd1 	.word	0x08006dd1

08007b84 <__malloc_lock>:
 8007b84:	4801      	ldr	r0, [pc, #4]	; (8007b8c <__malloc_lock+0x8>)
 8007b86:	f7ff ba08 	b.w	8006f9a <__retarget_lock_acquire_recursive>
 8007b8a:	bf00      	nop
 8007b8c:	20004bf0 	.word	0x20004bf0

08007b90 <__malloc_unlock>:
 8007b90:	4801      	ldr	r0, [pc, #4]	; (8007b98 <__malloc_unlock+0x8>)
 8007b92:	f7ff ba03 	b.w	8006f9c <__retarget_lock_release_recursive>
 8007b96:	bf00      	nop
 8007b98:	20004bf0 	.word	0x20004bf0

08007b9c <_free_r>:
 8007b9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007b9e:	2900      	cmp	r1, #0
 8007ba0:	d044      	beq.n	8007c2c <_free_r+0x90>
 8007ba2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ba6:	9001      	str	r0, [sp, #4]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	f1a1 0404 	sub.w	r4, r1, #4
 8007bae:	bfb8      	it	lt
 8007bb0:	18e4      	addlt	r4, r4, r3
 8007bb2:	f7ff ffe7 	bl	8007b84 <__malloc_lock>
 8007bb6:	4a1e      	ldr	r2, [pc, #120]	; (8007c30 <_free_r+0x94>)
 8007bb8:	9801      	ldr	r0, [sp, #4]
 8007bba:	6813      	ldr	r3, [r2, #0]
 8007bbc:	b933      	cbnz	r3, 8007bcc <_free_r+0x30>
 8007bbe:	6063      	str	r3, [r4, #4]
 8007bc0:	6014      	str	r4, [r2, #0]
 8007bc2:	b003      	add	sp, #12
 8007bc4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007bc8:	f7ff bfe2 	b.w	8007b90 <__malloc_unlock>
 8007bcc:	42a3      	cmp	r3, r4
 8007bce:	d908      	bls.n	8007be2 <_free_r+0x46>
 8007bd0:	6825      	ldr	r5, [r4, #0]
 8007bd2:	1961      	adds	r1, r4, r5
 8007bd4:	428b      	cmp	r3, r1
 8007bd6:	bf01      	itttt	eq
 8007bd8:	6819      	ldreq	r1, [r3, #0]
 8007bda:	685b      	ldreq	r3, [r3, #4]
 8007bdc:	1949      	addeq	r1, r1, r5
 8007bde:	6021      	streq	r1, [r4, #0]
 8007be0:	e7ed      	b.n	8007bbe <_free_r+0x22>
 8007be2:	461a      	mov	r2, r3
 8007be4:	685b      	ldr	r3, [r3, #4]
 8007be6:	b10b      	cbz	r3, 8007bec <_free_r+0x50>
 8007be8:	42a3      	cmp	r3, r4
 8007bea:	d9fa      	bls.n	8007be2 <_free_r+0x46>
 8007bec:	6811      	ldr	r1, [r2, #0]
 8007bee:	1855      	adds	r5, r2, r1
 8007bf0:	42a5      	cmp	r5, r4
 8007bf2:	d10b      	bne.n	8007c0c <_free_r+0x70>
 8007bf4:	6824      	ldr	r4, [r4, #0]
 8007bf6:	4421      	add	r1, r4
 8007bf8:	1854      	adds	r4, r2, r1
 8007bfa:	42a3      	cmp	r3, r4
 8007bfc:	6011      	str	r1, [r2, #0]
 8007bfe:	d1e0      	bne.n	8007bc2 <_free_r+0x26>
 8007c00:	681c      	ldr	r4, [r3, #0]
 8007c02:	685b      	ldr	r3, [r3, #4]
 8007c04:	6053      	str	r3, [r2, #4]
 8007c06:	4421      	add	r1, r4
 8007c08:	6011      	str	r1, [r2, #0]
 8007c0a:	e7da      	b.n	8007bc2 <_free_r+0x26>
 8007c0c:	d902      	bls.n	8007c14 <_free_r+0x78>
 8007c0e:	230c      	movs	r3, #12
 8007c10:	6003      	str	r3, [r0, #0]
 8007c12:	e7d6      	b.n	8007bc2 <_free_r+0x26>
 8007c14:	6825      	ldr	r5, [r4, #0]
 8007c16:	1961      	adds	r1, r4, r5
 8007c18:	428b      	cmp	r3, r1
 8007c1a:	bf04      	itt	eq
 8007c1c:	6819      	ldreq	r1, [r3, #0]
 8007c1e:	685b      	ldreq	r3, [r3, #4]
 8007c20:	6063      	str	r3, [r4, #4]
 8007c22:	bf04      	itt	eq
 8007c24:	1949      	addeq	r1, r1, r5
 8007c26:	6021      	streq	r1, [r4, #0]
 8007c28:	6054      	str	r4, [r2, #4]
 8007c2a:	e7ca      	b.n	8007bc2 <_free_r+0x26>
 8007c2c:	b003      	add	sp, #12
 8007c2e:	bd30      	pop	{r4, r5, pc}
 8007c30:	20004bf4 	.word	0x20004bf4

08007c34 <_read_r>:
 8007c34:	b538      	push	{r3, r4, r5, lr}
 8007c36:	4d07      	ldr	r5, [pc, #28]	; (8007c54 <_read_r+0x20>)
 8007c38:	4604      	mov	r4, r0
 8007c3a:	4608      	mov	r0, r1
 8007c3c:	4611      	mov	r1, r2
 8007c3e:	2200      	movs	r2, #0
 8007c40:	602a      	str	r2, [r5, #0]
 8007c42:	461a      	mov	r2, r3
 8007c44:	f7f9 f9fa 	bl	800103c <_read>
 8007c48:	1c43      	adds	r3, r0, #1
 8007c4a:	d102      	bne.n	8007c52 <_read_r+0x1e>
 8007c4c:	682b      	ldr	r3, [r5, #0]
 8007c4e:	b103      	cbz	r3, 8007c52 <_read_r+0x1e>
 8007c50:	6023      	str	r3, [r4, #0]
 8007c52:	bd38      	pop	{r3, r4, r5, pc}
 8007c54:	20004bfc 	.word	0x20004bfc

08007c58 <_fstat_r>:
 8007c58:	b538      	push	{r3, r4, r5, lr}
 8007c5a:	4d07      	ldr	r5, [pc, #28]	; (8007c78 <_fstat_r+0x20>)
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	4604      	mov	r4, r0
 8007c60:	4608      	mov	r0, r1
 8007c62:	4611      	mov	r1, r2
 8007c64:	602b      	str	r3, [r5, #0]
 8007c66:	f7f9 fa12 	bl	800108e <_fstat>
 8007c6a:	1c43      	adds	r3, r0, #1
 8007c6c:	d102      	bne.n	8007c74 <_fstat_r+0x1c>
 8007c6e:	682b      	ldr	r3, [r5, #0]
 8007c70:	b103      	cbz	r3, 8007c74 <_fstat_r+0x1c>
 8007c72:	6023      	str	r3, [r4, #0]
 8007c74:	bd38      	pop	{r3, r4, r5, pc}
 8007c76:	bf00      	nop
 8007c78:	20004bfc 	.word	0x20004bfc

08007c7c <_isatty_r>:
 8007c7c:	b538      	push	{r3, r4, r5, lr}
 8007c7e:	4d06      	ldr	r5, [pc, #24]	; (8007c98 <_isatty_r+0x1c>)
 8007c80:	2300      	movs	r3, #0
 8007c82:	4604      	mov	r4, r0
 8007c84:	4608      	mov	r0, r1
 8007c86:	602b      	str	r3, [r5, #0]
 8007c88:	f7f9 fa11 	bl	80010ae <_isatty>
 8007c8c:	1c43      	adds	r3, r0, #1
 8007c8e:	d102      	bne.n	8007c96 <_isatty_r+0x1a>
 8007c90:	682b      	ldr	r3, [r5, #0]
 8007c92:	b103      	cbz	r3, 8007c96 <_isatty_r+0x1a>
 8007c94:	6023      	str	r3, [r4, #0]
 8007c96:	bd38      	pop	{r3, r4, r5, pc}
 8007c98:	20004bfc 	.word	0x20004bfc

08007c9c <_gettimeofday>:
 8007c9c:	4b02      	ldr	r3, [pc, #8]	; (8007ca8 <_gettimeofday+0xc>)
 8007c9e:	2258      	movs	r2, #88	; 0x58
 8007ca0:	601a      	str	r2, [r3, #0]
 8007ca2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007ca6:	4770      	bx	lr
 8007ca8:	20004bfc 	.word	0x20004bfc

08007cac <_init>:
 8007cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cae:	bf00      	nop
 8007cb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cb2:	bc08      	pop	{r3}
 8007cb4:	469e      	mov	lr, r3
 8007cb6:	4770      	bx	lr

08007cb8 <_fini>:
 8007cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cba:	bf00      	nop
 8007cbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cbe:	bc08      	pop	{r3}
 8007cc0:	469e      	mov	lr, r3
 8007cc2:	4770      	bx	lr
