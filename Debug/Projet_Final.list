
Projet_Final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a2c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000140  08007bfc  08007bfc  00017bfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d3c  08007d3c  00020130  2**0
                  CONTENTS
  4 .ARM          00000008  08007d3c  08007d3c  00017d3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007d44  08007d44  00020130  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007d44  08007d44  00017d44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007d48  08007d48  00017d48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000130  20000000  08007d4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004ad0  20000130  08007e7c  00020130  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004c00  08007e7c  00024c00  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020130  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c02c  00000000  00000000  00020160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004172  00000000  00000000  0003c18c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001738  00000000  00000000  00040300  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001580  00000000  00000000  00041a38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000190af  00000000  00000000  00042fb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b158  00000000  00000000  0005c067  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00097556  00000000  00000000  000771bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010e715  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006818  00000000  00000000  0010e768  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000024  00000000  00000000  00114f80  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000004e  00000000  00000000  00114fa4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000130 	.word	0x20000130
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007be4 	.word	0x08007be4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000134 	.word	0x20000134
 800020c:	08007be4 	.word	0x08007be4

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b084      	sub	sp, #16
 80005b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005ba:	463b      	mov	r3, r7
 80005bc:	2200      	movs	r2, #0
 80005be:	601a      	str	r2, [r3, #0]
 80005c0:	605a      	str	r2, [r3, #4]
 80005c2:	609a      	str	r2, [r3, #8]
 80005c4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005c6:	4b21      	ldr	r3, [pc, #132]	; (800064c <MX_ADC1_Init+0x98>)
 80005c8:	4a21      	ldr	r2, [pc, #132]	; (8000650 <MX_ADC1_Init+0x9c>)
 80005ca:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005cc:	4b1f      	ldr	r3, [pc, #124]	; (800064c <MX_ADC1_Init+0x98>)
 80005ce:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80005d2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005d4:	4b1d      	ldr	r3, [pc, #116]	; (800064c <MX_ADC1_Init+0x98>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80005da:	4b1c      	ldr	r3, [pc, #112]	; (800064c <MX_ADC1_Init+0x98>)
 80005dc:	2200      	movs	r2, #0
 80005de:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005e0:	4b1a      	ldr	r3, [pc, #104]	; (800064c <MX_ADC1_Init+0x98>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005e6:	4b19      	ldr	r3, [pc, #100]	; (800064c <MX_ADC1_Init+0x98>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005ee:	4b17      	ldr	r3, [pc, #92]	; (800064c <MX_ADC1_Init+0x98>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005f4:	4b15      	ldr	r3, [pc, #84]	; (800064c <MX_ADC1_Init+0x98>)
 80005f6:	4a17      	ldr	r2, [pc, #92]	; (8000654 <MX_ADC1_Init+0xa0>)
 80005f8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005fa:	4b14      	ldr	r3, [pc, #80]	; (800064c <MX_ADC1_Init+0x98>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000600:	4b12      	ldr	r3, [pc, #72]	; (800064c <MX_ADC1_Init+0x98>)
 8000602:	2201      	movs	r2, #1
 8000604:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000606:	4b11      	ldr	r3, [pc, #68]	; (800064c <MX_ADC1_Init+0x98>)
 8000608:	2200      	movs	r2, #0
 800060a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800060e:	4b0f      	ldr	r3, [pc, #60]	; (800064c <MX_ADC1_Init+0x98>)
 8000610:	2201      	movs	r2, #1
 8000612:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000614:	480d      	ldr	r0, [pc, #52]	; (800064c <MX_ADC1_Init+0x98>)
 8000616:	f000 feb7 	bl	8001388 <HAL_ADC_Init>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000620:	f000 f980 	bl	8000924 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000624:	2300      	movs	r3, #0
 8000626:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000628:	2301      	movs	r3, #1
 800062a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800062c:	2300      	movs	r3, #0
 800062e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000630:	463b      	mov	r3, r7
 8000632:	4619      	mov	r1, r3
 8000634:	4805      	ldr	r0, [pc, #20]	; (800064c <MX_ADC1_Init+0x98>)
 8000636:	f001 f837 	bl	80016a8 <HAL_ADC_ConfigChannel>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000640:	f000 f970 	bl	8000924 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000644:	bf00      	nop
 8000646:	3710      	adds	r7, #16
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	2000014c 	.word	0x2000014c
 8000650:	40012000 	.word	0x40012000
 8000654:	0f000001 	.word	0x0f000001

08000658 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b08a      	sub	sp, #40	; 0x28
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000660:	f107 0314 	add.w	r3, r7, #20
 8000664:	2200      	movs	r2, #0
 8000666:	601a      	str	r2, [r3, #0]
 8000668:	605a      	str	r2, [r3, #4]
 800066a:	609a      	str	r2, [r3, #8]
 800066c:	60da      	str	r2, [r3, #12]
 800066e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	4a17      	ldr	r2, [pc, #92]	; (80006d4 <HAL_ADC_MspInit+0x7c>)
 8000676:	4293      	cmp	r3, r2
 8000678:	d127      	bne.n	80006ca <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800067a:	2300      	movs	r3, #0
 800067c:	613b      	str	r3, [r7, #16]
 800067e:	4b16      	ldr	r3, [pc, #88]	; (80006d8 <HAL_ADC_MspInit+0x80>)
 8000680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000682:	4a15      	ldr	r2, [pc, #84]	; (80006d8 <HAL_ADC_MspInit+0x80>)
 8000684:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000688:	6453      	str	r3, [r2, #68]	; 0x44
 800068a:	4b13      	ldr	r3, [pc, #76]	; (80006d8 <HAL_ADC_MspInit+0x80>)
 800068c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800068e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000692:	613b      	str	r3, [r7, #16]
 8000694:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000696:	2300      	movs	r3, #0
 8000698:	60fb      	str	r3, [r7, #12]
 800069a:	4b0f      	ldr	r3, [pc, #60]	; (80006d8 <HAL_ADC_MspInit+0x80>)
 800069c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069e:	4a0e      	ldr	r2, [pc, #56]	; (80006d8 <HAL_ADC_MspInit+0x80>)
 80006a0:	f043 0301 	orr.w	r3, r3, #1
 80006a4:	6313      	str	r3, [r2, #48]	; 0x30
 80006a6:	4b0c      	ldr	r3, [pc, #48]	; (80006d8 <HAL_ADC_MspInit+0x80>)
 80006a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006aa:	f003 0301 	and.w	r3, r3, #1
 80006ae:	60fb      	str	r3, [r7, #12]
 80006b0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = ANA_SENSOR_1_Pin;
 80006b2:	2301      	movs	r3, #1
 80006b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006b6:	2303      	movs	r3, #3
 80006b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ba:	2300      	movs	r3, #0
 80006bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ANA_SENSOR_1_GPIO_Port, &GPIO_InitStruct);
 80006be:	f107 0314 	add.w	r3, r7, #20
 80006c2:	4619      	mov	r1, r3
 80006c4:	4805      	ldr	r0, [pc, #20]	; (80006dc <HAL_ADC_MspInit+0x84>)
 80006c6:	f001 faef 	bl	8001ca8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006ca:	bf00      	nop
 80006cc:	3728      	adds	r7, #40	; 0x28
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	40012000 	.word	0x40012000
 80006d8:	40023800 	.word	0x40023800
 80006dc:	40020000 	.word	0x40020000

080006e0 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b088      	sub	sp, #32
 80006e4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e6:	f107 030c 	add.w	r3, r7, #12
 80006ea:	2200      	movs	r2, #0
 80006ec:	601a      	str	r2, [r3, #0]
 80006ee:	605a      	str	r2, [r3, #4]
 80006f0:	609a      	str	r2, [r3, #8]
 80006f2:	60da      	str	r2, [r3, #12]
 80006f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006f6:	2300      	movs	r3, #0
 80006f8:	60bb      	str	r3, [r7, #8]
 80006fa:	4b45      	ldr	r3, [pc, #276]	; (8000810 <MX_GPIO_Init+0x130>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fe:	4a44      	ldr	r2, [pc, #272]	; (8000810 <MX_GPIO_Init+0x130>)
 8000700:	f043 0304 	orr.w	r3, r3, #4
 8000704:	6313      	str	r3, [r2, #48]	; 0x30
 8000706:	4b42      	ldr	r3, [pc, #264]	; (8000810 <MX_GPIO_Init+0x130>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070a:	f003 0304 	and.w	r3, r3, #4
 800070e:	60bb      	str	r3, [r7, #8]
 8000710:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000712:	2300      	movs	r3, #0
 8000714:	607b      	str	r3, [r7, #4]
 8000716:	4b3e      	ldr	r3, [pc, #248]	; (8000810 <MX_GPIO_Init+0x130>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	4a3d      	ldr	r2, [pc, #244]	; (8000810 <MX_GPIO_Init+0x130>)
 800071c:	f043 0301 	orr.w	r3, r3, #1
 8000720:	6313      	str	r3, [r2, #48]	; 0x30
 8000722:	4b3b      	ldr	r3, [pc, #236]	; (8000810 <MX_GPIO_Init+0x130>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	f003 0301 	and.w	r3, r3, #1
 800072a:	607b      	str	r3, [r7, #4]
 800072c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800072e:	2300      	movs	r3, #0
 8000730:	603b      	str	r3, [r7, #0]
 8000732:	4b37      	ldr	r3, [pc, #220]	; (8000810 <MX_GPIO_Init+0x130>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	4a36      	ldr	r2, [pc, #216]	; (8000810 <MX_GPIO_Init+0x130>)
 8000738:	f043 0302 	orr.w	r3, r3, #2
 800073c:	6313      	str	r3, [r2, #48]	; 0x30
 800073e:	4b34      	ldr	r3, [pc, #208]	; (8000810 <MX_GPIO_Init+0x130>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	f003 0302 	and.w	r3, r3, #2
 8000746:	603b      	str	r3, [r7, #0]
 8000748:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_SENSOR_3_Pin|LED_SENSOR_2_Pin|LED_FREQ_SEND_DATA_Pin, GPIO_PIN_RESET);
 800074a:	2200      	movs	r2, #0
 800074c:	2183      	movs	r1, #131	; 0x83
 800074e:	4831      	ldr	r0, [pc, #196]	; (8000814 <MX_GPIO_Init+0x134>)
 8000750:	f001 fc1e 	bl	8001f90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_SENSOR_1_GPIO_Port, LED_SENSOR_1_Pin, GPIO_PIN_RESET);
 8000754:	2200      	movs	r2, #0
 8000756:	2101      	movs	r1, #1
 8000758:	482f      	ldr	r0, [pc, #188]	; (8000818 <MX_GPIO_Init+0x138>)
 800075a:	f001 fc19 	bl	8001f90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_SEND_DATA_Pin;
 800075e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000762:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000764:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000768:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076a:	2300      	movs	r3, #0
 800076c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BTN_SEND_DATA_GPIO_Port, &GPIO_InitStruct);
 800076e:	f107 030c 	add.w	r3, r7, #12
 8000772:	4619      	mov	r1, r3
 8000774:	4827      	ldr	r0, [pc, #156]	; (8000814 <MX_GPIO_Init+0x134>)
 8000776:	f001 fa97 	bl	8001ca8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LED_SENSOR_3_Pin|LED_SENSOR_2_Pin|LED_FREQ_SEND_DATA_Pin;
 800077a:	2383      	movs	r3, #131	; 0x83
 800077c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800077e:	2301      	movs	r3, #1
 8000780:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000782:	2300      	movs	r3, #0
 8000784:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000786:	2300      	movs	r3, #0
 8000788:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800078a:	f107 030c 	add.w	r3, r7, #12
 800078e:	4619      	mov	r1, r3
 8000790:	4820      	ldr	r0, [pc, #128]	; (8000814 <MX_GPIO_Init+0x134>)
 8000792:	f001 fa89 	bl	8001ca8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = BTN_PLUS_Pin|BTN_SELECT_Pin;
 8000796:	f240 4302 	movw	r3, #1026	; 0x402
 800079a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800079c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80007a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a2:	2300      	movs	r3, #0
 80007a4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007a6:	f107 030c 	add.w	r3, r7, #12
 80007aa:	4619      	mov	r1, r3
 80007ac:	481b      	ldr	r0, [pc, #108]	; (800081c <MX_GPIO_Init+0x13c>)
 80007ae:	f001 fa7b 	bl	8001ca8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_MINUS_Pin;
 80007b2:	2320      	movs	r3, #32
 80007b4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007b6:	2300      	movs	r3, #0
 80007b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ba:	2300      	movs	r3, #0
 80007bc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BTN_MINUS_GPIO_Port, &GPIO_InitStruct);
 80007be:	f107 030c 	add.w	r3, r7, #12
 80007c2:	4619      	mov	r1, r3
 80007c4:	4815      	ldr	r0, [pc, #84]	; (800081c <MX_GPIO_Init+0x13c>)
 80007c6:	f001 fa6f 	bl	8001ca8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_SENSOR_1_Pin;
 80007ca:	2301      	movs	r3, #1
 80007cc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ce:	2301      	movs	r3, #1
 80007d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d2:	2300      	movs	r3, #0
 80007d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d6:	2300      	movs	r3, #0
 80007d8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_SENSOR_1_GPIO_Port, &GPIO_InitStruct);
 80007da:	f107 030c 	add.w	r3, r7, #12
 80007de:	4619      	mov	r1, r3
 80007e0:	480d      	ldr	r0, [pc, #52]	; (8000818 <MX_GPIO_Init+0x138>)
 80007e2:	f001 fa61 	bl	8001ca8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 80007e6:	2200      	movs	r2, #0
 80007e8:	2105      	movs	r1, #5
 80007ea:	2007      	movs	r0, #7
 80007ec:	f001 fa32 	bl	8001c54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80007f0:	2007      	movs	r0, #7
 80007f2:	f001 fa4b 	bl	8001c8c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80007f6:	2200      	movs	r2, #0
 80007f8:	2105      	movs	r1, #5
 80007fa:	2028      	movs	r0, #40	; 0x28
 80007fc:	f001 fa2a 	bl	8001c54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000800:	2028      	movs	r0, #40	; 0x28
 8000802:	f001 fa43 	bl	8001c8c <HAL_NVIC_EnableIRQ>

}
 8000806:	bf00      	nop
 8000808:	3720      	adds	r7, #32
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	40023800 	.word	0x40023800
 8000814:	40020800 	.word	0x40020800
 8000818:	40020400 	.word	0x40020400
 800081c:	40020000 	.word	0x40020000

08000820 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b094      	sub	sp, #80	; 0x50
 8000824:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000826:	f107 031c 	add.w	r3, r7, #28
 800082a:	2234      	movs	r2, #52	; 0x34
 800082c:	2100      	movs	r1, #0
 800082e:	4618      	mov	r0, r3
 8000830:	f006 fa0c 	bl	8006c4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000834:	f107 0308 	add.w	r3, r7, #8
 8000838:	2200      	movs	r2, #0
 800083a:	601a      	str	r2, [r3, #0]
 800083c:	605a      	str	r2, [r3, #4]
 800083e:	609a      	str	r2, [r3, #8]
 8000840:	60da      	str	r2, [r3, #12]
 8000842:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000844:	2300      	movs	r3, #0
 8000846:	607b      	str	r3, [r7, #4]
 8000848:	4b29      	ldr	r3, [pc, #164]	; (80008f0 <SystemClock_Config+0xd0>)
 800084a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800084c:	4a28      	ldr	r2, [pc, #160]	; (80008f0 <SystemClock_Config+0xd0>)
 800084e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000852:	6413      	str	r3, [r2, #64]	; 0x40
 8000854:	4b26      	ldr	r3, [pc, #152]	; (80008f0 <SystemClock_Config+0xd0>)
 8000856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000858:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800085c:	607b      	str	r3, [r7, #4]
 800085e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000860:	2300      	movs	r3, #0
 8000862:	603b      	str	r3, [r7, #0]
 8000864:	4b23      	ldr	r3, [pc, #140]	; (80008f4 <SystemClock_Config+0xd4>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4a22      	ldr	r2, [pc, #136]	; (80008f4 <SystemClock_Config+0xd4>)
 800086a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800086e:	6013      	str	r3, [r2, #0]
 8000870:	4b20      	ldr	r3, [pc, #128]	; (80008f4 <SystemClock_Config+0xd4>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000878:	603b      	str	r3, [r7, #0]
 800087a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800087c:	2302      	movs	r3, #2
 800087e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000880:	2301      	movs	r3, #1
 8000882:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000884:	2310      	movs	r3, #16
 8000886:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000888:	2302      	movs	r3, #2
 800088a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800088c:	2300      	movs	r3, #0
 800088e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000890:	2310      	movs	r3, #16
 8000892:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000894:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000898:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800089a:	2304      	movs	r3, #4
 800089c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800089e:	2304      	movs	r3, #4
 80008a0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008a2:	2302      	movs	r3, #2
 80008a4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008a6:	f107 031c 	add.w	r3, r7, #28
 80008aa:	4618      	mov	r0, r3
 80008ac:	f001 fdf4 	bl	8002498 <HAL_RCC_OscConfig>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80008b6:	f000 f835 	bl	8000924 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008ba:	230f      	movs	r3, #15
 80008bc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008be:	2302      	movs	r3, #2
 80008c0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008c2:	2300      	movs	r3, #0
 80008c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008cc:	2300      	movs	r3, #0
 80008ce:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008d0:	f107 0308 	add.w	r3, r7, #8
 80008d4:	2102      	movs	r1, #2
 80008d6:	4618      	mov	r0, r3
 80008d8:	f001 fb8c 	bl	8001ff4 <HAL_RCC_ClockConfig>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80008e2:	f000 f81f 	bl	8000924 <Error_Handler>
  }
}
 80008e6:	bf00      	nop
 80008e8:	3750      	adds	r7, #80	; 0x50
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	40023800 	.word	0x40023800
 80008f4:	40007000 	.word	0x40007000

080008f8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	4a06      	ldr	r2, [pc, #24]	; (8000920 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000906:	4293      	cmp	r3, r2
 8000908:	d102      	bne.n	8000910 <HAL_TIM_PeriodElapsedCallback+0x18>
    HAL_IncTick();
 800090a:	f000 fd1d 	bl	8001348 <HAL_IncTick>
  /* USER CODE BEGIN Callback 1 */
  else{
	  Callback_TIM_5(htim);
  }
  /* USER CODE END Callback 1 */
}
 800090e:	e002      	b.n	8000916 <HAL_TIM_PeriodElapsedCallback+0x1e>
	  Callback_TIM_5(htim);
 8000910:	6878      	ldr	r0, [r7, #4]
 8000912:	f000 f91b 	bl	8000b4c <Callback_TIM_5>
}
 8000916:	bf00      	nop
 8000918:	3708      	adds	r7, #8
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	40001000 	.word	0x40001000

08000924 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000928:	b672      	cpsid	i
}
 800092a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800092c:	e7fe      	b.n	800092c <Error_Handler+0x8>
	...

08000930 <_write>:
	.priority=osPriorityNormal, // le niveau est 8 (voir cmsis_os2.h)
	.stack_size=128*4 // Pile de 128 mots de 32 bits
};


int _write(int P_Flux, char* P_Message, int P_Taille) {
 8000930:	b580      	push	{r7, lr}
 8000932:	b086      	sub	sp, #24
 8000934:	af00      	add	r7, sp, #0
 8000936:	60f8      	str	r0, [r7, #12]
 8000938:	60b9      	str	r1, [r7, #8]
 800093a:	607a      	str	r2, [r7, #4]
	HAL_StatusTypeDef Etat = HAL_UART_Transmit(&huart2, (uint8_t *) P_Message, P_Taille, HAL_MAX_DELAY);
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	b29a      	uxth	r2, r3
 8000940:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000944:	68b9      	ldr	r1, [r7, #8]
 8000946:	4808      	ldr	r0, [pc, #32]	; (8000968 <_write+0x38>)
 8000948:	f002 fb37 	bl	8002fba <HAL_UART_Transmit>
 800094c:	4603      	mov	r3, r0
 800094e:	75fb      	strb	r3, [r7, #23]
	if (Etat == HAL_OK){ return P_Taille;}
 8000950:	7dfb      	ldrb	r3, [r7, #23]
 8000952:	2b00      	cmp	r3, #0
 8000954:	d101      	bne.n	800095a <_write+0x2a>
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	e001      	b.n	800095e <_write+0x2e>
	else{return -1;}
 800095a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800095e:	4618      	mov	r0, r3
 8000960:	3718      	adds	r7, #24
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	20000258 	.word	0x20000258

0800096c <Fonction_Thread_Sensor_1>:

void Fonction_Thread_Sensor_1(void* P_Info){
 800096c:	b580      	push	{r7, lr}
 800096e:	b086      	sub	sp, #24
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start(&hadc1);
 8000974:	481d      	ldr	r0, [pc, #116]	; (80009ec <Fonction_Thread_Sensor_1+0x80>)
 8000976:	f000 fd4b 	bl	8001410 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1);
 800097a:	2101      	movs	r1, #1
 800097c:	481b      	ldr	r0, [pc, #108]	; (80009ec <Fonction_Thread_Sensor_1+0x80>)
 800097e:	f000 fdfb 	bl	8001578 <HAL_ADC_PollForConversion>
	val_sensor_1 = HAL_ADC_GetValue(&hadc1);
 8000982:	481a      	ldr	r0, [pc, #104]	; (80009ec <Fonction_Thread_Sensor_1+0x80>)
 8000984:	f000 fe83 	bl	800168e <HAL_ADC_GetValue>
 8000988:	4603      	mov	r3, r0
 800098a:	b29a      	uxth	r2, r3
 800098c:	4b18      	ldr	r3, [pc, #96]	; (80009f0 <Fonction_Thread_Sensor_1+0x84>)
 800098e:	801a      	strh	r2, [r3, #0]
	printf('Ici la street %d\n\r', val_sensor_1);
 8000990:	4b17      	ldr	r3, [pc, #92]	; (80009f0 <Fonction_Thread_Sensor_1+0x84>)
 8000992:	881b      	ldrh	r3, [r3, #0]
 8000994:	4619      	mov	r1, r3
 8000996:	4817      	ldr	r0, [pc, #92]	; (80009f4 <Fonction_Thread_Sensor_1+0x88>)
 8000998:	f006 f960 	bl	8006c5c <iprintf>
	T_DATA Data={.Type=1};
 800099c:	f107 030c 	add.w	r3, r7, #12
 80009a0:	2200      	movs	r2, #0
 80009a2:	601a      	str	r2, [r3, #0]
 80009a4:	605a      	str	r2, [r3, #4]
 80009a6:	609a      	str	r2, [r3, #8]
 80009a8:	2301      	movs	r3, #1
 80009aa:	733b      	strb	r3, [r7, #12]
	while(1) {
		HAL_ADC_Start(&hadc1);
 80009ac:	480f      	ldr	r0, [pc, #60]	; (80009ec <Fonction_Thread_Sensor_1+0x80>)
 80009ae:	f000 fd2f 	bl	8001410 <HAL_ADC_Start>
		// Poll ADC1 Perihperal & TimeOut = 1mSec
		HAL_ADC_PollForConversion(&hadc1, 1);
 80009b2:	2101      	movs	r1, #1
 80009b4:	480d      	ldr	r0, [pc, #52]	; (80009ec <Fonction_Thread_Sensor_1+0x80>)
 80009b6:	f000 fddf 	bl	8001578 <HAL_ADC_PollForConversion>
		Data.Timestamp = (uint32_t)(time(NULL));
 80009ba:	2000      	movs	r0, #0
 80009bc:	f006 f966 	bl	8006c8c <time>
 80009c0:	4602      	mov	r2, r0
 80009c2:	460b      	mov	r3, r1
 80009c4:	4613      	mov	r3, r2
 80009c6:	617b      	str	r3, [r7, #20]
		Data.Value = val_sensor_1;
 80009c8:	4b09      	ldr	r3, [pc, #36]	; (80009f0 <Fonction_Thread_Sensor_1+0x84>)
 80009ca:	881b      	ldrh	r3, [r3, #0]
 80009cc:	613b      	str	r3, [r7, #16]
		osMessageQueuePut (Pipe_Reception_Analyse,(void*)&Data, 0, osWaitForever);
 80009ce:	4b0a      	ldr	r3, [pc, #40]	; (80009f8 <Fonction_Thread_Sensor_1+0x8c>)
 80009d0:	6818      	ldr	r0, [r3, #0]
 80009d2:	f107 010c 	add.w	r1, r7, #12
 80009d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80009da:	2200      	movs	r2, #0
 80009dc:	f003 f8e0 	bl	8003ba0 <osMessageQueuePut>
		osDelay(period_sensor_1);
 80009e0:	4b06      	ldr	r3, [pc, #24]	; (80009fc <Fonction_Thread_Sensor_1+0x90>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	4618      	mov	r0, r3
 80009e6:	f003 f84c 	bl	8003a82 <osDelay>
		HAL_ADC_Start(&hadc1);
 80009ea:	e7df      	b.n	80009ac <Fonction_Thread_Sensor_1+0x40>
 80009ec:	2000014c 	.word	0x2000014c
 80009f0:	200001b0 	.word	0x200001b0
 80009f4:	25640a0d 	.word	0x25640a0d
 80009f8:	200001a8 	.word	0x200001a8
 80009fc:	20000000 	.word	0x20000000

08000a00 <Fonction_Thread_Sensor_2>:
	}
	osThreadTerminate(NULL);
}

void Fonction_Thread_Sensor_2(void* P_Info){
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b086      	sub	sp, #24
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
	T_DATA Data={.Type=2};
 8000a08:	f107 030c 	add.w	r3, r7, #12
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	601a      	str	r2, [r3, #0]
 8000a10:	605a      	str	r2, [r3, #4]
 8000a12:	609a      	str	r2, [r3, #8]
 8000a14:	2302      	movs	r3, #2
 8000a16:	733b      	strb	r3, [r7, #12]
	while(1){
		HAL_RNG_GenerateRandomNumber(&hrng, &Data.Value);
 8000a18:	f107 030c 	add.w	r3, r7, #12
 8000a1c:	3304      	adds	r3, #4
 8000a1e:	4619      	mov	r1, r3
 8000a20:	4811      	ldr	r0, [pc, #68]	; (8000a68 <Fonction_Thread_Sensor_2+0x68>)
 8000a22:	f001 ffe7 	bl	80029f4 <HAL_RNG_GenerateRandomNumber>
		Data.Value %= 12;
 8000a26:	6939      	ldr	r1, [r7, #16]
 8000a28:	4b10      	ldr	r3, [pc, #64]	; (8000a6c <Fonction_Thread_Sensor_2+0x6c>)
 8000a2a:	fba3 2301 	umull	r2, r3, r3, r1
 8000a2e:	08da      	lsrs	r2, r3, #3
 8000a30:	4613      	mov	r3, r2
 8000a32:	005b      	lsls	r3, r3, #1
 8000a34:	4413      	add	r3, r2
 8000a36:	009b      	lsls	r3, r3, #2
 8000a38:	1aca      	subs	r2, r1, r3
 8000a3a:	613a      	str	r2, [r7, #16]
		Data.Timestamp = (uint32_t)(time(NULL));
 8000a3c:	2000      	movs	r0, #0
 8000a3e:	f006 f925 	bl	8006c8c <time>
 8000a42:	4602      	mov	r2, r0
 8000a44:	460b      	mov	r3, r1
 8000a46:	4613      	mov	r3, r2
 8000a48:	617b      	str	r3, [r7, #20]
		osMessageQueuePut (Pipe_Reception_Analyse,(void*)&Data, 0, osWaitForever);
 8000a4a:	4b09      	ldr	r3, [pc, #36]	; (8000a70 <Fonction_Thread_Sensor_2+0x70>)
 8000a4c:	6818      	ldr	r0, [r3, #0]
 8000a4e:	f107 010c 	add.w	r1, r7, #12
 8000a52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a56:	2200      	movs	r2, #0
 8000a58:	f003 f8a2 	bl	8003ba0 <osMessageQueuePut>
		osDelay(period_sensor_2);
 8000a5c:	4b05      	ldr	r3, [pc, #20]	; (8000a74 <Fonction_Thread_Sensor_2+0x74>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	4618      	mov	r0, r3
 8000a62:	f003 f80e 	bl	8003a82 <osDelay>
		HAL_RNG_GenerateRandomNumber(&hrng, &Data.Value);
 8000a66:	e7d7      	b.n	8000a18 <Fonction_Thread_Sensor_2+0x18>
 8000a68:	200001b4 	.word	0x200001b4
 8000a6c:	aaaaaaab 	.word	0xaaaaaaab
 8000a70:	200001a8 	.word	0x200001a8
 8000a74:	20000004 	.word	0x20000004

08000a78 <Fonction_Thread_Sensor_3>:
	}
	osThreadTerminate(NULL);
}

void Fonction_Thread_Sensor_3(void* P_Info){
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b086      	sub	sp, #24
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
	T_DATA Data={.Type=3};
 8000a80:	f107 030c 	add.w	r3, r7, #12
 8000a84:	2200      	movs	r2, #0
 8000a86:	601a      	str	r2, [r3, #0]
 8000a88:	605a      	str	r2, [r3, #4]
 8000a8a:	609a      	str	r2, [r3, #8]
 8000a8c:	2303      	movs	r3, #3
 8000a8e:	733b      	strb	r3, [r7, #12]
	while(1){
		HAL_RNG_GenerateRandomNumber(&hrng, &Data.Value);
 8000a90:	f107 030c 	add.w	r3, r7, #12
 8000a94:	3304      	adds	r3, #4
 8000a96:	4619      	mov	r1, r3
 8000a98:	4811      	ldr	r0, [pc, #68]	; (8000ae0 <Fonction_Thread_Sensor_3+0x68>)
 8000a9a:	f001 ffab 	bl	80029f4 <HAL_RNG_GenerateRandomNumber>
		Data.Value %= 500;
 8000a9e:	693a      	ldr	r2, [r7, #16]
 8000aa0:	4b10      	ldr	r3, [pc, #64]	; (8000ae4 <Fonction_Thread_Sensor_3+0x6c>)
 8000aa2:	fba3 1302 	umull	r1, r3, r3, r2
 8000aa6:	095b      	lsrs	r3, r3, #5
 8000aa8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000aac:	fb01 f303 	mul.w	r3, r1, r3
 8000ab0:	1ad3      	subs	r3, r2, r3
 8000ab2:	613b      	str	r3, [r7, #16]
		Data.Timestamp = (uint32_t)(time(NULL));
 8000ab4:	2000      	movs	r0, #0
 8000ab6:	f006 f8e9 	bl	8006c8c <time>
 8000aba:	4602      	mov	r2, r0
 8000abc:	460b      	mov	r3, r1
 8000abe:	4613      	mov	r3, r2
 8000ac0:	617b      	str	r3, [r7, #20]
		osMessageQueuePut (Pipe_Reception_Analyse,(void*)&Data, 0, osWaitForever);
 8000ac2:	4b09      	ldr	r3, [pc, #36]	; (8000ae8 <Fonction_Thread_Sensor_3+0x70>)
 8000ac4:	6818      	ldr	r0, [r3, #0]
 8000ac6:	f107 010c 	add.w	r1, r7, #12
 8000aca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ace:	2200      	movs	r2, #0
 8000ad0:	f003 f866 	bl	8003ba0 <osMessageQueuePut>
		osDelay(period_sensor_3);
 8000ad4:	4b05      	ldr	r3, [pc, #20]	; (8000aec <Fonction_Thread_Sensor_3+0x74>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f002 ffd2 	bl	8003a82 <osDelay>
		HAL_RNG_GenerateRandomNumber(&hrng, &Data.Value);
 8000ade:	e7d7      	b.n	8000a90 <Fonction_Thread_Sensor_3+0x18>
 8000ae0:	200001b4 	.word	0x200001b4
 8000ae4:	10624dd3 	.word	0x10624dd3
 8000ae8:	200001a8 	.word	0x200001a8
 8000aec:	20000008 	.word	0x20000008

08000af0 <Fonction_Thread_Send>:
	}
	osThreadTerminate(NULL);
}

void Fonction_Thread_Send(void* P_Info){
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b086      	sub	sp, #24
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
	T_DATA Data;
	while(1){
		osThreadFlagsWait (FLAG_SEND_DATA, osFlagsWaitAll, HAL_MAX_DELAY);
 8000af8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000afc:	2101      	movs	r1, #1
 8000afe:	2001      	movs	r0, #1
 8000b00:	f002 ff3e 	bl	8003980 <osThreadFlagsWait>
		int i;
		osMessageQueueGetCount(&i);
 8000b04:	f107 0308 	add.w	r3, r7, #8
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f003 f907 	bl	8003d1c <osMessageQueueGetCount>
		while(i--){
 8000b0e:	e012      	b.n	8000b36 <Fonction_Thread_Send+0x46>
			if (osMessageQueueGet(Pipe_Reception_Analyse,(void*)&Data, 0, osWaitForever) == osOK){
 8000b10:	4b0c      	ldr	r3, [pc, #48]	; (8000b44 <Fonction_Thread_Send+0x54>)
 8000b12:	6818      	ldr	r0, [r3, #0]
 8000b14:	f107 010c 	add.w	r1, r7, #12
 8000b18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	f003 f89f 	bl	8003c60 <osMessageQueueGet>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d106      	bne.n	8000b36 <Fonction_Thread_Send+0x46>
				/*memcpy(json_message + sizeof(char) * INDEX_TIME, itoa(Data.Timestamp), sizeof(Data.Timestamp));
				memcpy(json_message + sizeof(char) * INDEX_VALUE, itoa(Data.Value), sizeof(Data.Value));
				memcpy(json_message + sizeof(char) * INDEX_TYPE, itoa(Data.Type), sizeof(Data.Type));*/
				// send via UART
				_write(0, json_message, sizeof(json_message));
 8000b28:	4b07      	ldr	r3, [pc, #28]	; (8000b48 <Fonction_Thread_Send+0x58>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	2204      	movs	r2, #4
 8000b2e:	4619      	mov	r1, r3
 8000b30:	2000      	movs	r0, #0
 8000b32:	f7ff fefd 	bl	8000930 <_write>
		while(i--){
 8000b36:	68bb      	ldr	r3, [r7, #8]
 8000b38:	1e5a      	subs	r2, r3, #1
 8000b3a:	60ba      	str	r2, [r7, #8]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d1e7      	bne.n	8000b10 <Fonction_Thread_Send+0x20>
	while(1){
 8000b40:	e7da      	b.n	8000af8 <Fonction_Thread_Send+0x8>
 8000b42:	bf00      	nop
 8000b44:	200001a8 	.word	0x200001a8
 8000b48:	20000010 	.word	0x20000010

08000b4c <Callback_TIM_5>:
	osThreadTerminate(NULL);
}


// Intéruption Timer pour Send Data
void Callback_TIM_5(TIM_HandleTypeDef* P_Timer){
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
	if (P_Timer == &htim5) {
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	4a06      	ldr	r2, [pc, #24]	; (8000b70 <Callback_TIM_5+0x24>)
 8000b58:	4293      	cmp	r3, r2
 8000b5a:	d105      	bne.n	8000b68 <Callback_TIM_5+0x1c>
		osThreadFlagsSet(Thread_Send_Data,FLAG_SEND_DATA);
 8000b5c:	4b05      	ldr	r3, [pc, #20]	; (8000b74 <Callback_TIM_5+0x28>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	2101      	movs	r1, #1
 8000b62:	4618      	mov	r0, r3
 8000b64:	f002 febe 	bl	80038e4 <osThreadFlagsSet>
	}
}
 8000b68:	bf00      	nop
 8000b6a:	3708      	adds	r7, #8
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	20000210 	.word	0x20000210
 8000b74:	200001ac 	.word	0x200001ac

08000b78 <HAL_GPIO_EXTI_Callback>:

// Intéruption Bouton Bleu pour Send Data
void HAL_GPIO_EXTI_Callback(uint16_t P_Pin){
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	4603      	mov	r3, r0
 8000b80:	80fb      	strh	r3, [r7, #6]
	if (P_Pin == BTN_SEND_DATA_Pin){
 8000b82:	88fb      	ldrh	r3, [r7, #6]
 8000b84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000b88:	d106      	bne.n	8000b98 <HAL_GPIO_EXTI_Callback+0x20>
		osThreadFlagsSet (Thread_Send_Data,FLAG_SEND_DATA);
 8000b8a:	4b61      	ldr	r3, [pc, #388]	; (8000d10 <HAL_GPIO_EXTI_Callback+0x198>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	2101      	movs	r1, #1
 8000b90:	4618      	mov	r0, r3
 8000b92:	f002 fea7 	bl	80038e4 <osThreadFlagsSet>
	}
	else if (P_Pin == BTN_MINUS_Pin && state_config != 0){
		if (state_config != 4 && *(PERIOD[state_config]) > 100) PERIOD[state_config] -= 100;
		else if (state_config == 4 && *(PERIOD[state_config]) > 1000) PERIOD[state_config] -= 1000;
	}
}
 8000b96:	e0b7      	b.n	8000d08 <HAL_GPIO_EXTI_Callback+0x190>
	else if (P_Pin == BTN_SELECT_Pin){
 8000b98:	88fb      	ldrh	r3, [r7, #6]
 8000b9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000b9e:	d13c      	bne.n	8000c1a <HAL_GPIO_EXTI_Callback+0xa2>
		if(state_config != 0){
 8000ba0:	4b5c      	ldr	r3, [pc, #368]	; (8000d14 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d013      	beq.n	8000bd0 <HAL_GPIO_EXTI_Callback+0x58>
			PORT[state_config]->ODR &= ~PIN[state_config];
 8000ba8:	4b5a      	ldr	r3, [pc, #360]	; (8000d14 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4a5a      	ldr	r2, [pc, #360]	; (8000d18 <HAL_GPIO_EXTI_Callback+0x1a0>)
 8000bae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bb2:	695a      	ldr	r2, [r3, #20]
 8000bb4:	4b57      	ldr	r3, [pc, #348]	; (8000d14 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4958      	ldr	r1, [pc, #352]	; (8000d1c <HAL_GPIO_EXTI_Callback+0x1a4>)
 8000bba:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000bbe:	43db      	mvns	r3, r3
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	4b54      	ldr	r3, [pc, #336]	; (8000d14 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	4954      	ldr	r1, [pc, #336]	; (8000d18 <HAL_GPIO_EXTI_Callback+0x1a0>)
 8000bc8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000bcc:	4002      	ands	r2, r0
 8000bce:	615a      	str	r2, [r3, #20]
		state_config ++;
 8000bd0:	4b50      	ldr	r3, [pc, #320]	; (8000d14 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	3301      	adds	r3, #1
 8000bd6:	4a4f      	ldr	r2, [pc, #316]	; (8000d14 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000bd8:	6013      	str	r3, [r2, #0]
		if(state_config > 4){state_config = 0;}
 8000bda:	4b4e      	ldr	r3, [pc, #312]	; (8000d14 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	2b04      	cmp	r3, #4
 8000be0:	dd02      	ble.n	8000be8 <HAL_GPIO_EXTI_Callback+0x70>
 8000be2:	4b4c      	ldr	r3, [pc, #304]	; (8000d14 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	601a      	str	r2, [r3, #0]
		if(state_config != 0){
 8000be8:	4b4a      	ldr	r3, [pc, #296]	; (8000d14 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	f000 808b 	beq.w	8000d08 <HAL_GPIO_EXTI_Callback+0x190>
			PORT[state_config]->ODR |= PIN[state_config];
 8000bf2:	4b48      	ldr	r3, [pc, #288]	; (8000d14 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	4a48      	ldr	r2, [pc, #288]	; (8000d18 <HAL_GPIO_EXTI_Callback+0x1a0>)
 8000bf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bfc:	695a      	ldr	r2, [r3, #20]
 8000bfe:	4b45      	ldr	r3, [pc, #276]	; (8000d14 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	4946      	ldr	r1, [pc, #280]	; (8000d1c <HAL_GPIO_EXTI_Callback+0x1a4>)
 8000c04:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000c08:	4618      	mov	r0, r3
 8000c0a:	4b42      	ldr	r3, [pc, #264]	; (8000d14 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	4942      	ldr	r1, [pc, #264]	; (8000d18 <HAL_GPIO_EXTI_Callback+0x1a0>)
 8000c10:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000c14:	4302      	orrs	r2, r0
 8000c16:	615a      	str	r2, [r3, #20]
}
 8000c18:	e076      	b.n	8000d08 <HAL_GPIO_EXTI_Callback+0x190>
	else if (P_Pin == BTN_PLUS_Pin && state_config != 0){
 8000c1a:	88fb      	ldrh	r3, [r7, #6]
 8000c1c:	2b02      	cmp	r3, #2
 8000c1e:	d138      	bne.n	8000c92 <HAL_GPIO_EXTI_Callback+0x11a>
 8000c20:	4b3c      	ldr	r3, [pc, #240]	; (8000d14 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d034      	beq.n	8000c92 <HAL_GPIO_EXTI_Callback+0x11a>
		if (state_config != 4 && *(PERIOD[state_config]) < 2000) PERIOD[state_config] += 100;
 8000c28:	4b3a      	ldr	r3, [pc, #232]	; (8000d14 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	2b04      	cmp	r3, #4
 8000c2e:	d015      	beq.n	8000c5c <HAL_GPIO_EXTI_Callback+0xe4>
 8000c30:	4b38      	ldr	r3, [pc, #224]	; (8000d14 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a3a      	ldr	r2, [pc, #232]	; (8000d20 <HAL_GPIO_EXTI_Callback+0x1a8>)
 8000c36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000c40:	da0c      	bge.n	8000c5c <HAL_GPIO_EXTI_Callback+0xe4>
 8000c42:	4b34      	ldr	r3, [pc, #208]	; (8000d14 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	4a36      	ldr	r2, [pc, #216]	; (8000d20 <HAL_GPIO_EXTI_Callback+0x1a8>)
 8000c48:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000c4c:	4b31      	ldr	r3, [pc, #196]	; (8000d14 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	f502 72c8 	add.w	r2, r2, #400	; 0x190
 8000c54:	4932      	ldr	r1, [pc, #200]	; (8000d20 <HAL_GPIO_EXTI_Callback+0x1a8>)
 8000c56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8000c5a:	e054      	b.n	8000d06 <HAL_GPIO_EXTI_Callback+0x18e>
		else if (state_config == 4 && *(PERIOD[state_config]) < 10000) PERIOD[state_config] += 1000;
 8000c5c:	4b2d      	ldr	r3, [pc, #180]	; (8000d14 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	2b04      	cmp	r3, #4
 8000c62:	d150      	bne.n	8000d06 <HAL_GPIO_EXTI_Callback+0x18e>
 8000c64:	4b2b      	ldr	r3, [pc, #172]	; (8000d14 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4a2d      	ldr	r2, [pc, #180]	; (8000d20 <HAL_GPIO_EXTI_Callback+0x1a8>)
 8000c6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	f242 720f 	movw	r2, #9999	; 0x270f
 8000c74:	4293      	cmp	r3, r2
 8000c76:	dc46      	bgt.n	8000d06 <HAL_GPIO_EXTI_Callback+0x18e>
 8000c78:	4b26      	ldr	r3, [pc, #152]	; (8000d14 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a28      	ldr	r2, [pc, #160]	; (8000d20 <HAL_GPIO_EXTI_Callback+0x1a8>)
 8000c7e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000c82:	4b24      	ldr	r3, [pc, #144]	; (8000d14 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	f502 627a 	add.w	r2, r2, #4000	; 0xfa0
 8000c8a:	4925      	ldr	r1, [pc, #148]	; (8000d20 <HAL_GPIO_EXTI_Callback+0x1a8>)
 8000c8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if (state_config != 4 && *(PERIOD[state_config]) < 2000) PERIOD[state_config] += 100;
 8000c90:	e039      	b.n	8000d06 <HAL_GPIO_EXTI_Callback+0x18e>
	else if (P_Pin == BTN_MINUS_Pin && state_config != 0){
 8000c92:	88fb      	ldrh	r3, [r7, #6]
 8000c94:	2b20      	cmp	r3, #32
 8000c96:	d137      	bne.n	8000d08 <HAL_GPIO_EXTI_Callback+0x190>
 8000c98:	4b1e      	ldr	r3, [pc, #120]	; (8000d14 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d033      	beq.n	8000d08 <HAL_GPIO_EXTI_Callback+0x190>
		if (state_config != 4 && *(PERIOD[state_config]) > 100) PERIOD[state_config] -= 100;
 8000ca0:	4b1c      	ldr	r3, [pc, #112]	; (8000d14 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	2b04      	cmp	r3, #4
 8000ca6:	d014      	beq.n	8000cd2 <HAL_GPIO_EXTI_Callback+0x15a>
 8000ca8:	4b1a      	ldr	r3, [pc, #104]	; (8000d14 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a1c      	ldr	r2, [pc, #112]	; (8000d20 <HAL_GPIO_EXTI_Callback+0x1a8>)
 8000cae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	2b64      	cmp	r3, #100	; 0x64
 8000cb6:	dd0c      	ble.n	8000cd2 <HAL_GPIO_EXTI_Callback+0x15a>
 8000cb8:	4b16      	ldr	r3, [pc, #88]	; (8000d14 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a18      	ldr	r2, [pc, #96]	; (8000d20 <HAL_GPIO_EXTI_Callback+0x1a8>)
 8000cbe:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000cc2:	4b14      	ldr	r3, [pc, #80]	; (8000d14 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	f5a2 72c8 	sub.w	r2, r2, #400	; 0x190
 8000cca:	4915      	ldr	r1, [pc, #84]	; (8000d20 <HAL_GPIO_EXTI_Callback+0x1a8>)
 8000ccc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8000cd0:	e01a      	b.n	8000d08 <HAL_GPIO_EXTI_Callback+0x190>
		else if (state_config == 4 && *(PERIOD[state_config]) > 1000) PERIOD[state_config] -= 1000;
 8000cd2:	4b10      	ldr	r3, [pc, #64]	; (8000d14 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	2b04      	cmp	r3, #4
 8000cd8:	d116      	bne.n	8000d08 <HAL_GPIO_EXTI_Callback+0x190>
 8000cda:	4b0e      	ldr	r3, [pc, #56]	; (8000d14 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	4a10      	ldr	r2, [pc, #64]	; (8000d20 <HAL_GPIO_EXTI_Callback+0x1a8>)
 8000ce0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000cea:	dd0d      	ble.n	8000d08 <HAL_GPIO_EXTI_Callback+0x190>
 8000cec:	4b09      	ldr	r3, [pc, #36]	; (8000d14 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a0b      	ldr	r2, [pc, #44]	; (8000d20 <HAL_GPIO_EXTI_Callback+0x1a8>)
 8000cf2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000cf6:	4b07      	ldr	r3, [pc, #28]	; (8000d14 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	f5a2 627a 	sub.w	r2, r2, #4000	; 0xfa0
 8000cfe:	4908      	ldr	r1, [pc, #32]	; (8000d20 <HAL_GPIO_EXTI_Callback+0x1a8>)
 8000d00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000d04:	e000      	b.n	8000d08 <HAL_GPIO_EXTI_Callback+0x190>
		if (state_config != 4 && *(PERIOD[state_config]) < 2000) PERIOD[state_config] += 100;
 8000d06:	bf00      	nop
}
 8000d08:	bf00      	nop
 8000d0a:	3708      	adds	r7, #8
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	200001ac 	.word	0x200001ac
 8000d14:	20000194 	.word	0x20000194
 8000d18:	20000014 	.word	0x20000014
 8000d1c:	20000024 	.word	0x20000024
 8000d20:	20000198 	.word	0x20000198

08000d24 <main>:

int main(){
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
	PERIOD[0] = &period_sensor_1;
 8000d2a:	4b24      	ldr	r3, [pc, #144]	; (8000dbc <main+0x98>)
 8000d2c:	4a24      	ldr	r2, [pc, #144]	; (8000dc0 <main+0x9c>)
 8000d2e:	601a      	str	r2, [r3, #0]
	PERIOD[1] = &period_sensor_2;
 8000d30:	4b22      	ldr	r3, [pc, #136]	; (8000dbc <main+0x98>)
 8000d32:	4a24      	ldr	r2, [pc, #144]	; (8000dc4 <main+0xa0>)
 8000d34:	605a      	str	r2, [r3, #4]
	PERIOD[2] = &period_sensor_3;
 8000d36:	4b21      	ldr	r3, [pc, #132]	; (8000dbc <main+0x98>)
 8000d38:	4a23      	ldr	r2, [pc, #140]	; (8000dc8 <main+0xa4>)
 8000d3a:	609a      	str	r2, [r3, #8]
	PERIOD[3] = &period_send;
 8000d3c:	4b1f      	ldr	r3, [pc, #124]	; (8000dbc <main+0x98>)
 8000d3e:	4a23      	ldr	r2, [pc, #140]	; (8000dcc <main+0xa8>)
 8000d40:	60da      	str	r2, [r3, #12]
	HAL_Init();
 8000d42:	f000 fadf 	bl	8001304 <HAL_Init>
	SystemClock_Config();
 8000d46:	f7ff fd6b 	bl	8000820 <SystemClock_Config>
	MX_GPIO_Init();
 8000d4a:	f7ff fcc9 	bl	80006e0 <MX_GPIO_Init>
	MX_ADC1_Init();
 8000d4e:	f7ff fc31 	bl	80005b4 <MX_ADC1_Init>
	MX_RNG_Init();
 8000d52:	f000 f857 	bl	8000e04 <MX_RNG_Init>
	MX_USART2_UART_Init();
 8000d56:	f000 fa39 	bl	80011cc <MX_USART2_UART_Init>
	osKernelInitialize();
 8000d5a:	f002 fce7 	bl	800372c <osKernelInitialize>
	printf('printf\n');
 8000d5e:	481c      	ldr	r0, [pc, #112]	; (8000dd0 <main+0xac>)
 8000d60:	f005 ff7c 	bl	8006c5c <iprintf>
	char * P_Message = "Ici";
 8000d64:	4b1b      	ldr	r3, [pc, #108]	; (8000dd4 <main+0xb0>)
 8000d66:	607b      	str	r3, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *) P_Message, 3, HAL_MAX_DELAY);
 8000d68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d6c:	2203      	movs	r2, #3
 8000d6e:	6879      	ldr	r1, [r7, #4]
 8000d70:	4819      	ldr	r0, [pc, #100]	; (8000dd8 <main+0xb4>)
 8000d72:	f002 f922 	bl	8002fba <HAL_UART_Transmit>
	Pipe_Reception_Analyse= osMessageQueueNew (TAILLE_PIPE_RECEPTION_ANALYSE, sizeof(uint8_t),NULL);
 8000d76:	2200      	movs	r2, #0
 8000d78:	2101      	movs	r1, #1
 8000d7a:	2014      	movs	r0, #20
 8000d7c:	f002 fe9c 	bl	8003ab8 <osMessageQueueNew>
 8000d80:	4603      	mov	r3, r0
 8000d82:	4a16      	ldr	r2, [pc, #88]	; (8000ddc <main+0xb8>)
 8000d84:	6013      	str	r3, [r2, #0]
	osThreadNew(Fonction_Thread_Sensor_1, NULL, &Config_Thread_Sensor_1);
 8000d86:	4a16      	ldr	r2, [pc, #88]	; (8000de0 <main+0xbc>)
 8000d88:	2100      	movs	r1, #0
 8000d8a:	4816      	ldr	r0, [pc, #88]	; (8000de4 <main+0xc0>)
 8000d8c:	f002 fd18 	bl	80037c0 <osThreadNew>
	osThreadNew(Fonction_Thread_Sensor_2, NULL, &Config_Thread_Sensor_2);
 8000d90:	4a15      	ldr	r2, [pc, #84]	; (8000de8 <main+0xc4>)
 8000d92:	2100      	movs	r1, #0
 8000d94:	4815      	ldr	r0, [pc, #84]	; (8000dec <main+0xc8>)
 8000d96:	f002 fd13 	bl	80037c0 <osThreadNew>
	osThreadNew(Fonction_Thread_Sensor_3, NULL, &Config_Thread_Sensor_3);
 8000d9a:	4a15      	ldr	r2, [pc, #84]	; (8000df0 <main+0xcc>)
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	4815      	ldr	r0, [pc, #84]	; (8000df4 <main+0xd0>)
 8000da0:	f002 fd0e 	bl	80037c0 <osThreadNew>
	Thread_Send_Data = osThreadNew(Fonction_Thread_Send, NULL, &Config_Thread_Send);
 8000da4:	4a14      	ldr	r2, [pc, #80]	; (8000df8 <main+0xd4>)
 8000da6:	2100      	movs	r1, #0
 8000da8:	4814      	ldr	r0, [pc, #80]	; (8000dfc <main+0xd8>)
 8000daa:	f002 fd09 	bl	80037c0 <osThreadNew>
 8000dae:	4603      	mov	r3, r0
 8000db0:	4a13      	ldr	r2, [pc, #76]	; (8000e00 <main+0xdc>)
 8000db2:	6013      	str	r3, [r2, #0]
	osKernelStart();
 8000db4:	f002 fcde 	bl	8003774 <osKernelStart>
	while(1);
 8000db8:	e7fe      	b.n	8000db8 <main+0x94>
 8000dba:	bf00      	nop
 8000dbc:	20000198 	.word	0x20000198
 8000dc0:	20000000 	.word	0x20000000
 8000dc4:	20000004 	.word	0x20000004
 8000dc8:	20000008 	.word	0x20000008
 8000dcc:	2000000c 	.word	0x2000000c
 8000dd0:	6e74660a 	.word	0x6e74660a
 8000dd4:	08007c70 	.word	0x08007c70
 8000dd8:	20000258 	.word	0x20000258
 8000ddc:	200001a8 	.word	0x200001a8
 8000de0:	2000002c 	.word	0x2000002c
 8000de4:	0800096d 	.word	0x0800096d
 8000de8:	20000050 	.word	0x20000050
 8000dec:	08000a01 	.word	0x08000a01
 8000df0:	20000074 	.word	0x20000074
 8000df4:	08000a79 	.word	0x08000a79
 8000df8:	20000098 	.word	0x20000098
 8000dfc:	08000af1 	.word	0x08000af1
 8000e00:	200001ac 	.word	0x200001ac

08000e04 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8000e08:	4b06      	ldr	r3, [pc, #24]	; (8000e24 <MX_RNG_Init+0x20>)
 8000e0a:	4a07      	ldr	r2, [pc, #28]	; (8000e28 <MX_RNG_Init+0x24>)
 8000e0c:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8000e0e:	4805      	ldr	r0, [pc, #20]	; (8000e24 <MX_RNG_Init+0x20>)
 8000e10:	f001 fdc6 	bl	80029a0 <HAL_RNG_Init>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8000e1a:	f7ff fd83 	bl	8000924 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8000e1e:	bf00      	nop
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	200001b4 	.word	0x200001b4
 8000e28:	40080000 	.word	0x40080000

08000e2c <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b085      	sub	sp, #20
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]

  if(rngHandle->Instance==RNG)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4a0b      	ldr	r2, [pc, #44]	; (8000e68 <HAL_RNG_MspInit+0x3c>)
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d10d      	bne.n	8000e5a <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8000e3e:	2300      	movs	r3, #0
 8000e40:	60fb      	str	r3, [r7, #12]
 8000e42:	4b0a      	ldr	r3, [pc, #40]	; (8000e6c <HAL_RNG_MspInit+0x40>)
 8000e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e46:	4a09      	ldr	r2, [pc, #36]	; (8000e6c <HAL_RNG_MspInit+0x40>)
 8000e48:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000e4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e4e:	4b07      	ldr	r3, [pc, #28]	; (8000e6c <HAL_RNG_MspInit+0x40>)
 8000e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e52:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000e56:	60fb      	str	r3, [r7, #12]
 8000e58:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 8000e5a:	bf00      	nop
 8000e5c:	3714      	adds	r7, #20
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop
 8000e68:	40080000 	.word	0x40080000
 8000e6c:	40023800 	.word	0x40023800

08000e70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e76:	2300      	movs	r3, #0
 8000e78:	607b      	str	r3, [r7, #4]
 8000e7a:	4b12      	ldr	r3, [pc, #72]	; (8000ec4 <HAL_MspInit+0x54>)
 8000e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e7e:	4a11      	ldr	r2, [pc, #68]	; (8000ec4 <HAL_MspInit+0x54>)
 8000e80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e84:	6453      	str	r3, [r2, #68]	; 0x44
 8000e86:	4b0f      	ldr	r3, [pc, #60]	; (8000ec4 <HAL_MspInit+0x54>)
 8000e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e8e:	607b      	str	r3, [r7, #4]
 8000e90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e92:	2300      	movs	r3, #0
 8000e94:	603b      	str	r3, [r7, #0]
 8000e96:	4b0b      	ldr	r3, [pc, #44]	; (8000ec4 <HAL_MspInit+0x54>)
 8000e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e9a:	4a0a      	ldr	r2, [pc, #40]	; (8000ec4 <HAL_MspInit+0x54>)
 8000e9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ea0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ea2:	4b08      	ldr	r3, [pc, #32]	; (8000ec4 <HAL_MspInit+0x54>)
 8000ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eaa:	603b      	str	r3, [r7, #0]
 8000eac:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000eae:	2200      	movs	r2, #0
 8000eb0:	210f      	movs	r1, #15
 8000eb2:	f06f 0001 	mvn.w	r0, #1
 8000eb6:	f000 fecd 	bl	8001c54 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eba:	bf00      	nop
 8000ebc:	3708      	adds	r7, #8
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	40023800 	.word	0x40023800

08000ec8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b08e      	sub	sp, #56	; 0x38
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000ed8:	2300      	movs	r3, #0
 8000eda:	60fb      	str	r3, [r7, #12]
 8000edc:	4b33      	ldr	r3, [pc, #204]	; (8000fac <HAL_InitTick+0xe4>)
 8000ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee0:	4a32      	ldr	r2, [pc, #200]	; (8000fac <HAL_InitTick+0xe4>)
 8000ee2:	f043 0310 	orr.w	r3, r3, #16
 8000ee6:	6413      	str	r3, [r2, #64]	; 0x40
 8000ee8:	4b30      	ldr	r3, [pc, #192]	; (8000fac <HAL_InitTick+0xe4>)
 8000eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eec:	f003 0310 	and.w	r3, r3, #16
 8000ef0:	60fb      	str	r3, [r7, #12]
 8000ef2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ef4:	f107 0210 	add.w	r2, r7, #16
 8000ef8:	f107 0314 	add.w	r3, r7, #20
 8000efc:	4611      	mov	r1, r2
 8000efe:	4618      	mov	r0, r3
 8000f00:	f001 fa98 	bl	8002434 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000f04:	6a3b      	ldr	r3, [r7, #32]
 8000f06:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000f08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d103      	bne.n	8000f16 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000f0e:	f001 fa69 	bl	80023e4 <HAL_RCC_GetPCLK1Freq>
 8000f12:	6378      	str	r0, [r7, #52]	; 0x34
 8000f14:	e004      	b.n	8000f20 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000f16:	f001 fa65 	bl	80023e4 <HAL_RCC_GetPCLK1Freq>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	005b      	lsls	r3, r3, #1
 8000f1e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000f20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f22:	4a23      	ldr	r2, [pc, #140]	; (8000fb0 <HAL_InitTick+0xe8>)
 8000f24:	fba2 2303 	umull	r2, r3, r2, r3
 8000f28:	0c9b      	lsrs	r3, r3, #18
 8000f2a:	3b01      	subs	r3, #1
 8000f2c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000f2e:	4b21      	ldr	r3, [pc, #132]	; (8000fb4 <HAL_InitTick+0xec>)
 8000f30:	4a21      	ldr	r2, [pc, #132]	; (8000fb8 <HAL_InitTick+0xf0>)
 8000f32:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000f34:	4b1f      	ldr	r3, [pc, #124]	; (8000fb4 <HAL_InitTick+0xec>)
 8000f36:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f3a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000f3c:	4a1d      	ldr	r2, [pc, #116]	; (8000fb4 <HAL_InitTick+0xec>)
 8000f3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f40:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000f42:	4b1c      	ldr	r3, [pc, #112]	; (8000fb4 <HAL_InitTick+0xec>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f48:	4b1a      	ldr	r3, [pc, #104]	; (8000fb4 <HAL_InitTick+0xec>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f4e:	4b19      	ldr	r3, [pc, #100]	; (8000fb4 <HAL_InitTick+0xec>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000f54:	4817      	ldr	r0, [pc, #92]	; (8000fb4 <HAL_InitTick+0xec>)
 8000f56:	f001 fda3 	bl	8002aa0 <HAL_TIM_Base_Init>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000f60:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d11b      	bne.n	8000fa0 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000f68:	4812      	ldr	r0, [pc, #72]	; (8000fb4 <HAL_InitTick+0xec>)
 8000f6a:	f001 fde9 	bl	8002b40 <HAL_TIM_Base_Start_IT>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000f74:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d111      	bne.n	8000fa0 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000f7c:	2036      	movs	r0, #54	; 0x36
 8000f7e:	f000 fe85 	bl	8001c8c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	2b0f      	cmp	r3, #15
 8000f86:	d808      	bhi.n	8000f9a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000f88:	2200      	movs	r2, #0
 8000f8a:	6879      	ldr	r1, [r7, #4]
 8000f8c:	2036      	movs	r0, #54	; 0x36
 8000f8e:	f000 fe61 	bl	8001c54 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f92:	4a0a      	ldr	r2, [pc, #40]	; (8000fbc <HAL_InitTick+0xf4>)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	6013      	str	r3, [r2, #0]
 8000f98:	e002      	b.n	8000fa0 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000fa0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	3738      	adds	r7, #56	; 0x38
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	40023800 	.word	0x40023800
 8000fb0:	431bde83 	.word	0x431bde83
 8000fb4:	200001c4 	.word	0x200001c4
 8000fb8:	40001000 	.word	0x40001000
 8000fbc:	200000c0 	.word	0x200000c0

08000fc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fc4:	e7fe      	b.n	8000fc4 <NMI_Handler+0x4>

08000fc6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fc6:	b480      	push	{r7}
 8000fc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fca:	e7fe      	b.n	8000fca <HardFault_Handler+0x4>

08000fcc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fd0:	e7fe      	b.n	8000fd0 <MemManage_Handler+0x4>

08000fd2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fd2:	b480      	push	{r7}
 8000fd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fd6:	e7fe      	b.n	8000fd6 <BusFault_Handler+0x4>

08000fd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fdc:	e7fe      	b.n	8000fdc <UsageFault_Handler+0x4>

08000fde <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fde:	b480      	push	{r7}
 8000fe0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fe2:	bf00      	nop
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr

08000fec <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_PLUS_Pin);
 8000ff0:	2002      	movs	r0, #2
 8000ff2:	f000 ffe7 	bl	8001fc4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000ff6:	bf00      	nop
 8000ff8:	bd80      	pop	{r7, pc}

08000ffa <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000ffa:	b580      	push	{r7, lr}
 8000ffc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_SELECT_Pin);
 8000ffe:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001002:	f000 ffdf 	bl	8001fc4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BTN_SEND_DATA_Pin);
 8001006:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800100a:	f000 ffdb 	bl	8001fc4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800100e:	bf00      	nop
 8001010:	bd80      	pop	{r7, pc}
	...

08001014 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC channel underrun error interrupt.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001018:	4802      	ldr	r0, [pc, #8]	; (8001024 <TIM6_DAC_IRQHandler+0x10>)
 800101a:	f001 fddf 	bl	8002bdc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800101e:	bf00      	nop
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	200001c4 	.word	0x200001c4

08001028 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b086      	sub	sp, #24
 800102c:	af00      	add	r7, sp, #0
 800102e:	60f8      	str	r0, [r7, #12]
 8001030:	60b9      	str	r1, [r7, #8]
 8001032:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001034:	2300      	movs	r3, #0
 8001036:	617b      	str	r3, [r7, #20]
 8001038:	e00a      	b.n	8001050 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800103a:	f3af 8000 	nop.w
 800103e:	4601      	mov	r1, r0
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	1c5a      	adds	r2, r3, #1
 8001044:	60ba      	str	r2, [r7, #8]
 8001046:	b2ca      	uxtb	r2, r1
 8001048:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800104a:	697b      	ldr	r3, [r7, #20]
 800104c:	3301      	adds	r3, #1
 800104e:	617b      	str	r3, [r7, #20]
 8001050:	697a      	ldr	r2, [r7, #20]
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	429a      	cmp	r2, r3
 8001056:	dbf0      	blt.n	800103a <_read+0x12>
  }

  return len;
 8001058:	687b      	ldr	r3, [r7, #4]
}
 800105a:	4618      	mov	r0, r3
 800105c:	3718      	adds	r7, #24
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}

08001062 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001062:	b480      	push	{r7}
 8001064:	b083      	sub	sp, #12
 8001066:	af00      	add	r7, sp, #0
 8001068:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800106a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800106e:	4618      	mov	r0, r3
 8001070:	370c      	adds	r7, #12
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr

0800107a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800107a:	b480      	push	{r7}
 800107c:	b083      	sub	sp, #12
 800107e:	af00      	add	r7, sp, #0
 8001080:	6078      	str	r0, [r7, #4]
 8001082:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800108a:	605a      	str	r2, [r3, #4]
  return 0;
 800108c:	2300      	movs	r3, #0
}
 800108e:	4618      	mov	r0, r3
 8001090:	370c      	adds	r7, #12
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr

0800109a <_isatty>:

int _isatty(int file)
{
 800109a:	b480      	push	{r7}
 800109c:	b083      	sub	sp, #12
 800109e:	af00      	add	r7, sp, #0
 80010a0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80010a2:	2301      	movs	r3, #1
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	370c      	adds	r7, #12
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr

080010b0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b085      	sub	sp, #20
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	60f8      	str	r0, [r7, #12]
 80010b8:	60b9      	str	r1, [r7, #8]
 80010ba:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80010bc:	2300      	movs	r3, #0
}
 80010be:	4618      	mov	r0, r3
 80010c0:	3714      	adds	r7, #20
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
	...

080010cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b086      	sub	sp, #24
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010d4:	4a14      	ldr	r2, [pc, #80]	; (8001128 <_sbrk+0x5c>)
 80010d6:	4b15      	ldr	r3, [pc, #84]	; (800112c <_sbrk+0x60>)
 80010d8:	1ad3      	subs	r3, r2, r3
 80010da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010e0:	4b13      	ldr	r3, [pc, #76]	; (8001130 <_sbrk+0x64>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d102      	bne.n	80010ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010e8:	4b11      	ldr	r3, [pc, #68]	; (8001130 <_sbrk+0x64>)
 80010ea:	4a12      	ldr	r2, [pc, #72]	; (8001134 <_sbrk+0x68>)
 80010ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010ee:	4b10      	ldr	r3, [pc, #64]	; (8001130 <_sbrk+0x64>)
 80010f0:	681a      	ldr	r2, [r3, #0]
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4413      	add	r3, r2
 80010f6:	693a      	ldr	r2, [r7, #16]
 80010f8:	429a      	cmp	r2, r3
 80010fa:	d207      	bcs.n	800110c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010fc:	f005 fd6e 	bl	8006bdc <__errno>
 8001100:	4603      	mov	r3, r0
 8001102:	220c      	movs	r2, #12
 8001104:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001106:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800110a:	e009      	b.n	8001120 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800110c:	4b08      	ldr	r3, [pc, #32]	; (8001130 <_sbrk+0x64>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001112:	4b07      	ldr	r3, [pc, #28]	; (8001130 <_sbrk+0x64>)
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	4413      	add	r3, r2
 800111a:	4a05      	ldr	r2, [pc, #20]	; (8001130 <_sbrk+0x64>)
 800111c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800111e:	68fb      	ldr	r3, [r7, #12]
}
 8001120:	4618      	mov	r0, r3
 8001122:	3718      	adds	r7, #24
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	20008000 	.word	0x20008000
 800112c:	00000400 	.word	0x00000400
 8001130:	2000020c 	.word	0x2000020c
 8001134:	20004c00 	.word	0x20004c00

08001138 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800113c:	4b06      	ldr	r3, [pc, #24]	; (8001158 <SystemInit+0x20>)
 800113e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001142:	4a05      	ldr	r2, [pc, #20]	; (8001158 <SystemInit+0x20>)
 8001144:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001148:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800114c:	bf00      	nop
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	e000ed00 	.word	0xe000ed00

0800115c <HAL_TIM_Base_MspInit>:
  HAL_TIM_MspPostInit(&htim11);

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800115c:	b480      	push	{r7}
 800115e:	b085      	sub	sp, #20
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM5)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a15      	ldr	r2, [pc, #84]	; (80011c0 <HAL_TIM_Base_MspInit+0x64>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d10e      	bne.n	800118c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 800116e:	2300      	movs	r3, #0
 8001170:	60fb      	str	r3, [r7, #12]
 8001172:	4b14      	ldr	r3, [pc, #80]	; (80011c4 <HAL_TIM_Base_MspInit+0x68>)
 8001174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001176:	4a13      	ldr	r2, [pc, #76]	; (80011c4 <HAL_TIM_Base_MspInit+0x68>)
 8001178:	f043 0308 	orr.w	r3, r3, #8
 800117c:	6413      	str	r3, [r2, #64]	; 0x40
 800117e:	4b11      	ldr	r3, [pc, #68]	; (80011c4 <HAL_TIM_Base_MspInit+0x68>)
 8001180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001182:	f003 0308 	and.w	r3, r3, #8
 8001186:	60fb      	str	r3, [r7, #12]
 8001188:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM11_CLK_ENABLE();
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 800118a:	e012      	b.n	80011b2 <HAL_TIM_Base_MspInit+0x56>
  else if(tim_baseHandle->Instance==TIM11)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a0d      	ldr	r2, [pc, #52]	; (80011c8 <HAL_TIM_Base_MspInit+0x6c>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d10d      	bne.n	80011b2 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001196:	2300      	movs	r3, #0
 8001198:	60bb      	str	r3, [r7, #8]
 800119a:	4b0a      	ldr	r3, [pc, #40]	; (80011c4 <HAL_TIM_Base_MspInit+0x68>)
 800119c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800119e:	4a09      	ldr	r2, [pc, #36]	; (80011c4 <HAL_TIM_Base_MspInit+0x68>)
 80011a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011a4:	6453      	str	r3, [r2, #68]	; 0x44
 80011a6:	4b07      	ldr	r3, [pc, #28]	; (80011c4 <HAL_TIM_Base_MspInit+0x68>)
 80011a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011ae:	60bb      	str	r3, [r7, #8]
 80011b0:	68bb      	ldr	r3, [r7, #8]
}
 80011b2:	bf00      	nop
 80011b4:	3714      	adds	r7, #20
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop
 80011c0:	40000c00 	.word	0x40000c00
 80011c4:	40023800 	.word	0x40023800
 80011c8:	40014800 	.word	0x40014800

080011cc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011d0:	4b11      	ldr	r3, [pc, #68]	; (8001218 <MX_USART2_UART_Init+0x4c>)
 80011d2:	4a12      	ldr	r2, [pc, #72]	; (800121c <MX_USART2_UART_Init+0x50>)
 80011d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80011d6:	4b10      	ldr	r3, [pc, #64]	; (8001218 <MX_USART2_UART_Init+0x4c>)
 80011d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011de:	4b0e      	ldr	r3, [pc, #56]	; (8001218 <MX_USART2_UART_Init+0x4c>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011e4:	4b0c      	ldr	r3, [pc, #48]	; (8001218 <MX_USART2_UART_Init+0x4c>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011ea:	4b0b      	ldr	r3, [pc, #44]	; (8001218 <MX_USART2_UART_Init+0x4c>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011f0:	4b09      	ldr	r3, [pc, #36]	; (8001218 <MX_USART2_UART_Init+0x4c>)
 80011f2:	220c      	movs	r2, #12
 80011f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011f6:	4b08      	ldr	r3, [pc, #32]	; (8001218 <MX_USART2_UART_Init+0x4c>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011fc:	4b06      	ldr	r3, [pc, #24]	; (8001218 <MX_USART2_UART_Init+0x4c>)
 80011fe:	2200      	movs	r2, #0
 8001200:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001202:	4805      	ldr	r0, [pc, #20]	; (8001218 <MX_USART2_UART_Init+0x4c>)
 8001204:	f001 fe8c 	bl	8002f20 <HAL_UART_Init>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800120e:	f7ff fb89 	bl	8000924 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001212:	bf00      	nop
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	20000258 	.word	0x20000258
 800121c:	40004400 	.word	0x40004400

08001220 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b08a      	sub	sp, #40	; 0x28
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001228:	f107 0314 	add.w	r3, r7, #20
 800122c:	2200      	movs	r2, #0
 800122e:	601a      	str	r2, [r3, #0]
 8001230:	605a      	str	r2, [r3, #4]
 8001232:	609a      	str	r2, [r3, #8]
 8001234:	60da      	str	r2, [r3, #12]
 8001236:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a19      	ldr	r2, [pc, #100]	; (80012a4 <HAL_UART_MspInit+0x84>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d12b      	bne.n	800129a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001242:	2300      	movs	r3, #0
 8001244:	613b      	str	r3, [r7, #16]
 8001246:	4b18      	ldr	r3, [pc, #96]	; (80012a8 <HAL_UART_MspInit+0x88>)
 8001248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124a:	4a17      	ldr	r2, [pc, #92]	; (80012a8 <HAL_UART_MspInit+0x88>)
 800124c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001250:	6413      	str	r3, [r2, #64]	; 0x40
 8001252:	4b15      	ldr	r3, [pc, #84]	; (80012a8 <HAL_UART_MspInit+0x88>)
 8001254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001256:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800125a:	613b      	str	r3, [r7, #16]
 800125c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800125e:	2300      	movs	r3, #0
 8001260:	60fb      	str	r3, [r7, #12]
 8001262:	4b11      	ldr	r3, [pc, #68]	; (80012a8 <HAL_UART_MspInit+0x88>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001266:	4a10      	ldr	r2, [pc, #64]	; (80012a8 <HAL_UART_MspInit+0x88>)
 8001268:	f043 0301 	orr.w	r3, r3, #1
 800126c:	6313      	str	r3, [r2, #48]	; 0x30
 800126e:	4b0e      	ldr	r3, [pc, #56]	; (80012a8 <HAL_UART_MspInit+0x88>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001272:	f003 0301 	and.w	r3, r3, #1
 8001276:	60fb      	str	r3, [r7, #12]
 8001278:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800127a:	230c      	movs	r3, #12
 800127c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800127e:	2302      	movs	r3, #2
 8001280:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001282:	2300      	movs	r3, #0
 8001284:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001286:	2303      	movs	r3, #3
 8001288:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800128a:	2307      	movs	r3, #7
 800128c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800128e:	f107 0314 	add.w	r3, r7, #20
 8001292:	4619      	mov	r1, r3
 8001294:	4805      	ldr	r0, [pc, #20]	; (80012ac <HAL_UART_MspInit+0x8c>)
 8001296:	f000 fd07 	bl	8001ca8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800129a:	bf00      	nop
 800129c:	3728      	adds	r7, #40	; 0x28
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	40004400 	.word	0x40004400
 80012a8:	40023800 	.word	0x40023800
 80012ac:	40020000 	.word	0x40020000

080012b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 80012b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012e8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012b4:	480d      	ldr	r0, [pc, #52]	; (80012ec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80012b6:	490e      	ldr	r1, [pc, #56]	; (80012f0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80012b8:	4a0e      	ldr	r2, [pc, #56]	; (80012f4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80012ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012bc:	e002      	b.n	80012c4 <LoopCopyDataInit>

080012be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012c2:	3304      	adds	r3, #4

080012c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012c8:	d3f9      	bcc.n	80012be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012ca:	4a0b      	ldr	r2, [pc, #44]	; (80012f8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80012cc:	4c0b      	ldr	r4, [pc, #44]	; (80012fc <LoopFillZerobss+0x26>)
  movs r3, #0
 80012ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012d0:	e001      	b.n	80012d6 <LoopFillZerobss>

080012d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012d4:	3204      	adds	r2, #4

080012d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012d8:	d3fb      	bcc.n	80012d2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80012da:	f7ff ff2d 	bl	8001138 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012de:	f005 fc83 	bl	8006be8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012e2:	f7ff fd1f 	bl	8000d24 <main>
  bx  lr    
 80012e6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80012e8:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80012ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012f0:	20000130 	.word	0x20000130
  ldr r2, =_sidata
 80012f4:	08007d4c 	.word	0x08007d4c
  ldr r2, =_sbss
 80012f8:	20000130 	.word	0x20000130
  ldr r4, =_ebss
 80012fc:	20004c00 	.word	0x20004c00

08001300 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001300:	e7fe      	b.n	8001300 <ADC_IRQHandler>
	...

08001304 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001308:	4b0e      	ldr	r3, [pc, #56]	; (8001344 <HAL_Init+0x40>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a0d      	ldr	r2, [pc, #52]	; (8001344 <HAL_Init+0x40>)
 800130e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001312:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001314:	4b0b      	ldr	r3, [pc, #44]	; (8001344 <HAL_Init+0x40>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a0a      	ldr	r2, [pc, #40]	; (8001344 <HAL_Init+0x40>)
 800131a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800131e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001320:	4b08      	ldr	r3, [pc, #32]	; (8001344 <HAL_Init+0x40>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a07      	ldr	r2, [pc, #28]	; (8001344 <HAL_Init+0x40>)
 8001326:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800132a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800132c:	2003      	movs	r0, #3
 800132e:	f000 fc86 	bl	8001c3e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001332:	200f      	movs	r0, #15
 8001334:	f7ff fdc8 	bl	8000ec8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001338:	f7ff fd9a 	bl	8000e70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800133c:	2300      	movs	r3, #0
}
 800133e:	4618      	mov	r0, r3
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	40023c00 	.word	0x40023c00

08001348 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800134c:	4b06      	ldr	r3, [pc, #24]	; (8001368 <HAL_IncTick+0x20>)
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	461a      	mov	r2, r3
 8001352:	4b06      	ldr	r3, [pc, #24]	; (800136c <HAL_IncTick+0x24>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4413      	add	r3, r2
 8001358:	4a04      	ldr	r2, [pc, #16]	; (800136c <HAL_IncTick+0x24>)
 800135a:	6013      	str	r3, [r2, #0]
}
 800135c:	bf00      	nop
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr
 8001366:	bf00      	nop
 8001368:	200000c4 	.word	0x200000c4
 800136c:	2000029c 	.word	0x2000029c

08001370 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  return uwTick;
 8001374:	4b03      	ldr	r3, [pc, #12]	; (8001384 <HAL_GetTick+0x14>)
 8001376:	681b      	ldr	r3, [r3, #0]
}
 8001378:	4618      	mov	r0, r3
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	2000029c 	.word	0x2000029c

08001388 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b084      	sub	sp, #16
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001390:	2300      	movs	r3, #0
 8001392:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d101      	bne.n	800139e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800139a:	2301      	movs	r3, #1
 800139c:	e033      	b.n	8001406 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d109      	bne.n	80013ba <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80013a6:	6878      	ldr	r0, [r7, #4]
 80013a8:	f7ff f956 	bl	8000658 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2200      	movs	r2, #0
 80013b0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2200      	movs	r2, #0
 80013b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013be:	f003 0310 	and.w	r3, r3, #16
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d118      	bne.n	80013f8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ca:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80013ce:	f023 0302 	bic.w	r3, r3, #2
 80013d2:	f043 0202 	orr.w	r2, r3, #2
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80013da:	6878      	ldr	r0, [r7, #4]
 80013dc:	f000 fa86 	bl	80018ec <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2200      	movs	r2, #0
 80013e4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ea:	f023 0303 	bic.w	r3, r3, #3
 80013ee:	f043 0201 	orr.w	r2, r3, #1
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	641a      	str	r2, [r3, #64]	; 0x40
 80013f6:	e001      	b.n	80013fc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80013f8:	2301      	movs	r3, #1
 80013fa:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2200      	movs	r2, #0
 8001400:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001404:	7bfb      	ldrb	r3, [r7, #15]
}
 8001406:	4618      	mov	r0, r3
 8001408:	3710      	adds	r7, #16
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
	...

08001410 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001410:	b480      	push	{r7}
 8001412:	b085      	sub	sp, #20
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001418:	2300      	movs	r3, #0
 800141a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001422:	2b01      	cmp	r3, #1
 8001424:	d101      	bne.n	800142a <HAL_ADC_Start+0x1a>
 8001426:	2302      	movs	r3, #2
 8001428:	e097      	b.n	800155a <HAL_ADC_Start+0x14a>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2201      	movs	r2, #1
 800142e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	689b      	ldr	r3, [r3, #8]
 8001438:	f003 0301 	and.w	r3, r3, #1
 800143c:	2b01      	cmp	r3, #1
 800143e:	d018      	beq.n	8001472 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	689a      	ldr	r2, [r3, #8]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f042 0201 	orr.w	r2, r2, #1
 800144e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001450:	4b45      	ldr	r3, [pc, #276]	; (8001568 <HAL_ADC_Start+0x158>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a45      	ldr	r2, [pc, #276]	; (800156c <HAL_ADC_Start+0x15c>)
 8001456:	fba2 2303 	umull	r2, r3, r2, r3
 800145a:	0c9a      	lsrs	r2, r3, #18
 800145c:	4613      	mov	r3, r2
 800145e:	005b      	lsls	r3, r3, #1
 8001460:	4413      	add	r3, r2
 8001462:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001464:	e002      	b.n	800146c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001466:	68bb      	ldr	r3, [r7, #8]
 8001468:	3b01      	subs	r3, #1
 800146a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800146c:	68bb      	ldr	r3, [r7, #8]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d1f9      	bne.n	8001466 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	689b      	ldr	r3, [r3, #8]
 8001478:	f003 0301 	and.w	r3, r3, #1
 800147c:	2b01      	cmp	r3, #1
 800147e:	d15f      	bne.n	8001540 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001484:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001488:	f023 0301 	bic.w	r3, r3, #1
 800148c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d007      	beq.n	80014b2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80014aa:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80014be:	d106      	bne.n	80014ce <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014c4:	f023 0206 	bic.w	r2, r3, #6
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	645a      	str	r2, [r3, #68]	; 0x44
 80014cc:	e002      	b.n	80014d4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2200      	movs	r2, #0
 80014d2:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2200      	movs	r2, #0
 80014d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80014dc:	4b24      	ldr	r3, [pc, #144]	; (8001570 <HAL_ADC_Start+0x160>)
 80014de:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80014e8:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	f003 031f 	and.w	r3, r3, #31
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d10f      	bne.n	8001516 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	689b      	ldr	r3, [r3, #8]
 80014fc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001500:	2b00      	cmp	r3, #0
 8001502:	d129      	bne.n	8001558 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	689a      	ldr	r2, [r3, #8]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001512:	609a      	str	r2, [r3, #8]
 8001514:	e020      	b.n	8001558 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4a16      	ldr	r2, [pc, #88]	; (8001574 <HAL_ADC_Start+0x164>)
 800151c:	4293      	cmp	r3, r2
 800151e:	d11b      	bne.n	8001558 <HAL_ADC_Start+0x148>
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	689b      	ldr	r3, [r3, #8]
 8001526:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800152a:	2b00      	cmp	r3, #0
 800152c:	d114      	bne.n	8001558 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	689a      	ldr	r2, [r3, #8]
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800153c:	609a      	str	r2, [r3, #8]
 800153e:	e00b      	b.n	8001558 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001544:	f043 0210 	orr.w	r2, r3, #16
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001550:	f043 0201 	orr.w	r2, r3, #1
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001558:	2300      	movs	r3, #0
}
 800155a:	4618      	mov	r0, r3
 800155c:	3714      	adds	r7, #20
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr
 8001566:	bf00      	nop
 8001568:	200000bc 	.word	0x200000bc
 800156c:	431bde83 	.word	0x431bde83
 8001570:	40012300 	.word	0x40012300
 8001574:	40012000 	.word	0x40012000

08001578 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b084      	sub	sp, #16
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
 8001580:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001582:	2300      	movs	r3, #0
 8001584:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	689b      	ldr	r3, [r3, #8]
 800158c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001590:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001594:	d113      	bne.n	80015be <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	689b      	ldr	r3, [r3, #8]
 800159c:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80015a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80015a4:	d10b      	bne.n	80015be <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015aa:	f043 0220 	orr.w	r2, r3, #32
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2200      	movs	r2, #0
 80015b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	e063      	b.n	8001686 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80015be:	f7ff fed7 	bl	8001370 <HAL_GetTick>
 80015c2:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80015c4:	e021      	b.n	800160a <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80015cc:	d01d      	beq.n	800160a <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d007      	beq.n	80015e4 <HAL_ADC_PollForConversion+0x6c>
 80015d4:	f7ff fecc 	bl	8001370 <HAL_GetTick>
 80015d8:	4602      	mov	r2, r0
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	1ad3      	subs	r3, r2, r3
 80015de:	683a      	ldr	r2, [r7, #0]
 80015e0:	429a      	cmp	r2, r3
 80015e2:	d212      	bcs.n	800160a <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f003 0302 	and.w	r3, r3, #2
 80015ee:	2b02      	cmp	r3, #2
 80015f0:	d00b      	beq.n	800160a <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f6:	f043 0204 	orr.w	r2, r3, #4
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2200      	movs	r2, #0
 8001602:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001606:	2303      	movs	r3, #3
 8001608:	e03d      	b.n	8001686 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f003 0302 	and.w	r3, r3, #2
 8001614:	2b02      	cmp	r3, #2
 8001616:	d1d6      	bne.n	80015c6 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f06f 0212 	mvn.w	r2, #18
 8001620:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001626:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	689b      	ldr	r3, [r3, #8]
 8001634:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001638:	2b00      	cmp	r3, #0
 800163a:	d123      	bne.n	8001684 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001640:	2b00      	cmp	r3, #0
 8001642:	d11f      	bne.n	8001684 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800164a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800164e:	2b00      	cmp	r3, #0
 8001650:	d006      	beq.n	8001660 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	689b      	ldr	r3, [r3, #8]
 8001658:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800165c:	2b00      	cmp	r3, #0
 800165e:	d111      	bne.n	8001684 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001664:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001670:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001674:	2b00      	cmp	r3, #0
 8001676:	d105      	bne.n	8001684 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167c:	f043 0201 	orr.w	r2, r3, #1
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001684:	2300      	movs	r3, #0
}
 8001686:	4618      	mov	r0, r3
 8001688:	3710      	adds	r7, #16
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}

0800168e <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800168e:	b480      	push	{r7}
 8001690:	b083      	sub	sp, #12
 8001692:	af00      	add	r7, sp, #0
 8001694:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800169c:	4618      	mov	r0, r3
 800169e:	370c      	adds	r7, #12
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr

080016a8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b085      	sub	sp, #20
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
 80016b0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80016b2:	2300      	movs	r3, #0
 80016b4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80016bc:	2b01      	cmp	r3, #1
 80016be:	d101      	bne.n	80016c4 <HAL_ADC_ConfigChannel+0x1c>
 80016c0:	2302      	movs	r3, #2
 80016c2:	e105      	b.n	80018d0 <HAL_ADC_ConfigChannel+0x228>
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2201      	movs	r2, #1
 80016c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	2b09      	cmp	r3, #9
 80016d2:	d925      	bls.n	8001720 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	68d9      	ldr	r1, [r3, #12]
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	b29b      	uxth	r3, r3
 80016e0:	461a      	mov	r2, r3
 80016e2:	4613      	mov	r3, r2
 80016e4:	005b      	lsls	r3, r3, #1
 80016e6:	4413      	add	r3, r2
 80016e8:	3b1e      	subs	r3, #30
 80016ea:	2207      	movs	r2, #7
 80016ec:	fa02 f303 	lsl.w	r3, r2, r3
 80016f0:	43da      	mvns	r2, r3
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	400a      	ands	r2, r1
 80016f8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	68d9      	ldr	r1, [r3, #12]
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	689a      	ldr	r2, [r3, #8]
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	b29b      	uxth	r3, r3
 800170a:	4618      	mov	r0, r3
 800170c:	4603      	mov	r3, r0
 800170e:	005b      	lsls	r3, r3, #1
 8001710:	4403      	add	r3, r0
 8001712:	3b1e      	subs	r3, #30
 8001714:	409a      	lsls	r2, r3
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	430a      	orrs	r2, r1
 800171c:	60da      	str	r2, [r3, #12]
 800171e:	e022      	b.n	8001766 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	6919      	ldr	r1, [r3, #16]
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	b29b      	uxth	r3, r3
 800172c:	461a      	mov	r2, r3
 800172e:	4613      	mov	r3, r2
 8001730:	005b      	lsls	r3, r3, #1
 8001732:	4413      	add	r3, r2
 8001734:	2207      	movs	r2, #7
 8001736:	fa02 f303 	lsl.w	r3, r2, r3
 800173a:	43da      	mvns	r2, r3
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	400a      	ands	r2, r1
 8001742:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	6919      	ldr	r1, [r3, #16]
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	689a      	ldr	r2, [r3, #8]
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	b29b      	uxth	r3, r3
 8001754:	4618      	mov	r0, r3
 8001756:	4603      	mov	r3, r0
 8001758:	005b      	lsls	r3, r3, #1
 800175a:	4403      	add	r3, r0
 800175c:	409a      	lsls	r2, r3
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	430a      	orrs	r2, r1
 8001764:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	2b06      	cmp	r3, #6
 800176c:	d824      	bhi.n	80017b8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	685a      	ldr	r2, [r3, #4]
 8001778:	4613      	mov	r3, r2
 800177a:	009b      	lsls	r3, r3, #2
 800177c:	4413      	add	r3, r2
 800177e:	3b05      	subs	r3, #5
 8001780:	221f      	movs	r2, #31
 8001782:	fa02 f303 	lsl.w	r3, r2, r3
 8001786:	43da      	mvns	r2, r3
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	400a      	ands	r2, r1
 800178e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	b29b      	uxth	r3, r3
 800179c:	4618      	mov	r0, r3
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	685a      	ldr	r2, [r3, #4]
 80017a2:	4613      	mov	r3, r2
 80017a4:	009b      	lsls	r3, r3, #2
 80017a6:	4413      	add	r3, r2
 80017a8:	3b05      	subs	r3, #5
 80017aa:	fa00 f203 	lsl.w	r2, r0, r3
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	430a      	orrs	r2, r1
 80017b4:	635a      	str	r2, [r3, #52]	; 0x34
 80017b6:	e04c      	b.n	8001852 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	2b0c      	cmp	r3, #12
 80017be:	d824      	bhi.n	800180a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	685a      	ldr	r2, [r3, #4]
 80017ca:	4613      	mov	r3, r2
 80017cc:	009b      	lsls	r3, r3, #2
 80017ce:	4413      	add	r3, r2
 80017d0:	3b23      	subs	r3, #35	; 0x23
 80017d2:	221f      	movs	r2, #31
 80017d4:	fa02 f303 	lsl.w	r3, r2, r3
 80017d8:	43da      	mvns	r2, r3
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	400a      	ands	r2, r1
 80017e0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	b29b      	uxth	r3, r3
 80017ee:	4618      	mov	r0, r3
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	685a      	ldr	r2, [r3, #4]
 80017f4:	4613      	mov	r3, r2
 80017f6:	009b      	lsls	r3, r3, #2
 80017f8:	4413      	add	r3, r2
 80017fa:	3b23      	subs	r3, #35	; 0x23
 80017fc:	fa00 f203 	lsl.w	r2, r0, r3
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	430a      	orrs	r2, r1
 8001806:	631a      	str	r2, [r3, #48]	; 0x30
 8001808:	e023      	b.n	8001852 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	685a      	ldr	r2, [r3, #4]
 8001814:	4613      	mov	r3, r2
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	4413      	add	r3, r2
 800181a:	3b41      	subs	r3, #65	; 0x41
 800181c:	221f      	movs	r2, #31
 800181e:	fa02 f303 	lsl.w	r3, r2, r3
 8001822:	43da      	mvns	r2, r3
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	400a      	ands	r2, r1
 800182a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	b29b      	uxth	r3, r3
 8001838:	4618      	mov	r0, r3
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	685a      	ldr	r2, [r3, #4]
 800183e:	4613      	mov	r3, r2
 8001840:	009b      	lsls	r3, r3, #2
 8001842:	4413      	add	r3, r2
 8001844:	3b41      	subs	r3, #65	; 0x41
 8001846:	fa00 f203 	lsl.w	r2, r0, r3
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	430a      	orrs	r2, r1
 8001850:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001852:	4b22      	ldr	r3, [pc, #136]	; (80018dc <HAL_ADC_ConfigChannel+0x234>)
 8001854:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4a21      	ldr	r2, [pc, #132]	; (80018e0 <HAL_ADC_ConfigChannel+0x238>)
 800185c:	4293      	cmp	r3, r2
 800185e:	d109      	bne.n	8001874 <HAL_ADC_ConfigChannel+0x1cc>
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	2b12      	cmp	r3, #18
 8001866:	d105      	bne.n	8001874 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a19      	ldr	r2, [pc, #100]	; (80018e0 <HAL_ADC_ConfigChannel+0x238>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d123      	bne.n	80018c6 <HAL_ADC_ConfigChannel+0x21e>
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	2b10      	cmp	r3, #16
 8001884:	d003      	beq.n	800188e <HAL_ADC_ConfigChannel+0x1e6>
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	2b11      	cmp	r3, #17
 800188c:	d11b      	bne.n	80018c6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	2b10      	cmp	r3, #16
 80018a0:	d111      	bne.n	80018c6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80018a2:	4b10      	ldr	r3, [pc, #64]	; (80018e4 <HAL_ADC_ConfigChannel+0x23c>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4a10      	ldr	r2, [pc, #64]	; (80018e8 <HAL_ADC_ConfigChannel+0x240>)
 80018a8:	fba2 2303 	umull	r2, r3, r2, r3
 80018ac:	0c9a      	lsrs	r2, r3, #18
 80018ae:	4613      	mov	r3, r2
 80018b0:	009b      	lsls	r3, r3, #2
 80018b2:	4413      	add	r3, r2
 80018b4:	005b      	lsls	r3, r3, #1
 80018b6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80018b8:	e002      	b.n	80018c0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80018ba:	68bb      	ldr	r3, [r7, #8]
 80018bc:	3b01      	subs	r3, #1
 80018be:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d1f9      	bne.n	80018ba <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2200      	movs	r2, #0
 80018ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80018ce:	2300      	movs	r3, #0
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	3714      	adds	r7, #20
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr
 80018dc:	40012300 	.word	0x40012300
 80018e0:	40012000 	.word	0x40012000
 80018e4:	200000bc 	.word	0x200000bc
 80018e8:	431bde83 	.word	0x431bde83

080018ec <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b085      	sub	sp, #20
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80018f4:	4b79      	ldr	r3, [pc, #484]	; (8001adc <ADC_Init+0x1f0>)
 80018f6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	685a      	ldr	r2, [r3, #4]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	431a      	orrs	r2, r3
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	685a      	ldr	r2, [r3, #4]
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001920:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	6859      	ldr	r1, [r3, #4]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	691b      	ldr	r3, [r3, #16]
 800192c:	021a      	lsls	r2, r3, #8
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	430a      	orrs	r2, r1
 8001934:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	685a      	ldr	r2, [r3, #4]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001944:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	6859      	ldr	r1, [r3, #4]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	689a      	ldr	r2, [r3, #8]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	430a      	orrs	r2, r1
 8001956:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	689a      	ldr	r2, [r3, #8]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001966:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	6899      	ldr	r1, [r3, #8]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	68da      	ldr	r2, [r3, #12]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	430a      	orrs	r2, r1
 8001978:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800197e:	4a58      	ldr	r2, [pc, #352]	; (8001ae0 <ADC_Init+0x1f4>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d022      	beq.n	80019ca <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	689a      	ldr	r2, [r3, #8]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001992:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	6899      	ldr	r1, [r3, #8]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	430a      	orrs	r2, r1
 80019a4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	689a      	ldr	r2, [r3, #8]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80019b4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	6899      	ldr	r1, [r3, #8]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	430a      	orrs	r2, r1
 80019c6:	609a      	str	r2, [r3, #8]
 80019c8:	e00f      	b.n	80019ea <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	689a      	ldr	r2, [r3, #8]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80019d8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	689a      	ldr	r2, [r3, #8]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80019e8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	689a      	ldr	r2, [r3, #8]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f022 0202 	bic.w	r2, r2, #2
 80019f8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	6899      	ldr	r1, [r3, #8]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	7e1b      	ldrb	r3, [r3, #24]
 8001a04:	005a      	lsls	r2, r3, #1
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	430a      	orrs	r2, r1
 8001a0c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d01b      	beq.n	8001a50 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	685a      	ldr	r2, [r3, #4]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001a26:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	685a      	ldr	r2, [r3, #4]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001a36:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	6859      	ldr	r1, [r3, #4]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a42:	3b01      	subs	r3, #1
 8001a44:	035a      	lsls	r2, r3, #13
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	430a      	orrs	r2, r1
 8001a4c:	605a      	str	r2, [r3, #4]
 8001a4e:	e007      	b.n	8001a60 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	685a      	ldr	r2, [r3, #4]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a5e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001a6e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	69db      	ldr	r3, [r3, #28]
 8001a7a:	3b01      	subs	r3, #1
 8001a7c:	051a      	lsls	r2, r3, #20
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	430a      	orrs	r2, r1
 8001a84:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	689a      	ldr	r2, [r3, #8]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001a94:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	6899      	ldr	r1, [r3, #8]
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001aa2:	025a      	lsls	r2, r3, #9
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	430a      	orrs	r2, r1
 8001aaa:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	689a      	ldr	r2, [r3, #8]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001aba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	6899      	ldr	r1, [r3, #8]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	695b      	ldr	r3, [r3, #20]
 8001ac6:	029a      	lsls	r2, r3, #10
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	430a      	orrs	r2, r1
 8001ace:	609a      	str	r2, [r3, #8]
}
 8001ad0:	bf00      	nop
 8001ad2:	3714      	adds	r7, #20
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr
 8001adc:	40012300 	.word	0x40012300
 8001ae0:	0f000001 	.word	0x0f000001

08001ae4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b085      	sub	sp, #20
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	f003 0307 	and.w	r3, r3, #7
 8001af2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001af4:	4b0c      	ldr	r3, [pc, #48]	; (8001b28 <__NVIC_SetPriorityGrouping+0x44>)
 8001af6:	68db      	ldr	r3, [r3, #12]
 8001af8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001afa:	68ba      	ldr	r2, [r7, #8]
 8001afc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b00:	4013      	ands	r3, r2
 8001b02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b16:	4a04      	ldr	r2, [pc, #16]	; (8001b28 <__NVIC_SetPriorityGrouping+0x44>)
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	60d3      	str	r3, [r2, #12]
}
 8001b1c:	bf00      	nop
 8001b1e:	3714      	adds	r7, #20
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr
 8001b28:	e000ed00 	.word	0xe000ed00

08001b2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b30:	4b04      	ldr	r3, [pc, #16]	; (8001b44 <__NVIC_GetPriorityGrouping+0x18>)
 8001b32:	68db      	ldr	r3, [r3, #12]
 8001b34:	0a1b      	lsrs	r3, r3, #8
 8001b36:	f003 0307 	and.w	r3, r3, #7
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr
 8001b44:	e000ed00 	.word	0xe000ed00

08001b48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b083      	sub	sp, #12
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	4603      	mov	r3, r0
 8001b50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	db0b      	blt.n	8001b72 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b5a:	79fb      	ldrb	r3, [r7, #7]
 8001b5c:	f003 021f 	and.w	r2, r3, #31
 8001b60:	4907      	ldr	r1, [pc, #28]	; (8001b80 <__NVIC_EnableIRQ+0x38>)
 8001b62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b66:	095b      	lsrs	r3, r3, #5
 8001b68:	2001      	movs	r0, #1
 8001b6a:	fa00 f202 	lsl.w	r2, r0, r2
 8001b6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b72:	bf00      	nop
 8001b74:	370c      	adds	r7, #12
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr
 8001b7e:	bf00      	nop
 8001b80:	e000e100 	.word	0xe000e100

08001b84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b083      	sub	sp, #12
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	6039      	str	r1, [r7, #0]
 8001b8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	db0a      	blt.n	8001bae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	b2da      	uxtb	r2, r3
 8001b9c:	490c      	ldr	r1, [pc, #48]	; (8001bd0 <__NVIC_SetPriority+0x4c>)
 8001b9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba2:	0112      	lsls	r2, r2, #4
 8001ba4:	b2d2      	uxtb	r2, r2
 8001ba6:	440b      	add	r3, r1
 8001ba8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bac:	e00a      	b.n	8001bc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	b2da      	uxtb	r2, r3
 8001bb2:	4908      	ldr	r1, [pc, #32]	; (8001bd4 <__NVIC_SetPriority+0x50>)
 8001bb4:	79fb      	ldrb	r3, [r7, #7]
 8001bb6:	f003 030f 	and.w	r3, r3, #15
 8001bba:	3b04      	subs	r3, #4
 8001bbc:	0112      	lsls	r2, r2, #4
 8001bbe:	b2d2      	uxtb	r2, r2
 8001bc0:	440b      	add	r3, r1
 8001bc2:	761a      	strb	r2, [r3, #24]
}
 8001bc4:	bf00      	nop
 8001bc6:	370c      	adds	r7, #12
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr
 8001bd0:	e000e100 	.word	0xe000e100
 8001bd4:	e000ed00 	.word	0xe000ed00

08001bd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b089      	sub	sp, #36	; 0x24
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	60f8      	str	r0, [r7, #12]
 8001be0:	60b9      	str	r1, [r7, #8]
 8001be2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	f003 0307 	and.w	r3, r3, #7
 8001bea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bec:	69fb      	ldr	r3, [r7, #28]
 8001bee:	f1c3 0307 	rsb	r3, r3, #7
 8001bf2:	2b04      	cmp	r3, #4
 8001bf4:	bf28      	it	cs
 8001bf6:	2304      	movcs	r3, #4
 8001bf8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bfa:	69fb      	ldr	r3, [r7, #28]
 8001bfc:	3304      	adds	r3, #4
 8001bfe:	2b06      	cmp	r3, #6
 8001c00:	d902      	bls.n	8001c08 <NVIC_EncodePriority+0x30>
 8001c02:	69fb      	ldr	r3, [r7, #28]
 8001c04:	3b03      	subs	r3, #3
 8001c06:	e000      	b.n	8001c0a <NVIC_EncodePriority+0x32>
 8001c08:	2300      	movs	r3, #0
 8001c0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c0c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001c10:	69bb      	ldr	r3, [r7, #24]
 8001c12:	fa02 f303 	lsl.w	r3, r2, r3
 8001c16:	43da      	mvns	r2, r3
 8001c18:	68bb      	ldr	r3, [r7, #8]
 8001c1a:	401a      	ands	r2, r3
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c20:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	fa01 f303 	lsl.w	r3, r1, r3
 8001c2a:	43d9      	mvns	r1, r3
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c30:	4313      	orrs	r3, r2
         );
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	3724      	adds	r7, #36	; 0x24
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr

08001c3e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c3e:	b580      	push	{r7, lr}
 8001c40:	b082      	sub	sp, #8
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c46:	6878      	ldr	r0, [r7, #4]
 8001c48:	f7ff ff4c 	bl	8001ae4 <__NVIC_SetPriorityGrouping>
}
 8001c4c:	bf00      	nop
 8001c4e:	3708      	adds	r7, #8
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}

08001c54 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b086      	sub	sp, #24
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	60b9      	str	r1, [r7, #8]
 8001c5e:	607a      	str	r2, [r7, #4]
 8001c60:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c62:	2300      	movs	r3, #0
 8001c64:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c66:	f7ff ff61 	bl	8001b2c <__NVIC_GetPriorityGrouping>
 8001c6a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c6c:	687a      	ldr	r2, [r7, #4]
 8001c6e:	68b9      	ldr	r1, [r7, #8]
 8001c70:	6978      	ldr	r0, [r7, #20]
 8001c72:	f7ff ffb1 	bl	8001bd8 <NVIC_EncodePriority>
 8001c76:	4602      	mov	r2, r0
 8001c78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c7c:	4611      	mov	r1, r2
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f7ff ff80 	bl	8001b84 <__NVIC_SetPriority>
}
 8001c84:	bf00      	nop
 8001c86:	3718      	adds	r7, #24
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}

08001c8c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b082      	sub	sp, #8
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	4603      	mov	r3, r0
 8001c94:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f7ff ff54 	bl	8001b48 <__NVIC_EnableIRQ>
}
 8001ca0:	bf00      	nop
 8001ca2:	3708      	adds	r7, #8
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}

08001ca8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b089      	sub	sp, #36	; 0x24
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
 8001cb0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	61fb      	str	r3, [r7, #28]
 8001cc2:	e14d      	b.n	8001f60 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	69fb      	ldr	r3, [r7, #28]
 8001cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ccc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	697a      	ldr	r2, [r7, #20]
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001cd8:	693a      	ldr	r2, [r7, #16]
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	f040 813c 	bne.w	8001f5a <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	f003 0303 	and.w	r3, r3, #3
 8001cea:	2b01      	cmp	r3, #1
 8001cec:	d005      	beq.n	8001cfa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cf6:	2b02      	cmp	r3, #2
 8001cf8:	d130      	bne.n	8001d5c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d00:	69fb      	ldr	r3, [r7, #28]
 8001d02:	005b      	lsls	r3, r3, #1
 8001d04:	2203      	movs	r2, #3
 8001d06:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0a:	43db      	mvns	r3, r3
 8001d0c:	69ba      	ldr	r2, [r7, #24]
 8001d0e:	4013      	ands	r3, r2
 8001d10:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	68da      	ldr	r2, [r3, #12]
 8001d16:	69fb      	ldr	r3, [r7, #28]
 8001d18:	005b      	lsls	r3, r3, #1
 8001d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1e:	69ba      	ldr	r2, [r7, #24]
 8001d20:	4313      	orrs	r3, r2
 8001d22:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	69ba      	ldr	r2, [r7, #24]
 8001d28:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d30:	2201      	movs	r2, #1
 8001d32:	69fb      	ldr	r3, [r7, #28]
 8001d34:	fa02 f303 	lsl.w	r3, r2, r3
 8001d38:	43db      	mvns	r3, r3
 8001d3a:	69ba      	ldr	r2, [r7, #24]
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	091b      	lsrs	r3, r3, #4
 8001d46:	f003 0201 	and.w	r2, r3, #1
 8001d4a:	69fb      	ldr	r3, [r7, #28]
 8001d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d50:	69ba      	ldr	r2, [r7, #24]
 8001d52:	4313      	orrs	r3, r2
 8001d54:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	69ba      	ldr	r2, [r7, #24]
 8001d5a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	f003 0303 	and.w	r3, r3, #3
 8001d64:	2b03      	cmp	r3, #3
 8001d66:	d017      	beq.n	8001d98 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	68db      	ldr	r3, [r3, #12]
 8001d6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	005b      	lsls	r3, r3, #1
 8001d72:	2203      	movs	r2, #3
 8001d74:	fa02 f303 	lsl.w	r3, r2, r3
 8001d78:	43db      	mvns	r3, r3
 8001d7a:	69ba      	ldr	r2, [r7, #24]
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	689a      	ldr	r2, [r3, #8]
 8001d84:	69fb      	ldr	r3, [r7, #28]
 8001d86:	005b      	lsls	r3, r3, #1
 8001d88:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8c:	69ba      	ldr	r2, [r7, #24]
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	69ba      	ldr	r2, [r7, #24]
 8001d96:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	f003 0303 	and.w	r3, r3, #3
 8001da0:	2b02      	cmp	r3, #2
 8001da2:	d123      	bne.n	8001dec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001da4:	69fb      	ldr	r3, [r7, #28]
 8001da6:	08da      	lsrs	r2, r3, #3
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	3208      	adds	r2, #8
 8001dac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001db0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	f003 0307 	and.w	r3, r3, #7
 8001db8:	009b      	lsls	r3, r3, #2
 8001dba:	220f      	movs	r2, #15
 8001dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc0:	43db      	mvns	r3, r3
 8001dc2:	69ba      	ldr	r2, [r7, #24]
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	691a      	ldr	r2, [r3, #16]
 8001dcc:	69fb      	ldr	r3, [r7, #28]
 8001dce:	f003 0307 	and.w	r3, r3, #7
 8001dd2:	009b      	lsls	r3, r3, #2
 8001dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd8:	69ba      	ldr	r2, [r7, #24]
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001dde:	69fb      	ldr	r3, [r7, #28]
 8001de0:	08da      	lsrs	r2, r3, #3
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	3208      	adds	r2, #8
 8001de6:	69b9      	ldr	r1, [r7, #24]
 8001de8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001df2:	69fb      	ldr	r3, [r7, #28]
 8001df4:	005b      	lsls	r3, r3, #1
 8001df6:	2203      	movs	r2, #3
 8001df8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfc:	43db      	mvns	r3, r3
 8001dfe:	69ba      	ldr	r2, [r7, #24]
 8001e00:	4013      	ands	r3, r2
 8001e02:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	f003 0203 	and.w	r2, r3, #3
 8001e0c:	69fb      	ldr	r3, [r7, #28]
 8001e0e:	005b      	lsls	r3, r3, #1
 8001e10:	fa02 f303 	lsl.w	r3, r2, r3
 8001e14:	69ba      	ldr	r2, [r7, #24]
 8001e16:	4313      	orrs	r3, r2
 8001e18:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	69ba      	ldr	r2, [r7, #24]
 8001e1e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	f000 8096 	beq.w	8001f5a <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e2e:	2300      	movs	r3, #0
 8001e30:	60fb      	str	r3, [r7, #12]
 8001e32:	4b51      	ldr	r3, [pc, #324]	; (8001f78 <HAL_GPIO_Init+0x2d0>)
 8001e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e36:	4a50      	ldr	r2, [pc, #320]	; (8001f78 <HAL_GPIO_Init+0x2d0>)
 8001e38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e3c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e3e:	4b4e      	ldr	r3, [pc, #312]	; (8001f78 <HAL_GPIO_Init+0x2d0>)
 8001e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e46:	60fb      	str	r3, [r7, #12]
 8001e48:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e4a:	4a4c      	ldr	r2, [pc, #304]	; (8001f7c <HAL_GPIO_Init+0x2d4>)
 8001e4c:	69fb      	ldr	r3, [r7, #28]
 8001e4e:	089b      	lsrs	r3, r3, #2
 8001e50:	3302      	adds	r3, #2
 8001e52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e56:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e58:	69fb      	ldr	r3, [r7, #28]
 8001e5a:	f003 0303 	and.w	r3, r3, #3
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	220f      	movs	r2, #15
 8001e62:	fa02 f303 	lsl.w	r3, r2, r3
 8001e66:	43db      	mvns	r3, r3
 8001e68:	69ba      	ldr	r2, [r7, #24]
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	4a43      	ldr	r2, [pc, #268]	; (8001f80 <HAL_GPIO_Init+0x2d8>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d00d      	beq.n	8001e92 <HAL_GPIO_Init+0x1ea>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	4a42      	ldr	r2, [pc, #264]	; (8001f84 <HAL_GPIO_Init+0x2dc>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d007      	beq.n	8001e8e <HAL_GPIO_Init+0x1e6>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	4a41      	ldr	r2, [pc, #260]	; (8001f88 <HAL_GPIO_Init+0x2e0>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d101      	bne.n	8001e8a <HAL_GPIO_Init+0x1e2>
 8001e86:	2302      	movs	r3, #2
 8001e88:	e004      	b.n	8001e94 <HAL_GPIO_Init+0x1ec>
 8001e8a:	2307      	movs	r3, #7
 8001e8c:	e002      	b.n	8001e94 <HAL_GPIO_Init+0x1ec>
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e000      	b.n	8001e94 <HAL_GPIO_Init+0x1ec>
 8001e92:	2300      	movs	r3, #0
 8001e94:	69fa      	ldr	r2, [r7, #28]
 8001e96:	f002 0203 	and.w	r2, r2, #3
 8001e9a:	0092      	lsls	r2, r2, #2
 8001e9c:	4093      	lsls	r3, r2
 8001e9e:	69ba      	ldr	r2, [r7, #24]
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ea4:	4935      	ldr	r1, [pc, #212]	; (8001f7c <HAL_GPIO_Init+0x2d4>)
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	089b      	lsrs	r3, r3, #2
 8001eaa:	3302      	adds	r3, #2
 8001eac:	69ba      	ldr	r2, [r7, #24]
 8001eae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001eb2:	4b36      	ldr	r3, [pc, #216]	; (8001f8c <HAL_GPIO_Init+0x2e4>)
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	43db      	mvns	r3, r3
 8001ebc:	69ba      	ldr	r2, [r7, #24]
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d003      	beq.n	8001ed6 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8001ece:	69ba      	ldr	r2, [r7, #24]
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ed6:	4a2d      	ldr	r2, [pc, #180]	; (8001f8c <HAL_GPIO_Init+0x2e4>)
 8001ed8:	69bb      	ldr	r3, [r7, #24]
 8001eda:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001edc:	4b2b      	ldr	r3, [pc, #172]	; (8001f8c <HAL_GPIO_Init+0x2e4>)
 8001ede:	68db      	ldr	r3, [r3, #12]
 8001ee0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	43db      	mvns	r3, r3
 8001ee6:	69ba      	ldr	r2, [r7, #24]
 8001ee8:	4013      	ands	r3, r2
 8001eea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d003      	beq.n	8001f00 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8001ef8:	69ba      	ldr	r2, [r7, #24]
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	4313      	orrs	r3, r2
 8001efe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f00:	4a22      	ldr	r2, [pc, #136]	; (8001f8c <HAL_GPIO_Init+0x2e4>)
 8001f02:	69bb      	ldr	r3, [r7, #24]
 8001f04:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f06:	4b21      	ldr	r3, [pc, #132]	; (8001f8c <HAL_GPIO_Init+0x2e4>)
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	43db      	mvns	r3, r3
 8001f10:	69ba      	ldr	r2, [r7, #24]
 8001f12:	4013      	ands	r3, r2
 8001f14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d003      	beq.n	8001f2a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001f22:	69ba      	ldr	r2, [r7, #24]
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	4313      	orrs	r3, r2
 8001f28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f2a:	4a18      	ldr	r2, [pc, #96]	; (8001f8c <HAL_GPIO_Init+0x2e4>)
 8001f2c:	69bb      	ldr	r3, [r7, #24]
 8001f2e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f30:	4b16      	ldr	r3, [pc, #88]	; (8001f8c <HAL_GPIO_Init+0x2e4>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	43db      	mvns	r3, r3
 8001f3a:	69ba      	ldr	r2, [r7, #24]
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d003      	beq.n	8001f54 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001f4c:	69ba      	ldr	r2, [r7, #24]
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	4313      	orrs	r3, r2
 8001f52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f54:	4a0d      	ldr	r2, [pc, #52]	; (8001f8c <HAL_GPIO_Init+0x2e4>)
 8001f56:	69bb      	ldr	r3, [r7, #24]
 8001f58:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f5a:	69fb      	ldr	r3, [r7, #28]
 8001f5c:	3301      	adds	r3, #1
 8001f5e:	61fb      	str	r3, [r7, #28]
 8001f60:	69fb      	ldr	r3, [r7, #28]
 8001f62:	2b0f      	cmp	r3, #15
 8001f64:	f67f aeae 	bls.w	8001cc4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f68:	bf00      	nop
 8001f6a:	bf00      	nop
 8001f6c:	3724      	adds	r7, #36	; 0x24
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr
 8001f76:	bf00      	nop
 8001f78:	40023800 	.word	0x40023800
 8001f7c:	40013800 	.word	0x40013800
 8001f80:	40020000 	.word	0x40020000
 8001f84:	40020400 	.word	0x40020400
 8001f88:	40020800 	.word	0x40020800
 8001f8c:	40013c00 	.word	0x40013c00

08001f90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
 8001f98:	460b      	mov	r3, r1
 8001f9a:	807b      	strh	r3, [r7, #2]
 8001f9c:	4613      	mov	r3, r2
 8001f9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001fa0:	787b      	ldrb	r3, [r7, #1]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d003      	beq.n	8001fae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fa6:	887a      	ldrh	r2, [r7, #2]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001fac:	e003      	b.n	8001fb6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001fae:	887b      	ldrh	r3, [r7, #2]
 8001fb0:	041a      	lsls	r2, r3, #16
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	619a      	str	r2, [r3, #24]
}
 8001fb6:	bf00      	nop
 8001fb8:	370c      	adds	r7, #12
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr
	...

08001fc4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b082      	sub	sp, #8
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	4603      	mov	r3, r0
 8001fcc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001fce:	4b08      	ldr	r3, [pc, #32]	; (8001ff0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001fd0:	695a      	ldr	r2, [r3, #20]
 8001fd2:	88fb      	ldrh	r3, [r7, #6]
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d006      	beq.n	8001fe8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001fda:	4a05      	ldr	r2, [pc, #20]	; (8001ff0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001fdc:	88fb      	ldrh	r3, [r7, #6]
 8001fde:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001fe0:	88fb      	ldrh	r3, [r7, #6]
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f7fe fdc8 	bl	8000b78 <HAL_GPIO_EXTI_Callback>
  }
}
 8001fe8:	bf00      	nop
 8001fea:	3708      	adds	r7, #8
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	40013c00 	.word	0x40013c00

08001ff4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b084      	sub	sp, #16
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
 8001ffc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d101      	bne.n	8002008 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	e0cc      	b.n	80021a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002008:	4b68      	ldr	r3, [pc, #416]	; (80021ac <HAL_RCC_ClockConfig+0x1b8>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f003 0307 	and.w	r3, r3, #7
 8002010:	683a      	ldr	r2, [r7, #0]
 8002012:	429a      	cmp	r2, r3
 8002014:	d90c      	bls.n	8002030 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002016:	4b65      	ldr	r3, [pc, #404]	; (80021ac <HAL_RCC_ClockConfig+0x1b8>)
 8002018:	683a      	ldr	r2, [r7, #0]
 800201a:	b2d2      	uxtb	r2, r2
 800201c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800201e:	4b63      	ldr	r3, [pc, #396]	; (80021ac <HAL_RCC_ClockConfig+0x1b8>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f003 0307 	and.w	r3, r3, #7
 8002026:	683a      	ldr	r2, [r7, #0]
 8002028:	429a      	cmp	r2, r3
 800202a:	d001      	beq.n	8002030 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800202c:	2301      	movs	r3, #1
 800202e:	e0b8      	b.n	80021a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f003 0302 	and.w	r3, r3, #2
 8002038:	2b00      	cmp	r3, #0
 800203a:	d020      	beq.n	800207e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f003 0304 	and.w	r3, r3, #4
 8002044:	2b00      	cmp	r3, #0
 8002046:	d005      	beq.n	8002054 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002048:	4b59      	ldr	r3, [pc, #356]	; (80021b0 <HAL_RCC_ClockConfig+0x1bc>)
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	4a58      	ldr	r2, [pc, #352]	; (80021b0 <HAL_RCC_ClockConfig+0x1bc>)
 800204e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002052:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f003 0308 	and.w	r3, r3, #8
 800205c:	2b00      	cmp	r3, #0
 800205e:	d005      	beq.n	800206c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002060:	4b53      	ldr	r3, [pc, #332]	; (80021b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	4a52      	ldr	r2, [pc, #328]	; (80021b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002066:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800206a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800206c:	4b50      	ldr	r3, [pc, #320]	; (80021b0 <HAL_RCC_ClockConfig+0x1bc>)
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	494d      	ldr	r1, [pc, #308]	; (80021b0 <HAL_RCC_ClockConfig+0x1bc>)
 800207a:	4313      	orrs	r3, r2
 800207c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 0301 	and.w	r3, r3, #1
 8002086:	2b00      	cmp	r3, #0
 8002088:	d044      	beq.n	8002114 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	2b01      	cmp	r3, #1
 8002090:	d107      	bne.n	80020a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002092:	4b47      	ldr	r3, [pc, #284]	; (80021b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800209a:	2b00      	cmp	r3, #0
 800209c:	d119      	bne.n	80020d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e07f      	b.n	80021a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	2b02      	cmp	r3, #2
 80020a8:	d003      	beq.n	80020b2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020ae:	2b03      	cmp	r3, #3
 80020b0:	d107      	bne.n	80020c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020b2:	4b3f      	ldr	r3, [pc, #252]	; (80021b0 <HAL_RCC_ClockConfig+0x1bc>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d109      	bne.n	80020d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e06f      	b.n	80021a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020c2:	4b3b      	ldr	r3, [pc, #236]	; (80021b0 <HAL_RCC_ClockConfig+0x1bc>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f003 0302 	and.w	r3, r3, #2
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d101      	bne.n	80020d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020ce:	2301      	movs	r3, #1
 80020d0:	e067      	b.n	80021a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020d2:	4b37      	ldr	r3, [pc, #220]	; (80021b0 <HAL_RCC_ClockConfig+0x1bc>)
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	f023 0203 	bic.w	r2, r3, #3
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	4934      	ldr	r1, [pc, #208]	; (80021b0 <HAL_RCC_ClockConfig+0x1bc>)
 80020e0:	4313      	orrs	r3, r2
 80020e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020e4:	f7ff f944 	bl	8001370 <HAL_GetTick>
 80020e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020ea:	e00a      	b.n	8002102 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020ec:	f7ff f940 	bl	8001370 <HAL_GetTick>
 80020f0:	4602      	mov	r2, r0
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	1ad3      	subs	r3, r2, r3
 80020f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d901      	bls.n	8002102 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80020fe:	2303      	movs	r3, #3
 8002100:	e04f      	b.n	80021a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002102:	4b2b      	ldr	r3, [pc, #172]	; (80021b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	f003 020c 	and.w	r2, r3, #12
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	429a      	cmp	r2, r3
 8002112:	d1eb      	bne.n	80020ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002114:	4b25      	ldr	r3, [pc, #148]	; (80021ac <HAL_RCC_ClockConfig+0x1b8>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f003 0307 	and.w	r3, r3, #7
 800211c:	683a      	ldr	r2, [r7, #0]
 800211e:	429a      	cmp	r2, r3
 8002120:	d20c      	bcs.n	800213c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002122:	4b22      	ldr	r3, [pc, #136]	; (80021ac <HAL_RCC_ClockConfig+0x1b8>)
 8002124:	683a      	ldr	r2, [r7, #0]
 8002126:	b2d2      	uxtb	r2, r2
 8002128:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800212a:	4b20      	ldr	r3, [pc, #128]	; (80021ac <HAL_RCC_ClockConfig+0x1b8>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 0307 	and.w	r3, r3, #7
 8002132:	683a      	ldr	r2, [r7, #0]
 8002134:	429a      	cmp	r2, r3
 8002136:	d001      	beq.n	800213c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002138:	2301      	movs	r3, #1
 800213a:	e032      	b.n	80021a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 0304 	and.w	r3, r3, #4
 8002144:	2b00      	cmp	r3, #0
 8002146:	d008      	beq.n	800215a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002148:	4b19      	ldr	r3, [pc, #100]	; (80021b0 <HAL_RCC_ClockConfig+0x1bc>)
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	4916      	ldr	r1, [pc, #88]	; (80021b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002156:	4313      	orrs	r3, r2
 8002158:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 0308 	and.w	r3, r3, #8
 8002162:	2b00      	cmp	r3, #0
 8002164:	d009      	beq.n	800217a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002166:	4b12      	ldr	r3, [pc, #72]	; (80021b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	691b      	ldr	r3, [r3, #16]
 8002172:	00db      	lsls	r3, r3, #3
 8002174:	490e      	ldr	r1, [pc, #56]	; (80021b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002176:	4313      	orrs	r3, r2
 8002178:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800217a:	f000 f821 	bl	80021c0 <HAL_RCC_GetSysClockFreq>
 800217e:	4602      	mov	r2, r0
 8002180:	4b0b      	ldr	r3, [pc, #44]	; (80021b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	091b      	lsrs	r3, r3, #4
 8002186:	f003 030f 	and.w	r3, r3, #15
 800218a:	490a      	ldr	r1, [pc, #40]	; (80021b4 <HAL_RCC_ClockConfig+0x1c0>)
 800218c:	5ccb      	ldrb	r3, [r1, r3]
 800218e:	fa22 f303 	lsr.w	r3, r2, r3
 8002192:	4a09      	ldr	r2, [pc, #36]	; (80021b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002194:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002196:	4b09      	ldr	r3, [pc, #36]	; (80021bc <HAL_RCC_ClockConfig+0x1c8>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4618      	mov	r0, r3
 800219c:	f7fe fe94 	bl	8000ec8 <HAL_InitTick>

  return HAL_OK;
 80021a0:	2300      	movs	r3, #0
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	3710      	adds	r7, #16
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	40023c00 	.word	0x40023c00
 80021b0:	40023800 	.word	0x40023800
 80021b4:	08007c8c 	.word	0x08007c8c
 80021b8:	200000bc 	.word	0x200000bc
 80021bc:	200000c0 	.word	0x200000c0

080021c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80021c4:	b094      	sub	sp, #80	; 0x50
 80021c6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80021c8:	2300      	movs	r3, #0
 80021ca:	647b      	str	r3, [r7, #68]	; 0x44
 80021cc:	2300      	movs	r3, #0
 80021ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80021d0:	2300      	movs	r3, #0
 80021d2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80021d4:	2300      	movs	r3, #0
 80021d6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80021d8:	4b79      	ldr	r3, [pc, #484]	; (80023c0 <HAL_RCC_GetSysClockFreq+0x200>)
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	f003 030c 	and.w	r3, r3, #12
 80021e0:	2b08      	cmp	r3, #8
 80021e2:	d00d      	beq.n	8002200 <HAL_RCC_GetSysClockFreq+0x40>
 80021e4:	2b08      	cmp	r3, #8
 80021e6:	f200 80e1 	bhi.w	80023ac <HAL_RCC_GetSysClockFreq+0x1ec>
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d002      	beq.n	80021f4 <HAL_RCC_GetSysClockFreq+0x34>
 80021ee:	2b04      	cmp	r3, #4
 80021f0:	d003      	beq.n	80021fa <HAL_RCC_GetSysClockFreq+0x3a>
 80021f2:	e0db      	b.n	80023ac <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80021f4:	4b73      	ldr	r3, [pc, #460]	; (80023c4 <HAL_RCC_GetSysClockFreq+0x204>)
 80021f6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80021f8:	e0db      	b.n	80023b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80021fa:	4b73      	ldr	r3, [pc, #460]	; (80023c8 <HAL_RCC_GetSysClockFreq+0x208>)
 80021fc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80021fe:	e0d8      	b.n	80023b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002200:	4b6f      	ldr	r3, [pc, #444]	; (80023c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002208:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800220a:	4b6d      	ldr	r3, [pc, #436]	; (80023c0 <HAL_RCC_GetSysClockFreq+0x200>)
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002212:	2b00      	cmp	r3, #0
 8002214:	d063      	beq.n	80022de <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002216:	4b6a      	ldr	r3, [pc, #424]	; (80023c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	099b      	lsrs	r3, r3, #6
 800221c:	2200      	movs	r2, #0
 800221e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002220:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002224:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002228:	633b      	str	r3, [r7, #48]	; 0x30
 800222a:	2300      	movs	r3, #0
 800222c:	637b      	str	r3, [r7, #52]	; 0x34
 800222e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002232:	4622      	mov	r2, r4
 8002234:	462b      	mov	r3, r5
 8002236:	f04f 0000 	mov.w	r0, #0
 800223a:	f04f 0100 	mov.w	r1, #0
 800223e:	0159      	lsls	r1, r3, #5
 8002240:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002244:	0150      	lsls	r0, r2, #5
 8002246:	4602      	mov	r2, r0
 8002248:	460b      	mov	r3, r1
 800224a:	4621      	mov	r1, r4
 800224c:	1a51      	subs	r1, r2, r1
 800224e:	6139      	str	r1, [r7, #16]
 8002250:	4629      	mov	r1, r5
 8002252:	eb63 0301 	sbc.w	r3, r3, r1
 8002256:	617b      	str	r3, [r7, #20]
 8002258:	f04f 0200 	mov.w	r2, #0
 800225c:	f04f 0300 	mov.w	r3, #0
 8002260:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002264:	4659      	mov	r1, fp
 8002266:	018b      	lsls	r3, r1, #6
 8002268:	4651      	mov	r1, sl
 800226a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800226e:	4651      	mov	r1, sl
 8002270:	018a      	lsls	r2, r1, #6
 8002272:	4651      	mov	r1, sl
 8002274:	ebb2 0801 	subs.w	r8, r2, r1
 8002278:	4659      	mov	r1, fp
 800227a:	eb63 0901 	sbc.w	r9, r3, r1
 800227e:	f04f 0200 	mov.w	r2, #0
 8002282:	f04f 0300 	mov.w	r3, #0
 8002286:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800228a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800228e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002292:	4690      	mov	r8, r2
 8002294:	4699      	mov	r9, r3
 8002296:	4623      	mov	r3, r4
 8002298:	eb18 0303 	adds.w	r3, r8, r3
 800229c:	60bb      	str	r3, [r7, #8]
 800229e:	462b      	mov	r3, r5
 80022a0:	eb49 0303 	adc.w	r3, r9, r3
 80022a4:	60fb      	str	r3, [r7, #12]
 80022a6:	f04f 0200 	mov.w	r2, #0
 80022aa:	f04f 0300 	mov.w	r3, #0
 80022ae:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80022b2:	4629      	mov	r1, r5
 80022b4:	024b      	lsls	r3, r1, #9
 80022b6:	4621      	mov	r1, r4
 80022b8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80022bc:	4621      	mov	r1, r4
 80022be:	024a      	lsls	r2, r1, #9
 80022c0:	4610      	mov	r0, r2
 80022c2:	4619      	mov	r1, r3
 80022c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022c6:	2200      	movs	r2, #0
 80022c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80022ca:	62fa      	str	r2, [r7, #44]	; 0x2c
 80022cc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80022d0:	f7fd ffee 	bl	80002b0 <__aeabi_uldivmod>
 80022d4:	4602      	mov	r2, r0
 80022d6:	460b      	mov	r3, r1
 80022d8:	4613      	mov	r3, r2
 80022da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80022dc:	e058      	b.n	8002390 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022de:	4b38      	ldr	r3, [pc, #224]	; (80023c0 <HAL_RCC_GetSysClockFreq+0x200>)
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	099b      	lsrs	r3, r3, #6
 80022e4:	2200      	movs	r2, #0
 80022e6:	4618      	mov	r0, r3
 80022e8:	4611      	mov	r1, r2
 80022ea:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80022ee:	623b      	str	r3, [r7, #32]
 80022f0:	2300      	movs	r3, #0
 80022f2:	627b      	str	r3, [r7, #36]	; 0x24
 80022f4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80022f8:	4642      	mov	r2, r8
 80022fa:	464b      	mov	r3, r9
 80022fc:	f04f 0000 	mov.w	r0, #0
 8002300:	f04f 0100 	mov.w	r1, #0
 8002304:	0159      	lsls	r1, r3, #5
 8002306:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800230a:	0150      	lsls	r0, r2, #5
 800230c:	4602      	mov	r2, r0
 800230e:	460b      	mov	r3, r1
 8002310:	4641      	mov	r1, r8
 8002312:	ebb2 0a01 	subs.w	sl, r2, r1
 8002316:	4649      	mov	r1, r9
 8002318:	eb63 0b01 	sbc.w	fp, r3, r1
 800231c:	f04f 0200 	mov.w	r2, #0
 8002320:	f04f 0300 	mov.w	r3, #0
 8002324:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002328:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800232c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002330:	ebb2 040a 	subs.w	r4, r2, sl
 8002334:	eb63 050b 	sbc.w	r5, r3, fp
 8002338:	f04f 0200 	mov.w	r2, #0
 800233c:	f04f 0300 	mov.w	r3, #0
 8002340:	00eb      	lsls	r3, r5, #3
 8002342:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002346:	00e2      	lsls	r2, r4, #3
 8002348:	4614      	mov	r4, r2
 800234a:	461d      	mov	r5, r3
 800234c:	4643      	mov	r3, r8
 800234e:	18e3      	adds	r3, r4, r3
 8002350:	603b      	str	r3, [r7, #0]
 8002352:	464b      	mov	r3, r9
 8002354:	eb45 0303 	adc.w	r3, r5, r3
 8002358:	607b      	str	r3, [r7, #4]
 800235a:	f04f 0200 	mov.w	r2, #0
 800235e:	f04f 0300 	mov.w	r3, #0
 8002362:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002366:	4629      	mov	r1, r5
 8002368:	028b      	lsls	r3, r1, #10
 800236a:	4621      	mov	r1, r4
 800236c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002370:	4621      	mov	r1, r4
 8002372:	028a      	lsls	r2, r1, #10
 8002374:	4610      	mov	r0, r2
 8002376:	4619      	mov	r1, r3
 8002378:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800237a:	2200      	movs	r2, #0
 800237c:	61bb      	str	r3, [r7, #24]
 800237e:	61fa      	str	r2, [r7, #28]
 8002380:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002384:	f7fd ff94 	bl	80002b0 <__aeabi_uldivmod>
 8002388:	4602      	mov	r2, r0
 800238a:	460b      	mov	r3, r1
 800238c:	4613      	mov	r3, r2
 800238e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002390:	4b0b      	ldr	r3, [pc, #44]	; (80023c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	0c1b      	lsrs	r3, r3, #16
 8002396:	f003 0303 	and.w	r3, r3, #3
 800239a:	3301      	adds	r3, #1
 800239c:	005b      	lsls	r3, r3, #1
 800239e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80023a0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80023a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80023a8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80023aa:	e002      	b.n	80023b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80023ac:	4b05      	ldr	r3, [pc, #20]	; (80023c4 <HAL_RCC_GetSysClockFreq+0x204>)
 80023ae:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80023b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	3750      	adds	r7, #80	; 0x50
 80023b8:	46bd      	mov	sp, r7
 80023ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80023be:	bf00      	nop
 80023c0:	40023800 	.word	0x40023800
 80023c4:	00f42400 	.word	0x00f42400
 80023c8:	007a1200 	.word	0x007a1200

080023cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023cc:	b480      	push	{r7}
 80023ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023d0:	4b03      	ldr	r3, [pc, #12]	; (80023e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80023d2:	681b      	ldr	r3, [r3, #0]
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr
 80023de:	bf00      	nop
 80023e0:	200000bc 	.word	0x200000bc

080023e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80023e8:	f7ff fff0 	bl	80023cc <HAL_RCC_GetHCLKFreq>
 80023ec:	4602      	mov	r2, r0
 80023ee:	4b05      	ldr	r3, [pc, #20]	; (8002404 <HAL_RCC_GetPCLK1Freq+0x20>)
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	0a9b      	lsrs	r3, r3, #10
 80023f4:	f003 0307 	and.w	r3, r3, #7
 80023f8:	4903      	ldr	r1, [pc, #12]	; (8002408 <HAL_RCC_GetPCLK1Freq+0x24>)
 80023fa:	5ccb      	ldrb	r3, [r1, r3]
 80023fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002400:	4618      	mov	r0, r3
 8002402:	bd80      	pop	{r7, pc}
 8002404:	40023800 	.word	0x40023800
 8002408:	08007c9c 	.word	0x08007c9c

0800240c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002410:	f7ff ffdc 	bl	80023cc <HAL_RCC_GetHCLKFreq>
 8002414:	4602      	mov	r2, r0
 8002416:	4b05      	ldr	r3, [pc, #20]	; (800242c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	0b5b      	lsrs	r3, r3, #13
 800241c:	f003 0307 	and.w	r3, r3, #7
 8002420:	4903      	ldr	r1, [pc, #12]	; (8002430 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002422:	5ccb      	ldrb	r3, [r1, r3]
 8002424:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002428:	4618      	mov	r0, r3
 800242a:	bd80      	pop	{r7, pc}
 800242c:	40023800 	.word	0x40023800
 8002430:	08007c9c 	.word	0x08007c9c

08002434 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002434:	b480      	push	{r7}
 8002436:	b083      	sub	sp, #12
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
 800243c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	220f      	movs	r2, #15
 8002442:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002444:	4b12      	ldr	r3, [pc, #72]	; (8002490 <HAL_RCC_GetClockConfig+0x5c>)
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	f003 0203 	and.w	r2, r3, #3
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002450:	4b0f      	ldr	r3, [pc, #60]	; (8002490 <HAL_RCC_GetClockConfig+0x5c>)
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800245c:	4b0c      	ldr	r3, [pc, #48]	; (8002490 <HAL_RCC_GetClockConfig+0x5c>)
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002468:	4b09      	ldr	r3, [pc, #36]	; (8002490 <HAL_RCC_GetClockConfig+0x5c>)
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	08db      	lsrs	r3, r3, #3
 800246e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002476:	4b07      	ldr	r3, [pc, #28]	; (8002494 <HAL_RCC_GetClockConfig+0x60>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 0207 	and.w	r2, r3, #7
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	601a      	str	r2, [r3, #0]
}
 8002482:	bf00      	nop
 8002484:	370c      	adds	r7, #12
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr
 800248e:	bf00      	nop
 8002490:	40023800 	.word	0x40023800
 8002494:	40023c00 	.word	0x40023c00

08002498 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b086      	sub	sp, #24
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d101      	bne.n	80024aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e273      	b.n	8002992 <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 0301 	and.w	r3, r3, #1
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d075      	beq.n	80025a2 <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80024b6:	4b88      	ldr	r3, [pc, #544]	; (80026d8 <HAL_RCC_OscConfig+0x240>)
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	f003 030c 	and.w	r3, r3, #12
 80024be:	2b04      	cmp	r3, #4
 80024c0:	d00c      	beq.n	80024dc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024c2:	4b85      	ldr	r3, [pc, #532]	; (80026d8 <HAL_RCC_OscConfig+0x240>)
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80024ca:	2b08      	cmp	r3, #8
 80024cc:	d112      	bne.n	80024f4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024ce:	4b82      	ldr	r3, [pc, #520]	; (80026d8 <HAL_RCC_OscConfig+0x240>)
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024da:	d10b      	bne.n	80024f4 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024dc:	4b7e      	ldr	r3, [pc, #504]	; (80026d8 <HAL_RCC_OscConfig+0x240>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d05b      	beq.n	80025a0 <HAL_RCC_OscConfig+0x108>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d157      	bne.n	80025a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	e24e      	b.n	8002992 <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024fc:	d106      	bne.n	800250c <HAL_RCC_OscConfig+0x74>
 80024fe:	4b76      	ldr	r3, [pc, #472]	; (80026d8 <HAL_RCC_OscConfig+0x240>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a75      	ldr	r2, [pc, #468]	; (80026d8 <HAL_RCC_OscConfig+0x240>)
 8002504:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002508:	6013      	str	r3, [r2, #0]
 800250a:	e01d      	b.n	8002548 <HAL_RCC_OscConfig+0xb0>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002514:	d10c      	bne.n	8002530 <HAL_RCC_OscConfig+0x98>
 8002516:	4b70      	ldr	r3, [pc, #448]	; (80026d8 <HAL_RCC_OscConfig+0x240>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a6f      	ldr	r2, [pc, #444]	; (80026d8 <HAL_RCC_OscConfig+0x240>)
 800251c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002520:	6013      	str	r3, [r2, #0]
 8002522:	4b6d      	ldr	r3, [pc, #436]	; (80026d8 <HAL_RCC_OscConfig+0x240>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a6c      	ldr	r2, [pc, #432]	; (80026d8 <HAL_RCC_OscConfig+0x240>)
 8002528:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800252c:	6013      	str	r3, [r2, #0]
 800252e:	e00b      	b.n	8002548 <HAL_RCC_OscConfig+0xb0>
 8002530:	4b69      	ldr	r3, [pc, #420]	; (80026d8 <HAL_RCC_OscConfig+0x240>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a68      	ldr	r2, [pc, #416]	; (80026d8 <HAL_RCC_OscConfig+0x240>)
 8002536:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800253a:	6013      	str	r3, [r2, #0]
 800253c:	4b66      	ldr	r3, [pc, #408]	; (80026d8 <HAL_RCC_OscConfig+0x240>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a65      	ldr	r2, [pc, #404]	; (80026d8 <HAL_RCC_OscConfig+0x240>)
 8002542:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002546:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d013      	beq.n	8002578 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002550:	f7fe ff0e 	bl	8001370 <HAL_GetTick>
 8002554:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002556:	e008      	b.n	800256a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002558:	f7fe ff0a 	bl	8001370 <HAL_GetTick>
 800255c:	4602      	mov	r2, r0
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	2b64      	cmp	r3, #100	; 0x64
 8002564:	d901      	bls.n	800256a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002566:	2303      	movs	r3, #3
 8002568:	e213      	b.n	8002992 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800256a:	4b5b      	ldr	r3, [pc, #364]	; (80026d8 <HAL_RCC_OscConfig+0x240>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002572:	2b00      	cmp	r3, #0
 8002574:	d0f0      	beq.n	8002558 <HAL_RCC_OscConfig+0xc0>
 8002576:	e014      	b.n	80025a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002578:	f7fe fefa 	bl	8001370 <HAL_GetTick>
 800257c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800257e:	e008      	b.n	8002592 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002580:	f7fe fef6 	bl	8001370 <HAL_GetTick>
 8002584:	4602      	mov	r2, r0
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	2b64      	cmp	r3, #100	; 0x64
 800258c:	d901      	bls.n	8002592 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800258e:	2303      	movs	r3, #3
 8002590:	e1ff      	b.n	8002992 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002592:	4b51      	ldr	r3, [pc, #324]	; (80026d8 <HAL_RCC_OscConfig+0x240>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800259a:	2b00      	cmp	r3, #0
 800259c:	d1f0      	bne.n	8002580 <HAL_RCC_OscConfig+0xe8>
 800259e:	e000      	b.n	80025a2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 0302 	and.w	r3, r3, #2
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d063      	beq.n	8002676 <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80025ae:	4b4a      	ldr	r3, [pc, #296]	; (80026d8 <HAL_RCC_OscConfig+0x240>)
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	f003 030c 	and.w	r3, r3, #12
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d00b      	beq.n	80025d2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025ba:	4b47      	ldr	r3, [pc, #284]	; (80026d8 <HAL_RCC_OscConfig+0x240>)
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80025c2:	2b08      	cmp	r3, #8
 80025c4:	d11c      	bne.n	8002600 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025c6:	4b44      	ldr	r3, [pc, #272]	; (80026d8 <HAL_RCC_OscConfig+0x240>)
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d116      	bne.n	8002600 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025d2:	4b41      	ldr	r3, [pc, #260]	; (80026d8 <HAL_RCC_OscConfig+0x240>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 0302 	and.w	r3, r3, #2
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d005      	beq.n	80025ea <HAL_RCC_OscConfig+0x152>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	68db      	ldr	r3, [r3, #12]
 80025e2:	2b01      	cmp	r3, #1
 80025e4:	d001      	beq.n	80025ea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e1d3      	b.n	8002992 <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025ea:	4b3b      	ldr	r3, [pc, #236]	; (80026d8 <HAL_RCC_OscConfig+0x240>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	691b      	ldr	r3, [r3, #16]
 80025f6:	00db      	lsls	r3, r3, #3
 80025f8:	4937      	ldr	r1, [pc, #220]	; (80026d8 <HAL_RCC_OscConfig+0x240>)
 80025fa:	4313      	orrs	r3, r2
 80025fc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025fe:	e03a      	b.n	8002676 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d020      	beq.n	800264a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002608:	4b34      	ldr	r3, [pc, #208]	; (80026dc <HAL_RCC_OscConfig+0x244>)
 800260a:	2201      	movs	r2, #1
 800260c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800260e:	f7fe feaf 	bl	8001370 <HAL_GetTick>
 8002612:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002614:	e008      	b.n	8002628 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002616:	f7fe feab 	bl	8001370 <HAL_GetTick>
 800261a:	4602      	mov	r2, r0
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	1ad3      	subs	r3, r2, r3
 8002620:	2b02      	cmp	r3, #2
 8002622:	d901      	bls.n	8002628 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002624:	2303      	movs	r3, #3
 8002626:	e1b4      	b.n	8002992 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002628:	4b2b      	ldr	r3, [pc, #172]	; (80026d8 <HAL_RCC_OscConfig+0x240>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 0302 	and.w	r3, r3, #2
 8002630:	2b00      	cmp	r3, #0
 8002632:	d0f0      	beq.n	8002616 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002634:	4b28      	ldr	r3, [pc, #160]	; (80026d8 <HAL_RCC_OscConfig+0x240>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	691b      	ldr	r3, [r3, #16]
 8002640:	00db      	lsls	r3, r3, #3
 8002642:	4925      	ldr	r1, [pc, #148]	; (80026d8 <HAL_RCC_OscConfig+0x240>)
 8002644:	4313      	orrs	r3, r2
 8002646:	600b      	str	r3, [r1, #0]
 8002648:	e015      	b.n	8002676 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800264a:	4b24      	ldr	r3, [pc, #144]	; (80026dc <HAL_RCC_OscConfig+0x244>)
 800264c:	2200      	movs	r2, #0
 800264e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002650:	f7fe fe8e 	bl	8001370 <HAL_GetTick>
 8002654:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002656:	e008      	b.n	800266a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002658:	f7fe fe8a 	bl	8001370 <HAL_GetTick>
 800265c:	4602      	mov	r2, r0
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	2b02      	cmp	r3, #2
 8002664:	d901      	bls.n	800266a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002666:	2303      	movs	r3, #3
 8002668:	e193      	b.n	8002992 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800266a:	4b1b      	ldr	r3, [pc, #108]	; (80026d8 <HAL_RCC_OscConfig+0x240>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 0302 	and.w	r3, r3, #2
 8002672:	2b00      	cmp	r3, #0
 8002674:	d1f0      	bne.n	8002658 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 0308 	and.w	r3, r3, #8
 800267e:	2b00      	cmp	r3, #0
 8002680:	d036      	beq.n	80026f0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	695b      	ldr	r3, [r3, #20]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d016      	beq.n	80026b8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800268a:	4b15      	ldr	r3, [pc, #84]	; (80026e0 <HAL_RCC_OscConfig+0x248>)
 800268c:	2201      	movs	r2, #1
 800268e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002690:	f7fe fe6e 	bl	8001370 <HAL_GetTick>
 8002694:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002696:	e008      	b.n	80026aa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002698:	f7fe fe6a 	bl	8001370 <HAL_GetTick>
 800269c:	4602      	mov	r2, r0
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	1ad3      	subs	r3, r2, r3
 80026a2:	2b02      	cmp	r3, #2
 80026a4:	d901      	bls.n	80026aa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80026a6:	2303      	movs	r3, #3
 80026a8:	e173      	b.n	8002992 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026aa:	4b0b      	ldr	r3, [pc, #44]	; (80026d8 <HAL_RCC_OscConfig+0x240>)
 80026ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026ae:	f003 0302 	and.w	r3, r3, #2
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d0f0      	beq.n	8002698 <HAL_RCC_OscConfig+0x200>
 80026b6:	e01b      	b.n	80026f0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026b8:	4b09      	ldr	r3, [pc, #36]	; (80026e0 <HAL_RCC_OscConfig+0x248>)
 80026ba:	2200      	movs	r2, #0
 80026bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026be:	f7fe fe57 	bl	8001370 <HAL_GetTick>
 80026c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026c4:	e00e      	b.n	80026e4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026c6:	f7fe fe53 	bl	8001370 <HAL_GetTick>
 80026ca:	4602      	mov	r2, r0
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	1ad3      	subs	r3, r2, r3
 80026d0:	2b02      	cmp	r3, #2
 80026d2:	d907      	bls.n	80026e4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80026d4:	2303      	movs	r3, #3
 80026d6:	e15c      	b.n	8002992 <HAL_RCC_OscConfig+0x4fa>
 80026d8:	40023800 	.word	0x40023800
 80026dc:	42470000 	.word	0x42470000
 80026e0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026e4:	4b8a      	ldr	r3, [pc, #552]	; (8002910 <HAL_RCC_OscConfig+0x478>)
 80026e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026e8:	f003 0302 	and.w	r3, r3, #2
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d1ea      	bne.n	80026c6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 0304 	and.w	r3, r3, #4
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	f000 8097 	beq.w	800282c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026fe:	2300      	movs	r3, #0
 8002700:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002702:	4b83      	ldr	r3, [pc, #524]	; (8002910 <HAL_RCC_OscConfig+0x478>)
 8002704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002706:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800270a:	2b00      	cmp	r3, #0
 800270c:	d10f      	bne.n	800272e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800270e:	2300      	movs	r3, #0
 8002710:	60bb      	str	r3, [r7, #8]
 8002712:	4b7f      	ldr	r3, [pc, #508]	; (8002910 <HAL_RCC_OscConfig+0x478>)
 8002714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002716:	4a7e      	ldr	r2, [pc, #504]	; (8002910 <HAL_RCC_OscConfig+0x478>)
 8002718:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800271c:	6413      	str	r3, [r2, #64]	; 0x40
 800271e:	4b7c      	ldr	r3, [pc, #496]	; (8002910 <HAL_RCC_OscConfig+0x478>)
 8002720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002722:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002726:	60bb      	str	r3, [r7, #8]
 8002728:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800272a:	2301      	movs	r3, #1
 800272c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800272e:	4b79      	ldr	r3, [pc, #484]	; (8002914 <HAL_RCC_OscConfig+0x47c>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002736:	2b00      	cmp	r3, #0
 8002738:	d118      	bne.n	800276c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800273a:	4b76      	ldr	r3, [pc, #472]	; (8002914 <HAL_RCC_OscConfig+0x47c>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a75      	ldr	r2, [pc, #468]	; (8002914 <HAL_RCC_OscConfig+0x47c>)
 8002740:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002744:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002746:	f7fe fe13 	bl	8001370 <HAL_GetTick>
 800274a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800274c:	e008      	b.n	8002760 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800274e:	f7fe fe0f 	bl	8001370 <HAL_GetTick>
 8002752:	4602      	mov	r2, r0
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	1ad3      	subs	r3, r2, r3
 8002758:	2b02      	cmp	r3, #2
 800275a:	d901      	bls.n	8002760 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800275c:	2303      	movs	r3, #3
 800275e:	e118      	b.n	8002992 <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002760:	4b6c      	ldr	r3, [pc, #432]	; (8002914 <HAL_RCC_OscConfig+0x47c>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002768:	2b00      	cmp	r3, #0
 800276a:	d0f0      	beq.n	800274e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	2b01      	cmp	r3, #1
 8002772:	d106      	bne.n	8002782 <HAL_RCC_OscConfig+0x2ea>
 8002774:	4b66      	ldr	r3, [pc, #408]	; (8002910 <HAL_RCC_OscConfig+0x478>)
 8002776:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002778:	4a65      	ldr	r2, [pc, #404]	; (8002910 <HAL_RCC_OscConfig+0x478>)
 800277a:	f043 0301 	orr.w	r3, r3, #1
 800277e:	6713      	str	r3, [r2, #112]	; 0x70
 8002780:	e01c      	b.n	80027bc <HAL_RCC_OscConfig+0x324>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	2b05      	cmp	r3, #5
 8002788:	d10c      	bne.n	80027a4 <HAL_RCC_OscConfig+0x30c>
 800278a:	4b61      	ldr	r3, [pc, #388]	; (8002910 <HAL_RCC_OscConfig+0x478>)
 800278c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800278e:	4a60      	ldr	r2, [pc, #384]	; (8002910 <HAL_RCC_OscConfig+0x478>)
 8002790:	f043 0304 	orr.w	r3, r3, #4
 8002794:	6713      	str	r3, [r2, #112]	; 0x70
 8002796:	4b5e      	ldr	r3, [pc, #376]	; (8002910 <HAL_RCC_OscConfig+0x478>)
 8002798:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800279a:	4a5d      	ldr	r2, [pc, #372]	; (8002910 <HAL_RCC_OscConfig+0x478>)
 800279c:	f043 0301 	orr.w	r3, r3, #1
 80027a0:	6713      	str	r3, [r2, #112]	; 0x70
 80027a2:	e00b      	b.n	80027bc <HAL_RCC_OscConfig+0x324>
 80027a4:	4b5a      	ldr	r3, [pc, #360]	; (8002910 <HAL_RCC_OscConfig+0x478>)
 80027a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027a8:	4a59      	ldr	r2, [pc, #356]	; (8002910 <HAL_RCC_OscConfig+0x478>)
 80027aa:	f023 0301 	bic.w	r3, r3, #1
 80027ae:	6713      	str	r3, [r2, #112]	; 0x70
 80027b0:	4b57      	ldr	r3, [pc, #348]	; (8002910 <HAL_RCC_OscConfig+0x478>)
 80027b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027b4:	4a56      	ldr	r2, [pc, #344]	; (8002910 <HAL_RCC_OscConfig+0x478>)
 80027b6:	f023 0304 	bic.w	r3, r3, #4
 80027ba:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d015      	beq.n	80027f0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027c4:	f7fe fdd4 	bl	8001370 <HAL_GetTick>
 80027c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027ca:	e00a      	b.n	80027e2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027cc:	f7fe fdd0 	bl	8001370 <HAL_GetTick>
 80027d0:	4602      	mov	r2, r0
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80027da:	4293      	cmp	r3, r2
 80027dc:	d901      	bls.n	80027e2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80027de:	2303      	movs	r3, #3
 80027e0:	e0d7      	b.n	8002992 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027e2:	4b4b      	ldr	r3, [pc, #300]	; (8002910 <HAL_RCC_OscConfig+0x478>)
 80027e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027e6:	f003 0302 	and.w	r3, r3, #2
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d0ee      	beq.n	80027cc <HAL_RCC_OscConfig+0x334>
 80027ee:	e014      	b.n	800281a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027f0:	f7fe fdbe 	bl	8001370 <HAL_GetTick>
 80027f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027f6:	e00a      	b.n	800280e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027f8:	f7fe fdba 	bl	8001370 <HAL_GetTick>
 80027fc:	4602      	mov	r2, r0
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	1ad3      	subs	r3, r2, r3
 8002802:	f241 3288 	movw	r2, #5000	; 0x1388
 8002806:	4293      	cmp	r3, r2
 8002808:	d901      	bls.n	800280e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800280a:	2303      	movs	r3, #3
 800280c:	e0c1      	b.n	8002992 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800280e:	4b40      	ldr	r3, [pc, #256]	; (8002910 <HAL_RCC_OscConfig+0x478>)
 8002810:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002812:	f003 0302 	and.w	r3, r3, #2
 8002816:	2b00      	cmp	r3, #0
 8002818:	d1ee      	bne.n	80027f8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800281a:	7dfb      	ldrb	r3, [r7, #23]
 800281c:	2b01      	cmp	r3, #1
 800281e:	d105      	bne.n	800282c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002820:	4b3b      	ldr	r3, [pc, #236]	; (8002910 <HAL_RCC_OscConfig+0x478>)
 8002822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002824:	4a3a      	ldr	r2, [pc, #232]	; (8002910 <HAL_RCC_OscConfig+0x478>)
 8002826:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800282a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	699b      	ldr	r3, [r3, #24]
 8002830:	2b00      	cmp	r3, #0
 8002832:	f000 80ad 	beq.w	8002990 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002836:	4b36      	ldr	r3, [pc, #216]	; (8002910 <HAL_RCC_OscConfig+0x478>)
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	f003 030c 	and.w	r3, r3, #12
 800283e:	2b08      	cmp	r3, #8
 8002840:	d060      	beq.n	8002904 <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	699b      	ldr	r3, [r3, #24]
 8002846:	2b02      	cmp	r3, #2
 8002848:	d145      	bne.n	80028d6 <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800284a:	4b33      	ldr	r3, [pc, #204]	; (8002918 <HAL_RCC_OscConfig+0x480>)
 800284c:	2200      	movs	r2, #0
 800284e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002850:	f7fe fd8e 	bl	8001370 <HAL_GetTick>
 8002854:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002856:	e008      	b.n	800286a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002858:	f7fe fd8a 	bl	8001370 <HAL_GetTick>
 800285c:	4602      	mov	r2, r0
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	1ad3      	subs	r3, r2, r3
 8002862:	2b02      	cmp	r3, #2
 8002864:	d901      	bls.n	800286a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002866:	2303      	movs	r3, #3
 8002868:	e093      	b.n	8002992 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800286a:	4b29      	ldr	r3, [pc, #164]	; (8002910 <HAL_RCC_OscConfig+0x478>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002872:	2b00      	cmp	r3, #0
 8002874:	d1f0      	bne.n	8002858 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	69da      	ldr	r2, [r3, #28]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6a1b      	ldr	r3, [r3, #32]
 800287e:	431a      	orrs	r2, r3
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002884:	019b      	lsls	r3, r3, #6
 8002886:	431a      	orrs	r2, r3
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800288c:	085b      	lsrs	r3, r3, #1
 800288e:	3b01      	subs	r3, #1
 8002890:	041b      	lsls	r3, r3, #16
 8002892:	431a      	orrs	r2, r3
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002898:	061b      	lsls	r3, r3, #24
 800289a:	431a      	orrs	r2, r3
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a0:	071b      	lsls	r3, r3, #28
 80028a2:	491b      	ldr	r1, [pc, #108]	; (8002910 <HAL_RCC_OscConfig+0x478>)
 80028a4:	4313      	orrs	r3, r2
 80028a6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028a8:	4b1b      	ldr	r3, [pc, #108]	; (8002918 <HAL_RCC_OscConfig+0x480>)
 80028aa:	2201      	movs	r2, #1
 80028ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028ae:	f7fe fd5f 	bl	8001370 <HAL_GetTick>
 80028b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028b4:	e008      	b.n	80028c8 <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028b6:	f7fe fd5b 	bl	8001370 <HAL_GetTick>
 80028ba:	4602      	mov	r2, r0
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	1ad3      	subs	r3, r2, r3
 80028c0:	2b02      	cmp	r3, #2
 80028c2:	d901      	bls.n	80028c8 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 80028c4:	2303      	movs	r3, #3
 80028c6:	e064      	b.n	8002992 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028c8:	4b11      	ldr	r3, [pc, #68]	; (8002910 <HAL_RCC_OscConfig+0x478>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d0f0      	beq.n	80028b6 <HAL_RCC_OscConfig+0x41e>
 80028d4:	e05c      	b.n	8002990 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028d6:	4b10      	ldr	r3, [pc, #64]	; (8002918 <HAL_RCC_OscConfig+0x480>)
 80028d8:	2200      	movs	r2, #0
 80028da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028dc:	f7fe fd48 	bl	8001370 <HAL_GetTick>
 80028e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028e2:	e008      	b.n	80028f6 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028e4:	f7fe fd44 	bl	8001370 <HAL_GetTick>
 80028e8:	4602      	mov	r2, r0
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	2b02      	cmp	r3, #2
 80028f0:	d901      	bls.n	80028f6 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 80028f2:	2303      	movs	r3, #3
 80028f4:	e04d      	b.n	8002992 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028f6:	4b06      	ldr	r3, [pc, #24]	; (8002910 <HAL_RCC_OscConfig+0x478>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d1f0      	bne.n	80028e4 <HAL_RCC_OscConfig+0x44c>
 8002902:	e045      	b.n	8002990 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	699b      	ldr	r3, [r3, #24]
 8002908:	2b01      	cmp	r3, #1
 800290a:	d107      	bne.n	800291c <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	e040      	b.n	8002992 <HAL_RCC_OscConfig+0x4fa>
 8002910:	40023800 	.word	0x40023800
 8002914:	40007000 	.word	0x40007000
 8002918:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800291c:	4b1f      	ldr	r3, [pc, #124]	; (800299c <HAL_RCC_OscConfig+0x504>)
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	699b      	ldr	r3, [r3, #24]
 8002926:	2b01      	cmp	r3, #1
 8002928:	d030      	beq.n	800298c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002934:	429a      	cmp	r2, r3
 8002936:	d129      	bne.n	800298c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002942:	429a      	cmp	r2, r3
 8002944:	d122      	bne.n	800298c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002946:	68fa      	ldr	r2, [r7, #12]
 8002948:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800294c:	4013      	ands	r3, r2
 800294e:	687a      	ldr	r2, [r7, #4]
 8002950:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002952:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002954:	4293      	cmp	r3, r2
 8002956:	d119      	bne.n	800298c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002962:	085b      	lsrs	r3, r3, #1
 8002964:	3b01      	subs	r3, #1
 8002966:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002968:	429a      	cmp	r2, r3
 800296a:	d10f      	bne.n	800298c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002976:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002978:	429a      	cmp	r2, r3
 800297a:	d107      	bne.n	800298c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002986:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002988:	429a      	cmp	r2, r3
 800298a:	d001      	beq.n	8002990 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	e000      	b.n	8002992 <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8002990:	2300      	movs	r3, #0
}
 8002992:	4618      	mov	r0, r3
 8002994:	3718      	adds	r7, #24
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}
 800299a:	bf00      	nop
 800299c:	40023800 	.word	0x40023800

080029a0 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b082      	sub	sp, #8
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d101      	bne.n	80029b2 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e01c      	b.n	80029ec <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	795b      	ldrb	r3, [r3, #5]
 80029b6:	b2db      	uxtb	r3, r3
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d105      	bne.n	80029c8 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2200      	movs	r2, #0
 80029c0:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	f7fe fa32 	bl	8000e2c <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2202      	movs	r2, #2
 80029cc:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f042 0204 	orr.w	r2, r2, #4
 80029dc:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2201      	movs	r2, #1
 80029e2:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2200      	movs	r2, #0
 80029e8:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 80029ea:	2300      	movs	r3, #0
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	3708      	adds	r7, #8
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}

080029f4 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b084      	sub	sp, #16
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
 80029fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80029fe:	2300      	movs	r3, #0
 8002a00:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	791b      	ldrb	r3, [r3, #4]
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	d101      	bne.n	8002a0e <HAL_RNG_GenerateRandomNumber+0x1a>
 8002a0a:	2302      	movs	r3, #2
 8002a0c:	e044      	b.n	8002a98 <HAL_RNG_GenerateRandomNumber+0xa4>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2201      	movs	r2, #1
 8002a12:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	795b      	ldrb	r3, [r3, #5]
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d133      	bne.n	8002a86 <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2202      	movs	r2, #2
 8002a22:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002a24:	f7fe fca4 	bl	8001370 <HAL_GetTick>
 8002a28:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8002a2a:	e018      	b.n	8002a5e <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8002a2c:	f7fe fca0 	bl	8001370 <HAL_GetTick>
 8002a30:	4602      	mov	r2, r0
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	1ad3      	subs	r3, r2, r3
 8002a36:	2b02      	cmp	r3, #2
 8002a38:	d911      	bls.n	8002a5e <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	f003 0301 	and.w	r3, r3, #1
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	d00a      	beq.n	8002a5e <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2202      	movs	r2, #2
 8002a52:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2200      	movs	r2, #0
 8002a58:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e01c      	b.n	8002a98 <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	f003 0301 	and.w	r3, r3, #1
 8002a68:	2b01      	cmp	r3, #1
 8002a6a:	d1df      	bne.n	8002a2c <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	689a      	ldr	r2, [r3, #8]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	68da      	ldr	r2, [r3, #12]
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2201      	movs	r2, #1
 8002a82:	715a      	strb	r2, [r3, #5]
 8002a84:	e004      	b.n	8002a90 <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2204      	movs	r2, #4
 8002a8a:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2200      	movs	r2, #0
 8002a94:	711a      	strb	r2, [r3, #4]

  return status;
 8002a96:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	3710      	adds	r7, #16
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}

08002aa0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b082      	sub	sp, #8
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d101      	bne.n	8002ab2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e041      	b.n	8002b36 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d106      	bne.n	8002acc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ac6:	6878      	ldr	r0, [r7, #4]
 8002ac8:	f7fe fb48 	bl	800115c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2202      	movs	r2, #2
 8002ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	3304      	adds	r3, #4
 8002adc:	4619      	mov	r1, r3
 8002ade:	4610      	mov	r0, r2
 8002ae0:	f000 f9ac 	bl	8002e3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2201      	movs	r2, #1
 8002af0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2201      	movs	r2, #1
 8002af8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2201      	movs	r2, #1
 8002b00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2201      	movs	r2, #1
 8002b08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2201      	movs	r2, #1
 8002b10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2201      	movs	r2, #1
 8002b18:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2201      	movs	r2, #1
 8002b20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2201      	movs	r2, #1
 8002b28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2201      	movs	r2, #1
 8002b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b34:	2300      	movs	r3, #0
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	3708      	adds	r7, #8
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}
	...

08002b40 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b085      	sub	sp, #20
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b4e:	b2db      	uxtb	r3, r3
 8002b50:	2b01      	cmp	r3, #1
 8002b52:	d001      	beq.n	8002b58 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	e035      	b.n	8002bc4 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2202      	movs	r2, #2
 8002b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	68da      	ldr	r2, [r3, #12]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f042 0201 	orr.w	r2, r2, #1
 8002b6e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a16      	ldr	r2, [pc, #88]	; (8002bd0 <HAL_TIM_Base_Start_IT+0x90>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d009      	beq.n	8002b8e <HAL_TIM_Base_Start_IT+0x4e>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a15      	ldr	r2, [pc, #84]	; (8002bd4 <HAL_TIM_Base_Start_IT+0x94>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d004      	beq.n	8002b8e <HAL_TIM_Base_Start_IT+0x4e>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a13      	ldr	r2, [pc, #76]	; (8002bd8 <HAL_TIM_Base_Start_IT+0x98>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d111      	bne.n	8002bb2 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	f003 0307 	and.w	r3, r3, #7
 8002b98:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	2b06      	cmp	r3, #6
 8002b9e:	d010      	beq.n	8002bc2 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f042 0201 	orr.w	r2, r2, #1
 8002bae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bb0:	e007      	b.n	8002bc2 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f042 0201 	orr.w	r2, r2, #1
 8002bc0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002bc2:	2300      	movs	r3, #0
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	3714      	adds	r7, #20
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bce:	4770      	bx	lr
 8002bd0:	40010000 	.word	0x40010000
 8002bd4:	40000c00 	.word	0x40000c00
 8002bd8:	40014000 	.word	0x40014000

08002bdc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b082      	sub	sp, #8
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	691b      	ldr	r3, [r3, #16]
 8002bea:	f003 0302 	and.w	r3, r3, #2
 8002bee:	2b02      	cmp	r3, #2
 8002bf0:	d122      	bne.n	8002c38 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	68db      	ldr	r3, [r3, #12]
 8002bf8:	f003 0302 	and.w	r3, r3, #2
 8002bfc:	2b02      	cmp	r3, #2
 8002bfe:	d11b      	bne.n	8002c38 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f06f 0202 	mvn.w	r2, #2
 8002c08:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	699b      	ldr	r3, [r3, #24]
 8002c16:	f003 0303 	and.w	r3, r3, #3
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d003      	beq.n	8002c26 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	f000 f8ee 	bl	8002e00 <HAL_TIM_IC_CaptureCallback>
 8002c24:	e005      	b.n	8002c32 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	f000 f8e0 	bl	8002dec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c2c:	6878      	ldr	r0, [r7, #4]
 8002c2e:	f000 f8f1 	bl	8002e14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2200      	movs	r2, #0
 8002c36:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	691b      	ldr	r3, [r3, #16]
 8002c3e:	f003 0304 	and.w	r3, r3, #4
 8002c42:	2b04      	cmp	r3, #4
 8002c44:	d122      	bne.n	8002c8c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	68db      	ldr	r3, [r3, #12]
 8002c4c:	f003 0304 	and.w	r3, r3, #4
 8002c50:	2b04      	cmp	r3, #4
 8002c52:	d11b      	bne.n	8002c8c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f06f 0204 	mvn.w	r2, #4
 8002c5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2202      	movs	r2, #2
 8002c62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	699b      	ldr	r3, [r3, #24]
 8002c6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d003      	beq.n	8002c7a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c72:	6878      	ldr	r0, [r7, #4]
 8002c74:	f000 f8c4 	bl	8002e00 <HAL_TIM_IC_CaptureCallback>
 8002c78:	e005      	b.n	8002c86 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f000 f8b6 	bl	8002dec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c80:	6878      	ldr	r0, [r7, #4]
 8002c82:	f000 f8c7 	bl	8002e14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	691b      	ldr	r3, [r3, #16]
 8002c92:	f003 0308 	and.w	r3, r3, #8
 8002c96:	2b08      	cmp	r3, #8
 8002c98:	d122      	bne.n	8002ce0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	f003 0308 	and.w	r3, r3, #8
 8002ca4:	2b08      	cmp	r3, #8
 8002ca6:	d11b      	bne.n	8002ce0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f06f 0208 	mvn.w	r2, #8
 8002cb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2204      	movs	r2, #4
 8002cb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	69db      	ldr	r3, [r3, #28]
 8002cbe:	f003 0303 	and.w	r3, r3, #3
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d003      	beq.n	8002cce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	f000 f89a 	bl	8002e00 <HAL_TIM_IC_CaptureCallback>
 8002ccc:	e005      	b.n	8002cda <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	f000 f88c 	bl	8002dec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cd4:	6878      	ldr	r0, [r7, #4]
 8002cd6:	f000 f89d 	bl	8002e14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	691b      	ldr	r3, [r3, #16]
 8002ce6:	f003 0310 	and.w	r3, r3, #16
 8002cea:	2b10      	cmp	r3, #16
 8002cec:	d122      	bne.n	8002d34 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	68db      	ldr	r3, [r3, #12]
 8002cf4:	f003 0310 	and.w	r3, r3, #16
 8002cf8:	2b10      	cmp	r3, #16
 8002cfa:	d11b      	bne.n	8002d34 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f06f 0210 	mvn.w	r2, #16
 8002d04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2208      	movs	r2, #8
 8002d0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	69db      	ldr	r3, [r3, #28]
 8002d12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d003      	beq.n	8002d22 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f000 f870 	bl	8002e00 <HAL_TIM_IC_CaptureCallback>
 8002d20:	e005      	b.n	8002d2e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f000 f862 	bl	8002dec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d28:	6878      	ldr	r0, [r7, #4]
 8002d2a:	f000 f873 	bl	8002e14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2200      	movs	r2, #0
 8002d32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	691b      	ldr	r3, [r3, #16]
 8002d3a:	f003 0301 	and.w	r3, r3, #1
 8002d3e:	2b01      	cmp	r3, #1
 8002d40:	d10e      	bne.n	8002d60 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	68db      	ldr	r3, [r3, #12]
 8002d48:	f003 0301 	and.w	r3, r3, #1
 8002d4c:	2b01      	cmp	r3, #1
 8002d4e:	d107      	bne.n	8002d60 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f06f 0201 	mvn.w	r2, #1
 8002d58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	f7fd fdcc 	bl	80008f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	691b      	ldr	r3, [r3, #16]
 8002d66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d6a:	2b80      	cmp	r3, #128	; 0x80
 8002d6c:	d10e      	bne.n	8002d8c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	68db      	ldr	r3, [r3, #12]
 8002d74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d78:	2b80      	cmp	r3, #128	; 0x80
 8002d7a:	d107      	bne.n	8002d8c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002d84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	f000 f8c0 	bl	8002f0c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	691b      	ldr	r3, [r3, #16]
 8002d92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d96:	2b40      	cmp	r3, #64	; 0x40
 8002d98:	d10e      	bne.n	8002db8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	68db      	ldr	r3, [r3, #12]
 8002da0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002da4:	2b40      	cmp	r3, #64	; 0x40
 8002da6:	d107      	bne.n	8002db8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002db0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	f000 f838 	bl	8002e28 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	691b      	ldr	r3, [r3, #16]
 8002dbe:	f003 0320 	and.w	r3, r3, #32
 8002dc2:	2b20      	cmp	r3, #32
 8002dc4:	d10e      	bne.n	8002de4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	68db      	ldr	r3, [r3, #12]
 8002dcc:	f003 0320 	and.w	r3, r3, #32
 8002dd0:	2b20      	cmp	r3, #32
 8002dd2:	d107      	bne.n	8002de4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f06f 0220 	mvn.w	r2, #32
 8002ddc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002dde:	6878      	ldr	r0, [r7, #4]
 8002de0:	f000 f88a 	bl	8002ef8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002de4:	bf00      	nop
 8002de6:	3708      	adds	r7, #8
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}

08002dec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b083      	sub	sp, #12
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002df4:	bf00      	nop
 8002df6:	370c      	adds	r7, #12
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfe:	4770      	bx	lr

08002e00 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b083      	sub	sp, #12
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002e08:	bf00      	nop
 8002e0a:	370c      	adds	r7, #12
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e12:	4770      	bx	lr

08002e14 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b083      	sub	sp, #12
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002e1c:	bf00      	nop
 8002e1e:	370c      	adds	r7, #12
 8002e20:	46bd      	mov	sp, r7
 8002e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e26:	4770      	bx	lr

08002e28 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b083      	sub	sp, #12
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002e30:	bf00      	nop
 8002e32:	370c      	adds	r7, #12
 8002e34:	46bd      	mov	sp, r7
 8002e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3a:	4770      	bx	lr

08002e3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b085      	sub	sp, #20
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
 8002e44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	4a26      	ldr	r2, [pc, #152]	; (8002ee8 <TIM_Base_SetConfig+0xac>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d003      	beq.n	8002e5c <TIM_Base_SetConfig+0x20>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	4a25      	ldr	r2, [pc, #148]	; (8002eec <TIM_Base_SetConfig+0xb0>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d108      	bne.n	8002e6e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	68fa      	ldr	r2, [r7, #12]
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	4a1d      	ldr	r2, [pc, #116]	; (8002ee8 <TIM_Base_SetConfig+0xac>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d00b      	beq.n	8002e8e <TIM_Base_SetConfig+0x52>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	4a1c      	ldr	r2, [pc, #112]	; (8002eec <TIM_Base_SetConfig+0xb0>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d007      	beq.n	8002e8e <TIM_Base_SetConfig+0x52>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	4a1b      	ldr	r2, [pc, #108]	; (8002ef0 <TIM_Base_SetConfig+0xb4>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d003      	beq.n	8002e8e <TIM_Base_SetConfig+0x52>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	4a1a      	ldr	r2, [pc, #104]	; (8002ef4 <TIM_Base_SetConfig+0xb8>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d108      	bne.n	8002ea0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	68db      	ldr	r3, [r3, #12]
 8002e9a:	68fa      	ldr	r2, [r7, #12]
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	695b      	ldr	r3, [r3, #20]
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	68fa      	ldr	r2, [r7, #12]
 8002eb2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	689a      	ldr	r2, [r3, #8]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	4a08      	ldr	r2, [pc, #32]	; (8002ee8 <TIM_Base_SetConfig+0xac>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d103      	bne.n	8002ed4 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	691a      	ldr	r2, [r3, #16]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	615a      	str	r2, [r3, #20]
}
 8002eda:	bf00      	nop
 8002edc:	3714      	adds	r7, #20
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee4:	4770      	bx	lr
 8002ee6:	bf00      	nop
 8002ee8:	40010000 	.word	0x40010000
 8002eec:	40000c00 	.word	0x40000c00
 8002ef0:	40014000 	.word	0x40014000
 8002ef4:	40014800 	.word	0x40014800

08002ef8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b083      	sub	sp, #12
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002f00:	bf00      	nop
 8002f02:	370c      	adds	r7, #12
 8002f04:	46bd      	mov	sp, r7
 8002f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0a:	4770      	bx	lr

08002f0c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b083      	sub	sp, #12
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002f14:	bf00      	nop
 8002f16:	370c      	adds	r7, #12
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1e:	4770      	bx	lr

08002f20 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b082      	sub	sp, #8
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d101      	bne.n	8002f32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e03f      	b.n	8002fb2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f38:	b2db      	uxtb	r3, r3
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d106      	bne.n	8002f4c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2200      	movs	r2, #0
 8002f42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	f7fe f96a 	bl	8001220 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2224      	movs	r2, #36	; 0x24
 8002f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	68da      	ldr	r2, [r3, #12]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f62:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002f64:	6878      	ldr	r0, [r7, #4]
 8002f66:	f000 f929 	bl	80031bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	691a      	ldr	r2, [r3, #16]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002f78:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	695a      	ldr	r2, [r3, #20]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f88:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	68da      	ldr	r2, [r3, #12]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f98:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2220      	movs	r2, #32
 8002fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2220      	movs	r2, #32
 8002fac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002fb0:	2300      	movs	r3, #0
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3708      	adds	r7, #8
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}

08002fba <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fba:	b580      	push	{r7, lr}
 8002fbc:	b08a      	sub	sp, #40	; 0x28
 8002fbe:	af02      	add	r7, sp, #8
 8002fc0:	60f8      	str	r0, [r7, #12]
 8002fc2:	60b9      	str	r1, [r7, #8]
 8002fc4:	603b      	str	r3, [r7, #0]
 8002fc6:	4613      	mov	r3, r2
 8002fc8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fd4:	b2db      	uxtb	r3, r3
 8002fd6:	2b20      	cmp	r3, #32
 8002fd8:	d17c      	bne.n	80030d4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d002      	beq.n	8002fe6 <HAL_UART_Transmit+0x2c>
 8002fe0:	88fb      	ldrh	r3, [r7, #6]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d101      	bne.n	8002fea <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e075      	b.n	80030d6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d101      	bne.n	8002ff8 <HAL_UART_Transmit+0x3e>
 8002ff4:	2302      	movs	r3, #2
 8002ff6:	e06e      	b.n	80030d6 <HAL_UART_Transmit+0x11c>
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2200      	movs	r2, #0
 8003004:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2221      	movs	r2, #33	; 0x21
 800300a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800300e:	f7fe f9af 	bl	8001370 <HAL_GetTick>
 8003012:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	88fa      	ldrh	r2, [r7, #6]
 8003018:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	88fa      	ldrh	r2, [r7, #6]
 800301e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003028:	d108      	bne.n	800303c <HAL_UART_Transmit+0x82>
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	691b      	ldr	r3, [r3, #16]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d104      	bne.n	800303c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003032:	2300      	movs	r3, #0
 8003034:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	61bb      	str	r3, [r7, #24]
 800303a:	e003      	b.n	8003044 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003040:	2300      	movs	r3, #0
 8003042:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2200      	movs	r2, #0
 8003048:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800304c:	e02a      	b.n	80030a4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	9300      	str	r3, [sp, #0]
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	2200      	movs	r2, #0
 8003056:	2180      	movs	r1, #128	; 0x80
 8003058:	68f8      	ldr	r0, [r7, #12]
 800305a:	f000 f840 	bl	80030de <UART_WaitOnFlagUntilTimeout>
 800305e:	4603      	mov	r3, r0
 8003060:	2b00      	cmp	r3, #0
 8003062:	d001      	beq.n	8003068 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003064:	2303      	movs	r3, #3
 8003066:	e036      	b.n	80030d6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003068:	69fb      	ldr	r3, [r7, #28]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d10b      	bne.n	8003086 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800306e:	69bb      	ldr	r3, [r7, #24]
 8003070:	881b      	ldrh	r3, [r3, #0]
 8003072:	461a      	mov	r2, r3
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800307c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800307e:	69bb      	ldr	r3, [r7, #24]
 8003080:	3302      	adds	r3, #2
 8003082:	61bb      	str	r3, [r7, #24]
 8003084:	e007      	b.n	8003096 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003086:	69fb      	ldr	r3, [r7, #28]
 8003088:	781a      	ldrb	r2, [r3, #0]
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003090:	69fb      	ldr	r3, [r7, #28]
 8003092:	3301      	adds	r3, #1
 8003094:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800309a:	b29b      	uxth	r3, r3
 800309c:	3b01      	subs	r3, #1
 800309e:	b29a      	uxth	r2, r3
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80030a8:	b29b      	uxth	r3, r3
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d1cf      	bne.n	800304e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	9300      	str	r3, [sp, #0]
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	2200      	movs	r2, #0
 80030b6:	2140      	movs	r1, #64	; 0x40
 80030b8:	68f8      	ldr	r0, [r7, #12]
 80030ba:	f000 f810 	bl	80030de <UART_WaitOnFlagUntilTimeout>
 80030be:	4603      	mov	r3, r0
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d001      	beq.n	80030c8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80030c4:	2303      	movs	r3, #3
 80030c6:	e006      	b.n	80030d6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2220      	movs	r2, #32
 80030cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80030d0:	2300      	movs	r3, #0
 80030d2:	e000      	b.n	80030d6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80030d4:	2302      	movs	r3, #2
  }
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3720      	adds	r7, #32
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}

080030de <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80030de:	b580      	push	{r7, lr}
 80030e0:	b090      	sub	sp, #64	; 0x40
 80030e2:	af00      	add	r7, sp, #0
 80030e4:	60f8      	str	r0, [r7, #12]
 80030e6:	60b9      	str	r1, [r7, #8]
 80030e8:	603b      	str	r3, [r7, #0]
 80030ea:	4613      	mov	r3, r2
 80030ec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030ee:	e050      	b.n	8003192 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80030f6:	d04c      	beq.n	8003192 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80030f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d007      	beq.n	800310e <UART_WaitOnFlagUntilTimeout+0x30>
 80030fe:	f7fe f937 	bl	8001370 <HAL_GetTick>
 8003102:	4602      	mov	r2, r0
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	1ad3      	subs	r3, r2, r3
 8003108:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800310a:	429a      	cmp	r2, r3
 800310c:	d241      	bcs.n	8003192 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	330c      	adds	r3, #12
 8003114:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003118:	e853 3f00 	ldrex	r3, [r3]
 800311c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800311e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003120:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003124:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	330c      	adds	r3, #12
 800312c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800312e:	637a      	str	r2, [r7, #52]	; 0x34
 8003130:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003132:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003134:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003136:	e841 2300 	strex	r3, r2, [r1]
 800313a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800313c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800313e:	2b00      	cmp	r3, #0
 8003140:	d1e5      	bne.n	800310e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	3314      	adds	r3, #20
 8003148:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	e853 3f00 	ldrex	r3, [r3]
 8003150:	613b      	str	r3, [r7, #16]
   return(result);
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	f023 0301 	bic.w	r3, r3, #1
 8003158:	63bb      	str	r3, [r7, #56]	; 0x38
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	3314      	adds	r3, #20
 8003160:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003162:	623a      	str	r2, [r7, #32]
 8003164:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003166:	69f9      	ldr	r1, [r7, #28]
 8003168:	6a3a      	ldr	r2, [r7, #32]
 800316a:	e841 2300 	strex	r3, r2, [r1]
 800316e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003170:	69bb      	ldr	r3, [r7, #24]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d1e5      	bne.n	8003142 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2220      	movs	r2, #32
 800317a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	2220      	movs	r2, #32
 8003182:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2200      	movs	r2, #0
 800318a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800318e:	2303      	movs	r3, #3
 8003190:	e00f      	b.n	80031b2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	4013      	ands	r3, r2
 800319c:	68ba      	ldr	r2, [r7, #8]
 800319e:	429a      	cmp	r2, r3
 80031a0:	bf0c      	ite	eq
 80031a2:	2301      	moveq	r3, #1
 80031a4:	2300      	movne	r3, #0
 80031a6:	b2db      	uxtb	r3, r3
 80031a8:	461a      	mov	r2, r3
 80031aa:	79fb      	ldrb	r3, [r7, #7]
 80031ac:	429a      	cmp	r2, r3
 80031ae:	d09f      	beq.n	80030f0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80031b0:	2300      	movs	r3, #0
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3740      	adds	r7, #64	; 0x40
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}
	...

080031bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80031bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031c0:	b0c0      	sub	sp, #256	; 0x100
 80031c2:	af00      	add	r7, sp, #0
 80031c4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	691b      	ldr	r3, [r3, #16]
 80031d0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80031d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031d8:	68d9      	ldr	r1, [r3, #12]
 80031da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	ea40 0301 	orr.w	r3, r0, r1
 80031e4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80031e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031ea:	689a      	ldr	r2, [r3, #8]
 80031ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031f0:	691b      	ldr	r3, [r3, #16]
 80031f2:	431a      	orrs	r2, r3
 80031f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031f8:	695b      	ldr	r3, [r3, #20]
 80031fa:	431a      	orrs	r2, r3
 80031fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003200:	69db      	ldr	r3, [r3, #28]
 8003202:	4313      	orrs	r3, r2
 8003204:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003208:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	68db      	ldr	r3, [r3, #12]
 8003210:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003214:	f021 010c 	bic.w	r1, r1, #12
 8003218:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003222:	430b      	orrs	r3, r1
 8003224:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003226:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	695b      	ldr	r3, [r3, #20]
 800322e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003232:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003236:	6999      	ldr	r1, [r3, #24]
 8003238:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800323c:	681a      	ldr	r2, [r3, #0]
 800323e:	ea40 0301 	orr.w	r3, r0, r1
 8003242:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003244:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	4b8f      	ldr	r3, [pc, #572]	; (8003488 <UART_SetConfig+0x2cc>)
 800324c:	429a      	cmp	r2, r3
 800324e:	d005      	beq.n	800325c <UART_SetConfig+0xa0>
 8003250:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	4b8d      	ldr	r3, [pc, #564]	; (800348c <UART_SetConfig+0x2d0>)
 8003258:	429a      	cmp	r2, r3
 800325a:	d104      	bne.n	8003266 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800325c:	f7ff f8d6 	bl	800240c <HAL_RCC_GetPCLK2Freq>
 8003260:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003264:	e003      	b.n	800326e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003266:	f7ff f8bd 	bl	80023e4 <HAL_RCC_GetPCLK1Freq>
 800326a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800326e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003272:	69db      	ldr	r3, [r3, #28]
 8003274:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003278:	f040 810c 	bne.w	8003494 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800327c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003280:	2200      	movs	r2, #0
 8003282:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003286:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800328a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800328e:	4622      	mov	r2, r4
 8003290:	462b      	mov	r3, r5
 8003292:	1891      	adds	r1, r2, r2
 8003294:	65b9      	str	r1, [r7, #88]	; 0x58
 8003296:	415b      	adcs	r3, r3
 8003298:	65fb      	str	r3, [r7, #92]	; 0x5c
 800329a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800329e:	4621      	mov	r1, r4
 80032a0:	eb12 0801 	adds.w	r8, r2, r1
 80032a4:	4629      	mov	r1, r5
 80032a6:	eb43 0901 	adc.w	r9, r3, r1
 80032aa:	f04f 0200 	mov.w	r2, #0
 80032ae:	f04f 0300 	mov.w	r3, #0
 80032b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80032b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80032ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80032be:	4690      	mov	r8, r2
 80032c0:	4699      	mov	r9, r3
 80032c2:	4623      	mov	r3, r4
 80032c4:	eb18 0303 	adds.w	r3, r8, r3
 80032c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80032cc:	462b      	mov	r3, r5
 80032ce:	eb49 0303 	adc.w	r3, r9, r3
 80032d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80032d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	2200      	movs	r2, #0
 80032de:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80032e2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80032e6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80032ea:	460b      	mov	r3, r1
 80032ec:	18db      	adds	r3, r3, r3
 80032ee:	653b      	str	r3, [r7, #80]	; 0x50
 80032f0:	4613      	mov	r3, r2
 80032f2:	eb42 0303 	adc.w	r3, r2, r3
 80032f6:	657b      	str	r3, [r7, #84]	; 0x54
 80032f8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80032fc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003300:	f7fc ffd6 	bl	80002b0 <__aeabi_uldivmod>
 8003304:	4602      	mov	r2, r0
 8003306:	460b      	mov	r3, r1
 8003308:	4b61      	ldr	r3, [pc, #388]	; (8003490 <UART_SetConfig+0x2d4>)
 800330a:	fba3 2302 	umull	r2, r3, r3, r2
 800330e:	095b      	lsrs	r3, r3, #5
 8003310:	011c      	lsls	r4, r3, #4
 8003312:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003316:	2200      	movs	r2, #0
 8003318:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800331c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003320:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003324:	4642      	mov	r2, r8
 8003326:	464b      	mov	r3, r9
 8003328:	1891      	adds	r1, r2, r2
 800332a:	64b9      	str	r1, [r7, #72]	; 0x48
 800332c:	415b      	adcs	r3, r3
 800332e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003330:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003334:	4641      	mov	r1, r8
 8003336:	eb12 0a01 	adds.w	sl, r2, r1
 800333a:	4649      	mov	r1, r9
 800333c:	eb43 0b01 	adc.w	fp, r3, r1
 8003340:	f04f 0200 	mov.w	r2, #0
 8003344:	f04f 0300 	mov.w	r3, #0
 8003348:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800334c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003350:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003354:	4692      	mov	sl, r2
 8003356:	469b      	mov	fp, r3
 8003358:	4643      	mov	r3, r8
 800335a:	eb1a 0303 	adds.w	r3, sl, r3
 800335e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003362:	464b      	mov	r3, r9
 8003364:	eb4b 0303 	adc.w	r3, fp, r3
 8003368:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800336c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	2200      	movs	r2, #0
 8003374:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003378:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800337c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003380:	460b      	mov	r3, r1
 8003382:	18db      	adds	r3, r3, r3
 8003384:	643b      	str	r3, [r7, #64]	; 0x40
 8003386:	4613      	mov	r3, r2
 8003388:	eb42 0303 	adc.w	r3, r2, r3
 800338c:	647b      	str	r3, [r7, #68]	; 0x44
 800338e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003392:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003396:	f7fc ff8b 	bl	80002b0 <__aeabi_uldivmod>
 800339a:	4602      	mov	r2, r0
 800339c:	460b      	mov	r3, r1
 800339e:	4611      	mov	r1, r2
 80033a0:	4b3b      	ldr	r3, [pc, #236]	; (8003490 <UART_SetConfig+0x2d4>)
 80033a2:	fba3 2301 	umull	r2, r3, r3, r1
 80033a6:	095b      	lsrs	r3, r3, #5
 80033a8:	2264      	movs	r2, #100	; 0x64
 80033aa:	fb02 f303 	mul.w	r3, r2, r3
 80033ae:	1acb      	subs	r3, r1, r3
 80033b0:	00db      	lsls	r3, r3, #3
 80033b2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80033b6:	4b36      	ldr	r3, [pc, #216]	; (8003490 <UART_SetConfig+0x2d4>)
 80033b8:	fba3 2302 	umull	r2, r3, r3, r2
 80033bc:	095b      	lsrs	r3, r3, #5
 80033be:	005b      	lsls	r3, r3, #1
 80033c0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80033c4:	441c      	add	r4, r3
 80033c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80033ca:	2200      	movs	r2, #0
 80033cc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80033d0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80033d4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80033d8:	4642      	mov	r2, r8
 80033da:	464b      	mov	r3, r9
 80033dc:	1891      	adds	r1, r2, r2
 80033de:	63b9      	str	r1, [r7, #56]	; 0x38
 80033e0:	415b      	adcs	r3, r3
 80033e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80033e4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80033e8:	4641      	mov	r1, r8
 80033ea:	1851      	adds	r1, r2, r1
 80033ec:	6339      	str	r1, [r7, #48]	; 0x30
 80033ee:	4649      	mov	r1, r9
 80033f0:	414b      	adcs	r3, r1
 80033f2:	637b      	str	r3, [r7, #52]	; 0x34
 80033f4:	f04f 0200 	mov.w	r2, #0
 80033f8:	f04f 0300 	mov.w	r3, #0
 80033fc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003400:	4659      	mov	r1, fp
 8003402:	00cb      	lsls	r3, r1, #3
 8003404:	4651      	mov	r1, sl
 8003406:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800340a:	4651      	mov	r1, sl
 800340c:	00ca      	lsls	r2, r1, #3
 800340e:	4610      	mov	r0, r2
 8003410:	4619      	mov	r1, r3
 8003412:	4603      	mov	r3, r0
 8003414:	4642      	mov	r2, r8
 8003416:	189b      	adds	r3, r3, r2
 8003418:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800341c:	464b      	mov	r3, r9
 800341e:	460a      	mov	r2, r1
 8003420:	eb42 0303 	adc.w	r3, r2, r3
 8003424:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003428:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	2200      	movs	r2, #0
 8003430:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003434:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003438:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800343c:	460b      	mov	r3, r1
 800343e:	18db      	adds	r3, r3, r3
 8003440:	62bb      	str	r3, [r7, #40]	; 0x28
 8003442:	4613      	mov	r3, r2
 8003444:	eb42 0303 	adc.w	r3, r2, r3
 8003448:	62fb      	str	r3, [r7, #44]	; 0x2c
 800344a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800344e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003452:	f7fc ff2d 	bl	80002b0 <__aeabi_uldivmod>
 8003456:	4602      	mov	r2, r0
 8003458:	460b      	mov	r3, r1
 800345a:	4b0d      	ldr	r3, [pc, #52]	; (8003490 <UART_SetConfig+0x2d4>)
 800345c:	fba3 1302 	umull	r1, r3, r3, r2
 8003460:	095b      	lsrs	r3, r3, #5
 8003462:	2164      	movs	r1, #100	; 0x64
 8003464:	fb01 f303 	mul.w	r3, r1, r3
 8003468:	1ad3      	subs	r3, r2, r3
 800346a:	00db      	lsls	r3, r3, #3
 800346c:	3332      	adds	r3, #50	; 0x32
 800346e:	4a08      	ldr	r2, [pc, #32]	; (8003490 <UART_SetConfig+0x2d4>)
 8003470:	fba2 2303 	umull	r2, r3, r2, r3
 8003474:	095b      	lsrs	r3, r3, #5
 8003476:	f003 0207 	and.w	r2, r3, #7
 800347a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4422      	add	r2, r4
 8003482:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003484:	e105      	b.n	8003692 <UART_SetConfig+0x4d6>
 8003486:	bf00      	nop
 8003488:	40011000 	.word	0x40011000
 800348c:	40011400 	.word	0x40011400
 8003490:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003494:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003498:	2200      	movs	r2, #0
 800349a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800349e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80034a2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80034a6:	4642      	mov	r2, r8
 80034a8:	464b      	mov	r3, r9
 80034aa:	1891      	adds	r1, r2, r2
 80034ac:	6239      	str	r1, [r7, #32]
 80034ae:	415b      	adcs	r3, r3
 80034b0:	627b      	str	r3, [r7, #36]	; 0x24
 80034b2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80034b6:	4641      	mov	r1, r8
 80034b8:	1854      	adds	r4, r2, r1
 80034ba:	4649      	mov	r1, r9
 80034bc:	eb43 0501 	adc.w	r5, r3, r1
 80034c0:	f04f 0200 	mov.w	r2, #0
 80034c4:	f04f 0300 	mov.w	r3, #0
 80034c8:	00eb      	lsls	r3, r5, #3
 80034ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80034ce:	00e2      	lsls	r2, r4, #3
 80034d0:	4614      	mov	r4, r2
 80034d2:	461d      	mov	r5, r3
 80034d4:	4643      	mov	r3, r8
 80034d6:	18e3      	adds	r3, r4, r3
 80034d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80034dc:	464b      	mov	r3, r9
 80034de:	eb45 0303 	adc.w	r3, r5, r3
 80034e2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80034e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	2200      	movs	r2, #0
 80034ee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80034f2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80034f6:	f04f 0200 	mov.w	r2, #0
 80034fa:	f04f 0300 	mov.w	r3, #0
 80034fe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003502:	4629      	mov	r1, r5
 8003504:	008b      	lsls	r3, r1, #2
 8003506:	4621      	mov	r1, r4
 8003508:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800350c:	4621      	mov	r1, r4
 800350e:	008a      	lsls	r2, r1, #2
 8003510:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003514:	f7fc fecc 	bl	80002b0 <__aeabi_uldivmod>
 8003518:	4602      	mov	r2, r0
 800351a:	460b      	mov	r3, r1
 800351c:	4b60      	ldr	r3, [pc, #384]	; (80036a0 <UART_SetConfig+0x4e4>)
 800351e:	fba3 2302 	umull	r2, r3, r3, r2
 8003522:	095b      	lsrs	r3, r3, #5
 8003524:	011c      	lsls	r4, r3, #4
 8003526:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800352a:	2200      	movs	r2, #0
 800352c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003530:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003534:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003538:	4642      	mov	r2, r8
 800353a:	464b      	mov	r3, r9
 800353c:	1891      	adds	r1, r2, r2
 800353e:	61b9      	str	r1, [r7, #24]
 8003540:	415b      	adcs	r3, r3
 8003542:	61fb      	str	r3, [r7, #28]
 8003544:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003548:	4641      	mov	r1, r8
 800354a:	1851      	adds	r1, r2, r1
 800354c:	6139      	str	r1, [r7, #16]
 800354e:	4649      	mov	r1, r9
 8003550:	414b      	adcs	r3, r1
 8003552:	617b      	str	r3, [r7, #20]
 8003554:	f04f 0200 	mov.w	r2, #0
 8003558:	f04f 0300 	mov.w	r3, #0
 800355c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003560:	4659      	mov	r1, fp
 8003562:	00cb      	lsls	r3, r1, #3
 8003564:	4651      	mov	r1, sl
 8003566:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800356a:	4651      	mov	r1, sl
 800356c:	00ca      	lsls	r2, r1, #3
 800356e:	4610      	mov	r0, r2
 8003570:	4619      	mov	r1, r3
 8003572:	4603      	mov	r3, r0
 8003574:	4642      	mov	r2, r8
 8003576:	189b      	adds	r3, r3, r2
 8003578:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800357c:	464b      	mov	r3, r9
 800357e:	460a      	mov	r2, r1
 8003580:	eb42 0303 	adc.w	r3, r2, r3
 8003584:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003588:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	2200      	movs	r2, #0
 8003590:	67bb      	str	r3, [r7, #120]	; 0x78
 8003592:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003594:	f04f 0200 	mov.w	r2, #0
 8003598:	f04f 0300 	mov.w	r3, #0
 800359c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80035a0:	4649      	mov	r1, r9
 80035a2:	008b      	lsls	r3, r1, #2
 80035a4:	4641      	mov	r1, r8
 80035a6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80035aa:	4641      	mov	r1, r8
 80035ac:	008a      	lsls	r2, r1, #2
 80035ae:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80035b2:	f7fc fe7d 	bl	80002b0 <__aeabi_uldivmod>
 80035b6:	4602      	mov	r2, r0
 80035b8:	460b      	mov	r3, r1
 80035ba:	4b39      	ldr	r3, [pc, #228]	; (80036a0 <UART_SetConfig+0x4e4>)
 80035bc:	fba3 1302 	umull	r1, r3, r3, r2
 80035c0:	095b      	lsrs	r3, r3, #5
 80035c2:	2164      	movs	r1, #100	; 0x64
 80035c4:	fb01 f303 	mul.w	r3, r1, r3
 80035c8:	1ad3      	subs	r3, r2, r3
 80035ca:	011b      	lsls	r3, r3, #4
 80035cc:	3332      	adds	r3, #50	; 0x32
 80035ce:	4a34      	ldr	r2, [pc, #208]	; (80036a0 <UART_SetConfig+0x4e4>)
 80035d0:	fba2 2303 	umull	r2, r3, r2, r3
 80035d4:	095b      	lsrs	r3, r3, #5
 80035d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80035da:	441c      	add	r4, r3
 80035dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80035e0:	2200      	movs	r2, #0
 80035e2:	673b      	str	r3, [r7, #112]	; 0x70
 80035e4:	677a      	str	r2, [r7, #116]	; 0x74
 80035e6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80035ea:	4642      	mov	r2, r8
 80035ec:	464b      	mov	r3, r9
 80035ee:	1891      	adds	r1, r2, r2
 80035f0:	60b9      	str	r1, [r7, #8]
 80035f2:	415b      	adcs	r3, r3
 80035f4:	60fb      	str	r3, [r7, #12]
 80035f6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80035fa:	4641      	mov	r1, r8
 80035fc:	1851      	adds	r1, r2, r1
 80035fe:	6039      	str	r1, [r7, #0]
 8003600:	4649      	mov	r1, r9
 8003602:	414b      	adcs	r3, r1
 8003604:	607b      	str	r3, [r7, #4]
 8003606:	f04f 0200 	mov.w	r2, #0
 800360a:	f04f 0300 	mov.w	r3, #0
 800360e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003612:	4659      	mov	r1, fp
 8003614:	00cb      	lsls	r3, r1, #3
 8003616:	4651      	mov	r1, sl
 8003618:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800361c:	4651      	mov	r1, sl
 800361e:	00ca      	lsls	r2, r1, #3
 8003620:	4610      	mov	r0, r2
 8003622:	4619      	mov	r1, r3
 8003624:	4603      	mov	r3, r0
 8003626:	4642      	mov	r2, r8
 8003628:	189b      	adds	r3, r3, r2
 800362a:	66bb      	str	r3, [r7, #104]	; 0x68
 800362c:	464b      	mov	r3, r9
 800362e:	460a      	mov	r2, r1
 8003630:	eb42 0303 	adc.w	r3, r2, r3
 8003634:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003636:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	2200      	movs	r2, #0
 800363e:	663b      	str	r3, [r7, #96]	; 0x60
 8003640:	667a      	str	r2, [r7, #100]	; 0x64
 8003642:	f04f 0200 	mov.w	r2, #0
 8003646:	f04f 0300 	mov.w	r3, #0
 800364a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800364e:	4649      	mov	r1, r9
 8003650:	008b      	lsls	r3, r1, #2
 8003652:	4641      	mov	r1, r8
 8003654:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003658:	4641      	mov	r1, r8
 800365a:	008a      	lsls	r2, r1, #2
 800365c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003660:	f7fc fe26 	bl	80002b0 <__aeabi_uldivmod>
 8003664:	4602      	mov	r2, r0
 8003666:	460b      	mov	r3, r1
 8003668:	4b0d      	ldr	r3, [pc, #52]	; (80036a0 <UART_SetConfig+0x4e4>)
 800366a:	fba3 1302 	umull	r1, r3, r3, r2
 800366e:	095b      	lsrs	r3, r3, #5
 8003670:	2164      	movs	r1, #100	; 0x64
 8003672:	fb01 f303 	mul.w	r3, r1, r3
 8003676:	1ad3      	subs	r3, r2, r3
 8003678:	011b      	lsls	r3, r3, #4
 800367a:	3332      	adds	r3, #50	; 0x32
 800367c:	4a08      	ldr	r2, [pc, #32]	; (80036a0 <UART_SetConfig+0x4e4>)
 800367e:	fba2 2303 	umull	r2, r3, r2, r3
 8003682:	095b      	lsrs	r3, r3, #5
 8003684:	f003 020f 	and.w	r2, r3, #15
 8003688:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4422      	add	r2, r4
 8003690:	609a      	str	r2, [r3, #8]
}
 8003692:	bf00      	nop
 8003694:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003698:	46bd      	mov	sp, r7
 800369a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800369e:	bf00      	nop
 80036a0:	51eb851f 	.word	0x51eb851f

080036a4 <__NVIC_SetPriority>:
{
 80036a4:	b480      	push	{r7}
 80036a6:	b083      	sub	sp, #12
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	4603      	mov	r3, r0
 80036ac:	6039      	str	r1, [r7, #0]
 80036ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	db0a      	blt.n	80036ce <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	b2da      	uxtb	r2, r3
 80036bc:	490c      	ldr	r1, [pc, #48]	; (80036f0 <__NVIC_SetPriority+0x4c>)
 80036be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036c2:	0112      	lsls	r2, r2, #4
 80036c4:	b2d2      	uxtb	r2, r2
 80036c6:	440b      	add	r3, r1
 80036c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80036cc:	e00a      	b.n	80036e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	b2da      	uxtb	r2, r3
 80036d2:	4908      	ldr	r1, [pc, #32]	; (80036f4 <__NVIC_SetPriority+0x50>)
 80036d4:	79fb      	ldrb	r3, [r7, #7]
 80036d6:	f003 030f 	and.w	r3, r3, #15
 80036da:	3b04      	subs	r3, #4
 80036dc:	0112      	lsls	r2, r2, #4
 80036de:	b2d2      	uxtb	r2, r2
 80036e0:	440b      	add	r3, r1
 80036e2:	761a      	strb	r2, [r3, #24]
}
 80036e4:	bf00      	nop
 80036e6:	370c      	adds	r7, #12
 80036e8:	46bd      	mov	sp, r7
 80036ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ee:	4770      	bx	lr
 80036f0:	e000e100 	.word	0xe000e100
 80036f4:	e000ed00 	.word	0xe000ed00

080036f8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80036f8:	b580      	push	{r7, lr}
 80036fa:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80036fc:	4b05      	ldr	r3, [pc, #20]	; (8003714 <SysTick_Handler+0x1c>)
 80036fe:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003700:	f002 f814 	bl	800572c <xTaskGetSchedulerState>
 8003704:	4603      	mov	r3, r0
 8003706:	2b01      	cmp	r3, #1
 8003708:	d001      	beq.n	800370e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800370a:	f002 ffed 	bl	80066e8 <xPortSysTickHandler>
  }
}
 800370e:	bf00      	nop
 8003710:	bd80      	pop	{r7, pc}
 8003712:	bf00      	nop
 8003714:	e000e010 	.word	0xe000e010

08003718 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003718:	b580      	push	{r7, lr}
 800371a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800371c:	2100      	movs	r1, #0
 800371e:	f06f 0004 	mvn.w	r0, #4
 8003722:	f7ff ffbf 	bl	80036a4 <__NVIC_SetPriority>
#endif
}
 8003726:	bf00      	nop
 8003728:	bd80      	pop	{r7, pc}
	...

0800372c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800372c:	b480      	push	{r7}
 800372e:	b083      	sub	sp, #12
 8003730:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003732:	f3ef 8305 	mrs	r3, IPSR
 8003736:	603b      	str	r3, [r7, #0]
  return(result);
 8003738:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800373a:	2b00      	cmp	r3, #0
 800373c:	d003      	beq.n	8003746 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800373e:	f06f 0305 	mvn.w	r3, #5
 8003742:	607b      	str	r3, [r7, #4]
 8003744:	e00c      	b.n	8003760 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003746:	4b0a      	ldr	r3, [pc, #40]	; (8003770 <osKernelInitialize+0x44>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d105      	bne.n	800375a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800374e:	4b08      	ldr	r3, [pc, #32]	; (8003770 <osKernelInitialize+0x44>)
 8003750:	2201      	movs	r2, #1
 8003752:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003754:	2300      	movs	r3, #0
 8003756:	607b      	str	r3, [r7, #4]
 8003758:	e002      	b.n	8003760 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800375a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800375e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003760:	687b      	ldr	r3, [r7, #4]
}
 8003762:	4618      	mov	r0, r3
 8003764:	370c      	adds	r7, #12
 8003766:	46bd      	mov	sp, r7
 8003768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376c:	4770      	bx	lr
 800376e:	bf00      	nop
 8003770:	200002a0 	.word	0x200002a0

08003774 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003774:	b580      	push	{r7, lr}
 8003776:	b082      	sub	sp, #8
 8003778:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800377a:	f3ef 8305 	mrs	r3, IPSR
 800377e:	603b      	str	r3, [r7, #0]
  return(result);
 8003780:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003782:	2b00      	cmp	r3, #0
 8003784:	d003      	beq.n	800378e <osKernelStart+0x1a>
    stat = osErrorISR;
 8003786:	f06f 0305 	mvn.w	r3, #5
 800378a:	607b      	str	r3, [r7, #4]
 800378c:	e010      	b.n	80037b0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800378e:	4b0b      	ldr	r3, [pc, #44]	; (80037bc <osKernelStart+0x48>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	2b01      	cmp	r3, #1
 8003794:	d109      	bne.n	80037aa <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003796:	f7ff ffbf 	bl	8003718 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800379a:	4b08      	ldr	r3, [pc, #32]	; (80037bc <osKernelStart+0x48>)
 800379c:	2202      	movs	r2, #2
 800379e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80037a0:	f001 fb7c 	bl	8004e9c <vTaskStartScheduler>
      stat = osOK;
 80037a4:	2300      	movs	r3, #0
 80037a6:	607b      	str	r3, [r7, #4]
 80037a8:	e002      	b.n	80037b0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80037aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80037ae:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80037b0:	687b      	ldr	r3, [r7, #4]
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	3708      	adds	r7, #8
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}
 80037ba:	bf00      	nop
 80037bc:	200002a0 	.word	0x200002a0

080037c0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b08e      	sub	sp, #56	; 0x38
 80037c4:	af04      	add	r7, sp, #16
 80037c6:	60f8      	str	r0, [r7, #12]
 80037c8:	60b9      	str	r1, [r7, #8]
 80037ca:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80037cc:	2300      	movs	r3, #0
 80037ce:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80037d0:	f3ef 8305 	mrs	r3, IPSR
 80037d4:	617b      	str	r3, [r7, #20]
  return(result);
 80037d6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d17e      	bne.n	80038da <osThreadNew+0x11a>
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d07b      	beq.n	80038da <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80037e2:	2380      	movs	r3, #128	; 0x80
 80037e4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80037e6:	2318      	movs	r3, #24
 80037e8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80037ea:	2300      	movs	r3, #0
 80037ec:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80037ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80037f2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d045      	beq.n	8003886 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d002      	beq.n	8003808 <osThreadNew+0x48>
        name = attr->name;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	699b      	ldr	r3, [r3, #24]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d002      	beq.n	8003816 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	699b      	ldr	r3, [r3, #24]
 8003814:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003816:	69fb      	ldr	r3, [r7, #28]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d008      	beq.n	800382e <osThreadNew+0x6e>
 800381c:	69fb      	ldr	r3, [r7, #28]
 800381e:	2b38      	cmp	r3, #56	; 0x38
 8003820:	d805      	bhi.n	800382e <osThreadNew+0x6e>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	f003 0301 	and.w	r3, r3, #1
 800382a:	2b00      	cmp	r3, #0
 800382c:	d001      	beq.n	8003832 <osThreadNew+0x72>
        return (NULL);
 800382e:	2300      	movs	r3, #0
 8003830:	e054      	b.n	80038dc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	695b      	ldr	r3, [r3, #20]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d003      	beq.n	8003842 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	695b      	ldr	r3, [r3, #20]
 800383e:	089b      	lsrs	r3, r3, #2
 8003840:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d00e      	beq.n	8003868 <osThreadNew+0xa8>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	68db      	ldr	r3, [r3, #12]
 800384e:	2b5b      	cmp	r3, #91	; 0x5b
 8003850:	d90a      	bls.n	8003868 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003856:	2b00      	cmp	r3, #0
 8003858:	d006      	beq.n	8003868 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	695b      	ldr	r3, [r3, #20]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d002      	beq.n	8003868 <osThreadNew+0xa8>
        mem = 1;
 8003862:	2301      	movs	r3, #1
 8003864:	61bb      	str	r3, [r7, #24]
 8003866:	e010      	b.n	800388a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d10c      	bne.n	800388a <osThreadNew+0xca>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	68db      	ldr	r3, [r3, #12]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d108      	bne.n	800388a <osThreadNew+0xca>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	691b      	ldr	r3, [r3, #16]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d104      	bne.n	800388a <osThreadNew+0xca>
          mem = 0;
 8003880:	2300      	movs	r3, #0
 8003882:	61bb      	str	r3, [r7, #24]
 8003884:	e001      	b.n	800388a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003886:	2300      	movs	r3, #0
 8003888:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800388a:	69bb      	ldr	r3, [r7, #24]
 800388c:	2b01      	cmp	r3, #1
 800388e:	d110      	bne.n	80038b2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003894:	687a      	ldr	r2, [r7, #4]
 8003896:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003898:	9202      	str	r2, [sp, #8]
 800389a:	9301      	str	r3, [sp, #4]
 800389c:	69fb      	ldr	r3, [r7, #28]
 800389e:	9300      	str	r3, [sp, #0]
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	6a3a      	ldr	r2, [r7, #32]
 80038a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80038a6:	68f8      	ldr	r0, [r7, #12]
 80038a8:	f001 f922 	bl	8004af0 <xTaskCreateStatic>
 80038ac:	4603      	mov	r3, r0
 80038ae:	613b      	str	r3, [r7, #16]
 80038b0:	e013      	b.n	80038da <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80038b2:	69bb      	ldr	r3, [r7, #24]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d110      	bne.n	80038da <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80038b8:	6a3b      	ldr	r3, [r7, #32]
 80038ba:	b29a      	uxth	r2, r3
 80038bc:	f107 0310 	add.w	r3, r7, #16
 80038c0:	9301      	str	r3, [sp, #4]
 80038c2:	69fb      	ldr	r3, [r7, #28]
 80038c4:	9300      	str	r3, [sp, #0]
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80038ca:	68f8      	ldr	r0, [r7, #12]
 80038cc:	f001 f96d 	bl	8004baa <xTaskCreate>
 80038d0:	4603      	mov	r3, r0
 80038d2:	2b01      	cmp	r3, #1
 80038d4:	d001      	beq.n	80038da <osThreadNew+0x11a>
            hTask = NULL;
 80038d6:	2300      	movs	r3, #0
 80038d8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80038da:	693b      	ldr	r3, [r7, #16]
}
 80038dc:	4618      	mov	r0, r3
 80038de:	3728      	adds	r7, #40	; 0x28
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}

080038e4 <osThreadFlagsSet>:
  return (count);
}
#endif /* (configUSE_OS2_THREAD_ENUMERATE == 1) */

#if (configUSE_OS2_THREAD_FLAGS == 1)
uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b088      	sub	sp, #32
 80038e8:	af02      	add	r7, sp, #8
 80038ea:	6078      	str	r0, [r7, #4]
 80038ec:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	617b      	str	r3, [r7, #20]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d002      	beq.n	80038fe <osThreadFlagsSet+0x1a>
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	da03      	bge.n	8003906 <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 80038fe:	f06f 0303 	mvn.w	r3, #3
 8003902:	60fb      	str	r3, [r7, #12]
 8003904:	e035      	b.n	8003972 <osThreadFlagsSet+0x8e>
  }
  else {
    rflags = (uint32_t)osError;
 8003906:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800390a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800390c:	f3ef 8305 	mrs	r3, IPSR
 8003910:	613b      	str	r3, [r7, #16]
  return(result);
 8003912:	693b      	ldr	r3, [r7, #16]

    if (IS_IRQ()) {
 8003914:	2b00      	cmp	r3, #0
 8003916:	d01f      	beq.n	8003958 <osThreadFlagsSet+0x74>
      yield = pdFALSE;
 8003918:	2300      	movs	r3, #0
 800391a:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 800391c:	f107 0308 	add.w	r3, r7, #8
 8003920:	9300      	str	r3, [sp, #0]
 8003922:	2300      	movs	r3, #0
 8003924:	2201      	movs	r2, #1
 8003926:	6839      	ldr	r1, [r7, #0]
 8003928:	6978      	ldr	r0, [r7, #20]
 800392a:	f002 f89d 	bl	8005a68 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 800392e:	f107 030c 	add.w	r3, r7, #12
 8003932:	2200      	movs	r2, #0
 8003934:	9200      	str	r2, [sp, #0]
 8003936:	2200      	movs	r2, #0
 8003938:	2100      	movs	r1, #0
 800393a:	6978      	ldr	r0, [r7, #20]
 800393c:	f002 f894 	bl	8005a68 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d015      	beq.n	8003972 <osThreadFlagsSet+0x8e>
 8003946:	4b0d      	ldr	r3, [pc, #52]	; (800397c <osThreadFlagsSet+0x98>)
 8003948:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800394c:	601a      	str	r2, [r3, #0]
 800394e:	f3bf 8f4f 	dsb	sy
 8003952:	f3bf 8f6f 	isb	sy
 8003956:	e00c      	b.n	8003972 <osThreadFlagsSet+0x8e>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 8003958:	2300      	movs	r3, #0
 800395a:	2201      	movs	r2, #1
 800395c:	6839      	ldr	r1, [r7, #0]
 800395e:	6978      	ldr	r0, [r7, #20]
 8003960:	f001 ffca 	bl	80058f8 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 8003964:	f107 030c 	add.w	r3, r7, #12
 8003968:	2200      	movs	r2, #0
 800396a:	2100      	movs	r1, #0
 800396c:	6978      	ldr	r0, [r7, #20]
 800396e:	f001 ffc3 	bl	80058f8 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 8003972:	68fb      	ldr	r3, [r7, #12]
}
 8003974:	4618      	mov	r0, r3
 8003976:	3718      	adds	r7, #24
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}
 800397c:	e000ed04 	.word	0xe000ed04

08003980 <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 8003980:	b580      	push	{r7, lr}
 8003982:	b08c      	sub	sp, #48	; 0x30
 8003984:	af00      	add	r7, sp, #0
 8003986:	60f8      	str	r0, [r7, #12]
 8003988:	60b9      	str	r1, [r7, #8]
 800398a:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800398c:	f3ef 8305 	mrs	r3, IPSR
 8003990:	617b      	str	r3, [r7, #20]
  return(result);
 8003992:	697b      	ldr	r3, [r7, #20]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 8003994:	2b00      	cmp	r3, #0
 8003996:	d003      	beq.n	80039a0 <osThreadFlagsWait+0x20>
    rflags = (uint32_t)osErrorISR;
 8003998:	f06f 0305 	mvn.w	r3, #5
 800399c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800399e:	e06b      	b.n	8003a78 <osThreadFlagsWait+0xf8>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	da03      	bge.n	80039ae <osThreadFlagsWait+0x2e>
    rflags = (uint32_t)osErrorParameter;
 80039a6:	f06f 0303 	mvn.w	r3, #3
 80039aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80039ac:	e064      	b.n	8003a78 <osThreadFlagsWait+0xf8>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	f003 0302 	and.w	r3, r3, #2
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d002      	beq.n	80039be <osThreadFlagsWait+0x3e>
      clear = 0U;
 80039b8:	2300      	movs	r3, #0
 80039ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80039bc:	e001      	b.n	80039c2 <osThreadFlagsWait+0x42>
    } else {
      clear = flags;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    rflags = 0U;
 80039c2:	2300      	movs	r3, #0
 80039c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    tout   = timeout;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	627b      	str	r3, [r7, #36]	; 0x24

    t0 = xTaskGetTickCount();
 80039ca:	f001 fb79 	bl	80050c0 <xTaskGetTickCount>
 80039ce:	6238      	str	r0, [r7, #32]
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 80039d0:	f107 0210 	add.w	r2, r7, #16
 80039d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80039d8:	2000      	movs	r0, #0
 80039da:	f001 ff33 	bl	8005844 <xTaskNotifyWait>
 80039de:	61f8      	str	r0, [r7, #28]

      if (rval == pdPASS) {
 80039e0:	69fb      	ldr	r3, [r7, #28]
 80039e2:	2b01      	cmp	r3, #1
 80039e4:	d137      	bne.n	8003a56 <osThreadFlagsWait+0xd6>
        rflags &= flags;
 80039e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	4013      	ands	r3, r2
 80039ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        rflags |= nval;
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80039f2:	4313      	orrs	r3, r2
 80039f4:	62fb      	str	r3, [r7, #44]	; 0x2c

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	f003 0301 	and.w	r3, r3, #1
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d00c      	beq.n	8003a1a <osThreadFlagsWait+0x9a>
          if ((flags & rflags) == flags) {
 8003a00:	68fa      	ldr	r2, [r7, #12]
 8003a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a04:	4013      	ands	r3, r2
 8003a06:	68fa      	ldr	r2, [r7, #12]
 8003a08:	429a      	cmp	r2, r3
 8003a0a:	d032      	beq.n	8003a72 <osThreadFlagsWait+0xf2>
            break;
          } else {
            if (timeout == 0U) {
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d10f      	bne.n	8003a32 <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 8003a12:	f06f 0302 	mvn.w	r3, #2
 8003a16:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 8003a18:	e02e      	b.n	8003a78 <osThreadFlagsWait+0xf8>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 8003a1a:	68fa      	ldr	r2, [r7, #12]
 8003a1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a1e:	4013      	ands	r3, r2
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d128      	bne.n	8003a76 <osThreadFlagsWait+0xf6>
            break;
          } else {
            if (timeout == 0U) {
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d103      	bne.n	8003a32 <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 8003a2a:	f06f 0302 	mvn.w	r3, #2
 8003a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 8003a30:	e022      	b.n	8003a78 <osThreadFlagsWait+0xf8>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 8003a32:	f001 fb45 	bl	80050c0 <xTaskGetTickCount>
 8003a36:	4602      	mov	r2, r0
 8003a38:	6a3b      	ldr	r3, [r7, #32]
 8003a3a:	1ad3      	subs	r3, r2, r3
 8003a3c:	61bb      	str	r3, [r7, #24]

        if (td > tout) {
 8003a3e:	69ba      	ldr	r2, [r7, #24]
 8003a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a42:	429a      	cmp	r2, r3
 8003a44:	d902      	bls.n	8003a4c <osThreadFlagsWait+0xcc>
          tout  = 0;
 8003a46:	2300      	movs	r3, #0
 8003a48:	627b      	str	r3, [r7, #36]	; 0x24
 8003a4a:	e00e      	b.n	8003a6a <osThreadFlagsWait+0xea>
        } else {
          tout -= td;
 8003a4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a4e:	69bb      	ldr	r3, [r7, #24]
 8003a50:	1ad3      	subs	r3, r2, r3
 8003a52:	627b      	str	r3, [r7, #36]	; 0x24
 8003a54:	e009      	b.n	8003a6a <osThreadFlagsWait+0xea>
        }
      }
      else {
        if (timeout == 0) {
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d103      	bne.n	8003a64 <osThreadFlagsWait+0xe4>
          rflags = (uint32_t)osErrorResource;
 8003a5c:	f06f 0302 	mvn.w	r3, #2
 8003a60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a62:	e002      	b.n	8003a6a <osThreadFlagsWait+0xea>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 8003a64:	f06f 0301 	mvn.w	r3, #1
 8003a68:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
      }
    }
    while (rval != pdFAIL);
 8003a6a:	69fb      	ldr	r3, [r7, #28]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d1af      	bne.n	80039d0 <osThreadFlagsWait+0x50>
 8003a70:	e002      	b.n	8003a78 <osThreadFlagsWait+0xf8>
            break;
 8003a72:	bf00      	nop
 8003a74:	e000      	b.n	8003a78 <osThreadFlagsWait+0xf8>
            break;
 8003a76:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 8003a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	3730      	adds	r7, #48	; 0x30
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}

08003a82 <osDelay>:
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003a82:	b580      	push	{r7, lr}
 8003a84:	b084      	sub	sp, #16
 8003a86:	af00      	add	r7, sp, #0
 8003a88:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003a8a:	f3ef 8305 	mrs	r3, IPSR
 8003a8e:	60bb      	str	r3, [r7, #8]
  return(result);
 8003a90:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d003      	beq.n	8003a9e <osDelay+0x1c>
    stat = osErrorISR;
 8003a96:	f06f 0305 	mvn.w	r3, #5
 8003a9a:	60fb      	str	r3, [r7, #12]
 8003a9c:	e007      	b.n	8003aae <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d002      	beq.n	8003aae <osDelay+0x2c>
      vTaskDelay(ticks);
 8003aa8:	6878      	ldr	r0, [r7, #4]
 8003aaa:	f001 f9c3 	bl	8004e34 <vTaskDelay>
    }
  }

  return (stat);
 8003aae:	68fb      	ldr	r3, [r7, #12]
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	3710      	adds	r7, #16
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}

08003ab8 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b08a      	sub	sp, #40	; 0x28
 8003abc:	af02      	add	r7, sp, #8
 8003abe:	60f8      	str	r0, [r7, #12]
 8003ac0:	60b9      	str	r1, [r7, #8]
 8003ac2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003ac8:	f3ef 8305 	mrs	r3, IPSR
 8003acc:	613b      	str	r3, [r7, #16]
  return(result);
 8003ace:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d15f      	bne.n	8003b94 <osMessageQueueNew+0xdc>
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d05c      	beq.n	8003b94 <osMessageQueueNew+0xdc>
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d059      	beq.n	8003b94 <osMessageQueueNew+0xdc>
    mem = -1;
 8003ae0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003ae4:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d029      	beq.n	8003b40 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d012      	beq.n	8003b1a <osMessageQueueNew+0x62>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	68db      	ldr	r3, [r3, #12]
 8003af8:	2b4f      	cmp	r3, #79	; 0x4f
 8003afa:	d90e      	bls.n	8003b1a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d00a      	beq.n	8003b1a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	695a      	ldr	r2, [r3, #20]
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	68b9      	ldr	r1, [r7, #8]
 8003b0c:	fb01 f303 	mul.w	r3, r1, r3
 8003b10:	429a      	cmp	r2, r3
 8003b12:	d302      	bcc.n	8003b1a <osMessageQueueNew+0x62>
        mem = 1;
 8003b14:	2301      	movs	r3, #1
 8003b16:	61bb      	str	r3, [r7, #24]
 8003b18:	e014      	b.n	8003b44 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d110      	bne.n	8003b44 <osMessageQueueNew+0x8c>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	68db      	ldr	r3, [r3, #12]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d10c      	bne.n	8003b44 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d108      	bne.n	8003b44 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	695b      	ldr	r3, [r3, #20]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d104      	bne.n	8003b44 <osMessageQueueNew+0x8c>
          mem = 0;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	61bb      	str	r3, [r7, #24]
 8003b3e:	e001      	b.n	8003b44 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8003b40:	2300      	movs	r3, #0
 8003b42:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003b44:	69bb      	ldr	r3, [r7, #24]
 8003b46:	2b01      	cmp	r3, #1
 8003b48:	d10b      	bne.n	8003b62 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	691a      	ldr	r2, [r3, #16]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	2100      	movs	r1, #0
 8003b54:	9100      	str	r1, [sp, #0]
 8003b56:	68b9      	ldr	r1, [r7, #8]
 8003b58:	68f8      	ldr	r0, [r7, #12]
 8003b5a:	f000 fa4f 	bl	8003ffc <xQueueGenericCreateStatic>
 8003b5e:	61f8      	str	r0, [r7, #28]
 8003b60:	e008      	b.n	8003b74 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8003b62:	69bb      	ldr	r3, [r7, #24]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d105      	bne.n	8003b74 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8003b68:	2200      	movs	r2, #0
 8003b6a:	68b9      	ldr	r1, [r7, #8]
 8003b6c:	68f8      	ldr	r0, [r7, #12]
 8003b6e:	f000 fabd 	bl	80040ec <xQueueGenericCreate>
 8003b72:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8003b74:	69fb      	ldr	r3, [r7, #28]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d00c      	beq.n	8003b94 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d003      	beq.n	8003b88 <osMessageQueueNew+0xd0>
        name = attr->name;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	617b      	str	r3, [r7, #20]
 8003b86:	e001      	b.n	8003b8c <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8003b8c:	6979      	ldr	r1, [r7, #20]
 8003b8e:	69f8      	ldr	r0, [r7, #28]
 8003b90:	f000 ff50 	bl	8004a34 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8003b94:	69fb      	ldr	r3, [r7, #28]
}
 8003b96:	4618      	mov	r0, r3
 8003b98:	3720      	adds	r7, #32
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}
	...

08003ba0 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b088      	sub	sp, #32
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	60f8      	str	r0, [r7, #12]
 8003ba8:	60b9      	str	r1, [r7, #8]
 8003baa:	603b      	str	r3, [r7, #0]
 8003bac:	4613      	mov	r3, r2
 8003bae:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003bb8:	f3ef 8305 	mrs	r3, IPSR
 8003bbc:	617b      	str	r3, [r7, #20]
  return(result);
 8003bbe:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d028      	beq.n	8003c16 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003bc4:	69bb      	ldr	r3, [r7, #24]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d005      	beq.n	8003bd6 <osMessageQueuePut+0x36>
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d002      	beq.n	8003bd6 <osMessageQueuePut+0x36>
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d003      	beq.n	8003bde <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8003bd6:	f06f 0303 	mvn.w	r3, #3
 8003bda:	61fb      	str	r3, [r7, #28]
 8003bdc:	e038      	b.n	8003c50 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8003bde:	2300      	movs	r3, #0
 8003be0:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8003be2:	f107 0210 	add.w	r2, r7, #16
 8003be6:	2300      	movs	r3, #0
 8003be8:	68b9      	ldr	r1, [r7, #8]
 8003bea:	69b8      	ldr	r0, [r7, #24]
 8003bec:	f000 fbda 	bl	80043a4 <xQueueGenericSendFromISR>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	2b01      	cmp	r3, #1
 8003bf4:	d003      	beq.n	8003bfe <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8003bf6:	f06f 0302 	mvn.w	r3, #2
 8003bfa:	61fb      	str	r3, [r7, #28]
 8003bfc:	e028      	b.n	8003c50 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d025      	beq.n	8003c50 <osMessageQueuePut+0xb0>
 8003c04:	4b15      	ldr	r3, [pc, #84]	; (8003c5c <osMessageQueuePut+0xbc>)
 8003c06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c0a:	601a      	str	r2, [r3, #0]
 8003c0c:	f3bf 8f4f 	dsb	sy
 8003c10:	f3bf 8f6f 	isb	sy
 8003c14:	e01c      	b.n	8003c50 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8003c16:	69bb      	ldr	r3, [r7, #24]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d002      	beq.n	8003c22 <osMessageQueuePut+0x82>
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d103      	bne.n	8003c2a <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8003c22:	f06f 0303 	mvn.w	r3, #3
 8003c26:	61fb      	str	r3, [r7, #28]
 8003c28:	e012      	b.n	8003c50 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	683a      	ldr	r2, [r7, #0]
 8003c2e:	68b9      	ldr	r1, [r7, #8]
 8003c30:	69b8      	ldr	r0, [r7, #24]
 8003c32:	f000 fab9 	bl	80041a8 <xQueueGenericSend>
 8003c36:	4603      	mov	r3, r0
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	d009      	beq.n	8003c50 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d003      	beq.n	8003c4a <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8003c42:	f06f 0301 	mvn.w	r3, #1
 8003c46:	61fb      	str	r3, [r7, #28]
 8003c48:	e002      	b.n	8003c50 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8003c4a:	f06f 0302 	mvn.w	r3, #2
 8003c4e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8003c50:	69fb      	ldr	r3, [r7, #28]
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	3720      	adds	r7, #32
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}
 8003c5a:	bf00      	nop
 8003c5c:	e000ed04 	.word	0xe000ed04

08003c60 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b088      	sub	sp, #32
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	60f8      	str	r0, [r7, #12]
 8003c68:	60b9      	str	r1, [r7, #8]
 8003c6a:	607a      	str	r2, [r7, #4]
 8003c6c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8003c72:	2300      	movs	r3, #0
 8003c74:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003c76:	f3ef 8305 	mrs	r3, IPSR
 8003c7a:	617b      	str	r3, [r7, #20]
  return(result);
 8003c7c:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d028      	beq.n	8003cd4 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003c82:	69bb      	ldr	r3, [r7, #24]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d005      	beq.n	8003c94 <osMessageQueueGet+0x34>
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d002      	beq.n	8003c94 <osMessageQueueGet+0x34>
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d003      	beq.n	8003c9c <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8003c94:	f06f 0303 	mvn.w	r3, #3
 8003c98:	61fb      	str	r3, [r7, #28]
 8003c9a:	e037      	b.n	8003d0c <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8003ca0:	f107 0310 	add.w	r3, r7, #16
 8003ca4:	461a      	mov	r2, r3
 8003ca6:	68b9      	ldr	r1, [r7, #8]
 8003ca8:	69b8      	ldr	r0, [r7, #24]
 8003caa:	f000 fcf7 	bl	800469c <xQueueReceiveFromISR>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	d003      	beq.n	8003cbc <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8003cb4:	f06f 0302 	mvn.w	r3, #2
 8003cb8:	61fb      	str	r3, [r7, #28]
 8003cba:	e027      	b.n	8003d0c <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d024      	beq.n	8003d0c <osMessageQueueGet+0xac>
 8003cc2:	4b15      	ldr	r3, [pc, #84]	; (8003d18 <osMessageQueueGet+0xb8>)
 8003cc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003cc8:	601a      	str	r2, [r3, #0]
 8003cca:	f3bf 8f4f 	dsb	sy
 8003cce:	f3bf 8f6f 	isb	sy
 8003cd2:	e01b      	b.n	8003d0c <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8003cd4:	69bb      	ldr	r3, [r7, #24]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d002      	beq.n	8003ce0 <osMessageQueueGet+0x80>
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d103      	bne.n	8003ce8 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8003ce0:	f06f 0303 	mvn.w	r3, #3
 8003ce4:	61fb      	str	r3, [r7, #28]
 8003ce6:	e011      	b.n	8003d0c <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8003ce8:	683a      	ldr	r2, [r7, #0]
 8003cea:	68b9      	ldr	r1, [r7, #8]
 8003cec:	69b8      	ldr	r0, [r7, #24]
 8003cee:	f000 fbf5 	bl	80044dc <xQueueReceive>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	d009      	beq.n	8003d0c <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d003      	beq.n	8003d06 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8003cfe:	f06f 0301 	mvn.w	r3, #1
 8003d02:	61fb      	str	r3, [r7, #28]
 8003d04:	e002      	b.n	8003d0c <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8003d06:	f06f 0302 	mvn.w	r3, #2
 8003d0a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8003d0c:	69fb      	ldr	r3, [r7, #28]
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	3720      	adds	r7, #32
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}
 8003d16:	bf00      	nop
 8003d18:	e000ed04 	.word	0xe000ed04

08003d1c <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b086      	sub	sp, #24
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d102      	bne.n	8003d34 <osMessageQueueGetCount+0x18>
    count = 0U;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	617b      	str	r3, [r7, #20]
 8003d32:	e00e      	b.n	8003d52 <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003d34:	f3ef 8305 	mrs	r3, IPSR
 8003d38:	60fb      	str	r3, [r7, #12]
  return(result);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d004      	beq.n	8003d4a <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 8003d40:	6938      	ldr	r0, [r7, #16]
 8003d42:	f000 fd49 	bl	80047d8 <uxQueueMessagesWaitingFromISR>
 8003d46:	6178      	str	r0, [r7, #20]
 8003d48:	e003      	b.n	8003d52 <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 8003d4a:	6938      	ldr	r0, [r7, #16]
 8003d4c:	f000 fd26 	bl	800479c <uxQueueMessagesWaiting>
 8003d50:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 8003d52:	697b      	ldr	r3, [r7, #20]
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	3718      	adds	r7, #24
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}

08003d5c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003d5c:	b480      	push	{r7}
 8003d5e:	b085      	sub	sp, #20
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	60f8      	str	r0, [r7, #12]
 8003d64:	60b9      	str	r1, [r7, #8]
 8003d66:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	4a07      	ldr	r2, [pc, #28]	; (8003d88 <vApplicationGetIdleTaskMemory+0x2c>)
 8003d6c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	4a06      	ldr	r2, [pc, #24]	; (8003d8c <vApplicationGetIdleTaskMemory+0x30>)
 8003d72:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2280      	movs	r2, #128	; 0x80
 8003d78:	601a      	str	r2, [r3, #0]
}
 8003d7a:	bf00      	nop
 8003d7c:	3714      	adds	r7, #20
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d84:	4770      	bx	lr
 8003d86:	bf00      	nop
 8003d88:	200002a4 	.word	0x200002a4
 8003d8c:	20000300 	.word	0x20000300

08003d90 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003d90:	b480      	push	{r7}
 8003d92:	b085      	sub	sp, #20
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	60f8      	str	r0, [r7, #12]
 8003d98:	60b9      	str	r1, [r7, #8]
 8003d9a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	4a07      	ldr	r2, [pc, #28]	; (8003dbc <vApplicationGetTimerTaskMemory+0x2c>)
 8003da0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	4a06      	ldr	r2, [pc, #24]	; (8003dc0 <vApplicationGetTimerTaskMemory+0x30>)
 8003da6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003dae:	601a      	str	r2, [r3, #0]
}
 8003db0:	bf00      	nop
 8003db2:	3714      	adds	r7, #20
 8003db4:	46bd      	mov	sp, r7
 8003db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dba:	4770      	bx	lr
 8003dbc:	20000500 	.word	0x20000500
 8003dc0:	2000055c 	.word	0x2000055c

08003dc4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b083      	sub	sp, #12
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	f103 0208 	add.w	r2, r3, #8
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003ddc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	f103 0208 	add.w	r2, r3, #8
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	f103 0208 	add.w	r2, r3, #8
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2200      	movs	r2, #0
 8003df6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003df8:	bf00      	nop
 8003dfa:	370c      	adds	r7, #12
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e02:	4770      	bx	lr

08003e04 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003e04:	b480      	push	{r7}
 8003e06:	b083      	sub	sp, #12
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003e12:	bf00      	nop
 8003e14:	370c      	adds	r7, #12
 8003e16:	46bd      	mov	sp, r7
 8003e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1c:	4770      	bx	lr

08003e1e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003e1e:	b480      	push	{r7}
 8003e20:	b085      	sub	sp, #20
 8003e22:	af00      	add	r7, sp, #0
 8003e24:	6078      	str	r0, [r7, #4]
 8003e26:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	68fa      	ldr	r2, [r7, #12]
 8003e32:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	689a      	ldr	r2, [r3, #8]
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	683a      	ldr	r2, [r7, #0]
 8003e42:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	683a      	ldr	r2, [r7, #0]
 8003e48:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	687a      	ldr	r2, [r7, #4]
 8003e4e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	1c5a      	adds	r2, r3, #1
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	601a      	str	r2, [r3, #0]
}
 8003e5a:	bf00      	nop
 8003e5c:	3714      	adds	r7, #20
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e64:	4770      	bx	lr

08003e66 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003e66:	b480      	push	{r7}
 8003e68:	b085      	sub	sp, #20
 8003e6a:	af00      	add	r7, sp, #0
 8003e6c:	6078      	str	r0, [r7, #4]
 8003e6e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e7c:	d103      	bne.n	8003e86 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	691b      	ldr	r3, [r3, #16]
 8003e82:	60fb      	str	r3, [r7, #12]
 8003e84:	e00c      	b.n	8003ea0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	3308      	adds	r3, #8
 8003e8a:	60fb      	str	r3, [r7, #12]
 8003e8c:	e002      	b.n	8003e94 <vListInsert+0x2e>
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	60fb      	str	r3, [r7, #12]
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	68ba      	ldr	r2, [r7, #8]
 8003e9c:	429a      	cmp	r2, r3
 8003e9e:	d2f6      	bcs.n	8003e8e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	685a      	ldr	r2, [r3, #4]
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	683a      	ldr	r2, [r7, #0]
 8003eae:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	68fa      	ldr	r2, [r7, #12]
 8003eb4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	683a      	ldr	r2, [r7, #0]
 8003eba:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	687a      	ldr	r2, [r7, #4]
 8003ec0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	1c5a      	adds	r2, r3, #1
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	601a      	str	r2, [r3, #0]
}
 8003ecc:	bf00      	nop
 8003ece:	3714      	adds	r7, #20
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed6:	4770      	bx	lr

08003ed8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b085      	sub	sp, #20
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	691b      	ldr	r3, [r3, #16]
 8003ee4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	687a      	ldr	r2, [r7, #4]
 8003eec:	6892      	ldr	r2, [r2, #8]
 8003eee:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	687a      	ldr	r2, [r7, #4]
 8003ef6:	6852      	ldr	r2, [r2, #4]
 8003ef8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	687a      	ldr	r2, [r7, #4]
 8003f00:	429a      	cmp	r2, r3
 8003f02:	d103      	bne.n	8003f0c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	689a      	ldr	r2, [r3, #8]
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	1e5a      	subs	r2, r3, #1
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
}
 8003f20:	4618      	mov	r0, r3
 8003f22:	3714      	adds	r7, #20
 8003f24:	46bd      	mov	sp, r7
 8003f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2a:	4770      	bx	lr

08003f2c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b084      	sub	sp, #16
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
 8003f34:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d10a      	bne.n	8003f56 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f44:	f383 8811 	msr	BASEPRI, r3
 8003f48:	f3bf 8f6f 	isb	sy
 8003f4c:	f3bf 8f4f 	dsb	sy
 8003f50:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003f52:	bf00      	nop
 8003f54:	e7fe      	b.n	8003f54 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003f56:	f002 fb35 	bl	80065c4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681a      	ldr	r2, [r3, #0]
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f62:	68f9      	ldr	r1, [r7, #12]
 8003f64:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003f66:	fb01 f303 	mul.w	r3, r1, r3
 8003f6a:	441a      	add	r2, r3
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	2200      	movs	r2, #0
 8003f74:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681a      	ldr	r2, [r3, #0]
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681a      	ldr	r2, [r3, #0]
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f86:	3b01      	subs	r3, #1
 8003f88:	68f9      	ldr	r1, [r7, #12]
 8003f8a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003f8c:	fb01 f303 	mul.w	r3, r1, r3
 8003f90:	441a      	add	r2, r3
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	22ff      	movs	r2, #255	; 0xff
 8003f9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	22ff      	movs	r2, #255	; 0xff
 8003fa2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d114      	bne.n	8003fd6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	691b      	ldr	r3, [r3, #16]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d01a      	beq.n	8003fea <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	3310      	adds	r3, #16
 8003fb8:	4618      	mov	r0, r3
 8003fba:	f001 f9f9 	bl	80053b0 <xTaskRemoveFromEventList>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d012      	beq.n	8003fea <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003fc4:	4b0c      	ldr	r3, [pc, #48]	; (8003ff8 <xQueueGenericReset+0xcc>)
 8003fc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fca:	601a      	str	r2, [r3, #0]
 8003fcc:	f3bf 8f4f 	dsb	sy
 8003fd0:	f3bf 8f6f 	isb	sy
 8003fd4:	e009      	b.n	8003fea <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	3310      	adds	r3, #16
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f7ff fef2 	bl	8003dc4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	3324      	adds	r3, #36	; 0x24
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	f7ff feed 	bl	8003dc4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003fea:	f002 fb1b 	bl	8006624 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003fee:	2301      	movs	r3, #1
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	3710      	adds	r7, #16
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}
 8003ff8:	e000ed04 	.word	0xe000ed04

08003ffc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b08e      	sub	sp, #56	; 0x38
 8004000:	af02      	add	r7, sp, #8
 8004002:	60f8      	str	r0, [r7, #12]
 8004004:	60b9      	str	r1, [r7, #8]
 8004006:	607a      	str	r2, [r7, #4]
 8004008:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d10a      	bne.n	8004026 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004014:	f383 8811 	msr	BASEPRI, r3
 8004018:	f3bf 8f6f 	isb	sy
 800401c:	f3bf 8f4f 	dsb	sy
 8004020:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004022:	bf00      	nop
 8004024:	e7fe      	b.n	8004024 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d10a      	bne.n	8004042 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800402c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004030:	f383 8811 	msr	BASEPRI, r3
 8004034:	f3bf 8f6f 	isb	sy
 8004038:	f3bf 8f4f 	dsb	sy
 800403c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800403e:	bf00      	nop
 8004040:	e7fe      	b.n	8004040 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d002      	beq.n	800404e <xQueueGenericCreateStatic+0x52>
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d001      	beq.n	8004052 <xQueueGenericCreateStatic+0x56>
 800404e:	2301      	movs	r3, #1
 8004050:	e000      	b.n	8004054 <xQueueGenericCreateStatic+0x58>
 8004052:	2300      	movs	r3, #0
 8004054:	2b00      	cmp	r3, #0
 8004056:	d10a      	bne.n	800406e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800405c:	f383 8811 	msr	BASEPRI, r3
 8004060:	f3bf 8f6f 	isb	sy
 8004064:	f3bf 8f4f 	dsb	sy
 8004068:	623b      	str	r3, [r7, #32]
}
 800406a:	bf00      	nop
 800406c:	e7fe      	b.n	800406c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d102      	bne.n	800407a <xQueueGenericCreateStatic+0x7e>
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d101      	bne.n	800407e <xQueueGenericCreateStatic+0x82>
 800407a:	2301      	movs	r3, #1
 800407c:	e000      	b.n	8004080 <xQueueGenericCreateStatic+0x84>
 800407e:	2300      	movs	r3, #0
 8004080:	2b00      	cmp	r3, #0
 8004082:	d10a      	bne.n	800409a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004084:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004088:	f383 8811 	msr	BASEPRI, r3
 800408c:	f3bf 8f6f 	isb	sy
 8004090:	f3bf 8f4f 	dsb	sy
 8004094:	61fb      	str	r3, [r7, #28]
}
 8004096:	bf00      	nop
 8004098:	e7fe      	b.n	8004098 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800409a:	2350      	movs	r3, #80	; 0x50
 800409c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	2b50      	cmp	r3, #80	; 0x50
 80040a2:	d00a      	beq.n	80040ba <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80040a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040a8:	f383 8811 	msr	BASEPRI, r3
 80040ac:	f3bf 8f6f 	isb	sy
 80040b0:	f3bf 8f4f 	dsb	sy
 80040b4:	61bb      	str	r3, [r7, #24]
}
 80040b6:	bf00      	nop
 80040b8:	e7fe      	b.n	80040b8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80040ba:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80040c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d00d      	beq.n	80040e2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80040c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040c8:	2201      	movs	r2, #1
 80040ca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80040ce:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80040d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040d4:	9300      	str	r3, [sp, #0]
 80040d6:	4613      	mov	r3, r2
 80040d8:	687a      	ldr	r2, [r7, #4]
 80040da:	68b9      	ldr	r1, [r7, #8]
 80040dc:	68f8      	ldr	r0, [r7, #12]
 80040de:	f000 f83f 	bl	8004160 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80040e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80040e4:	4618      	mov	r0, r3
 80040e6:	3730      	adds	r7, #48	; 0x30
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd80      	pop	{r7, pc}

080040ec <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b08a      	sub	sp, #40	; 0x28
 80040f0:	af02      	add	r7, sp, #8
 80040f2:	60f8      	str	r0, [r7, #12]
 80040f4:	60b9      	str	r1, [r7, #8]
 80040f6:	4613      	mov	r3, r2
 80040f8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d10a      	bne.n	8004116 <xQueueGenericCreate+0x2a>
	__asm volatile
 8004100:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004104:	f383 8811 	msr	BASEPRI, r3
 8004108:	f3bf 8f6f 	isb	sy
 800410c:	f3bf 8f4f 	dsb	sy
 8004110:	613b      	str	r3, [r7, #16]
}
 8004112:	bf00      	nop
 8004114:	e7fe      	b.n	8004114 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	68ba      	ldr	r2, [r7, #8]
 800411a:	fb02 f303 	mul.w	r3, r2, r3
 800411e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004120:	69fb      	ldr	r3, [r7, #28]
 8004122:	3350      	adds	r3, #80	; 0x50
 8004124:	4618      	mov	r0, r3
 8004126:	f002 fb6f 	bl	8006808 <pvPortMalloc>
 800412a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800412c:	69bb      	ldr	r3, [r7, #24]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d011      	beq.n	8004156 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004132:	69bb      	ldr	r3, [r7, #24]
 8004134:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	3350      	adds	r3, #80	; 0x50
 800413a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800413c:	69bb      	ldr	r3, [r7, #24]
 800413e:	2200      	movs	r2, #0
 8004140:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004144:	79fa      	ldrb	r2, [r7, #7]
 8004146:	69bb      	ldr	r3, [r7, #24]
 8004148:	9300      	str	r3, [sp, #0]
 800414a:	4613      	mov	r3, r2
 800414c:	697a      	ldr	r2, [r7, #20]
 800414e:	68b9      	ldr	r1, [r7, #8]
 8004150:	68f8      	ldr	r0, [r7, #12]
 8004152:	f000 f805 	bl	8004160 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004156:	69bb      	ldr	r3, [r7, #24]
	}
 8004158:	4618      	mov	r0, r3
 800415a:	3720      	adds	r7, #32
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}

08004160 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b084      	sub	sp, #16
 8004164:	af00      	add	r7, sp, #0
 8004166:	60f8      	str	r0, [r7, #12]
 8004168:	60b9      	str	r1, [r7, #8]
 800416a:	607a      	str	r2, [r7, #4]
 800416c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d103      	bne.n	800417c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004174:	69bb      	ldr	r3, [r7, #24]
 8004176:	69ba      	ldr	r2, [r7, #24]
 8004178:	601a      	str	r2, [r3, #0]
 800417a:	e002      	b.n	8004182 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800417c:	69bb      	ldr	r3, [r7, #24]
 800417e:	687a      	ldr	r2, [r7, #4]
 8004180:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004182:	69bb      	ldr	r3, [r7, #24]
 8004184:	68fa      	ldr	r2, [r7, #12]
 8004186:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004188:	69bb      	ldr	r3, [r7, #24]
 800418a:	68ba      	ldr	r2, [r7, #8]
 800418c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800418e:	2101      	movs	r1, #1
 8004190:	69b8      	ldr	r0, [r7, #24]
 8004192:	f7ff fecb 	bl	8003f2c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004196:	69bb      	ldr	r3, [r7, #24]
 8004198:	78fa      	ldrb	r2, [r7, #3]
 800419a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800419e:	bf00      	nop
 80041a0:	3710      	adds	r7, #16
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}
	...

080041a8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b08e      	sub	sp, #56	; 0x38
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	60f8      	str	r0, [r7, #12]
 80041b0:	60b9      	str	r1, [r7, #8]
 80041b2:	607a      	str	r2, [r7, #4]
 80041b4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80041b6:	2300      	movs	r3, #0
 80041b8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80041be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d10a      	bne.n	80041da <xQueueGenericSend+0x32>
	__asm volatile
 80041c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041c8:	f383 8811 	msr	BASEPRI, r3
 80041cc:	f3bf 8f6f 	isb	sy
 80041d0:	f3bf 8f4f 	dsb	sy
 80041d4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80041d6:	bf00      	nop
 80041d8:	e7fe      	b.n	80041d8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d103      	bne.n	80041e8 <xQueueGenericSend+0x40>
 80041e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d101      	bne.n	80041ec <xQueueGenericSend+0x44>
 80041e8:	2301      	movs	r3, #1
 80041ea:	e000      	b.n	80041ee <xQueueGenericSend+0x46>
 80041ec:	2300      	movs	r3, #0
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d10a      	bne.n	8004208 <xQueueGenericSend+0x60>
	__asm volatile
 80041f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041f6:	f383 8811 	msr	BASEPRI, r3
 80041fa:	f3bf 8f6f 	isb	sy
 80041fe:	f3bf 8f4f 	dsb	sy
 8004202:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004204:	bf00      	nop
 8004206:	e7fe      	b.n	8004206 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	2b02      	cmp	r3, #2
 800420c:	d103      	bne.n	8004216 <xQueueGenericSend+0x6e>
 800420e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004210:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004212:	2b01      	cmp	r3, #1
 8004214:	d101      	bne.n	800421a <xQueueGenericSend+0x72>
 8004216:	2301      	movs	r3, #1
 8004218:	e000      	b.n	800421c <xQueueGenericSend+0x74>
 800421a:	2300      	movs	r3, #0
 800421c:	2b00      	cmp	r3, #0
 800421e:	d10a      	bne.n	8004236 <xQueueGenericSend+0x8e>
	__asm volatile
 8004220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004224:	f383 8811 	msr	BASEPRI, r3
 8004228:	f3bf 8f6f 	isb	sy
 800422c:	f3bf 8f4f 	dsb	sy
 8004230:	623b      	str	r3, [r7, #32]
}
 8004232:	bf00      	nop
 8004234:	e7fe      	b.n	8004234 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004236:	f001 fa79 	bl	800572c <xTaskGetSchedulerState>
 800423a:	4603      	mov	r3, r0
 800423c:	2b00      	cmp	r3, #0
 800423e:	d102      	bne.n	8004246 <xQueueGenericSend+0x9e>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d101      	bne.n	800424a <xQueueGenericSend+0xa2>
 8004246:	2301      	movs	r3, #1
 8004248:	e000      	b.n	800424c <xQueueGenericSend+0xa4>
 800424a:	2300      	movs	r3, #0
 800424c:	2b00      	cmp	r3, #0
 800424e:	d10a      	bne.n	8004266 <xQueueGenericSend+0xbe>
	__asm volatile
 8004250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004254:	f383 8811 	msr	BASEPRI, r3
 8004258:	f3bf 8f6f 	isb	sy
 800425c:	f3bf 8f4f 	dsb	sy
 8004260:	61fb      	str	r3, [r7, #28]
}
 8004262:	bf00      	nop
 8004264:	e7fe      	b.n	8004264 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004266:	f002 f9ad 	bl	80065c4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800426a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800426c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800426e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004270:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004272:	429a      	cmp	r2, r3
 8004274:	d302      	bcc.n	800427c <xQueueGenericSend+0xd4>
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	2b02      	cmp	r3, #2
 800427a:	d129      	bne.n	80042d0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800427c:	683a      	ldr	r2, [r7, #0]
 800427e:	68b9      	ldr	r1, [r7, #8]
 8004280:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004282:	f000 fac7 	bl	8004814 <prvCopyDataToQueue>
 8004286:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800428a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800428c:	2b00      	cmp	r3, #0
 800428e:	d010      	beq.n	80042b2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004292:	3324      	adds	r3, #36	; 0x24
 8004294:	4618      	mov	r0, r3
 8004296:	f001 f88b 	bl	80053b0 <xTaskRemoveFromEventList>
 800429a:	4603      	mov	r3, r0
 800429c:	2b00      	cmp	r3, #0
 800429e:	d013      	beq.n	80042c8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80042a0:	4b3f      	ldr	r3, [pc, #252]	; (80043a0 <xQueueGenericSend+0x1f8>)
 80042a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042a6:	601a      	str	r2, [r3, #0]
 80042a8:	f3bf 8f4f 	dsb	sy
 80042ac:	f3bf 8f6f 	isb	sy
 80042b0:	e00a      	b.n	80042c8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80042b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d007      	beq.n	80042c8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80042b8:	4b39      	ldr	r3, [pc, #228]	; (80043a0 <xQueueGenericSend+0x1f8>)
 80042ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042be:	601a      	str	r2, [r3, #0]
 80042c0:	f3bf 8f4f 	dsb	sy
 80042c4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80042c8:	f002 f9ac 	bl	8006624 <vPortExitCritical>
				return pdPASS;
 80042cc:	2301      	movs	r3, #1
 80042ce:	e063      	b.n	8004398 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d103      	bne.n	80042de <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80042d6:	f002 f9a5 	bl	8006624 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80042da:	2300      	movs	r3, #0
 80042dc:	e05c      	b.n	8004398 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80042de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d106      	bne.n	80042f2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80042e4:	f107 0314 	add.w	r3, r7, #20
 80042e8:	4618      	mov	r0, r3
 80042ea:	f001 f8c5 	bl	8005478 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80042ee:	2301      	movs	r3, #1
 80042f0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80042f2:	f002 f997 	bl	8006624 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80042f6:	f000 fe37 	bl	8004f68 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80042fa:	f002 f963 	bl	80065c4 <vPortEnterCritical>
 80042fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004300:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004304:	b25b      	sxtb	r3, r3
 8004306:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800430a:	d103      	bne.n	8004314 <xQueueGenericSend+0x16c>
 800430c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800430e:	2200      	movs	r2, #0
 8004310:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004316:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800431a:	b25b      	sxtb	r3, r3
 800431c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004320:	d103      	bne.n	800432a <xQueueGenericSend+0x182>
 8004322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004324:	2200      	movs	r2, #0
 8004326:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800432a:	f002 f97b 	bl	8006624 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800432e:	1d3a      	adds	r2, r7, #4
 8004330:	f107 0314 	add.w	r3, r7, #20
 8004334:	4611      	mov	r1, r2
 8004336:	4618      	mov	r0, r3
 8004338:	f001 f8b4 	bl	80054a4 <xTaskCheckForTimeOut>
 800433c:	4603      	mov	r3, r0
 800433e:	2b00      	cmp	r3, #0
 8004340:	d124      	bne.n	800438c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004342:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004344:	f000 fb5e 	bl	8004a04 <prvIsQueueFull>
 8004348:	4603      	mov	r3, r0
 800434a:	2b00      	cmp	r3, #0
 800434c:	d018      	beq.n	8004380 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800434e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004350:	3310      	adds	r3, #16
 8004352:	687a      	ldr	r2, [r7, #4]
 8004354:	4611      	mov	r1, r2
 8004356:	4618      	mov	r0, r3
 8004358:	f000 ffda 	bl	8005310 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800435c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800435e:	f000 fae9 	bl	8004934 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004362:	f000 fe0f 	bl	8004f84 <xTaskResumeAll>
 8004366:	4603      	mov	r3, r0
 8004368:	2b00      	cmp	r3, #0
 800436a:	f47f af7c 	bne.w	8004266 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800436e:	4b0c      	ldr	r3, [pc, #48]	; (80043a0 <xQueueGenericSend+0x1f8>)
 8004370:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004374:	601a      	str	r2, [r3, #0]
 8004376:	f3bf 8f4f 	dsb	sy
 800437a:	f3bf 8f6f 	isb	sy
 800437e:	e772      	b.n	8004266 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004380:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004382:	f000 fad7 	bl	8004934 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004386:	f000 fdfd 	bl	8004f84 <xTaskResumeAll>
 800438a:	e76c      	b.n	8004266 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800438c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800438e:	f000 fad1 	bl	8004934 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004392:	f000 fdf7 	bl	8004f84 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004396:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004398:	4618      	mov	r0, r3
 800439a:	3738      	adds	r7, #56	; 0x38
 800439c:	46bd      	mov	sp, r7
 800439e:	bd80      	pop	{r7, pc}
 80043a0:	e000ed04 	.word	0xe000ed04

080043a4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b090      	sub	sp, #64	; 0x40
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	60f8      	str	r0, [r7, #12]
 80043ac:	60b9      	str	r1, [r7, #8]
 80043ae:	607a      	str	r2, [r7, #4]
 80043b0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80043b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d10a      	bne.n	80043d2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80043bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043c0:	f383 8811 	msr	BASEPRI, r3
 80043c4:	f3bf 8f6f 	isb	sy
 80043c8:	f3bf 8f4f 	dsb	sy
 80043cc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80043ce:	bf00      	nop
 80043d0:	e7fe      	b.n	80043d0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d103      	bne.n	80043e0 <xQueueGenericSendFromISR+0x3c>
 80043d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d101      	bne.n	80043e4 <xQueueGenericSendFromISR+0x40>
 80043e0:	2301      	movs	r3, #1
 80043e2:	e000      	b.n	80043e6 <xQueueGenericSendFromISR+0x42>
 80043e4:	2300      	movs	r3, #0
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d10a      	bne.n	8004400 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80043ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ee:	f383 8811 	msr	BASEPRI, r3
 80043f2:	f3bf 8f6f 	isb	sy
 80043f6:	f3bf 8f4f 	dsb	sy
 80043fa:	627b      	str	r3, [r7, #36]	; 0x24
}
 80043fc:	bf00      	nop
 80043fe:	e7fe      	b.n	80043fe <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	2b02      	cmp	r3, #2
 8004404:	d103      	bne.n	800440e <xQueueGenericSendFromISR+0x6a>
 8004406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004408:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800440a:	2b01      	cmp	r3, #1
 800440c:	d101      	bne.n	8004412 <xQueueGenericSendFromISR+0x6e>
 800440e:	2301      	movs	r3, #1
 8004410:	e000      	b.n	8004414 <xQueueGenericSendFromISR+0x70>
 8004412:	2300      	movs	r3, #0
 8004414:	2b00      	cmp	r3, #0
 8004416:	d10a      	bne.n	800442e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800441c:	f383 8811 	msr	BASEPRI, r3
 8004420:	f3bf 8f6f 	isb	sy
 8004424:	f3bf 8f4f 	dsb	sy
 8004428:	623b      	str	r3, [r7, #32]
}
 800442a:	bf00      	nop
 800442c:	e7fe      	b.n	800442c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800442e:	f002 f9ab 	bl	8006788 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004432:	f3ef 8211 	mrs	r2, BASEPRI
 8004436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800443a:	f383 8811 	msr	BASEPRI, r3
 800443e:	f3bf 8f6f 	isb	sy
 8004442:	f3bf 8f4f 	dsb	sy
 8004446:	61fa      	str	r2, [r7, #28]
 8004448:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800444a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800444c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800444e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004450:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004454:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004456:	429a      	cmp	r2, r3
 8004458:	d302      	bcc.n	8004460 <xQueueGenericSendFromISR+0xbc>
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	2b02      	cmp	r3, #2
 800445e:	d12f      	bne.n	80044c0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004462:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004466:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800446a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800446c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800446e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004470:	683a      	ldr	r2, [r7, #0]
 8004472:	68b9      	ldr	r1, [r7, #8]
 8004474:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004476:	f000 f9cd 	bl	8004814 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800447a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800447e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004482:	d112      	bne.n	80044aa <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004488:	2b00      	cmp	r3, #0
 800448a:	d016      	beq.n	80044ba <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800448c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800448e:	3324      	adds	r3, #36	; 0x24
 8004490:	4618      	mov	r0, r3
 8004492:	f000 ff8d 	bl	80053b0 <xTaskRemoveFromEventList>
 8004496:	4603      	mov	r3, r0
 8004498:	2b00      	cmp	r3, #0
 800449a:	d00e      	beq.n	80044ba <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d00b      	beq.n	80044ba <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2201      	movs	r2, #1
 80044a6:	601a      	str	r2, [r3, #0]
 80044a8:	e007      	b.n	80044ba <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80044aa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80044ae:	3301      	adds	r3, #1
 80044b0:	b2db      	uxtb	r3, r3
 80044b2:	b25a      	sxtb	r2, r3
 80044b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80044ba:	2301      	movs	r3, #1
 80044bc:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80044be:	e001      	b.n	80044c4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80044c0:	2300      	movs	r3, #0
 80044c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80044c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044c6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80044ce:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80044d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	3740      	adds	r7, #64	; 0x40
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}
	...

080044dc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b08c      	sub	sp, #48	; 0x30
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	60f8      	str	r0, [r7, #12]
 80044e4:	60b9      	str	r1, [r7, #8]
 80044e6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80044e8:	2300      	movs	r3, #0
 80044ea:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80044f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d10a      	bne.n	800450c <xQueueReceive+0x30>
	__asm volatile
 80044f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044fa:	f383 8811 	msr	BASEPRI, r3
 80044fe:	f3bf 8f6f 	isb	sy
 8004502:	f3bf 8f4f 	dsb	sy
 8004506:	623b      	str	r3, [r7, #32]
}
 8004508:	bf00      	nop
 800450a:	e7fe      	b.n	800450a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d103      	bne.n	800451a <xQueueReceive+0x3e>
 8004512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004516:	2b00      	cmp	r3, #0
 8004518:	d101      	bne.n	800451e <xQueueReceive+0x42>
 800451a:	2301      	movs	r3, #1
 800451c:	e000      	b.n	8004520 <xQueueReceive+0x44>
 800451e:	2300      	movs	r3, #0
 8004520:	2b00      	cmp	r3, #0
 8004522:	d10a      	bne.n	800453a <xQueueReceive+0x5e>
	__asm volatile
 8004524:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004528:	f383 8811 	msr	BASEPRI, r3
 800452c:	f3bf 8f6f 	isb	sy
 8004530:	f3bf 8f4f 	dsb	sy
 8004534:	61fb      	str	r3, [r7, #28]
}
 8004536:	bf00      	nop
 8004538:	e7fe      	b.n	8004538 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800453a:	f001 f8f7 	bl	800572c <xTaskGetSchedulerState>
 800453e:	4603      	mov	r3, r0
 8004540:	2b00      	cmp	r3, #0
 8004542:	d102      	bne.n	800454a <xQueueReceive+0x6e>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d101      	bne.n	800454e <xQueueReceive+0x72>
 800454a:	2301      	movs	r3, #1
 800454c:	e000      	b.n	8004550 <xQueueReceive+0x74>
 800454e:	2300      	movs	r3, #0
 8004550:	2b00      	cmp	r3, #0
 8004552:	d10a      	bne.n	800456a <xQueueReceive+0x8e>
	__asm volatile
 8004554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004558:	f383 8811 	msr	BASEPRI, r3
 800455c:	f3bf 8f6f 	isb	sy
 8004560:	f3bf 8f4f 	dsb	sy
 8004564:	61bb      	str	r3, [r7, #24]
}
 8004566:	bf00      	nop
 8004568:	e7fe      	b.n	8004568 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800456a:	f002 f82b 	bl	80065c4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800456e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004570:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004572:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004576:	2b00      	cmp	r3, #0
 8004578:	d01f      	beq.n	80045ba <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800457a:	68b9      	ldr	r1, [r7, #8]
 800457c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800457e:	f000 f9b3 	bl	80048e8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004584:	1e5a      	subs	r2, r3, #1
 8004586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004588:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800458a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800458c:	691b      	ldr	r3, [r3, #16]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d00f      	beq.n	80045b2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004594:	3310      	adds	r3, #16
 8004596:	4618      	mov	r0, r3
 8004598:	f000 ff0a 	bl	80053b0 <xTaskRemoveFromEventList>
 800459c:	4603      	mov	r3, r0
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d007      	beq.n	80045b2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80045a2:	4b3d      	ldr	r3, [pc, #244]	; (8004698 <xQueueReceive+0x1bc>)
 80045a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045a8:	601a      	str	r2, [r3, #0]
 80045aa:	f3bf 8f4f 	dsb	sy
 80045ae:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80045b2:	f002 f837 	bl	8006624 <vPortExitCritical>
				return pdPASS;
 80045b6:	2301      	movs	r3, #1
 80045b8:	e069      	b.n	800468e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d103      	bne.n	80045c8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80045c0:	f002 f830 	bl	8006624 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80045c4:	2300      	movs	r3, #0
 80045c6:	e062      	b.n	800468e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80045c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d106      	bne.n	80045dc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80045ce:	f107 0310 	add.w	r3, r7, #16
 80045d2:	4618      	mov	r0, r3
 80045d4:	f000 ff50 	bl	8005478 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80045d8:	2301      	movs	r3, #1
 80045da:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80045dc:	f002 f822 	bl	8006624 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80045e0:	f000 fcc2 	bl	8004f68 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80045e4:	f001 ffee 	bl	80065c4 <vPortEnterCritical>
 80045e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045ea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80045ee:	b25b      	sxtb	r3, r3
 80045f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80045f4:	d103      	bne.n	80045fe <xQueueReceive+0x122>
 80045f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045f8:	2200      	movs	r2, #0
 80045fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80045fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004600:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004604:	b25b      	sxtb	r3, r3
 8004606:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800460a:	d103      	bne.n	8004614 <xQueueReceive+0x138>
 800460c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800460e:	2200      	movs	r2, #0
 8004610:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004614:	f002 f806 	bl	8006624 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004618:	1d3a      	adds	r2, r7, #4
 800461a:	f107 0310 	add.w	r3, r7, #16
 800461e:	4611      	mov	r1, r2
 8004620:	4618      	mov	r0, r3
 8004622:	f000 ff3f 	bl	80054a4 <xTaskCheckForTimeOut>
 8004626:	4603      	mov	r3, r0
 8004628:	2b00      	cmp	r3, #0
 800462a:	d123      	bne.n	8004674 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800462c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800462e:	f000 f9d3 	bl	80049d8 <prvIsQueueEmpty>
 8004632:	4603      	mov	r3, r0
 8004634:	2b00      	cmp	r3, #0
 8004636:	d017      	beq.n	8004668 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800463a:	3324      	adds	r3, #36	; 0x24
 800463c:	687a      	ldr	r2, [r7, #4]
 800463e:	4611      	mov	r1, r2
 8004640:	4618      	mov	r0, r3
 8004642:	f000 fe65 	bl	8005310 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004646:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004648:	f000 f974 	bl	8004934 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800464c:	f000 fc9a 	bl	8004f84 <xTaskResumeAll>
 8004650:	4603      	mov	r3, r0
 8004652:	2b00      	cmp	r3, #0
 8004654:	d189      	bne.n	800456a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004656:	4b10      	ldr	r3, [pc, #64]	; (8004698 <xQueueReceive+0x1bc>)
 8004658:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800465c:	601a      	str	r2, [r3, #0]
 800465e:	f3bf 8f4f 	dsb	sy
 8004662:	f3bf 8f6f 	isb	sy
 8004666:	e780      	b.n	800456a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004668:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800466a:	f000 f963 	bl	8004934 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800466e:	f000 fc89 	bl	8004f84 <xTaskResumeAll>
 8004672:	e77a      	b.n	800456a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004674:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004676:	f000 f95d 	bl	8004934 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800467a:	f000 fc83 	bl	8004f84 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800467e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004680:	f000 f9aa 	bl	80049d8 <prvIsQueueEmpty>
 8004684:	4603      	mov	r3, r0
 8004686:	2b00      	cmp	r3, #0
 8004688:	f43f af6f 	beq.w	800456a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800468c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800468e:	4618      	mov	r0, r3
 8004690:	3730      	adds	r7, #48	; 0x30
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}
 8004696:	bf00      	nop
 8004698:	e000ed04 	.word	0xe000ed04

0800469c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b08e      	sub	sp, #56	; 0x38
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	60f8      	str	r0, [r7, #12]
 80046a4:	60b9      	str	r1, [r7, #8]
 80046a6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80046ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d10a      	bne.n	80046c8 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80046b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046b6:	f383 8811 	msr	BASEPRI, r3
 80046ba:	f3bf 8f6f 	isb	sy
 80046be:	f3bf 8f4f 	dsb	sy
 80046c2:	623b      	str	r3, [r7, #32]
}
 80046c4:	bf00      	nop
 80046c6:	e7fe      	b.n	80046c6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d103      	bne.n	80046d6 <xQueueReceiveFromISR+0x3a>
 80046ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d101      	bne.n	80046da <xQueueReceiveFromISR+0x3e>
 80046d6:	2301      	movs	r3, #1
 80046d8:	e000      	b.n	80046dc <xQueueReceiveFromISR+0x40>
 80046da:	2300      	movs	r3, #0
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d10a      	bne.n	80046f6 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80046e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046e4:	f383 8811 	msr	BASEPRI, r3
 80046e8:	f3bf 8f6f 	isb	sy
 80046ec:	f3bf 8f4f 	dsb	sy
 80046f0:	61fb      	str	r3, [r7, #28]
}
 80046f2:	bf00      	nop
 80046f4:	e7fe      	b.n	80046f4 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80046f6:	f002 f847 	bl	8006788 <vPortValidateInterruptPriority>
	__asm volatile
 80046fa:	f3ef 8211 	mrs	r2, BASEPRI
 80046fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004702:	f383 8811 	msr	BASEPRI, r3
 8004706:	f3bf 8f6f 	isb	sy
 800470a:	f3bf 8f4f 	dsb	sy
 800470e:	61ba      	str	r2, [r7, #24]
 8004710:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8004712:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004714:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800471a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800471c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800471e:	2b00      	cmp	r3, #0
 8004720:	d02f      	beq.n	8004782 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8004722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004724:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004728:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800472c:	68b9      	ldr	r1, [r7, #8]
 800472e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004730:	f000 f8da 	bl	80048e8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004736:	1e5a      	subs	r2, r3, #1
 8004738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800473a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800473c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004740:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004744:	d112      	bne.n	800476c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004748:	691b      	ldr	r3, [r3, #16]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d016      	beq.n	800477c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800474e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004750:	3310      	adds	r3, #16
 8004752:	4618      	mov	r0, r3
 8004754:	f000 fe2c 	bl	80053b0 <xTaskRemoveFromEventList>
 8004758:	4603      	mov	r3, r0
 800475a:	2b00      	cmp	r3, #0
 800475c:	d00e      	beq.n	800477c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d00b      	beq.n	800477c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2201      	movs	r2, #1
 8004768:	601a      	str	r2, [r3, #0]
 800476a:	e007      	b.n	800477c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800476c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004770:	3301      	adds	r3, #1
 8004772:	b2db      	uxtb	r3, r3
 8004774:	b25a      	sxtb	r2, r3
 8004776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004778:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800477c:	2301      	movs	r3, #1
 800477e:	637b      	str	r3, [r7, #52]	; 0x34
 8004780:	e001      	b.n	8004786 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8004782:	2300      	movs	r3, #0
 8004784:	637b      	str	r3, [r7, #52]	; 0x34
 8004786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004788:	613b      	str	r3, [r7, #16]
	__asm volatile
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	f383 8811 	msr	BASEPRI, r3
}
 8004790:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004792:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004794:	4618      	mov	r0, r3
 8004796:	3738      	adds	r7, #56	; 0x38
 8004798:	46bd      	mov	sp, r7
 800479a:	bd80      	pop	{r7, pc}

0800479c <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b084      	sub	sp, #16
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d10a      	bne.n	80047c0 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 80047aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047ae:	f383 8811 	msr	BASEPRI, r3
 80047b2:	f3bf 8f6f 	isb	sy
 80047b6:	f3bf 8f4f 	dsb	sy
 80047ba:	60bb      	str	r3, [r7, #8]
}
 80047bc:	bf00      	nop
 80047be:	e7fe      	b.n	80047be <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 80047c0:	f001 ff00 	bl	80065c4 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047c8:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 80047ca:	f001 ff2b 	bl	8006624 <vPortExitCritical>

	return uxReturn;
 80047ce:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80047d0:	4618      	mov	r0, r3
 80047d2:	3710      	adds	r7, #16
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd80      	pop	{r7, pc}

080047d8 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 80047d8:	b480      	push	{r7}
 80047da:	b087      	sub	sp, #28
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 80047e4:	697b      	ldr	r3, [r7, #20]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d10a      	bne.n	8004800 <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 80047ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047ee:	f383 8811 	msr	BASEPRI, r3
 80047f2:	f3bf 8f6f 	isb	sy
 80047f6:	f3bf 8f4f 	dsb	sy
 80047fa:	60fb      	str	r3, [r7, #12]
}
 80047fc:	bf00      	nop
 80047fe:	e7fe      	b.n	80047fe <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004804:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8004806:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8004808:	4618      	mov	r0, r3
 800480a:	371c      	adds	r7, #28
 800480c:	46bd      	mov	sp, r7
 800480e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004812:	4770      	bx	lr

08004814 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b086      	sub	sp, #24
 8004818:	af00      	add	r7, sp, #0
 800481a:	60f8      	str	r0, [r7, #12]
 800481c:	60b9      	str	r1, [r7, #8]
 800481e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004820:	2300      	movs	r3, #0
 8004822:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004828:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800482e:	2b00      	cmp	r3, #0
 8004830:	d10d      	bne.n	800484e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d14d      	bne.n	80048d6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	689b      	ldr	r3, [r3, #8]
 800483e:	4618      	mov	r0, r3
 8004840:	f000 ff92 	bl	8005768 <xTaskPriorityDisinherit>
 8004844:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	2200      	movs	r2, #0
 800484a:	609a      	str	r2, [r3, #8]
 800484c:	e043      	b.n	80048d6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d119      	bne.n	8004888 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	6858      	ldr	r0, [r3, #4]
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800485c:	461a      	mov	r2, r3
 800485e:	68b9      	ldr	r1, [r7, #8]
 8004860:	f002 f9e6 	bl	8006c30 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	685a      	ldr	r2, [r3, #4]
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800486c:	441a      	add	r2, r3
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	685a      	ldr	r2, [r3, #4]
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	689b      	ldr	r3, [r3, #8]
 800487a:	429a      	cmp	r2, r3
 800487c:	d32b      	bcc.n	80048d6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681a      	ldr	r2, [r3, #0]
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	605a      	str	r2, [r3, #4]
 8004886:	e026      	b.n	80048d6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	68d8      	ldr	r0, [r3, #12]
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004890:	461a      	mov	r2, r3
 8004892:	68b9      	ldr	r1, [r7, #8]
 8004894:	f002 f9cc 	bl	8006c30 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	68da      	ldr	r2, [r3, #12]
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a0:	425b      	negs	r3, r3
 80048a2:	441a      	add	r2, r3
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	68da      	ldr	r2, [r3, #12]
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	429a      	cmp	r2, r3
 80048b2:	d207      	bcs.n	80048c4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	689a      	ldr	r2, [r3, #8]
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048bc:	425b      	negs	r3, r3
 80048be:	441a      	add	r2, r3
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2b02      	cmp	r3, #2
 80048c8:	d105      	bne.n	80048d6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d002      	beq.n	80048d6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80048d0:	693b      	ldr	r3, [r7, #16]
 80048d2:	3b01      	subs	r3, #1
 80048d4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	1c5a      	adds	r2, r3, #1
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80048de:	697b      	ldr	r3, [r7, #20]
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	3718      	adds	r7, #24
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd80      	pop	{r7, pc}

080048e8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b082      	sub	sp, #8
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
 80048f0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d018      	beq.n	800492c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	68da      	ldr	r2, [r3, #12]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004902:	441a      	add	r2, r3
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	68da      	ldr	r2, [r3, #12]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	689b      	ldr	r3, [r3, #8]
 8004910:	429a      	cmp	r2, r3
 8004912:	d303      	bcc.n	800491c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681a      	ldr	r2, [r3, #0]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	68d9      	ldr	r1, [r3, #12]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004924:	461a      	mov	r2, r3
 8004926:	6838      	ldr	r0, [r7, #0]
 8004928:	f002 f982 	bl	8006c30 <memcpy>
	}
}
 800492c:	bf00      	nop
 800492e:	3708      	adds	r7, #8
 8004930:	46bd      	mov	sp, r7
 8004932:	bd80      	pop	{r7, pc}

08004934 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b084      	sub	sp, #16
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800493c:	f001 fe42 	bl	80065c4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004946:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004948:	e011      	b.n	800496e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800494e:	2b00      	cmp	r3, #0
 8004950:	d012      	beq.n	8004978 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	3324      	adds	r3, #36	; 0x24
 8004956:	4618      	mov	r0, r3
 8004958:	f000 fd2a 	bl	80053b0 <xTaskRemoveFromEventList>
 800495c:	4603      	mov	r3, r0
 800495e:	2b00      	cmp	r3, #0
 8004960:	d001      	beq.n	8004966 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004962:	f000 fe01 	bl	8005568 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004966:	7bfb      	ldrb	r3, [r7, #15]
 8004968:	3b01      	subs	r3, #1
 800496a:	b2db      	uxtb	r3, r3
 800496c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800496e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004972:	2b00      	cmp	r3, #0
 8004974:	dce9      	bgt.n	800494a <prvUnlockQueue+0x16>
 8004976:	e000      	b.n	800497a <prvUnlockQueue+0x46>
					break;
 8004978:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	22ff      	movs	r2, #255	; 0xff
 800497e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004982:	f001 fe4f 	bl	8006624 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004986:	f001 fe1d 	bl	80065c4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004990:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004992:	e011      	b.n	80049b8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	691b      	ldr	r3, [r3, #16]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d012      	beq.n	80049c2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	3310      	adds	r3, #16
 80049a0:	4618      	mov	r0, r3
 80049a2:	f000 fd05 	bl	80053b0 <xTaskRemoveFromEventList>
 80049a6:	4603      	mov	r3, r0
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d001      	beq.n	80049b0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80049ac:	f000 fddc 	bl	8005568 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80049b0:	7bbb      	ldrb	r3, [r7, #14]
 80049b2:	3b01      	subs	r3, #1
 80049b4:	b2db      	uxtb	r3, r3
 80049b6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80049b8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	dce9      	bgt.n	8004994 <prvUnlockQueue+0x60>
 80049c0:	e000      	b.n	80049c4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80049c2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	22ff      	movs	r2, #255	; 0xff
 80049c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80049cc:	f001 fe2a 	bl	8006624 <vPortExitCritical>
}
 80049d0:	bf00      	nop
 80049d2:	3710      	adds	r7, #16
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bd80      	pop	{r7, pc}

080049d8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b084      	sub	sp, #16
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80049e0:	f001 fdf0 	bl	80065c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d102      	bne.n	80049f2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80049ec:	2301      	movs	r3, #1
 80049ee:	60fb      	str	r3, [r7, #12]
 80049f0:	e001      	b.n	80049f6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80049f2:	2300      	movs	r3, #0
 80049f4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80049f6:	f001 fe15 	bl	8006624 <vPortExitCritical>

	return xReturn;
 80049fa:	68fb      	ldr	r3, [r7, #12]
}
 80049fc:	4618      	mov	r0, r3
 80049fe:	3710      	adds	r7, #16
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bd80      	pop	{r7, pc}

08004a04 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b084      	sub	sp, #16
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004a0c:	f001 fdda 	bl	80065c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a18:	429a      	cmp	r2, r3
 8004a1a:	d102      	bne.n	8004a22 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	60fb      	str	r3, [r7, #12]
 8004a20:	e001      	b.n	8004a26 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004a22:	2300      	movs	r3, #0
 8004a24:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004a26:	f001 fdfd 	bl	8006624 <vPortExitCritical>

	return xReturn;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
}
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	3710      	adds	r7, #16
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bd80      	pop	{r7, pc}

08004a34 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004a34:	b480      	push	{r7}
 8004a36:	b085      	sub	sp, #20
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
 8004a3c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004a3e:	2300      	movs	r3, #0
 8004a40:	60fb      	str	r3, [r7, #12]
 8004a42:	e014      	b.n	8004a6e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004a44:	4a0f      	ldr	r2, [pc, #60]	; (8004a84 <vQueueAddToRegistry+0x50>)
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d10b      	bne.n	8004a68 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004a50:	490c      	ldr	r1, [pc, #48]	; (8004a84 <vQueueAddToRegistry+0x50>)
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	683a      	ldr	r2, [r7, #0]
 8004a56:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004a5a:	4a0a      	ldr	r2, [pc, #40]	; (8004a84 <vQueueAddToRegistry+0x50>)
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	00db      	lsls	r3, r3, #3
 8004a60:	4413      	add	r3, r2
 8004a62:	687a      	ldr	r2, [r7, #4]
 8004a64:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004a66:	e006      	b.n	8004a76 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	3301      	adds	r3, #1
 8004a6c:	60fb      	str	r3, [r7, #12]
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	2b07      	cmp	r3, #7
 8004a72:	d9e7      	bls.n	8004a44 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004a74:	bf00      	nop
 8004a76:	bf00      	nop
 8004a78:	3714      	adds	r7, #20
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a80:	4770      	bx	lr
 8004a82:	bf00      	nop
 8004a84:	2000095c 	.word	0x2000095c

08004a88 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b086      	sub	sp, #24
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	60f8      	str	r0, [r7, #12]
 8004a90:	60b9      	str	r1, [r7, #8]
 8004a92:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004a98:	f001 fd94 	bl	80065c4 <vPortEnterCritical>
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004aa2:	b25b      	sxtb	r3, r3
 8004aa4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004aa8:	d103      	bne.n	8004ab2 <vQueueWaitForMessageRestricted+0x2a>
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	2200      	movs	r2, #0
 8004aae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004ab8:	b25b      	sxtb	r3, r3
 8004aba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004abe:	d103      	bne.n	8004ac8 <vQueueWaitForMessageRestricted+0x40>
 8004ac0:	697b      	ldr	r3, [r7, #20]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004ac8:	f001 fdac 	bl	8006624 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004acc:	697b      	ldr	r3, [r7, #20]
 8004ace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d106      	bne.n	8004ae2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	3324      	adds	r3, #36	; 0x24
 8004ad8:	687a      	ldr	r2, [r7, #4]
 8004ada:	68b9      	ldr	r1, [r7, #8]
 8004adc:	4618      	mov	r0, r3
 8004ade:	f000 fc3b 	bl	8005358 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004ae2:	6978      	ldr	r0, [r7, #20]
 8004ae4:	f7ff ff26 	bl	8004934 <prvUnlockQueue>
	}
 8004ae8:	bf00      	nop
 8004aea:	3718      	adds	r7, #24
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bd80      	pop	{r7, pc}

08004af0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b08e      	sub	sp, #56	; 0x38
 8004af4:	af04      	add	r7, sp, #16
 8004af6:	60f8      	str	r0, [r7, #12]
 8004af8:	60b9      	str	r1, [r7, #8]
 8004afa:	607a      	str	r2, [r7, #4]
 8004afc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004afe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d10a      	bne.n	8004b1a <xTaskCreateStatic+0x2a>
	__asm volatile
 8004b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b08:	f383 8811 	msr	BASEPRI, r3
 8004b0c:	f3bf 8f6f 	isb	sy
 8004b10:	f3bf 8f4f 	dsb	sy
 8004b14:	623b      	str	r3, [r7, #32]
}
 8004b16:	bf00      	nop
 8004b18:	e7fe      	b.n	8004b18 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004b1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d10a      	bne.n	8004b36 <xTaskCreateStatic+0x46>
	__asm volatile
 8004b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b24:	f383 8811 	msr	BASEPRI, r3
 8004b28:	f3bf 8f6f 	isb	sy
 8004b2c:	f3bf 8f4f 	dsb	sy
 8004b30:	61fb      	str	r3, [r7, #28]
}
 8004b32:	bf00      	nop
 8004b34:	e7fe      	b.n	8004b34 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004b36:	235c      	movs	r3, #92	; 0x5c
 8004b38:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004b3a:	693b      	ldr	r3, [r7, #16]
 8004b3c:	2b5c      	cmp	r3, #92	; 0x5c
 8004b3e:	d00a      	beq.n	8004b56 <xTaskCreateStatic+0x66>
	__asm volatile
 8004b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b44:	f383 8811 	msr	BASEPRI, r3
 8004b48:	f3bf 8f6f 	isb	sy
 8004b4c:	f3bf 8f4f 	dsb	sy
 8004b50:	61bb      	str	r3, [r7, #24]
}
 8004b52:	bf00      	nop
 8004b54:	e7fe      	b.n	8004b54 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004b56:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d01e      	beq.n	8004b9c <xTaskCreateStatic+0xac>
 8004b5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d01b      	beq.n	8004b9c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004b64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b66:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004b6c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b70:	2202      	movs	r2, #2
 8004b72:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004b76:	2300      	movs	r3, #0
 8004b78:	9303      	str	r3, [sp, #12]
 8004b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b7c:	9302      	str	r3, [sp, #8]
 8004b7e:	f107 0314 	add.w	r3, r7, #20
 8004b82:	9301      	str	r3, [sp, #4]
 8004b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b86:	9300      	str	r3, [sp, #0]
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	687a      	ldr	r2, [r7, #4]
 8004b8c:	68b9      	ldr	r1, [r7, #8]
 8004b8e:	68f8      	ldr	r0, [r7, #12]
 8004b90:	f000 f850 	bl	8004c34 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004b94:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004b96:	f000 f8dd 	bl	8004d54 <prvAddNewTaskToReadyList>
 8004b9a:	e001      	b.n	8004ba0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004ba0:	697b      	ldr	r3, [r7, #20]
	}
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	3728      	adds	r7, #40	; 0x28
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bd80      	pop	{r7, pc}

08004baa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004baa:	b580      	push	{r7, lr}
 8004bac:	b08c      	sub	sp, #48	; 0x30
 8004bae:	af04      	add	r7, sp, #16
 8004bb0:	60f8      	str	r0, [r7, #12]
 8004bb2:	60b9      	str	r1, [r7, #8]
 8004bb4:	603b      	str	r3, [r7, #0]
 8004bb6:	4613      	mov	r3, r2
 8004bb8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004bba:	88fb      	ldrh	r3, [r7, #6]
 8004bbc:	009b      	lsls	r3, r3, #2
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	f001 fe22 	bl	8006808 <pvPortMalloc>
 8004bc4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d00e      	beq.n	8004bea <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004bcc:	205c      	movs	r0, #92	; 0x5c
 8004bce:	f001 fe1b 	bl	8006808 <pvPortMalloc>
 8004bd2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004bd4:	69fb      	ldr	r3, [r7, #28]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d003      	beq.n	8004be2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004bda:	69fb      	ldr	r3, [r7, #28]
 8004bdc:	697a      	ldr	r2, [r7, #20]
 8004bde:	631a      	str	r2, [r3, #48]	; 0x30
 8004be0:	e005      	b.n	8004bee <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004be2:	6978      	ldr	r0, [r7, #20]
 8004be4:	f001 fedc 	bl	80069a0 <vPortFree>
 8004be8:	e001      	b.n	8004bee <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004bea:	2300      	movs	r3, #0
 8004bec:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004bee:	69fb      	ldr	r3, [r7, #28]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d017      	beq.n	8004c24 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004bf4:	69fb      	ldr	r3, [r7, #28]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004bfc:	88fa      	ldrh	r2, [r7, #6]
 8004bfe:	2300      	movs	r3, #0
 8004c00:	9303      	str	r3, [sp, #12]
 8004c02:	69fb      	ldr	r3, [r7, #28]
 8004c04:	9302      	str	r3, [sp, #8]
 8004c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c08:	9301      	str	r3, [sp, #4]
 8004c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c0c:	9300      	str	r3, [sp, #0]
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	68b9      	ldr	r1, [r7, #8]
 8004c12:	68f8      	ldr	r0, [r7, #12]
 8004c14:	f000 f80e 	bl	8004c34 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004c18:	69f8      	ldr	r0, [r7, #28]
 8004c1a:	f000 f89b 	bl	8004d54 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	61bb      	str	r3, [r7, #24]
 8004c22:	e002      	b.n	8004c2a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004c24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004c28:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004c2a:	69bb      	ldr	r3, [r7, #24]
	}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	3720      	adds	r7, #32
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bd80      	pop	{r7, pc}

08004c34 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b088      	sub	sp, #32
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	60f8      	str	r0, [r7, #12]
 8004c3c:	60b9      	str	r1, [r7, #8]
 8004c3e:	607a      	str	r2, [r7, #4]
 8004c40:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c44:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	009b      	lsls	r3, r3, #2
 8004c4a:	461a      	mov	r2, r3
 8004c4c:	21a5      	movs	r1, #165	; 0xa5
 8004c4e:	f001 fffd 	bl	8006c4c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004c5c:	3b01      	subs	r3, #1
 8004c5e:	009b      	lsls	r3, r3, #2
 8004c60:	4413      	add	r3, r2
 8004c62:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004c64:	69bb      	ldr	r3, [r7, #24]
 8004c66:	f023 0307 	bic.w	r3, r3, #7
 8004c6a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004c6c:	69bb      	ldr	r3, [r7, #24]
 8004c6e:	f003 0307 	and.w	r3, r3, #7
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d00a      	beq.n	8004c8c <prvInitialiseNewTask+0x58>
	__asm volatile
 8004c76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c7a:	f383 8811 	msr	BASEPRI, r3
 8004c7e:	f3bf 8f6f 	isb	sy
 8004c82:	f3bf 8f4f 	dsb	sy
 8004c86:	617b      	str	r3, [r7, #20]
}
 8004c88:	bf00      	nop
 8004c8a:	e7fe      	b.n	8004c8a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d01f      	beq.n	8004cd2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004c92:	2300      	movs	r3, #0
 8004c94:	61fb      	str	r3, [r7, #28]
 8004c96:	e012      	b.n	8004cbe <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004c98:	68ba      	ldr	r2, [r7, #8]
 8004c9a:	69fb      	ldr	r3, [r7, #28]
 8004c9c:	4413      	add	r3, r2
 8004c9e:	7819      	ldrb	r1, [r3, #0]
 8004ca0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ca2:	69fb      	ldr	r3, [r7, #28]
 8004ca4:	4413      	add	r3, r2
 8004ca6:	3334      	adds	r3, #52	; 0x34
 8004ca8:	460a      	mov	r2, r1
 8004caa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004cac:	68ba      	ldr	r2, [r7, #8]
 8004cae:	69fb      	ldr	r3, [r7, #28]
 8004cb0:	4413      	add	r3, r2
 8004cb2:	781b      	ldrb	r3, [r3, #0]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d006      	beq.n	8004cc6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004cb8:	69fb      	ldr	r3, [r7, #28]
 8004cba:	3301      	adds	r3, #1
 8004cbc:	61fb      	str	r3, [r7, #28]
 8004cbe:	69fb      	ldr	r3, [r7, #28]
 8004cc0:	2b0f      	cmp	r3, #15
 8004cc2:	d9e9      	bls.n	8004c98 <prvInitialiseNewTask+0x64>
 8004cc4:	e000      	b.n	8004cc8 <prvInitialiseNewTask+0x94>
			{
				break;
 8004cc6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004cc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cca:	2200      	movs	r2, #0
 8004ccc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004cd0:	e003      	b.n	8004cda <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cdc:	2b37      	cmp	r3, #55	; 0x37
 8004cde:	d901      	bls.n	8004ce4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004ce0:	2337      	movs	r3, #55	; 0x37
 8004ce2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ce6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ce8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004cee:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cf8:	3304      	adds	r3, #4
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f7ff f882 	bl	8003e04 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004d00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d02:	3318      	adds	r3, #24
 8004d04:	4618      	mov	r0, r3
 8004d06:	f7ff f87d 	bl	8003e04 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d0e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d12:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d18:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d1e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d22:	2200      	movs	r2, #0
 8004d24:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d28:	2200      	movs	r2, #0
 8004d2a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004d2e:	683a      	ldr	r2, [r7, #0]
 8004d30:	68f9      	ldr	r1, [r7, #12]
 8004d32:	69b8      	ldr	r0, [r7, #24]
 8004d34:	f001 fb16 	bl	8006364 <pxPortInitialiseStack>
 8004d38:	4602      	mov	r2, r0
 8004d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d3c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d002      	beq.n	8004d4a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d48:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004d4a:	bf00      	nop
 8004d4c:	3720      	adds	r7, #32
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}
	...

08004d54 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b082      	sub	sp, #8
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004d5c:	f001 fc32 	bl	80065c4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004d60:	4b2d      	ldr	r3, [pc, #180]	; (8004e18 <prvAddNewTaskToReadyList+0xc4>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	3301      	adds	r3, #1
 8004d66:	4a2c      	ldr	r2, [pc, #176]	; (8004e18 <prvAddNewTaskToReadyList+0xc4>)
 8004d68:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004d6a:	4b2c      	ldr	r3, [pc, #176]	; (8004e1c <prvAddNewTaskToReadyList+0xc8>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d109      	bne.n	8004d86 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004d72:	4a2a      	ldr	r2, [pc, #168]	; (8004e1c <prvAddNewTaskToReadyList+0xc8>)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004d78:	4b27      	ldr	r3, [pc, #156]	; (8004e18 <prvAddNewTaskToReadyList+0xc4>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	2b01      	cmp	r3, #1
 8004d7e:	d110      	bne.n	8004da2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004d80:	f000 fc16 	bl	80055b0 <prvInitialiseTaskLists>
 8004d84:	e00d      	b.n	8004da2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004d86:	4b26      	ldr	r3, [pc, #152]	; (8004e20 <prvAddNewTaskToReadyList+0xcc>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d109      	bne.n	8004da2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004d8e:	4b23      	ldr	r3, [pc, #140]	; (8004e1c <prvAddNewTaskToReadyList+0xc8>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d98:	429a      	cmp	r2, r3
 8004d9a:	d802      	bhi.n	8004da2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004d9c:	4a1f      	ldr	r2, [pc, #124]	; (8004e1c <prvAddNewTaskToReadyList+0xc8>)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004da2:	4b20      	ldr	r3, [pc, #128]	; (8004e24 <prvAddNewTaskToReadyList+0xd0>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	3301      	adds	r3, #1
 8004da8:	4a1e      	ldr	r2, [pc, #120]	; (8004e24 <prvAddNewTaskToReadyList+0xd0>)
 8004daa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004dac:	4b1d      	ldr	r3, [pc, #116]	; (8004e24 <prvAddNewTaskToReadyList+0xd0>)
 8004dae:	681a      	ldr	r2, [r3, #0]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004db8:	4b1b      	ldr	r3, [pc, #108]	; (8004e28 <prvAddNewTaskToReadyList+0xd4>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	429a      	cmp	r2, r3
 8004dbe:	d903      	bls.n	8004dc8 <prvAddNewTaskToReadyList+0x74>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dc4:	4a18      	ldr	r2, [pc, #96]	; (8004e28 <prvAddNewTaskToReadyList+0xd4>)
 8004dc6:	6013      	str	r3, [r2, #0]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dcc:	4613      	mov	r3, r2
 8004dce:	009b      	lsls	r3, r3, #2
 8004dd0:	4413      	add	r3, r2
 8004dd2:	009b      	lsls	r3, r3, #2
 8004dd4:	4a15      	ldr	r2, [pc, #84]	; (8004e2c <prvAddNewTaskToReadyList+0xd8>)
 8004dd6:	441a      	add	r2, r3
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	3304      	adds	r3, #4
 8004ddc:	4619      	mov	r1, r3
 8004dde:	4610      	mov	r0, r2
 8004de0:	f7ff f81d 	bl	8003e1e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004de4:	f001 fc1e 	bl	8006624 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004de8:	4b0d      	ldr	r3, [pc, #52]	; (8004e20 <prvAddNewTaskToReadyList+0xcc>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d00e      	beq.n	8004e0e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004df0:	4b0a      	ldr	r3, [pc, #40]	; (8004e1c <prvAddNewTaskToReadyList+0xc8>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dfa:	429a      	cmp	r2, r3
 8004dfc:	d207      	bcs.n	8004e0e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004dfe:	4b0c      	ldr	r3, [pc, #48]	; (8004e30 <prvAddNewTaskToReadyList+0xdc>)
 8004e00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e04:	601a      	str	r2, [r3, #0]
 8004e06:	f3bf 8f4f 	dsb	sy
 8004e0a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004e0e:	bf00      	nop
 8004e10:	3708      	adds	r7, #8
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd80      	pop	{r7, pc}
 8004e16:	bf00      	nop
 8004e18:	20000e70 	.word	0x20000e70
 8004e1c:	2000099c 	.word	0x2000099c
 8004e20:	20000e7c 	.word	0x20000e7c
 8004e24:	20000e8c 	.word	0x20000e8c
 8004e28:	20000e78 	.word	0x20000e78
 8004e2c:	200009a0 	.word	0x200009a0
 8004e30:	e000ed04 	.word	0xe000ed04

08004e34 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b084      	sub	sp, #16
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d017      	beq.n	8004e76 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004e46:	4b13      	ldr	r3, [pc, #76]	; (8004e94 <vTaskDelay+0x60>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d00a      	beq.n	8004e64 <vTaskDelay+0x30>
	__asm volatile
 8004e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e52:	f383 8811 	msr	BASEPRI, r3
 8004e56:	f3bf 8f6f 	isb	sy
 8004e5a:	f3bf 8f4f 	dsb	sy
 8004e5e:	60bb      	str	r3, [r7, #8]
}
 8004e60:	bf00      	nop
 8004e62:	e7fe      	b.n	8004e62 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004e64:	f000 f880 	bl	8004f68 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004e68:	2100      	movs	r1, #0
 8004e6a:	6878      	ldr	r0, [r7, #4]
 8004e6c:	f000 fed8 	bl	8005c20 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004e70:	f000 f888 	bl	8004f84 <xTaskResumeAll>
 8004e74:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d107      	bne.n	8004e8c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004e7c:	4b06      	ldr	r3, [pc, #24]	; (8004e98 <vTaskDelay+0x64>)
 8004e7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e82:	601a      	str	r2, [r3, #0]
 8004e84:	f3bf 8f4f 	dsb	sy
 8004e88:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004e8c:	bf00      	nop
 8004e8e:	3710      	adds	r7, #16
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bd80      	pop	{r7, pc}
 8004e94:	20000e98 	.word	0x20000e98
 8004e98:	e000ed04 	.word	0xe000ed04

08004e9c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b08a      	sub	sp, #40	; 0x28
 8004ea0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004eaa:	463a      	mov	r2, r7
 8004eac:	1d39      	adds	r1, r7, #4
 8004eae:	f107 0308 	add.w	r3, r7, #8
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	f7fe ff52 	bl	8003d5c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004eb8:	6839      	ldr	r1, [r7, #0]
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	68ba      	ldr	r2, [r7, #8]
 8004ebe:	9202      	str	r2, [sp, #8]
 8004ec0:	9301      	str	r3, [sp, #4]
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	9300      	str	r3, [sp, #0]
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	460a      	mov	r2, r1
 8004eca:	4921      	ldr	r1, [pc, #132]	; (8004f50 <vTaskStartScheduler+0xb4>)
 8004ecc:	4821      	ldr	r0, [pc, #132]	; (8004f54 <vTaskStartScheduler+0xb8>)
 8004ece:	f7ff fe0f 	bl	8004af0 <xTaskCreateStatic>
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	4a20      	ldr	r2, [pc, #128]	; (8004f58 <vTaskStartScheduler+0xbc>)
 8004ed6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004ed8:	4b1f      	ldr	r3, [pc, #124]	; (8004f58 <vTaskStartScheduler+0xbc>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d002      	beq.n	8004ee6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	617b      	str	r3, [r7, #20]
 8004ee4:	e001      	b.n	8004eea <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004eea:	697b      	ldr	r3, [r7, #20]
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	d102      	bne.n	8004ef6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004ef0:	f000 feea 	bl	8005cc8 <xTimerCreateTimerTask>
 8004ef4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	2b01      	cmp	r3, #1
 8004efa:	d116      	bne.n	8004f2a <vTaskStartScheduler+0x8e>
	__asm volatile
 8004efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f00:	f383 8811 	msr	BASEPRI, r3
 8004f04:	f3bf 8f6f 	isb	sy
 8004f08:	f3bf 8f4f 	dsb	sy
 8004f0c:	613b      	str	r3, [r7, #16]
}
 8004f0e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004f10:	4b12      	ldr	r3, [pc, #72]	; (8004f5c <vTaskStartScheduler+0xc0>)
 8004f12:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004f16:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004f18:	4b11      	ldr	r3, [pc, #68]	; (8004f60 <vTaskStartScheduler+0xc4>)
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004f1e:	4b11      	ldr	r3, [pc, #68]	; (8004f64 <vTaskStartScheduler+0xc8>)
 8004f20:	2200      	movs	r2, #0
 8004f22:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004f24:	f001 faac 	bl	8006480 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004f28:	e00e      	b.n	8004f48 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004f2a:	697b      	ldr	r3, [r7, #20]
 8004f2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f30:	d10a      	bne.n	8004f48 <vTaskStartScheduler+0xac>
	__asm volatile
 8004f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f36:	f383 8811 	msr	BASEPRI, r3
 8004f3a:	f3bf 8f6f 	isb	sy
 8004f3e:	f3bf 8f4f 	dsb	sy
 8004f42:	60fb      	str	r3, [r7, #12]
}
 8004f44:	bf00      	nop
 8004f46:	e7fe      	b.n	8004f46 <vTaskStartScheduler+0xaa>
}
 8004f48:	bf00      	nop
 8004f4a:	3718      	adds	r7, #24
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bd80      	pop	{r7, pc}
 8004f50:	08007c74 	.word	0x08007c74
 8004f54:	08005581 	.word	0x08005581
 8004f58:	20000e94 	.word	0x20000e94
 8004f5c:	20000e90 	.word	0x20000e90
 8004f60:	20000e7c 	.word	0x20000e7c
 8004f64:	20000e74 	.word	0x20000e74

08004f68 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004f68:	b480      	push	{r7}
 8004f6a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004f6c:	4b04      	ldr	r3, [pc, #16]	; (8004f80 <vTaskSuspendAll+0x18>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	3301      	adds	r3, #1
 8004f72:	4a03      	ldr	r2, [pc, #12]	; (8004f80 <vTaskSuspendAll+0x18>)
 8004f74:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004f76:	bf00      	nop
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7e:	4770      	bx	lr
 8004f80:	20000e98 	.word	0x20000e98

08004f84 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b084      	sub	sp, #16
 8004f88:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004f8e:	2300      	movs	r3, #0
 8004f90:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004f92:	4b42      	ldr	r3, [pc, #264]	; (800509c <xTaskResumeAll+0x118>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d10a      	bne.n	8004fb0 <xTaskResumeAll+0x2c>
	__asm volatile
 8004f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f9e:	f383 8811 	msr	BASEPRI, r3
 8004fa2:	f3bf 8f6f 	isb	sy
 8004fa6:	f3bf 8f4f 	dsb	sy
 8004faa:	603b      	str	r3, [r7, #0]
}
 8004fac:	bf00      	nop
 8004fae:	e7fe      	b.n	8004fae <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004fb0:	f001 fb08 	bl	80065c4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004fb4:	4b39      	ldr	r3, [pc, #228]	; (800509c <xTaskResumeAll+0x118>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	3b01      	subs	r3, #1
 8004fba:	4a38      	ldr	r2, [pc, #224]	; (800509c <xTaskResumeAll+0x118>)
 8004fbc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004fbe:	4b37      	ldr	r3, [pc, #220]	; (800509c <xTaskResumeAll+0x118>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d162      	bne.n	800508c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004fc6:	4b36      	ldr	r3, [pc, #216]	; (80050a0 <xTaskResumeAll+0x11c>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d05e      	beq.n	800508c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004fce:	e02f      	b.n	8005030 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004fd0:	4b34      	ldr	r3, [pc, #208]	; (80050a4 <xTaskResumeAll+0x120>)
 8004fd2:	68db      	ldr	r3, [r3, #12]
 8004fd4:	68db      	ldr	r3, [r3, #12]
 8004fd6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	3318      	adds	r3, #24
 8004fdc:	4618      	mov	r0, r3
 8004fde:	f7fe ff7b 	bl	8003ed8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	3304      	adds	r3, #4
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	f7fe ff76 	bl	8003ed8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ff0:	4b2d      	ldr	r3, [pc, #180]	; (80050a8 <xTaskResumeAll+0x124>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	429a      	cmp	r2, r3
 8004ff6:	d903      	bls.n	8005000 <xTaskResumeAll+0x7c>
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ffc:	4a2a      	ldr	r2, [pc, #168]	; (80050a8 <xTaskResumeAll+0x124>)
 8004ffe:	6013      	str	r3, [r2, #0]
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005004:	4613      	mov	r3, r2
 8005006:	009b      	lsls	r3, r3, #2
 8005008:	4413      	add	r3, r2
 800500a:	009b      	lsls	r3, r3, #2
 800500c:	4a27      	ldr	r2, [pc, #156]	; (80050ac <xTaskResumeAll+0x128>)
 800500e:	441a      	add	r2, r3
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	3304      	adds	r3, #4
 8005014:	4619      	mov	r1, r3
 8005016:	4610      	mov	r0, r2
 8005018:	f7fe ff01 	bl	8003e1e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005020:	4b23      	ldr	r3, [pc, #140]	; (80050b0 <xTaskResumeAll+0x12c>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005026:	429a      	cmp	r2, r3
 8005028:	d302      	bcc.n	8005030 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800502a:	4b22      	ldr	r3, [pc, #136]	; (80050b4 <xTaskResumeAll+0x130>)
 800502c:	2201      	movs	r2, #1
 800502e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005030:	4b1c      	ldr	r3, [pc, #112]	; (80050a4 <xTaskResumeAll+0x120>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d1cb      	bne.n	8004fd0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d001      	beq.n	8005042 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800503e:	f000 fb55 	bl	80056ec <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005042:	4b1d      	ldr	r3, [pc, #116]	; (80050b8 <xTaskResumeAll+0x134>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d010      	beq.n	8005070 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800504e:	f000 f847 	bl	80050e0 <xTaskIncrementTick>
 8005052:	4603      	mov	r3, r0
 8005054:	2b00      	cmp	r3, #0
 8005056:	d002      	beq.n	800505e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005058:	4b16      	ldr	r3, [pc, #88]	; (80050b4 <xTaskResumeAll+0x130>)
 800505a:	2201      	movs	r2, #1
 800505c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	3b01      	subs	r3, #1
 8005062:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d1f1      	bne.n	800504e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800506a:	4b13      	ldr	r3, [pc, #76]	; (80050b8 <xTaskResumeAll+0x134>)
 800506c:	2200      	movs	r2, #0
 800506e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005070:	4b10      	ldr	r3, [pc, #64]	; (80050b4 <xTaskResumeAll+0x130>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d009      	beq.n	800508c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005078:	2301      	movs	r3, #1
 800507a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800507c:	4b0f      	ldr	r3, [pc, #60]	; (80050bc <xTaskResumeAll+0x138>)
 800507e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005082:	601a      	str	r2, [r3, #0]
 8005084:	f3bf 8f4f 	dsb	sy
 8005088:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800508c:	f001 faca 	bl	8006624 <vPortExitCritical>

	return xAlreadyYielded;
 8005090:	68bb      	ldr	r3, [r7, #8]
}
 8005092:	4618      	mov	r0, r3
 8005094:	3710      	adds	r7, #16
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}
 800509a:	bf00      	nop
 800509c:	20000e98 	.word	0x20000e98
 80050a0:	20000e70 	.word	0x20000e70
 80050a4:	20000e30 	.word	0x20000e30
 80050a8:	20000e78 	.word	0x20000e78
 80050ac:	200009a0 	.word	0x200009a0
 80050b0:	2000099c 	.word	0x2000099c
 80050b4:	20000e84 	.word	0x20000e84
 80050b8:	20000e80 	.word	0x20000e80
 80050bc:	e000ed04 	.word	0xe000ed04

080050c0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80050c0:	b480      	push	{r7}
 80050c2:	b083      	sub	sp, #12
 80050c4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80050c6:	4b05      	ldr	r3, [pc, #20]	; (80050dc <xTaskGetTickCount+0x1c>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80050cc:	687b      	ldr	r3, [r7, #4]
}
 80050ce:	4618      	mov	r0, r3
 80050d0:	370c      	adds	r7, #12
 80050d2:	46bd      	mov	sp, r7
 80050d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d8:	4770      	bx	lr
 80050da:	bf00      	nop
 80050dc:	20000e74 	.word	0x20000e74

080050e0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b086      	sub	sp, #24
 80050e4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80050e6:	2300      	movs	r3, #0
 80050e8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80050ea:	4b4f      	ldr	r3, [pc, #316]	; (8005228 <xTaskIncrementTick+0x148>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	f040 808f 	bne.w	8005212 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80050f4:	4b4d      	ldr	r3, [pc, #308]	; (800522c <xTaskIncrementTick+0x14c>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	3301      	adds	r3, #1
 80050fa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80050fc:	4a4b      	ldr	r2, [pc, #300]	; (800522c <xTaskIncrementTick+0x14c>)
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005102:	693b      	ldr	r3, [r7, #16]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d120      	bne.n	800514a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005108:	4b49      	ldr	r3, [pc, #292]	; (8005230 <xTaskIncrementTick+0x150>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d00a      	beq.n	8005128 <xTaskIncrementTick+0x48>
	__asm volatile
 8005112:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005116:	f383 8811 	msr	BASEPRI, r3
 800511a:	f3bf 8f6f 	isb	sy
 800511e:	f3bf 8f4f 	dsb	sy
 8005122:	603b      	str	r3, [r7, #0]
}
 8005124:	bf00      	nop
 8005126:	e7fe      	b.n	8005126 <xTaskIncrementTick+0x46>
 8005128:	4b41      	ldr	r3, [pc, #260]	; (8005230 <xTaskIncrementTick+0x150>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	60fb      	str	r3, [r7, #12]
 800512e:	4b41      	ldr	r3, [pc, #260]	; (8005234 <xTaskIncrementTick+0x154>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4a3f      	ldr	r2, [pc, #252]	; (8005230 <xTaskIncrementTick+0x150>)
 8005134:	6013      	str	r3, [r2, #0]
 8005136:	4a3f      	ldr	r2, [pc, #252]	; (8005234 <xTaskIncrementTick+0x154>)
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	6013      	str	r3, [r2, #0]
 800513c:	4b3e      	ldr	r3, [pc, #248]	; (8005238 <xTaskIncrementTick+0x158>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	3301      	adds	r3, #1
 8005142:	4a3d      	ldr	r2, [pc, #244]	; (8005238 <xTaskIncrementTick+0x158>)
 8005144:	6013      	str	r3, [r2, #0]
 8005146:	f000 fad1 	bl	80056ec <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800514a:	4b3c      	ldr	r3, [pc, #240]	; (800523c <xTaskIncrementTick+0x15c>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	693a      	ldr	r2, [r7, #16]
 8005150:	429a      	cmp	r2, r3
 8005152:	d349      	bcc.n	80051e8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005154:	4b36      	ldr	r3, [pc, #216]	; (8005230 <xTaskIncrementTick+0x150>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d104      	bne.n	8005168 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800515e:	4b37      	ldr	r3, [pc, #220]	; (800523c <xTaskIncrementTick+0x15c>)
 8005160:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005164:	601a      	str	r2, [r3, #0]
					break;
 8005166:	e03f      	b.n	80051e8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005168:	4b31      	ldr	r3, [pc, #196]	; (8005230 <xTaskIncrementTick+0x150>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	68db      	ldr	r3, [r3, #12]
 800516e:	68db      	ldr	r3, [r3, #12]
 8005170:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	685b      	ldr	r3, [r3, #4]
 8005176:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005178:	693a      	ldr	r2, [r7, #16]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	429a      	cmp	r2, r3
 800517e:	d203      	bcs.n	8005188 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005180:	4a2e      	ldr	r2, [pc, #184]	; (800523c <xTaskIncrementTick+0x15c>)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005186:	e02f      	b.n	80051e8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	3304      	adds	r3, #4
 800518c:	4618      	mov	r0, r3
 800518e:	f7fe fea3 	bl	8003ed8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005196:	2b00      	cmp	r3, #0
 8005198:	d004      	beq.n	80051a4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	3318      	adds	r3, #24
 800519e:	4618      	mov	r0, r3
 80051a0:	f7fe fe9a 	bl	8003ed8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051a8:	4b25      	ldr	r3, [pc, #148]	; (8005240 <xTaskIncrementTick+0x160>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	429a      	cmp	r2, r3
 80051ae:	d903      	bls.n	80051b8 <xTaskIncrementTick+0xd8>
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051b4:	4a22      	ldr	r2, [pc, #136]	; (8005240 <xTaskIncrementTick+0x160>)
 80051b6:	6013      	str	r3, [r2, #0]
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051bc:	4613      	mov	r3, r2
 80051be:	009b      	lsls	r3, r3, #2
 80051c0:	4413      	add	r3, r2
 80051c2:	009b      	lsls	r3, r3, #2
 80051c4:	4a1f      	ldr	r2, [pc, #124]	; (8005244 <xTaskIncrementTick+0x164>)
 80051c6:	441a      	add	r2, r3
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	3304      	adds	r3, #4
 80051cc:	4619      	mov	r1, r3
 80051ce:	4610      	mov	r0, r2
 80051d0:	f7fe fe25 	bl	8003e1e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051d8:	4b1b      	ldr	r3, [pc, #108]	; (8005248 <xTaskIncrementTick+0x168>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051de:	429a      	cmp	r2, r3
 80051e0:	d3b8      	bcc.n	8005154 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80051e2:	2301      	movs	r3, #1
 80051e4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80051e6:	e7b5      	b.n	8005154 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80051e8:	4b17      	ldr	r3, [pc, #92]	; (8005248 <xTaskIncrementTick+0x168>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051ee:	4915      	ldr	r1, [pc, #84]	; (8005244 <xTaskIncrementTick+0x164>)
 80051f0:	4613      	mov	r3, r2
 80051f2:	009b      	lsls	r3, r3, #2
 80051f4:	4413      	add	r3, r2
 80051f6:	009b      	lsls	r3, r3, #2
 80051f8:	440b      	add	r3, r1
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	2b01      	cmp	r3, #1
 80051fe:	d901      	bls.n	8005204 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005200:	2301      	movs	r3, #1
 8005202:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005204:	4b11      	ldr	r3, [pc, #68]	; (800524c <xTaskIncrementTick+0x16c>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d007      	beq.n	800521c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800520c:	2301      	movs	r3, #1
 800520e:	617b      	str	r3, [r7, #20]
 8005210:	e004      	b.n	800521c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005212:	4b0f      	ldr	r3, [pc, #60]	; (8005250 <xTaskIncrementTick+0x170>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	3301      	adds	r3, #1
 8005218:	4a0d      	ldr	r2, [pc, #52]	; (8005250 <xTaskIncrementTick+0x170>)
 800521a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800521c:	697b      	ldr	r3, [r7, #20]
}
 800521e:	4618      	mov	r0, r3
 8005220:	3718      	adds	r7, #24
 8005222:	46bd      	mov	sp, r7
 8005224:	bd80      	pop	{r7, pc}
 8005226:	bf00      	nop
 8005228:	20000e98 	.word	0x20000e98
 800522c:	20000e74 	.word	0x20000e74
 8005230:	20000e28 	.word	0x20000e28
 8005234:	20000e2c 	.word	0x20000e2c
 8005238:	20000e88 	.word	0x20000e88
 800523c:	20000e90 	.word	0x20000e90
 8005240:	20000e78 	.word	0x20000e78
 8005244:	200009a0 	.word	0x200009a0
 8005248:	2000099c 	.word	0x2000099c
 800524c:	20000e84 	.word	0x20000e84
 8005250:	20000e80 	.word	0x20000e80

08005254 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005254:	b480      	push	{r7}
 8005256:	b085      	sub	sp, #20
 8005258:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800525a:	4b28      	ldr	r3, [pc, #160]	; (80052fc <vTaskSwitchContext+0xa8>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d003      	beq.n	800526a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005262:	4b27      	ldr	r3, [pc, #156]	; (8005300 <vTaskSwitchContext+0xac>)
 8005264:	2201      	movs	r2, #1
 8005266:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005268:	e041      	b.n	80052ee <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800526a:	4b25      	ldr	r3, [pc, #148]	; (8005300 <vTaskSwitchContext+0xac>)
 800526c:	2200      	movs	r2, #0
 800526e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005270:	4b24      	ldr	r3, [pc, #144]	; (8005304 <vTaskSwitchContext+0xb0>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	60fb      	str	r3, [r7, #12]
 8005276:	e010      	b.n	800529a <vTaskSwitchContext+0x46>
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d10a      	bne.n	8005294 <vTaskSwitchContext+0x40>
	__asm volatile
 800527e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005282:	f383 8811 	msr	BASEPRI, r3
 8005286:	f3bf 8f6f 	isb	sy
 800528a:	f3bf 8f4f 	dsb	sy
 800528e:	607b      	str	r3, [r7, #4]
}
 8005290:	bf00      	nop
 8005292:	e7fe      	b.n	8005292 <vTaskSwitchContext+0x3e>
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	3b01      	subs	r3, #1
 8005298:	60fb      	str	r3, [r7, #12]
 800529a:	491b      	ldr	r1, [pc, #108]	; (8005308 <vTaskSwitchContext+0xb4>)
 800529c:	68fa      	ldr	r2, [r7, #12]
 800529e:	4613      	mov	r3, r2
 80052a0:	009b      	lsls	r3, r3, #2
 80052a2:	4413      	add	r3, r2
 80052a4:	009b      	lsls	r3, r3, #2
 80052a6:	440b      	add	r3, r1
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d0e4      	beq.n	8005278 <vTaskSwitchContext+0x24>
 80052ae:	68fa      	ldr	r2, [r7, #12]
 80052b0:	4613      	mov	r3, r2
 80052b2:	009b      	lsls	r3, r3, #2
 80052b4:	4413      	add	r3, r2
 80052b6:	009b      	lsls	r3, r3, #2
 80052b8:	4a13      	ldr	r2, [pc, #76]	; (8005308 <vTaskSwitchContext+0xb4>)
 80052ba:	4413      	add	r3, r2
 80052bc:	60bb      	str	r3, [r7, #8]
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	685a      	ldr	r2, [r3, #4]
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	605a      	str	r2, [r3, #4]
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	685a      	ldr	r2, [r3, #4]
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	3308      	adds	r3, #8
 80052d0:	429a      	cmp	r2, r3
 80052d2:	d104      	bne.n	80052de <vTaskSwitchContext+0x8a>
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	685b      	ldr	r3, [r3, #4]
 80052d8:	685a      	ldr	r2, [r3, #4]
 80052da:	68bb      	ldr	r3, [r7, #8]
 80052dc:	605a      	str	r2, [r3, #4]
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	68db      	ldr	r3, [r3, #12]
 80052e4:	4a09      	ldr	r2, [pc, #36]	; (800530c <vTaskSwitchContext+0xb8>)
 80052e6:	6013      	str	r3, [r2, #0]
 80052e8:	4a06      	ldr	r2, [pc, #24]	; (8005304 <vTaskSwitchContext+0xb0>)
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	6013      	str	r3, [r2, #0]
}
 80052ee:	bf00      	nop
 80052f0:	3714      	adds	r7, #20
 80052f2:	46bd      	mov	sp, r7
 80052f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f8:	4770      	bx	lr
 80052fa:	bf00      	nop
 80052fc:	20000e98 	.word	0x20000e98
 8005300:	20000e84 	.word	0x20000e84
 8005304:	20000e78 	.word	0x20000e78
 8005308:	200009a0 	.word	0x200009a0
 800530c:	2000099c 	.word	0x2000099c

08005310 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b084      	sub	sp, #16
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
 8005318:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d10a      	bne.n	8005336 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005324:	f383 8811 	msr	BASEPRI, r3
 8005328:	f3bf 8f6f 	isb	sy
 800532c:	f3bf 8f4f 	dsb	sy
 8005330:	60fb      	str	r3, [r7, #12]
}
 8005332:	bf00      	nop
 8005334:	e7fe      	b.n	8005334 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005336:	4b07      	ldr	r3, [pc, #28]	; (8005354 <vTaskPlaceOnEventList+0x44>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	3318      	adds	r3, #24
 800533c:	4619      	mov	r1, r3
 800533e:	6878      	ldr	r0, [r7, #4]
 8005340:	f7fe fd91 	bl	8003e66 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005344:	2101      	movs	r1, #1
 8005346:	6838      	ldr	r0, [r7, #0]
 8005348:	f000 fc6a 	bl	8005c20 <prvAddCurrentTaskToDelayedList>
}
 800534c:	bf00      	nop
 800534e:	3710      	adds	r7, #16
 8005350:	46bd      	mov	sp, r7
 8005352:	bd80      	pop	{r7, pc}
 8005354:	2000099c 	.word	0x2000099c

08005358 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005358:	b580      	push	{r7, lr}
 800535a:	b086      	sub	sp, #24
 800535c:	af00      	add	r7, sp, #0
 800535e:	60f8      	str	r0, [r7, #12]
 8005360:	60b9      	str	r1, [r7, #8]
 8005362:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d10a      	bne.n	8005380 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800536a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800536e:	f383 8811 	msr	BASEPRI, r3
 8005372:	f3bf 8f6f 	isb	sy
 8005376:	f3bf 8f4f 	dsb	sy
 800537a:	617b      	str	r3, [r7, #20]
}
 800537c:	bf00      	nop
 800537e:	e7fe      	b.n	800537e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005380:	4b0a      	ldr	r3, [pc, #40]	; (80053ac <vTaskPlaceOnEventListRestricted+0x54>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	3318      	adds	r3, #24
 8005386:	4619      	mov	r1, r3
 8005388:	68f8      	ldr	r0, [r7, #12]
 800538a:	f7fe fd48 	bl	8003e1e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d002      	beq.n	800539a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005394:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005398:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800539a:	6879      	ldr	r1, [r7, #4]
 800539c:	68b8      	ldr	r0, [r7, #8]
 800539e:	f000 fc3f 	bl	8005c20 <prvAddCurrentTaskToDelayedList>
	}
 80053a2:	bf00      	nop
 80053a4:	3718      	adds	r7, #24
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd80      	pop	{r7, pc}
 80053aa:	bf00      	nop
 80053ac:	2000099c 	.word	0x2000099c

080053b0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b086      	sub	sp, #24
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	68db      	ldr	r3, [r3, #12]
 80053bc:	68db      	ldr	r3, [r3, #12]
 80053be:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80053c0:	693b      	ldr	r3, [r7, #16]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d10a      	bne.n	80053dc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80053c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053ca:	f383 8811 	msr	BASEPRI, r3
 80053ce:	f3bf 8f6f 	isb	sy
 80053d2:	f3bf 8f4f 	dsb	sy
 80053d6:	60fb      	str	r3, [r7, #12]
}
 80053d8:	bf00      	nop
 80053da:	e7fe      	b.n	80053da <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80053dc:	693b      	ldr	r3, [r7, #16]
 80053de:	3318      	adds	r3, #24
 80053e0:	4618      	mov	r0, r3
 80053e2:	f7fe fd79 	bl	8003ed8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80053e6:	4b1e      	ldr	r3, [pc, #120]	; (8005460 <xTaskRemoveFromEventList+0xb0>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d11d      	bne.n	800542a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80053ee:	693b      	ldr	r3, [r7, #16]
 80053f0:	3304      	adds	r3, #4
 80053f2:	4618      	mov	r0, r3
 80053f4:	f7fe fd70 	bl	8003ed8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80053f8:	693b      	ldr	r3, [r7, #16]
 80053fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053fc:	4b19      	ldr	r3, [pc, #100]	; (8005464 <xTaskRemoveFromEventList+0xb4>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	429a      	cmp	r2, r3
 8005402:	d903      	bls.n	800540c <xTaskRemoveFromEventList+0x5c>
 8005404:	693b      	ldr	r3, [r7, #16]
 8005406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005408:	4a16      	ldr	r2, [pc, #88]	; (8005464 <xTaskRemoveFromEventList+0xb4>)
 800540a:	6013      	str	r3, [r2, #0]
 800540c:	693b      	ldr	r3, [r7, #16]
 800540e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005410:	4613      	mov	r3, r2
 8005412:	009b      	lsls	r3, r3, #2
 8005414:	4413      	add	r3, r2
 8005416:	009b      	lsls	r3, r3, #2
 8005418:	4a13      	ldr	r2, [pc, #76]	; (8005468 <xTaskRemoveFromEventList+0xb8>)
 800541a:	441a      	add	r2, r3
 800541c:	693b      	ldr	r3, [r7, #16]
 800541e:	3304      	adds	r3, #4
 8005420:	4619      	mov	r1, r3
 8005422:	4610      	mov	r0, r2
 8005424:	f7fe fcfb 	bl	8003e1e <vListInsertEnd>
 8005428:	e005      	b.n	8005436 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800542a:	693b      	ldr	r3, [r7, #16]
 800542c:	3318      	adds	r3, #24
 800542e:	4619      	mov	r1, r3
 8005430:	480e      	ldr	r0, [pc, #56]	; (800546c <xTaskRemoveFromEventList+0xbc>)
 8005432:	f7fe fcf4 	bl	8003e1e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005436:	693b      	ldr	r3, [r7, #16]
 8005438:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800543a:	4b0d      	ldr	r3, [pc, #52]	; (8005470 <xTaskRemoveFromEventList+0xc0>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005440:	429a      	cmp	r2, r3
 8005442:	d905      	bls.n	8005450 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005444:	2301      	movs	r3, #1
 8005446:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005448:	4b0a      	ldr	r3, [pc, #40]	; (8005474 <xTaskRemoveFromEventList+0xc4>)
 800544a:	2201      	movs	r2, #1
 800544c:	601a      	str	r2, [r3, #0]
 800544e:	e001      	b.n	8005454 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005450:	2300      	movs	r3, #0
 8005452:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005454:	697b      	ldr	r3, [r7, #20]
}
 8005456:	4618      	mov	r0, r3
 8005458:	3718      	adds	r7, #24
 800545a:	46bd      	mov	sp, r7
 800545c:	bd80      	pop	{r7, pc}
 800545e:	bf00      	nop
 8005460:	20000e98 	.word	0x20000e98
 8005464:	20000e78 	.word	0x20000e78
 8005468:	200009a0 	.word	0x200009a0
 800546c:	20000e30 	.word	0x20000e30
 8005470:	2000099c 	.word	0x2000099c
 8005474:	20000e84 	.word	0x20000e84

08005478 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005478:	b480      	push	{r7}
 800547a:	b083      	sub	sp, #12
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005480:	4b06      	ldr	r3, [pc, #24]	; (800549c <vTaskInternalSetTimeOutState+0x24>)
 8005482:	681a      	ldr	r2, [r3, #0]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005488:	4b05      	ldr	r3, [pc, #20]	; (80054a0 <vTaskInternalSetTimeOutState+0x28>)
 800548a:	681a      	ldr	r2, [r3, #0]
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	605a      	str	r2, [r3, #4]
}
 8005490:	bf00      	nop
 8005492:	370c      	adds	r7, #12
 8005494:	46bd      	mov	sp, r7
 8005496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549a:	4770      	bx	lr
 800549c:	20000e88 	.word	0x20000e88
 80054a0:	20000e74 	.word	0x20000e74

080054a4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b088      	sub	sp, #32
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
 80054ac:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d10a      	bne.n	80054ca <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80054b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054b8:	f383 8811 	msr	BASEPRI, r3
 80054bc:	f3bf 8f6f 	isb	sy
 80054c0:	f3bf 8f4f 	dsb	sy
 80054c4:	613b      	str	r3, [r7, #16]
}
 80054c6:	bf00      	nop
 80054c8:	e7fe      	b.n	80054c8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d10a      	bne.n	80054e6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80054d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054d4:	f383 8811 	msr	BASEPRI, r3
 80054d8:	f3bf 8f6f 	isb	sy
 80054dc:	f3bf 8f4f 	dsb	sy
 80054e0:	60fb      	str	r3, [r7, #12]
}
 80054e2:	bf00      	nop
 80054e4:	e7fe      	b.n	80054e4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80054e6:	f001 f86d 	bl	80065c4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80054ea:	4b1d      	ldr	r3, [pc, #116]	; (8005560 <xTaskCheckForTimeOut+0xbc>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	685b      	ldr	r3, [r3, #4]
 80054f4:	69ba      	ldr	r2, [r7, #24]
 80054f6:	1ad3      	subs	r3, r2, r3
 80054f8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005502:	d102      	bne.n	800550a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005504:	2300      	movs	r3, #0
 8005506:	61fb      	str	r3, [r7, #28]
 8005508:	e023      	b.n	8005552 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681a      	ldr	r2, [r3, #0]
 800550e:	4b15      	ldr	r3, [pc, #84]	; (8005564 <xTaskCheckForTimeOut+0xc0>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	429a      	cmp	r2, r3
 8005514:	d007      	beq.n	8005526 <xTaskCheckForTimeOut+0x82>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	69ba      	ldr	r2, [r7, #24]
 800551c:	429a      	cmp	r2, r3
 800551e:	d302      	bcc.n	8005526 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005520:	2301      	movs	r3, #1
 8005522:	61fb      	str	r3, [r7, #28]
 8005524:	e015      	b.n	8005552 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	697a      	ldr	r2, [r7, #20]
 800552c:	429a      	cmp	r2, r3
 800552e:	d20b      	bcs.n	8005548 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	681a      	ldr	r2, [r3, #0]
 8005534:	697b      	ldr	r3, [r7, #20]
 8005536:	1ad2      	subs	r2, r2, r3
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800553c:	6878      	ldr	r0, [r7, #4]
 800553e:	f7ff ff9b 	bl	8005478 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005542:	2300      	movs	r3, #0
 8005544:	61fb      	str	r3, [r7, #28]
 8005546:	e004      	b.n	8005552 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	2200      	movs	r2, #0
 800554c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800554e:	2301      	movs	r3, #1
 8005550:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005552:	f001 f867 	bl	8006624 <vPortExitCritical>

	return xReturn;
 8005556:	69fb      	ldr	r3, [r7, #28]
}
 8005558:	4618      	mov	r0, r3
 800555a:	3720      	adds	r7, #32
 800555c:	46bd      	mov	sp, r7
 800555e:	bd80      	pop	{r7, pc}
 8005560:	20000e74 	.word	0x20000e74
 8005564:	20000e88 	.word	0x20000e88

08005568 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005568:	b480      	push	{r7}
 800556a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800556c:	4b03      	ldr	r3, [pc, #12]	; (800557c <vTaskMissedYield+0x14>)
 800556e:	2201      	movs	r2, #1
 8005570:	601a      	str	r2, [r3, #0]
}
 8005572:	bf00      	nop
 8005574:	46bd      	mov	sp, r7
 8005576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557a:	4770      	bx	lr
 800557c:	20000e84 	.word	0x20000e84

08005580 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b082      	sub	sp, #8
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005588:	f000 f852 	bl	8005630 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800558c:	4b06      	ldr	r3, [pc, #24]	; (80055a8 <prvIdleTask+0x28>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	2b01      	cmp	r3, #1
 8005592:	d9f9      	bls.n	8005588 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005594:	4b05      	ldr	r3, [pc, #20]	; (80055ac <prvIdleTask+0x2c>)
 8005596:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800559a:	601a      	str	r2, [r3, #0]
 800559c:	f3bf 8f4f 	dsb	sy
 80055a0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80055a4:	e7f0      	b.n	8005588 <prvIdleTask+0x8>
 80055a6:	bf00      	nop
 80055a8:	200009a0 	.word	0x200009a0
 80055ac:	e000ed04 	.word	0xe000ed04

080055b0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b082      	sub	sp, #8
 80055b4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80055b6:	2300      	movs	r3, #0
 80055b8:	607b      	str	r3, [r7, #4]
 80055ba:	e00c      	b.n	80055d6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80055bc:	687a      	ldr	r2, [r7, #4]
 80055be:	4613      	mov	r3, r2
 80055c0:	009b      	lsls	r3, r3, #2
 80055c2:	4413      	add	r3, r2
 80055c4:	009b      	lsls	r3, r3, #2
 80055c6:	4a12      	ldr	r2, [pc, #72]	; (8005610 <prvInitialiseTaskLists+0x60>)
 80055c8:	4413      	add	r3, r2
 80055ca:	4618      	mov	r0, r3
 80055cc:	f7fe fbfa 	bl	8003dc4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	3301      	adds	r3, #1
 80055d4:	607b      	str	r3, [r7, #4]
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2b37      	cmp	r3, #55	; 0x37
 80055da:	d9ef      	bls.n	80055bc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80055dc:	480d      	ldr	r0, [pc, #52]	; (8005614 <prvInitialiseTaskLists+0x64>)
 80055de:	f7fe fbf1 	bl	8003dc4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80055e2:	480d      	ldr	r0, [pc, #52]	; (8005618 <prvInitialiseTaskLists+0x68>)
 80055e4:	f7fe fbee 	bl	8003dc4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80055e8:	480c      	ldr	r0, [pc, #48]	; (800561c <prvInitialiseTaskLists+0x6c>)
 80055ea:	f7fe fbeb 	bl	8003dc4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80055ee:	480c      	ldr	r0, [pc, #48]	; (8005620 <prvInitialiseTaskLists+0x70>)
 80055f0:	f7fe fbe8 	bl	8003dc4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80055f4:	480b      	ldr	r0, [pc, #44]	; (8005624 <prvInitialiseTaskLists+0x74>)
 80055f6:	f7fe fbe5 	bl	8003dc4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80055fa:	4b0b      	ldr	r3, [pc, #44]	; (8005628 <prvInitialiseTaskLists+0x78>)
 80055fc:	4a05      	ldr	r2, [pc, #20]	; (8005614 <prvInitialiseTaskLists+0x64>)
 80055fe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005600:	4b0a      	ldr	r3, [pc, #40]	; (800562c <prvInitialiseTaskLists+0x7c>)
 8005602:	4a05      	ldr	r2, [pc, #20]	; (8005618 <prvInitialiseTaskLists+0x68>)
 8005604:	601a      	str	r2, [r3, #0]
}
 8005606:	bf00      	nop
 8005608:	3708      	adds	r7, #8
 800560a:	46bd      	mov	sp, r7
 800560c:	bd80      	pop	{r7, pc}
 800560e:	bf00      	nop
 8005610:	200009a0 	.word	0x200009a0
 8005614:	20000e00 	.word	0x20000e00
 8005618:	20000e14 	.word	0x20000e14
 800561c:	20000e30 	.word	0x20000e30
 8005620:	20000e44 	.word	0x20000e44
 8005624:	20000e5c 	.word	0x20000e5c
 8005628:	20000e28 	.word	0x20000e28
 800562c:	20000e2c 	.word	0x20000e2c

08005630 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b082      	sub	sp, #8
 8005634:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005636:	e019      	b.n	800566c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005638:	f000 ffc4 	bl	80065c4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800563c:	4b10      	ldr	r3, [pc, #64]	; (8005680 <prvCheckTasksWaitingTermination+0x50>)
 800563e:	68db      	ldr	r3, [r3, #12]
 8005640:	68db      	ldr	r3, [r3, #12]
 8005642:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	3304      	adds	r3, #4
 8005648:	4618      	mov	r0, r3
 800564a:	f7fe fc45 	bl	8003ed8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800564e:	4b0d      	ldr	r3, [pc, #52]	; (8005684 <prvCheckTasksWaitingTermination+0x54>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	3b01      	subs	r3, #1
 8005654:	4a0b      	ldr	r2, [pc, #44]	; (8005684 <prvCheckTasksWaitingTermination+0x54>)
 8005656:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005658:	4b0b      	ldr	r3, [pc, #44]	; (8005688 <prvCheckTasksWaitingTermination+0x58>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	3b01      	subs	r3, #1
 800565e:	4a0a      	ldr	r2, [pc, #40]	; (8005688 <prvCheckTasksWaitingTermination+0x58>)
 8005660:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005662:	f000 ffdf 	bl	8006624 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005666:	6878      	ldr	r0, [r7, #4]
 8005668:	f000 f810 	bl	800568c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800566c:	4b06      	ldr	r3, [pc, #24]	; (8005688 <prvCheckTasksWaitingTermination+0x58>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d1e1      	bne.n	8005638 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005674:	bf00      	nop
 8005676:	bf00      	nop
 8005678:	3708      	adds	r7, #8
 800567a:	46bd      	mov	sp, r7
 800567c:	bd80      	pop	{r7, pc}
 800567e:	bf00      	nop
 8005680:	20000e44 	.word	0x20000e44
 8005684:	20000e70 	.word	0x20000e70
 8005688:	20000e58 	.word	0x20000e58

0800568c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800568c:	b580      	push	{r7, lr}
 800568e:	b084      	sub	sp, #16
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800569a:	2b00      	cmp	r3, #0
 800569c:	d108      	bne.n	80056b0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056a2:	4618      	mov	r0, r3
 80056a4:	f001 f97c 	bl	80069a0 <vPortFree>
				vPortFree( pxTCB );
 80056a8:	6878      	ldr	r0, [r7, #4]
 80056aa:	f001 f979 	bl	80069a0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80056ae:	e018      	b.n	80056e2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80056b6:	2b01      	cmp	r3, #1
 80056b8:	d103      	bne.n	80056c2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80056ba:	6878      	ldr	r0, [r7, #4]
 80056bc:	f001 f970 	bl	80069a0 <vPortFree>
	}
 80056c0:	e00f      	b.n	80056e2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80056c8:	2b02      	cmp	r3, #2
 80056ca:	d00a      	beq.n	80056e2 <prvDeleteTCB+0x56>
	__asm volatile
 80056cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056d0:	f383 8811 	msr	BASEPRI, r3
 80056d4:	f3bf 8f6f 	isb	sy
 80056d8:	f3bf 8f4f 	dsb	sy
 80056dc:	60fb      	str	r3, [r7, #12]
}
 80056de:	bf00      	nop
 80056e0:	e7fe      	b.n	80056e0 <prvDeleteTCB+0x54>
	}
 80056e2:	bf00      	nop
 80056e4:	3710      	adds	r7, #16
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bd80      	pop	{r7, pc}
	...

080056ec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80056ec:	b480      	push	{r7}
 80056ee:	b083      	sub	sp, #12
 80056f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80056f2:	4b0c      	ldr	r3, [pc, #48]	; (8005724 <prvResetNextTaskUnblockTime+0x38>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d104      	bne.n	8005706 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80056fc:	4b0a      	ldr	r3, [pc, #40]	; (8005728 <prvResetNextTaskUnblockTime+0x3c>)
 80056fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005702:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005704:	e008      	b.n	8005718 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005706:	4b07      	ldr	r3, [pc, #28]	; (8005724 <prvResetNextTaskUnblockTime+0x38>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	68db      	ldr	r3, [r3, #12]
 800570c:	68db      	ldr	r3, [r3, #12]
 800570e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	685b      	ldr	r3, [r3, #4]
 8005714:	4a04      	ldr	r2, [pc, #16]	; (8005728 <prvResetNextTaskUnblockTime+0x3c>)
 8005716:	6013      	str	r3, [r2, #0]
}
 8005718:	bf00      	nop
 800571a:	370c      	adds	r7, #12
 800571c:	46bd      	mov	sp, r7
 800571e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005722:	4770      	bx	lr
 8005724:	20000e28 	.word	0x20000e28
 8005728:	20000e90 	.word	0x20000e90

0800572c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800572c:	b480      	push	{r7}
 800572e:	b083      	sub	sp, #12
 8005730:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005732:	4b0b      	ldr	r3, [pc, #44]	; (8005760 <xTaskGetSchedulerState+0x34>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d102      	bne.n	8005740 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800573a:	2301      	movs	r3, #1
 800573c:	607b      	str	r3, [r7, #4]
 800573e:	e008      	b.n	8005752 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005740:	4b08      	ldr	r3, [pc, #32]	; (8005764 <xTaskGetSchedulerState+0x38>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d102      	bne.n	800574e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005748:	2302      	movs	r3, #2
 800574a:	607b      	str	r3, [r7, #4]
 800574c:	e001      	b.n	8005752 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800574e:	2300      	movs	r3, #0
 8005750:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005752:	687b      	ldr	r3, [r7, #4]
	}
 8005754:	4618      	mov	r0, r3
 8005756:	370c      	adds	r7, #12
 8005758:	46bd      	mov	sp, r7
 800575a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575e:	4770      	bx	lr
 8005760:	20000e7c 	.word	0x20000e7c
 8005764:	20000e98 	.word	0x20000e98

08005768 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005768:	b580      	push	{r7, lr}
 800576a:	b086      	sub	sp, #24
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005774:	2300      	movs	r3, #0
 8005776:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d056      	beq.n	800582c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800577e:	4b2e      	ldr	r3, [pc, #184]	; (8005838 <xTaskPriorityDisinherit+0xd0>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	693a      	ldr	r2, [r7, #16]
 8005784:	429a      	cmp	r2, r3
 8005786:	d00a      	beq.n	800579e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800578c:	f383 8811 	msr	BASEPRI, r3
 8005790:	f3bf 8f6f 	isb	sy
 8005794:	f3bf 8f4f 	dsb	sy
 8005798:	60fb      	str	r3, [r7, #12]
}
 800579a:	bf00      	nop
 800579c:	e7fe      	b.n	800579c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800579e:	693b      	ldr	r3, [r7, #16]
 80057a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d10a      	bne.n	80057bc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80057a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057aa:	f383 8811 	msr	BASEPRI, r3
 80057ae:	f3bf 8f6f 	isb	sy
 80057b2:	f3bf 8f4f 	dsb	sy
 80057b6:	60bb      	str	r3, [r7, #8]
}
 80057b8:	bf00      	nop
 80057ba:	e7fe      	b.n	80057ba <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80057bc:	693b      	ldr	r3, [r7, #16]
 80057be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057c0:	1e5a      	subs	r2, r3, #1
 80057c2:	693b      	ldr	r3, [r7, #16]
 80057c4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80057c6:	693b      	ldr	r3, [r7, #16]
 80057c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057ca:	693b      	ldr	r3, [r7, #16]
 80057cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057ce:	429a      	cmp	r2, r3
 80057d0:	d02c      	beq.n	800582c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80057d2:	693b      	ldr	r3, [r7, #16]
 80057d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d128      	bne.n	800582c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80057da:	693b      	ldr	r3, [r7, #16]
 80057dc:	3304      	adds	r3, #4
 80057de:	4618      	mov	r0, r3
 80057e0:	f7fe fb7a 	bl	8003ed8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80057e4:	693b      	ldr	r3, [r7, #16]
 80057e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80057e8:	693b      	ldr	r3, [r7, #16]
 80057ea:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80057ec:	693b      	ldr	r3, [r7, #16]
 80057ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057f0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80057f4:	693b      	ldr	r3, [r7, #16]
 80057f6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80057f8:	693b      	ldr	r3, [r7, #16]
 80057fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057fc:	4b0f      	ldr	r3, [pc, #60]	; (800583c <xTaskPriorityDisinherit+0xd4>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	429a      	cmp	r2, r3
 8005802:	d903      	bls.n	800580c <xTaskPriorityDisinherit+0xa4>
 8005804:	693b      	ldr	r3, [r7, #16]
 8005806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005808:	4a0c      	ldr	r2, [pc, #48]	; (800583c <xTaskPriorityDisinherit+0xd4>)
 800580a:	6013      	str	r3, [r2, #0]
 800580c:	693b      	ldr	r3, [r7, #16]
 800580e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005810:	4613      	mov	r3, r2
 8005812:	009b      	lsls	r3, r3, #2
 8005814:	4413      	add	r3, r2
 8005816:	009b      	lsls	r3, r3, #2
 8005818:	4a09      	ldr	r2, [pc, #36]	; (8005840 <xTaskPriorityDisinherit+0xd8>)
 800581a:	441a      	add	r2, r3
 800581c:	693b      	ldr	r3, [r7, #16]
 800581e:	3304      	adds	r3, #4
 8005820:	4619      	mov	r1, r3
 8005822:	4610      	mov	r0, r2
 8005824:	f7fe fafb 	bl	8003e1e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005828:	2301      	movs	r3, #1
 800582a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800582c:	697b      	ldr	r3, [r7, #20]
	}
 800582e:	4618      	mov	r0, r3
 8005830:	3718      	adds	r7, #24
 8005832:	46bd      	mov	sp, r7
 8005834:	bd80      	pop	{r7, pc}
 8005836:	bf00      	nop
 8005838:	2000099c 	.word	0x2000099c
 800583c:	20000e78 	.word	0x20000e78
 8005840:	200009a0 	.word	0x200009a0

08005844 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8005844:	b580      	push	{r7, lr}
 8005846:	b086      	sub	sp, #24
 8005848:	af00      	add	r7, sp, #0
 800584a:	60f8      	str	r0, [r7, #12]
 800584c:	60b9      	str	r1, [r7, #8]
 800584e:	607a      	str	r2, [r7, #4]
 8005850:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8005852:	f000 feb7 	bl	80065c4 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8005856:	4b26      	ldr	r3, [pc, #152]	; (80058f0 <xTaskNotifyWait+0xac>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800585e:	b2db      	uxtb	r3, r3
 8005860:	2b02      	cmp	r3, #2
 8005862:	d01a      	beq.n	800589a <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8005864:	4b22      	ldr	r3, [pc, #136]	; (80058f0 <xTaskNotifyWait+0xac>)
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800586a:	68fa      	ldr	r2, [r7, #12]
 800586c:	43d2      	mvns	r2, r2
 800586e:	400a      	ands	r2, r1
 8005870:	655a      	str	r2, [r3, #84]	; 0x54

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8005872:	4b1f      	ldr	r3, [pc, #124]	; (80058f0 <xTaskNotifyWait+0xac>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	2201      	movs	r2, #1
 8005878:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d00b      	beq.n	800589a <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005882:	2101      	movs	r1, #1
 8005884:	6838      	ldr	r0, [r7, #0]
 8005886:	f000 f9cb 	bl	8005c20 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800588a:	4b1a      	ldr	r3, [pc, #104]	; (80058f4 <xTaskNotifyWait+0xb0>)
 800588c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005890:	601a      	str	r2, [r3, #0]
 8005892:	f3bf 8f4f 	dsb	sy
 8005896:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800589a:	f000 fec3 	bl	8006624 <vPortExitCritical>

		taskENTER_CRITICAL();
 800589e:	f000 fe91 	bl	80065c4 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d004      	beq.n	80058b2 <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 80058a8:	4b11      	ldr	r3, [pc, #68]	; (80058f0 <xTaskNotifyWait+0xac>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80058b2:	4b0f      	ldr	r3, [pc, #60]	; (80058f0 <xTaskNotifyWait+0xac>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80058ba:	b2db      	uxtb	r3, r3
 80058bc:	2b02      	cmp	r3, #2
 80058be:	d002      	beq.n	80058c6 <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 80058c0:	2300      	movs	r3, #0
 80058c2:	617b      	str	r3, [r7, #20]
 80058c4:	e008      	b.n	80058d8 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 80058c6:	4b0a      	ldr	r3, [pc, #40]	; (80058f0 <xTaskNotifyWait+0xac>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80058cc:	68ba      	ldr	r2, [r7, #8]
 80058ce:	43d2      	mvns	r2, r2
 80058d0:	400a      	ands	r2, r1
 80058d2:	655a      	str	r2, [r3, #84]	; 0x54
				xReturn = pdTRUE;
 80058d4:	2301      	movs	r3, #1
 80058d6:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80058d8:	4b05      	ldr	r3, [pc, #20]	; (80058f0 <xTaskNotifyWait+0xac>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	2200      	movs	r2, #0
 80058de:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 80058e2:	f000 fe9f 	bl	8006624 <vPortExitCritical>

		return xReturn;
 80058e6:	697b      	ldr	r3, [r7, #20]
	}
 80058e8:	4618      	mov	r0, r3
 80058ea:	3718      	adds	r7, #24
 80058ec:	46bd      	mov	sp, r7
 80058ee:	bd80      	pop	{r7, pc}
 80058f0:	2000099c 	.word	0x2000099c
 80058f4:	e000ed04 	.word	0xe000ed04

080058f8 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b08a      	sub	sp, #40	; 0x28
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	60f8      	str	r0, [r7, #12]
 8005900:	60b9      	str	r1, [r7, #8]
 8005902:	603b      	str	r3, [r7, #0]
 8005904:	4613      	mov	r3, r2
 8005906:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8005908:	2301      	movs	r3, #1
 800590a:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d10a      	bne.n	8005928 <xTaskGenericNotify+0x30>
	__asm volatile
 8005912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005916:	f383 8811 	msr	BASEPRI, r3
 800591a:	f3bf 8f6f 	isb	sy
 800591e:	f3bf 8f4f 	dsb	sy
 8005922:	61bb      	str	r3, [r7, #24]
}
 8005924:	bf00      	nop
 8005926:	e7fe      	b.n	8005926 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800592c:	f000 fe4a 	bl	80065c4 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d003      	beq.n	800593e <xTaskGenericNotify+0x46>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8005936:	6a3b      	ldr	r3, [r7, #32]
 8005938:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800593e:	6a3b      	ldr	r3, [r7, #32]
 8005940:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8005944:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8005946:	6a3b      	ldr	r3, [r7, #32]
 8005948:	2202      	movs	r2, #2
 800594a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 800594e:	79fb      	ldrb	r3, [r7, #7]
 8005950:	2b04      	cmp	r3, #4
 8005952:	d828      	bhi.n	80059a6 <xTaskGenericNotify+0xae>
 8005954:	a201      	add	r2, pc, #4	; (adr r2, 800595c <xTaskGenericNotify+0x64>)
 8005956:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800595a:	bf00      	nop
 800595c:	080059c7 	.word	0x080059c7
 8005960:	08005971 	.word	0x08005971
 8005964:	0800597f 	.word	0x0800597f
 8005968:	0800598b 	.word	0x0800598b
 800596c:	08005993 	.word	0x08005993
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8005970:	6a3b      	ldr	r3, [r7, #32]
 8005972:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	431a      	orrs	r2, r3
 8005978:	6a3b      	ldr	r3, [r7, #32]
 800597a:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800597c:	e026      	b.n	80059cc <xTaskGenericNotify+0xd4>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800597e:	6a3b      	ldr	r3, [r7, #32]
 8005980:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005982:	1c5a      	adds	r2, r3, #1
 8005984:	6a3b      	ldr	r3, [r7, #32]
 8005986:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8005988:	e020      	b.n	80059cc <xTaskGenericNotify+0xd4>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800598a:	6a3b      	ldr	r3, [r7, #32]
 800598c:	68ba      	ldr	r2, [r7, #8]
 800598e:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8005990:	e01c      	b.n	80059cc <xTaskGenericNotify+0xd4>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8005992:	7ffb      	ldrb	r3, [r7, #31]
 8005994:	2b02      	cmp	r3, #2
 8005996:	d003      	beq.n	80059a0 <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8005998:	6a3b      	ldr	r3, [r7, #32]
 800599a:	68ba      	ldr	r2, [r7, #8]
 800599c:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800599e:	e015      	b.n	80059cc <xTaskGenericNotify+0xd4>
						xReturn = pdFAIL;
 80059a0:	2300      	movs	r3, #0
 80059a2:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 80059a4:	e012      	b.n	80059cc <xTaskGenericNotify+0xd4>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80059a6:	6a3b      	ldr	r3, [r7, #32]
 80059a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80059ae:	d00c      	beq.n	80059ca <xTaskGenericNotify+0xd2>
	__asm volatile
 80059b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059b4:	f383 8811 	msr	BASEPRI, r3
 80059b8:	f3bf 8f6f 	isb	sy
 80059bc:	f3bf 8f4f 	dsb	sy
 80059c0:	617b      	str	r3, [r7, #20]
}
 80059c2:	bf00      	nop
 80059c4:	e7fe      	b.n	80059c4 <xTaskGenericNotify+0xcc>
					break;
 80059c6:	bf00      	nop
 80059c8:	e000      	b.n	80059cc <xTaskGenericNotify+0xd4>

					break;
 80059ca:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80059cc:	7ffb      	ldrb	r3, [r7, #31]
 80059ce:	2b01      	cmp	r3, #1
 80059d0:	d13a      	bne.n	8005a48 <xTaskGenericNotify+0x150>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80059d2:	6a3b      	ldr	r3, [r7, #32]
 80059d4:	3304      	adds	r3, #4
 80059d6:	4618      	mov	r0, r3
 80059d8:	f7fe fa7e 	bl	8003ed8 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 80059dc:	6a3b      	ldr	r3, [r7, #32]
 80059de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059e0:	4b1d      	ldr	r3, [pc, #116]	; (8005a58 <xTaskGenericNotify+0x160>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	429a      	cmp	r2, r3
 80059e6:	d903      	bls.n	80059f0 <xTaskGenericNotify+0xf8>
 80059e8:	6a3b      	ldr	r3, [r7, #32]
 80059ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059ec:	4a1a      	ldr	r2, [pc, #104]	; (8005a58 <xTaskGenericNotify+0x160>)
 80059ee:	6013      	str	r3, [r2, #0]
 80059f0:	6a3b      	ldr	r3, [r7, #32]
 80059f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059f4:	4613      	mov	r3, r2
 80059f6:	009b      	lsls	r3, r3, #2
 80059f8:	4413      	add	r3, r2
 80059fa:	009b      	lsls	r3, r3, #2
 80059fc:	4a17      	ldr	r2, [pc, #92]	; (8005a5c <xTaskGenericNotify+0x164>)
 80059fe:	441a      	add	r2, r3
 8005a00:	6a3b      	ldr	r3, [r7, #32]
 8005a02:	3304      	adds	r3, #4
 8005a04:	4619      	mov	r1, r3
 8005a06:	4610      	mov	r0, r2
 8005a08:	f7fe fa09 	bl	8003e1e <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8005a0c:	6a3b      	ldr	r3, [r7, #32]
 8005a0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d00a      	beq.n	8005a2a <xTaskGenericNotify+0x132>
	__asm volatile
 8005a14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a18:	f383 8811 	msr	BASEPRI, r3
 8005a1c:	f3bf 8f6f 	isb	sy
 8005a20:	f3bf 8f4f 	dsb	sy
 8005a24:	613b      	str	r3, [r7, #16]
}
 8005a26:	bf00      	nop
 8005a28:	e7fe      	b.n	8005a28 <xTaskGenericNotify+0x130>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005a2a:	6a3b      	ldr	r3, [r7, #32]
 8005a2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a2e:	4b0c      	ldr	r3, [pc, #48]	; (8005a60 <xTaskGenericNotify+0x168>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a34:	429a      	cmp	r2, r3
 8005a36:	d907      	bls.n	8005a48 <xTaskGenericNotify+0x150>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8005a38:	4b0a      	ldr	r3, [pc, #40]	; (8005a64 <xTaskGenericNotify+0x16c>)
 8005a3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a3e:	601a      	str	r2, [r3, #0]
 8005a40:	f3bf 8f4f 	dsb	sy
 8005a44:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8005a48:	f000 fdec 	bl	8006624 <vPortExitCritical>

		return xReturn;
 8005a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8005a4e:	4618      	mov	r0, r3
 8005a50:	3728      	adds	r7, #40	; 0x28
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bd80      	pop	{r7, pc}
 8005a56:	bf00      	nop
 8005a58:	20000e78 	.word	0x20000e78
 8005a5c:	200009a0 	.word	0x200009a0
 8005a60:	2000099c 	.word	0x2000099c
 8005a64:	e000ed04 	.word	0xe000ed04

08005a68 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b08e      	sub	sp, #56	; 0x38
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	60f8      	str	r0, [r7, #12]
 8005a70:	60b9      	str	r1, [r7, #8]
 8005a72:	603b      	str	r3, [r7, #0]
 8005a74:	4613      	mov	r3, r2
 8005a76:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8005a78:	2301      	movs	r3, #1
 8005a7a:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d10a      	bne.n	8005a98 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 8005a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a86:	f383 8811 	msr	BASEPRI, r3
 8005a8a:	f3bf 8f6f 	isb	sy
 8005a8e:	f3bf 8f4f 	dsb	sy
 8005a92:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005a94:	bf00      	nop
 8005a96:	e7fe      	b.n	8005a96 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005a98:	f000 fe76 	bl	8006788 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 8005aa0:	f3ef 8211 	mrs	r2, BASEPRI
 8005aa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aa8:	f383 8811 	msr	BASEPRI, r3
 8005aac:	f3bf 8f6f 	isb	sy
 8005ab0:	f3bf 8f4f 	dsb	sy
 8005ab4:	623a      	str	r2, [r7, #32]
 8005ab6:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8005ab8:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005aba:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d003      	beq.n	8005aca <xTaskGenericNotifyFromISR+0x62>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8005ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ac4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8005aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005acc:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8005ad0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8005ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ad6:	2202      	movs	r2, #2
 8005ad8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 8005adc:	79fb      	ldrb	r3, [r7, #7]
 8005ade:	2b04      	cmp	r3, #4
 8005ae0:	d828      	bhi.n	8005b34 <xTaskGenericNotifyFromISR+0xcc>
 8005ae2:	a201      	add	r2, pc, #4	; (adr r2, 8005ae8 <xTaskGenericNotifyFromISR+0x80>)
 8005ae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ae8:	08005b55 	.word	0x08005b55
 8005aec:	08005afd 	.word	0x08005afd
 8005af0:	08005b0b 	.word	0x08005b0b
 8005af4:	08005b17 	.word	0x08005b17
 8005af8:	08005b1f 	.word	0x08005b1f
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8005afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005afe:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	431a      	orrs	r2, r3
 8005b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b06:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8005b08:	e027      	b.n	8005b5a <xTaskGenericNotifyFromISR+0xf2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8005b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b0e:	1c5a      	adds	r2, r3, #1
 8005b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b12:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8005b14:	e021      	b.n	8005b5a <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8005b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b18:	68ba      	ldr	r2, [r7, #8]
 8005b1a:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8005b1c:	e01d      	b.n	8005b5a <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8005b1e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005b22:	2b02      	cmp	r3, #2
 8005b24:	d003      	beq.n	8005b2e <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8005b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b28:	68ba      	ldr	r2, [r7, #8]
 8005b2a:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8005b2c:	e015      	b.n	8005b5a <xTaskGenericNotifyFromISR+0xf2>
						xReturn = pdFAIL;
 8005b2e:	2300      	movs	r3, #0
 8005b30:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 8005b32:	e012      	b.n	8005b5a <xTaskGenericNotifyFromISR+0xf2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8005b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b3c:	d00c      	beq.n	8005b58 <xTaskGenericNotifyFromISR+0xf0>
	__asm volatile
 8005b3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b42:	f383 8811 	msr	BASEPRI, r3
 8005b46:	f3bf 8f6f 	isb	sy
 8005b4a:	f3bf 8f4f 	dsb	sy
 8005b4e:	61bb      	str	r3, [r7, #24]
}
 8005b50:	bf00      	nop
 8005b52:	e7fe      	b.n	8005b52 <xTaskGenericNotifyFromISR+0xea>
					break;
 8005b54:	bf00      	nop
 8005b56:	e000      	b.n	8005b5a <xTaskGenericNotifyFromISR+0xf2>
					break;
 8005b58:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8005b5a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005b5e:	2b01      	cmp	r3, #1
 8005b60:	d146      	bne.n	8005bf0 <xTaskGenericNotifyFromISR+0x188>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8005b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d00a      	beq.n	8005b80 <xTaskGenericNotifyFromISR+0x118>
	__asm volatile
 8005b6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b6e:	f383 8811 	msr	BASEPRI, r3
 8005b72:	f3bf 8f6f 	isb	sy
 8005b76:	f3bf 8f4f 	dsb	sy
 8005b7a:	617b      	str	r3, [r7, #20]
}
 8005b7c:	bf00      	nop
 8005b7e:	e7fe      	b.n	8005b7e <xTaskGenericNotifyFromISR+0x116>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b80:	4b21      	ldr	r3, [pc, #132]	; (8005c08 <xTaskGenericNotifyFromISR+0x1a0>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d11d      	bne.n	8005bc4 <xTaskGenericNotifyFromISR+0x15c>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b8a:	3304      	adds	r3, #4
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	f7fe f9a3 	bl	8003ed8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b96:	4b1d      	ldr	r3, [pc, #116]	; (8005c0c <xTaskGenericNotifyFromISR+0x1a4>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	429a      	cmp	r2, r3
 8005b9c:	d903      	bls.n	8005ba6 <xTaskGenericNotifyFromISR+0x13e>
 8005b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ba2:	4a1a      	ldr	r2, [pc, #104]	; (8005c0c <xTaskGenericNotifyFromISR+0x1a4>)
 8005ba4:	6013      	str	r3, [r2, #0]
 8005ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ba8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005baa:	4613      	mov	r3, r2
 8005bac:	009b      	lsls	r3, r3, #2
 8005bae:	4413      	add	r3, r2
 8005bb0:	009b      	lsls	r3, r3, #2
 8005bb2:	4a17      	ldr	r2, [pc, #92]	; (8005c10 <xTaskGenericNotifyFromISR+0x1a8>)
 8005bb4:	441a      	add	r2, r3
 8005bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bb8:	3304      	adds	r3, #4
 8005bba:	4619      	mov	r1, r3
 8005bbc:	4610      	mov	r0, r2
 8005bbe:	f7fe f92e 	bl	8003e1e <vListInsertEnd>
 8005bc2:	e005      	b.n	8005bd0 <xTaskGenericNotifyFromISR+0x168>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8005bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bc6:	3318      	adds	r3, #24
 8005bc8:	4619      	mov	r1, r3
 8005bca:	4812      	ldr	r0, [pc, #72]	; (8005c14 <xTaskGenericNotifyFromISR+0x1ac>)
 8005bcc:	f7fe f927 	bl	8003e1e <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bd4:	4b10      	ldr	r3, [pc, #64]	; (8005c18 <xTaskGenericNotifyFromISR+0x1b0>)
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bda:	429a      	cmp	r2, r3
 8005bdc:	d908      	bls.n	8005bf0 <xTaskGenericNotifyFromISR+0x188>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8005bde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d002      	beq.n	8005bea <xTaskGenericNotifyFromISR+0x182>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8005be4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005be6:	2201      	movs	r2, #1
 8005be8:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8005bea:	4b0c      	ldr	r3, [pc, #48]	; (8005c1c <xTaskGenericNotifyFromISR+0x1b4>)
 8005bec:	2201      	movs	r2, #1
 8005bee:	601a      	str	r2, [r3, #0]
 8005bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bf2:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005bf4:	693b      	ldr	r3, [r7, #16]
 8005bf6:	f383 8811 	msr	BASEPRI, r3
}
 8005bfa:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8005bfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8005bfe:	4618      	mov	r0, r3
 8005c00:	3738      	adds	r7, #56	; 0x38
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bd80      	pop	{r7, pc}
 8005c06:	bf00      	nop
 8005c08:	20000e98 	.word	0x20000e98
 8005c0c:	20000e78 	.word	0x20000e78
 8005c10:	200009a0 	.word	0x200009a0
 8005c14:	20000e30 	.word	0x20000e30
 8005c18:	2000099c 	.word	0x2000099c
 8005c1c:	20000e84 	.word	0x20000e84

08005c20 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b084      	sub	sp, #16
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
 8005c28:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005c2a:	4b21      	ldr	r3, [pc, #132]	; (8005cb0 <prvAddCurrentTaskToDelayedList+0x90>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005c30:	4b20      	ldr	r3, [pc, #128]	; (8005cb4 <prvAddCurrentTaskToDelayedList+0x94>)
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	3304      	adds	r3, #4
 8005c36:	4618      	mov	r0, r3
 8005c38:	f7fe f94e 	bl	8003ed8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c42:	d10a      	bne.n	8005c5a <prvAddCurrentTaskToDelayedList+0x3a>
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d007      	beq.n	8005c5a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005c4a:	4b1a      	ldr	r3, [pc, #104]	; (8005cb4 <prvAddCurrentTaskToDelayedList+0x94>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	3304      	adds	r3, #4
 8005c50:	4619      	mov	r1, r3
 8005c52:	4819      	ldr	r0, [pc, #100]	; (8005cb8 <prvAddCurrentTaskToDelayedList+0x98>)
 8005c54:	f7fe f8e3 	bl	8003e1e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005c58:	e026      	b.n	8005ca8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005c5a:	68fa      	ldr	r2, [r7, #12]
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	4413      	add	r3, r2
 8005c60:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005c62:	4b14      	ldr	r3, [pc, #80]	; (8005cb4 <prvAddCurrentTaskToDelayedList+0x94>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	68ba      	ldr	r2, [r7, #8]
 8005c68:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005c6a:	68ba      	ldr	r2, [r7, #8]
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	429a      	cmp	r2, r3
 8005c70:	d209      	bcs.n	8005c86 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005c72:	4b12      	ldr	r3, [pc, #72]	; (8005cbc <prvAddCurrentTaskToDelayedList+0x9c>)
 8005c74:	681a      	ldr	r2, [r3, #0]
 8005c76:	4b0f      	ldr	r3, [pc, #60]	; (8005cb4 <prvAddCurrentTaskToDelayedList+0x94>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	3304      	adds	r3, #4
 8005c7c:	4619      	mov	r1, r3
 8005c7e:	4610      	mov	r0, r2
 8005c80:	f7fe f8f1 	bl	8003e66 <vListInsert>
}
 8005c84:	e010      	b.n	8005ca8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005c86:	4b0e      	ldr	r3, [pc, #56]	; (8005cc0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005c88:	681a      	ldr	r2, [r3, #0]
 8005c8a:	4b0a      	ldr	r3, [pc, #40]	; (8005cb4 <prvAddCurrentTaskToDelayedList+0x94>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	3304      	adds	r3, #4
 8005c90:	4619      	mov	r1, r3
 8005c92:	4610      	mov	r0, r2
 8005c94:	f7fe f8e7 	bl	8003e66 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005c98:	4b0a      	ldr	r3, [pc, #40]	; (8005cc4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	68ba      	ldr	r2, [r7, #8]
 8005c9e:	429a      	cmp	r2, r3
 8005ca0:	d202      	bcs.n	8005ca8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005ca2:	4a08      	ldr	r2, [pc, #32]	; (8005cc4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	6013      	str	r3, [r2, #0]
}
 8005ca8:	bf00      	nop
 8005caa:	3710      	adds	r7, #16
 8005cac:	46bd      	mov	sp, r7
 8005cae:	bd80      	pop	{r7, pc}
 8005cb0:	20000e74 	.word	0x20000e74
 8005cb4:	2000099c 	.word	0x2000099c
 8005cb8:	20000e5c 	.word	0x20000e5c
 8005cbc:	20000e2c 	.word	0x20000e2c
 8005cc0:	20000e28 	.word	0x20000e28
 8005cc4:	20000e90 	.word	0x20000e90

08005cc8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b08a      	sub	sp, #40	; 0x28
 8005ccc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005cce:	2300      	movs	r3, #0
 8005cd0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005cd2:	f000 fb07 	bl	80062e4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005cd6:	4b1c      	ldr	r3, [pc, #112]	; (8005d48 <xTimerCreateTimerTask+0x80>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d021      	beq.n	8005d22 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005cde:	2300      	movs	r3, #0
 8005ce0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005ce6:	1d3a      	adds	r2, r7, #4
 8005ce8:	f107 0108 	add.w	r1, r7, #8
 8005cec:	f107 030c 	add.w	r3, r7, #12
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	f7fe f84d 	bl	8003d90 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005cf6:	6879      	ldr	r1, [r7, #4]
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	68fa      	ldr	r2, [r7, #12]
 8005cfc:	9202      	str	r2, [sp, #8]
 8005cfe:	9301      	str	r3, [sp, #4]
 8005d00:	2302      	movs	r3, #2
 8005d02:	9300      	str	r3, [sp, #0]
 8005d04:	2300      	movs	r3, #0
 8005d06:	460a      	mov	r2, r1
 8005d08:	4910      	ldr	r1, [pc, #64]	; (8005d4c <xTimerCreateTimerTask+0x84>)
 8005d0a:	4811      	ldr	r0, [pc, #68]	; (8005d50 <xTimerCreateTimerTask+0x88>)
 8005d0c:	f7fe fef0 	bl	8004af0 <xTaskCreateStatic>
 8005d10:	4603      	mov	r3, r0
 8005d12:	4a10      	ldr	r2, [pc, #64]	; (8005d54 <xTimerCreateTimerTask+0x8c>)
 8005d14:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005d16:	4b0f      	ldr	r3, [pc, #60]	; (8005d54 <xTimerCreateTimerTask+0x8c>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d001      	beq.n	8005d22 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005d1e:	2301      	movs	r3, #1
 8005d20:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005d22:	697b      	ldr	r3, [r7, #20]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d10a      	bne.n	8005d3e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005d28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d2c:	f383 8811 	msr	BASEPRI, r3
 8005d30:	f3bf 8f6f 	isb	sy
 8005d34:	f3bf 8f4f 	dsb	sy
 8005d38:	613b      	str	r3, [r7, #16]
}
 8005d3a:	bf00      	nop
 8005d3c:	e7fe      	b.n	8005d3c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005d3e:	697b      	ldr	r3, [r7, #20]
}
 8005d40:	4618      	mov	r0, r3
 8005d42:	3718      	adds	r7, #24
 8005d44:	46bd      	mov	sp, r7
 8005d46:	bd80      	pop	{r7, pc}
 8005d48:	20000ecc 	.word	0x20000ecc
 8005d4c:	08007c7c 	.word	0x08007c7c
 8005d50:	08005e8d 	.word	0x08005e8d
 8005d54:	20000ed0 	.word	0x20000ed0

08005d58 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b08a      	sub	sp, #40	; 0x28
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	60f8      	str	r0, [r7, #12]
 8005d60:	60b9      	str	r1, [r7, #8]
 8005d62:	607a      	str	r2, [r7, #4]
 8005d64:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005d66:	2300      	movs	r3, #0
 8005d68:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d10a      	bne.n	8005d86 <xTimerGenericCommand+0x2e>
	__asm volatile
 8005d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d74:	f383 8811 	msr	BASEPRI, r3
 8005d78:	f3bf 8f6f 	isb	sy
 8005d7c:	f3bf 8f4f 	dsb	sy
 8005d80:	623b      	str	r3, [r7, #32]
}
 8005d82:	bf00      	nop
 8005d84:	e7fe      	b.n	8005d84 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005d86:	4b1a      	ldr	r3, [pc, #104]	; (8005df0 <xTimerGenericCommand+0x98>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d02a      	beq.n	8005de4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	2b05      	cmp	r3, #5
 8005d9e:	dc18      	bgt.n	8005dd2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005da0:	f7ff fcc4 	bl	800572c <xTaskGetSchedulerState>
 8005da4:	4603      	mov	r3, r0
 8005da6:	2b02      	cmp	r3, #2
 8005da8:	d109      	bne.n	8005dbe <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005daa:	4b11      	ldr	r3, [pc, #68]	; (8005df0 <xTimerGenericCommand+0x98>)
 8005dac:	6818      	ldr	r0, [r3, #0]
 8005dae:	f107 0110 	add.w	r1, r7, #16
 8005db2:	2300      	movs	r3, #0
 8005db4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005db6:	f7fe f9f7 	bl	80041a8 <xQueueGenericSend>
 8005dba:	6278      	str	r0, [r7, #36]	; 0x24
 8005dbc:	e012      	b.n	8005de4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005dbe:	4b0c      	ldr	r3, [pc, #48]	; (8005df0 <xTimerGenericCommand+0x98>)
 8005dc0:	6818      	ldr	r0, [r3, #0]
 8005dc2:	f107 0110 	add.w	r1, r7, #16
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	2200      	movs	r2, #0
 8005dca:	f7fe f9ed 	bl	80041a8 <xQueueGenericSend>
 8005dce:	6278      	str	r0, [r7, #36]	; 0x24
 8005dd0:	e008      	b.n	8005de4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005dd2:	4b07      	ldr	r3, [pc, #28]	; (8005df0 <xTimerGenericCommand+0x98>)
 8005dd4:	6818      	ldr	r0, [r3, #0]
 8005dd6:	f107 0110 	add.w	r1, r7, #16
 8005dda:	2300      	movs	r3, #0
 8005ddc:	683a      	ldr	r2, [r7, #0]
 8005dde:	f7fe fae1 	bl	80043a4 <xQueueGenericSendFromISR>
 8005de2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005de6:	4618      	mov	r0, r3
 8005de8:	3728      	adds	r7, #40	; 0x28
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bd80      	pop	{r7, pc}
 8005dee:	bf00      	nop
 8005df0:	20000ecc 	.word	0x20000ecc

08005df4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b088      	sub	sp, #32
 8005df8:	af02      	add	r7, sp, #8
 8005dfa:	6078      	str	r0, [r7, #4]
 8005dfc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005dfe:	4b22      	ldr	r3, [pc, #136]	; (8005e88 <prvProcessExpiredTimer+0x94>)
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	68db      	ldr	r3, [r3, #12]
 8005e04:	68db      	ldr	r3, [r3, #12]
 8005e06:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005e08:	697b      	ldr	r3, [r7, #20]
 8005e0a:	3304      	adds	r3, #4
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	f7fe f863 	bl	8003ed8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005e12:	697b      	ldr	r3, [r7, #20]
 8005e14:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005e18:	f003 0304 	and.w	r3, r3, #4
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d022      	beq.n	8005e66 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005e20:	697b      	ldr	r3, [r7, #20]
 8005e22:	699a      	ldr	r2, [r3, #24]
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	18d1      	adds	r1, r2, r3
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	683a      	ldr	r2, [r7, #0]
 8005e2c:	6978      	ldr	r0, [r7, #20]
 8005e2e:	f000 f8d1 	bl	8005fd4 <prvInsertTimerInActiveList>
 8005e32:	4603      	mov	r3, r0
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d01f      	beq.n	8005e78 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005e38:	2300      	movs	r3, #0
 8005e3a:	9300      	str	r3, [sp, #0]
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	687a      	ldr	r2, [r7, #4]
 8005e40:	2100      	movs	r1, #0
 8005e42:	6978      	ldr	r0, [r7, #20]
 8005e44:	f7ff ff88 	bl	8005d58 <xTimerGenericCommand>
 8005e48:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005e4a:	693b      	ldr	r3, [r7, #16]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d113      	bne.n	8005e78 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8005e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e54:	f383 8811 	msr	BASEPRI, r3
 8005e58:	f3bf 8f6f 	isb	sy
 8005e5c:	f3bf 8f4f 	dsb	sy
 8005e60:	60fb      	str	r3, [r7, #12]
}
 8005e62:	bf00      	nop
 8005e64:	e7fe      	b.n	8005e64 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005e66:	697b      	ldr	r3, [r7, #20]
 8005e68:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005e6c:	f023 0301 	bic.w	r3, r3, #1
 8005e70:	b2da      	uxtb	r2, r3
 8005e72:	697b      	ldr	r3, [r7, #20]
 8005e74:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005e78:	697b      	ldr	r3, [r7, #20]
 8005e7a:	6a1b      	ldr	r3, [r3, #32]
 8005e7c:	6978      	ldr	r0, [r7, #20]
 8005e7e:	4798      	blx	r3
}
 8005e80:	bf00      	nop
 8005e82:	3718      	adds	r7, #24
 8005e84:	46bd      	mov	sp, r7
 8005e86:	bd80      	pop	{r7, pc}
 8005e88:	20000ec4 	.word	0x20000ec4

08005e8c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b084      	sub	sp, #16
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005e94:	f107 0308 	add.w	r3, r7, #8
 8005e98:	4618      	mov	r0, r3
 8005e9a:	f000 f857 	bl	8005f4c <prvGetNextExpireTime>
 8005e9e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	4619      	mov	r1, r3
 8005ea4:	68f8      	ldr	r0, [r7, #12]
 8005ea6:	f000 f803 	bl	8005eb0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005eaa:	f000 f8d5 	bl	8006058 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005eae:	e7f1      	b.n	8005e94 <prvTimerTask+0x8>

08005eb0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b084      	sub	sp, #16
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
 8005eb8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005eba:	f7ff f855 	bl	8004f68 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005ebe:	f107 0308 	add.w	r3, r7, #8
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	f000 f866 	bl	8005f94 <prvSampleTimeNow>
 8005ec8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d130      	bne.n	8005f32 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d10a      	bne.n	8005eec <prvProcessTimerOrBlockTask+0x3c>
 8005ed6:	687a      	ldr	r2, [r7, #4]
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	429a      	cmp	r2, r3
 8005edc:	d806      	bhi.n	8005eec <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005ede:	f7ff f851 	bl	8004f84 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005ee2:	68f9      	ldr	r1, [r7, #12]
 8005ee4:	6878      	ldr	r0, [r7, #4]
 8005ee6:	f7ff ff85 	bl	8005df4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005eea:	e024      	b.n	8005f36 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d008      	beq.n	8005f04 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005ef2:	4b13      	ldr	r3, [pc, #76]	; (8005f40 <prvProcessTimerOrBlockTask+0x90>)
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d101      	bne.n	8005f00 <prvProcessTimerOrBlockTask+0x50>
 8005efc:	2301      	movs	r3, #1
 8005efe:	e000      	b.n	8005f02 <prvProcessTimerOrBlockTask+0x52>
 8005f00:	2300      	movs	r3, #0
 8005f02:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005f04:	4b0f      	ldr	r3, [pc, #60]	; (8005f44 <prvProcessTimerOrBlockTask+0x94>)
 8005f06:	6818      	ldr	r0, [r3, #0]
 8005f08:	687a      	ldr	r2, [r7, #4]
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	1ad3      	subs	r3, r2, r3
 8005f0e:	683a      	ldr	r2, [r7, #0]
 8005f10:	4619      	mov	r1, r3
 8005f12:	f7fe fdb9 	bl	8004a88 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005f16:	f7ff f835 	bl	8004f84 <xTaskResumeAll>
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d10a      	bne.n	8005f36 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005f20:	4b09      	ldr	r3, [pc, #36]	; (8005f48 <prvProcessTimerOrBlockTask+0x98>)
 8005f22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f26:	601a      	str	r2, [r3, #0]
 8005f28:	f3bf 8f4f 	dsb	sy
 8005f2c:	f3bf 8f6f 	isb	sy
}
 8005f30:	e001      	b.n	8005f36 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005f32:	f7ff f827 	bl	8004f84 <xTaskResumeAll>
}
 8005f36:	bf00      	nop
 8005f38:	3710      	adds	r7, #16
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	bd80      	pop	{r7, pc}
 8005f3e:	bf00      	nop
 8005f40:	20000ec8 	.word	0x20000ec8
 8005f44:	20000ecc 	.word	0x20000ecc
 8005f48:	e000ed04 	.word	0xe000ed04

08005f4c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	b085      	sub	sp, #20
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005f54:	4b0e      	ldr	r3, [pc, #56]	; (8005f90 <prvGetNextExpireTime+0x44>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d101      	bne.n	8005f62 <prvGetNextExpireTime+0x16>
 8005f5e:	2201      	movs	r2, #1
 8005f60:	e000      	b.n	8005f64 <prvGetNextExpireTime+0x18>
 8005f62:	2200      	movs	r2, #0
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d105      	bne.n	8005f7c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005f70:	4b07      	ldr	r3, [pc, #28]	; (8005f90 <prvGetNextExpireTime+0x44>)
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	68db      	ldr	r3, [r3, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	60fb      	str	r3, [r7, #12]
 8005f7a:	e001      	b.n	8005f80 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005f80:	68fb      	ldr	r3, [r7, #12]
}
 8005f82:	4618      	mov	r0, r3
 8005f84:	3714      	adds	r7, #20
 8005f86:	46bd      	mov	sp, r7
 8005f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8c:	4770      	bx	lr
 8005f8e:	bf00      	nop
 8005f90:	20000ec4 	.word	0x20000ec4

08005f94 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b084      	sub	sp, #16
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005f9c:	f7ff f890 	bl	80050c0 <xTaskGetTickCount>
 8005fa0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005fa2:	4b0b      	ldr	r3, [pc, #44]	; (8005fd0 <prvSampleTimeNow+0x3c>)
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	68fa      	ldr	r2, [r7, #12]
 8005fa8:	429a      	cmp	r2, r3
 8005faa:	d205      	bcs.n	8005fb8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005fac:	f000 f936 	bl	800621c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2201      	movs	r2, #1
 8005fb4:	601a      	str	r2, [r3, #0]
 8005fb6:	e002      	b.n	8005fbe <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2200      	movs	r2, #0
 8005fbc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005fbe:	4a04      	ldr	r2, [pc, #16]	; (8005fd0 <prvSampleTimeNow+0x3c>)
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
}
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	3710      	adds	r7, #16
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	bd80      	pop	{r7, pc}
 8005fce:	bf00      	nop
 8005fd0:	20000ed4 	.word	0x20000ed4

08005fd4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b086      	sub	sp, #24
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	60f8      	str	r0, [r7, #12]
 8005fdc:	60b9      	str	r1, [r7, #8]
 8005fde:	607a      	str	r2, [r7, #4]
 8005fe0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	68ba      	ldr	r2, [r7, #8]
 8005fea:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	68fa      	ldr	r2, [r7, #12]
 8005ff0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005ff2:	68ba      	ldr	r2, [r7, #8]
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	429a      	cmp	r2, r3
 8005ff8:	d812      	bhi.n	8006020 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ffa:	687a      	ldr	r2, [r7, #4]
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	1ad2      	subs	r2, r2, r3
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	699b      	ldr	r3, [r3, #24]
 8006004:	429a      	cmp	r2, r3
 8006006:	d302      	bcc.n	800600e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006008:	2301      	movs	r3, #1
 800600a:	617b      	str	r3, [r7, #20]
 800600c:	e01b      	b.n	8006046 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800600e:	4b10      	ldr	r3, [pc, #64]	; (8006050 <prvInsertTimerInActiveList+0x7c>)
 8006010:	681a      	ldr	r2, [r3, #0]
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	3304      	adds	r3, #4
 8006016:	4619      	mov	r1, r3
 8006018:	4610      	mov	r0, r2
 800601a:	f7fd ff24 	bl	8003e66 <vListInsert>
 800601e:	e012      	b.n	8006046 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006020:	687a      	ldr	r2, [r7, #4]
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	429a      	cmp	r2, r3
 8006026:	d206      	bcs.n	8006036 <prvInsertTimerInActiveList+0x62>
 8006028:	68ba      	ldr	r2, [r7, #8]
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	429a      	cmp	r2, r3
 800602e:	d302      	bcc.n	8006036 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006030:	2301      	movs	r3, #1
 8006032:	617b      	str	r3, [r7, #20]
 8006034:	e007      	b.n	8006046 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006036:	4b07      	ldr	r3, [pc, #28]	; (8006054 <prvInsertTimerInActiveList+0x80>)
 8006038:	681a      	ldr	r2, [r3, #0]
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	3304      	adds	r3, #4
 800603e:	4619      	mov	r1, r3
 8006040:	4610      	mov	r0, r2
 8006042:	f7fd ff10 	bl	8003e66 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006046:	697b      	ldr	r3, [r7, #20]
}
 8006048:	4618      	mov	r0, r3
 800604a:	3718      	adds	r7, #24
 800604c:	46bd      	mov	sp, r7
 800604e:	bd80      	pop	{r7, pc}
 8006050:	20000ec8 	.word	0x20000ec8
 8006054:	20000ec4 	.word	0x20000ec4

08006058 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b08e      	sub	sp, #56	; 0x38
 800605c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800605e:	e0ca      	b.n	80061f6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2b00      	cmp	r3, #0
 8006064:	da18      	bge.n	8006098 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006066:	1d3b      	adds	r3, r7, #4
 8006068:	3304      	adds	r3, #4
 800606a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800606c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800606e:	2b00      	cmp	r3, #0
 8006070:	d10a      	bne.n	8006088 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006072:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006076:	f383 8811 	msr	BASEPRI, r3
 800607a:	f3bf 8f6f 	isb	sy
 800607e:	f3bf 8f4f 	dsb	sy
 8006082:	61fb      	str	r3, [r7, #28]
}
 8006084:	bf00      	nop
 8006086:	e7fe      	b.n	8006086 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800608e:	6850      	ldr	r0, [r2, #4]
 8006090:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006092:	6892      	ldr	r2, [r2, #8]
 8006094:	4611      	mov	r1, r2
 8006096:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2b00      	cmp	r3, #0
 800609c:	f2c0 80aa 	blt.w	80061f4 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80060a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060a6:	695b      	ldr	r3, [r3, #20]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d004      	beq.n	80060b6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80060ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060ae:	3304      	adds	r3, #4
 80060b0:	4618      	mov	r0, r3
 80060b2:	f7fd ff11 	bl	8003ed8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80060b6:	463b      	mov	r3, r7
 80060b8:	4618      	mov	r0, r3
 80060ba:	f7ff ff6b 	bl	8005f94 <prvSampleTimeNow>
 80060be:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2b09      	cmp	r3, #9
 80060c4:	f200 8097 	bhi.w	80061f6 <prvProcessReceivedCommands+0x19e>
 80060c8:	a201      	add	r2, pc, #4	; (adr r2, 80060d0 <prvProcessReceivedCommands+0x78>)
 80060ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060ce:	bf00      	nop
 80060d0:	080060f9 	.word	0x080060f9
 80060d4:	080060f9 	.word	0x080060f9
 80060d8:	080060f9 	.word	0x080060f9
 80060dc:	0800616d 	.word	0x0800616d
 80060e0:	08006181 	.word	0x08006181
 80060e4:	080061cb 	.word	0x080061cb
 80060e8:	080060f9 	.word	0x080060f9
 80060ec:	080060f9 	.word	0x080060f9
 80060f0:	0800616d 	.word	0x0800616d
 80060f4:	08006181 	.word	0x08006181
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80060f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80060fe:	f043 0301 	orr.w	r3, r3, #1
 8006102:	b2da      	uxtb	r2, r3
 8006104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006106:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800610a:	68ba      	ldr	r2, [r7, #8]
 800610c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800610e:	699b      	ldr	r3, [r3, #24]
 8006110:	18d1      	adds	r1, r2, r3
 8006112:	68bb      	ldr	r3, [r7, #8]
 8006114:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006116:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006118:	f7ff ff5c 	bl	8005fd4 <prvInsertTimerInActiveList>
 800611c:	4603      	mov	r3, r0
 800611e:	2b00      	cmp	r3, #0
 8006120:	d069      	beq.n	80061f6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006124:	6a1b      	ldr	r3, [r3, #32]
 8006126:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006128:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800612a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800612c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006130:	f003 0304 	and.w	r3, r3, #4
 8006134:	2b00      	cmp	r3, #0
 8006136:	d05e      	beq.n	80061f6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006138:	68ba      	ldr	r2, [r7, #8]
 800613a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800613c:	699b      	ldr	r3, [r3, #24]
 800613e:	441a      	add	r2, r3
 8006140:	2300      	movs	r3, #0
 8006142:	9300      	str	r3, [sp, #0]
 8006144:	2300      	movs	r3, #0
 8006146:	2100      	movs	r1, #0
 8006148:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800614a:	f7ff fe05 	bl	8005d58 <xTimerGenericCommand>
 800614e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006150:	6a3b      	ldr	r3, [r7, #32]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d14f      	bne.n	80061f6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8006156:	f04f 0350 	mov.w	r3, #80	; 0x50
 800615a:	f383 8811 	msr	BASEPRI, r3
 800615e:	f3bf 8f6f 	isb	sy
 8006162:	f3bf 8f4f 	dsb	sy
 8006166:	61bb      	str	r3, [r7, #24]
}
 8006168:	bf00      	nop
 800616a:	e7fe      	b.n	800616a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800616c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800616e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006172:	f023 0301 	bic.w	r3, r3, #1
 8006176:	b2da      	uxtb	r2, r3
 8006178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800617a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800617e:	e03a      	b.n	80061f6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006182:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006186:	f043 0301 	orr.w	r3, r3, #1
 800618a:	b2da      	uxtb	r2, r3
 800618c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800618e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006192:	68ba      	ldr	r2, [r7, #8]
 8006194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006196:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800619a:	699b      	ldr	r3, [r3, #24]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d10a      	bne.n	80061b6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80061a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061a4:	f383 8811 	msr	BASEPRI, r3
 80061a8:	f3bf 8f6f 	isb	sy
 80061ac:	f3bf 8f4f 	dsb	sy
 80061b0:	617b      	str	r3, [r7, #20]
}
 80061b2:	bf00      	nop
 80061b4:	e7fe      	b.n	80061b4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80061b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061b8:	699a      	ldr	r2, [r3, #24]
 80061ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061bc:	18d1      	adds	r1, r2, r3
 80061be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80061c4:	f7ff ff06 	bl	8005fd4 <prvInsertTimerInActiveList>
					break;
 80061c8:	e015      	b.n	80061f6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80061ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80061d0:	f003 0302 	and.w	r3, r3, #2
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d103      	bne.n	80061e0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80061d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80061da:	f000 fbe1 	bl	80069a0 <vPortFree>
 80061de:	e00a      	b.n	80061f6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80061e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80061e6:	f023 0301 	bic.w	r3, r3, #1
 80061ea:	b2da      	uxtb	r2, r3
 80061ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80061f2:	e000      	b.n	80061f6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80061f4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80061f6:	4b08      	ldr	r3, [pc, #32]	; (8006218 <prvProcessReceivedCommands+0x1c0>)
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	1d39      	adds	r1, r7, #4
 80061fc:	2200      	movs	r2, #0
 80061fe:	4618      	mov	r0, r3
 8006200:	f7fe f96c 	bl	80044dc <xQueueReceive>
 8006204:	4603      	mov	r3, r0
 8006206:	2b00      	cmp	r3, #0
 8006208:	f47f af2a 	bne.w	8006060 <prvProcessReceivedCommands+0x8>
	}
}
 800620c:	bf00      	nop
 800620e:	bf00      	nop
 8006210:	3730      	adds	r7, #48	; 0x30
 8006212:	46bd      	mov	sp, r7
 8006214:	bd80      	pop	{r7, pc}
 8006216:	bf00      	nop
 8006218:	20000ecc 	.word	0x20000ecc

0800621c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b088      	sub	sp, #32
 8006220:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006222:	e048      	b.n	80062b6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006224:	4b2d      	ldr	r3, [pc, #180]	; (80062dc <prvSwitchTimerLists+0xc0>)
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	68db      	ldr	r3, [r3, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800622e:	4b2b      	ldr	r3, [pc, #172]	; (80062dc <prvSwitchTimerLists+0xc0>)
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	68db      	ldr	r3, [r3, #12]
 8006234:	68db      	ldr	r3, [r3, #12]
 8006236:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	3304      	adds	r3, #4
 800623c:	4618      	mov	r0, r3
 800623e:	f7fd fe4b 	bl	8003ed8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	6a1b      	ldr	r3, [r3, #32]
 8006246:	68f8      	ldr	r0, [r7, #12]
 8006248:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006250:	f003 0304 	and.w	r3, r3, #4
 8006254:	2b00      	cmp	r3, #0
 8006256:	d02e      	beq.n	80062b6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	699b      	ldr	r3, [r3, #24]
 800625c:	693a      	ldr	r2, [r7, #16]
 800625e:	4413      	add	r3, r2
 8006260:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006262:	68ba      	ldr	r2, [r7, #8]
 8006264:	693b      	ldr	r3, [r7, #16]
 8006266:	429a      	cmp	r2, r3
 8006268:	d90e      	bls.n	8006288 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	68ba      	ldr	r2, [r7, #8]
 800626e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	68fa      	ldr	r2, [r7, #12]
 8006274:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006276:	4b19      	ldr	r3, [pc, #100]	; (80062dc <prvSwitchTimerLists+0xc0>)
 8006278:	681a      	ldr	r2, [r3, #0]
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	3304      	adds	r3, #4
 800627e:	4619      	mov	r1, r3
 8006280:	4610      	mov	r0, r2
 8006282:	f7fd fdf0 	bl	8003e66 <vListInsert>
 8006286:	e016      	b.n	80062b6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006288:	2300      	movs	r3, #0
 800628a:	9300      	str	r3, [sp, #0]
 800628c:	2300      	movs	r3, #0
 800628e:	693a      	ldr	r2, [r7, #16]
 8006290:	2100      	movs	r1, #0
 8006292:	68f8      	ldr	r0, [r7, #12]
 8006294:	f7ff fd60 	bl	8005d58 <xTimerGenericCommand>
 8006298:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d10a      	bne.n	80062b6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80062a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062a4:	f383 8811 	msr	BASEPRI, r3
 80062a8:	f3bf 8f6f 	isb	sy
 80062ac:	f3bf 8f4f 	dsb	sy
 80062b0:	603b      	str	r3, [r7, #0]
}
 80062b2:	bf00      	nop
 80062b4:	e7fe      	b.n	80062b4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80062b6:	4b09      	ldr	r3, [pc, #36]	; (80062dc <prvSwitchTimerLists+0xc0>)
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d1b1      	bne.n	8006224 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80062c0:	4b06      	ldr	r3, [pc, #24]	; (80062dc <prvSwitchTimerLists+0xc0>)
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80062c6:	4b06      	ldr	r3, [pc, #24]	; (80062e0 <prvSwitchTimerLists+0xc4>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	4a04      	ldr	r2, [pc, #16]	; (80062dc <prvSwitchTimerLists+0xc0>)
 80062cc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80062ce:	4a04      	ldr	r2, [pc, #16]	; (80062e0 <prvSwitchTimerLists+0xc4>)
 80062d0:	697b      	ldr	r3, [r7, #20]
 80062d2:	6013      	str	r3, [r2, #0]
}
 80062d4:	bf00      	nop
 80062d6:	3718      	adds	r7, #24
 80062d8:	46bd      	mov	sp, r7
 80062da:	bd80      	pop	{r7, pc}
 80062dc:	20000ec4 	.word	0x20000ec4
 80062e0:	20000ec8 	.word	0x20000ec8

080062e4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b082      	sub	sp, #8
 80062e8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80062ea:	f000 f96b 	bl	80065c4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80062ee:	4b15      	ldr	r3, [pc, #84]	; (8006344 <prvCheckForValidListAndQueue+0x60>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d120      	bne.n	8006338 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80062f6:	4814      	ldr	r0, [pc, #80]	; (8006348 <prvCheckForValidListAndQueue+0x64>)
 80062f8:	f7fd fd64 	bl	8003dc4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80062fc:	4813      	ldr	r0, [pc, #76]	; (800634c <prvCheckForValidListAndQueue+0x68>)
 80062fe:	f7fd fd61 	bl	8003dc4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006302:	4b13      	ldr	r3, [pc, #76]	; (8006350 <prvCheckForValidListAndQueue+0x6c>)
 8006304:	4a10      	ldr	r2, [pc, #64]	; (8006348 <prvCheckForValidListAndQueue+0x64>)
 8006306:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006308:	4b12      	ldr	r3, [pc, #72]	; (8006354 <prvCheckForValidListAndQueue+0x70>)
 800630a:	4a10      	ldr	r2, [pc, #64]	; (800634c <prvCheckForValidListAndQueue+0x68>)
 800630c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800630e:	2300      	movs	r3, #0
 8006310:	9300      	str	r3, [sp, #0]
 8006312:	4b11      	ldr	r3, [pc, #68]	; (8006358 <prvCheckForValidListAndQueue+0x74>)
 8006314:	4a11      	ldr	r2, [pc, #68]	; (800635c <prvCheckForValidListAndQueue+0x78>)
 8006316:	2110      	movs	r1, #16
 8006318:	200a      	movs	r0, #10
 800631a:	f7fd fe6f 	bl	8003ffc <xQueueGenericCreateStatic>
 800631e:	4603      	mov	r3, r0
 8006320:	4a08      	ldr	r2, [pc, #32]	; (8006344 <prvCheckForValidListAndQueue+0x60>)
 8006322:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006324:	4b07      	ldr	r3, [pc, #28]	; (8006344 <prvCheckForValidListAndQueue+0x60>)
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d005      	beq.n	8006338 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800632c:	4b05      	ldr	r3, [pc, #20]	; (8006344 <prvCheckForValidListAndQueue+0x60>)
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	490b      	ldr	r1, [pc, #44]	; (8006360 <prvCheckForValidListAndQueue+0x7c>)
 8006332:	4618      	mov	r0, r3
 8006334:	f7fe fb7e 	bl	8004a34 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006338:	f000 f974 	bl	8006624 <vPortExitCritical>
}
 800633c:	bf00      	nop
 800633e:	46bd      	mov	sp, r7
 8006340:	bd80      	pop	{r7, pc}
 8006342:	bf00      	nop
 8006344:	20000ecc 	.word	0x20000ecc
 8006348:	20000e9c 	.word	0x20000e9c
 800634c:	20000eb0 	.word	0x20000eb0
 8006350:	20000ec4 	.word	0x20000ec4
 8006354:	20000ec8 	.word	0x20000ec8
 8006358:	20000f78 	.word	0x20000f78
 800635c:	20000ed8 	.word	0x20000ed8
 8006360:	08007c84 	.word	0x08007c84

08006364 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006364:	b480      	push	{r7}
 8006366:	b085      	sub	sp, #20
 8006368:	af00      	add	r7, sp, #0
 800636a:	60f8      	str	r0, [r7, #12]
 800636c:	60b9      	str	r1, [r7, #8]
 800636e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	3b04      	subs	r3, #4
 8006374:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800637c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	3b04      	subs	r3, #4
 8006382:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006384:	68bb      	ldr	r3, [r7, #8]
 8006386:	f023 0201 	bic.w	r2, r3, #1
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	3b04      	subs	r3, #4
 8006392:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006394:	4a0c      	ldr	r2, [pc, #48]	; (80063c8 <pxPortInitialiseStack+0x64>)
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	3b14      	subs	r3, #20
 800639e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80063a0:	687a      	ldr	r2, [r7, #4]
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	3b04      	subs	r3, #4
 80063aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	f06f 0202 	mvn.w	r2, #2
 80063b2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	3b20      	subs	r3, #32
 80063b8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80063ba:	68fb      	ldr	r3, [r7, #12]
}
 80063bc:	4618      	mov	r0, r3
 80063be:	3714      	adds	r7, #20
 80063c0:	46bd      	mov	sp, r7
 80063c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c6:	4770      	bx	lr
 80063c8:	080063cd 	.word	0x080063cd

080063cc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80063cc:	b480      	push	{r7}
 80063ce:	b085      	sub	sp, #20
 80063d0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80063d2:	2300      	movs	r3, #0
 80063d4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80063d6:	4b12      	ldr	r3, [pc, #72]	; (8006420 <prvTaskExitError+0x54>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80063de:	d00a      	beq.n	80063f6 <prvTaskExitError+0x2a>
	__asm volatile
 80063e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063e4:	f383 8811 	msr	BASEPRI, r3
 80063e8:	f3bf 8f6f 	isb	sy
 80063ec:	f3bf 8f4f 	dsb	sy
 80063f0:	60fb      	str	r3, [r7, #12]
}
 80063f2:	bf00      	nop
 80063f4:	e7fe      	b.n	80063f4 <prvTaskExitError+0x28>
	__asm volatile
 80063f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063fa:	f383 8811 	msr	BASEPRI, r3
 80063fe:	f3bf 8f6f 	isb	sy
 8006402:	f3bf 8f4f 	dsb	sy
 8006406:	60bb      	str	r3, [r7, #8]
}
 8006408:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800640a:	bf00      	nop
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d0fc      	beq.n	800640c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006412:	bf00      	nop
 8006414:	bf00      	nop
 8006416:	3714      	adds	r7, #20
 8006418:	46bd      	mov	sp, r7
 800641a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641e:	4770      	bx	lr
 8006420:	200000c8 	.word	0x200000c8
	...

08006430 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006430:	4b07      	ldr	r3, [pc, #28]	; (8006450 <pxCurrentTCBConst2>)
 8006432:	6819      	ldr	r1, [r3, #0]
 8006434:	6808      	ldr	r0, [r1, #0]
 8006436:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800643a:	f380 8809 	msr	PSP, r0
 800643e:	f3bf 8f6f 	isb	sy
 8006442:	f04f 0000 	mov.w	r0, #0
 8006446:	f380 8811 	msr	BASEPRI, r0
 800644a:	4770      	bx	lr
 800644c:	f3af 8000 	nop.w

08006450 <pxCurrentTCBConst2>:
 8006450:	2000099c 	.word	0x2000099c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006454:	bf00      	nop
 8006456:	bf00      	nop

08006458 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006458:	4808      	ldr	r0, [pc, #32]	; (800647c <prvPortStartFirstTask+0x24>)
 800645a:	6800      	ldr	r0, [r0, #0]
 800645c:	6800      	ldr	r0, [r0, #0]
 800645e:	f380 8808 	msr	MSP, r0
 8006462:	f04f 0000 	mov.w	r0, #0
 8006466:	f380 8814 	msr	CONTROL, r0
 800646a:	b662      	cpsie	i
 800646c:	b661      	cpsie	f
 800646e:	f3bf 8f4f 	dsb	sy
 8006472:	f3bf 8f6f 	isb	sy
 8006476:	df00      	svc	0
 8006478:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800647a:	bf00      	nop
 800647c:	e000ed08 	.word	0xe000ed08

08006480 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b086      	sub	sp, #24
 8006484:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006486:	4b46      	ldr	r3, [pc, #280]	; (80065a0 <xPortStartScheduler+0x120>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4a46      	ldr	r2, [pc, #280]	; (80065a4 <xPortStartScheduler+0x124>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d10a      	bne.n	80064a6 <xPortStartScheduler+0x26>
	__asm volatile
 8006490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006494:	f383 8811 	msr	BASEPRI, r3
 8006498:	f3bf 8f6f 	isb	sy
 800649c:	f3bf 8f4f 	dsb	sy
 80064a0:	613b      	str	r3, [r7, #16]
}
 80064a2:	bf00      	nop
 80064a4:	e7fe      	b.n	80064a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80064a6:	4b3e      	ldr	r3, [pc, #248]	; (80065a0 <xPortStartScheduler+0x120>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	4a3f      	ldr	r2, [pc, #252]	; (80065a8 <xPortStartScheduler+0x128>)
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d10a      	bne.n	80064c6 <xPortStartScheduler+0x46>
	__asm volatile
 80064b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064b4:	f383 8811 	msr	BASEPRI, r3
 80064b8:	f3bf 8f6f 	isb	sy
 80064bc:	f3bf 8f4f 	dsb	sy
 80064c0:	60fb      	str	r3, [r7, #12]
}
 80064c2:	bf00      	nop
 80064c4:	e7fe      	b.n	80064c4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80064c6:	4b39      	ldr	r3, [pc, #228]	; (80065ac <xPortStartScheduler+0x12c>)
 80064c8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80064ca:	697b      	ldr	r3, [r7, #20]
 80064cc:	781b      	ldrb	r3, [r3, #0]
 80064ce:	b2db      	uxtb	r3, r3
 80064d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80064d2:	697b      	ldr	r3, [r7, #20]
 80064d4:	22ff      	movs	r2, #255	; 0xff
 80064d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80064d8:	697b      	ldr	r3, [r7, #20]
 80064da:	781b      	ldrb	r3, [r3, #0]
 80064dc:	b2db      	uxtb	r3, r3
 80064de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80064e0:	78fb      	ldrb	r3, [r7, #3]
 80064e2:	b2db      	uxtb	r3, r3
 80064e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80064e8:	b2da      	uxtb	r2, r3
 80064ea:	4b31      	ldr	r3, [pc, #196]	; (80065b0 <xPortStartScheduler+0x130>)
 80064ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80064ee:	4b31      	ldr	r3, [pc, #196]	; (80065b4 <xPortStartScheduler+0x134>)
 80064f0:	2207      	movs	r2, #7
 80064f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80064f4:	e009      	b.n	800650a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80064f6:	4b2f      	ldr	r3, [pc, #188]	; (80065b4 <xPortStartScheduler+0x134>)
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	3b01      	subs	r3, #1
 80064fc:	4a2d      	ldr	r2, [pc, #180]	; (80065b4 <xPortStartScheduler+0x134>)
 80064fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006500:	78fb      	ldrb	r3, [r7, #3]
 8006502:	b2db      	uxtb	r3, r3
 8006504:	005b      	lsls	r3, r3, #1
 8006506:	b2db      	uxtb	r3, r3
 8006508:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800650a:	78fb      	ldrb	r3, [r7, #3]
 800650c:	b2db      	uxtb	r3, r3
 800650e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006512:	2b80      	cmp	r3, #128	; 0x80
 8006514:	d0ef      	beq.n	80064f6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006516:	4b27      	ldr	r3, [pc, #156]	; (80065b4 <xPortStartScheduler+0x134>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f1c3 0307 	rsb	r3, r3, #7
 800651e:	2b04      	cmp	r3, #4
 8006520:	d00a      	beq.n	8006538 <xPortStartScheduler+0xb8>
	__asm volatile
 8006522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006526:	f383 8811 	msr	BASEPRI, r3
 800652a:	f3bf 8f6f 	isb	sy
 800652e:	f3bf 8f4f 	dsb	sy
 8006532:	60bb      	str	r3, [r7, #8]
}
 8006534:	bf00      	nop
 8006536:	e7fe      	b.n	8006536 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006538:	4b1e      	ldr	r3, [pc, #120]	; (80065b4 <xPortStartScheduler+0x134>)
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	021b      	lsls	r3, r3, #8
 800653e:	4a1d      	ldr	r2, [pc, #116]	; (80065b4 <xPortStartScheduler+0x134>)
 8006540:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006542:	4b1c      	ldr	r3, [pc, #112]	; (80065b4 <xPortStartScheduler+0x134>)
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800654a:	4a1a      	ldr	r2, [pc, #104]	; (80065b4 <xPortStartScheduler+0x134>)
 800654c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	b2da      	uxtb	r2, r3
 8006552:	697b      	ldr	r3, [r7, #20]
 8006554:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006556:	4b18      	ldr	r3, [pc, #96]	; (80065b8 <xPortStartScheduler+0x138>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4a17      	ldr	r2, [pc, #92]	; (80065b8 <xPortStartScheduler+0x138>)
 800655c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006560:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006562:	4b15      	ldr	r3, [pc, #84]	; (80065b8 <xPortStartScheduler+0x138>)
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	4a14      	ldr	r2, [pc, #80]	; (80065b8 <xPortStartScheduler+0x138>)
 8006568:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800656c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800656e:	f000 f8dd 	bl	800672c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006572:	4b12      	ldr	r3, [pc, #72]	; (80065bc <xPortStartScheduler+0x13c>)
 8006574:	2200      	movs	r2, #0
 8006576:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006578:	f000 f8fc 	bl	8006774 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800657c:	4b10      	ldr	r3, [pc, #64]	; (80065c0 <xPortStartScheduler+0x140>)
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4a0f      	ldr	r2, [pc, #60]	; (80065c0 <xPortStartScheduler+0x140>)
 8006582:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006586:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006588:	f7ff ff66 	bl	8006458 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800658c:	f7fe fe62 	bl	8005254 <vTaskSwitchContext>
	prvTaskExitError();
 8006590:	f7ff ff1c 	bl	80063cc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006594:	2300      	movs	r3, #0
}
 8006596:	4618      	mov	r0, r3
 8006598:	3718      	adds	r7, #24
 800659a:	46bd      	mov	sp, r7
 800659c:	bd80      	pop	{r7, pc}
 800659e:	bf00      	nop
 80065a0:	e000ed00 	.word	0xe000ed00
 80065a4:	410fc271 	.word	0x410fc271
 80065a8:	410fc270 	.word	0x410fc270
 80065ac:	e000e400 	.word	0xe000e400
 80065b0:	20000fc8 	.word	0x20000fc8
 80065b4:	20000fcc 	.word	0x20000fcc
 80065b8:	e000ed20 	.word	0xe000ed20
 80065bc:	200000c8 	.word	0x200000c8
 80065c0:	e000ef34 	.word	0xe000ef34

080065c4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80065c4:	b480      	push	{r7}
 80065c6:	b083      	sub	sp, #12
 80065c8:	af00      	add	r7, sp, #0
	__asm volatile
 80065ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065ce:	f383 8811 	msr	BASEPRI, r3
 80065d2:	f3bf 8f6f 	isb	sy
 80065d6:	f3bf 8f4f 	dsb	sy
 80065da:	607b      	str	r3, [r7, #4]
}
 80065dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80065de:	4b0f      	ldr	r3, [pc, #60]	; (800661c <vPortEnterCritical+0x58>)
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	3301      	adds	r3, #1
 80065e4:	4a0d      	ldr	r2, [pc, #52]	; (800661c <vPortEnterCritical+0x58>)
 80065e6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80065e8:	4b0c      	ldr	r3, [pc, #48]	; (800661c <vPortEnterCritical+0x58>)
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	2b01      	cmp	r3, #1
 80065ee:	d10f      	bne.n	8006610 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80065f0:	4b0b      	ldr	r3, [pc, #44]	; (8006620 <vPortEnterCritical+0x5c>)
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	b2db      	uxtb	r3, r3
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d00a      	beq.n	8006610 <vPortEnterCritical+0x4c>
	__asm volatile
 80065fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065fe:	f383 8811 	msr	BASEPRI, r3
 8006602:	f3bf 8f6f 	isb	sy
 8006606:	f3bf 8f4f 	dsb	sy
 800660a:	603b      	str	r3, [r7, #0]
}
 800660c:	bf00      	nop
 800660e:	e7fe      	b.n	800660e <vPortEnterCritical+0x4a>
	}
}
 8006610:	bf00      	nop
 8006612:	370c      	adds	r7, #12
 8006614:	46bd      	mov	sp, r7
 8006616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661a:	4770      	bx	lr
 800661c:	200000c8 	.word	0x200000c8
 8006620:	e000ed04 	.word	0xe000ed04

08006624 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006624:	b480      	push	{r7}
 8006626:	b083      	sub	sp, #12
 8006628:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800662a:	4b12      	ldr	r3, [pc, #72]	; (8006674 <vPortExitCritical+0x50>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d10a      	bne.n	8006648 <vPortExitCritical+0x24>
	__asm volatile
 8006632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006636:	f383 8811 	msr	BASEPRI, r3
 800663a:	f3bf 8f6f 	isb	sy
 800663e:	f3bf 8f4f 	dsb	sy
 8006642:	607b      	str	r3, [r7, #4]
}
 8006644:	bf00      	nop
 8006646:	e7fe      	b.n	8006646 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006648:	4b0a      	ldr	r3, [pc, #40]	; (8006674 <vPortExitCritical+0x50>)
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	3b01      	subs	r3, #1
 800664e:	4a09      	ldr	r2, [pc, #36]	; (8006674 <vPortExitCritical+0x50>)
 8006650:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006652:	4b08      	ldr	r3, [pc, #32]	; (8006674 <vPortExitCritical+0x50>)
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d105      	bne.n	8006666 <vPortExitCritical+0x42>
 800665a:	2300      	movs	r3, #0
 800665c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	f383 8811 	msr	BASEPRI, r3
}
 8006664:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006666:	bf00      	nop
 8006668:	370c      	adds	r7, #12
 800666a:	46bd      	mov	sp, r7
 800666c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006670:	4770      	bx	lr
 8006672:	bf00      	nop
 8006674:	200000c8 	.word	0x200000c8
	...

08006680 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006680:	f3ef 8009 	mrs	r0, PSP
 8006684:	f3bf 8f6f 	isb	sy
 8006688:	4b15      	ldr	r3, [pc, #84]	; (80066e0 <pxCurrentTCBConst>)
 800668a:	681a      	ldr	r2, [r3, #0]
 800668c:	f01e 0f10 	tst.w	lr, #16
 8006690:	bf08      	it	eq
 8006692:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006696:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800669a:	6010      	str	r0, [r2, #0]
 800669c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80066a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80066a4:	f380 8811 	msr	BASEPRI, r0
 80066a8:	f3bf 8f4f 	dsb	sy
 80066ac:	f3bf 8f6f 	isb	sy
 80066b0:	f7fe fdd0 	bl	8005254 <vTaskSwitchContext>
 80066b4:	f04f 0000 	mov.w	r0, #0
 80066b8:	f380 8811 	msr	BASEPRI, r0
 80066bc:	bc09      	pop	{r0, r3}
 80066be:	6819      	ldr	r1, [r3, #0]
 80066c0:	6808      	ldr	r0, [r1, #0]
 80066c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066c6:	f01e 0f10 	tst.w	lr, #16
 80066ca:	bf08      	it	eq
 80066cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80066d0:	f380 8809 	msr	PSP, r0
 80066d4:	f3bf 8f6f 	isb	sy
 80066d8:	4770      	bx	lr
 80066da:	bf00      	nop
 80066dc:	f3af 8000 	nop.w

080066e0 <pxCurrentTCBConst>:
 80066e0:	2000099c 	.word	0x2000099c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80066e4:	bf00      	nop
 80066e6:	bf00      	nop

080066e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b082      	sub	sp, #8
 80066ec:	af00      	add	r7, sp, #0
	__asm volatile
 80066ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066f2:	f383 8811 	msr	BASEPRI, r3
 80066f6:	f3bf 8f6f 	isb	sy
 80066fa:	f3bf 8f4f 	dsb	sy
 80066fe:	607b      	str	r3, [r7, #4]
}
 8006700:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006702:	f7fe fced 	bl	80050e0 <xTaskIncrementTick>
 8006706:	4603      	mov	r3, r0
 8006708:	2b00      	cmp	r3, #0
 800670a:	d003      	beq.n	8006714 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800670c:	4b06      	ldr	r3, [pc, #24]	; (8006728 <xPortSysTickHandler+0x40>)
 800670e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006712:	601a      	str	r2, [r3, #0]
 8006714:	2300      	movs	r3, #0
 8006716:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	f383 8811 	msr	BASEPRI, r3
}
 800671e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006720:	bf00      	nop
 8006722:	3708      	adds	r7, #8
 8006724:	46bd      	mov	sp, r7
 8006726:	bd80      	pop	{r7, pc}
 8006728:	e000ed04 	.word	0xe000ed04

0800672c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800672c:	b480      	push	{r7}
 800672e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006730:	4b0b      	ldr	r3, [pc, #44]	; (8006760 <vPortSetupTimerInterrupt+0x34>)
 8006732:	2200      	movs	r2, #0
 8006734:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006736:	4b0b      	ldr	r3, [pc, #44]	; (8006764 <vPortSetupTimerInterrupt+0x38>)
 8006738:	2200      	movs	r2, #0
 800673a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800673c:	4b0a      	ldr	r3, [pc, #40]	; (8006768 <vPortSetupTimerInterrupt+0x3c>)
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4a0a      	ldr	r2, [pc, #40]	; (800676c <vPortSetupTimerInterrupt+0x40>)
 8006742:	fba2 2303 	umull	r2, r3, r2, r3
 8006746:	099b      	lsrs	r3, r3, #6
 8006748:	4a09      	ldr	r2, [pc, #36]	; (8006770 <vPortSetupTimerInterrupt+0x44>)
 800674a:	3b01      	subs	r3, #1
 800674c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800674e:	4b04      	ldr	r3, [pc, #16]	; (8006760 <vPortSetupTimerInterrupt+0x34>)
 8006750:	2207      	movs	r2, #7
 8006752:	601a      	str	r2, [r3, #0]
}
 8006754:	bf00      	nop
 8006756:	46bd      	mov	sp, r7
 8006758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675c:	4770      	bx	lr
 800675e:	bf00      	nop
 8006760:	e000e010 	.word	0xe000e010
 8006764:	e000e018 	.word	0xe000e018
 8006768:	200000bc 	.word	0x200000bc
 800676c:	10624dd3 	.word	0x10624dd3
 8006770:	e000e014 	.word	0xe000e014

08006774 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006774:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006784 <vPortEnableVFP+0x10>
 8006778:	6801      	ldr	r1, [r0, #0]
 800677a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800677e:	6001      	str	r1, [r0, #0]
 8006780:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006782:	bf00      	nop
 8006784:	e000ed88 	.word	0xe000ed88

08006788 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006788:	b480      	push	{r7}
 800678a:	b085      	sub	sp, #20
 800678c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800678e:	f3ef 8305 	mrs	r3, IPSR
 8006792:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	2b0f      	cmp	r3, #15
 8006798:	d914      	bls.n	80067c4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800679a:	4a17      	ldr	r2, [pc, #92]	; (80067f8 <vPortValidateInterruptPriority+0x70>)
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	4413      	add	r3, r2
 80067a0:	781b      	ldrb	r3, [r3, #0]
 80067a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80067a4:	4b15      	ldr	r3, [pc, #84]	; (80067fc <vPortValidateInterruptPriority+0x74>)
 80067a6:	781b      	ldrb	r3, [r3, #0]
 80067a8:	7afa      	ldrb	r2, [r7, #11]
 80067aa:	429a      	cmp	r2, r3
 80067ac:	d20a      	bcs.n	80067c4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80067ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067b2:	f383 8811 	msr	BASEPRI, r3
 80067b6:	f3bf 8f6f 	isb	sy
 80067ba:	f3bf 8f4f 	dsb	sy
 80067be:	607b      	str	r3, [r7, #4]
}
 80067c0:	bf00      	nop
 80067c2:	e7fe      	b.n	80067c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80067c4:	4b0e      	ldr	r3, [pc, #56]	; (8006800 <vPortValidateInterruptPriority+0x78>)
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80067cc:	4b0d      	ldr	r3, [pc, #52]	; (8006804 <vPortValidateInterruptPriority+0x7c>)
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	429a      	cmp	r2, r3
 80067d2:	d90a      	bls.n	80067ea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80067d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067d8:	f383 8811 	msr	BASEPRI, r3
 80067dc:	f3bf 8f6f 	isb	sy
 80067e0:	f3bf 8f4f 	dsb	sy
 80067e4:	603b      	str	r3, [r7, #0]
}
 80067e6:	bf00      	nop
 80067e8:	e7fe      	b.n	80067e8 <vPortValidateInterruptPriority+0x60>
	}
 80067ea:	bf00      	nop
 80067ec:	3714      	adds	r7, #20
 80067ee:	46bd      	mov	sp, r7
 80067f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f4:	4770      	bx	lr
 80067f6:	bf00      	nop
 80067f8:	e000e3f0 	.word	0xe000e3f0
 80067fc:	20000fc8 	.word	0x20000fc8
 8006800:	e000ed0c 	.word	0xe000ed0c
 8006804:	20000fcc 	.word	0x20000fcc

08006808 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006808:	b580      	push	{r7, lr}
 800680a:	b08a      	sub	sp, #40	; 0x28
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006810:	2300      	movs	r3, #0
 8006812:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006814:	f7fe fba8 	bl	8004f68 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006818:	4b5b      	ldr	r3, [pc, #364]	; (8006988 <pvPortMalloc+0x180>)
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d101      	bne.n	8006824 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006820:	f000 f920 	bl	8006a64 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006824:	4b59      	ldr	r3, [pc, #356]	; (800698c <pvPortMalloc+0x184>)
 8006826:	681a      	ldr	r2, [r3, #0]
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	4013      	ands	r3, r2
 800682c:	2b00      	cmp	r3, #0
 800682e:	f040 8093 	bne.w	8006958 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d01d      	beq.n	8006874 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006838:	2208      	movs	r2, #8
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	4413      	add	r3, r2
 800683e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	f003 0307 	and.w	r3, r3, #7
 8006846:	2b00      	cmp	r3, #0
 8006848:	d014      	beq.n	8006874 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	f023 0307 	bic.w	r3, r3, #7
 8006850:	3308      	adds	r3, #8
 8006852:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	f003 0307 	and.w	r3, r3, #7
 800685a:	2b00      	cmp	r3, #0
 800685c:	d00a      	beq.n	8006874 <pvPortMalloc+0x6c>
	__asm volatile
 800685e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006862:	f383 8811 	msr	BASEPRI, r3
 8006866:	f3bf 8f6f 	isb	sy
 800686a:	f3bf 8f4f 	dsb	sy
 800686e:	617b      	str	r3, [r7, #20]
}
 8006870:	bf00      	nop
 8006872:	e7fe      	b.n	8006872 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d06e      	beq.n	8006958 <pvPortMalloc+0x150>
 800687a:	4b45      	ldr	r3, [pc, #276]	; (8006990 <pvPortMalloc+0x188>)
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	687a      	ldr	r2, [r7, #4]
 8006880:	429a      	cmp	r2, r3
 8006882:	d869      	bhi.n	8006958 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006884:	4b43      	ldr	r3, [pc, #268]	; (8006994 <pvPortMalloc+0x18c>)
 8006886:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006888:	4b42      	ldr	r3, [pc, #264]	; (8006994 <pvPortMalloc+0x18c>)
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800688e:	e004      	b.n	800689a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006892:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800689a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800689c:	685b      	ldr	r3, [r3, #4]
 800689e:	687a      	ldr	r2, [r7, #4]
 80068a0:	429a      	cmp	r2, r3
 80068a2:	d903      	bls.n	80068ac <pvPortMalloc+0xa4>
 80068a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d1f1      	bne.n	8006890 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80068ac:	4b36      	ldr	r3, [pc, #216]	; (8006988 <pvPortMalloc+0x180>)
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068b2:	429a      	cmp	r2, r3
 80068b4:	d050      	beq.n	8006958 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80068b6:	6a3b      	ldr	r3, [r7, #32]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	2208      	movs	r2, #8
 80068bc:	4413      	add	r3, r2
 80068be:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80068c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c2:	681a      	ldr	r2, [r3, #0]
 80068c4:	6a3b      	ldr	r3, [r7, #32]
 80068c6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80068c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ca:	685a      	ldr	r2, [r3, #4]
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	1ad2      	subs	r2, r2, r3
 80068d0:	2308      	movs	r3, #8
 80068d2:	005b      	lsls	r3, r3, #1
 80068d4:	429a      	cmp	r2, r3
 80068d6:	d91f      	bls.n	8006918 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80068d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	4413      	add	r3, r2
 80068de:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80068e0:	69bb      	ldr	r3, [r7, #24]
 80068e2:	f003 0307 	and.w	r3, r3, #7
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d00a      	beq.n	8006900 <pvPortMalloc+0xf8>
	__asm volatile
 80068ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068ee:	f383 8811 	msr	BASEPRI, r3
 80068f2:	f3bf 8f6f 	isb	sy
 80068f6:	f3bf 8f4f 	dsb	sy
 80068fa:	613b      	str	r3, [r7, #16]
}
 80068fc:	bf00      	nop
 80068fe:	e7fe      	b.n	80068fe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006902:	685a      	ldr	r2, [r3, #4]
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	1ad2      	subs	r2, r2, r3
 8006908:	69bb      	ldr	r3, [r7, #24]
 800690a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800690c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800690e:	687a      	ldr	r2, [r7, #4]
 8006910:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006912:	69b8      	ldr	r0, [r7, #24]
 8006914:	f000 f908 	bl	8006b28 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006918:	4b1d      	ldr	r3, [pc, #116]	; (8006990 <pvPortMalloc+0x188>)
 800691a:	681a      	ldr	r2, [r3, #0]
 800691c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800691e:	685b      	ldr	r3, [r3, #4]
 8006920:	1ad3      	subs	r3, r2, r3
 8006922:	4a1b      	ldr	r2, [pc, #108]	; (8006990 <pvPortMalloc+0x188>)
 8006924:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006926:	4b1a      	ldr	r3, [pc, #104]	; (8006990 <pvPortMalloc+0x188>)
 8006928:	681a      	ldr	r2, [r3, #0]
 800692a:	4b1b      	ldr	r3, [pc, #108]	; (8006998 <pvPortMalloc+0x190>)
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	429a      	cmp	r2, r3
 8006930:	d203      	bcs.n	800693a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006932:	4b17      	ldr	r3, [pc, #92]	; (8006990 <pvPortMalloc+0x188>)
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	4a18      	ldr	r2, [pc, #96]	; (8006998 <pvPortMalloc+0x190>)
 8006938:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800693a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800693c:	685a      	ldr	r2, [r3, #4]
 800693e:	4b13      	ldr	r3, [pc, #76]	; (800698c <pvPortMalloc+0x184>)
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	431a      	orrs	r2, r3
 8006944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006946:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800694a:	2200      	movs	r2, #0
 800694c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800694e:	4b13      	ldr	r3, [pc, #76]	; (800699c <pvPortMalloc+0x194>)
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	3301      	adds	r3, #1
 8006954:	4a11      	ldr	r2, [pc, #68]	; (800699c <pvPortMalloc+0x194>)
 8006956:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006958:	f7fe fb14 	bl	8004f84 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800695c:	69fb      	ldr	r3, [r7, #28]
 800695e:	f003 0307 	and.w	r3, r3, #7
 8006962:	2b00      	cmp	r3, #0
 8006964:	d00a      	beq.n	800697c <pvPortMalloc+0x174>
	__asm volatile
 8006966:	f04f 0350 	mov.w	r3, #80	; 0x50
 800696a:	f383 8811 	msr	BASEPRI, r3
 800696e:	f3bf 8f6f 	isb	sy
 8006972:	f3bf 8f4f 	dsb	sy
 8006976:	60fb      	str	r3, [r7, #12]
}
 8006978:	bf00      	nop
 800697a:	e7fe      	b.n	800697a <pvPortMalloc+0x172>
	return pvReturn;
 800697c:	69fb      	ldr	r3, [r7, #28]
}
 800697e:	4618      	mov	r0, r3
 8006980:	3728      	adds	r7, #40	; 0x28
 8006982:	46bd      	mov	sp, r7
 8006984:	bd80      	pop	{r7, pc}
 8006986:	bf00      	nop
 8006988:	20004bd8 	.word	0x20004bd8
 800698c:	20004bec 	.word	0x20004bec
 8006990:	20004bdc 	.word	0x20004bdc
 8006994:	20004bd0 	.word	0x20004bd0
 8006998:	20004be0 	.word	0x20004be0
 800699c:	20004be4 	.word	0x20004be4

080069a0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b086      	sub	sp, #24
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d04d      	beq.n	8006a4e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80069b2:	2308      	movs	r3, #8
 80069b4:	425b      	negs	r3, r3
 80069b6:	697a      	ldr	r2, [r7, #20]
 80069b8:	4413      	add	r3, r2
 80069ba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80069bc:	697b      	ldr	r3, [r7, #20]
 80069be:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80069c0:	693b      	ldr	r3, [r7, #16]
 80069c2:	685a      	ldr	r2, [r3, #4]
 80069c4:	4b24      	ldr	r3, [pc, #144]	; (8006a58 <vPortFree+0xb8>)
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	4013      	ands	r3, r2
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d10a      	bne.n	80069e4 <vPortFree+0x44>
	__asm volatile
 80069ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069d2:	f383 8811 	msr	BASEPRI, r3
 80069d6:	f3bf 8f6f 	isb	sy
 80069da:	f3bf 8f4f 	dsb	sy
 80069de:	60fb      	str	r3, [r7, #12]
}
 80069e0:	bf00      	nop
 80069e2:	e7fe      	b.n	80069e2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80069e4:	693b      	ldr	r3, [r7, #16]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d00a      	beq.n	8006a02 <vPortFree+0x62>
	__asm volatile
 80069ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069f0:	f383 8811 	msr	BASEPRI, r3
 80069f4:	f3bf 8f6f 	isb	sy
 80069f8:	f3bf 8f4f 	dsb	sy
 80069fc:	60bb      	str	r3, [r7, #8]
}
 80069fe:	bf00      	nop
 8006a00:	e7fe      	b.n	8006a00 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006a02:	693b      	ldr	r3, [r7, #16]
 8006a04:	685a      	ldr	r2, [r3, #4]
 8006a06:	4b14      	ldr	r3, [pc, #80]	; (8006a58 <vPortFree+0xb8>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	4013      	ands	r3, r2
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d01e      	beq.n	8006a4e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006a10:	693b      	ldr	r3, [r7, #16]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d11a      	bne.n	8006a4e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006a18:	693b      	ldr	r3, [r7, #16]
 8006a1a:	685a      	ldr	r2, [r3, #4]
 8006a1c:	4b0e      	ldr	r3, [pc, #56]	; (8006a58 <vPortFree+0xb8>)
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	43db      	mvns	r3, r3
 8006a22:	401a      	ands	r2, r3
 8006a24:	693b      	ldr	r3, [r7, #16]
 8006a26:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006a28:	f7fe fa9e 	bl	8004f68 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006a2c:	693b      	ldr	r3, [r7, #16]
 8006a2e:	685a      	ldr	r2, [r3, #4]
 8006a30:	4b0a      	ldr	r3, [pc, #40]	; (8006a5c <vPortFree+0xbc>)
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	4413      	add	r3, r2
 8006a36:	4a09      	ldr	r2, [pc, #36]	; (8006a5c <vPortFree+0xbc>)
 8006a38:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006a3a:	6938      	ldr	r0, [r7, #16]
 8006a3c:	f000 f874 	bl	8006b28 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006a40:	4b07      	ldr	r3, [pc, #28]	; (8006a60 <vPortFree+0xc0>)
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	3301      	adds	r3, #1
 8006a46:	4a06      	ldr	r2, [pc, #24]	; (8006a60 <vPortFree+0xc0>)
 8006a48:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006a4a:	f7fe fa9b 	bl	8004f84 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006a4e:	bf00      	nop
 8006a50:	3718      	adds	r7, #24
 8006a52:	46bd      	mov	sp, r7
 8006a54:	bd80      	pop	{r7, pc}
 8006a56:	bf00      	nop
 8006a58:	20004bec 	.word	0x20004bec
 8006a5c:	20004bdc 	.word	0x20004bdc
 8006a60:	20004be8 	.word	0x20004be8

08006a64 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006a64:	b480      	push	{r7}
 8006a66:	b085      	sub	sp, #20
 8006a68:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006a6a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006a6e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006a70:	4b27      	ldr	r3, [pc, #156]	; (8006b10 <prvHeapInit+0xac>)
 8006a72:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	f003 0307 	and.w	r3, r3, #7
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d00c      	beq.n	8006a98 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	3307      	adds	r3, #7
 8006a82:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	f023 0307 	bic.w	r3, r3, #7
 8006a8a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006a8c:	68ba      	ldr	r2, [r7, #8]
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	1ad3      	subs	r3, r2, r3
 8006a92:	4a1f      	ldr	r2, [pc, #124]	; (8006b10 <prvHeapInit+0xac>)
 8006a94:	4413      	add	r3, r2
 8006a96:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006a9c:	4a1d      	ldr	r2, [pc, #116]	; (8006b14 <prvHeapInit+0xb0>)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006aa2:	4b1c      	ldr	r3, [pc, #112]	; (8006b14 <prvHeapInit+0xb0>)
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	68ba      	ldr	r2, [r7, #8]
 8006aac:	4413      	add	r3, r2
 8006aae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006ab0:	2208      	movs	r2, #8
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	1a9b      	subs	r3, r3, r2
 8006ab6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	f023 0307 	bic.w	r3, r3, #7
 8006abe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	4a15      	ldr	r2, [pc, #84]	; (8006b18 <prvHeapInit+0xb4>)
 8006ac4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006ac6:	4b14      	ldr	r3, [pc, #80]	; (8006b18 <prvHeapInit+0xb4>)
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	2200      	movs	r2, #0
 8006acc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006ace:	4b12      	ldr	r3, [pc, #72]	; (8006b18 <prvHeapInit+0xb4>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	68fa      	ldr	r2, [r7, #12]
 8006ade:	1ad2      	subs	r2, r2, r3
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006ae4:	4b0c      	ldr	r3, [pc, #48]	; (8006b18 <prvHeapInit+0xb4>)
 8006ae6:	681a      	ldr	r2, [r3, #0]
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	685b      	ldr	r3, [r3, #4]
 8006af0:	4a0a      	ldr	r2, [pc, #40]	; (8006b1c <prvHeapInit+0xb8>)
 8006af2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	685b      	ldr	r3, [r3, #4]
 8006af8:	4a09      	ldr	r2, [pc, #36]	; (8006b20 <prvHeapInit+0xbc>)
 8006afa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006afc:	4b09      	ldr	r3, [pc, #36]	; (8006b24 <prvHeapInit+0xc0>)
 8006afe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006b02:	601a      	str	r2, [r3, #0]
}
 8006b04:	bf00      	nop
 8006b06:	3714      	adds	r7, #20
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0e:	4770      	bx	lr
 8006b10:	20000fd0 	.word	0x20000fd0
 8006b14:	20004bd0 	.word	0x20004bd0
 8006b18:	20004bd8 	.word	0x20004bd8
 8006b1c:	20004be0 	.word	0x20004be0
 8006b20:	20004bdc 	.word	0x20004bdc
 8006b24:	20004bec 	.word	0x20004bec

08006b28 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006b28:	b480      	push	{r7}
 8006b2a:	b085      	sub	sp, #20
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006b30:	4b28      	ldr	r3, [pc, #160]	; (8006bd4 <prvInsertBlockIntoFreeList+0xac>)
 8006b32:	60fb      	str	r3, [r7, #12]
 8006b34:	e002      	b.n	8006b3c <prvInsertBlockIntoFreeList+0x14>
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	60fb      	str	r3, [r7, #12]
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	687a      	ldr	r2, [r7, #4]
 8006b42:	429a      	cmp	r2, r3
 8006b44:	d8f7      	bhi.n	8006b36 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	685b      	ldr	r3, [r3, #4]
 8006b4e:	68ba      	ldr	r2, [r7, #8]
 8006b50:	4413      	add	r3, r2
 8006b52:	687a      	ldr	r2, [r7, #4]
 8006b54:	429a      	cmp	r2, r3
 8006b56:	d108      	bne.n	8006b6a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	685a      	ldr	r2, [r3, #4]
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	685b      	ldr	r3, [r3, #4]
 8006b60:	441a      	add	r2, r3
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	685b      	ldr	r3, [r3, #4]
 8006b72:	68ba      	ldr	r2, [r7, #8]
 8006b74:	441a      	add	r2, r3
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	429a      	cmp	r2, r3
 8006b7c:	d118      	bne.n	8006bb0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	681a      	ldr	r2, [r3, #0]
 8006b82:	4b15      	ldr	r3, [pc, #84]	; (8006bd8 <prvInsertBlockIntoFreeList+0xb0>)
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	429a      	cmp	r2, r3
 8006b88:	d00d      	beq.n	8006ba6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	685a      	ldr	r2, [r3, #4]
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	685b      	ldr	r3, [r3, #4]
 8006b94:	441a      	add	r2, r3
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	681a      	ldr	r2, [r3, #0]
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	601a      	str	r2, [r3, #0]
 8006ba4:	e008      	b.n	8006bb8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006ba6:	4b0c      	ldr	r3, [pc, #48]	; (8006bd8 <prvInsertBlockIntoFreeList+0xb0>)
 8006ba8:	681a      	ldr	r2, [r3, #0]
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	601a      	str	r2, [r3, #0]
 8006bae:	e003      	b.n	8006bb8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	681a      	ldr	r2, [r3, #0]
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006bb8:	68fa      	ldr	r2, [r7, #12]
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	429a      	cmp	r2, r3
 8006bbe:	d002      	beq.n	8006bc6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	687a      	ldr	r2, [r7, #4]
 8006bc4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006bc6:	bf00      	nop
 8006bc8:	3714      	adds	r7, #20
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd0:	4770      	bx	lr
 8006bd2:	bf00      	nop
 8006bd4:	20004bd0 	.word	0x20004bd0
 8006bd8:	20004bd8 	.word	0x20004bd8

08006bdc <__errno>:
 8006bdc:	4b01      	ldr	r3, [pc, #4]	; (8006be4 <__errno+0x8>)
 8006bde:	6818      	ldr	r0, [r3, #0]
 8006be0:	4770      	bx	lr
 8006be2:	bf00      	nop
 8006be4:	200000cc 	.word	0x200000cc

08006be8 <__libc_init_array>:
 8006be8:	b570      	push	{r4, r5, r6, lr}
 8006bea:	4d0d      	ldr	r5, [pc, #52]	; (8006c20 <__libc_init_array+0x38>)
 8006bec:	4c0d      	ldr	r4, [pc, #52]	; (8006c24 <__libc_init_array+0x3c>)
 8006bee:	1b64      	subs	r4, r4, r5
 8006bf0:	10a4      	asrs	r4, r4, #2
 8006bf2:	2600      	movs	r6, #0
 8006bf4:	42a6      	cmp	r6, r4
 8006bf6:	d109      	bne.n	8006c0c <__libc_init_array+0x24>
 8006bf8:	4d0b      	ldr	r5, [pc, #44]	; (8006c28 <__libc_init_array+0x40>)
 8006bfa:	4c0c      	ldr	r4, [pc, #48]	; (8006c2c <__libc_init_array+0x44>)
 8006bfc:	f000 fff2 	bl	8007be4 <_init>
 8006c00:	1b64      	subs	r4, r4, r5
 8006c02:	10a4      	asrs	r4, r4, #2
 8006c04:	2600      	movs	r6, #0
 8006c06:	42a6      	cmp	r6, r4
 8006c08:	d105      	bne.n	8006c16 <__libc_init_array+0x2e>
 8006c0a:	bd70      	pop	{r4, r5, r6, pc}
 8006c0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c10:	4798      	blx	r3
 8006c12:	3601      	adds	r6, #1
 8006c14:	e7ee      	b.n	8006bf4 <__libc_init_array+0xc>
 8006c16:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c1a:	4798      	blx	r3
 8006c1c:	3601      	adds	r6, #1
 8006c1e:	e7f2      	b.n	8006c06 <__libc_init_array+0x1e>
 8006c20:	08007d44 	.word	0x08007d44
 8006c24:	08007d44 	.word	0x08007d44
 8006c28:	08007d44 	.word	0x08007d44
 8006c2c:	08007d48 	.word	0x08007d48

08006c30 <memcpy>:
 8006c30:	440a      	add	r2, r1
 8006c32:	4291      	cmp	r1, r2
 8006c34:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006c38:	d100      	bne.n	8006c3c <memcpy+0xc>
 8006c3a:	4770      	bx	lr
 8006c3c:	b510      	push	{r4, lr}
 8006c3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006c42:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006c46:	4291      	cmp	r1, r2
 8006c48:	d1f9      	bne.n	8006c3e <memcpy+0xe>
 8006c4a:	bd10      	pop	{r4, pc}

08006c4c <memset>:
 8006c4c:	4402      	add	r2, r0
 8006c4e:	4603      	mov	r3, r0
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d100      	bne.n	8006c56 <memset+0xa>
 8006c54:	4770      	bx	lr
 8006c56:	f803 1b01 	strb.w	r1, [r3], #1
 8006c5a:	e7f9      	b.n	8006c50 <memset+0x4>

08006c5c <iprintf>:
 8006c5c:	b40f      	push	{r0, r1, r2, r3}
 8006c5e:	4b0a      	ldr	r3, [pc, #40]	; (8006c88 <iprintf+0x2c>)
 8006c60:	b513      	push	{r0, r1, r4, lr}
 8006c62:	681c      	ldr	r4, [r3, #0]
 8006c64:	b124      	cbz	r4, 8006c70 <iprintf+0x14>
 8006c66:	69a3      	ldr	r3, [r4, #24]
 8006c68:	b913      	cbnz	r3, 8006c70 <iprintf+0x14>
 8006c6a:	4620      	mov	r0, r4
 8006c6c:	f000 f880 	bl	8006d70 <__sinit>
 8006c70:	ab05      	add	r3, sp, #20
 8006c72:	9a04      	ldr	r2, [sp, #16]
 8006c74:	68a1      	ldr	r1, [r4, #8]
 8006c76:	9301      	str	r3, [sp, #4]
 8006c78:	4620      	mov	r0, r4
 8006c7a:	f000 f9eb 	bl	8007054 <_vfiprintf_r>
 8006c7e:	b002      	add	sp, #8
 8006c80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c84:	b004      	add	sp, #16
 8006c86:	4770      	bx	lr
 8006c88:	200000cc 	.word	0x200000cc

08006c8c <time>:
 8006c8c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006c8e:	4b0b      	ldr	r3, [pc, #44]	; (8006cbc <time+0x30>)
 8006c90:	2200      	movs	r2, #0
 8006c92:	4669      	mov	r1, sp
 8006c94:	4604      	mov	r4, r0
 8006c96:	6818      	ldr	r0, [r3, #0]
 8006c98:	f000 f908 	bl	8006eac <_gettimeofday_r>
 8006c9c:	2800      	cmp	r0, #0
 8006c9e:	bfbe      	ittt	lt
 8006ca0:	f04f 32ff 	movlt.w	r2, #4294967295	; 0xffffffff
 8006ca4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006ca8:	e9cd 2300 	strdlt	r2, r3, [sp]
 8006cac:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006cb0:	b10c      	cbz	r4, 8006cb6 <time+0x2a>
 8006cb2:	e9c4 0100 	strd	r0, r1, [r4]
 8006cb6:	b004      	add	sp, #16
 8006cb8:	bd10      	pop	{r4, pc}
 8006cba:	bf00      	nop
 8006cbc:	200000cc 	.word	0x200000cc

08006cc0 <std>:
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	b510      	push	{r4, lr}
 8006cc4:	4604      	mov	r4, r0
 8006cc6:	e9c0 3300 	strd	r3, r3, [r0]
 8006cca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006cce:	6083      	str	r3, [r0, #8]
 8006cd0:	8181      	strh	r1, [r0, #12]
 8006cd2:	6643      	str	r3, [r0, #100]	; 0x64
 8006cd4:	81c2      	strh	r2, [r0, #14]
 8006cd6:	6183      	str	r3, [r0, #24]
 8006cd8:	4619      	mov	r1, r3
 8006cda:	2208      	movs	r2, #8
 8006cdc:	305c      	adds	r0, #92	; 0x5c
 8006cde:	f7ff ffb5 	bl	8006c4c <memset>
 8006ce2:	4b05      	ldr	r3, [pc, #20]	; (8006cf8 <std+0x38>)
 8006ce4:	6263      	str	r3, [r4, #36]	; 0x24
 8006ce6:	4b05      	ldr	r3, [pc, #20]	; (8006cfc <std+0x3c>)
 8006ce8:	62a3      	str	r3, [r4, #40]	; 0x28
 8006cea:	4b05      	ldr	r3, [pc, #20]	; (8006d00 <std+0x40>)
 8006cec:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006cee:	4b05      	ldr	r3, [pc, #20]	; (8006d04 <std+0x44>)
 8006cf0:	6224      	str	r4, [r4, #32]
 8006cf2:	6323      	str	r3, [r4, #48]	; 0x30
 8006cf4:	bd10      	pop	{r4, pc}
 8006cf6:	bf00      	nop
 8006cf8:	080075fd 	.word	0x080075fd
 8006cfc:	0800761f 	.word	0x0800761f
 8006d00:	08007657 	.word	0x08007657
 8006d04:	0800767b 	.word	0x0800767b

08006d08 <_cleanup_r>:
 8006d08:	4901      	ldr	r1, [pc, #4]	; (8006d10 <_cleanup_r+0x8>)
 8006d0a:	f000 b8af 	b.w	8006e6c <_fwalk_reent>
 8006d0e:	bf00      	nop
 8006d10:	08007955 	.word	0x08007955

08006d14 <__sfmoreglue>:
 8006d14:	b570      	push	{r4, r5, r6, lr}
 8006d16:	2268      	movs	r2, #104	; 0x68
 8006d18:	1e4d      	subs	r5, r1, #1
 8006d1a:	4355      	muls	r5, r2
 8006d1c:	460e      	mov	r6, r1
 8006d1e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006d22:	f000 f8f9 	bl	8006f18 <_malloc_r>
 8006d26:	4604      	mov	r4, r0
 8006d28:	b140      	cbz	r0, 8006d3c <__sfmoreglue+0x28>
 8006d2a:	2100      	movs	r1, #0
 8006d2c:	e9c0 1600 	strd	r1, r6, [r0]
 8006d30:	300c      	adds	r0, #12
 8006d32:	60a0      	str	r0, [r4, #8]
 8006d34:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006d38:	f7ff ff88 	bl	8006c4c <memset>
 8006d3c:	4620      	mov	r0, r4
 8006d3e:	bd70      	pop	{r4, r5, r6, pc}

08006d40 <__sfp_lock_acquire>:
 8006d40:	4801      	ldr	r0, [pc, #4]	; (8006d48 <__sfp_lock_acquire+0x8>)
 8006d42:	f000 b8c6 	b.w	8006ed2 <__retarget_lock_acquire_recursive>
 8006d46:	bf00      	nop
 8006d48:	20004bf1 	.word	0x20004bf1

08006d4c <__sfp_lock_release>:
 8006d4c:	4801      	ldr	r0, [pc, #4]	; (8006d54 <__sfp_lock_release+0x8>)
 8006d4e:	f000 b8c1 	b.w	8006ed4 <__retarget_lock_release_recursive>
 8006d52:	bf00      	nop
 8006d54:	20004bf1 	.word	0x20004bf1

08006d58 <__sinit_lock_acquire>:
 8006d58:	4801      	ldr	r0, [pc, #4]	; (8006d60 <__sinit_lock_acquire+0x8>)
 8006d5a:	f000 b8ba 	b.w	8006ed2 <__retarget_lock_acquire_recursive>
 8006d5e:	bf00      	nop
 8006d60:	20004bf2 	.word	0x20004bf2

08006d64 <__sinit_lock_release>:
 8006d64:	4801      	ldr	r0, [pc, #4]	; (8006d6c <__sinit_lock_release+0x8>)
 8006d66:	f000 b8b5 	b.w	8006ed4 <__retarget_lock_release_recursive>
 8006d6a:	bf00      	nop
 8006d6c:	20004bf2 	.word	0x20004bf2

08006d70 <__sinit>:
 8006d70:	b510      	push	{r4, lr}
 8006d72:	4604      	mov	r4, r0
 8006d74:	f7ff fff0 	bl	8006d58 <__sinit_lock_acquire>
 8006d78:	69a3      	ldr	r3, [r4, #24]
 8006d7a:	b11b      	cbz	r3, 8006d84 <__sinit+0x14>
 8006d7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d80:	f7ff bff0 	b.w	8006d64 <__sinit_lock_release>
 8006d84:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006d88:	6523      	str	r3, [r4, #80]	; 0x50
 8006d8a:	4b13      	ldr	r3, [pc, #76]	; (8006dd8 <__sinit+0x68>)
 8006d8c:	4a13      	ldr	r2, [pc, #76]	; (8006ddc <__sinit+0x6c>)
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	62a2      	str	r2, [r4, #40]	; 0x28
 8006d92:	42a3      	cmp	r3, r4
 8006d94:	bf04      	itt	eq
 8006d96:	2301      	moveq	r3, #1
 8006d98:	61a3      	streq	r3, [r4, #24]
 8006d9a:	4620      	mov	r0, r4
 8006d9c:	f000 f820 	bl	8006de0 <__sfp>
 8006da0:	6060      	str	r0, [r4, #4]
 8006da2:	4620      	mov	r0, r4
 8006da4:	f000 f81c 	bl	8006de0 <__sfp>
 8006da8:	60a0      	str	r0, [r4, #8]
 8006daa:	4620      	mov	r0, r4
 8006dac:	f000 f818 	bl	8006de0 <__sfp>
 8006db0:	2200      	movs	r2, #0
 8006db2:	60e0      	str	r0, [r4, #12]
 8006db4:	2104      	movs	r1, #4
 8006db6:	6860      	ldr	r0, [r4, #4]
 8006db8:	f7ff ff82 	bl	8006cc0 <std>
 8006dbc:	68a0      	ldr	r0, [r4, #8]
 8006dbe:	2201      	movs	r2, #1
 8006dc0:	2109      	movs	r1, #9
 8006dc2:	f7ff ff7d 	bl	8006cc0 <std>
 8006dc6:	68e0      	ldr	r0, [r4, #12]
 8006dc8:	2202      	movs	r2, #2
 8006dca:	2112      	movs	r1, #18
 8006dcc:	f7ff ff78 	bl	8006cc0 <std>
 8006dd0:	2301      	movs	r3, #1
 8006dd2:	61a3      	str	r3, [r4, #24]
 8006dd4:	e7d2      	b.n	8006d7c <__sinit+0xc>
 8006dd6:	bf00      	nop
 8006dd8:	08007ca4 	.word	0x08007ca4
 8006ddc:	08006d09 	.word	0x08006d09

08006de0 <__sfp>:
 8006de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006de2:	4607      	mov	r7, r0
 8006de4:	f7ff ffac 	bl	8006d40 <__sfp_lock_acquire>
 8006de8:	4b1e      	ldr	r3, [pc, #120]	; (8006e64 <__sfp+0x84>)
 8006dea:	681e      	ldr	r6, [r3, #0]
 8006dec:	69b3      	ldr	r3, [r6, #24]
 8006dee:	b913      	cbnz	r3, 8006df6 <__sfp+0x16>
 8006df0:	4630      	mov	r0, r6
 8006df2:	f7ff ffbd 	bl	8006d70 <__sinit>
 8006df6:	3648      	adds	r6, #72	; 0x48
 8006df8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006dfc:	3b01      	subs	r3, #1
 8006dfe:	d503      	bpl.n	8006e08 <__sfp+0x28>
 8006e00:	6833      	ldr	r3, [r6, #0]
 8006e02:	b30b      	cbz	r3, 8006e48 <__sfp+0x68>
 8006e04:	6836      	ldr	r6, [r6, #0]
 8006e06:	e7f7      	b.n	8006df8 <__sfp+0x18>
 8006e08:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006e0c:	b9d5      	cbnz	r5, 8006e44 <__sfp+0x64>
 8006e0e:	4b16      	ldr	r3, [pc, #88]	; (8006e68 <__sfp+0x88>)
 8006e10:	60e3      	str	r3, [r4, #12]
 8006e12:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006e16:	6665      	str	r5, [r4, #100]	; 0x64
 8006e18:	f000 f85a 	bl	8006ed0 <__retarget_lock_init_recursive>
 8006e1c:	f7ff ff96 	bl	8006d4c <__sfp_lock_release>
 8006e20:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006e24:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006e28:	6025      	str	r5, [r4, #0]
 8006e2a:	61a5      	str	r5, [r4, #24]
 8006e2c:	2208      	movs	r2, #8
 8006e2e:	4629      	mov	r1, r5
 8006e30:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006e34:	f7ff ff0a 	bl	8006c4c <memset>
 8006e38:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006e3c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006e40:	4620      	mov	r0, r4
 8006e42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e44:	3468      	adds	r4, #104	; 0x68
 8006e46:	e7d9      	b.n	8006dfc <__sfp+0x1c>
 8006e48:	2104      	movs	r1, #4
 8006e4a:	4638      	mov	r0, r7
 8006e4c:	f7ff ff62 	bl	8006d14 <__sfmoreglue>
 8006e50:	4604      	mov	r4, r0
 8006e52:	6030      	str	r0, [r6, #0]
 8006e54:	2800      	cmp	r0, #0
 8006e56:	d1d5      	bne.n	8006e04 <__sfp+0x24>
 8006e58:	f7ff ff78 	bl	8006d4c <__sfp_lock_release>
 8006e5c:	230c      	movs	r3, #12
 8006e5e:	603b      	str	r3, [r7, #0]
 8006e60:	e7ee      	b.n	8006e40 <__sfp+0x60>
 8006e62:	bf00      	nop
 8006e64:	08007ca4 	.word	0x08007ca4
 8006e68:	ffff0001 	.word	0xffff0001

08006e6c <_fwalk_reent>:
 8006e6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e70:	4606      	mov	r6, r0
 8006e72:	4688      	mov	r8, r1
 8006e74:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006e78:	2700      	movs	r7, #0
 8006e7a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006e7e:	f1b9 0901 	subs.w	r9, r9, #1
 8006e82:	d505      	bpl.n	8006e90 <_fwalk_reent+0x24>
 8006e84:	6824      	ldr	r4, [r4, #0]
 8006e86:	2c00      	cmp	r4, #0
 8006e88:	d1f7      	bne.n	8006e7a <_fwalk_reent+0xe>
 8006e8a:	4638      	mov	r0, r7
 8006e8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e90:	89ab      	ldrh	r3, [r5, #12]
 8006e92:	2b01      	cmp	r3, #1
 8006e94:	d907      	bls.n	8006ea6 <_fwalk_reent+0x3a>
 8006e96:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006e9a:	3301      	adds	r3, #1
 8006e9c:	d003      	beq.n	8006ea6 <_fwalk_reent+0x3a>
 8006e9e:	4629      	mov	r1, r5
 8006ea0:	4630      	mov	r0, r6
 8006ea2:	47c0      	blx	r8
 8006ea4:	4307      	orrs	r7, r0
 8006ea6:	3568      	adds	r5, #104	; 0x68
 8006ea8:	e7e9      	b.n	8006e7e <_fwalk_reent+0x12>
	...

08006eac <_gettimeofday_r>:
 8006eac:	b538      	push	{r3, r4, r5, lr}
 8006eae:	4d07      	ldr	r5, [pc, #28]	; (8006ecc <_gettimeofday_r+0x20>)
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	4604      	mov	r4, r0
 8006eb4:	4608      	mov	r0, r1
 8006eb6:	4611      	mov	r1, r2
 8006eb8:	602b      	str	r3, [r5, #0]
 8006eba:	f000 fe8b 	bl	8007bd4 <_gettimeofday>
 8006ebe:	1c43      	adds	r3, r0, #1
 8006ec0:	d102      	bne.n	8006ec8 <_gettimeofday_r+0x1c>
 8006ec2:	682b      	ldr	r3, [r5, #0]
 8006ec4:	b103      	cbz	r3, 8006ec8 <_gettimeofday_r+0x1c>
 8006ec6:	6023      	str	r3, [r4, #0]
 8006ec8:	bd38      	pop	{r3, r4, r5, pc}
 8006eca:	bf00      	nop
 8006ecc:	20004bfc 	.word	0x20004bfc

08006ed0 <__retarget_lock_init_recursive>:
 8006ed0:	4770      	bx	lr

08006ed2 <__retarget_lock_acquire_recursive>:
 8006ed2:	4770      	bx	lr

08006ed4 <__retarget_lock_release_recursive>:
 8006ed4:	4770      	bx	lr
	...

08006ed8 <sbrk_aligned>:
 8006ed8:	b570      	push	{r4, r5, r6, lr}
 8006eda:	4e0e      	ldr	r6, [pc, #56]	; (8006f14 <sbrk_aligned+0x3c>)
 8006edc:	460c      	mov	r4, r1
 8006ede:	6831      	ldr	r1, [r6, #0]
 8006ee0:	4605      	mov	r5, r0
 8006ee2:	b911      	cbnz	r1, 8006eea <sbrk_aligned+0x12>
 8006ee4:	f000 fb7a 	bl	80075dc <_sbrk_r>
 8006ee8:	6030      	str	r0, [r6, #0]
 8006eea:	4621      	mov	r1, r4
 8006eec:	4628      	mov	r0, r5
 8006eee:	f000 fb75 	bl	80075dc <_sbrk_r>
 8006ef2:	1c43      	adds	r3, r0, #1
 8006ef4:	d00a      	beq.n	8006f0c <sbrk_aligned+0x34>
 8006ef6:	1cc4      	adds	r4, r0, #3
 8006ef8:	f024 0403 	bic.w	r4, r4, #3
 8006efc:	42a0      	cmp	r0, r4
 8006efe:	d007      	beq.n	8006f10 <sbrk_aligned+0x38>
 8006f00:	1a21      	subs	r1, r4, r0
 8006f02:	4628      	mov	r0, r5
 8006f04:	f000 fb6a 	bl	80075dc <_sbrk_r>
 8006f08:	3001      	adds	r0, #1
 8006f0a:	d101      	bne.n	8006f10 <sbrk_aligned+0x38>
 8006f0c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006f10:	4620      	mov	r0, r4
 8006f12:	bd70      	pop	{r4, r5, r6, pc}
 8006f14:	20004bf8 	.word	0x20004bf8

08006f18 <_malloc_r>:
 8006f18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f1c:	1ccd      	adds	r5, r1, #3
 8006f1e:	f025 0503 	bic.w	r5, r5, #3
 8006f22:	3508      	adds	r5, #8
 8006f24:	2d0c      	cmp	r5, #12
 8006f26:	bf38      	it	cc
 8006f28:	250c      	movcc	r5, #12
 8006f2a:	2d00      	cmp	r5, #0
 8006f2c:	4607      	mov	r7, r0
 8006f2e:	db01      	blt.n	8006f34 <_malloc_r+0x1c>
 8006f30:	42a9      	cmp	r1, r5
 8006f32:	d905      	bls.n	8006f40 <_malloc_r+0x28>
 8006f34:	230c      	movs	r3, #12
 8006f36:	603b      	str	r3, [r7, #0]
 8006f38:	2600      	movs	r6, #0
 8006f3a:	4630      	mov	r0, r6
 8006f3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f40:	4e2e      	ldr	r6, [pc, #184]	; (8006ffc <_malloc_r+0xe4>)
 8006f42:	f000 fdbb 	bl	8007abc <__malloc_lock>
 8006f46:	6833      	ldr	r3, [r6, #0]
 8006f48:	461c      	mov	r4, r3
 8006f4a:	bb34      	cbnz	r4, 8006f9a <_malloc_r+0x82>
 8006f4c:	4629      	mov	r1, r5
 8006f4e:	4638      	mov	r0, r7
 8006f50:	f7ff ffc2 	bl	8006ed8 <sbrk_aligned>
 8006f54:	1c43      	adds	r3, r0, #1
 8006f56:	4604      	mov	r4, r0
 8006f58:	d14d      	bne.n	8006ff6 <_malloc_r+0xde>
 8006f5a:	6834      	ldr	r4, [r6, #0]
 8006f5c:	4626      	mov	r6, r4
 8006f5e:	2e00      	cmp	r6, #0
 8006f60:	d140      	bne.n	8006fe4 <_malloc_r+0xcc>
 8006f62:	6823      	ldr	r3, [r4, #0]
 8006f64:	4631      	mov	r1, r6
 8006f66:	4638      	mov	r0, r7
 8006f68:	eb04 0803 	add.w	r8, r4, r3
 8006f6c:	f000 fb36 	bl	80075dc <_sbrk_r>
 8006f70:	4580      	cmp	r8, r0
 8006f72:	d13a      	bne.n	8006fea <_malloc_r+0xd2>
 8006f74:	6821      	ldr	r1, [r4, #0]
 8006f76:	3503      	adds	r5, #3
 8006f78:	1a6d      	subs	r5, r5, r1
 8006f7a:	f025 0503 	bic.w	r5, r5, #3
 8006f7e:	3508      	adds	r5, #8
 8006f80:	2d0c      	cmp	r5, #12
 8006f82:	bf38      	it	cc
 8006f84:	250c      	movcc	r5, #12
 8006f86:	4629      	mov	r1, r5
 8006f88:	4638      	mov	r0, r7
 8006f8a:	f7ff ffa5 	bl	8006ed8 <sbrk_aligned>
 8006f8e:	3001      	adds	r0, #1
 8006f90:	d02b      	beq.n	8006fea <_malloc_r+0xd2>
 8006f92:	6823      	ldr	r3, [r4, #0]
 8006f94:	442b      	add	r3, r5
 8006f96:	6023      	str	r3, [r4, #0]
 8006f98:	e00e      	b.n	8006fb8 <_malloc_r+0xa0>
 8006f9a:	6822      	ldr	r2, [r4, #0]
 8006f9c:	1b52      	subs	r2, r2, r5
 8006f9e:	d41e      	bmi.n	8006fde <_malloc_r+0xc6>
 8006fa0:	2a0b      	cmp	r2, #11
 8006fa2:	d916      	bls.n	8006fd2 <_malloc_r+0xba>
 8006fa4:	1961      	adds	r1, r4, r5
 8006fa6:	42a3      	cmp	r3, r4
 8006fa8:	6025      	str	r5, [r4, #0]
 8006faa:	bf18      	it	ne
 8006fac:	6059      	strne	r1, [r3, #4]
 8006fae:	6863      	ldr	r3, [r4, #4]
 8006fb0:	bf08      	it	eq
 8006fb2:	6031      	streq	r1, [r6, #0]
 8006fb4:	5162      	str	r2, [r4, r5]
 8006fb6:	604b      	str	r3, [r1, #4]
 8006fb8:	4638      	mov	r0, r7
 8006fba:	f104 060b 	add.w	r6, r4, #11
 8006fbe:	f000 fd83 	bl	8007ac8 <__malloc_unlock>
 8006fc2:	f026 0607 	bic.w	r6, r6, #7
 8006fc6:	1d23      	adds	r3, r4, #4
 8006fc8:	1af2      	subs	r2, r6, r3
 8006fca:	d0b6      	beq.n	8006f3a <_malloc_r+0x22>
 8006fcc:	1b9b      	subs	r3, r3, r6
 8006fce:	50a3      	str	r3, [r4, r2]
 8006fd0:	e7b3      	b.n	8006f3a <_malloc_r+0x22>
 8006fd2:	6862      	ldr	r2, [r4, #4]
 8006fd4:	42a3      	cmp	r3, r4
 8006fd6:	bf0c      	ite	eq
 8006fd8:	6032      	streq	r2, [r6, #0]
 8006fda:	605a      	strne	r2, [r3, #4]
 8006fdc:	e7ec      	b.n	8006fb8 <_malloc_r+0xa0>
 8006fde:	4623      	mov	r3, r4
 8006fe0:	6864      	ldr	r4, [r4, #4]
 8006fe2:	e7b2      	b.n	8006f4a <_malloc_r+0x32>
 8006fe4:	4634      	mov	r4, r6
 8006fe6:	6876      	ldr	r6, [r6, #4]
 8006fe8:	e7b9      	b.n	8006f5e <_malloc_r+0x46>
 8006fea:	230c      	movs	r3, #12
 8006fec:	603b      	str	r3, [r7, #0]
 8006fee:	4638      	mov	r0, r7
 8006ff0:	f000 fd6a 	bl	8007ac8 <__malloc_unlock>
 8006ff4:	e7a1      	b.n	8006f3a <_malloc_r+0x22>
 8006ff6:	6025      	str	r5, [r4, #0]
 8006ff8:	e7de      	b.n	8006fb8 <_malloc_r+0xa0>
 8006ffa:	bf00      	nop
 8006ffc:	20004bf4 	.word	0x20004bf4

08007000 <__sfputc_r>:
 8007000:	6893      	ldr	r3, [r2, #8]
 8007002:	3b01      	subs	r3, #1
 8007004:	2b00      	cmp	r3, #0
 8007006:	b410      	push	{r4}
 8007008:	6093      	str	r3, [r2, #8]
 800700a:	da08      	bge.n	800701e <__sfputc_r+0x1e>
 800700c:	6994      	ldr	r4, [r2, #24]
 800700e:	42a3      	cmp	r3, r4
 8007010:	db01      	blt.n	8007016 <__sfputc_r+0x16>
 8007012:	290a      	cmp	r1, #10
 8007014:	d103      	bne.n	800701e <__sfputc_r+0x1e>
 8007016:	f85d 4b04 	ldr.w	r4, [sp], #4
 800701a:	f000 bb33 	b.w	8007684 <__swbuf_r>
 800701e:	6813      	ldr	r3, [r2, #0]
 8007020:	1c58      	adds	r0, r3, #1
 8007022:	6010      	str	r0, [r2, #0]
 8007024:	7019      	strb	r1, [r3, #0]
 8007026:	4608      	mov	r0, r1
 8007028:	f85d 4b04 	ldr.w	r4, [sp], #4
 800702c:	4770      	bx	lr

0800702e <__sfputs_r>:
 800702e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007030:	4606      	mov	r6, r0
 8007032:	460f      	mov	r7, r1
 8007034:	4614      	mov	r4, r2
 8007036:	18d5      	adds	r5, r2, r3
 8007038:	42ac      	cmp	r4, r5
 800703a:	d101      	bne.n	8007040 <__sfputs_r+0x12>
 800703c:	2000      	movs	r0, #0
 800703e:	e007      	b.n	8007050 <__sfputs_r+0x22>
 8007040:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007044:	463a      	mov	r2, r7
 8007046:	4630      	mov	r0, r6
 8007048:	f7ff ffda 	bl	8007000 <__sfputc_r>
 800704c:	1c43      	adds	r3, r0, #1
 800704e:	d1f3      	bne.n	8007038 <__sfputs_r+0xa>
 8007050:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007054 <_vfiprintf_r>:
 8007054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007058:	460d      	mov	r5, r1
 800705a:	b09d      	sub	sp, #116	; 0x74
 800705c:	4614      	mov	r4, r2
 800705e:	4698      	mov	r8, r3
 8007060:	4606      	mov	r6, r0
 8007062:	b118      	cbz	r0, 800706c <_vfiprintf_r+0x18>
 8007064:	6983      	ldr	r3, [r0, #24]
 8007066:	b90b      	cbnz	r3, 800706c <_vfiprintf_r+0x18>
 8007068:	f7ff fe82 	bl	8006d70 <__sinit>
 800706c:	4b89      	ldr	r3, [pc, #548]	; (8007294 <_vfiprintf_r+0x240>)
 800706e:	429d      	cmp	r5, r3
 8007070:	d11b      	bne.n	80070aa <_vfiprintf_r+0x56>
 8007072:	6875      	ldr	r5, [r6, #4]
 8007074:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007076:	07d9      	lsls	r1, r3, #31
 8007078:	d405      	bmi.n	8007086 <_vfiprintf_r+0x32>
 800707a:	89ab      	ldrh	r3, [r5, #12]
 800707c:	059a      	lsls	r2, r3, #22
 800707e:	d402      	bmi.n	8007086 <_vfiprintf_r+0x32>
 8007080:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007082:	f7ff ff26 	bl	8006ed2 <__retarget_lock_acquire_recursive>
 8007086:	89ab      	ldrh	r3, [r5, #12]
 8007088:	071b      	lsls	r3, r3, #28
 800708a:	d501      	bpl.n	8007090 <_vfiprintf_r+0x3c>
 800708c:	692b      	ldr	r3, [r5, #16]
 800708e:	b9eb      	cbnz	r3, 80070cc <_vfiprintf_r+0x78>
 8007090:	4629      	mov	r1, r5
 8007092:	4630      	mov	r0, r6
 8007094:	f000 fb5a 	bl	800774c <__swsetup_r>
 8007098:	b1c0      	cbz	r0, 80070cc <_vfiprintf_r+0x78>
 800709a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800709c:	07dc      	lsls	r4, r3, #31
 800709e:	d50e      	bpl.n	80070be <_vfiprintf_r+0x6a>
 80070a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80070a4:	b01d      	add	sp, #116	; 0x74
 80070a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070aa:	4b7b      	ldr	r3, [pc, #492]	; (8007298 <_vfiprintf_r+0x244>)
 80070ac:	429d      	cmp	r5, r3
 80070ae:	d101      	bne.n	80070b4 <_vfiprintf_r+0x60>
 80070b0:	68b5      	ldr	r5, [r6, #8]
 80070b2:	e7df      	b.n	8007074 <_vfiprintf_r+0x20>
 80070b4:	4b79      	ldr	r3, [pc, #484]	; (800729c <_vfiprintf_r+0x248>)
 80070b6:	429d      	cmp	r5, r3
 80070b8:	bf08      	it	eq
 80070ba:	68f5      	ldreq	r5, [r6, #12]
 80070bc:	e7da      	b.n	8007074 <_vfiprintf_r+0x20>
 80070be:	89ab      	ldrh	r3, [r5, #12]
 80070c0:	0598      	lsls	r0, r3, #22
 80070c2:	d4ed      	bmi.n	80070a0 <_vfiprintf_r+0x4c>
 80070c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80070c6:	f7ff ff05 	bl	8006ed4 <__retarget_lock_release_recursive>
 80070ca:	e7e9      	b.n	80070a0 <_vfiprintf_r+0x4c>
 80070cc:	2300      	movs	r3, #0
 80070ce:	9309      	str	r3, [sp, #36]	; 0x24
 80070d0:	2320      	movs	r3, #32
 80070d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80070d6:	f8cd 800c 	str.w	r8, [sp, #12]
 80070da:	2330      	movs	r3, #48	; 0x30
 80070dc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80072a0 <_vfiprintf_r+0x24c>
 80070e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80070e4:	f04f 0901 	mov.w	r9, #1
 80070e8:	4623      	mov	r3, r4
 80070ea:	469a      	mov	sl, r3
 80070ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 80070f0:	b10a      	cbz	r2, 80070f6 <_vfiprintf_r+0xa2>
 80070f2:	2a25      	cmp	r2, #37	; 0x25
 80070f4:	d1f9      	bne.n	80070ea <_vfiprintf_r+0x96>
 80070f6:	ebba 0b04 	subs.w	fp, sl, r4
 80070fa:	d00b      	beq.n	8007114 <_vfiprintf_r+0xc0>
 80070fc:	465b      	mov	r3, fp
 80070fe:	4622      	mov	r2, r4
 8007100:	4629      	mov	r1, r5
 8007102:	4630      	mov	r0, r6
 8007104:	f7ff ff93 	bl	800702e <__sfputs_r>
 8007108:	3001      	adds	r0, #1
 800710a:	f000 80aa 	beq.w	8007262 <_vfiprintf_r+0x20e>
 800710e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007110:	445a      	add	r2, fp
 8007112:	9209      	str	r2, [sp, #36]	; 0x24
 8007114:	f89a 3000 	ldrb.w	r3, [sl]
 8007118:	2b00      	cmp	r3, #0
 800711a:	f000 80a2 	beq.w	8007262 <_vfiprintf_r+0x20e>
 800711e:	2300      	movs	r3, #0
 8007120:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007124:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007128:	f10a 0a01 	add.w	sl, sl, #1
 800712c:	9304      	str	r3, [sp, #16]
 800712e:	9307      	str	r3, [sp, #28]
 8007130:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007134:	931a      	str	r3, [sp, #104]	; 0x68
 8007136:	4654      	mov	r4, sl
 8007138:	2205      	movs	r2, #5
 800713a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800713e:	4858      	ldr	r0, [pc, #352]	; (80072a0 <_vfiprintf_r+0x24c>)
 8007140:	f7f9 f866 	bl	8000210 <memchr>
 8007144:	9a04      	ldr	r2, [sp, #16]
 8007146:	b9d8      	cbnz	r0, 8007180 <_vfiprintf_r+0x12c>
 8007148:	06d1      	lsls	r1, r2, #27
 800714a:	bf44      	itt	mi
 800714c:	2320      	movmi	r3, #32
 800714e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007152:	0713      	lsls	r3, r2, #28
 8007154:	bf44      	itt	mi
 8007156:	232b      	movmi	r3, #43	; 0x2b
 8007158:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800715c:	f89a 3000 	ldrb.w	r3, [sl]
 8007160:	2b2a      	cmp	r3, #42	; 0x2a
 8007162:	d015      	beq.n	8007190 <_vfiprintf_r+0x13c>
 8007164:	9a07      	ldr	r2, [sp, #28]
 8007166:	4654      	mov	r4, sl
 8007168:	2000      	movs	r0, #0
 800716a:	f04f 0c0a 	mov.w	ip, #10
 800716e:	4621      	mov	r1, r4
 8007170:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007174:	3b30      	subs	r3, #48	; 0x30
 8007176:	2b09      	cmp	r3, #9
 8007178:	d94e      	bls.n	8007218 <_vfiprintf_r+0x1c4>
 800717a:	b1b0      	cbz	r0, 80071aa <_vfiprintf_r+0x156>
 800717c:	9207      	str	r2, [sp, #28]
 800717e:	e014      	b.n	80071aa <_vfiprintf_r+0x156>
 8007180:	eba0 0308 	sub.w	r3, r0, r8
 8007184:	fa09 f303 	lsl.w	r3, r9, r3
 8007188:	4313      	orrs	r3, r2
 800718a:	9304      	str	r3, [sp, #16]
 800718c:	46a2      	mov	sl, r4
 800718e:	e7d2      	b.n	8007136 <_vfiprintf_r+0xe2>
 8007190:	9b03      	ldr	r3, [sp, #12]
 8007192:	1d19      	adds	r1, r3, #4
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	9103      	str	r1, [sp, #12]
 8007198:	2b00      	cmp	r3, #0
 800719a:	bfbb      	ittet	lt
 800719c:	425b      	neglt	r3, r3
 800719e:	f042 0202 	orrlt.w	r2, r2, #2
 80071a2:	9307      	strge	r3, [sp, #28]
 80071a4:	9307      	strlt	r3, [sp, #28]
 80071a6:	bfb8      	it	lt
 80071a8:	9204      	strlt	r2, [sp, #16]
 80071aa:	7823      	ldrb	r3, [r4, #0]
 80071ac:	2b2e      	cmp	r3, #46	; 0x2e
 80071ae:	d10c      	bne.n	80071ca <_vfiprintf_r+0x176>
 80071b0:	7863      	ldrb	r3, [r4, #1]
 80071b2:	2b2a      	cmp	r3, #42	; 0x2a
 80071b4:	d135      	bne.n	8007222 <_vfiprintf_r+0x1ce>
 80071b6:	9b03      	ldr	r3, [sp, #12]
 80071b8:	1d1a      	adds	r2, r3, #4
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	9203      	str	r2, [sp, #12]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	bfb8      	it	lt
 80071c2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80071c6:	3402      	adds	r4, #2
 80071c8:	9305      	str	r3, [sp, #20]
 80071ca:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80072b0 <_vfiprintf_r+0x25c>
 80071ce:	7821      	ldrb	r1, [r4, #0]
 80071d0:	2203      	movs	r2, #3
 80071d2:	4650      	mov	r0, sl
 80071d4:	f7f9 f81c 	bl	8000210 <memchr>
 80071d8:	b140      	cbz	r0, 80071ec <_vfiprintf_r+0x198>
 80071da:	2340      	movs	r3, #64	; 0x40
 80071dc:	eba0 000a 	sub.w	r0, r0, sl
 80071e0:	fa03 f000 	lsl.w	r0, r3, r0
 80071e4:	9b04      	ldr	r3, [sp, #16]
 80071e6:	4303      	orrs	r3, r0
 80071e8:	3401      	adds	r4, #1
 80071ea:	9304      	str	r3, [sp, #16]
 80071ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071f0:	482c      	ldr	r0, [pc, #176]	; (80072a4 <_vfiprintf_r+0x250>)
 80071f2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80071f6:	2206      	movs	r2, #6
 80071f8:	f7f9 f80a 	bl	8000210 <memchr>
 80071fc:	2800      	cmp	r0, #0
 80071fe:	d03f      	beq.n	8007280 <_vfiprintf_r+0x22c>
 8007200:	4b29      	ldr	r3, [pc, #164]	; (80072a8 <_vfiprintf_r+0x254>)
 8007202:	bb1b      	cbnz	r3, 800724c <_vfiprintf_r+0x1f8>
 8007204:	9b03      	ldr	r3, [sp, #12]
 8007206:	3307      	adds	r3, #7
 8007208:	f023 0307 	bic.w	r3, r3, #7
 800720c:	3308      	adds	r3, #8
 800720e:	9303      	str	r3, [sp, #12]
 8007210:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007212:	443b      	add	r3, r7
 8007214:	9309      	str	r3, [sp, #36]	; 0x24
 8007216:	e767      	b.n	80070e8 <_vfiprintf_r+0x94>
 8007218:	fb0c 3202 	mla	r2, ip, r2, r3
 800721c:	460c      	mov	r4, r1
 800721e:	2001      	movs	r0, #1
 8007220:	e7a5      	b.n	800716e <_vfiprintf_r+0x11a>
 8007222:	2300      	movs	r3, #0
 8007224:	3401      	adds	r4, #1
 8007226:	9305      	str	r3, [sp, #20]
 8007228:	4619      	mov	r1, r3
 800722a:	f04f 0c0a 	mov.w	ip, #10
 800722e:	4620      	mov	r0, r4
 8007230:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007234:	3a30      	subs	r2, #48	; 0x30
 8007236:	2a09      	cmp	r2, #9
 8007238:	d903      	bls.n	8007242 <_vfiprintf_r+0x1ee>
 800723a:	2b00      	cmp	r3, #0
 800723c:	d0c5      	beq.n	80071ca <_vfiprintf_r+0x176>
 800723e:	9105      	str	r1, [sp, #20]
 8007240:	e7c3      	b.n	80071ca <_vfiprintf_r+0x176>
 8007242:	fb0c 2101 	mla	r1, ip, r1, r2
 8007246:	4604      	mov	r4, r0
 8007248:	2301      	movs	r3, #1
 800724a:	e7f0      	b.n	800722e <_vfiprintf_r+0x1da>
 800724c:	ab03      	add	r3, sp, #12
 800724e:	9300      	str	r3, [sp, #0]
 8007250:	462a      	mov	r2, r5
 8007252:	4b16      	ldr	r3, [pc, #88]	; (80072ac <_vfiprintf_r+0x258>)
 8007254:	a904      	add	r1, sp, #16
 8007256:	4630      	mov	r0, r6
 8007258:	f3af 8000 	nop.w
 800725c:	4607      	mov	r7, r0
 800725e:	1c78      	adds	r0, r7, #1
 8007260:	d1d6      	bne.n	8007210 <_vfiprintf_r+0x1bc>
 8007262:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007264:	07d9      	lsls	r1, r3, #31
 8007266:	d405      	bmi.n	8007274 <_vfiprintf_r+0x220>
 8007268:	89ab      	ldrh	r3, [r5, #12]
 800726a:	059a      	lsls	r2, r3, #22
 800726c:	d402      	bmi.n	8007274 <_vfiprintf_r+0x220>
 800726e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007270:	f7ff fe30 	bl	8006ed4 <__retarget_lock_release_recursive>
 8007274:	89ab      	ldrh	r3, [r5, #12]
 8007276:	065b      	lsls	r3, r3, #25
 8007278:	f53f af12 	bmi.w	80070a0 <_vfiprintf_r+0x4c>
 800727c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800727e:	e711      	b.n	80070a4 <_vfiprintf_r+0x50>
 8007280:	ab03      	add	r3, sp, #12
 8007282:	9300      	str	r3, [sp, #0]
 8007284:	462a      	mov	r2, r5
 8007286:	4b09      	ldr	r3, [pc, #36]	; (80072ac <_vfiprintf_r+0x258>)
 8007288:	a904      	add	r1, sp, #16
 800728a:	4630      	mov	r0, r6
 800728c:	f000 f880 	bl	8007390 <_printf_i>
 8007290:	e7e4      	b.n	800725c <_vfiprintf_r+0x208>
 8007292:	bf00      	nop
 8007294:	08007cc8 	.word	0x08007cc8
 8007298:	08007ce8 	.word	0x08007ce8
 800729c:	08007ca8 	.word	0x08007ca8
 80072a0:	08007d08 	.word	0x08007d08
 80072a4:	08007d12 	.word	0x08007d12
 80072a8:	00000000 	.word	0x00000000
 80072ac:	0800702f 	.word	0x0800702f
 80072b0:	08007d0e 	.word	0x08007d0e

080072b4 <_printf_common>:
 80072b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072b8:	4616      	mov	r6, r2
 80072ba:	4699      	mov	r9, r3
 80072bc:	688a      	ldr	r2, [r1, #8]
 80072be:	690b      	ldr	r3, [r1, #16]
 80072c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80072c4:	4293      	cmp	r3, r2
 80072c6:	bfb8      	it	lt
 80072c8:	4613      	movlt	r3, r2
 80072ca:	6033      	str	r3, [r6, #0]
 80072cc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80072d0:	4607      	mov	r7, r0
 80072d2:	460c      	mov	r4, r1
 80072d4:	b10a      	cbz	r2, 80072da <_printf_common+0x26>
 80072d6:	3301      	adds	r3, #1
 80072d8:	6033      	str	r3, [r6, #0]
 80072da:	6823      	ldr	r3, [r4, #0]
 80072dc:	0699      	lsls	r1, r3, #26
 80072de:	bf42      	ittt	mi
 80072e0:	6833      	ldrmi	r3, [r6, #0]
 80072e2:	3302      	addmi	r3, #2
 80072e4:	6033      	strmi	r3, [r6, #0]
 80072e6:	6825      	ldr	r5, [r4, #0]
 80072e8:	f015 0506 	ands.w	r5, r5, #6
 80072ec:	d106      	bne.n	80072fc <_printf_common+0x48>
 80072ee:	f104 0a19 	add.w	sl, r4, #25
 80072f2:	68e3      	ldr	r3, [r4, #12]
 80072f4:	6832      	ldr	r2, [r6, #0]
 80072f6:	1a9b      	subs	r3, r3, r2
 80072f8:	42ab      	cmp	r3, r5
 80072fa:	dc26      	bgt.n	800734a <_printf_common+0x96>
 80072fc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007300:	1e13      	subs	r3, r2, #0
 8007302:	6822      	ldr	r2, [r4, #0]
 8007304:	bf18      	it	ne
 8007306:	2301      	movne	r3, #1
 8007308:	0692      	lsls	r2, r2, #26
 800730a:	d42b      	bmi.n	8007364 <_printf_common+0xb0>
 800730c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007310:	4649      	mov	r1, r9
 8007312:	4638      	mov	r0, r7
 8007314:	47c0      	blx	r8
 8007316:	3001      	adds	r0, #1
 8007318:	d01e      	beq.n	8007358 <_printf_common+0xa4>
 800731a:	6823      	ldr	r3, [r4, #0]
 800731c:	68e5      	ldr	r5, [r4, #12]
 800731e:	6832      	ldr	r2, [r6, #0]
 8007320:	f003 0306 	and.w	r3, r3, #6
 8007324:	2b04      	cmp	r3, #4
 8007326:	bf08      	it	eq
 8007328:	1aad      	subeq	r5, r5, r2
 800732a:	68a3      	ldr	r3, [r4, #8]
 800732c:	6922      	ldr	r2, [r4, #16]
 800732e:	bf0c      	ite	eq
 8007330:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007334:	2500      	movne	r5, #0
 8007336:	4293      	cmp	r3, r2
 8007338:	bfc4      	itt	gt
 800733a:	1a9b      	subgt	r3, r3, r2
 800733c:	18ed      	addgt	r5, r5, r3
 800733e:	2600      	movs	r6, #0
 8007340:	341a      	adds	r4, #26
 8007342:	42b5      	cmp	r5, r6
 8007344:	d11a      	bne.n	800737c <_printf_common+0xc8>
 8007346:	2000      	movs	r0, #0
 8007348:	e008      	b.n	800735c <_printf_common+0xa8>
 800734a:	2301      	movs	r3, #1
 800734c:	4652      	mov	r2, sl
 800734e:	4649      	mov	r1, r9
 8007350:	4638      	mov	r0, r7
 8007352:	47c0      	blx	r8
 8007354:	3001      	adds	r0, #1
 8007356:	d103      	bne.n	8007360 <_printf_common+0xac>
 8007358:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800735c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007360:	3501      	adds	r5, #1
 8007362:	e7c6      	b.n	80072f2 <_printf_common+0x3e>
 8007364:	18e1      	adds	r1, r4, r3
 8007366:	1c5a      	adds	r2, r3, #1
 8007368:	2030      	movs	r0, #48	; 0x30
 800736a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800736e:	4422      	add	r2, r4
 8007370:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007374:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007378:	3302      	adds	r3, #2
 800737a:	e7c7      	b.n	800730c <_printf_common+0x58>
 800737c:	2301      	movs	r3, #1
 800737e:	4622      	mov	r2, r4
 8007380:	4649      	mov	r1, r9
 8007382:	4638      	mov	r0, r7
 8007384:	47c0      	blx	r8
 8007386:	3001      	adds	r0, #1
 8007388:	d0e6      	beq.n	8007358 <_printf_common+0xa4>
 800738a:	3601      	adds	r6, #1
 800738c:	e7d9      	b.n	8007342 <_printf_common+0x8e>
	...

08007390 <_printf_i>:
 8007390:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007394:	7e0f      	ldrb	r7, [r1, #24]
 8007396:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007398:	2f78      	cmp	r7, #120	; 0x78
 800739a:	4691      	mov	r9, r2
 800739c:	4680      	mov	r8, r0
 800739e:	460c      	mov	r4, r1
 80073a0:	469a      	mov	sl, r3
 80073a2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80073a6:	d807      	bhi.n	80073b8 <_printf_i+0x28>
 80073a8:	2f62      	cmp	r7, #98	; 0x62
 80073aa:	d80a      	bhi.n	80073c2 <_printf_i+0x32>
 80073ac:	2f00      	cmp	r7, #0
 80073ae:	f000 80d8 	beq.w	8007562 <_printf_i+0x1d2>
 80073b2:	2f58      	cmp	r7, #88	; 0x58
 80073b4:	f000 80a3 	beq.w	80074fe <_printf_i+0x16e>
 80073b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80073bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80073c0:	e03a      	b.n	8007438 <_printf_i+0xa8>
 80073c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80073c6:	2b15      	cmp	r3, #21
 80073c8:	d8f6      	bhi.n	80073b8 <_printf_i+0x28>
 80073ca:	a101      	add	r1, pc, #4	; (adr r1, 80073d0 <_printf_i+0x40>)
 80073cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80073d0:	08007429 	.word	0x08007429
 80073d4:	0800743d 	.word	0x0800743d
 80073d8:	080073b9 	.word	0x080073b9
 80073dc:	080073b9 	.word	0x080073b9
 80073e0:	080073b9 	.word	0x080073b9
 80073e4:	080073b9 	.word	0x080073b9
 80073e8:	0800743d 	.word	0x0800743d
 80073ec:	080073b9 	.word	0x080073b9
 80073f0:	080073b9 	.word	0x080073b9
 80073f4:	080073b9 	.word	0x080073b9
 80073f8:	080073b9 	.word	0x080073b9
 80073fc:	08007549 	.word	0x08007549
 8007400:	0800746d 	.word	0x0800746d
 8007404:	0800752b 	.word	0x0800752b
 8007408:	080073b9 	.word	0x080073b9
 800740c:	080073b9 	.word	0x080073b9
 8007410:	0800756b 	.word	0x0800756b
 8007414:	080073b9 	.word	0x080073b9
 8007418:	0800746d 	.word	0x0800746d
 800741c:	080073b9 	.word	0x080073b9
 8007420:	080073b9 	.word	0x080073b9
 8007424:	08007533 	.word	0x08007533
 8007428:	682b      	ldr	r3, [r5, #0]
 800742a:	1d1a      	adds	r2, r3, #4
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	602a      	str	r2, [r5, #0]
 8007430:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007434:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007438:	2301      	movs	r3, #1
 800743a:	e0a3      	b.n	8007584 <_printf_i+0x1f4>
 800743c:	6820      	ldr	r0, [r4, #0]
 800743e:	6829      	ldr	r1, [r5, #0]
 8007440:	0606      	lsls	r6, r0, #24
 8007442:	f101 0304 	add.w	r3, r1, #4
 8007446:	d50a      	bpl.n	800745e <_printf_i+0xce>
 8007448:	680e      	ldr	r6, [r1, #0]
 800744a:	602b      	str	r3, [r5, #0]
 800744c:	2e00      	cmp	r6, #0
 800744e:	da03      	bge.n	8007458 <_printf_i+0xc8>
 8007450:	232d      	movs	r3, #45	; 0x2d
 8007452:	4276      	negs	r6, r6
 8007454:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007458:	485e      	ldr	r0, [pc, #376]	; (80075d4 <_printf_i+0x244>)
 800745a:	230a      	movs	r3, #10
 800745c:	e019      	b.n	8007492 <_printf_i+0x102>
 800745e:	680e      	ldr	r6, [r1, #0]
 8007460:	602b      	str	r3, [r5, #0]
 8007462:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007466:	bf18      	it	ne
 8007468:	b236      	sxthne	r6, r6
 800746a:	e7ef      	b.n	800744c <_printf_i+0xbc>
 800746c:	682b      	ldr	r3, [r5, #0]
 800746e:	6820      	ldr	r0, [r4, #0]
 8007470:	1d19      	adds	r1, r3, #4
 8007472:	6029      	str	r1, [r5, #0]
 8007474:	0601      	lsls	r1, r0, #24
 8007476:	d501      	bpl.n	800747c <_printf_i+0xec>
 8007478:	681e      	ldr	r6, [r3, #0]
 800747a:	e002      	b.n	8007482 <_printf_i+0xf2>
 800747c:	0646      	lsls	r6, r0, #25
 800747e:	d5fb      	bpl.n	8007478 <_printf_i+0xe8>
 8007480:	881e      	ldrh	r6, [r3, #0]
 8007482:	4854      	ldr	r0, [pc, #336]	; (80075d4 <_printf_i+0x244>)
 8007484:	2f6f      	cmp	r7, #111	; 0x6f
 8007486:	bf0c      	ite	eq
 8007488:	2308      	moveq	r3, #8
 800748a:	230a      	movne	r3, #10
 800748c:	2100      	movs	r1, #0
 800748e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007492:	6865      	ldr	r5, [r4, #4]
 8007494:	60a5      	str	r5, [r4, #8]
 8007496:	2d00      	cmp	r5, #0
 8007498:	bfa2      	ittt	ge
 800749a:	6821      	ldrge	r1, [r4, #0]
 800749c:	f021 0104 	bicge.w	r1, r1, #4
 80074a0:	6021      	strge	r1, [r4, #0]
 80074a2:	b90e      	cbnz	r6, 80074a8 <_printf_i+0x118>
 80074a4:	2d00      	cmp	r5, #0
 80074a6:	d04d      	beq.n	8007544 <_printf_i+0x1b4>
 80074a8:	4615      	mov	r5, r2
 80074aa:	fbb6 f1f3 	udiv	r1, r6, r3
 80074ae:	fb03 6711 	mls	r7, r3, r1, r6
 80074b2:	5dc7      	ldrb	r7, [r0, r7]
 80074b4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80074b8:	4637      	mov	r7, r6
 80074ba:	42bb      	cmp	r3, r7
 80074bc:	460e      	mov	r6, r1
 80074be:	d9f4      	bls.n	80074aa <_printf_i+0x11a>
 80074c0:	2b08      	cmp	r3, #8
 80074c2:	d10b      	bne.n	80074dc <_printf_i+0x14c>
 80074c4:	6823      	ldr	r3, [r4, #0]
 80074c6:	07de      	lsls	r6, r3, #31
 80074c8:	d508      	bpl.n	80074dc <_printf_i+0x14c>
 80074ca:	6923      	ldr	r3, [r4, #16]
 80074cc:	6861      	ldr	r1, [r4, #4]
 80074ce:	4299      	cmp	r1, r3
 80074d0:	bfde      	ittt	le
 80074d2:	2330      	movle	r3, #48	; 0x30
 80074d4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80074d8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80074dc:	1b52      	subs	r2, r2, r5
 80074de:	6122      	str	r2, [r4, #16]
 80074e0:	f8cd a000 	str.w	sl, [sp]
 80074e4:	464b      	mov	r3, r9
 80074e6:	aa03      	add	r2, sp, #12
 80074e8:	4621      	mov	r1, r4
 80074ea:	4640      	mov	r0, r8
 80074ec:	f7ff fee2 	bl	80072b4 <_printf_common>
 80074f0:	3001      	adds	r0, #1
 80074f2:	d14c      	bne.n	800758e <_printf_i+0x1fe>
 80074f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80074f8:	b004      	add	sp, #16
 80074fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074fe:	4835      	ldr	r0, [pc, #212]	; (80075d4 <_printf_i+0x244>)
 8007500:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007504:	6829      	ldr	r1, [r5, #0]
 8007506:	6823      	ldr	r3, [r4, #0]
 8007508:	f851 6b04 	ldr.w	r6, [r1], #4
 800750c:	6029      	str	r1, [r5, #0]
 800750e:	061d      	lsls	r5, r3, #24
 8007510:	d514      	bpl.n	800753c <_printf_i+0x1ac>
 8007512:	07df      	lsls	r7, r3, #31
 8007514:	bf44      	itt	mi
 8007516:	f043 0320 	orrmi.w	r3, r3, #32
 800751a:	6023      	strmi	r3, [r4, #0]
 800751c:	b91e      	cbnz	r6, 8007526 <_printf_i+0x196>
 800751e:	6823      	ldr	r3, [r4, #0]
 8007520:	f023 0320 	bic.w	r3, r3, #32
 8007524:	6023      	str	r3, [r4, #0]
 8007526:	2310      	movs	r3, #16
 8007528:	e7b0      	b.n	800748c <_printf_i+0xfc>
 800752a:	6823      	ldr	r3, [r4, #0]
 800752c:	f043 0320 	orr.w	r3, r3, #32
 8007530:	6023      	str	r3, [r4, #0]
 8007532:	2378      	movs	r3, #120	; 0x78
 8007534:	4828      	ldr	r0, [pc, #160]	; (80075d8 <_printf_i+0x248>)
 8007536:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800753a:	e7e3      	b.n	8007504 <_printf_i+0x174>
 800753c:	0659      	lsls	r1, r3, #25
 800753e:	bf48      	it	mi
 8007540:	b2b6      	uxthmi	r6, r6
 8007542:	e7e6      	b.n	8007512 <_printf_i+0x182>
 8007544:	4615      	mov	r5, r2
 8007546:	e7bb      	b.n	80074c0 <_printf_i+0x130>
 8007548:	682b      	ldr	r3, [r5, #0]
 800754a:	6826      	ldr	r6, [r4, #0]
 800754c:	6961      	ldr	r1, [r4, #20]
 800754e:	1d18      	adds	r0, r3, #4
 8007550:	6028      	str	r0, [r5, #0]
 8007552:	0635      	lsls	r5, r6, #24
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	d501      	bpl.n	800755c <_printf_i+0x1cc>
 8007558:	6019      	str	r1, [r3, #0]
 800755a:	e002      	b.n	8007562 <_printf_i+0x1d2>
 800755c:	0670      	lsls	r0, r6, #25
 800755e:	d5fb      	bpl.n	8007558 <_printf_i+0x1c8>
 8007560:	8019      	strh	r1, [r3, #0]
 8007562:	2300      	movs	r3, #0
 8007564:	6123      	str	r3, [r4, #16]
 8007566:	4615      	mov	r5, r2
 8007568:	e7ba      	b.n	80074e0 <_printf_i+0x150>
 800756a:	682b      	ldr	r3, [r5, #0]
 800756c:	1d1a      	adds	r2, r3, #4
 800756e:	602a      	str	r2, [r5, #0]
 8007570:	681d      	ldr	r5, [r3, #0]
 8007572:	6862      	ldr	r2, [r4, #4]
 8007574:	2100      	movs	r1, #0
 8007576:	4628      	mov	r0, r5
 8007578:	f7f8 fe4a 	bl	8000210 <memchr>
 800757c:	b108      	cbz	r0, 8007582 <_printf_i+0x1f2>
 800757e:	1b40      	subs	r0, r0, r5
 8007580:	6060      	str	r0, [r4, #4]
 8007582:	6863      	ldr	r3, [r4, #4]
 8007584:	6123      	str	r3, [r4, #16]
 8007586:	2300      	movs	r3, #0
 8007588:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800758c:	e7a8      	b.n	80074e0 <_printf_i+0x150>
 800758e:	6923      	ldr	r3, [r4, #16]
 8007590:	462a      	mov	r2, r5
 8007592:	4649      	mov	r1, r9
 8007594:	4640      	mov	r0, r8
 8007596:	47d0      	blx	sl
 8007598:	3001      	adds	r0, #1
 800759a:	d0ab      	beq.n	80074f4 <_printf_i+0x164>
 800759c:	6823      	ldr	r3, [r4, #0]
 800759e:	079b      	lsls	r3, r3, #30
 80075a0:	d413      	bmi.n	80075ca <_printf_i+0x23a>
 80075a2:	68e0      	ldr	r0, [r4, #12]
 80075a4:	9b03      	ldr	r3, [sp, #12]
 80075a6:	4298      	cmp	r0, r3
 80075a8:	bfb8      	it	lt
 80075aa:	4618      	movlt	r0, r3
 80075ac:	e7a4      	b.n	80074f8 <_printf_i+0x168>
 80075ae:	2301      	movs	r3, #1
 80075b0:	4632      	mov	r2, r6
 80075b2:	4649      	mov	r1, r9
 80075b4:	4640      	mov	r0, r8
 80075b6:	47d0      	blx	sl
 80075b8:	3001      	adds	r0, #1
 80075ba:	d09b      	beq.n	80074f4 <_printf_i+0x164>
 80075bc:	3501      	adds	r5, #1
 80075be:	68e3      	ldr	r3, [r4, #12]
 80075c0:	9903      	ldr	r1, [sp, #12]
 80075c2:	1a5b      	subs	r3, r3, r1
 80075c4:	42ab      	cmp	r3, r5
 80075c6:	dcf2      	bgt.n	80075ae <_printf_i+0x21e>
 80075c8:	e7eb      	b.n	80075a2 <_printf_i+0x212>
 80075ca:	2500      	movs	r5, #0
 80075cc:	f104 0619 	add.w	r6, r4, #25
 80075d0:	e7f5      	b.n	80075be <_printf_i+0x22e>
 80075d2:	bf00      	nop
 80075d4:	08007d19 	.word	0x08007d19
 80075d8:	08007d2a 	.word	0x08007d2a

080075dc <_sbrk_r>:
 80075dc:	b538      	push	{r3, r4, r5, lr}
 80075de:	4d06      	ldr	r5, [pc, #24]	; (80075f8 <_sbrk_r+0x1c>)
 80075e0:	2300      	movs	r3, #0
 80075e2:	4604      	mov	r4, r0
 80075e4:	4608      	mov	r0, r1
 80075e6:	602b      	str	r3, [r5, #0]
 80075e8:	f7f9 fd70 	bl	80010cc <_sbrk>
 80075ec:	1c43      	adds	r3, r0, #1
 80075ee:	d102      	bne.n	80075f6 <_sbrk_r+0x1a>
 80075f0:	682b      	ldr	r3, [r5, #0]
 80075f2:	b103      	cbz	r3, 80075f6 <_sbrk_r+0x1a>
 80075f4:	6023      	str	r3, [r4, #0]
 80075f6:	bd38      	pop	{r3, r4, r5, pc}
 80075f8:	20004bfc 	.word	0x20004bfc

080075fc <__sread>:
 80075fc:	b510      	push	{r4, lr}
 80075fe:	460c      	mov	r4, r1
 8007600:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007604:	f000 fab2 	bl	8007b6c <_read_r>
 8007608:	2800      	cmp	r0, #0
 800760a:	bfab      	itete	ge
 800760c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800760e:	89a3      	ldrhlt	r3, [r4, #12]
 8007610:	181b      	addge	r3, r3, r0
 8007612:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007616:	bfac      	ite	ge
 8007618:	6563      	strge	r3, [r4, #84]	; 0x54
 800761a:	81a3      	strhlt	r3, [r4, #12]
 800761c:	bd10      	pop	{r4, pc}

0800761e <__swrite>:
 800761e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007622:	461f      	mov	r7, r3
 8007624:	898b      	ldrh	r3, [r1, #12]
 8007626:	05db      	lsls	r3, r3, #23
 8007628:	4605      	mov	r5, r0
 800762a:	460c      	mov	r4, r1
 800762c:	4616      	mov	r6, r2
 800762e:	d505      	bpl.n	800763c <__swrite+0x1e>
 8007630:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007634:	2302      	movs	r3, #2
 8007636:	2200      	movs	r2, #0
 8007638:	f000 f9c8 	bl	80079cc <_lseek_r>
 800763c:	89a3      	ldrh	r3, [r4, #12]
 800763e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007642:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007646:	81a3      	strh	r3, [r4, #12]
 8007648:	4632      	mov	r2, r6
 800764a:	463b      	mov	r3, r7
 800764c:	4628      	mov	r0, r5
 800764e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007652:	f000 b869 	b.w	8007728 <_write_r>

08007656 <__sseek>:
 8007656:	b510      	push	{r4, lr}
 8007658:	460c      	mov	r4, r1
 800765a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800765e:	f000 f9b5 	bl	80079cc <_lseek_r>
 8007662:	1c43      	adds	r3, r0, #1
 8007664:	89a3      	ldrh	r3, [r4, #12]
 8007666:	bf15      	itete	ne
 8007668:	6560      	strne	r0, [r4, #84]	; 0x54
 800766a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800766e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007672:	81a3      	strheq	r3, [r4, #12]
 8007674:	bf18      	it	ne
 8007676:	81a3      	strhne	r3, [r4, #12]
 8007678:	bd10      	pop	{r4, pc}

0800767a <__sclose>:
 800767a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800767e:	f000 b8d3 	b.w	8007828 <_close_r>
	...

08007684 <__swbuf_r>:
 8007684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007686:	460e      	mov	r6, r1
 8007688:	4614      	mov	r4, r2
 800768a:	4605      	mov	r5, r0
 800768c:	b118      	cbz	r0, 8007696 <__swbuf_r+0x12>
 800768e:	6983      	ldr	r3, [r0, #24]
 8007690:	b90b      	cbnz	r3, 8007696 <__swbuf_r+0x12>
 8007692:	f7ff fb6d 	bl	8006d70 <__sinit>
 8007696:	4b21      	ldr	r3, [pc, #132]	; (800771c <__swbuf_r+0x98>)
 8007698:	429c      	cmp	r4, r3
 800769a:	d12b      	bne.n	80076f4 <__swbuf_r+0x70>
 800769c:	686c      	ldr	r4, [r5, #4]
 800769e:	69a3      	ldr	r3, [r4, #24]
 80076a0:	60a3      	str	r3, [r4, #8]
 80076a2:	89a3      	ldrh	r3, [r4, #12]
 80076a4:	071a      	lsls	r2, r3, #28
 80076a6:	d52f      	bpl.n	8007708 <__swbuf_r+0x84>
 80076a8:	6923      	ldr	r3, [r4, #16]
 80076aa:	b36b      	cbz	r3, 8007708 <__swbuf_r+0x84>
 80076ac:	6923      	ldr	r3, [r4, #16]
 80076ae:	6820      	ldr	r0, [r4, #0]
 80076b0:	1ac0      	subs	r0, r0, r3
 80076b2:	6963      	ldr	r3, [r4, #20]
 80076b4:	b2f6      	uxtb	r6, r6
 80076b6:	4283      	cmp	r3, r0
 80076b8:	4637      	mov	r7, r6
 80076ba:	dc04      	bgt.n	80076c6 <__swbuf_r+0x42>
 80076bc:	4621      	mov	r1, r4
 80076be:	4628      	mov	r0, r5
 80076c0:	f000 f948 	bl	8007954 <_fflush_r>
 80076c4:	bb30      	cbnz	r0, 8007714 <__swbuf_r+0x90>
 80076c6:	68a3      	ldr	r3, [r4, #8]
 80076c8:	3b01      	subs	r3, #1
 80076ca:	60a3      	str	r3, [r4, #8]
 80076cc:	6823      	ldr	r3, [r4, #0]
 80076ce:	1c5a      	adds	r2, r3, #1
 80076d0:	6022      	str	r2, [r4, #0]
 80076d2:	701e      	strb	r6, [r3, #0]
 80076d4:	6963      	ldr	r3, [r4, #20]
 80076d6:	3001      	adds	r0, #1
 80076d8:	4283      	cmp	r3, r0
 80076da:	d004      	beq.n	80076e6 <__swbuf_r+0x62>
 80076dc:	89a3      	ldrh	r3, [r4, #12]
 80076de:	07db      	lsls	r3, r3, #31
 80076e0:	d506      	bpl.n	80076f0 <__swbuf_r+0x6c>
 80076e2:	2e0a      	cmp	r6, #10
 80076e4:	d104      	bne.n	80076f0 <__swbuf_r+0x6c>
 80076e6:	4621      	mov	r1, r4
 80076e8:	4628      	mov	r0, r5
 80076ea:	f000 f933 	bl	8007954 <_fflush_r>
 80076ee:	b988      	cbnz	r0, 8007714 <__swbuf_r+0x90>
 80076f0:	4638      	mov	r0, r7
 80076f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80076f4:	4b0a      	ldr	r3, [pc, #40]	; (8007720 <__swbuf_r+0x9c>)
 80076f6:	429c      	cmp	r4, r3
 80076f8:	d101      	bne.n	80076fe <__swbuf_r+0x7a>
 80076fa:	68ac      	ldr	r4, [r5, #8]
 80076fc:	e7cf      	b.n	800769e <__swbuf_r+0x1a>
 80076fe:	4b09      	ldr	r3, [pc, #36]	; (8007724 <__swbuf_r+0xa0>)
 8007700:	429c      	cmp	r4, r3
 8007702:	bf08      	it	eq
 8007704:	68ec      	ldreq	r4, [r5, #12]
 8007706:	e7ca      	b.n	800769e <__swbuf_r+0x1a>
 8007708:	4621      	mov	r1, r4
 800770a:	4628      	mov	r0, r5
 800770c:	f000 f81e 	bl	800774c <__swsetup_r>
 8007710:	2800      	cmp	r0, #0
 8007712:	d0cb      	beq.n	80076ac <__swbuf_r+0x28>
 8007714:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8007718:	e7ea      	b.n	80076f0 <__swbuf_r+0x6c>
 800771a:	bf00      	nop
 800771c:	08007cc8 	.word	0x08007cc8
 8007720:	08007ce8 	.word	0x08007ce8
 8007724:	08007ca8 	.word	0x08007ca8

08007728 <_write_r>:
 8007728:	b538      	push	{r3, r4, r5, lr}
 800772a:	4d07      	ldr	r5, [pc, #28]	; (8007748 <_write_r+0x20>)
 800772c:	4604      	mov	r4, r0
 800772e:	4608      	mov	r0, r1
 8007730:	4611      	mov	r1, r2
 8007732:	2200      	movs	r2, #0
 8007734:	602a      	str	r2, [r5, #0]
 8007736:	461a      	mov	r2, r3
 8007738:	f7f9 f8fa 	bl	8000930 <_write>
 800773c:	1c43      	adds	r3, r0, #1
 800773e:	d102      	bne.n	8007746 <_write_r+0x1e>
 8007740:	682b      	ldr	r3, [r5, #0]
 8007742:	b103      	cbz	r3, 8007746 <_write_r+0x1e>
 8007744:	6023      	str	r3, [r4, #0]
 8007746:	bd38      	pop	{r3, r4, r5, pc}
 8007748:	20004bfc 	.word	0x20004bfc

0800774c <__swsetup_r>:
 800774c:	4b32      	ldr	r3, [pc, #200]	; (8007818 <__swsetup_r+0xcc>)
 800774e:	b570      	push	{r4, r5, r6, lr}
 8007750:	681d      	ldr	r5, [r3, #0]
 8007752:	4606      	mov	r6, r0
 8007754:	460c      	mov	r4, r1
 8007756:	b125      	cbz	r5, 8007762 <__swsetup_r+0x16>
 8007758:	69ab      	ldr	r3, [r5, #24]
 800775a:	b913      	cbnz	r3, 8007762 <__swsetup_r+0x16>
 800775c:	4628      	mov	r0, r5
 800775e:	f7ff fb07 	bl	8006d70 <__sinit>
 8007762:	4b2e      	ldr	r3, [pc, #184]	; (800781c <__swsetup_r+0xd0>)
 8007764:	429c      	cmp	r4, r3
 8007766:	d10f      	bne.n	8007788 <__swsetup_r+0x3c>
 8007768:	686c      	ldr	r4, [r5, #4]
 800776a:	89a3      	ldrh	r3, [r4, #12]
 800776c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007770:	0719      	lsls	r1, r3, #28
 8007772:	d42c      	bmi.n	80077ce <__swsetup_r+0x82>
 8007774:	06dd      	lsls	r5, r3, #27
 8007776:	d411      	bmi.n	800779c <__swsetup_r+0x50>
 8007778:	2309      	movs	r3, #9
 800777a:	6033      	str	r3, [r6, #0]
 800777c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007780:	81a3      	strh	r3, [r4, #12]
 8007782:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007786:	e03e      	b.n	8007806 <__swsetup_r+0xba>
 8007788:	4b25      	ldr	r3, [pc, #148]	; (8007820 <__swsetup_r+0xd4>)
 800778a:	429c      	cmp	r4, r3
 800778c:	d101      	bne.n	8007792 <__swsetup_r+0x46>
 800778e:	68ac      	ldr	r4, [r5, #8]
 8007790:	e7eb      	b.n	800776a <__swsetup_r+0x1e>
 8007792:	4b24      	ldr	r3, [pc, #144]	; (8007824 <__swsetup_r+0xd8>)
 8007794:	429c      	cmp	r4, r3
 8007796:	bf08      	it	eq
 8007798:	68ec      	ldreq	r4, [r5, #12]
 800779a:	e7e6      	b.n	800776a <__swsetup_r+0x1e>
 800779c:	0758      	lsls	r0, r3, #29
 800779e:	d512      	bpl.n	80077c6 <__swsetup_r+0x7a>
 80077a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80077a2:	b141      	cbz	r1, 80077b6 <__swsetup_r+0x6a>
 80077a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80077a8:	4299      	cmp	r1, r3
 80077aa:	d002      	beq.n	80077b2 <__swsetup_r+0x66>
 80077ac:	4630      	mov	r0, r6
 80077ae:	f000 f991 	bl	8007ad4 <_free_r>
 80077b2:	2300      	movs	r3, #0
 80077b4:	6363      	str	r3, [r4, #52]	; 0x34
 80077b6:	89a3      	ldrh	r3, [r4, #12]
 80077b8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80077bc:	81a3      	strh	r3, [r4, #12]
 80077be:	2300      	movs	r3, #0
 80077c0:	6063      	str	r3, [r4, #4]
 80077c2:	6923      	ldr	r3, [r4, #16]
 80077c4:	6023      	str	r3, [r4, #0]
 80077c6:	89a3      	ldrh	r3, [r4, #12]
 80077c8:	f043 0308 	orr.w	r3, r3, #8
 80077cc:	81a3      	strh	r3, [r4, #12]
 80077ce:	6923      	ldr	r3, [r4, #16]
 80077d0:	b94b      	cbnz	r3, 80077e6 <__swsetup_r+0x9a>
 80077d2:	89a3      	ldrh	r3, [r4, #12]
 80077d4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80077d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80077dc:	d003      	beq.n	80077e6 <__swsetup_r+0x9a>
 80077de:	4621      	mov	r1, r4
 80077e0:	4630      	mov	r0, r6
 80077e2:	f000 f92b 	bl	8007a3c <__smakebuf_r>
 80077e6:	89a0      	ldrh	r0, [r4, #12]
 80077e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80077ec:	f010 0301 	ands.w	r3, r0, #1
 80077f0:	d00a      	beq.n	8007808 <__swsetup_r+0xbc>
 80077f2:	2300      	movs	r3, #0
 80077f4:	60a3      	str	r3, [r4, #8]
 80077f6:	6963      	ldr	r3, [r4, #20]
 80077f8:	425b      	negs	r3, r3
 80077fa:	61a3      	str	r3, [r4, #24]
 80077fc:	6923      	ldr	r3, [r4, #16]
 80077fe:	b943      	cbnz	r3, 8007812 <__swsetup_r+0xc6>
 8007800:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007804:	d1ba      	bne.n	800777c <__swsetup_r+0x30>
 8007806:	bd70      	pop	{r4, r5, r6, pc}
 8007808:	0781      	lsls	r1, r0, #30
 800780a:	bf58      	it	pl
 800780c:	6963      	ldrpl	r3, [r4, #20]
 800780e:	60a3      	str	r3, [r4, #8]
 8007810:	e7f4      	b.n	80077fc <__swsetup_r+0xb0>
 8007812:	2000      	movs	r0, #0
 8007814:	e7f7      	b.n	8007806 <__swsetup_r+0xba>
 8007816:	bf00      	nop
 8007818:	200000cc 	.word	0x200000cc
 800781c:	08007cc8 	.word	0x08007cc8
 8007820:	08007ce8 	.word	0x08007ce8
 8007824:	08007ca8 	.word	0x08007ca8

08007828 <_close_r>:
 8007828:	b538      	push	{r3, r4, r5, lr}
 800782a:	4d06      	ldr	r5, [pc, #24]	; (8007844 <_close_r+0x1c>)
 800782c:	2300      	movs	r3, #0
 800782e:	4604      	mov	r4, r0
 8007830:	4608      	mov	r0, r1
 8007832:	602b      	str	r3, [r5, #0]
 8007834:	f7f9 fc15 	bl	8001062 <_close>
 8007838:	1c43      	adds	r3, r0, #1
 800783a:	d102      	bne.n	8007842 <_close_r+0x1a>
 800783c:	682b      	ldr	r3, [r5, #0]
 800783e:	b103      	cbz	r3, 8007842 <_close_r+0x1a>
 8007840:	6023      	str	r3, [r4, #0]
 8007842:	bd38      	pop	{r3, r4, r5, pc}
 8007844:	20004bfc 	.word	0x20004bfc

08007848 <__sflush_r>:
 8007848:	898a      	ldrh	r2, [r1, #12]
 800784a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800784e:	4605      	mov	r5, r0
 8007850:	0710      	lsls	r0, r2, #28
 8007852:	460c      	mov	r4, r1
 8007854:	d458      	bmi.n	8007908 <__sflush_r+0xc0>
 8007856:	684b      	ldr	r3, [r1, #4]
 8007858:	2b00      	cmp	r3, #0
 800785a:	dc05      	bgt.n	8007868 <__sflush_r+0x20>
 800785c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800785e:	2b00      	cmp	r3, #0
 8007860:	dc02      	bgt.n	8007868 <__sflush_r+0x20>
 8007862:	2000      	movs	r0, #0
 8007864:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007868:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800786a:	2e00      	cmp	r6, #0
 800786c:	d0f9      	beq.n	8007862 <__sflush_r+0x1a>
 800786e:	2300      	movs	r3, #0
 8007870:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007874:	682f      	ldr	r7, [r5, #0]
 8007876:	602b      	str	r3, [r5, #0]
 8007878:	d032      	beq.n	80078e0 <__sflush_r+0x98>
 800787a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800787c:	89a3      	ldrh	r3, [r4, #12]
 800787e:	075a      	lsls	r2, r3, #29
 8007880:	d505      	bpl.n	800788e <__sflush_r+0x46>
 8007882:	6863      	ldr	r3, [r4, #4]
 8007884:	1ac0      	subs	r0, r0, r3
 8007886:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007888:	b10b      	cbz	r3, 800788e <__sflush_r+0x46>
 800788a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800788c:	1ac0      	subs	r0, r0, r3
 800788e:	2300      	movs	r3, #0
 8007890:	4602      	mov	r2, r0
 8007892:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007894:	6a21      	ldr	r1, [r4, #32]
 8007896:	4628      	mov	r0, r5
 8007898:	47b0      	blx	r6
 800789a:	1c43      	adds	r3, r0, #1
 800789c:	89a3      	ldrh	r3, [r4, #12]
 800789e:	d106      	bne.n	80078ae <__sflush_r+0x66>
 80078a0:	6829      	ldr	r1, [r5, #0]
 80078a2:	291d      	cmp	r1, #29
 80078a4:	d82c      	bhi.n	8007900 <__sflush_r+0xb8>
 80078a6:	4a2a      	ldr	r2, [pc, #168]	; (8007950 <__sflush_r+0x108>)
 80078a8:	40ca      	lsrs	r2, r1
 80078aa:	07d6      	lsls	r6, r2, #31
 80078ac:	d528      	bpl.n	8007900 <__sflush_r+0xb8>
 80078ae:	2200      	movs	r2, #0
 80078b0:	6062      	str	r2, [r4, #4]
 80078b2:	04d9      	lsls	r1, r3, #19
 80078b4:	6922      	ldr	r2, [r4, #16]
 80078b6:	6022      	str	r2, [r4, #0]
 80078b8:	d504      	bpl.n	80078c4 <__sflush_r+0x7c>
 80078ba:	1c42      	adds	r2, r0, #1
 80078bc:	d101      	bne.n	80078c2 <__sflush_r+0x7a>
 80078be:	682b      	ldr	r3, [r5, #0]
 80078c0:	b903      	cbnz	r3, 80078c4 <__sflush_r+0x7c>
 80078c2:	6560      	str	r0, [r4, #84]	; 0x54
 80078c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80078c6:	602f      	str	r7, [r5, #0]
 80078c8:	2900      	cmp	r1, #0
 80078ca:	d0ca      	beq.n	8007862 <__sflush_r+0x1a>
 80078cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80078d0:	4299      	cmp	r1, r3
 80078d2:	d002      	beq.n	80078da <__sflush_r+0x92>
 80078d4:	4628      	mov	r0, r5
 80078d6:	f000 f8fd 	bl	8007ad4 <_free_r>
 80078da:	2000      	movs	r0, #0
 80078dc:	6360      	str	r0, [r4, #52]	; 0x34
 80078de:	e7c1      	b.n	8007864 <__sflush_r+0x1c>
 80078e0:	6a21      	ldr	r1, [r4, #32]
 80078e2:	2301      	movs	r3, #1
 80078e4:	4628      	mov	r0, r5
 80078e6:	47b0      	blx	r6
 80078e8:	1c41      	adds	r1, r0, #1
 80078ea:	d1c7      	bne.n	800787c <__sflush_r+0x34>
 80078ec:	682b      	ldr	r3, [r5, #0]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d0c4      	beq.n	800787c <__sflush_r+0x34>
 80078f2:	2b1d      	cmp	r3, #29
 80078f4:	d001      	beq.n	80078fa <__sflush_r+0xb2>
 80078f6:	2b16      	cmp	r3, #22
 80078f8:	d101      	bne.n	80078fe <__sflush_r+0xb6>
 80078fa:	602f      	str	r7, [r5, #0]
 80078fc:	e7b1      	b.n	8007862 <__sflush_r+0x1a>
 80078fe:	89a3      	ldrh	r3, [r4, #12]
 8007900:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007904:	81a3      	strh	r3, [r4, #12]
 8007906:	e7ad      	b.n	8007864 <__sflush_r+0x1c>
 8007908:	690f      	ldr	r7, [r1, #16]
 800790a:	2f00      	cmp	r7, #0
 800790c:	d0a9      	beq.n	8007862 <__sflush_r+0x1a>
 800790e:	0793      	lsls	r3, r2, #30
 8007910:	680e      	ldr	r6, [r1, #0]
 8007912:	bf08      	it	eq
 8007914:	694b      	ldreq	r3, [r1, #20]
 8007916:	600f      	str	r7, [r1, #0]
 8007918:	bf18      	it	ne
 800791a:	2300      	movne	r3, #0
 800791c:	eba6 0807 	sub.w	r8, r6, r7
 8007920:	608b      	str	r3, [r1, #8]
 8007922:	f1b8 0f00 	cmp.w	r8, #0
 8007926:	dd9c      	ble.n	8007862 <__sflush_r+0x1a>
 8007928:	6a21      	ldr	r1, [r4, #32]
 800792a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800792c:	4643      	mov	r3, r8
 800792e:	463a      	mov	r2, r7
 8007930:	4628      	mov	r0, r5
 8007932:	47b0      	blx	r6
 8007934:	2800      	cmp	r0, #0
 8007936:	dc06      	bgt.n	8007946 <__sflush_r+0xfe>
 8007938:	89a3      	ldrh	r3, [r4, #12]
 800793a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800793e:	81a3      	strh	r3, [r4, #12]
 8007940:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007944:	e78e      	b.n	8007864 <__sflush_r+0x1c>
 8007946:	4407      	add	r7, r0
 8007948:	eba8 0800 	sub.w	r8, r8, r0
 800794c:	e7e9      	b.n	8007922 <__sflush_r+0xda>
 800794e:	bf00      	nop
 8007950:	20400001 	.word	0x20400001

08007954 <_fflush_r>:
 8007954:	b538      	push	{r3, r4, r5, lr}
 8007956:	690b      	ldr	r3, [r1, #16]
 8007958:	4605      	mov	r5, r0
 800795a:	460c      	mov	r4, r1
 800795c:	b913      	cbnz	r3, 8007964 <_fflush_r+0x10>
 800795e:	2500      	movs	r5, #0
 8007960:	4628      	mov	r0, r5
 8007962:	bd38      	pop	{r3, r4, r5, pc}
 8007964:	b118      	cbz	r0, 800796e <_fflush_r+0x1a>
 8007966:	6983      	ldr	r3, [r0, #24]
 8007968:	b90b      	cbnz	r3, 800796e <_fflush_r+0x1a>
 800796a:	f7ff fa01 	bl	8006d70 <__sinit>
 800796e:	4b14      	ldr	r3, [pc, #80]	; (80079c0 <_fflush_r+0x6c>)
 8007970:	429c      	cmp	r4, r3
 8007972:	d11b      	bne.n	80079ac <_fflush_r+0x58>
 8007974:	686c      	ldr	r4, [r5, #4]
 8007976:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d0ef      	beq.n	800795e <_fflush_r+0xa>
 800797e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007980:	07d0      	lsls	r0, r2, #31
 8007982:	d404      	bmi.n	800798e <_fflush_r+0x3a>
 8007984:	0599      	lsls	r1, r3, #22
 8007986:	d402      	bmi.n	800798e <_fflush_r+0x3a>
 8007988:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800798a:	f7ff faa2 	bl	8006ed2 <__retarget_lock_acquire_recursive>
 800798e:	4628      	mov	r0, r5
 8007990:	4621      	mov	r1, r4
 8007992:	f7ff ff59 	bl	8007848 <__sflush_r>
 8007996:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007998:	07da      	lsls	r2, r3, #31
 800799a:	4605      	mov	r5, r0
 800799c:	d4e0      	bmi.n	8007960 <_fflush_r+0xc>
 800799e:	89a3      	ldrh	r3, [r4, #12]
 80079a0:	059b      	lsls	r3, r3, #22
 80079a2:	d4dd      	bmi.n	8007960 <_fflush_r+0xc>
 80079a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80079a6:	f7ff fa95 	bl	8006ed4 <__retarget_lock_release_recursive>
 80079aa:	e7d9      	b.n	8007960 <_fflush_r+0xc>
 80079ac:	4b05      	ldr	r3, [pc, #20]	; (80079c4 <_fflush_r+0x70>)
 80079ae:	429c      	cmp	r4, r3
 80079b0:	d101      	bne.n	80079b6 <_fflush_r+0x62>
 80079b2:	68ac      	ldr	r4, [r5, #8]
 80079b4:	e7df      	b.n	8007976 <_fflush_r+0x22>
 80079b6:	4b04      	ldr	r3, [pc, #16]	; (80079c8 <_fflush_r+0x74>)
 80079b8:	429c      	cmp	r4, r3
 80079ba:	bf08      	it	eq
 80079bc:	68ec      	ldreq	r4, [r5, #12]
 80079be:	e7da      	b.n	8007976 <_fflush_r+0x22>
 80079c0:	08007cc8 	.word	0x08007cc8
 80079c4:	08007ce8 	.word	0x08007ce8
 80079c8:	08007ca8 	.word	0x08007ca8

080079cc <_lseek_r>:
 80079cc:	b538      	push	{r3, r4, r5, lr}
 80079ce:	4d07      	ldr	r5, [pc, #28]	; (80079ec <_lseek_r+0x20>)
 80079d0:	4604      	mov	r4, r0
 80079d2:	4608      	mov	r0, r1
 80079d4:	4611      	mov	r1, r2
 80079d6:	2200      	movs	r2, #0
 80079d8:	602a      	str	r2, [r5, #0]
 80079da:	461a      	mov	r2, r3
 80079dc:	f7f9 fb68 	bl	80010b0 <_lseek>
 80079e0:	1c43      	adds	r3, r0, #1
 80079e2:	d102      	bne.n	80079ea <_lseek_r+0x1e>
 80079e4:	682b      	ldr	r3, [r5, #0]
 80079e6:	b103      	cbz	r3, 80079ea <_lseek_r+0x1e>
 80079e8:	6023      	str	r3, [r4, #0]
 80079ea:	bd38      	pop	{r3, r4, r5, pc}
 80079ec:	20004bfc 	.word	0x20004bfc

080079f0 <__swhatbuf_r>:
 80079f0:	b570      	push	{r4, r5, r6, lr}
 80079f2:	460e      	mov	r6, r1
 80079f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079f8:	2900      	cmp	r1, #0
 80079fa:	b096      	sub	sp, #88	; 0x58
 80079fc:	4614      	mov	r4, r2
 80079fe:	461d      	mov	r5, r3
 8007a00:	da08      	bge.n	8007a14 <__swhatbuf_r+0x24>
 8007a02:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007a06:	2200      	movs	r2, #0
 8007a08:	602a      	str	r2, [r5, #0]
 8007a0a:	061a      	lsls	r2, r3, #24
 8007a0c:	d410      	bmi.n	8007a30 <__swhatbuf_r+0x40>
 8007a0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007a12:	e00e      	b.n	8007a32 <__swhatbuf_r+0x42>
 8007a14:	466a      	mov	r2, sp
 8007a16:	f000 f8bb 	bl	8007b90 <_fstat_r>
 8007a1a:	2800      	cmp	r0, #0
 8007a1c:	dbf1      	blt.n	8007a02 <__swhatbuf_r+0x12>
 8007a1e:	9a01      	ldr	r2, [sp, #4]
 8007a20:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007a24:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007a28:	425a      	negs	r2, r3
 8007a2a:	415a      	adcs	r2, r3
 8007a2c:	602a      	str	r2, [r5, #0]
 8007a2e:	e7ee      	b.n	8007a0e <__swhatbuf_r+0x1e>
 8007a30:	2340      	movs	r3, #64	; 0x40
 8007a32:	2000      	movs	r0, #0
 8007a34:	6023      	str	r3, [r4, #0]
 8007a36:	b016      	add	sp, #88	; 0x58
 8007a38:	bd70      	pop	{r4, r5, r6, pc}
	...

08007a3c <__smakebuf_r>:
 8007a3c:	898b      	ldrh	r3, [r1, #12]
 8007a3e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007a40:	079d      	lsls	r5, r3, #30
 8007a42:	4606      	mov	r6, r0
 8007a44:	460c      	mov	r4, r1
 8007a46:	d507      	bpl.n	8007a58 <__smakebuf_r+0x1c>
 8007a48:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007a4c:	6023      	str	r3, [r4, #0]
 8007a4e:	6123      	str	r3, [r4, #16]
 8007a50:	2301      	movs	r3, #1
 8007a52:	6163      	str	r3, [r4, #20]
 8007a54:	b002      	add	sp, #8
 8007a56:	bd70      	pop	{r4, r5, r6, pc}
 8007a58:	ab01      	add	r3, sp, #4
 8007a5a:	466a      	mov	r2, sp
 8007a5c:	f7ff ffc8 	bl	80079f0 <__swhatbuf_r>
 8007a60:	9900      	ldr	r1, [sp, #0]
 8007a62:	4605      	mov	r5, r0
 8007a64:	4630      	mov	r0, r6
 8007a66:	f7ff fa57 	bl	8006f18 <_malloc_r>
 8007a6a:	b948      	cbnz	r0, 8007a80 <__smakebuf_r+0x44>
 8007a6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a70:	059a      	lsls	r2, r3, #22
 8007a72:	d4ef      	bmi.n	8007a54 <__smakebuf_r+0x18>
 8007a74:	f023 0303 	bic.w	r3, r3, #3
 8007a78:	f043 0302 	orr.w	r3, r3, #2
 8007a7c:	81a3      	strh	r3, [r4, #12]
 8007a7e:	e7e3      	b.n	8007a48 <__smakebuf_r+0xc>
 8007a80:	4b0d      	ldr	r3, [pc, #52]	; (8007ab8 <__smakebuf_r+0x7c>)
 8007a82:	62b3      	str	r3, [r6, #40]	; 0x28
 8007a84:	89a3      	ldrh	r3, [r4, #12]
 8007a86:	6020      	str	r0, [r4, #0]
 8007a88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a8c:	81a3      	strh	r3, [r4, #12]
 8007a8e:	9b00      	ldr	r3, [sp, #0]
 8007a90:	6163      	str	r3, [r4, #20]
 8007a92:	9b01      	ldr	r3, [sp, #4]
 8007a94:	6120      	str	r0, [r4, #16]
 8007a96:	b15b      	cbz	r3, 8007ab0 <__smakebuf_r+0x74>
 8007a98:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007a9c:	4630      	mov	r0, r6
 8007a9e:	f000 f889 	bl	8007bb4 <_isatty_r>
 8007aa2:	b128      	cbz	r0, 8007ab0 <__smakebuf_r+0x74>
 8007aa4:	89a3      	ldrh	r3, [r4, #12]
 8007aa6:	f023 0303 	bic.w	r3, r3, #3
 8007aaa:	f043 0301 	orr.w	r3, r3, #1
 8007aae:	81a3      	strh	r3, [r4, #12]
 8007ab0:	89a0      	ldrh	r0, [r4, #12]
 8007ab2:	4305      	orrs	r5, r0
 8007ab4:	81a5      	strh	r5, [r4, #12]
 8007ab6:	e7cd      	b.n	8007a54 <__smakebuf_r+0x18>
 8007ab8:	08006d09 	.word	0x08006d09

08007abc <__malloc_lock>:
 8007abc:	4801      	ldr	r0, [pc, #4]	; (8007ac4 <__malloc_lock+0x8>)
 8007abe:	f7ff ba08 	b.w	8006ed2 <__retarget_lock_acquire_recursive>
 8007ac2:	bf00      	nop
 8007ac4:	20004bf0 	.word	0x20004bf0

08007ac8 <__malloc_unlock>:
 8007ac8:	4801      	ldr	r0, [pc, #4]	; (8007ad0 <__malloc_unlock+0x8>)
 8007aca:	f7ff ba03 	b.w	8006ed4 <__retarget_lock_release_recursive>
 8007ace:	bf00      	nop
 8007ad0:	20004bf0 	.word	0x20004bf0

08007ad4 <_free_r>:
 8007ad4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007ad6:	2900      	cmp	r1, #0
 8007ad8:	d044      	beq.n	8007b64 <_free_r+0x90>
 8007ada:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ade:	9001      	str	r0, [sp, #4]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	f1a1 0404 	sub.w	r4, r1, #4
 8007ae6:	bfb8      	it	lt
 8007ae8:	18e4      	addlt	r4, r4, r3
 8007aea:	f7ff ffe7 	bl	8007abc <__malloc_lock>
 8007aee:	4a1e      	ldr	r2, [pc, #120]	; (8007b68 <_free_r+0x94>)
 8007af0:	9801      	ldr	r0, [sp, #4]
 8007af2:	6813      	ldr	r3, [r2, #0]
 8007af4:	b933      	cbnz	r3, 8007b04 <_free_r+0x30>
 8007af6:	6063      	str	r3, [r4, #4]
 8007af8:	6014      	str	r4, [r2, #0]
 8007afa:	b003      	add	sp, #12
 8007afc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007b00:	f7ff bfe2 	b.w	8007ac8 <__malloc_unlock>
 8007b04:	42a3      	cmp	r3, r4
 8007b06:	d908      	bls.n	8007b1a <_free_r+0x46>
 8007b08:	6825      	ldr	r5, [r4, #0]
 8007b0a:	1961      	adds	r1, r4, r5
 8007b0c:	428b      	cmp	r3, r1
 8007b0e:	bf01      	itttt	eq
 8007b10:	6819      	ldreq	r1, [r3, #0]
 8007b12:	685b      	ldreq	r3, [r3, #4]
 8007b14:	1949      	addeq	r1, r1, r5
 8007b16:	6021      	streq	r1, [r4, #0]
 8007b18:	e7ed      	b.n	8007af6 <_free_r+0x22>
 8007b1a:	461a      	mov	r2, r3
 8007b1c:	685b      	ldr	r3, [r3, #4]
 8007b1e:	b10b      	cbz	r3, 8007b24 <_free_r+0x50>
 8007b20:	42a3      	cmp	r3, r4
 8007b22:	d9fa      	bls.n	8007b1a <_free_r+0x46>
 8007b24:	6811      	ldr	r1, [r2, #0]
 8007b26:	1855      	adds	r5, r2, r1
 8007b28:	42a5      	cmp	r5, r4
 8007b2a:	d10b      	bne.n	8007b44 <_free_r+0x70>
 8007b2c:	6824      	ldr	r4, [r4, #0]
 8007b2e:	4421      	add	r1, r4
 8007b30:	1854      	adds	r4, r2, r1
 8007b32:	42a3      	cmp	r3, r4
 8007b34:	6011      	str	r1, [r2, #0]
 8007b36:	d1e0      	bne.n	8007afa <_free_r+0x26>
 8007b38:	681c      	ldr	r4, [r3, #0]
 8007b3a:	685b      	ldr	r3, [r3, #4]
 8007b3c:	6053      	str	r3, [r2, #4]
 8007b3e:	4421      	add	r1, r4
 8007b40:	6011      	str	r1, [r2, #0]
 8007b42:	e7da      	b.n	8007afa <_free_r+0x26>
 8007b44:	d902      	bls.n	8007b4c <_free_r+0x78>
 8007b46:	230c      	movs	r3, #12
 8007b48:	6003      	str	r3, [r0, #0]
 8007b4a:	e7d6      	b.n	8007afa <_free_r+0x26>
 8007b4c:	6825      	ldr	r5, [r4, #0]
 8007b4e:	1961      	adds	r1, r4, r5
 8007b50:	428b      	cmp	r3, r1
 8007b52:	bf04      	itt	eq
 8007b54:	6819      	ldreq	r1, [r3, #0]
 8007b56:	685b      	ldreq	r3, [r3, #4]
 8007b58:	6063      	str	r3, [r4, #4]
 8007b5a:	bf04      	itt	eq
 8007b5c:	1949      	addeq	r1, r1, r5
 8007b5e:	6021      	streq	r1, [r4, #0]
 8007b60:	6054      	str	r4, [r2, #4]
 8007b62:	e7ca      	b.n	8007afa <_free_r+0x26>
 8007b64:	b003      	add	sp, #12
 8007b66:	bd30      	pop	{r4, r5, pc}
 8007b68:	20004bf4 	.word	0x20004bf4

08007b6c <_read_r>:
 8007b6c:	b538      	push	{r3, r4, r5, lr}
 8007b6e:	4d07      	ldr	r5, [pc, #28]	; (8007b8c <_read_r+0x20>)
 8007b70:	4604      	mov	r4, r0
 8007b72:	4608      	mov	r0, r1
 8007b74:	4611      	mov	r1, r2
 8007b76:	2200      	movs	r2, #0
 8007b78:	602a      	str	r2, [r5, #0]
 8007b7a:	461a      	mov	r2, r3
 8007b7c:	f7f9 fa54 	bl	8001028 <_read>
 8007b80:	1c43      	adds	r3, r0, #1
 8007b82:	d102      	bne.n	8007b8a <_read_r+0x1e>
 8007b84:	682b      	ldr	r3, [r5, #0]
 8007b86:	b103      	cbz	r3, 8007b8a <_read_r+0x1e>
 8007b88:	6023      	str	r3, [r4, #0]
 8007b8a:	bd38      	pop	{r3, r4, r5, pc}
 8007b8c:	20004bfc 	.word	0x20004bfc

08007b90 <_fstat_r>:
 8007b90:	b538      	push	{r3, r4, r5, lr}
 8007b92:	4d07      	ldr	r5, [pc, #28]	; (8007bb0 <_fstat_r+0x20>)
 8007b94:	2300      	movs	r3, #0
 8007b96:	4604      	mov	r4, r0
 8007b98:	4608      	mov	r0, r1
 8007b9a:	4611      	mov	r1, r2
 8007b9c:	602b      	str	r3, [r5, #0]
 8007b9e:	f7f9 fa6c 	bl	800107a <_fstat>
 8007ba2:	1c43      	adds	r3, r0, #1
 8007ba4:	d102      	bne.n	8007bac <_fstat_r+0x1c>
 8007ba6:	682b      	ldr	r3, [r5, #0]
 8007ba8:	b103      	cbz	r3, 8007bac <_fstat_r+0x1c>
 8007baa:	6023      	str	r3, [r4, #0]
 8007bac:	bd38      	pop	{r3, r4, r5, pc}
 8007bae:	bf00      	nop
 8007bb0:	20004bfc 	.word	0x20004bfc

08007bb4 <_isatty_r>:
 8007bb4:	b538      	push	{r3, r4, r5, lr}
 8007bb6:	4d06      	ldr	r5, [pc, #24]	; (8007bd0 <_isatty_r+0x1c>)
 8007bb8:	2300      	movs	r3, #0
 8007bba:	4604      	mov	r4, r0
 8007bbc:	4608      	mov	r0, r1
 8007bbe:	602b      	str	r3, [r5, #0]
 8007bc0:	f7f9 fa6b 	bl	800109a <_isatty>
 8007bc4:	1c43      	adds	r3, r0, #1
 8007bc6:	d102      	bne.n	8007bce <_isatty_r+0x1a>
 8007bc8:	682b      	ldr	r3, [r5, #0]
 8007bca:	b103      	cbz	r3, 8007bce <_isatty_r+0x1a>
 8007bcc:	6023      	str	r3, [r4, #0]
 8007bce:	bd38      	pop	{r3, r4, r5, pc}
 8007bd0:	20004bfc 	.word	0x20004bfc

08007bd4 <_gettimeofday>:
 8007bd4:	4b02      	ldr	r3, [pc, #8]	; (8007be0 <_gettimeofday+0xc>)
 8007bd6:	2258      	movs	r2, #88	; 0x58
 8007bd8:	601a      	str	r2, [r3, #0]
 8007bda:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007bde:	4770      	bx	lr
 8007be0:	20004bfc 	.word	0x20004bfc

08007be4 <_init>:
 8007be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007be6:	bf00      	nop
 8007be8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007bea:	bc08      	pop	{r3}
 8007bec:	469e      	mov	lr, r3
 8007bee:	4770      	bx	lr

08007bf0 <_fini>:
 8007bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bf2:	bf00      	nop
 8007bf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007bf6:	bc08      	pop	{r3}
 8007bf8:	469e      	mov	lr, r3
 8007bfa:	4770      	bx	lr
