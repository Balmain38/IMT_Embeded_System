
Projet_Final_Final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009a00  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000254  08009bd0  08009bd0  00019bd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009e24  08009e24  00020174  2**0
                  CONTENTS
  4 .ARM          00000008  08009e24  08009e24  00019e24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009e2c  08009e2c  00020174  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009e2c  08009e2c  00019e2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009e30  08009e30  00019e30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000174  20000000  08009e34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b14  20000174  08009fa8  00020174  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004c88  08009fa8  00024c88  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020174  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e691  00000000  00000000  000201a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004755  00000000  00000000  0003e835  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001918  00000000  00000000  00042f90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001730  00000000  00000000  000448a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a11f  00000000  00000000  00045fd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001df4a  00000000  00000000  000600f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d735  00000000  00000000  0007e041  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011b776  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006fc8  00000000  00000000  0011b7c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000174 	.word	0x20000174
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009bb8 	.word	0x08009bb8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000178 	.word	0x20000178
 800020c:	08009bb8 	.word	0x08009bb8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b084      	sub	sp, #16
 80005b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005ba:	463b      	mov	r3, r7
 80005bc:	2200      	movs	r2, #0
 80005be:	601a      	str	r2, [r3, #0]
 80005c0:	605a      	str	r2, [r3, #4]
 80005c2:	609a      	str	r2, [r3, #8]
 80005c4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005c6:	4b21      	ldr	r3, [pc, #132]	; (800064c <MX_ADC1_Init+0x98>)
 80005c8:	4a21      	ldr	r2, [pc, #132]	; (8000650 <MX_ADC1_Init+0x9c>)
 80005ca:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005cc:	4b1f      	ldr	r3, [pc, #124]	; (800064c <MX_ADC1_Init+0x98>)
 80005ce:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80005d2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005d4:	4b1d      	ldr	r3, [pc, #116]	; (800064c <MX_ADC1_Init+0x98>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80005da:	4b1c      	ldr	r3, [pc, #112]	; (800064c <MX_ADC1_Init+0x98>)
 80005dc:	2200      	movs	r2, #0
 80005de:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005e0:	4b1a      	ldr	r3, [pc, #104]	; (800064c <MX_ADC1_Init+0x98>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005e6:	4b19      	ldr	r3, [pc, #100]	; (800064c <MX_ADC1_Init+0x98>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005ee:	4b17      	ldr	r3, [pc, #92]	; (800064c <MX_ADC1_Init+0x98>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005f4:	4b15      	ldr	r3, [pc, #84]	; (800064c <MX_ADC1_Init+0x98>)
 80005f6:	4a17      	ldr	r2, [pc, #92]	; (8000654 <MX_ADC1_Init+0xa0>)
 80005f8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005fa:	4b14      	ldr	r3, [pc, #80]	; (800064c <MX_ADC1_Init+0x98>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000600:	4b12      	ldr	r3, [pc, #72]	; (800064c <MX_ADC1_Init+0x98>)
 8000602:	2201      	movs	r2, #1
 8000604:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000606:	4b11      	ldr	r3, [pc, #68]	; (800064c <MX_ADC1_Init+0x98>)
 8000608:	2200      	movs	r2, #0
 800060a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800060e:	4b0f      	ldr	r3, [pc, #60]	; (800064c <MX_ADC1_Init+0x98>)
 8000610:	2201      	movs	r2, #1
 8000612:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000614:	480d      	ldr	r0, [pc, #52]	; (800064c <MX_ADC1_Init+0x98>)
 8000616:	f001 f8e9 	bl	80017ec <HAL_ADC_Init>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000620:	f000 f98c 	bl	800093c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000624:	2300      	movs	r3, #0
 8000626:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000628:	2301      	movs	r3, #1
 800062a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800062c:	2300      	movs	r3, #0
 800062e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000630:	463b      	mov	r3, r7
 8000632:	4619      	mov	r1, r3
 8000634:	4805      	ldr	r0, [pc, #20]	; (800064c <MX_ADC1_Init+0x98>)
 8000636:	f001 fa69 	bl	8001b0c <HAL_ADC_ConfigChannel>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000640:	f000 f97c 	bl	800093c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000644:	bf00      	nop
 8000646:	3710      	adds	r7, #16
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	20000190 	.word	0x20000190
 8000650:	40012000 	.word	0x40012000
 8000654:	0f000001 	.word	0x0f000001

08000658 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b08a      	sub	sp, #40	; 0x28
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000660:	f107 0314 	add.w	r3, r7, #20
 8000664:	2200      	movs	r2, #0
 8000666:	601a      	str	r2, [r3, #0]
 8000668:	605a      	str	r2, [r3, #4]
 800066a:	609a      	str	r2, [r3, #8]
 800066c:	60da      	str	r2, [r3, #12]
 800066e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	4a17      	ldr	r2, [pc, #92]	; (80006d4 <HAL_ADC_MspInit+0x7c>)
 8000676:	4293      	cmp	r3, r2
 8000678:	d127      	bne.n	80006ca <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800067a:	2300      	movs	r3, #0
 800067c:	613b      	str	r3, [r7, #16]
 800067e:	4b16      	ldr	r3, [pc, #88]	; (80006d8 <HAL_ADC_MspInit+0x80>)
 8000680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000682:	4a15      	ldr	r2, [pc, #84]	; (80006d8 <HAL_ADC_MspInit+0x80>)
 8000684:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000688:	6453      	str	r3, [r2, #68]	; 0x44
 800068a:	4b13      	ldr	r3, [pc, #76]	; (80006d8 <HAL_ADC_MspInit+0x80>)
 800068c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800068e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000692:	613b      	str	r3, [r7, #16]
 8000694:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000696:	2300      	movs	r3, #0
 8000698:	60fb      	str	r3, [r7, #12]
 800069a:	4b0f      	ldr	r3, [pc, #60]	; (80006d8 <HAL_ADC_MspInit+0x80>)
 800069c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069e:	4a0e      	ldr	r2, [pc, #56]	; (80006d8 <HAL_ADC_MspInit+0x80>)
 80006a0:	f043 0301 	orr.w	r3, r3, #1
 80006a4:	6313      	str	r3, [r2, #48]	; 0x30
 80006a6:	4b0c      	ldr	r3, [pc, #48]	; (80006d8 <HAL_ADC_MspInit+0x80>)
 80006a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006aa:	f003 0301 	and.w	r3, r3, #1
 80006ae:	60fb      	str	r3, [r7, #12]
 80006b0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006b2:	2301      	movs	r3, #1
 80006b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006b6:	2303      	movs	r3, #3
 80006b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ba:	2300      	movs	r3, #0
 80006bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006be:	f107 0314 	add.w	r3, r7, #20
 80006c2:	4619      	mov	r1, r3
 80006c4:	4805      	ldr	r0, [pc, #20]	; (80006dc <HAL_ADC_MspInit+0x84>)
 80006c6:	f001 fdb3 	bl	8002230 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006ca:	bf00      	nop
 80006cc:	3728      	adds	r7, #40	; 0x28
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	40012000 	.word	0x40012000
 80006d8:	40023800 	.word	0x40023800
 80006dc:	40020000 	.word	0x40020000

080006e0 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b088      	sub	sp, #32
 80006e4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e6:	f107 030c 	add.w	r3, r7, #12
 80006ea:	2200      	movs	r2, #0
 80006ec:	601a      	str	r2, [r3, #0]
 80006ee:	605a      	str	r2, [r3, #4]
 80006f0:	609a      	str	r2, [r3, #8]
 80006f2:	60da      	str	r2, [r3, #12]
 80006f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006f6:	2300      	movs	r3, #0
 80006f8:	60bb      	str	r3, [r7, #8]
 80006fa:	4b4c      	ldr	r3, [pc, #304]	; (800082c <MX_GPIO_Init+0x14c>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fe:	4a4b      	ldr	r2, [pc, #300]	; (800082c <MX_GPIO_Init+0x14c>)
 8000700:	f043 0304 	orr.w	r3, r3, #4
 8000704:	6313      	str	r3, [r2, #48]	; 0x30
 8000706:	4b49      	ldr	r3, [pc, #292]	; (800082c <MX_GPIO_Init+0x14c>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070a:	f003 0304 	and.w	r3, r3, #4
 800070e:	60bb      	str	r3, [r7, #8]
 8000710:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000712:	2300      	movs	r3, #0
 8000714:	607b      	str	r3, [r7, #4]
 8000716:	4b45      	ldr	r3, [pc, #276]	; (800082c <MX_GPIO_Init+0x14c>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	4a44      	ldr	r2, [pc, #272]	; (800082c <MX_GPIO_Init+0x14c>)
 800071c:	f043 0301 	orr.w	r3, r3, #1
 8000720:	6313      	str	r3, [r2, #48]	; 0x30
 8000722:	4b42      	ldr	r3, [pc, #264]	; (800082c <MX_GPIO_Init+0x14c>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	f003 0301 	and.w	r3, r3, #1
 800072a:	607b      	str	r3, [r7, #4]
 800072c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800072e:	2300      	movs	r3, #0
 8000730:	603b      	str	r3, [r7, #0]
 8000732:	4b3e      	ldr	r3, [pc, #248]	; (800082c <MX_GPIO_Init+0x14c>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	4a3d      	ldr	r2, [pc, #244]	; (800082c <MX_GPIO_Init+0x14c>)
 8000738:	f043 0302 	orr.w	r3, r3, #2
 800073c:	6313      	str	r3, [r2, #48]	; 0x30
 800073e:	4b3b      	ldr	r3, [pc, #236]	; (800082c <MX_GPIO_Init+0x14c>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	f003 0302 	and.w	r3, r3, #2
 8000746:	603b      	str	r3, [r7, #0]
 8000748:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_SENSOR_3_Pin|LED_SENSOR_2_Pin, GPIO_PIN_RESET);
 800074a:	2200      	movs	r2, #0
 800074c:	2103      	movs	r1, #3
 800074e:	4838      	ldr	r0, [pc, #224]	; (8000830 <MX_GPIO_Init+0x150>)
 8000750:	f001 fee2 	bl	8002518 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_FREQ_SEND_DATA_GPIO_Port, LED_FREQ_SEND_DATA_Pin, GPIO_PIN_RESET);
 8000754:	2200      	movs	r2, #0
 8000756:	2110      	movs	r1, #16
 8000758:	4836      	ldr	r0, [pc, #216]	; (8000834 <MX_GPIO_Init+0x154>)
 800075a:	f001 fedd 	bl	8002518 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_SENSOR_1_GPIO_Port, LED_SENSOR_1_Pin, GPIO_PIN_RESET);
 800075e:	2200      	movs	r2, #0
 8000760:	2101      	movs	r1, #1
 8000762:	4835      	ldr	r0, [pc, #212]	; (8000838 <MX_GPIO_Init+0x158>)
 8000764:	f001 fed8 	bl	8002518 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_SEND_DATA_Pin;
 8000768:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800076c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800076e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000772:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000774:	2300      	movs	r3, #0
 8000776:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BTN_SEND_DATA_GPIO_Port, &GPIO_InitStruct);
 8000778:	f107 030c 	add.w	r3, r7, #12
 800077c:	4619      	mov	r1, r3
 800077e:	482c      	ldr	r0, [pc, #176]	; (8000830 <MX_GPIO_Init+0x150>)
 8000780:	f001 fd56 	bl	8002230 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LED_SENSOR_3_Pin|LED_SENSOR_2_Pin;
 8000784:	2303      	movs	r3, #3
 8000786:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000788:	2301      	movs	r3, #1
 800078a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078c:	2300      	movs	r3, #0
 800078e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000790:	2300      	movs	r3, #0
 8000792:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000794:	f107 030c 	add.w	r3, r7, #12
 8000798:	4619      	mov	r1, r3
 800079a:	4825      	ldr	r0, [pc, #148]	; (8000830 <MX_GPIO_Init+0x150>)
 800079c:	f001 fd48 	bl	8002230 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = BTN_PLUS_Pin|BTN_MINUS_Pin|BTN_SELECT_Pin;
 80007a0:	f240 2322 	movw	r3, #546	; 0x222
 80007a4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007a6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80007aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80007ac:	2302      	movs	r3, #2
 80007ae:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007b0:	f107 030c 	add.w	r3, r7, #12
 80007b4:	4619      	mov	r1, r3
 80007b6:	481f      	ldr	r0, [pc, #124]	; (8000834 <MX_GPIO_Init+0x154>)
 80007b8:	f001 fd3a 	bl	8002230 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_FREQ_SEND_DATA_Pin;
 80007bc:	2310      	movs	r3, #16
 80007be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c0:	2301      	movs	r3, #1
 80007c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c4:	2300      	movs	r3, #0
 80007c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c8:	2300      	movs	r3, #0
 80007ca:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_FREQ_SEND_DATA_GPIO_Port, &GPIO_InitStruct);
 80007cc:	f107 030c 	add.w	r3, r7, #12
 80007d0:	4619      	mov	r1, r3
 80007d2:	4818      	ldr	r0, [pc, #96]	; (8000834 <MX_GPIO_Init+0x154>)
 80007d4:	f001 fd2c 	bl	8002230 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_SENSOR_1_Pin;
 80007d8:	2301      	movs	r3, #1
 80007da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007dc:	2301      	movs	r3, #1
 80007de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e0:	2300      	movs	r3, #0
 80007e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e4:	2300      	movs	r3, #0
 80007e6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_SENSOR_1_GPIO_Port, &GPIO_InitStruct);
 80007e8:	f107 030c 	add.w	r3, r7, #12
 80007ec:	4619      	mov	r1, r3
 80007ee:	4812      	ldr	r0, [pc, #72]	; (8000838 <MX_GPIO_Init+0x158>)
 80007f0:	f001 fd1e 	bl	8002230 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 80007f4:	2200      	movs	r2, #0
 80007f6:	2105      	movs	r1, #5
 80007f8:	2007      	movs	r0, #7
 80007fa:	f001 fc5d 	bl	80020b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80007fe:	2007      	movs	r0, #7
 8000800:	f001 fc76 	bl	80020f0 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000804:	2200      	movs	r2, #0
 8000806:	2105      	movs	r1, #5
 8000808:	2017      	movs	r0, #23
 800080a:	f001 fc55 	bl	80020b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800080e:	2017      	movs	r0, #23
 8000810:	f001 fc6e 	bl	80020f0 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000814:	2200      	movs	r2, #0
 8000816:	2105      	movs	r1, #5
 8000818:	2028      	movs	r0, #40	; 0x28
 800081a:	f001 fc4d 	bl	80020b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800081e:	2028      	movs	r0, #40	; 0x28
 8000820:	f001 fc66 	bl	80020f0 <HAL_NVIC_EnableIRQ>

}
 8000824:	bf00      	nop
 8000826:	3720      	adds	r7, #32
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	40023800 	.word	0x40023800
 8000830:	40020800 	.word	0x40020800
 8000834:	40020000 	.word	0x40020000
 8000838:	40020400 	.word	0x40020400

0800083c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b094      	sub	sp, #80	; 0x50
 8000840:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000842:	f107 031c 	add.w	r3, r7, #28
 8000846:	2234      	movs	r2, #52	; 0x34
 8000848:	2100      	movs	r1, #0
 800084a:	4618      	mov	r0, r3
 800084c:	f008 f992 	bl	8008b74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000850:	f107 0308 	add.w	r3, r7, #8
 8000854:	2200      	movs	r2, #0
 8000856:	601a      	str	r2, [r3, #0]
 8000858:	605a      	str	r2, [r3, #4]
 800085a:	609a      	str	r2, [r3, #8]
 800085c:	60da      	str	r2, [r3, #12]
 800085e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000860:	2300      	movs	r3, #0
 8000862:	607b      	str	r3, [r7, #4]
 8000864:	4b2a      	ldr	r3, [pc, #168]	; (8000910 <SystemClock_Config+0xd4>)
 8000866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000868:	4a29      	ldr	r2, [pc, #164]	; (8000910 <SystemClock_Config+0xd4>)
 800086a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800086e:	6413      	str	r3, [r2, #64]	; 0x40
 8000870:	4b27      	ldr	r3, [pc, #156]	; (8000910 <SystemClock_Config+0xd4>)
 8000872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000874:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000878:	607b      	str	r3, [r7, #4]
 800087a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800087c:	2300      	movs	r3, #0
 800087e:	603b      	str	r3, [r7, #0]
 8000880:	4b24      	ldr	r3, [pc, #144]	; (8000914 <SystemClock_Config+0xd8>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	4a23      	ldr	r2, [pc, #140]	; (8000914 <SystemClock_Config+0xd8>)
 8000886:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800088a:	6013      	str	r3, [r2, #0]
 800088c:	4b21      	ldr	r3, [pc, #132]	; (8000914 <SystemClock_Config+0xd8>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000894:	603b      	str	r3, [r7, #0]
 8000896:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000898:	230a      	movs	r3, #10
 800089a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800089c:	2301      	movs	r3, #1
 800089e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008a0:	2310      	movs	r3, #16
 80008a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80008a4:	2301      	movs	r3, #1
 80008a6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008a8:	2302      	movs	r3, #2
 80008aa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008ac:	2300      	movs	r3, #0
 80008ae:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80008b0:	2310      	movs	r3, #16
 80008b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80008b4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80008b8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80008ba:	2304      	movs	r3, #4
 80008bc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80008be:	2304      	movs	r3, #4
 80008c0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008c2:	2302      	movs	r3, #2
 80008c4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008c6:	f107 031c 	add.w	r3, r7, #28
 80008ca:	4618      	mov	r0, r3
 80008cc:	f002 f984 	bl	8002bd8 <HAL_RCC_OscConfig>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80008d6:	f000 f831 	bl	800093c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008da:	230f      	movs	r3, #15
 80008dc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008de:	2302      	movs	r3, #2
 80008e0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008e2:	2300      	movs	r3, #0
 80008e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008ec:	2300      	movs	r3, #0
 80008ee:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008f0:	f107 0308 	add.w	r3, r7, #8
 80008f4:	2102      	movs	r1, #2
 80008f6:	4618      	mov	r0, r3
 80008f8:	f001 fe40 	bl	800257c <HAL_RCC_ClockConfig>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000902:	f000 f81b 	bl	800093c <Error_Handler>
  }
}
 8000906:	bf00      	nop
 8000908:	3750      	adds	r7, #80	; 0x50
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	40023800 	.word	0x40023800
 8000914:	40007000 	.word	0x40007000

08000918 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	4a04      	ldr	r2, [pc, #16]	; (8000938 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000926:	4293      	cmp	r3, r2
 8000928:	d101      	bne.n	800092e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800092a:	f000 ff3f 	bl	80017ac <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800092e:	bf00      	nop
 8000930:	3708      	adds	r7, #8
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	40001000 	.word	0x40001000

0800093c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000940:	b672      	cpsid	i
}
 8000942:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000944:	e7fe      	b.n	8000944 <Error_Handler+0x8>
	...

08000948 <Fonction_Thread_Sensor_1>:
	.stack_size=128*4 // Pile de 128 mots de 32 bits
};


// analog read
void Fonction_Thread_Sensor_1(void* P_Info){
 8000948:	b580      	push	{r7, lr}
 800094a:	b08a      	sub	sp, #40	; 0x28
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
	T_DATA Data={.Type=1};
 8000950:	f107 0308 	add.w	r3, r7, #8
 8000954:	221d      	movs	r2, #29
 8000956:	2100      	movs	r1, #0
 8000958:	4618      	mov	r0, r3
 800095a:	f008 f90b 	bl	8008b74 <memset>
 800095e:	2301      	movs	r3, #1
 8000960:	723b      	strb	r3, [r7, #8]
	while(1) {
		HAL_ADC_Start(&hadc1);
 8000962:	481a      	ldr	r0, [pc, #104]	; (80009cc <Fonction_Thread_Sensor_1+0x84>)
 8000964:	f000 ff86 	bl	8001874 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, 1);
 8000968:	2101      	movs	r1, #1
 800096a:	4818      	ldr	r0, [pc, #96]	; (80009cc <Fonction_Thread_Sensor_1+0x84>)
 800096c:	f001 f836 	bl	80019dc <HAL_ADC_PollForConversion>
		uint16_t val_sensor_1 = HAL_ADC_GetValue(&hadc1);
 8000970:	4816      	ldr	r0, [pc, #88]	; (80009cc <Fonction_Thread_Sensor_1+0x84>)
 8000972:	f001 f8be 	bl	8001af2 <HAL_ADC_GetValue>
 8000976:	4603      	mov	r3, r0
 8000978:	84fb      	strh	r3, [r7, #38]	; 0x26
		Data.Value = val_sensor_1;
 800097a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800097c:	f8c7 3021 	str.w	r3, [r7, #33]	; 0x21
		HAL_RTC_GetDate(&hrtc, &Data.Date, RTC_FORMAT_BIN);
 8000980:	f107 0308 	add.w	r3, r7, #8
 8000984:	3301      	adds	r3, #1
 8000986:	2200      	movs	r2, #0
 8000988:	4619      	mov	r1, r3
 800098a:	4811      	ldr	r0, [pc, #68]	; (80009d0 <Fonction_Thread_Sensor_1+0x88>)
 800098c:	f002 fcfc 	bl	8003388 <HAL_RTC_GetDate>
		HAL_RTC_GetTime(&hrtc, &Data.Hour, RTC_FORMAT_BIN);
 8000990:	f107 0308 	add.w	r3, r7, #8
 8000994:	3305      	adds	r3, #5
 8000996:	2200      	movs	r2, #0
 8000998:	4619      	mov	r1, r3
 800099a:	480d      	ldr	r0, [pc, #52]	; (80009d0 <Fonction_Thread_Sensor_1+0x88>)
 800099c:	f002 fc96 	bl	80032cc <HAL_RTC_GetTime>
		osMessageQueuePut(Pipe_Reception_Analyse, (void*)&Data, 0, osWaitForever);
 80009a0:	4b0c      	ldr	r3, [pc, #48]	; (80009d4 <Fonction_Thread_Sensor_1+0x8c>)
 80009a2:	6818      	ldr	r0, [r3, #0]
 80009a4:	f107 0108 	add.w	r1, r7, #8
 80009a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80009ac:	2200      	movs	r2, #0
 80009ae:	f005 f82d 	bl	8005a0c <osMessageQueuePut>
		osThreadFlagsSet(Thread_Watch_Queue, FLAG_WATCH_QUEUE);
 80009b2:	4b09      	ldr	r3, [pc, #36]	; (80009d8 <Fonction_Thread_Sensor_1+0x90>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	2102      	movs	r1, #2
 80009b8:	4618      	mov	r0, r3
 80009ba:	f004 fec9 	bl	8005750 <osThreadFlagsSet>
		osDelay(period_sensor_3);
 80009be:	4b07      	ldr	r3, [pc, #28]	; (80009dc <Fonction_Thread_Sensor_1+0x94>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	4618      	mov	r0, r3
 80009c4:	f004 ff93 	bl	80058ee <osDelay>
	while(1) {
 80009c8:	e7cb      	b.n	8000962 <Fonction_Thread_Sensor_1+0x1a>
 80009ca:	bf00      	nop
 80009cc:	20000190 	.word	0x20000190
 80009d0:	2000022c 	.word	0x2000022c
 80009d4:	2000020c 	.word	0x2000020c
 80009d8:	20000214 	.word	0x20000214
 80009dc:	20000008 	.word	0x20000008

080009e0 <Fonction_Thread_Sensor_2>:
	}
	osThreadTerminate(NULL);
}
// RNG
void Fonction_Thread_Sensor_2(void* P_Info){
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b08a      	sub	sp, #40	; 0x28
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
	T_DATA Data={.Type=2};
 80009e8:	f107 0308 	add.w	r3, r7, #8
 80009ec:	221d      	movs	r2, #29
 80009ee:	2100      	movs	r1, #0
 80009f0:	4618      	mov	r0, r3
 80009f2:	f008 f8bf 	bl	8008b74 <memset>
 80009f6:	2302      	movs	r3, #2
 80009f8:	723b      	strb	r3, [r7, #8]
	while(1){
		HAL_RNG_GenerateRandomNumber(&hrng, &Data.Value);
 80009fa:	f107 0308 	add.w	r3, r7, #8
 80009fe:	3319      	adds	r3, #25
 8000a00:	4619      	mov	r1, r3
 8000a02:	481a      	ldr	r0, [pc, #104]	; (8000a6c <Fonction_Thread_Sensor_2+0x8c>)
 8000a04:	f002 fb96 	bl	8003134 <HAL_RNG_GenerateRandomNumber>
		Data.Value %= 12;
 8000a08:	f8d7 1021 	ldr.w	r1, [r7, #33]	; 0x21
 8000a0c:	4b18      	ldr	r3, [pc, #96]	; (8000a70 <Fonction_Thread_Sensor_2+0x90>)
 8000a0e:	fba3 2301 	umull	r2, r3, r3, r1
 8000a12:	08da      	lsrs	r2, r3, #3
 8000a14:	4613      	mov	r3, r2
 8000a16:	005b      	lsls	r3, r3, #1
 8000a18:	4413      	add	r3, r2
 8000a1a:	009b      	lsls	r3, r3, #2
 8000a1c:	1aca      	subs	r2, r1, r3
 8000a1e:	f8c7 2021 	str.w	r2, [r7, #33]	; 0x21
		HAL_RTC_GetDate(&hrtc, &Data.Date, RTC_FORMAT_BIN);
 8000a22:	f107 0308 	add.w	r3, r7, #8
 8000a26:	3301      	adds	r3, #1
 8000a28:	2200      	movs	r2, #0
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	4811      	ldr	r0, [pc, #68]	; (8000a74 <Fonction_Thread_Sensor_2+0x94>)
 8000a2e:	f002 fcab 	bl	8003388 <HAL_RTC_GetDate>
		HAL_RTC_GetTime(&hrtc, &Data.Hour, RTC_FORMAT_BIN);
 8000a32:	f107 0308 	add.w	r3, r7, #8
 8000a36:	3305      	adds	r3, #5
 8000a38:	2200      	movs	r2, #0
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	480d      	ldr	r0, [pc, #52]	; (8000a74 <Fonction_Thread_Sensor_2+0x94>)
 8000a3e:	f002 fc45 	bl	80032cc <HAL_RTC_GetTime>
		osMessageQueuePut(Pipe_Reception_Analyse, (void*)&Data, 0, osWaitForever);
 8000a42:	4b0d      	ldr	r3, [pc, #52]	; (8000a78 <Fonction_Thread_Sensor_2+0x98>)
 8000a44:	6818      	ldr	r0, [r3, #0]
 8000a46:	f107 0108 	add.w	r1, r7, #8
 8000a4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a4e:	2200      	movs	r2, #0
 8000a50:	f004 ffdc 	bl	8005a0c <osMessageQueuePut>
		osThreadFlagsSet(Thread_Watch_Queue, FLAG_WATCH_QUEUE);
 8000a54:	4b09      	ldr	r3, [pc, #36]	; (8000a7c <Fonction_Thread_Sensor_2+0x9c>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	2102      	movs	r1, #2
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f004 fe78 	bl	8005750 <osThreadFlagsSet>
		osDelay(period_sensor_1);
 8000a60:	4b07      	ldr	r3, [pc, #28]	; (8000a80 <Fonction_Thread_Sensor_2+0xa0>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4618      	mov	r0, r3
 8000a66:	f004 ff42 	bl	80058ee <osDelay>
		HAL_RNG_GenerateRandomNumber(&hrng, &Data.Value);
 8000a6a:	e7c6      	b.n	80009fa <Fonction_Thread_Sensor_2+0x1a>
 8000a6c:	2000021c 	.word	0x2000021c
 8000a70:	aaaaaaab 	.word	0xaaaaaaab
 8000a74:	2000022c 	.word	0x2000022c
 8000a78:	2000020c 	.word	0x2000020c
 8000a7c:	20000214 	.word	0x20000214
 8000a80:	20000000 	.word	0x20000000

08000a84 <Fonction_Thread_Sensor_3>:
	}
	osThreadTerminate(NULL);
}
// RNG
void Fonction_Thread_Sensor_3(void* P_Info){
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b08a      	sub	sp, #40	; 0x28
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
	T_DATA Data={.Type=3};
 8000a8c:	f107 0308 	add.w	r3, r7, #8
 8000a90:	221d      	movs	r2, #29
 8000a92:	2100      	movs	r1, #0
 8000a94:	4618      	mov	r0, r3
 8000a96:	f008 f86d 	bl	8008b74 <memset>
 8000a9a:	2303      	movs	r3, #3
 8000a9c:	723b      	strb	r3, [r7, #8]
	while(1){
		HAL_RNG_GenerateRandomNumber(&hrng, &Data.Value);
 8000a9e:	f107 0308 	add.w	r3, r7, #8
 8000aa2:	3319      	adds	r3, #25
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	481a      	ldr	r0, [pc, #104]	; (8000b10 <Fonction_Thread_Sensor_3+0x8c>)
 8000aa8:	f002 fb44 	bl	8003134 <HAL_RNG_GenerateRandomNumber>
		Data.Value %= 500;
 8000aac:	f8d7 2021 	ldr.w	r2, [r7, #33]	; 0x21
 8000ab0:	4b18      	ldr	r3, [pc, #96]	; (8000b14 <Fonction_Thread_Sensor_3+0x90>)
 8000ab2:	fba3 1302 	umull	r1, r3, r3, r2
 8000ab6:	095b      	lsrs	r3, r3, #5
 8000ab8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000abc:	fb01 f303 	mul.w	r3, r1, r3
 8000ac0:	1ad3      	subs	r3, r2, r3
 8000ac2:	f8c7 3021 	str.w	r3, [r7, #33]	; 0x21
		HAL_RTC_GetDate(&hrtc, &Data.Date, RTC_FORMAT_BIN);
 8000ac6:	f107 0308 	add.w	r3, r7, #8
 8000aca:	3301      	adds	r3, #1
 8000acc:	2200      	movs	r2, #0
 8000ace:	4619      	mov	r1, r3
 8000ad0:	4811      	ldr	r0, [pc, #68]	; (8000b18 <Fonction_Thread_Sensor_3+0x94>)
 8000ad2:	f002 fc59 	bl	8003388 <HAL_RTC_GetDate>
		HAL_RTC_GetTime(&hrtc, &Data.Hour, RTC_FORMAT_BIN);
 8000ad6:	f107 0308 	add.w	r3, r7, #8
 8000ada:	3305      	adds	r3, #5
 8000adc:	2200      	movs	r2, #0
 8000ade:	4619      	mov	r1, r3
 8000ae0:	480d      	ldr	r0, [pc, #52]	; (8000b18 <Fonction_Thread_Sensor_3+0x94>)
 8000ae2:	f002 fbf3 	bl	80032cc <HAL_RTC_GetTime>
		osMessageQueuePut(Pipe_Reception_Analyse, (void*)&Data, 0, osWaitForever);
 8000ae6:	4b0d      	ldr	r3, [pc, #52]	; (8000b1c <Fonction_Thread_Sensor_3+0x98>)
 8000ae8:	6818      	ldr	r0, [r3, #0]
 8000aea:	f107 0108 	add.w	r1, r7, #8
 8000aee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000af2:	2200      	movs	r2, #0
 8000af4:	f004 ff8a 	bl	8005a0c <osMessageQueuePut>
		osThreadFlagsSet(Thread_Watch_Queue, FLAG_WATCH_QUEUE);
 8000af8:	4b09      	ldr	r3, [pc, #36]	; (8000b20 <Fonction_Thread_Sensor_3+0x9c>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	2102      	movs	r1, #2
 8000afe:	4618      	mov	r0, r3
 8000b00:	f004 fe26 	bl	8005750 <osThreadFlagsSet>
		osDelay(period_sensor_2);
 8000b04:	4b07      	ldr	r3, [pc, #28]	; (8000b24 <Fonction_Thread_Sensor_3+0xa0>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f004 fef0 	bl	80058ee <osDelay>
		HAL_RNG_GenerateRandomNumber(&hrng, &Data.Value);
 8000b0e:	e7c6      	b.n	8000a9e <Fonction_Thread_Sensor_3+0x1a>
 8000b10:	2000021c 	.word	0x2000021c
 8000b14:	10624dd3 	.word	0x10624dd3
 8000b18:	2000022c 	.word	0x2000022c
 8000b1c:	2000020c 	.word	0x2000020c
 8000b20:	20000214 	.word	0x20000214
 8000b24:	20000004 	.word	0x20000004

08000b28 <Fonction_Thread_Send>:
	}
	osThreadTerminate(NULL);
}

void Fonction_Thread_Send(void* P_Info){
 8000b28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b2a:	b093      	sub	sp, #76	; 0x4c
 8000b2c:	af06      	add	r7, sp, #24
 8000b2e:	6078      	str	r0, [r7, #4]
	T_DATA Data;
	// char* json_message = "{1:0000000000,2:0,3:0000}";
	while(1){
		osThreadFlagsWait(FLAG_SEND_DATA, osFlagsWaitAll, period_send_data);
 8000b30:	4b1f      	ldr	r3, [pc, #124]	; (8000bb0 <Fonction_Thread_Send+0x88>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	461a      	mov	r2, r3
 8000b36:	2101      	movs	r1, #1
 8000b38:	2001      	movs	r0, #1
 8000b3a:	f004 fe57 	bl	80057ec <osThreadFlagsWait>
		int i = osMessageQueueGetCount(Pipe_Reception_Analyse);
 8000b3e:	4b1d      	ldr	r3, [pc, #116]	; (8000bb4 <Fonction_Thread_Send+0x8c>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	4618      	mov	r0, r3
 8000b44:	f005 f820 	bl	8005b88 <osMessageQueueGetCount>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	62fb      	str	r3, [r7, #44]	; 0x2c
		while(i--){
 8000b4c:	e023      	b.n	8000b96 <Fonction_Thread_Send+0x6e>
			osMessageQueueGet(Pipe_Reception_Analyse, &Data, NULL, osWaitForever);
 8000b4e:	4b19      	ldr	r3, [pc, #100]	; (8000bb4 <Fonction_Thread_Send+0x8c>)
 8000b50:	6818      	ldr	r0, [r3, #0]
 8000b52:	f107 010c 	add.w	r1, r7, #12
 8000b56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	f004 ffb6 	bl	8005acc <osMessageQueueGet>
			// memcpy(json_message + sizeof(char) * INDEX_TIME, itoa(Data.Timestamp), sizeof(Data.Timestamp));
			// memcpy(json_message, buffer, sizeof(Data.Value));
			// memcpy(json_message + sizeof(char) * INDEX_TYPE, itoa(Data.Type), sizeof(Data.Type));
			// send via UART*/

			printf("{1:%d/%d/%d-%d:%d:%d,2:%d,3:%d}", Data.Date.Date, Data.Date.Month, Data.Date.Year, Data.Hour.Hours, Data.Hour.Minutes, Data.Hour.Seconds, Data.Type, Data.Value);
 8000b60:	7bfb      	ldrb	r3, [r7, #15]
 8000b62:	461d      	mov	r5, r3
 8000b64:	7bbb      	ldrb	r3, [r7, #14]
 8000b66:	461e      	mov	r6, r3
 8000b68:	7c3b      	ldrb	r3, [r7, #16]
 8000b6a:	469c      	mov	ip, r3
 8000b6c:	7c7b      	ldrb	r3, [r7, #17]
 8000b6e:	461a      	mov	r2, r3
 8000b70:	7cbb      	ldrb	r3, [r7, #18]
 8000b72:	4619      	mov	r1, r3
 8000b74:	7cfb      	ldrb	r3, [r7, #19]
 8000b76:	4618      	mov	r0, r3
 8000b78:	7b3b      	ldrb	r3, [r7, #12]
 8000b7a:	461c      	mov	r4, r3
 8000b7c:	f8d7 3025 	ldr.w	r3, [r7, #37]	; 0x25
 8000b80:	9304      	str	r3, [sp, #16]
 8000b82:	9403      	str	r4, [sp, #12]
 8000b84:	9002      	str	r0, [sp, #8]
 8000b86:	9101      	str	r1, [sp, #4]
 8000b88:	9200      	str	r2, [sp, #0]
 8000b8a:	4663      	mov	r3, ip
 8000b8c:	4632      	mov	r2, r6
 8000b8e:	4629      	mov	r1, r5
 8000b90:	4809      	ldr	r0, [pc, #36]	; (8000bb8 <Fonction_Thread_Send+0x90>)
 8000b92:	f007 fff7 	bl	8008b84 <iprintf>
		while(i--){
 8000b96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b98:	1e5a      	subs	r2, r3, #1
 8000b9a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d1d6      	bne.n	8000b4e <Fonction_Thread_Send+0x26>
		}
		osThreadFlagsSet(Thread_Buzzer, FLAG_BUZZER);
 8000ba0:	4b06      	ldr	r3, [pc, #24]	; (8000bbc <Fonction_Thread_Send+0x94>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	2103      	movs	r1, #3
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f004 fdd2 	bl	8005750 <osThreadFlagsSet>
	while(1){
 8000bac:	e7c0      	b.n	8000b30 <Fonction_Thread_Send+0x8>
 8000bae:	bf00      	nop
 8000bb0:	2000000c 	.word	0x2000000c
 8000bb4:	2000020c 	.word	0x2000020c
 8000bb8:	08009c38 	.word	0x08009c38
 8000bbc:	20000218 	.word	0x20000218

08000bc0 <Fonction_Thread_Watch_Queue>:
	}
	osThreadTerminate(NULL);
}

void Fonction_Thread_Watch_Queue(void* P_Info){
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
	while (1){
		osThreadFlagsWait(FLAG_WATCH_QUEUE, osFlagsWaitAll, HAL_MAX_DELAY);
 8000bc8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000bcc:	2101      	movs	r1, #1
 8000bce:	2002      	movs	r0, #2
 8000bd0:	f004 fe0c 	bl	80057ec <osThreadFlagsWait>
		if (osMessageQueueGetSpace(Pipe_Reception_Analyse) == 0){
 8000bd4:	4b07      	ldr	r3, [pc, #28]	; (8000bf4 <Fonction_Thread_Watch_Queue+0x34>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f004 fff5 	bl	8005bc8 <osMessageQueueGetSpace>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d1f1      	bne.n	8000bc8 <Fonction_Thread_Watch_Queue+0x8>
			osThreadFlagsSet(Thread_Send_Data, FLAG_SEND_DATA);
 8000be4:	4b04      	ldr	r3, [pc, #16]	; (8000bf8 <Fonction_Thread_Watch_Queue+0x38>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	2101      	movs	r1, #1
 8000bea:	4618      	mov	r0, r3
 8000bec:	f004 fdb0 	bl	8005750 <osThreadFlagsSet>
		osThreadFlagsWait(FLAG_WATCH_QUEUE, osFlagsWaitAll, HAL_MAX_DELAY);
 8000bf0:	e7ea      	b.n	8000bc8 <Fonction_Thread_Watch_Queue+0x8>
 8000bf2:	bf00      	nop
 8000bf4:	2000020c 	.word	0x2000020c
 8000bf8:	20000210 	.word	0x20000210

08000bfc <Fonction_Thread_Buzzer>:
		}
	}
}

// RNG
void Fonction_Thread_Buzzer(void* P_Info){
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b082      	sub	sp, #8
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
	while (1){
		osThreadFlagsWait(FLAG_BUZZER, osFlagsWaitAll, HAL_MAX_DELAY);
 8000c04:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000c08:	2101      	movs	r1, #1
 8000c0a:	2003      	movs	r0, #3
 8000c0c:	f004 fdee 	bl	80057ec <osThreadFlagsWait>
		TIM1->CCR1 = 10;
 8000c10:	4b07      	ldr	r3, [pc, #28]	; (8000c30 <Fonction_Thread_Buzzer+0x34>)
 8000c12:	220a      	movs	r2, #10
 8000c14:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000c16:	2100      	movs	r1, #0
 8000c18:	4806      	ldr	r0, [pc, #24]	; (8000c34 <Fonction_Thread_Buzzer+0x38>)
 8000c1a:	f002 fd9b 	bl	8003754 <HAL_TIM_PWM_Start>
		osDelay(200);
 8000c1e:	20c8      	movs	r0, #200	; 0xc8
 8000c20:	f004 fe65 	bl	80058ee <osDelay>
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8000c24:	2100      	movs	r1, #0
 8000c26:	4803      	ldr	r0, [pc, #12]	; (8000c34 <Fonction_Thread_Buzzer+0x38>)
 8000c28:	f002 fe32 	bl	8003890 <HAL_TIM_PWM_Stop>
		osThreadFlagsWait(FLAG_BUZZER, osFlagsWaitAll, HAL_MAX_DELAY);
 8000c2c:	e7ea      	b.n	8000c04 <Fonction_Thread_Buzzer+0x8>
 8000c2e:	bf00      	nop
 8000c30:	40010000 	.word	0x40010000
 8000c34:	20000298 	.word	0x20000298

08000c38 <HAL_UART_RxCpltCallback>:
	}
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b086      	sub	sp, #24
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
 8000c40:	4b21      	ldr	r3, [pc, #132]	; (8000cc8 <HAL_UART_RxCpltCallback+0x90>)
 8000c42:	f8d3 3003 	ldr.w	r3, [r3, #3]
	char subbuff_5[5];
	char subbuff_6[6];
	memcpy(subbuff_5, &receive_buffer[3], 4);
 8000c46:	613b      	str	r3, [r7, #16]
	subbuff_5[4] = '\0';
 8000c48:	2300      	movs	r3, #0
 8000c4a:	753b      	strb	r3, [r7, #20]
	period_sensor_1 = atoi(subbuff_5);
 8000c4c:	f107 0310 	add.w	r3, r7, #16
 8000c50:	4618      	mov	r0, r3
 8000c52:	f007 ff53 	bl	8008afc <atoi>
 8000c56:	4603      	mov	r3, r0
 8000c58:	4a1c      	ldr	r2, [pc, #112]	; (8000ccc <HAL_UART_RxCpltCallback+0x94>)
 8000c5a:	6013      	str	r3, [r2, #0]
 8000c5c:	4b1a      	ldr	r3, [pc, #104]	; (8000cc8 <HAL_UART_RxCpltCallback+0x90>)
 8000c5e:	f8d3 300a 	ldr.w	r3, [r3, #10]
	memcpy(subbuff_5, &receive_buffer[10], 4);
 8000c62:	613b      	str	r3, [r7, #16]
	subbuff_5[4] = '\0';
 8000c64:	2300      	movs	r3, #0
 8000c66:	753b      	strb	r3, [r7, #20]
	period_sensor_2 = atoi(subbuff_5);
 8000c68:	f107 0310 	add.w	r3, r7, #16
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f007 ff45 	bl	8008afc <atoi>
 8000c72:	4603      	mov	r3, r0
 8000c74:	4a16      	ldr	r2, [pc, #88]	; (8000cd0 <HAL_UART_RxCpltCallback+0x98>)
 8000c76:	6013      	str	r3, [r2, #0]
 8000c78:	4b13      	ldr	r3, [pc, #76]	; (8000cc8 <HAL_UART_RxCpltCallback+0x90>)
 8000c7a:	f8d3 3011 	ldr.w	r3, [r3, #17]
	memcpy(subbuff_5, &receive_buffer[17], 4);
 8000c7e:	613b      	str	r3, [r7, #16]
	subbuff_5[4] = '\0';
 8000c80:	2300      	movs	r3, #0
 8000c82:	753b      	strb	r3, [r7, #20]
	period_sensor_3 = atoi(subbuff_5);
 8000c84:	f107 0310 	add.w	r3, r7, #16
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f007 ff37 	bl	8008afc <atoi>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	4a10      	ldr	r2, [pc, #64]	; (8000cd4 <HAL_UART_RxCpltCallback+0x9c>)
 8000c92:	6013      	str	r3, [r2, #0]
	memcpy(subbuff_6, &receive_buffer[24], 5);
 8000c94:	f107 0308 	add.w	r3, r7, #8
 8000c98:	2205      	movs	r2, #5
 8000c9a:	490f      	ldr	r1, [pc, #60]	; (8000cd8 <HAL_UART_RxCpltCallback+0xa0>)
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f007 ff5b 	bl	8008b58 <memcpy>
	subbuff_6[5] = '\0';
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	737b      	strb	r3, [r7, #13]
	period_send_data = atoi(subbuff_6);
 8000ca6:	f107 0308 	add.w	r3, r7, #8
 8000caa:	4618      	mov	r0, r3
 8000cac:	f007 ff26 	bl	8008afc <atoi>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	4a0a      	ldr	r2, [pc, #40]	; (8000cdc <HAL_UART_RxCpltCallback+0xa4>)
 8000cb4:	6013      	str	r3, [r2, #0]
	HAL_UART_Receive_IT(&huart2, (void*)&receive_buffer, MESSAGE_RECEIVE_SIZE);
 8000cb6:	221e      	movs	r2, #30
 8000cb8:	4903      	ldr	r1, [pc, #12]	; (8000cc8 <HAL_UART_RxCpltCallback+0x90>)
 8000cba:	4809      	ldr	r0, [pc, #36]	; (8000ce0 <HAL_UART_RxCpltCallback+0xa8>)
 8000cbc:	f003 fc8f 	bl	80045de <HAL_UART_Receive_IT>
}
 8000cc0:	bf00      	nop
 8000cc2:	3718      	adds	r7, #24
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	200001d8 	.word	0x200001d8
 8000ccc:	20000000 	.word	0x20000000
 8000cd0:	20000004 	.word	0x20000004
 8000cd4:	20000008 	.word	0x20000008
 8000cd8:	200001f0 	.word	0x200001f0
 8000cdc:	2000000c 	.word	0x2000000c
 8000ce0:	200002e0 	.word	0x200002e0

08000ce4 <handler_btn_select>:

void handler_btn_select(){
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
	// Testing purpose
	// printf("Bouton select, state config : %d\n\r", mess, state_config);*/
	if(state_config != 0){
 8000ce8:	4b22      	ldr	r3, [pc, #136]	; (8000d74 <handler_btn_select+0x90>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d016      	beq.n	8000d1e <handler_btn_select+0x3a>
		PORT[state_config-1]->ODR &= ~PIN[state_config-1];
 8000cf0:	4b20      	ldr	r3, [pc, #128]	; (8000d74 <handler_btn_select+0x90>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	3b01      	subs	r3, #1
 8000cf6:	4a20      	ldr	r2, [pc, #128]	; (8000d78 <handler_btn_select+0x94>)
 8000cf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cfc:	695a      	ldr	r2, [r3, #20]
 8000cfe:	4b1d      	ldr	r3, [pc, #116]	; (8000d74 <handler_btn_select+0x90>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	3b01      	subs	r3, #1
 8000d04:	491d      	ldr	r1, [pc, #116]	; (8000d7c <handler_btn_select+0x98>)
 8000d06:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000d0a:	43db      	mvns	r3, r3
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	4b19      	ldr	r3, [pc, #100]	; (8000d74 <handler_btn_select+0x90>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	3b01      	subs	r3, #1
 8000d14:	4918      	ldr	r1, [pc, #96]	; (8000d78 <handler_btn_select+0x94>)
 8000d16:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000d1a:	4002      	ands	r2, r0
 8000d1c:	615a      	str	r2, [r3, #20]
	}
	state_config++;
 8000d1e:	4b15      	ldr	r3, [pc, #84]	; (8000d74 <handler_btn_select+0x90>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	3301      	adds	r3, #1
 8000d24:	4a13      	ldr	r2, [pc, #76]	; (8000d74 <handler_btn_select+0x90>)
 8000d26:	6013      	str	r3, [r2, #0]
	if(state_config > 4){
 8000d28:	4b12      	ldr	r3, [pc, #72]	; (8000d74 <handler_btn_select+0x90>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	2b04      	cmp	r3, #4
 8000d2e:	dd02      	ble.n	8000d36 <handler_btn_select+0x52>
		state_config = 0;
 8000d30:	4b10      	ldr	r3, [pc, #64]	; (8000d74 <handler_btn_select+0x90>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	601a      	str	r2, [r3, #0]
	}
	if(state_config != 0){
 8000d36:	4b0f      	ldr	r3, [pc, #60]	; (8000d74 <handler_btn_select+0x90>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d015      	beq.n	8000d6a <handler_btn_select+0x86>
		PORT[state_config-1]->ODR |= PIN[state_config-1];
 8000d3e:	4b0d      	ldr	r3, [pc, #52]	; (8000d74 <handler_btn_select+0x90>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	3b01      	subs	r3, #1
 8000d44:	4a0c      	ldr	r2, [pc, #48]	; (8000d78 <handler_btn_select+0x94>)
 8000d46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d4a:	695a      	ldr	r2, [r3, #20]
 8000d4c:	4b09      	ldr	r3, [pc, #36]	; (8000d74 <handler_btn_select+0x90>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	3b01      	subs	r3, #1
 8000d52:	490a      	ldr	r1, [pc, #40]	; (8000d7c <handler_btn_select+0x98>)
 8000d54:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000d58:	4618      	mov	r0, r3
 8000d5a:	4b06      	ldr	r3, [pc, #24]	; (8000d74 <handler_btn_select+0x90>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	3b01      	subs	r3, #1
 8000d60:	4905      	ldr	r1, [pc, #20]	; (8000d78 <handler_btn_select+0x94>)
 8000d62:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000d66:	4302      	orrs	r2, r0
 8000d68:	615a      	str	r2, [r3, #20]
	}
}
 8000d6a:	bf00      	nop
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d72:	4770      	bx	lr
 8000d74:	200001f8 	.word	0x200001f8
 8000d78:	20000010 	.word	0x20000010
 8000d7c:	20000020 	.word	0x20000020

08000d80 <handler_btn_plus>:

void handler_btn_plus(){
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
	// Testing purpose
	// printf("Bonton plus, state config : %d, période : %d\n\r", state_config, *(PERIOD[state_config-1]));
	if (state_config != 4 && *(PERIOD[state_config-1]) < 2000) *(PERIOD[state_config-1]) += 100;
 8000d84:	4b20      	ldr	r3, [pc, #128]	; (8000e08 <handler_btn_plus+0x88>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	2b04      	cmp	r3, #4
 8000d8a:	d019      	beq.n	8000dc0 <handler_btn_plus+0x40>
 8000d8c:	4b1e      	ldr	r3, [pc, #120]	; (8000e08 <handler_btn_plus+0x88>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	3b01      	subs	r3, #1
 8000d92:	4a1e      	ldr	r2, [pc, #120]	; (8000e0c <handler_btn_plus+0x8c>)
 8000d94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000d9e:	da0f      	bge.n	8000dc0 <handler_btn_plus+0x40>
 8000da0:	4b19      	ldr	r3, [pc, #100]	; (8000e08 <handler_btn_plus+0x88>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	3b01      	subs	r3, #1
 8000da6:	4a19      	ldr	r2, [pc, #100]	; (8000e0c <handler_btn_plus+0x8c>)
 8000da8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dac:	681a      	ldr	r2, [r3, #0]
 8000dae:	4b16      	ldr	r3, [pc, #88]	; (8000e08 <handler_btn_plus+0x88>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	3b01      	subs	r3, #1
 8000db4:	4915      	ldr	r1, [pc, #84]	; (8000e0c <handler_btn_plus+0x8c>)
 8000db6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000dba:	3264      	adds	r2, #100	; 0x64
 8000dbc:	601a      	str	r2, [r3, #0]
	else if (state_config == 4 && *(PERIOD[state_config-1]) < 10000) *(PERIOD[state_config-1]) += 1000;
}
 8000dbe:	e01e      	b.n	8000dfe <handler_btn_plus+0x7e>
	else if (state_config == 4 && *(PERIOD[state_config-1]) < 10000) *(PERIOD[state_config-1]) += 1000;
 8000dc0:	4b11      	ldr	r3, [pc, #68]	; (8000e08 <handler_btn_plus+0x88>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	2b04      	cmp	r3, #4
 8000dc6:	d11a      	bne.n	8000dfe <handler_btn_plus+0x7e>
 8000dc8:	4b0f      	ldr	r3, [pc, #60]	; (8000e08 <handler_btn_plus+0x88>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	3b01      	subs	r3, #1
 8000dce:	4a0f      	ldr	r2, [pc, #60]	; (8000e0c <handler_btn_plus+0x8c>)
 8000dd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	f242 720f 	movw	r2, #9999	; 0x270f
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	dc0f      	bgt.n	8000dfe <handler_btn_plus+0x7e>
 8000dde:	4b0a      	ldr	r3, [pc, #40]	; (8000e08 <handler_btn_plus+0x88>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	3b01      	subs	r3, #1
 8000de4:	4a09      	ldr	r2, [pc, #36]	; (8000e0c <handler_btn_plus+0x8c>)
 8000de6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dea:	681a      	ldr	r2, [r3, #0]
 8000dec:	4b06      	ldr	r3, [pc, #24]	; (8000e08 <handler_btn_plus+0x88>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	3b01      	subs	r3, #1
 8000df2:	4906      	ldr	r1, [pc, #24]	; (8000e0c <handler_btn_plus+0x8c>)
 8000df4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000df8:	f502 727a 	add.w	r2, r2, #1000	; 0x3e8
 8000dfc:	601a      	str	r2, [r3, #0]
}
 8000dfe:	bf00      	nop
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr
 8000e08:	200001f8 	.word	0x200001f8
 8000e0c:	200001fc 	.word	0x200001fc

08000e10 <handler_btn_minus>:

void handler_btn_minus(){
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
	// Testing purpose
	// printf("Bonton minus, state config : %d, période : %d\n\r", state_config, *(PERIOD[state_config-1]));
	if (state_config != 4 && *(PERIOD[state_config-1]) > 100) *(PERIOD[state_config-1]) -= 100;
 8000e14:	4b1f      	ldr	r3, [pc, #124]	; (8000e94 <handler_btn_minus+0x84>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	2b04      	cmp	r3, #4
 8000e1a:	d018      	beq.n	8000e4e <handler_btn_minus+0x3e>
 8000e1c:	4b1d      	ldr	r3, [pc, #116]	; (8000e94 <handler_btn_minus+0x84>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	3b01      	subs	r3, #1
 8000e22:	4a1d      	ldr	r2, [pc, #116]	; (8000e98 <handler_btn_minus+0x88>)
 8000e24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	2b64      	cmp	r3, #100	; 0x64
 8000e2c:	dd0f      	ble.n	8000e4e <handler_btn_minus+0x3e>
 8000e2e:	4b19      	ldr	r3, [pc, #100]	; (8000e94 <handler_btn_minus+0x84>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	3b01      	subs	r3, #1
 8000e34:	4a18      	ldr	r2, [pc, #96]	; (8000e98 <handler_btn_minus+0x88>)
 8000e36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e3a:	681a      	ldr	r2, [r3, #0]
 8000e3c:	4b15      	ldr	r3, [pc, #84]	; (8000e94 <handler_btn_minus+0x84>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	3b01      	subs	r3, #1
 8000e42:	4915      	ldr	r1, [pc, #84]	; (8000e98 <handler_btn_minus+0x88>)
 8000e44:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000e48:	3a64      	subs	r2, #100	; 0x64
 8000e4a:	601a      	str	r2, [r3, #0]
	else if (state_config == 4 && *(PERIOD[state_config-1]) > 1000) *(PERIOD[state_config-1]) -= 1000;
}
 8000e4c:	e01d      	b.n	8000e8a <handler_btn_minus+0x7a>
	else if (state_config == 4 && *(PERIOD[state_config-1]) > 1000) *(PERIOD[state_config-1]) -= 1000;
 8000e4e:	4b11      	ldr	r3, [pc, #68]	; (8000e94 <handler_btn_minus+0x84>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	2b04      	cmp	r3, #4
 8000e54:	d119      	bne.n	8000e8a <handler_btn_minus+0x7a>
 8000e56:	4b0f      	ldr	r3, [pc, #60]	; (8000e94 <handler_btn_minus+0x84>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	3b01      	subs	r3, #1
 8000e5c:	4a0e      	ldr	r2, [pc, #56]	; (8000e98 <handler_btn_minus+0x88>)
 8000e5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000e68:	dd0f      	ble.n	8000e8a <handler_btn_minus+0x7a>
 8000e6a:	4b0a      	ldr	r3, [pc, #40]	; (8000e94 <handler_btn_minus+0x84>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	3b01      	subs	r3, #1
 8000e70:	4a09      	ldr	r2, [pc, #36]	; (8000e98 <handler_btn_minus+0x88>)
 8000e72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e76:	681a      	ldr	r2, [r3, #0]
 8000e78:	4b06      	ldr	r3, [pc, #24]	; (8000e94 <handler_btn_minus+0x84>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	3b01      	subs	r3, #1
 8000e7e:	4906      	ldr	r1, [pc, #24]	; (8000e98 <handler_btn_minus+0x88>)
 8000e80:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000e84:	f5a2 727a 	sub.w	r2, r2, #1000	; 0x3e8
 8000e88:	601a      	str	r2, [r3, #0]
}
 8000e8a:	bf00      	nop
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr
 8000e94:	200001f8 	.word	0x200001f8
 8000e98:	200001fc 	.word	0x200001fc

08000e9c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t P_Pin){
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	80fb      	strh	r3, [r7, #6]
	if (P_Pin == BTN_SEND_DATA_Pin){
 8000ea6:	88fb      	ldrh	r3, [r7, #6]
 8000ea8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000eac:	d106      	bne.n	8000ebc <HAL_GPIO_EXTI_Callback+0x20>
		osThreadFlagsSet(Thread_Send_Data, FLAG_SEND_DATA);
 8000eae:	4b12      	ldr	r3, [pc, #72]	; (8000ef8 <HAL_GPIO_EXTI_Callback+0x5c>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	2101      	movs	r1, #1
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f004 fc4b 	bl	8005750 <osThreadFlagsSet>
		handler_btn_plus();
	}
	else if (P_Pin == BTN_MINUS_Pin && state_config != 0){
		handler_btn_minus();
	}
}
 8000eba:	e019      	b.n	8000ef0 <HAL_GPIO_EXTI_Callback+0x54>
	else if (P_Pin == BTN_SELECT_Pin){
 8000ebc:	88fb      	ldrh	r3, [r7, #6]
 8000ebe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000ec2:	d102      	bne.n	8000eca <HAL_GPIO_EXTI_Callback+0x2e>
		handler_btn_select();
 8000ec4:	f7ff ff0e 	bl	8000ce4 <handler_btn_select>
}
 8000ec8:	e012      	b.n	8000ef0 <HAL_GPIO_EXTI_Callback+0x54>
	else if (P_Pin == BTN_PLUS_Pin && state_config != 0){
 8000eca:	88fb      	ldrh	r3, [r7, #6]
 8000ecc:	2b02      	cmp	r3, #2
 8000ece:	d106      	bne.n	8000ede <HAL_GPIO_EXTI_Callback+0x42>
 8000ed0:	4b0a      	ldr	r3, [pc, #40]	; (8000efc <HAL_GPIO_EXTI_Callback+0x60>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d002      	beq.n	8000ede <HAL_GPIO_EXTI_Callback+0x42>
		handler_btn_plus();
 8000ed8:	f7ff ff52 	bl	8000d80 <handler_btn_plus>
}
 8000edc:	e008      	b.n	8000ef0 <HAL_GPIO_EXTI_Callback+0x54>
	else if (P_Pin == BTN_MINUS_Pin && state_config != 0){
 8000ede:	88fb      	ldrh	r3, [r7, #6]
 8000ee0:	2b20      	cmp	r3, #32
 8000ee2:	d105      	bne.n	8000ef0 <HAL_GPIO_EXTI_Callback+0x54>
 8000ee4:	4b05      	ldr	r3, [pc, #20]	; (8000efc <HAL_GPIO_EXTI_Callback+0x60>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d001      	beq.n	8000ef0 <HAL_GPIO_EXTI_Callback+0x54>
		handler_btn_minus();
 8000eec:	f7ff ff90 	bl	8000e10 <handler_btn_minus>
}
 8000ef0:	bf00      	nop
 8000ef2:	3708      	adds	r7, #8
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	20000210 	.word	0x20000210
 8000efc:	200001f8 	.word	0x200001f8

08000f00 <_write>:

int _write(int P_Flux, char* P_Message, int P_Taille) {
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b086      	sub	sp, #24
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	60f8      	str	r0, [r7, #12]
 8000f08:	60b9      	str	r1, [r7, #8]
 8000f0a:	607a      	str	r2, [r7, #4]
	HAL_StatusTypeDef Etat = HAL_UART_Transmit(&huart2, (uint8_t *) P_Message, P_Taille, HAL_MAX_DELAY);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	b29a      	uxth	r2, r3
 8000f10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f14:	68b9      	ldr	r1, [r7, #8]
 8000f16:	4808      	ldr	r0, [pc, #32]	; (8000f38 <_write+0x38>)
 8000f18:	f003 fa2d 	bl	8004376 <HAL_UART_Transmit>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	75fb      	strb	r3, [r7, #23]
	if (Etat == HAL_OK) return P_Taille;
 8000f20:	7dfb      	ldrb	r3, [r7, #23]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d101      	bne.n	8000f2a <_write+0x2a>
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	e001      	b.n	8000f2e <_write+0x2e>
	else return -1;
 8000f2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	3718      	adds	r7, #24
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	200002e0 	.word	0x200002e0

08000f3c <_read>:
//---------------------------
int _read(int P_Flux, char* P_Message, int P_Taille) {
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b086      	sub	sp, #24
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	60f8      	str	r0, [r7, #12]
 8000f44:	60b9      	str	r1, [r7, #8]
 8000f46:	607a      	str	r2, [r7, #4]
	HAL_StatusTypeDef Etat=HAL_UART_Receive(&huart2, (uint8_t *) P_Message, 1, HAL_MAX_DELAY);
 8000f48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	68b9      	ldr	r1, [r7, #8]
 8000f50:	4807      	ldr	r0, [pc, #28]	; (8000f70 <_read+0x34>)
 8000f52:	f003 faa2 	bl	800449a <HAL_UART_Receive>
 8000f56:	4603      	mov	r3, r0
 8000f58:	75fb      	strb	r3, [r7, #23]
	if (Etat == HAL_OK) return 1;
 8000f5a:	7dfb      	ldrb	r3, [r7, #23]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d101      	bne.n	8000f64 <_read+0x28>
 8000f60:	2301      	movs	r3, #1
 8000f62:	e001      	b.n	8000f68 <_read+0x2c>
	else return -1;
 8000f64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	3718      	adds	r7, #24
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	200002e0 	.word	0x200002e0

08000f74 <main>:

void SystemClock_Config(void);
//--------------------
extern UART_HandleTypeDef huart2;

int main(){
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
	PERIOD[0] = &period_sensor_1;
 8000f78:	4b2a      	ldr	r3, [pc, #168]	; (8001024 <main+0xb0>)
 8000f7a:	4a2b      	ldr	r2, [pc, #172]	; (8001028 <main+0xb4>)
 8000f7c:	601a      	str	r2, [r3, #0]
	PERIOD[1] = &period_sensor_2;
 8000f7e:	4b29      	ldr	r3, [pc, #164]	; (8001024 <main+0xb0>)
 8000f80:	4a2a      	ldr	r2, [pc, #168]	; (800102c <main+0xb8>)
 8000f82:	605a      	str	r2, [r3, #4]
	PERIOD[2] = &period_sensor_3;
 8000f84:	4b27      	ldr	r3, [pc, #156]	; (8001024 <main+0xb0>)
 8000f86:	4a2a      	ldr	r2, [pc, #168]	; (8001030 <main+0xbc>)
 8000f88:	609a      	str	r2, [r3, #8]
	PERIOD[3] = &period_send_data;
 8000f8a:	4b26      	ldr	r3, [pc, #152]	; (8001024 <main+0xb0>)
 8000f8c:	4a29      	ldr	r2, [pc, #164]	; (8001034 <main+0xc0>)
 8000f8e:	60da      	str	r2, [r3, #12]
	HAL_Init();
 8000f90:	f000 fbea 	bl	8001768 <HAL_Init>
	SystemClock_Config();
 8000f94:	f7ff fc52 	bl	800083c <SystemClock_Config>
	MX_USART2_UART_Init();
 8000f98:	f000 fb42 	bl	8001620 <MX_USART2_UART_Init>
	MX_RNG_Init();
 8000f9c:	f000 f870 	bl	8001080 <MX_RNG_Init>
	MX_GPIO_Init();
 8000fa0:	f7ff fb9e 	bl	80006e0 <MX_GPIO_Init>
	MX_RTC_Init();
 8000fa4:	f000 f8a2 	bl	80010ec <MX_RTC_Init>
	MX_ADC1_Init();
 8000fa8:	f7ff fb04 	bl	80005b4 <MX_ADC1_Init>
	MX_TIM1_Init();
 8000fac:	f000 fa58 	bl	8001460 <MX_TIM1_Init>
	osKernelInitialize();
 8000fb0:	f004 faf2 	bl	8005598 <osKernelInitialize>
	HAL_UART_Receive_IT(&huart2, (void*)&receive_buffer, MESSAGE_RECEIVE_SIZE);
 8000fb4:	221e      	movs	r2, #30
 8000fb6:	4920      	ldr	r1, [pc, #128]	; (8001038 <main+0xc4>)
 8000fb8:	4820      	ldr	r0, [pc, #128]	; (800103c <main+0xc8>)
 8000fba:	f003 fb10 	bl	80045de <HAL_UART_Receive_IT>
	Pipe_Reception_Analyse = osMessageQueueNew(TAILLE_PIPE_RECEPTION_ANALYSE, sizeof(T_DATA), NULL);
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	211d      	movs	r1, #29
 8000fc2:	20c8      	movs	r0, #200	; 0xc8
 8000fc4:	f004 fcae 	bl	8005924 <osMessageQueueNew>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	4a1d      	ldr	r2, [pc, #116]	; (8001040 <main+0xcc>)
 8000fcc:	6013      	str	r3, [r2, #0]
	osThreadNew(Fonction_Thread_Sensor_1, NULL, &Config_Thread_Sensor_1);
 8000fce:	4a1d      	ldr	r2, [pc, #116]	; (8001044 <main+0xd0>)
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	481d      	ldr	r0, [pc, #116]	; (8001048 <main+0xd4>)
 8000fd4:	f004 fb2a 	bl	800562c <osThreadNew>
	osThreadNew(Fonction_Thread_Sensor_2, NULL, &Config_Thread_Sensor_2);
 8000fd8:	4a1c      	ldr	r2, [pc, #112]	; (800104c <main+0xd8>)
 8000fda:	2100      	movs	r1, #0
 8000fdc:	481c      	ldr	r0, [pc, #112]	; (8001050 <main+0xdc>)
 8000fde:	f004 fb25 	bl	800562c <osThreadNew>
	osThreadNew(Fonction_Thread_Sensor_3, NULL, &Config_Thread_Sensor_3);
 8000fe2:	4a1c      	ldr	r2, [pc, #112]	; (8001054 <main+0xe0>)
 8000fe4:	2100      	movs	r1, #0
 8000fe6:	481c      	ldr	r0, [pc, #112]	; (8001058 <main+0xe4>)
 8000fe8:	f004 fb20 	bl	800562c <osThreadNew>
	Thread_Buzzer = osThreadNew(Fonction_Thread_Buzzer, NULL, &Config_Thread_Buzzer);
 8000fec:	4a1b      	ldr	r2, [pc, #108]	; (800105c <main+0xe8>)
 8000fee:	2100      	movs	r1, #0
 8000ff0:	481b      	ldr	r0, [pc, #108]	; (8001060 <main+0xec>)
 8000ff2:	f004 fb1b 	bl	800562c <osThreadNew>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	4a1a      	ldr	r2, [pc, #104]	; (8001064 <main+0xf0>)
 8000ffa:	6013      	str	r3, [r2, #0]
	Thread_Watch_Queue = osThreadNew(Fonction_Thread_Watch_Queue, NULL, &Config_Thread_Watch_Queue);
 8000ffc:	4a1a      	ldr	r2, [pc, #104]	; (8001068 <main+0xf4>)
 8000ffe:	2100      	movs	r1, #0
 8001000:	481a      	ldr	r0, [pc, #104]	; (800106c <main+0xf8>)
 8001002:	f004 fb13 	bl	800562c <osThreadNew>
 8001006:	4603      	mov	r3, r0
 8001008:	4a19      	ldr	r2, [pc, #100]	; (8001070 <main+0xfc>)
 800100a:	6013      	str	r3, [r2, #0]
	Thread_Send_Data = osThreadNew(Fonction_Thread_Send, NULL, &Config_Thread_Send);
 800100c:	4a19      	ldr	r2, [pc, #100]	; (8001074 <main+0x100>)
 800100e:	2100      	movs	r1, #0
 8001010:	4819      	ldr	r0, [pc, #100]	; (8001078 <main+0x104>)
 8001012:	f004 fb0b 	bl	800562c <osThreadNew>
 8001016:	4603      	mov	r3, r0
 8001018:	4a18      	ldr	r2, [pc, #96]	; (800107c <main+0x108>)
 800101a:	6013      	str	r3, [r2, #0]
	osKernelStart();
 800101c:	f004 fae0 	bl	80055e0 <osKernelStart>
	while(1);
 8001020:	e7fe      	b.n	8001020 <main+0xac>
 8001022:	bf00      	nop
 8001024:	200001fc 	.word	0x200001fc
 8001028:	20000000 	.word	0x20000000
 800102c:	20000004 	.word	0x20000004
 8001030:	20000008 	.word	0x20000008
 8001034:	2000000c 	.word	0x2000000c
 8001038:	200001d8 	.word	0x200001d8
 800103c:	200002e0 	.word	0x200002e0
 8001040:	2000020c 	.word	0x2000020c
 8001044:	20000028 	.word	0x20000028
 8001048:	08000949 	.word	0x08000949
 800104c:	2000004c 	.word	0x2000004c
 8001050:	080009e1 	.word	0x080009e1
 8001054:	20000070 	.word	0x20000070
 8001058:	08000a85 	.word	0x08000a85
 800105c:	200000dc 	.word	0x200000dc
 8001060:	08000bfd 	.word	0x08000bfd
 8001064:	20000218 	.word	0x20000218
 8001068:	200000b8 	.word	0x200000b8
 800106c:	08000bc1 	.word	0x08000bc1
 8001070:	20000214 	.word	0x20000214
 8001074:	20000094 	.word	0x20000094
 8001078:	08000b29 	.word	0x08000b29
 800107c:	20000210 	.word	0x20000210

08001080 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8001084:	4b06      	ldr	r3, [pc, #24]	; (80010a0 <MX_RNG_Init+0x20>)
 8001086:	4a07      	ldr	r2, [pc, #28]	; (80010a4 <MX_RNG_Init+0x24>)
 8001088:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 800108a:	4805      	ldr	r0, [pc, #20]	; (80010a0 <MX_RNG_Init+0x20>)
 800108c:	f002 f828 	bl	80030e0 <HAL_RNG_Init>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8001096:	f7ff fc51 	bl	800093c <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 800109a:	bf00      	nop
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	2000021c 	.word	0x2000021c
 80010a4:	40080000 	.word	0x40080000

080010a8 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b085      	sub	sp, #20
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]

  if(rngHandle->Instance==RNG)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a0b      	ldr	r2, [pc, #44]	; (80010e4 <HAL_RNG_MspInit+0x3c>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d10d      	bne.n	80010d6 <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 80010ba:	2300      	movs	r3, #0
 80010bc:	60fb      	str	r3, [r7, #12]
 80010be:	4b0a      	ldr	r3, [pc, #40]	; (80010e8 <HAL_RNG_MspInit+0x40>)
 80010c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c2:	4a09      	ldr	r2, [pc, #36]	; (80010e8 <HAL_RNG_MspInit+0x40>)
 80010c4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010c8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ca:	4b07      	ldr	r3, [pc, #28]	; (80010e8 <HAL_RNG_MspInit+0x40>)
 80010cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80010d2:	60fb      	str	r3, [r7, #12]
 80010d4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 80010d6:	bf00      	nop
 80010d8:	3714      	adds	r7, #20
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	40080000 	.word	0x40080000
 80010e8:	40023800 	.word	0x40023800

080010ec <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80010f0:	4b0f      	ldr	r3, [pc, #60]	; (8001130 <MX_RTC_Init+0x44>)
 80010f2:	4a10      	ldr	r2, [pc, #64]	; (8001134 <MX_RTC_Init+0x48>)
 80010f4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80010f6:	4b0e      	ldr	r3, [pc, #56]	; (8001130 <MX_RTC_Init+0x44>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80010fc:	4b0c      	ldr	r3, [pc, #48]	; (8001130 <MX_RTC_Init+0x44>)
 80010fe:	227f      	movs	r2, #127	; 0x7f
 8001100:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001102:	4b0b      	ldr	r3, [pc, #44]	; (8001130 <MX_RTC_Init+0x44>)
 8001104:	22ff      	movs	r2, #255	; 0xff
 8001106:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001108:	4b09      	ldr	r3, [pc, #36]	; (8001130 <MX_RTC_Init+0x44>)
 800110a:	2200      	movs	r2, #0
 800110c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800110e:	4b08      	ldr	r3, [pc, #32]	; (8001130 <MX_RTC_Init+0x44>)
 8001110:	2200      	movs	r2, #0
 8001112:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001114:	4b06      	ldr	r3, [pc, #24]	; (8001130 <MX_RTC_Init+0x44>)
 8001116:	2200      	movs	r2, #0
 8001118:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800111a:	4805      	ldr	r0, [pc, #20]	; (8001130 <MX_RTC_Init+0x44>)
 800111c:	f002 f860 	bl	80031e0 <HAL_RTC_Init>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8001126:	f7ff fc09 	bl	800093c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800112a:	bf00      	nop
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	2000022c 	.word	0x2000022c
 8001134:	40002800 	.word	0x40002800

08001138 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b088      	sub	sp, #32
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001140:	f107 0308 	add.w	r3, r7, #8
 8001144:	2200      	movs	r2, #0
 8001146:	601a      	str	r2, [r3, #0]
 8001148:	605a      	str	r2, [r3, #4]
 800114a:	609a      	str	r2, [r3, #8]
 800114c:	60da      	str	r2, [r3, #12]
 800114e:	611a      	str	r2, [r3, #16]
 8001150:	615a      	str	r2, [r3, #20]
  if(rtcHandle->Instance==RTC)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	4a0c      	ldr	r2, [pc, #48]	; (8001188 <HAL_RTC_MspInit+0x50>)
 8001158:	4293      	cmp	r3, r2
 800115a:	d111      	bne.n	8001180 <HAL_RTC_MspInit+0x48>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800115c:	2304      	movs	r3, #4
 800115e:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001160:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001164:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001166:	f107 0308 	add.w	r3, r7, #8
 800116a:	4618      	mov	r0, r3
 800116c:	f001 fc58 	bl	8002a20 <HAL_RCCEx_PeriphCLKConfig>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8001176:	f7ff fbe1 	bl	800093c <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800117a:	4b04      	ldr	r3, [pc, #16]	; (800118c <HAL_RTC_MspInit+0x54>)
 800117c:	2201      	movs	r2, #1
 800117e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001180:	bf00      	nop
 8001182:	3720      	adds	r7, #32
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	40002800 	.word	0x40002800
 800118c:	42470e3c 	.word	0x42470e3c

08001190 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001196:	2300      	movs	r3, #0
 8001198:	607b      	str	r3, [r7, #4]
 800119a:	4b12      	ldr	r3, [pc, #72]	; (80011e4 <HAL_MspInit+0x54>)
 800119c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800119e:	4a11      	ldr	r2, [pc, #68]	; (80011e4 <HAL_MspInit+0x54>)
 80011a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011a4:	6453      	str	r3, [r2, #68]	; 0x44
 80011a6:	4b0f      	ldr	r3, [pc, #60]	; (80011e4 <HAL_MspInit+0x54>)
 80011a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011ae:	607b      	str	r3, [r7, #4]
 80011b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011b2:	2300      	movs	r3, #0
 80011b4:	603b      	str	r3, [r7, #0]
 80011b6:	4b0b      	ldr	r3, [pc, #44]	; (80011e4 <HAL_MspInit+0x54>)
 80011b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ba:	4a0a      	ldr	r2, [pc, #40]	; (80011e4 <HAL_MspInit+0x54>)
 80011bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011c0:	6413      	str	r3, [r2, #64]	; 0x40
 80011c2:	4b08      	ldr	r3, [pc, #32]	; (80011e4 <HAL_MspInit+0x54>)
 80011c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ca:	603b      	str	r3, [r7, #0]
 80011cc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80011ce:	2200      	movs	r2, #0
 80011d0:	210f      	movs	r1, #15
 80011d2:	f06f 0001 	mvn.w	r0, #1
 80011d6:	f000 ff6f 	bl	80020b8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011da:	bf00      	nop
 80011dc:	3708      	adds	r7, #8
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	40023800 	.word	0x40023800

080011e8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b08e      	sub	sp, #56	; 0x38
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80011f0:	2300      	movs	r3, #0
 80011f2:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80011f4:	2300      	movs	r3, #0
 80011f6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80011f8:	2300      	movs	r3, #0
 80011fa:	60fb      	str	r3, [r7, #12]
 80011fc:	4b33      	ldr	r3, [pc, #204]	; (80012cc <HAL_InitTick+0xe4>)
 80011fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001200:	4a32      	ldr	r2, [pc, #200]	; (80012cc <HAL_InitTick+0xe4>)
 8001202:	f043 0310 	orr.w	r3, r3, #16
 8001206:	6413      	str	r3, [r2, #64]	; 0x40
 8001208:	4b30      	ldr	r3, [pc, #192]	; (80012cc <HAL_InitTick+0xe4>)
 800120a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120c:	f003 0310 	and.w	r3, r3, #16
 8001210:	60fb      	str	r3, [r7, #12]
 8001212:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001214:	f107 0210 	add.w	r2, r7, #16
 8001218:	f107 0314 	add.w	r3, r7, #20
 800121c:	4611      	mov	r1, r2
 800121e:	4618      	mov	r0, r3
 8001220:	f001 fbcc 	bl	80029bc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001224:	6a3b      	ldr	r3, [r7, #32]
 8001226:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800122a:	2b00      	cmp	r3, #0
 800122c:	d103      	bne.n	8001236 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800122e:	f001 fb9d 	bl	800296c <HAL_RCC_GetPCLK1Freq>
 8001232:	6378      	str	r0, [r7, #52]	; 0x34
 8001234:	e004      	b.n	8001240 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001236:	f001 fb99 	bl	800296c <HAL_RCC_GetPCLK1Freq>
 800123a:	4603      	mov	r3, r0
 800123c:	005b      	lsls	r3, r3, #1
 800123e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001240:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001242:	4a23      	ldr	r2, [pc, #140]	; (80012d0 <HAL_InitTick+0xe8>)
 8001244:	fba2 2303 	umull	r2, r3, r2, r3
 8001248:	0c9b      	lsrs	r3, r3, #18
 800124a:	3b01      	subs	r3, #1
 800124c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800124e:	4b21      	ldr	r3, [pc, #132]	; (80012d4 <HAL_InitTick+0xec>)
 8001250:	4a21      	ldr	r2, [pc, #132]	; (80012d8 <HAL_InitTick+0xf0>)
 8001252:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001254:	4b1f      	ldr	r3, [pc, #124]	; (80012d4 <HAL_InitTick+0xec>)
 8001256:	f240 32e7 	movw	r2, #999	; 0x3e7
 800125a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800125c:	4a1d      	ldr	r2, [pc, #116]	; (80012d4 <HAL_InitTick+0xec>)
 800125e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001260:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001262:	4b1c      	ldr	r3, [pc, #112]	; (80012d4 <HAL_InitTick+0xec>)
 8001264:	2200      	movs	r2, #0
 8001266:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001268:	4b1a      	ldr	r3, [pc, #104]	; (80012d4 <HAL_InitTick+0xec>)
 800126a:	2200      	movs	r2, #0
 800126c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800126e:	4b19      	ldr	r3, [pc, #100]	; (80012d4 <HAL_InitTick+0xec>)
 8001270:	2200      	movs	r2, #0
 8001272:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001274:	4817      	ldr	r0, [pc, #92]	; (80012d4 <HAL_InitTick+0xec>)
 8001276:	f002 f976 	bl	8003566 <HAL_TIM_Base_Init>
 800127a:	4603      	mov	r3, r0
 800127c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001280:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001284:	2b00      	cmp	r3, #0
 8001286:	d11b      	bne.n	80012c0 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001288:	4812      	ldr	r0, [pc, #72]	; (80012d4 <HAL_InitTick+0xec>)
 800128a:	f002 f9c5 	bl	8003618 <HAL_TIM_Base_Start_IT>
 800128e:	4603      	mov	r3, r0
 8001290:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001294:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001298:	2b00      	cmp	r3, #0
 800129a:	d111      	bne.n	80012c0 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800129c:	2036      	movs	r0, #54	; 0x36
 800129e:	f000 ff27 	bl	80020f0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	2b0f      	cmp	r3, #15
 80012a6:	d808      	bhi.n	80012ba <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80012a8:	2200      	movs	r2, #0
 80012aa:	6879      	ldr	r1, [r7, #4]
 80012ac:	2036      	movs	r0, #54	; 0x36
 80012ae:	f000 ff03 	bl	80020b8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80012b2:	4a0a      	ldr	r2, [pc, #40]	; (80012dc <HAL_InitTick+0xf4>)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6013      	str	r3, [r2, #0]
 80012b8:	e002      	b.n	80012c0 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80012ba:	2301      	movs	r3, #1
 80012bc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80012c0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	3738      	adds	r7, #56	; 0x38
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	40023800 	.word	0x40023800
 80012d0:	431bde83 	.word	0x431bde83
 80012d4:	2000024c 	.word	0x2000024c
 80012d8:	40001000 	.word	0x40001000
 80012dc:	20000104 	.word	0x20000104

080012e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012e4:	e7fe      	b.n	80012e4 <NMI_Handler+0x4>

080012e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012e6:	b480      	push	{r7}
 80012e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012ea:	e7fe      	b.n	80012ea <HardFault_Handler+0x4>

080012ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012f0:	e7fe      	b.n	80012f0 <MemManage_Handler+0x4>

080012f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012f2:	b480      	push	{r7}
 80012f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012f6:	e7fe      	b.n	80012f6 <BusFault_Handler+0x4>

080012f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012fc:	e7fe      	b.n	80012fc <UsageFault_Handler+0x4>

080012fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012fe:	b480      	push	{r7}
 8001300:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001302:	bf00      	nop
 8001304:	46bd      	mov	sp, r7
 8001306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130a:	4770      	bx	lr

0800130c <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_PLUS_Pin);
 8001310:	2002      	movs	r0, #2
 8001312:	f001 f91b 	bl	800254c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001316:	bf00      	nop
 8001318:	bd80      	pop	{r7, pc}

0800131a <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800131a:	b580      	push	{r7, lr}
 800131c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_MINUS_Pin);
 800131e:	2020      	movs	r0, #32
 8001320:	f001 f914 	bl	800254c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BTN_SELECT_Pin);
 8001324:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001328:	f001 f910 	bl	800254c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800132c:	bf00      	nop
 800132e:	bd80      	pop	{r7, pc}

08001330 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001334:	4802      	ldr	r0, [pc, #8]	; (8001340 <USART2_IRQHandler+0x10>)
 8001336:	f003 f983 	bl	8004640 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800133a:	bf00      	nop
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	200002e0 	.word	0x200002e0

08001344 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_SEND_DATA_Pin);
 8001348:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800134c:	f001 f8fe 	bl	800254c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001350:	bf00      	nop
 8001352:	bd80      	pop	{r7, pc}

08001354 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC channel underrun error interrupt.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001358:	4802      	ldr	r0, [pc, #8]	; (8001364 <TIM6_DAC_IRQHandler+0x10>)
 800135a:	f002 fafd 	bl	8003958 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800135e:	bf00      	nop
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	2000024c 	.word	0x2000024c

08001368 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001370:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001374:	4618      	mov	r0, r3
 8001376:	370c      	adds	r7, #12
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr

08001380 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001380:	b480      	push	{r7}
 8001382:	b083      	sub	sp, #12
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
 8001388:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001390:	605a      	str	r2, [r3, #4]
  return 0;
 8001392:	2300      	movs	r3, #0
}
 8001394:	4618      	mov	r0, r3
 8001396:	370c      	adds	r7, #12
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr

080013a0 <_isatty>:

int _isatty(int file)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b083      	sub	sp, #12
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80013a8:	2301      	movs	r3, #1
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	370c      	adds	r7, #12
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr

080013b6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80013b6:	b480      	push	{r7}
 80013b8:	b085      	sub	sp, #20
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	60f8      	str	r0, [r7, #12]
 80013be:	60b9      	str	r1, [r7, #8]
 80013c0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80013c2:	2300      	movs	r3, #0
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	3714      	adds	r7, #20
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr

080013d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b086      	sub	sp, #24
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013d8:	4a14      	ldr	r2, [pc, #80]	; (800142c <_sbrk+0x5c>)
 80013da:	4b15      	ldr	r3, [pc, #84]	; (8001430 <_sbrk+0x60>)
 80013dc:	1ad3      	subs	r3, r2, r3
 80013de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013e4:	4b13      	ldr	r3, [pc, #76]	; (8001434 <_sbrk+0x64>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d102      	bne.n	80013f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013ec:	4b11      	ldr	r3, [pc, #68]	; (8001434 <_sbrk+0x64>)
 80013ee:	4a12      	ldr	r2, [pc, #72]	; (8001438 <_sbrk+0x68>)
 80013f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013f2:	4b10      	ldr	r3, [pc, #64]	; (8001434 <_sbrk+0x64>)
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	4413      	add	r3, r2
 80013fa:	693a      	ldr	r2, [r7, #16]
 80013fc:	429a      	cmp	r2, r3
 80013fe:	d207      	bcs.n	8001410 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001400:	f007 fb80 	bl	8008b04 <__errno>
 8001404:	4603      	mov	r3, r0
 8001406:	220c      	movs	r2, #12
 8001408:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800140a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800140e:	e009      	b.n	8001424 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001410:	4b08      	ldr	r3, [pc, #32]	; (8001434 <_sbrk+0x64>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001416:	4b07      	ldr	r3, [pc, #28]	; (8001434 <_sbrk+0x64>)
 8001418:	681a      	ldr	r2, [r3, #0]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	4413      	add	r3, r2
 800141e:	4a05      	ldr	r2, [pc, #20]	; (8001434 <_sbrk+0x64>)
 8001420:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001422:	68fb      	ldr	r3, [r7, #12]
}
 8001424:	4618      	mov	r0, r3
 8001426:	3718      	adds	r7, #24
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	20008000 	.word	0x20008000
 8001430:	00000400 	.word	0x00000400
 8001434:	20000294 	.word	0x20000294
 8001438:	20004c88 	.word	0x20004c88

0800143c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001440:	4b06      	ldr	r3, [pc, #24]	; (800145c <SystemInit+0x20>)
 8001442:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001446:	4a05      	ldr	r2, [pc, #20]	; (800145c <SystemInit+0x20>)
 8001448:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800144c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001450:	bf00      	nop
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	e000ed00 	.word	0xe000ed00

08001460 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b092      	sub	sp, #72	; 0x48
 8001464:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001466:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800146a:	2200      	movs	r2, #0
 800146c:	601a      	str	r2, [r3, #0]
 800146e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001470:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001474:	2200      	movs	r2, #0
 8001476:	601a      	str	r2, [r3, #0]
 8001478:	605a      	str	r2, [r3, #4]
 800147a:	609a      	str	r2, [r3, #8]
 800147c:	60da      	str	r2, [r3, #12]
 800147e:	611a      	str	r2, [r3, #16]
 8001480:	615a      	str	r2, [r3, #20]
 8001482:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001484:	1d3b      	adds	r3, r7, #4
 8001486:	2220      	movs	r2, #32
 8001488:	2100      	movs	r1, #0
 800148a:	4618      	mov	r0, r3
 800148c:	f007 fb72 	bl	8008b74 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001490:	4b33      	ldr	r3, [pc, #204]	; (8001560 <MX_TIM1_Init+0x100>)
 8001492:	4a34      	ldr	r2, [pc, #208]	; (8001564 <MX_TIM1_Init+0x104>)
 8001494:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 500-1;
 8001496:	4b32      	ldr	r3, [pc, #200]	; (8001560 <MX_TIM1_Init+0x100>)
 8001498:	f240 12f3 	movw	r2, #499	; 0x1f3
 800149c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800149e:	4b30      	ldr	r3, [pc, #192]	; (8001560 <MX_TIM1_Init+0x100>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 80014a4:	4b2e      	ldr	r3, [pc, #184]	; (8001560 <MX_TIM1_Init+0x100>)
 80014a6:	2263      	movs	r2, #99	; 0x63
 80014a8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014aa:	4b2d      	ldr	r3, [pc, #180]	; (8001560 <MX_TIM1_Init+0x100>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80014b0:	4b2b      	ldr	r3, [pc, #172]	; (8001560 <MX_TIM1_Init+0x100>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014b6:	4b2a      	ldr	r3, [pc, #168]	; (8001560 <MX_TIM1_Init+0x100>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80014bc:	4828      	ldr	r0, [pc, #160]	; (8001560 <MX_TIM1_Init+0x100>)
 80014be:	f002 f8f9 	bl	80036b4 <HAL_TIM_PWM_Init>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d001      	beq.n	80014cc <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 80014c8:	f7ff fa38 	bl	800093c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014cc:	2300      	movs	r3, #0
 80014ce:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014d0:	2300      	movs	r3, #0
 80014d2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80014d4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80014d8:	4619      	mov	r1, r3
 80014da:	4821      	ldr	r0, [pc, #132]	; (8001560 <MX_TIM1_Init+0x100>)
 80014dc:	f002 fe3e 	bl	800415c <HAL_TIMEx_MasterConfigSynchronization>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d001      	beq.n	80014ea <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 80014e6:	f7ff fa29 	bl	800093c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014ea:	2360      	movs	r3, #96	; 0x60
 80014ec:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 25;
 80014ee:	2319      	movs	r3, #25
 80014f0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014f2:	2300      	movs	r3, #0
 80014f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80014f6:	2300      	movs	r3, #0
 80014f8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014fa:	2300      	movs	r3, #0
 80014fc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80014fe:	2300      	movs	r3, #0
 8001500:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001502:	2300      	movs	r3, #0
 8001504:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001506:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800150a:	2200      	movs	r2, #0
 800150c:	4619      	mov	r1, r3
 800150e:	4814      	ldr	r0, [pc, #80]	; (8001560 <MX_TIM1_Init+0x100>)
 8001510:	f002 fb2a 	bl	8003b68 <HAL_TIM_PWM_ConfigChannel>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 800151a:	f7ff fa0f 	bl	800093c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800151e:	2300      	movs	r3, #0
 8001520:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001522:	2300      	movs	r3, #0
 8001524:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001526:	2300      	movs	r3, #0
 8001528:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800152a:	2300      	movs	r3, #0
 800152c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800152e:	2300      	movs	r3, #0
 8001530:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001532:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001536:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001538:	2300      	movs	r3, #0
 800153a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800153c:	1d3b      	adds	r3, r7, #4
 800153e:	4619      	mov	r1, r3
 8001540:	4807      	ldr	r0, [pc, #28]	; (8001560 <MX_TIM1_Init+0x100>)
 8001542:	f002 fe65 	bl	8004210 <HAL_TIMEx_ConfigBreakDeadTime>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d001      	beq.n	8001550 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 800154c:	f7ff f9f6 	bl	800093c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001550:	4803      	ldr	r0, [pc, #12]	; (8001560 <MX_TIM1_Init+0x100>)
 8001552:	f000 f82b 	bl	80015ac <HAL_TIM_MspPostInit>

}
 8001556:	bf00      	nop
 8001558:	3748      	adds	r7, #72	; 0x48
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	20000298 	.word	0x20000298
 8001564:	40010000 	.word	0x40010000

08001568 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001568:	b480      	push	{r7}
 800156a:	b085      	sub	sp, #20
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a0b      	ldr	r2, [pc, #44]	; (80015a4 <HAL_TIM_PWM_MspInit+0x3c>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d10d      	bne.n	8001596 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800157a:	2300      	movs	r3, #0
 800157c:	60fb      	str	r3, [r7, #12]
 800157e:	4b0a      	ldr	r3, [pc, #40]	; (80015a8 <HAL_TIM_PWM_MspInit+0x40>)
 8001580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001582:	4a09      	ldr	r2, [pc, #36]	; (80015a8 <HAL_TIM_PWM_MspInit+0x40>)
 8001584:	f043 0301 	orr.w	r3, r3, #1
 8001588:	6453      	str	r3, [r2, #68]	; 0x44
 800158a:	4b07      	ldr	r3, [pc, #28]	; (80015a8 <HAL_TIM_PWM_MspInit+0x40>)
 800158c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800158e:	f003 0301 	and.w	r3, r3, #1
 8001592:	60fb      	str	r3, [r7, #12]
 8001594:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001596:	bf00      	nop
 8001598:	3714      	adds	r7, #20
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr
 80015a2:	bf00      	nop
 80015a4:	40010000 	.word	0x40010000
 80015a8:	40023800 	.word	0x40023800

080015ac <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b088      	sub	sp, #32
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b4:	f107 030c 	add.w	r3, r7, #12
 80015b8:	2200      	movs	r2, #0
 80015ba:	601a      	str	r2, [r3, #0]
 80015bc:	605a      	str	r2, [r3, #4]
 80015be:	609a      	str	r2, [r3, #8]
 80015c0:	60da      	str	r2, [r3, #12]
 80015c2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a12      	ldr	r2, [pc, #72]	; (8001614 <HAL_TIM_MspPostInit+0x68>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d11e      	bne.n	800160c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ce:	2300      	movs	r3, #0
 80015d0:	60bb      	str	r3, [r7, #8]
 80015d2:	4b11      	ldr	r3, [pc, #68]	; (8001618 <HAL_TIM_MspPostInit+0x6c>)
 80015d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d6:	4a10      	ldr	r2, [pc, #64]	; (8001618 <HAL_TIM_MspPostInit+0x6c>)
 80015d8:	f043 0301 	orr.w	r3, r3, #1
 80015dc:	6313      	str	r3, [r2, #48]	; 0x30
 80015de:	4b0e      	ldr	r3, [pc, #56]	; (8001618 <HAL_TIM_MspPostInit+0x6c>)
 80015e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e2:	f003 0301 	and.w	r3, r3, #1
 80015e6:	60bb      	str	r3, [r7, #8]
 80015e8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80015ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015ee:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f0:	2302      	movs	r3, #2
 80015f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f4:	2300      	movs	r3, #0
 80015f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f8:	2300      	movs	r3, #0
 80015fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80015fc:	2301      	movs	r3, #1
 80015fe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001600:	f107 030c 	add.w	r3, r7, #12
 8001604:	4619      	mov	r1, r3
 8001606:	4805      	ldr	r0, [pc, #20]	; (800161c <HAL_TIM_MspPostInit+0x70>)
 8001608:	f000 fe12 	bl	8002230 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800160c:	bf00      	nop
 800160e:	3720      	adds	r7, #32
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	40010000 	.word	0x40010000
 8001618:	40023800 	.word	0x40023800
 800161c:	40020000 	.word	0x40020000

08001620 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001624:	4b11      	ldr	r3, [pc, #68]	; (800166c <MX_USART2_UART_Init+0x4c>)
 8001626:	4a12      	ldr	r2, [pc, #72]	; (8001670 <MX_USART2_UART_Init+0x50>)
 8001628:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800162a:	4b10      	ldr	r3, [pc, #64]	; (800166c <MX_USART2_UART_Init+0x4c>)
 800162c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001630:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001632:	4b0e      	ldr	r3, [pc, #56]	; (800166c <MX_USART2_UART_Init+0x4c>)
 8001634:	2200      	movs	r2, #0
 8001636:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001638:	4b0c      	ldr	r3, [pc, #48]	; (800166c <MX_USART2_UART_Init+0x4c>)
 800163a:	2200      	movs	r2, #0
 800163c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800163e:	4b0b      	ldr	r3, [pc, #44]	; (800166c <MX_USART2_UART_Init+0x4c>)
 8001640:	2200      	movs	r2, #0
 8001642:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001644:	4b09      	ldr	r3, [pc, #36]	; (800166c <MX_USART2_UART_Init+0x4c>)
 8001646:	220c      	movs	r2, #12
 8001648:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800164a:	4b08      	ldr	r3, [pc, #32]	; (800166c <MX_USART2_UART_Init+0x4c>)
 800164c:	2200      	movs	r2, #0
 800164e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001650:	4b06      	ldr	r3, [pc, #24]	; (800166c <MX_USART2_UART_Init+0x4c>)
 8001652:	2200      	movs	r2, #0
 8001654:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001656:	4805      	ldr	r0, [pc, #20]	; (800166c <MX_USART2_UART_Init+0x4c>)
 8001658:	f002 fe40 	bl	80042dc <HAL_UART_Init>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001662:	f7ff f96b 	bl	800093c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001666:	bf00      	nop
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	200002e0 	.word	0x200002e0
 8001670:	40004400 	.word	0x40004400

08001674 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b08a      	sub	sp, #40	; 0x28
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800167c:	f107 0314 	add.w	r3, r7, #20
 8001680:	2200      	movs	r2, #0
 8001682:	601a      	str	r2, [r3, #0]
 8001684:	605a      	str	r2, [r3, #4]
 8001686:	609a      	str	r2, [r3, #8]
 8001688:	60da      	str	r2, [r3, #12]
 800168a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a1d      	ldr	r2, [pc, #116]	; (8001708 <HAL_UART_MspInit+0x94>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d133      	bne.n	80016fe <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001696:	2300      	movs	r3, #0
 8001698:	613b      	str	r3, [r7, #16]
 800169a:	4b1c      	ldr	r3, [pc, #112]	; (800170c <HAL_UART_MspInit+0x98>)
 800169c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169e:	4a1b      	ldr	r2, [pc, #108]	; (800170c <HAL_UART_MspInit+0x98>)
 80016a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016a4:	6413      	str	r3, [r2, #64]	; 0x40
 80016a6:	4b19      	ldr	r3, [pc, #100]	; (800170c <HAL_UART_MspInit+0x98>)
 80016a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ae:	613b      	str	r3, [r7, #16]
 80016b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016b2:	2300      	movs	r3, #0
 80016b4:	60fb      	str	r3, [r7, #12]
 80016b6:	4b15      	ldr	r3, [pc, #84]	; (800170c <HAL_UART_MspInit+0x98>)
 80016b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ba:	4a14      	ldr	r2, [pc, #80]	; (800170c <HAL_UART_MspInit+0x98>)
 80016bc:	f043 0301 	orr.w	r3, r3, #1
 80016c0:	6313      	str	r3, [r2, #48]	; 0x30
 80016c2:	4b12      	ldr	r3, [pc, #72]	; (800170c <HAL_UART_MspInit+0x98>)
 80016c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c6:	f003 0301 	and.w	r3, r3, #1
 80016ca:	60fb      	str	r3, [r7, #12]
 80016cc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80016ce:	230c      	movs	r3, #12
 80016d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d2:	2302      	movs	r3, #2
 80016d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d6:	2300      	movs	r3, #0
 80016d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016da:	2303      	movs	r3, #3
 80016dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016de:	2307      	movs	r3, #7
 80016e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016e2:	f107 0314 	add.w	r3, r7, #20
 80016e6:	4619      	mov	r1, r3
 80016e8:	4809      	ldr	r0, [pc, #36]	; (8001710 <HAL_UART_MspInit+0x9c>)
 80016ea:	f000 fda1 	bl	8002230 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80016ee:	2200      	movs	r2, #0
 80016f0:	2105      	movs	r1, #5
 80016f2:	2026      	movs	r0, #38	; 0x26
 80016f4:	f000 fce0 	bl	80020b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80016f8:	2026      	movs	r0, #38	; 0x26
 80016fa:	f000 fcf9 	bl	80020f0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80016fe:	bf00      	nop
 8001700:	3728      	adds	r7, #40	; 0x28
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	40004400 	.word	0x40004400
 800170c:	40023800 	.word	0x40023800
 8001710:	40020000 	.word	0x40020000

08001714 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8001714:	f8df d034 	ldr.w	sp, [pc, #52]	; 800174c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001718:	480d      	ldr	r0, [pc, #52]	; (8001750 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800171a:	490e      	ldr	r1, [pc, #56]	; (8001754 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800171c:	4a0e      	ldr	r2, [pc, #56]	; (8001758 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800171e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001720:	e002      	b.n	8001728 <LoopCopyDataInit>

08001722 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001722:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001724:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001726:	3304      	adds	r3, #4

08001728 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001728:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800172a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800172c:	d3f9      	bcc.n	8001722 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800172e:	4a0b      	ldr	r2, [pc, #44]	; (800175c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001730:	4c0b      	ldr	r4, [pc, #44]	; (8001760 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001732:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001734:	e001      	b.n	800173a <LoopFillZerobss>

08001736 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001736:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001738:	3204      	adds	r2, #4

0800173a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800173a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800173c:	d3fb      	bcc.n	8001736 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800173e:	f7ff fe7d 	bl	800143c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001742:	f007 f9e5 	bl	8008b10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001746:	f7ff fc15 	bl	8000f74 <main>
  bx  lr    
 800174a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800174c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001750:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001754:	20000174 	.word	0x20000174
  ldr r2, =_sidata
 8001758:	08009e34 	.word	0x08009e34
  ldr r2, =_sbss
 800175c:	20000174 	.word	0x20000174
  ldr r4, =_ebss
 8001760:	20004c88 	.word	0x20004c88

08001764 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001764:	e7fe      	b.n	8001764 <ADC_IRQHandler>
	...

08001768 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800176c:	4b0e      	ldr	r3, [pc, #56]	; (80017a8 <HAL_Init+0x40>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a0d      	ldr	r2, [pc, #52]	; (80017a8 <HAL_Init+0x40>)
 8001772:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001776:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001778:	4b0b      	ldr	r3, [pc, #44]	; (80017a8 <HAL_Init+0x40>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a0a      	ldr	r2, [pc, #40]	; (80017a8 <HAL_Init+0x40>)
 800177e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001782:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001784:	4b08      	ldr	r3, [pc, #32]	; (80017a8 <HAL_Init+0x40>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a07      	ldr	r2, [pc, #28]	; (80017a8 <HAL_Init+0x40>)
 800178a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800178e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001790:	2003      	movs	r0, #3
 8001792:	f000 fc86 	bl	80020a2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001796:	200f      	movs	r0, #15
 8001798:	f7ff fd26 	bl	80011e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800179c:	f7ff fcf8 	bl	8001190 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017a0:	2300      	movs	r3, #0
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	40023c00 	.word	0x40023c00

080017ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017b0:	4b06      	ldr	r3, [pc, #24]	; (80017cc <HAL_IncTick+0x20>)
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	461a      	mov	r2, r3
 80017b6:	4b06      	ldr	r3, [pc, #24]	; (80017d0 <HAL_IncTick+0x24>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4413      	add	r3, r2
 80017bc:	4a04      	ldr	r2, [pc, #16]	; (80017d0 <HAL_IncTick+0x24>)
 80017be:	6013      	str	r3, [r2, #0]
}
 80017c0:	bf00      	nop
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr
 80017ca:	bf00      	nop
 80017cc:	20000108 	.word	0x20000108
 80017d0:	20000324 	.word	0x20000324

080017d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
  return uwTick;
 80017d8:	4b03      	ldr	r3, [pc, #12]	; (80017e8 <HAL_GetTick+0x14>)
 80017da:	681b      	ldr	r3, [r3, #0]
}
 80017dc:	4618      	mov	r0, r3
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr
 80017e6:	bf00      	nop
 80017e8:	20000324 	.word	0x20000324

080017ec <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b084      	sub	sp, #16
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017f4:	2300      	movs	r3, #0
 80017f6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d101      	bne.n	8001802 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	e033      	b.n	800186a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001806:	2b00      	cmp	r3, #0
 8001808:	d109      	bne.n	800181e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800180a:	6878      	ldr	r0, [r7, #4]
 800180c:	f7fe ff24 	bl	8000658 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2200      	movs	r2, #0
 8001814:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2200      	movs	r2, #0
 800181a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001822:	f003 0310 	and.w	r3, r3, #16
 8001826:	2b00      	cmp	r3, #0
 8001828:	d118      	bne.n	800185c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001832:	f023 0302 	bic.w	r3, r3, #2
 8001836:	f043 0202 	orr.w	r2, r3, #2
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800183e:	6878      	ldr	r0, [r7, #4]
 8001840:	f000 fa86 	bl	8001d50 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2200      	movs	r2, #0
 8001848:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184e:	f023 0303 	bic.w	r3, r3, #3
 8001852:	f043 0201 	orr.w	r2, r3, #1
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	641a      	str	r2, [r3, #64]	; 0x40
 800185a:	e001      	b.n	8001860 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800185c:	2301      	movs	r3, #1
 800185e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2200      	movs	r2, #0
 8001864:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001868:	7bfb      	ldrb	r3, [r7, #15]
}
 800186a:	4618      	mov	r0, r3
 800186c:	3710      	adds	r7, #16
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
	...

08001874 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001874:	b480      	push	{r7}
 8001876:	b085      	sub	sp, #20
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800187c:	2300      	movs	r3, #0
 800187e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001886:	2b01      	cmp	r3, #1
 8001888:	d101      	bne.n	800188e <HAL_ADC_Start+0x1a>
 800188a:	2302      	movs	r3, #2
 800188c:	e097      	b.n	80019be <HAL_ADC_Start+0x14a>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2201      	movs	r2, #1
 8001892:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	f003 0301 	and.w	r3, r3, #1
 80018a0:	2b01      	cmp	r3, #1
 80018a2:	d018      	beq.n	80018d6 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	689a      	ldr	r2, [r3, #8]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f042 0201 	orr.w	r2, r2, #1
 80018b2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80018b4:	4b45      	ldr	r3, [pc, #276]	; (80019cc <HAL_ADC_Start+0x158>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a45      	ldr	r2, [pc, #276]	; (80019d0 <HAL_ADC_Start+0x15c>)
 80018ba:	fba2 2303 	umull	r2, r3, r2, r3
 80018be:	0c9a      	lsrs	r2, r3, #18
 80018c0:	4613      	mov	r3, r2
 80018c2:	005b      	lsls	r3, r3, #1
 80018c4:	4413      	add	r3, r2
 80018c6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80018c8:	e002      	b.n	80018d0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80018ca:	68bb      	ldr	r3, [r7, #8]
 80018cc:	3b01      	subs	r3, #1
 80018ce:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d1f9      	bne.n	80018ca <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	689b      	ldr	r3, [r3, #8]
 80018dc:	f003 0301 	and.w	r3, r3, #1
 80018e0:	2b01      	cmp	r3, #1
 80018e2:	d15f      	bne.n	80019a4 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80018ec:	f023 0301 	bic.w	r3, r3, #1
 80018f0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001902:	2b00      	cmp	r3, #0
 8001904:	d007      	beq.n	8001916 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800190e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800191a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800191e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001922:	d106      	bne.n	8001932 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001928:	f023 0206 	bic.w	r2, r3, #6
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	645a      	str	r2, [r3, #68]	; 0x44
 8001930:	e002      	b.n	8001938 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2200      	movs	r2, #0
 8001936:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2200      	movs	r2, #0
 800193c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001940:	4b24      	ldr	r3, [pc, #144]	; (80019d4 <HAL_ADC_Start+0x160>)
 8001942:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800194c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	f003 031f 	and.w	r3, r3, #31
 8001956:	2b00      	cmp	r3, #0
 8001958:	d10f      	bne.n	800197a <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	689b      	ldr	r3, [r3, #8]
 8001960:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001964:	2b00      	cmp	r3, #0
 8001966:	d129      	bne.n	80019bc <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	689a      	ldr	r2, [r3, #8]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001976:	609a      	str	r2, [r3, #8]
 8001978:	e020      	b.n	80019bc <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4a16      	ldr	r2, [pc, #88]	; (80019d8 <HAL_ADC_Start+0x164>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d11b      	bne.n	80019bc <HAL_ADC_Start+0x148>
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	689b      	ldr	r3, [r3, #8]
 800198a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800198e:	2b00      	cmp	r3, #0
 8001990:	d114      	bne.n	80019bc <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	689a      	ldr	r2, [r3, #8]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80019a0:	609a      	str	r2, [r3, #8]
 80019a2:	e00b      	b.n	80019bc <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a8:	f043 0210 	orr.w	r2, r3, #16
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019b4:	f043 0201 	orr.w	r2, r3, #1
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80019bc:	2300      	movs	r3, #0
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3714      	adds	r7, #20
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr
 80019ca:	bf00      	nop
 80019cc:	20000100 	.word	0x20000100
 80019d0:	431bde83 	.word	0x431bde83
 80019d4:	40012300 	.word	0x40012300
 80019d8:	40012000 	.word	0x40012000

080019dc <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b084      	sub	sp, #16
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
 80019e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80019e6:	2300      	movs	r3, #0
 80019e8:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	689b      	ldr	r3, [r3, #8]
 80019f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019f8:	d113      	bne.n	8001a22 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001a04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a08:	d10b      	bne.n	8001a22 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0e:	f043 0220 	orr.w	r2, r3, #32
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2200      	movs	r2, #0
 8001a1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e063      	b.n	8001aea <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001a22:	f7ff fed7 	bl	80017d4 <HAL_GetTick>
 8001a26:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001a28:	e021      	b.n	8001a6e <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001a30:	d01d      	beq.n	8001a6e <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d007      	beq.n	8001a48 <HAL_ADC_PollForConversion+0x6c>
 8001a38:	f7ff fecc 	bl	80017d4 <HAL_GetTick>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	1ad3      	subs	r3, r2, r3
 8001a42:	683a      	ldr	r2, [r7, #0]
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d212      	bcs.n	8001a6e <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f003 0302 	and.w	r3, r3, #2
 8001a52:	2b02      	cmp	r3, #2
 8001a54:	d00b      	beq.n	8001a6e <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5a:	f043 0204 	orr.w	r2, r3, #4
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2200      	movs	r2, #0
 8001a66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	e03d      	b.n	8001aea <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f003 0302 	and.w	r3, r3, #2
 8001a78:	2b02      	cmp	r3, #2
 8001a7a:	d1d6      	bne.n	8001a2a <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f06f 0212 	mvn.w	r2, #18
 8001a84:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d123      	bne.n	8001ae8 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d11f      	bne.n	8001ae8 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aae:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d006      	beq.n	8001ac4 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d111      	bne.n	8001ae8 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d105      	bne.n	8001ae8 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae0:	f043 0201 	orr.w	r2, r3, #1
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001ae8:	2300      	movs	r3, #0
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	3710      	adds	r7, #16
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}

08001af2 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001af2:	b480      	push	{r7}
 8001af4:	b083      	sub	sp, #12
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	370c      	adds	r7, #12
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr

08001b0c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b085      	sub	sp, #20
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
 8001b14:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001b16:	2300      	movs	r3, #0
 8001b18:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b20:	2b01      	cmp	r3, #1
 8001b22:	d101      	bne.n	8001b28 <HAL_ADC_ConfigChannel+0x1c>
 8001b24:	2302      	movs	r3, #2
 8001b26:	e105      	b.n	8001d34 <HAL_ADC_ConfigChannel+0x228>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	2b09      	cmp	r3, #9
 8001b36:	d925      	bls.n	8001b84 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	68d9      	ldr	r1, [r3, #12]
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	b29b      	uxth	r3, r3
 8001b44:	461a      	mov	r2, r3
 8001b46:	4613      	mov	r3, r2
 8001b48:	005b      	lsls	r3, r3, #1
 8001b4a:	4413      	add	r3, r2
 8001b4c:	3b1e      	subs	r3, #30
 8001b4e:	2207      	movs	r2, #7
 8001b50:	fa02 f303 	lsl.w	r3, r2, r3
 8001b54:	43da      	mvns	r2, r3
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	400a      	ands	r2, r1
 8001b5c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	68d9      	ldr	r1, [r3, #12]
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	689a      	ldr	r2, [r3, #8]
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	b29b      	uxth	r3, r3
 8001b6e:	4618      	mov	r0, r3
 8001b70:	4603      	mov	r3, r0
 8001b72:	005b      	lsls	r3, r3, #1
 8001b74:	4403      	add	r3, r0
 8001b76:	3b1e      	subs	r3, #30
 8001b78:	409a      	lsls	r2, r3
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	430a      	orrs	r2, r1
 8001b80:	60da      	str	r2, [r3, #12]
 8001b82:	e022      	b.n	8001bca <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	6919      	ldr	r1, [r3, #16]
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	b29b      	uxth	r3, r3
 8001b90:	461a      	mov	r2, r3
 8001b92:	4613      	mov	r3, r2
 8001b94:	005b      	lsls	r3, r3, #1
 8001b96:	4413      	add	r3, r2
 8001b98:	2207      	movs	r2, #7
 8001b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9e:	43da      	mvns	r2, r3
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	400a      	ands	r2, r1
 8001ba6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	6919      	ldr	r1, [r3, #16]
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	689a      	ldr	r2, [r3, #8]
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	b29b      	uxth	r3, r3
 8001bb8:	4618      	mov	r0, r3
 8001bba:	4603      	mov	r3, r0
 8001bbc:	005b      	lsls	r3, r3, #1
 8001bbe:	4403      	add	r3, r0
 8001bc0:	409a      	lsls	r2, r3
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	430a      	orrs	r2, r1
 8001bc8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	2b06      	cmp	r3, #6
 8001bd0:	d824      	bhi.n	8001c1c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	685a      	ldr	r2, [r3, #4]
 8001bdc:	4613      	mov	r3, r2
 8001bde:	009b      	lsls	r3, r3, #2
 8001be0:	4413      	add	r3, r2
 8001be2:	3b05      	subs	r3, #5
 8001be4:	221f      	movs	r2, #31
 8001be6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bea:	43da      	mvns	r2, r3
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	400a      	ands	r2, r1
 8001bf2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	b29b      	uxth	r3, r3
 8001c00:	4618      	mov	r0, r3
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	685a      	ldr	r2, [r3, #4]
 8001c06:	4613      	mov	r3, r2
 8001c08:	009b      	lsls	r3, r3, #2
 8001c0a:	4413      	add	r3, r2
 8001c0c:	3b05      	subs	r3, #5
 8001c0e:	fa00 f203 	lsl.w	r2, r0, r3
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	430a      	orrs	r2, r1
 8001c18:	635a      	str	r2, [r3, #52]	; 0x34
 8001c1a:	e04c      	b.n	8001cb6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	2b0c      	cmp	r3, #12
 8001c22:	d824      	bhi.n	8001c6e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	685a      	ldr	r2, [r3, #4]
 8001c2e:	4613      	mov	r3, r2
 8001c30:	009b      	lsls	r3, r3, #2
 8001c32:	4413      	add	r3, r2
 8001c34:	3b23      	subs	r3, #35	; 0x23
 8001c36:	221f      	movs	r2, #31
 8001c38:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3c:	43da      	mvns	r2, r3
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	400a      	ands	r2, r1
 8001c44:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	b29b      	uxth	r3, r3
 8001c52:	4618      	mov	r0, r3
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	685a      	ldr	r2, [r3, #4]
 8001c58:	4613      	mov	r3, r2
 8001c5a:	009b      	lsls	r3, r3, #2
 8001c5c:	4413      	add	r3, r2
 8001c5e:	3b23      	subs	r3, #35	; 0x23
 8001c60:	fa00 f203 	lsl.w	r2, r0, r3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	430a      	orrs	r2, r1
 8001c6a:	631a      	str	r2, [r3, #48]	; 0x30
 8001c6c:	e023      	b.n	8001cb6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	685a      	ldr	r2, [r3, #4]
 8001c78:	4613      	mov	r3, r2
 8001c7a:	009b      	lsls	r3, r3, #2
 8001c7c:	4413      	add	r3, r2
 8001c7e:	3b41      	subs	r3, #65	; 0x41
 8001c80:	221f      	movs	r2, #31
 8001c82:	fa02 f303 	lsl.w	r3, r2, r3
 8001c86:	43da      	mvns	r2, r3
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	400a      	ands	r2, r1
 8001c8e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	b29b      	uxth	r3, r3
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	685a      	ldr	r2, [r3, #4]
 8001ca2:	4613      	mov	r3, r2
 8001ca4:	009b      	lsls	r3, r3, #2
 8001ca6:	4413      	add	r3, r2
 8001ca8:	3b41      	subs	r3, #65	; 0x41
 8001caa:	fa00 f203 	lsl.w	r2, r0, r3
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	430a      	orrs	r2, r1
 8001cb4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001cb6:	4b22      	ldr	r3, [pc, #136]	; (8001d40 <HAL_ADC_ConfigChannel+0x234>)
 8001cb8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a21      	ldr	r2, [pc, #132]	; (8001d44 <HAL_ADC_ConfigChannel+0x238>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d109      	bne.n	8001cd8 <HAL_ADC_ConfigChannel+0x1cc>
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	2b12      	cmp	r3, #18
 8001cca:	d105      	bne.n	8001cd8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a19      	ldr	r2, [pc, #100]	; (8001d44 <HAL_ADC_ConfigChannel+0x238>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d123      	bne.n	8001d2a <HAL_ADC_ConfigChannel+0x21e>
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	2b10      	cmp	r3, #16
 8001ce8:	d003      	beq.n	8001cf2 <HAL_ADC_ConfigChannel+0x1e6>
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	2b11      	cmp	r3, #17
 8001cf0:	d11b      	bne.n	8001d2a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	2b10      	cmp	r3, #16
 8001d04:	d111      	bne.n	8001d2a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001d06:	4b10      	ldr	r3, [pc, #64]	; (8001d48 <HAL_ADC_ConfigChannel+0x23c>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a10      	ldr	r2, [pc, #64]	; (8001d4c <HAL_ADC_ConfigChannel+0x240>)
 8001d0c:	fba2 2303 	umull	r2, r3, r2, r3
 8001d10:	0c9a      	lsrs	r2, r3, #18
 8001d12:	4613      	mov	r3, r2
 8001d14:	009b      	lsls	r3, r3, #2
 8001d16:	4413      	add	r3, r2
 8001d18:	005b      	lsls	r3, r3, #1
 8001d1a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001d1c:	e002      	b.n	8001d24 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001d1e:	68bb      	ldr	r3, [r7, #8]
 8001d20:	3b01      	subs	r3, #1
 8001d22:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d1f9      	bne.n	8001d1e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001d32:	2300      	movs	r3, #0
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	3714      	adds	r7, #20
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr
 8001d40:	40012300 	.word	0x40012300
 8001d44:	40012000 	.word	0x40012000
 8001d48:	20000100 	.word	0x20000100
 8001d4c:	431bde83 	.word	0x431bde83

08001d50 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b085      	sub	sp, #20
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d58:	4b79      	ldr	r3, [pc, #484]	; (8001f40 <ADC_Init+0x1f0>)
 8001d5a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	685a      	ldr	r2, [r3, #4]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	431a      	orrs	r2, r3
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	685a      	ldr	r2, [r3, #4]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001d84:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	6859      	ldr	r1, [r3, #4]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	691b      	ldr	r3, [r3, #16]
 8001d90:	021a      	lsls	r2, r3, #8
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	430a      	orrs	r2, r1
 8001d98:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	685a      	ldr	r2, [r3, #4]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001da8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	6859      	ldr	r1, [r3, #4]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	689a      	ldr	r2, [r3, #8]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	430a      	orrs	r2, r1
 8001dba:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	689a      	ldr	r2, [r3, #8]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001dca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	6899      	ldr	r1, [r3, #8]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	68da      	ldr	r2, [r3, #12]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	430a      	orrs	r2, r1
 8001ddc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001de2:	4a58      	ldr	r2, [pc, #352]	; (8001f44 <ADC_Init+0x1f4>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d022      	beq.n	8001e2e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	689a      	ldr	r2, [r3, #8]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001df6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	6899      	ldr	r1, [r3, #8]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	430a      	orrs	r2, r1
 8001e08:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	689a      	ldr	r2, [r3, #8]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001e18:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	6899      	ldr	r1, [r3, #8]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	430a      	orrs	r2, r1
 8001e2a:	609a      	str	r2, [r3, #8]
 8001e2c:	e00f      	b.n	8001e4e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	689a      	ldr	r2, [r3, #8]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e3c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	689a      	ldr	r2, [r3, #8]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001e4c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	689a      	ldr	r2, [r3, #8]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f022 0202 	bic.w	r2, r2, #2
 8001e5c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	6899      	ldr	r1, [r3, #8]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	7e1b      	ldrb	r3, [r3, #24]
 8001e68:	005a      	lsls	r2, r3, #1
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	430a      	orrs	r2, r1
 8001e70:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d01b      	beq.n	8001eb4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	685a      	ldr	r2, [r3, #4]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001e8a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	685a      	ldr	r2, [r3, #4]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001e9a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	6859      	ldr	r1, [r3, #4]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea6:	3b01      	subs	r3, #1
 8001ea8:	035a      	lsls	r2, r3, #13
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	430a      	orrs	r2, r1
 8001eb0:	605a      	str	r2, [r3, #4]
 8001eb2:	e007      	b.n	8001ec4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	685a      	ldr	r2, [r3, #4]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ec2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001ed2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	69db      	ldr	r3, [r3, #28]
 8001ede:	3b01      	subs	r3, #1
 8001ee0:	051a      	lsls	r2, r3, #20
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	430a      	orrs	r2, r1
 8001ee8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	689a      	ldr	r2, [r3, #8]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001ef8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	6899      	ldr	r1, [r3, #8]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001f06:	025a      	lsls	r2, r3, #9
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	430a      	orrs	r2, r1
 8001f0e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	689a      	ldr	r2, [r3, #8]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f1e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	6899      	ldr	r1, [r3, #8]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	695b      	ldr	r3, [r3, #20]
 8001f2a:	029a      	lsls	r2, r3, #10
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	430a      	orrs	r2, r1
 8001f32:	609a      	str	r2, [r3, #8]
}
 8001f34:	bf00      	nop
 8001f36:	3714      	adds	r7, #20
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr
 8001f40:	40012300 	.word	0x40012300
 8001f44:	0f000001 	.word	0x0f000001

08001f48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b085      	sub	sp, #20
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	f003 0307 	and.w	r3, r3, #7
 8001f56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f58:	4b0c      	ldr	r3, [pc, #48]	; (8001f8c <__NVIC_SetPriorityGrouping+0x44>)
 8001f5a:	68db      	ldr	r3, [r3, #12]
 8001f5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f5e:	68ba      	ldr	r2, [r7, #8]
 8001f60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f64:	4013      	ands	r3, r2
 8001f66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f7a:	4a04      	ldr	r2, [pc, #16]	; (8001f8c <__NVIC_SetPriorityGrouping+0x44>)
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	60d3      	str	r3, [r2, #12]
}
 8001f80:	bf00      	nop
 8001f82:	3714      	adds	r7, #20
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr
 8001f8c:	e000ed00 	.word	0xe000ed00

08001f90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f90:	b480      	push	{r7}
 8001f92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f94:	4b04      	ldr	r3, [pc, #16]	; (8001fa8 <__NVIC_GetPriorityGrouping+0x18>)
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	0a1b      	lsrs	r3, r3, #8
 8001f9a:	f003 0307 	and.w	r3, r3, #7
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr
 8001fa8:	e000ed00 	.word	0xe000ed00

08001fac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b083      	sub	sp, #12
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	db0b      	blt.n	8001fd6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fbe:	79fb      	ldrb	r3, [r7, #7]
 8001fc0:	f003 021f 	and.w	r2, r3, #31
 8001fc4:	4907      	ldr	r1, [pc, #28]	; (8001fe4 <__NVIC_EnableIRQ+0x38>)
 8001fc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fca:	095b      	lsrs	r3, r3, #5
 8001fcc:	2001      	movs	r0, #1
 8001fce:	fa00 f202 	lsl.w	r2, r0, r2
 8001fd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001fd6:	bf00      	nop
 8001fd8:	370c      	adds	r7, #12
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr
 8001fe2:	bf00      	nop
 8001fe4:	e000e100 	.word	0xe000e100

08001fe8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	4603      	mov	r3, r0
 8001ff0:	6039      	str	r1, [r7, #0]
 8001ff2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ff4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	db0a      	blt.n	8002012 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	b2da      	uxtb	r2, r3
 8002000:	490c      	ldr	r1, [pc, #48]	; (8002034 <__NVIC_SetPriority+0x4c>)
 8002002:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002006:	0112      	lsls	r2, r2, #4
 8002008:	b2d2      	uxtb	r2, r2
 800200a:	440b      	add	r3, r1
 800200c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002010:	e00a      	b.n	8002028 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	b2da      	uxtb	r2, r3
 8002016:	4908      	ldr	r1, [pc, #32]	; (8002038 <__NVIC_SetPriority+0x50>)
 8002018:	79fb      	ldrb	r3, [r7, #7]
 800201a:	f003 030f 	and.w	r3, r3, #15
 800201e:	3b04      	subs	r3, #4
 8002020:	0112      	lsls	r2, r2, #4
 8002022:	b2d2      	uxtb	r2, r2
 8002024:	440b      	add	r3, r1
 8002026:	761a      	strb	r2, [r3, #24]
}
 8002028:	bf00      	nop
 800202a:	370c      	adds	r7, #12
 800202c:	46bd      	mov	sp, r7
 800202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002032:	4770      	bx	lr
 8002034:	e000e100 	.word	0xe000e100
 8002038:	e000ed00 	.word	0xe000ed00

0800203c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800203c:	b480      	push	{r7}
 800203e:	b089      	sub	sp, #36	; 0x24
 8002040:	af00      	add	r7, sp, #0
 8002042:	60f8      	str	r0, [r7, #12]
 8002044:	60b9      	str	r1, [r7, #8]
 8002046:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	f003 0307 	and.w	r3, r3, #7
 800204e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002050:	69fb      	ldr	r3, [r7, #28]
 8002052:	f1c3 0307 	rsb	r3, r3, #7
 8002056:	2b04      	cmp	r3, #4
 8002058:	bf28      	it	cs
 800205a:	2304      	movcs	r3, #4
 800205c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	3304      	adds	r3, #4
 8002062:	2b06      	cmp	r3, #6
 8002064:	d902      	bls.n	800206c <NVIC_EncodePriority+0x30>
 8002066:	69fb      	ldr	r3, [r7, #28]
 8002068:	3b03      	subs	r3, #3
 800206a:	e000      	b.n	800206e <NVIC_EncodePriority+0x32>
 800206c:	2300      	movs	r3, #0
 800206e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002070:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002074:	69bb      	ldr	r3, [r7, #24]
 8002076:	fa02 f303 	lsl.w	r3, r2, r3
 800207a:	43da      	mvns	r2, r3
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	401a      	ands	r2, r3
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002084:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	fa01 f303 	lsl.w	r3, r1, r3
 800208e:	43d9      	mvns	r1, r3
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002094:	4313      	orrs	r3, r2
         );
}
 8002096:	4618      	mov	r0, r3
 8002098:	3724      	adds	r7, #36	; 0x24
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr

080020a2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020a2:	b580      	push	{r7, lr}
 80020a4:	b082      	sub	sp, #8
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020aa:	6878      	ldr	r0, [r7, #4]
 80020ac:	f7ff ff4c 	bl	8001f48 <__NVIC_SetPriorityGrouping>
}
 80020b0:	bf00      	nop
 80020b2:	3708      	adds	r7, #8
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}

080020b8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b086      	sub	sp, #24
 80020bc:	af00      	add	r7, sp, #0
 80020be:	4603      	mov	r3, r0
 80020c0:	60b9      	str	r1, [r7, #8]
 80020c2:	607a      	str	r2, [r7, #4]
 80020c4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020c6:	2300      	movs	r3, #0
 80020c8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020ca:	f7ff ff61 	bl	8001f90 <__NVIC_GetPriorityGrouping>
 80020ce:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020d0:	687a      	ldr	r2, [r7, #4]
 80020d2:	68b9      	ldr	r1, [r7, #8]
 80020d4:	6978      	ldr	r0, [r7, #20]
 80020d6:	f7ff ffb1 	bl	800203c <NVIC_EncodePriority>
 80020da:	4602      	mov	r2, r0
 80020dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020e0:	4611      	mov	r1, r2
 80020e2:	4618      	mov	r0, r3
 80020e4:	f7ff ff80 	bl	8001fe8 <__NVIC_SetPriority>
}
 80020e8:	bf00      	nop
 80020ea:	3718      	adds	r7, #24
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}

080020f0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b082      	sub	sp, #8
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	4603      	mov	r3, r0
 80020f8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020fe:	4618      	mov	r0, r3
 8002100:	f7ff ff54 	bl	8001fac <__NVIC_EnableIRQ>
}
 8002104:	bf00      	nop
 8002106:	3708      	adds	r7, #8
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}

0800210c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b084      	sub	sp, #16
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002118:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800211a:	f7ff fb5b 	bl	80017d4 <HAL_GetTick>
 800211e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002126:	b2db      	uxtb	r3, r3
 8002128:	2b02      	cmp	r3, #2
 800212a:	d008      	beq.n	800213e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2280      	movs	r2, #128	; 0x80
 8002130:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2200      	movs	r2, #0
 8002136:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e052      	b.n	80021e4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f022 0216 	bic.w	r2, r2, #22
 800214c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	695a      	ldr	r2, [r3, #20]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800215c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002162:	2b00      	cmp	r3, #0
 8002164:	d103      	bne.n	800216e <HAL_DMA_Abort+0x62>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800216a:	2b00      	cmp	r3, #0
 800216c:	d007      	beq.n	800217e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f022 0208 	bic.w	r2, r2, #8
 800217c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f022 0201 	bic.w	r2, r2, #1
 800218c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800218e:	e013      	b.n	80021b8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002190:	f7ff fb20 	bl	80017d4 <HAL_GetTick>
 8002194:	4602      	mov	r2, r0
 8002196:	68bb      	ldr	r3, [r7, #8]
 8002198:	1ad3      	subs	r3, r2, r3
 800219a:	2b05      	cmp	r3, #5
 800219c:	d90c      	bls.n	80021b8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2220      	movs	r2, #32
 80021a2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2203      	movs	r2, #3
 80021a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2200      	movs	r2, #0
 80021b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80021b4:	2303      	movs	r3, #3
 80021b6:	e015      	b.n	80021e4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 0301 	and.w	r3, r3, #1
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d1e4      	bne.n	8002190 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021ca:	223f      	movs	r2, #63	; 0x3f
 80021cc:	409a      	lsls	r2, r3
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2201      	movs	r2, #1
 80021d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2200      	movs	r2, #0
 80021de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80021e2:	2300      	movs	r3, #0
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	3710      	adds	r7, #16
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}

080021ec <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b083      	sub	sp, #12
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80021fa:	b2db      	uxtb	r3, r3
 80021fc:	2b02      	cmp	r3, #2
 80021fe:	d004      	beq.n	800220a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2280      	movs	r2, #128	; 0x80
 8002204:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	e00c      	b.n	8002224 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2205      	movs	r2, #5
 800220e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f022 0201 	bic.w	r2, r2, #1
 8002220:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002222:	2300      	movs	r3, #0
}
 8002224:	4618      	mov	r0, r3
 8002226:	370c      	adds	r7, #12
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr

08002230 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002230:	b480      	push	{r7}
 8002232:	b089      	sub	sp, #36	; 0x24
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
 8002238:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800223a:	2300      	movs	r3, #0
 800223c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800223e:	2300      	movs	r3, #0
 8002240:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002242:	2300      	movs	r3, #0
 8002244:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002246:	2300      	movs	r3, #0
 8002248:	61fb      	str	r3, [r7, #28]
 800224a:	e14d      	b.n	80024e8 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800224c:	2201      	movs	r2, #1
 800224e:	69fb      	ldr	r3, [r7, #28]
 8002250:	fa02 f303 	lsl.w	r3, r2, r3
 8002254:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	697a      	ldr	r2, [r7, #20]
 800225c:	4013      	ands	r3, r2
 800225e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002260:	693a      	ldr	r2, [r7, #16]
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	429a      	cmp	r2, r3
 8002266:	f040 813c 	bne.w	80024e2 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	f003 0303 	and.w	r3, r3, #3
 8002272:	2b01      	cmp	r3, #1
 8002274:	d005      	beq.n	8002282 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800227e:	2b02      	cmp	r3, #2
 8002280:	d130      	bne.n	80022e4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002288:	69fb      	ldr	r3, [r7, #28]
 800228a:	005b      	lsls	r3, r3, #1
 800228c:	2203      	movs	r2, #3
 800228e:	fa02 f303 	lsl.w	r3, r2, r3
 8002292:	43db      	mvns	r3, r3
 8002294:	69ba      	ldr	r2, [r7, #24]
 8002296:	4013      	ands	r3, r2
 8002298:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	68da      	ldr	r2, [r3, #12]
 800229e:	69fb      	ldr	r3, [r7, #28]
 80022a0:	005b      	lsls	r3, r3, #1
 80022a2:	fa02 f303 	lsl.w	r3, r2, r3
 80022a6:	69ba      	ldr	r2, [r7, #24]
 80022a8:	4313      	orrs	r3, r2
 80022aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	69ba      	ldr	r2, [r7, #24]
 80022b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022b8:	2201      	movs	r2, #1
 80022ba:	69fb      	ldr	r3, [r7, #28]
 80022bc:	fa02 f303 	lsl.w	r3, r2, r3
 80022c0:	43db      	mvns	r3, r3
 80022c2:	69ba      	ldr	r2, [r7, #24]
 80022c4:	4013      	ands	r3, r2
 80022c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	091b      	lsrs	r3, r3, #4
 80022ce:	f003 0201 	and.w	r2, r3, #1
 80022d2:	69fb      	ldr	r3, [r7, #28]
 80022d4:	fa02 f303 	lsl.w	r3, r2, r3
 80022d8:	69ba      	ldr	r2, [r7, #24]
 80022da:	4313      	orrs	r3, r2
 80022dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	69ba      	ldr	r2, [r7, #24]
 80022e2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	f003 0303 	and.w	r3, r3, #3
 80022ec:	2b03      	cmp	r3, #3
 80022ee:	d017      	beq.n	8002320 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80022f6:	69fb      	ldr	r3, [r7, #28]
 80022f8:	005b      	lsls	r3, r3, #1
 80022fa:	2203      	movs	r2, #3
 80022fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002300:	43db      	mvns	r3, r3
 8002302:	69ba      	ldr	r2, [r7, #24]
 8002304:	4013      	ands	r3, r2
 8002306:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	689a      	ldr	r2, [r3, #8]
 800230c:	69fb      	ldr	r3, [r7, #28]
 800230e:	005b      	lsls	r3, r3, #1
 8002310:	fa02 f303 	lsl.w	r3, r2, r3
 8002314:	69ba      	ldr	r2, [r7, #24]
 8002316:	4313      	orrs	r3, r2
 8002318:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	69ba      	ldr	r2, [r7, #24]
 800231e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	f003 0303 	and.w	r3, r3, #3
 8002328:	2b02      	cmp	r3, #2
 800232a:	d123      	bne.n	8002374 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800232c:	69fb      	ldr	r3, [r7, #28]
 800232e:	08da      	lsrs	r2, r3, #3
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	3208      	adds	r2, #8
 8002334:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002338:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800233a:	69fb      	ldr	r3, [r7, #28]
 800233c:	f003 0307 	and.w	r3, r3, #7
 8002340:	009b      	lsls	r3, r3, #2
 8002342:	220f      	movs	r2, #15
 8002344:	fa02 f303 	lsl.w	r3, r2, r3
 8002348:	43db      	mvns	r3, r3
 800234a:	69ba      	ldr	r2, [r7, #24]
 800234c:	4013      	ands	r3, r2
 800234e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	691a      	ldr	r2, [r3, #16]
 8002354:	69fb      	ldr	r3, [r7, #28]
 8002356:	f003 0307 	and.w	r3, r3, #7
 800235a:	009b      	lsls	r3, r3, #2
 800235c:	fa02 f303 	lsl.w	r3, r2, r3
 8002360:	69ba      	ldr	r2, [r7, #24]
 8002362:	4313      	orrs	r3, r2
 8002364:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002366:	69fb      	ldr	r3, [r7, #28]
 8002368:	08da      	lsrs	r2, r3, #3
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	3208      	adds	r2, #8
 800236e:	69b9      	ldr	r1, [r7, #24]
 8002370:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800237a:	69fb      	ldr	r3, [r7, #28]
 800237c:	005b      	lsls	r3, r3, #1
 800237e:	2203      	movs	r2, #3
 8002380:	fa02 f303 	lsl.w	r3, r2, r3
 8002384:	43db      	mvns	r3, r3
 8002386:	69ba      	ldr	r2, [r7, #24]
 8002388:	4013      	ands	r3, r2
 800238a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	f003 0203 	and.w	r2, r3, #3
 8002394:	69fb      	ldr	r3, [r7, #28]
 8002396:	005b      	lsls	r3, r3, #1
 8002398:	fa02 f303 	lsl.w	r3, r2, r3
 800239c:	69ba      	ldr	r2, [r7, #24]
 800239e:	4313      	orrs	r3, r2
 80023a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	69ba      	ldr	r2, [r7, #24]
 80023a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	f000 8096 	beq.w	80024e2 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023b6:	2300      	movs	r3, #0
 80023b8:	60fb      	str	r3, [r7, #12]
 80023ba:	4b51      	ldr	r3, [pc, #324]	; (8002500 <HAL_GPIO_Init+0x2d0>)
 80023bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023be:	4a50      	ldr	r2, [pc, #320]	; (8002500 <HAL_GPIO_Init+0x2d0>)
 80023c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023c4:	6453      	str	r3, [r2, #68]	; 0x44
 80023c6:	4b4e      	ldr	r3, [pc, #312]	; (8002500 <HAL_GPIO_Init+0x2d0>)
 80023c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023ce:	60fb      	str	r3, [r7, #12]
 80023d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80023d2:	4a4c      	ldr	r2, [pc, #304]	; (8002504 <HAL_GPIO_Init+0x2d4>)
 80023d4:	69fb      	ldr	r3, [r7, #28]
 80023d6:	089b      	lsrs	r3, r3, #2
 80023d8:	3302      	adds	r3, #2
 80023da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80023e0:	69fb      	ldr	r3, [r7, #28]
 80023e2:	f003 0303 	and.w	r3, r3, #3
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	220f      	movs	r2, #15
 80023ea:	fa02 f303 	lsl.w	r3, r2, r3
 80023ee:	43db      	mvns	r3, r3
 80023f0:	69ba      	ldr	r2, [r7, #24]
 80023f2:	4013      	ands	r3, r2
 80023f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	4a43      	ldr	r2, [pc, #268]	; (8002508 <HAL_GPIO_Init+0x2d8>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d00d      	beq.n	800241a <HAL_GPIO_Init+0x1ea>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4a42      	ldr	r2, [pc, #264]	; (800250c <HAL_GPIO_Init+0x2dc>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d007      	beq.n	8002416 <HAL_GPIO_Init+0x1e6>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	4a41      	ldr	r2, [pc, #260]	; (8002510 <HAL_GPIO_Init+0x2e0>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d101      	bne.n	8002412 <HAL_GPIO_Init+0x1e2>
 800240e:	2302      	movs	r3, #2
 8002410:	e004      	b.n	800241c <HAL_GPIO_Init+0x1ec>
 8002412:	2307      	movs	r3, #7
 8002414:	e002      	b.n	800241c <HAL_GPIO_Init+0x1ec>
 8002416:	2301      	movs	r3, #1
 8002418:	e000      	b.n	800241c <HAL_GPIO_Init+0x1ec>
 800241a:	2300      	movs	r3, #0
 800241c:	69fa      	ldr	r2, [r7, #28]
 800241e:	f002 0203 	and.w	r2, r2, #3
 8002422:	0092      	lsls	r2, r2, #2
 8002424:	4093      	lsls	r3, r2
 8002426:	69ba      	ldr	r2, [r7, #24]
 8002428:	4313      	orrs	r3, r2
 800242a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800242c:	4935      	ldr	r1, [pc, #212]	; (8002504 <HAL_GPIO_Init+0x2d4>)
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	089b      	lsrs	r3, r3, #2
 8002432:	3302      	adds	r3, #2
 8002434:	69ba      	ldr	r2, [r7, #24]
 8002436:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800243a:	4b36      	ldr	r3, [pc, #216]	; (8002514 <HAL_GPIO_Init+0x2e4>)
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	43db      	mvns	r3, r3
 8002444:	69ba      	ldr	r2, [r7, #24]
 8002446:	4013      	ands	r3, r2
 8002448:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002452:	2b00      	cmp	r3, #0
 8002454:	d003      	beq.n	800245e <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8002456:	69ba      	ldr	r2, [r7, #24]
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	4313      	orrs	r3, r2
 800245c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800245e:	4a2d      	ldr	r2, [pc, #180]	; (8002514 <HAL_GPIO_Init+0x2e4>)
 8002460:	69bb      	ldr	r3, [r7, #24]
 8002462:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002464:	4b2b      	ldr	r3, [pc, #172]	; (8002514 <HAL_GPIO_Init+0x2e4>)
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	43db      	mvns	r3, r3
 800246e:	69ba      	ldr	r2, [r7, #24]
 8002470:	4013      	ands	r3, r2
 8002472:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800247c:	2b00      	cmp	r3, #0
 800247e:	d003      	beq.n	8002488 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8002480:	69ba      	ldr	r2, [r7, #24]
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	4313      	orrs	r3, r2
 8002486:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002488:	4a22      	ldr	r2, [pc, #136]	; (8002514 <HAL_GPIO_Init+0x2e4>)
 800248a:	69bb      	ldr	r3, [r7, #24]
 800248c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800248e:	4b21      	ldr	r3, [pc, #132]	; (8002514 <HAL_GPIO_Init+0x2e4>)
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	43db      	mvns	r3, r3
 8002498:	69ba      	ldr	r2, [r7, #24]
 800249a:	4013      	ands	r3, r2
 800249c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d003      	beq.n	80024b2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80024aa:	69ba      	ldr	r2, [r7, #24]
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	4313      	orrs	r3, r2
 80024b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024b2:	4a18      	ldr	r2, [pc, #96]	; (8002514 <HAL_GPIO_Init+0x2e4>)
 80024b4:	69bb      	ldr	r3, [r7, #24]
 80024b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024b8:	4b16      	ldr	r3, [pc, #88]	; (8002514 <HAL_GPIO_Init+0x2e4>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	43db      	mvns	r3, r3
 80024c2:	69ba      	ldr	r2, [r7, #24]
 80024c4:	4013      	ands	r3, r2
 80024c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d003      	beq.n	80024dc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80024d4:	69ba      	ldr	r2, [r7, #24]
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	4313      	orrs	r3, r2
 80024da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80024dc:	4a0d      	ldr	r2, [pc, #52]	; (8002514 <HAL_GPIO_Init+0x2e4>)
 80024de:	69bb      	ldr	r3, [r7, #24]
 80024e0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	3301      	adds	r3, #1
 80024e6:	61fb      	str	r3, [r7, #28]
 80024e8:	69fb      	ldr	r3, [r7, #28]
 80024ea:	2b0f      	cmp	r3, #15
 80024ec:	f67f aeae 	bls.w	800224c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80024f0:	bf00      	nop
 80024f2:	bf00      	nop
 80024f4:	3724      	adds	r7, #36	; 0x24
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr
 80024fe:	bf00      	nop
 8002500:	40023800 	.word	0x40023800
 8002504:	40013800 	.word	0x40013800
 8002508:	40020000 	.word	0x40020000
 800250c:	40020400 	.word	0x40020400
 8002510:	40020800 	.word	0x40020800
 8002514:	40013c00 	.word	0x40013c00

08002518 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002518:	b480      	push	{r7}
 800251a:	b083      	sub	sp, #12
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
 8002520:	460b      	mov	r3, r1
 8002522:	807b      	strh	r3, [r7, #2]
 8002524:	4613      	mov	r3, r2
 8002526:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002528:	787b      	ldrb	r3, [r7, #1]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d003      	beq.n	8002536 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800252e:	887a      	ldrh	r2, [r7, #2]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002534:	e003      	b.n	800253e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002536:	887b      	ldrh	r3, [r7, #2]
 8002538:	041a      	lsls	r2, r3, #16
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	619a      	str	r2, [r3, #24]
}
 800253e:	bf00      	nop
 8002540:	370c      	adds	r7, #12
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr
	...

0800254c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b082      	sub	sp, #8
 8002550:	af00      	add	r7, sp, #0
 8002552:	4603      	mov	r3, r0
 8002554:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002556:	4b08      	ldr	r3, [pc, #32]	; (8002578 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002558:	695a      	ldr	r2, [r3, #20]
 800255a:	88fb      	ldrh	r3, [r7, #6]
 800255c:	4013      	ands	r3, r2
 800255e:	2b00      	cmp	r3, #0
 8002560:	d006      	beq.n	8002570 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002562:	4a05      	ldr	r2, [pc, #20]	; (8002578 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002564:	88fb      	ldrh	r3, [r7, #6]
 8002566:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002568:	88fb      	ldrh	r3, [r7, #6]
 800256a:	4618      	mov	r0, r3
 800256c:	f7fe fc96 	bl	8000e9c <HAL_GPIO_EXTI_Callback>
  }
}
 8002570:	bf00      	nop
 8002572:	3708      	adds	r7, #8
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}
 8002578:	40013c00 	.word	0x40013c00

0800257c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b084      	sub	sp, #16
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
 8002584:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d101      	bne.n	8002590 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	e0cc      	b.n	800272a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002590:	4b68      	ldr	r3, [pc, #416]	; (8002734 <HAL_RCC_ClockConfig+0x1b8>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 0307 	and.w	r3, r3, #7
 8002598:	683a      	ldr	r2, [r7, #0]
 800259a:	429a      	cmp	r2, r3
 800259c:	d90c      	bls.n	80025b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800259e:	4b65      	ldr	r3, [pc, #404]	; (8002734 <HAL_RCC_ClockConfig+0x1b8>)
 80025a0:	683a      	ldr	r2, [r7, #0]
 80025a2:	b2d2      	uxtb	r2, r2
 80025a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025a6:	4b63      	ldr	r3, [pc, #396]	; (8002734 <HAL_RCC_ClockConfig+0x1b8>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 0307 	and.w	r3, r3, #7
 80025ae:	683a      	ldr	r2, [r7, #0]
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d001      	beq.n	80025b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	e0b8      	b.n	800272a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 0302 	and.w	r3, r3, #2
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d020      	beq.n	8002606 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 0304 	and.w	r3, r3, #4
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d005      	beq.n	80025dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025d0:	4b59      	ldr	r3, [pc, #356]	; (8002738 <HAL_RCC_ClockConfig+0x1bc>)
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	4a58      	ldr	r2, [pc, #352]	; (8002738 <HAL_RCC_ClockConfig+0x1bc>)
 80025d6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80025da:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f003 0308 	and.w	r3, r3, #8
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d005      	beq.n	80025f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025e8:	4b53      	ldr	r3, [pc, #332]	; (8002738 <HAL_RCC_ClockConfig+0x1bc>)
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	4a52      	ldr	r2, [pc, #328]	; (8002738 <HAL_RCC_ClockConfig+0x1bc>)
 80025ee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80025f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025f4:	4b50      	ldr	r3, [pc, #320]	; (8002738 <HAL_RCC_ClockConfig+0x1bc>)
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	494d      	ldr	r1, [pc, #308]	; (8002738 <HAL_RCC_ClockConfig+0x1bc>)
 8002602:	4313      	orrs	r3, r2
 8002604:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 0301 	and.w	r3, r3, #1
 800260e:	2b00      	cmp	r3, #0
 8002610:	d044      	beq.n	800269c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	2b01      	cmp	r3, #1
 8002618:	d107      	bne.n	800262a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800261a:	4b47      	ldr	r3, [pc, #284]	; (8002738 <HAL_RCC_ClockConfig+0x1bc>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002622:	2b00      	cmp	r3, #0
 8002624:	d119      	bne.n	800265a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e07f      	b.n	800272a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	2b02      	cmp	r3, #2
 8002630:	d003      	beq.n	800263a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002636:	2b03      	cmp	r3, #3
 8002638:	d107      	bne.n	800264a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800263a:	4b3f      	ldr	r3, [pc, #252]	; (8002738 <HAL_RCC_ClockConfig+0x1bc>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002642:	2b00      	cmp	r3, #0
 8002644:	d109      	bne.n	800265a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	e06f      	b.n	800272a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800264a:	4b3b      	ldr	r3, [pc, #236]	; (8002738 <HAL_RCC_ClockConfig+0x1bc>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 0302 	and.w	r3, r3, #2
 8002652:	2b00      	cmp	r3, #0
 8002654:	d101      	bne.n	800265a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e067      	b.n	800272a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800265a:	4b37      	ldr	r3, [pc, #220]	; (8002738 <HAL_RCC_ClockConfig+0x1bc>)
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	f023 0203 	bic.w	r2, r3, #3
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	4934      	ldr	r1, [pc, #208]	; (8002738 <HAL_RCC_ClockConfig+0x1bc>)
 8002668:	4313      	orrs	r3, r2
 800266a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800266c:	f7ff f8b2 	bl	80017d4 <HAL_GetTick>
 8002670:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002672:	e00a      	b.n	800268a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002674:	f7ff f8ae 	bl	80017d4 <HAL_GetTick>
 8002678:	4602      	mov	r2, r0
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	1ad3      	subs	r3, r2, r3
 800267e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002682:	4293      	cmp	r3, r2
 8002684:	d901      	bls.n	800268a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002686:	2303      	movs	r3, #3
 8002688:	e04f      	b.n	800272a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800268a:	4b2b      	ldr	r3, [pc, #172]	; (8002738 <HAL_RCC_ClockConfig+0x1bc>)
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	f003 020c 	and.w	r2, r3, #12
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	009b      	lsls	r3, r3, #2
 8002698:	429a      	cmp	r2, r3
 800269a:	d1eb      	bne.n	8002674 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800269c:	4b25      	ldr	r3, [pc, #148]	; (8002734 <HAL_RCC_ClockConfig+0x1b8>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 0307 	and.w	r3, r3, #7
 80026a4:	683a      	ldr	r2, [r7, #0]
 80026a6:	429a      	cmp	r2, r3
 80026a8:	d20c      	bcs.n	80026c4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026aa:	4b22      	ldr	r3, [pc, #136]	; (8002734 <HAL_RCC_ClockConfig+0x1b8>)
 80026ac:	683a      	ldr	r2, [r7, #0]
 80026ae:	b2d2      	uxtb	r2, r2
 80026b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026b2:	4b20      	ldr	r3, [pc, #128]	; (8002734 <HAL_RCC_ClockConfig+0x1b8>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 0307 	and.w	r3, r3, #7
 80026ba:	683a      	ldr	r2, [r7, #0]
 80026bc:	429a      	cmp	r2, r3
 80026be:	d001      	beq.n	80026c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80026c0:	2301      	movs	r3, #1
 80026c2:	e032      	b.n	800272a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 0304 	and.w	r3, r3, #4
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d008      	beq.n	80026e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026d0:	4b19      	ldr	r3, [pc, #100]	; (8002738 <HAL_RCC_ClockConfig+0x1bc>)
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	68db      	ldr	r3, [r3, #12]
 80026dc:	4916      	ldr	r1, [pc, #88]	; (8002738 <HAL_RCC_ClockConfig+0x1bc>)
 80026de:	4313      	orrs	r3, r2
 80026e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 0308 	and.w	r3, r3, #8
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d009      	beq.n	8002702 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026ee:	4b12      	ldr	r3, [pc, #72]	; (8002738 <HAL_RCC_ClockConfig+0x1bc>)
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	691b      	ldr	r3, [r3, #16]
 80026fa:	00db      	lsls	r3, r3, #3
 80026fc:	490e      	ldr	r1, [pc, #56]	; (8002738 <HAL_RCC_ClockConfig+0x1bc>)
 80026fe:	4313      	orrs	r3, r2
 8002700:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002702:	f000 f821 	bl	8002748 <HAL_RCC_GetSysClockFreq>
 8002706:	4602      	mov	r2, r0
 8002708:	4b0b      	ldr	r3, [pc, #44]	; (8002738 <HAL_RCC_ClockConfig+0x1bc>)
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	091b      	lsrs	r3, r3, #4
 800270e:	f003 030f 	and.w	r3, r3, #15
 8002712:	490a      	ldr	r1, [pc, #40]	; (800273c <HAL_RCC_ClockConfig+0x1c0>)
 8002714:	5ccb      	ldrb	r3, [r1, r3]
 8002716:	fa22 f303 	lsr.w	r3, r2, r3
 800271a:	4a09      	ldr	r2, [pc, #36]	; (8002740 <HAL_RCC_ClockConfig+0x1c4>)
 800271c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800271e:	4b09      	ldr	r3, [pc, #36]	; (8002744 <HAL_RCC_ClockConfig+0x1c8>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4618      	mov	r0, r3
 8002724:	f7fe fd60 	bl	80011e8 <HAL_InitTick>

  return HAL_OK;
 8002728:	2300      	movs	r3, #0
}
 800272a:	4618      	mov	r0, r3
 800272c:	3710      	adds	r7, #16
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}
 8002732:	bf00      	nop
 8002734:	40023c00 	.word	0x40023c00
 8002738:	40023800 	.word	0x40023800
 800273c:	08009c70 	.word	0x08009c70
 8002740:	20000100 	.word	0x20000100
 8002744:	20000104 	.word	0x20000104

08002748 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002748:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800274c:	b094      	sub	sp, #80	; 0x50
 800274e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002750:	2300      	movs	r3, #0
 8002752:	647b      	str	r3, [r7, #68]	; 0x44
 8002754:	2300      	movs	r3, #0
 8002756:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002758:	2300      	movs	r3, #0
 800275a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800275c:	2300      	movs	r3, #0
 800275e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002760:	4b79      	ldr	r3, [pc, #484]	; (8002948 <HAL_RCC_GetSysClockFreq+0x200>)
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	f003 030c 	and.w	r3, r3, #12
 8002768:	2b08      	cmp	r3, #8
 800276a:	d00d      	beq.n	8002788 <HAL_RCC_GetSysClockFreq+0x40>
 800276c:	2b08      	cmp	r3, #8
 800276e:	f200 80e1 	bhi.w	8002934 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002772:	2b00      	cmp	r3, #0
 8002774:	d002      	beq.n	800277c <HAL_RCC_GetSysClockFreq+0x34>
 8002776:	2b04      	cmp	r3, #4
 8002778:	d003      	beq.n	8002782 <HAL_RCC_GetSysClockFreq+0x3a>
 800277a:	e0db      	b.n	8002934 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800277c:	4b73      	ldr	r3, [pc, #460]	; (800294c <HAL_RCC_GetSysClockFreq+0x204>)
 800277e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002780:	e0db      	b.n	800293a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002782:	4b73      	ldr	r3, [pc, #460]	; (8002950 <HAL_RCC_GetSysClockFreq+0x208>)
 8002784:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002786:	e0d8      	b.n	800293a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002788:	4b6f      	ldr	r3, [pc, #444]	; (8002948 <HAL_RCC_GetSysClockFreq+0x200>)
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002790:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002792:	4b6d      	ldr	r3, [pc, #436]	; (8002948 <HAL_RCC_GetSysClockFreq+0x200>)
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800279a:	2b00      	cmp	r3, #0
 800279c:	d063      	beq.n	8002866 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800279e:	4b6a      	ldr	r3, [pc, #424]	; (8002948 <HAL_RCC_GetSysClockFreq+0x200>)
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	099b      	lsrs	r3, r3, #6
 80027a4:	2200      	movs	r2, #0
 80027a6:	63bb      	str	r3, [r7, #56]	; 0x38
 80027a8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80027aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027b0:	633b      	str	r3, [r7, #48]	; 0x30
 80027b2:	2300      	movs	r3, #0
 80027b4:	637b      	str	r3, [r7, #52]	; 0x34
 80027b6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80027ba:	4622      	mov	r2, r4
 80027bc:	462b      	mov	r3, r5
 80027be:	f04f 0000 	mov.w	r0, #0
 80027c2:	f04f 0100 	mov.w	r1, #0
 80027c6:	0159      	lsls	r1, r3, #5
 80027c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80027cc:	0150      	lsls	r0, r2, #5
 80027ce:	4602      	mov	r2, r0
 80027d0:	460b      	mov	r3, r1
 80027d2:	4621      	mov	r1, r4
 80027d4:	1a51      	subs	r1, r2, r1
 80027d6:	6139      	str	r1, [r7, #16]
 80027d8:	4629      	mov	r1, r5
 80027da:	eb63 0301 	sbc.w	r3, r3, r1
 80027de:	617b      	str	r3, [r7, #20]
 80027e0:	f04f 0200 	mov.w	r2, #0
 80027e4:	f04f 0300 	mov.w	r3, #0
 80027e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80027ec:	4659      	mov	r1, fp
 80027ee:	018b      	lsls	r3, r1, #6
 80027f0:	4651      	mov	r1, sl
 80027f2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80027f6:	4651      	mov	r1, sl
 80027f8:	018a      	lsls	r2, r1, #6
 80027fa:	4651      	mov	r1, sl
 80027fc:	ebb2 0801 	subs.w	r8, r2, r1
 8002800:	4659      	mov	r1, fp
 8002802:	eb63 0901 	sbc.w	r9, r3, r1
 8002806:	f04f 0200 	mov.w	r2, #0
 800280a:	f04f 0300 	mov.w	r3, #0
 800280e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002812:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002816:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800281a:	4690      	mov	r8, r2
 800281c:	4699      	mov	r9, r3
 800281e:	4623      	mov	r3, r4
 8002820:	eb18 0303 	adds.w	r3, r8, r3
 8002824:	60bb      	str	r3, [r7, #8]
 8002826:	462b      	mov	r3, r5
 8002828:	eb49 0303 	adc.w	r3, r9, r3
 800282c:	60fb      	str	r3, [r7, #12]
 800282e:	f04f 0200 	mov.w	r2, #0
 8002832:	f04f 0300 	mov.w	r3, #0
 8002836:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800283a:	4629      	mov	r1, r5
 800283c:	024b      	lsls	r3, r1, #9
 800283e:	4621      	mov	r1, r4
 8002840:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002844:	4621      	mov	r1, r4
 8002846:	024a      	lsls	r2, r1, #9
 8002848:	4610      	mov	r0, r2
 800284a:	4619      	mov	r1, r3
 800284c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800284e:	2200      	movs	r2, #0
 8002850:	62bb      	str	r3, [r7, #40]	; 0x28
 8002852:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002854:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002858:	f7fd fd2a 	bl	80002b0 <__aeabi_uldivmod>
 800285c:	4602      	mov	r2, r0
 800285e:	460b      	mov	r3, r1
 8002860:	4613      	mov	r3, r2
 8002862:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002864:	e058      	b.n	8002918 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002866:	4b38      	ldr	r3, [pc, #224]	; (8002948 <HAL_RCC_GetSysClockFreq+0x200>)
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	099b      	lsrs	r3, r3, #6
 800286c:	2200      	movs	r2, #0
 800286e:	4618      	mov	r0, r3
 8002870:	4611      	mov	r1, r2
 8002872:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002876:	623b      	str	r3, [r7, #32]
 8002878:	2300      	movs	r3, #0
 800287a:	627b      	str	r3, [r7, #36]	; 0x24
 800287c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002880:	4642      	mov	r2, r8
 8002882:	464b      	mov	r3, r9
 8002884:	f04f 0000 	mov.w	r0, #0
 8002888:	f04f 0100 	mov.w	r1, #0
 800288c:	0159      	lsls	r1, r3, #5
 800288e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002892:	0150      	lsls	r0, r2, #5
 8002894:	4602      	mov	r2, r0
 8002896:	460b      	mov	r3, r1
 8002898:	4641      	mov	r1, r8
 800289a:	ebb2 0a01 	subs.w	sl, r2, r1
 800289e:	4649      	mov	r1, r9
 80028a0:	eb63 0b01 	sbc.w	fp, r3, r1
 80028a4:	f04f 0200 	mov.w	r2, #0
 80028a8:	f04f 0300 	mov.w	r3, #0
 80028ac:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80028b0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80028b4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80028b8:	ebb2 040a 	subs.w	r4, r2, sl
 80028bc:	eb63 050b 	sbc.w	r5, r3, fp
 80028c0:	f04f 0200 	mov.w	r2, #0
 80028c4:	f04f 0300 	mov.w	r3, #0
 80028c8:	00eb      	lsls	r3, r5, #3
 80028ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80028ce:	00e2      	lsls	r2, r4, #3
 80028d0:	4614      	mov	r4, r2
 80028d2:	461d      	mov	r5, r3
 80028d4:	4643      	mov	r3, r8
 80028d6:	18e3      	adds	r3, r4, r3
 80028d8:	603b      	str	r3, [r7, #0]
 80028da:	464b      	mov	r3, r9
 80028dc:	eb45 0303 	adc.w	r3, r5, r3
 80028e0:	607b      	str	r3, [r7, #4]
 80028e2:	f04f 0200 	mov.w	r2, #0
 80028e6:	f04f 0300 	mov.w	r3, #0
 80028ea:	e9d7 4500 	ldrd	r4, r5, [r7]
 80028ee:	4629      	mov	r1, r5
 80028f0:	028b      	lsls	r3, r1, #10
 80028f2:	4621      	mov	r1, r4
 80028f4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80028f8:	4621      	mov	r1, r4
 80028fa:	028a      	lsls	r2, r1, #10
 80028fc:	4610      	mov	r0, r2
 80028fe:	4619      	mov	r1, r3
 8002900:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002902:	2200      	movs	r2, #0
 8002904:	61bb      	str	r3, [r7, #24]
 8002906:	61fa      	str	r2, [r7, #28]
 8002908:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800290c:	f7fd fcd0 	bl	80002b0 <__aeabi_uldivmod>
 8002910:	4602      	mov	r2, r0
 8002912:	460b      	mov	r3, r1
 8002914:	4613      	mov	r3, r2
 8002916:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002918:	4b0b      	ldr	r3, [pc, #44]	; (8002948 <HAL_RCC_GetSysClockFreq+0x200>)
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	0c1b      	lsrs	r3, r3, #16
 800291e:	f003 0303 	and.w	r3, r3, #3
 8002922:	3301      	adds	r3, #1
 8002924:	005b      	lsls	r3, r3, #1
 8002926:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002928:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800292a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800292c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002930:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002932:	e002      	b.n	800293a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002934:	4b05      	ldr	r3, [pc, #20]	; (800294c <HAL_RCC_GetSysClockFreq+0x204>)
 8002936:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002938:	bf00      	nop
    }
  }
  return sysclockfreq;
 800293a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800293c:	4618      	mov	r0, r3
 800293e:	3750      	adds	r7, #80	; 0x50
 8002940:	46bd      	mov	sp, r7
 8002942:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002946:	bf00      	nop
 8002948:	40023800 	.word	0x40023800
 800294c:	00f42400 	.word	0x00f42400
 8002950:	007a1200 	.word	0x007a1200

08002954 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002954:	b480      	push	{r7}
 8002956:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002958:	4b03      	ldr	r3, [pc, #12]	; (8002968 <HAL_RCC_GetHCLKFreq+0x14>)
 800295a:	681b      	ldr	r3, [r3, #0]
}
 800295c:	4618      	mov	r0, r3
 800295e:	46bd      	mov	sp, r7
 8002960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002964:	4770      	bx	lr
 8002966:	bf00      	nop
 8002968:	20000100 	.word	0x20000100

0800296c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002970:	f7ff fff0 	bl	8002954 <HAL_RCC_GetHCLKFreq>
 8002974:	4602      	mov	r2, r0
 8002976:	4b05      	ldr	r3, [pc, #20]	; (800298c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	0a9b      	lsrs	r3, r3, #10
 800297c:	f003 0307 	and.w	r3, r3, #7
 8002980:	4903      	ldr	r1, [pc, #12]	; (8002990 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002982:	5ccb      	ldrb	r3, [r1, r3]
 8002984:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002988:	4618      	mov	r0, r3
 800298a:	bd80      	pop	{r7, pc}
 800298c:	40023800 	.word	0x40023800
 8002990:	08009c80 	.word	0x08009c80

08002994 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002998:	f7ff ffdc 	bl	8002954 <HAL_RCC_GetHCLKFreq>
 800299c:	4602      	mov	r2, r0
 800299e:	4b05      	ldr	r3, [pc, #20]	; (80029b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	0b5b      	lsrs	r3, r3, #13
 80029a4:	f003 0307 	and.w	r3, r3, #7
 80029a8:	4903      	ldr	r1, [pc, #12]	; (80029b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80029aa:	5ccb      	ldrb	r3, [r1, r3]
 80029ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	bd80      	pop	{r7, pc}
 80029b4:	40023800 	.word	0x40023800
 80029b8:	08009c80 	.word	0x08009c80

080029bc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80029bc:	b480      	push	{r7}
 80029be:	b083      	sub	sp, #12
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
 80029c4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	220f      	movs	r2, #15
 80029ca:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80029cc:	4b12      	ldr	r3, [pc, #72]	; (8002a18 <HAL_RCC_GetClockConfig+0x5c>)
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	f003 0203 	and.w	r2, r3, #3
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80029d8:	4b0f      	ldr	r3, [pc, #60]	; (8002a18 <HAL_RCC_GetClockConfig+0x5c>)
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80029e4:	4b0c      	ldr	r3, [pc, #48]	; (8002a18 <HAL_RCC_GetClockConfig+0x5c>)
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80029f0:	4b09      	ldr	r3, [pc, #36]	; (8002a18 <HAL_RCC_GetClockConfig+0x5c>)
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	08db      	lsrs	r3, r3, #3
 80029f6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80029fe:	4b07      	ldr	r3, [pc, #28]	; (8002a1c <HAL_RCC_GetClockConfig+0x60>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 0207 	and.w	r2, r3, #7
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	601a      	str	r2, [r3, #0]
}
 8002a0a:	bf00      	nop
 8002a0c:	370c      	adds	r7, #12
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a14:	4770      	bx	lr
 8002a16:	bf00      	nop
 8002a18:	40023800 	.word	0x40023800
 8002a1c:	40023c00 	.word	0x40023c00

08002a20 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b086      	sub	sp, #24
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 0304 	and.w	r3, r3, #4
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	f000 8083 	beq.w	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002a3e:	2300      	movs	r3, #0
 8002a40:	60fb      	str	r3, [r7, #12]
 8002a42:	4b61      	ldr	r3, [pc, #388]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a46:	4a60      	ldr	r2, [pc, #384]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002a48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a4c:	6413      	str	r3, [r2, #64]	; 0x40
 8002a4e:	4b5e      	ldr	r3, [pc, #376]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a56:	60fb      	str	r3, [r7, #12]
 8002a58:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002a5a:	4b5c      	ldr	r3, [pc, #368]	; (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a5b      	ldr	r2, [pc, #364]	; (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a64:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002a66:	f7fe feb5 	bl	80017d4 <HAL_GetTick>
 8002a6a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002a6c:	e008      	b.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x60>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002a6e:	f7fe feb1 	bl	80017d4 <HAL_GetTick>
 8002a72:	4602      	mov	r2, r0
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	1ad3      	subs	r3, r2, r3
 8002a78:	2b02      	cmp	r3, #2
 8002a7a:	d901      	bls.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x60>
      {
        return HAL_TIMEOUT;
 8002a7c:	2303      	movs	r3, #3
 8002a7e:	e09f      	b.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002a80:	4b52      	ldr	r3, [pc, #328]	; (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d0f0      	beq.n	8002a6e <HAL_RCCEx_PeriphCLKConfig+0x4e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002a8c:	4b4e      	ldr	r3, [pc, #312]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002a8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a90:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a94:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d02f      	beq.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0xdc>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002aa4:	693a      	ldr	r2, [r7, #16]
 8002aa6:	429a      	cmp	r2, r3
 8002aa8:	d028      	beq.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0xdc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002aaa:	4b47      	ldr	r3, [pc, #284]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002aac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ab2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002ab4:	4b46      	ldr	r3, [pc, #280]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002aba:	4b45      	ldr	r3, [pc, #276]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002abc:	2200      	movs	r2, #0
 8002abe:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002ac0:	4a41      	ldr	r2, [pc, #260]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002ac6:	4b40      	ldr	r3, [pc, #256]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002ac8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aca:	f003 0301 	and.w	r3, r3, #1
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	d114      	bne.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0xdc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002ad2:	f7fe fe7f 	bl	80017d4 <HAL_GetTick>
 8002ad6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ad8:	e00a      	b.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0xd0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ada:	f7fe fe7b 	bl	80017d4 <HAL_GetTick>
 8002ade:	4602      	mov	r2, r0
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	1ad3      	subs	r3, r2, r3
 8002ae4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d901      	bls.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0xd0>
          {
            return HAL_TIMEOUT;
 8002aec:	2303      	movs	r3, #3
 8002aee:	e067      	b.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002af0:	4b35      	ldr	r3, [pc, #212]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002af2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002af4:	f003 0302 	and.w	r3, r3, #2
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d0ee      	beq.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0xba>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b04:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002b08:	d10d      	bne.n	8002b26 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002b0a:	4b2f      	ldr	r3, [pc, #188]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002b1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b1e:	492a      	ldr	r1, [pc, #168]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002b20:	4313      	orrs	r3, r2
 8002b22:	608b      	str	r3, [r1, #8]
 8002b24:	e005      	b.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8002b26:	4b28      	ldr	r3, [pc, #160]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	4a27      	ldr	r2, [pc, #156]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002b2c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002b30:	6093      	str	r3, [r2, #8]
 8002b32:	4b25      	ldr	r3, [pc, #148]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002b34:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b3e:	4922      	ldr	r1, [pc, #136]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002b40:	4313      	orrs	r3, r2
 8002b42:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f003 0302 	and.w	r3, r3, #2
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d003      	beq.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x138>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	7d1a      	ldrb	r2, [r3, #20]
 8002b54:	4b1f      	ldr	r3, [pc, #124]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002b56:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f003 0308 	and.w	r3, r3, #8
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d00a      	beq.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8002b64:	4b18      	ldr	r3, [pc, #96]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002b66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b6a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	691b      	ldr	r3, [r3, #16]
 8002b72:	4915      	ldr	r1, [pc, #84]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002b74:	4313      	orrs	r3, r2
 8002b76:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- LPTIM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 0310 	and.w	r3, r3, #16
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d00a      	beq.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002b86:	4b10      	ldr	r3, [pc, #64]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002b88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b8c:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	68db      	ldr	r3, [r3, #12]
 8002b94:	490c      	ldr	r1, [pc, #48]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002b96:	4313      	orrs	r3, r2
 8002b98:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }

  /*---------------------------- I2S Configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f003 0301 	and.w	r3, r3, #1
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d00a      	beq.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPBCLKSOURCE(PeriphClkInit->I2SClockSelection));

    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2SClockSelection);
 8002ba8:	4b07      	ldr	r3, [pc, #28]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002baa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002bae:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	4904      	ldr	r1, [pc, #16]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  return HAL_OK;
 8002bbe:	2300      	movs	r3, #0
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	3718      	adds	r7, #24
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}
 8002bc8:	40023800 	.word	0x40023800
 8002bcc:	40007000 	.word	0x40007000
 8002bd0:	42470e40 	.word	0x42470e40
 8002bd4:	424711e0 	.word	0x424711e0

08002bd8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b086      	sub	sp, #24
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d101      	bne.n	8002bea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	e273      	b.n	80030d2 <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 0301 	and.w	r3, r3, #1
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d075      	beq.n	8002ce2 <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002bf6:	4b88      	ldr	r3, [pc, #544]	; (8002e18 <HAL_RCC_OscConfig+0x240>)
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	f003 030c 	and.w	r3, r3, #12
 8002bfe:	2b04      	cmp	r3, #4
 8002c00:	d00c      	beq.n	8002c1c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c02:	4b85      	ldr	r3, [pc, #532]	; (8002e18 <HAL_RCC_OscConfig+0x240>)
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002c0a:	2b08      	cmp	r3, #8
 8002c0c:	d112      	bne.n	8002c34 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c0e:	4b82      	ldr	r3, [pc, #520]	; (8002e18 <HAL_RCC_OscConfig+0x240>)
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c16:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c1a:	d10b      	bne.n	8002c34 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c1c:	4b7e      	ldr	r3, [pc, #504]	; (8002e18 <HAL_RCC_OscConfig+0x240>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d05b      	beq.n	8002ce0 <HAL_RCC_OscConfig+0x108>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d157      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	e24e      	b.n	80030d2 <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c3c:	d106      	bne.n	8002c4c <HAL_RCC_OscConfig+0x74>
 8002c3e:	4b76      	ldr	r3, [pc, #472]	; (8002e18 <HAL_RCC_OscConfig+0x240>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a75      	ldr	r2, [pc, #468]	; (8002e18 <HAL_RCC_OscConfig+0x240>)
 8002c44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c48:	6013      	str	r3, [r2, #0]
 8002c4a:	e01d      	b.n	8002c88 <HAL_RCC_OscConfig+0xb0>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c54:	d10c      	bne.n	8002c70 <HAL_RCC_OscConfig+0x98>
 8002c56:	4b70      	ldr	r3, [pc, #448]	; (8002e18 <HAL_RCC_OscConfig+0x240>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a6f      	ldr	r2, [pc, #444]	; (8002e18 <HAL_RCC_OscConfig+0x240>)
 8002c5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c60:	6013      	str	r3, [r2, #0]
 8002c62:	4b6d      	ldr	r3, [pc, #436]	; (8002e18 <HAL_RCC_OscConfig+0x240>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a6c      	ldr	r2, [pc, #432]	; (8002e18 <HAL_RCC_OscConfig+0x240>)
 8002c68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c6c:	6013      	str	r3, [r2, #0]
 8002c6e:	e00b      	b.n	8002c88 <HAL_RCC_OscConfig+0xb0>
 8002c70:	4b69      	ldr	r3, [pc, #420]	; (8002e18 <HAL_RCC_OscConfig+0x240>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a68      	ldr	r2, [pc, #416]	; (8002e18 <HAL_RCC_OscConfig+0x240>)
 8002c76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c7a:	6013      	str	r3, [r2, #0]
 8002c7c:	4b66      	ldr	r3, [pc, #408]	; (8002e18 <HAL_RCC_OscConfig+0x240>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a65      	ldr	r2, [pc, #404]	; (8002e18 <HAL_RCC_OscConfig+0x240>)
 8002c82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d013      	beq.n	8002cb8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c90:	f7fe fda0 	bl	80017d4 <HAL_GetTick>
 8002c94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c96:	e008      	b.n	8002caa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c98:	f7fe fd9c 	bl	80017d4 <HAL_GetTick>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	1ad3      	subs	r3, r2, r3
 8002ca2:	2b64      	cmp	r3, #100	; 0x64
 8002ca4:	d901      	bls.n	8002caa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002ca6:	2303      	movs	r3, #3
 8002ca8:	e213      	b.n	80030d2 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002caa:	4b5b      	ldr	r3, [pc, #364]	; (8002e18 <HAL_RCC_OscConfig+0x240>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d0f0      	beq.n	8002c98 <HAL_RCC_OscConfig+0xc0>
 8002cb6:	e014      	b.n	8002ce2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cb8:	f7fe fd8c 	bl	80017d4 <HAL_GetTick>
 8002cbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cbe:	e008      	b.n	8002cd2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cc0:	f7fe fd88 	bl	80017d4 <HAL_GetTick>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	1ad3      	subs	r3, r2, r3
 8002cca:	2b64      	cmp	r3, #100	; 0x64
 8002ccc:	d901      	bls.n	8002cd2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002cce:	2303      	movs	r3, #3
 8002cd0:	e1ff      	b.n	80030d2 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cd2:	4b51      	ldr	r3, [pc, #324]	; (8002e18 <HAL_RCC_OscConfig+0x240>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d1f0      	bne.n	8002cc0 <HAL_RCC_OscConfig+0xe8>
 8002cde:	e000      	b.n	8002ce2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ce0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 0302 	and.w	r3, r3, #2
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d063      	beq.n	8002db6 <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002cee:	4b4a      	ldr	r3, [pc, #296]	; (8002e18 <HAL_RCC_OscConfig+0x240>)
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	f003 030c 	and.w	r3, r3, #12
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d00b      	beq.n	8002d12 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cfa:	4b47      	ldr	r3, [pc, #284]	; (8002e18 <HAL_RCC_OscConfig+0x240>)
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002d02:	2b08      	cmp	r3, #8
 8002d04:	d11c      	bne.n	8002d40 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d06:	4b44      	ldr	r3, [pc, #272]	; (8002e18 <HAL_RCC_OscConfig+0x240>)
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d116      	bne.n	8002d40 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d12:	4b41      	ldr	r3, [pc, #260]	; (8002e18 <HAL_RCC_OscConfig+0x240>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 0302 	and.w	r3, r3, #2
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d005      	beq.n	8002d2a <HAL_RCC_OscConfig+0x152>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	68db      	ldr	r3, [r3, #12]
 8002d22:	2b01      	cmp	r3, #1
 8002d24:	d001      	beq.n	8002d2a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	e1d3      	b.n	80030d2 <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d2a:	4b3b      	ldr	r3, [pc, #236]	; (8002e18 <HAL_RCC_OscConfig+0x240>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	691b      	ldr	r3, [r3, #16]
 8002d36:	00db      	lsls	r3, r3, #3
 8002d38:	4937      	ldr	r1, [pc, #220]	; (8002e18 <HAL_RCC_OscConfig+0x240>)
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d3e:	e03a      	b.n	8002db6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	68db      	ldr	r3, [r3, #12]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d020      	beq.n	8002d8a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d48:	4b34      	ldr	r3, [pc, #208]	; (8002e1c <HAL_RCC_OscConfig+0x244>)
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d4e:	f7fe fd41 	bl	80017d4 <HAL_GetTick>
 8002d52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d54:	e008      	b.n	8002d68 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d56:	f7fe fd3d 	bl	80017d4 <HAL_GetTick>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	1ad3      	subs	r3, r2, r3
 8002d60:	2b02      	cmp	r3, #2
 8002d62:	d901      	bls.n	8002d68 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002d64:	2303      	movs	r3, #3
 8002d66:	e1b4      	b.n	80030d2 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d68:	4b2b      	ldr	r3, [pc, #172]	; (8002e18 <HAL_RCC_OscConfig+0x240>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f003 0302 	and.w	r3, r3, #2
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d0f0      	beq.n	8002d56 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d74:	4b28      	ldr	r3, [pc, #160]	; (8002e18 <HAL_RCC_OscConfig+0x240>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	691b      	ldr	r3, [r3, #16]
 8002d80:	00db      	lsls	r3, r3, #3
 8002d82:	4925      	ldr	r1, [pc, #148]	; (8002e18 <HAL_RCC_OscConfig+0x240>)
 8002d84:	4313      	orrs	r3, r2
 8002d86:	600b      	str	r3, [r1, #0]
 8002d88:	e015      	b.n	8002db6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d8a:	4b24      	ldr	r3, [pc, #144]	; (8002e1c <HAL_RCC_OscConfig+0x244>)
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d90:	f7fe fd20 	bl	80017d4 <HAL_GetTick>
 8002d94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d96:	e008      	b.n	8002daa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d98:	f7fe fd1c 	bl	80017d4 <HAL_GetTick>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	1ad3      	subs	r3, r2, r3
 8002da2:	2b02      	cmp	r3, #2
 8002da4:	d901      	bls.n	8002daa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002da6:	2303      	movs	r3, #3
 8002da8:	e193      	b.n	80030d2 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002daa:	4b1b      	ldr	r3, [pc, #108]	; (8002e18 <HAL_RCC_OscConfig+0x240>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 0302 	and.w	r3, r3, #2
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d1f0      	bne.n	8002d98 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 0308 	and.w	r3, r3, #8
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d036      	beq.n	8002e30 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	695b      	ldr	r3, [r3, #20]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d016      	beq.n	8002df8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dca:	4b15      	ldr	r3, [pc, #84]	; (8002e20 <HAL_RCC_OscConfig+0x248>)
 8002dcc:	2201      	movs	r2, #1
 8002dce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dd0:	f7fe fd00 	bl	80017d4 <HAL_GetTick>
 8002dd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dd6:	e008      	b.n	8002dea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002dd8:	f7fe fcfc 	bl	80017d4 <HAL_GetTick>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	1ad3      	subs	r3, r2, r3
 8002de2:	2b02      	cmp	r3, #2
 8002de4:	d901      	bls.n	8002dea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002de6:	2303      	movs	r3, #3
 8002de8:	e173      	b.n	80030d2 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dea:	4b0b      	ldr	r3, [pc, #44]	; (8002e18 <HAL_RCC_OscConfig+0x240>)
 8002dec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dee:	f003 0302 	and.w	r3, r3, #2
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d0f0      	beq.n	8002dd8 <HAL_RCC_OscConfig+0x200>
 8002df6:	e01b      	b.n	8002e30 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002df8:	4b09      	ldr	r3, [pc, #36]	; (8002e20 <HAL_RCC_OscConfig+0x248>)
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dfe:	f7fe fce9 	bl	80017d4 <HAL_GetTick>
 8002e02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e04:	e00e      	b.n	8002e24 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e06:	f7fe fce5 	bl	80017d4 <HAL_GetTick>
 8002e0a:	4602      	mov	r2, r0
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	1ad3      	subs	r3, r2, r3
 8002e10:	2b02      	cmp	r3, #2
 8002e12:	d907      	bls.n	8002e24 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002e14:	2303      	movs	r3, #3
 8002e16:	e15c      	b.n	80030d2 <HAL_RCC_OscConfig+0x4fa>
 8002e18:	40023800 	.word	0x40023800
 8002e1c:	42470000 	.word	0x42470000
 8002e20:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e24:	4b8a      	ldr	r3, [pc, #552]	; (8003050 <HAL_RCC_OscConfig+0x478>)
 8002e26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e28:	f003 0302 	and.w	r3, r3, #2
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d1ea      	bne.n	8002e06 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 0304 	and.w	r3, r3, #4
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	f000 8097 	beq.w	8002f6c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e42:	4b83      	ldr	r3, [pc, #524]	; (8003050 <HAL_RCC_OscConfig+0x478>)
 8002e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d10f      	bne.n	8002e6e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e4e:	2300      	movs	r3, #0
 8002e50:	60bb      	str	r3, [r7, #8]
 8002e52:	4b7f      	ldr	r3, [pc, #508]	; (8003050 <HAL_RCC_OscConfig+0x478>)
 8002e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e56:	4a7e      	ldr	r2, [pc, #504]	; (8003050 <HAL_RCC_OscConfig+0x478>)
 8002e58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e5c:	6413      	str	r3, [r2, #64]	; 0x40
 8002e5e:	4b7c      	ldr	r3, [pc, #496]	; (8003050 <HAL_RCC_OscConfig+0x478>)
 8002e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e66:	60bb      	str	r3, [r7, #8]
 8002e68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e6e:	4b79      	ldr	r3, [pc, #484]	; (8003054 <HAL_RCC_OscConfig+0x47c>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d118      	bne.n	8002eac <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e7a:	4b76      	ldr	r3, [pc, #472]	; (8003054 <HAL_RCC_OscConfig+0x47c>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a75      	ldr	r2, [pc, #468]	; (8003054 <HAL_RCC_OscConfig+0x47c>)
 8002e80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e86:	f7fe fca5 	bl	80017d4 <HAL_GetTick>
 8002e8a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e8c:	e008      	b.n	8002ea0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e8e:	f7fe fca1 	bl	80017d4 <HAL_GetTick>
 8002e92:	4602      	mov	r2, r0
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	1ad3      	subs	r3, r2, r3
 8002e98:	2b02      	cmp	r3, #2
 8002e9a:	d901      	bls.n	8002ea0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002e9c:	2303      	movs	r3, #3
 8002e9e:	e118      	b.n	80030d2 <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ea0:	4b6c      	ldr	r3, [pc, #432]	; (8003054 <HAL_RCC_OscConfig+0x47c>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d0f0      	beq.n	8002e8e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	d106      	bne.n	8002ec2 <HAL_RCC_OscConfig+0x2ea>
 8002eb4:	4b66      	ldr	r3, [pc, #408]	; (8003050 <HAL_RCC_OscConfig+0x478>)
 8002eb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eb8:	4a65      	ldr	r2, [pc, #404]	; (8003050 <HAL_RCC_OscConfig+0x478>)
 8002eba:	f043 0301 	orr.w	r3, r3, #1
 8002ebe:	6713      	str	r3, [r2, #112]	; 0x70
 8002ec0:	e01c      	b.n	8002efc <HAL_RCC_OscConfig+0x324>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	2b05      	cmp	r3, #5
 8002ec8:	d10c      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x30c>
 8002eca:	4b61      	ldr	r3, [pc, #388]	; (8003050 <HAL_RCC_OscConfig+0x478>)
 8002ecc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ece:	4a60      	ldr	r2, [pc, #384]	; (8003050 <HAL_RCC_OscConfig+0x478>)
 8002ed0:	f043 0304 	orr.w	r3, r3, #4
 8002ed4:	6713      	str	r3, [r2, #112]	; 0x70
 8002ed6:	4b5e      	ldr	r3, [pc, #376]	; (8003050 <HAL_RCC_OscConfig+0x478>)
 8002ed8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eda:	4a5d      	ldr	r2, [pc, #372]	; (8003050 <HAL_RCC_OscConfig+0x478>)
 8002edc:	f043 0301 	orr.w	r3, r3, #1
 8002ee0:	6713      	str	r3, [r2, #112]	; 0x70
 8002ee2:	e00b      	b.n	8002efc <HAL_RCC_OscConfig+0x324>
 8002ee4:	4b5a      	ldr	r3, [pc, #360]	; (8003050 <HAL_RCC_OscConfig+0x478>)
 8002ee6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ee8:	4a59      	ldr	r2, [pc, #356]	; (8003050 <HAL_RCC_OscConfig+0x478>)
 8002eea:	f023 0301 	bic.w	r3, r3, #1
 8002eee:	6713      	str	r3, [r2, #112]	; 0x70
 8002ef0:	4b57      	ldr	r3, [pc, #348]	; (8003050 <HAL_RCC_OscConfig+0x478>)
 8002ef2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ef4:	4a56      	ldr	r2, [pc, #344]	; (8003050 <HAL_RCC_OscConfig+0x478>)
 8002ef6:	f023 0304 	bic.w	r3, r3, #4
 8002efa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d015      	beq.n	8002f30 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f04:	f7fe fc66 	bl	80017d4 <HAL_GetTick>
 8002f08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f0a:	e00a      	b.n	8002f22 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f0c:	f7fe fc62 	bl	80017d4 <HAL_GetTick>
 8002f10:	4602      	mov	r2, r0
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	1ad3      	subs	r3, r2, r3
 8002f16:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d901      	bls.n	8002f22 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002f1e:	2303      	movs	r3, #3
 8002f20:	e0d7      	b.n	80030d2 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f22:	4b4b      	ldr	r3, [pc, #300]	; (8003050 <HAL_RCC_OscConfig+0x478>)
 8002f24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f26:	f003 0302 	and.w	r3, r3, #2
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d0ee      	beq.n	8002f0c <HAL_RCC_OscConfig+0x334>
 8002f2e:	e014      	b.n	8002f5a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f30:	f7fe fc50 	bl	80017d4 <HAL_GetTick>
 8002f34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f36:	e00a      	b.n	8002f4e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f38:	f7fe fc4c 	bl	80017d4 <HAL_GetTick>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	1ad3      	subs	r3, r2, r3
 8002f42:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d901      	bls.n	8002f4e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002f4a:	2303      	movs	r3, #3
 8002f4c:	e0c1      	b.n	80030d2 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f4e:	4b40      	ldr	r3, [pc, #256]	; (8003050 <HAL_RCC_OscConfig+0x478>)
 8002f50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f52:	f003 0302 	and.w	r3, r3, #2
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d1ee      	bne.n	8002f38 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f5a:	7dfb      	ldrb	r3, [r7, #23]
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	d105      	bne.n	8002f6c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f60:	4b3b      	ldr	r3, [pc, #236]	; (8003050 <HAL_RCC_OscConfig+0x478>)
 8002f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f64:	4a3a      	ldr	r2, [pc, #232]	; (8003050 <HAL_RCC_OscConfig+0x478>)
 8002f66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f6a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	699b      	ldr	r3, [r3, #24]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	f000 80ad 	beq.w	80030d0 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f76:	4b36      	ldr	r3, [pc, #216]	; (8003050 <HAL_RCC_OscConfig+0x478>)
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	f003 030c 	and.w	r3, r3, #12
 8002f7e:	2b08      	cmp	r3, #8
 8002f80:	d060      	beq.n	8003044 <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	699b      	ldr	r3, [r3, #24]
 8002f86:	2b02      	cmp	r3, #2
 8002f88:	d145      	bne.n	8003016 <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f8a:	4b33      	ldr	r3, [pc, #204]	; (8003058 <HAL_RCC_OscConfig+0x480>)
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f90:	f7fe fc20 	bl	80017d4 <HAL_GetTick>
 8002f94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f96:	e008      	b.n	8002faa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f98:	f7fe fc1c 	bl	80017d4 <HAL_GetTick>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	1ad3      	subs	r3, r2, r3
 8002fa2:	2b02      	cmp	r3, #2
 8002fa4:	d901      	bls.n	8002faa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002fa6:	2303      	movs	r3, #3
 8002fa8:	e093      	b.n	80030d2 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002faa:	4b29      	ldr	r3, [pc, #164]	; (8003050 <HAL_RCC_OscConfig+0x478>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d1f0      	bne.n	8002f98 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	69da      	ldr	r2, [r3, #28]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6a1b      	ldr	r3, [r3, #32]
 8002fbe:	431a      	orrs	r2, r3
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc4:	019b      	lsls	r3, r3, #6
 8002fc6:	431a      	orrs	r2, r3
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fcc:	085b      	lsrs	r3, r3, #1
 8002fce:	3b01      	subs	r3, #1
 8002fd0:	041b      	lsls	r3, r3, #16
 8002fd2:	431a      	orrs	r2, r3
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fd8:	061b      	lsls	r3, r3, #24
 8002fda:	431a      	orrs	r2, r3
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe0:	071b      	lsls	r3, r3, #28
 8002fe2:	491b      	ldr	r1, [pc, #108]	; (8003050 <HAL_RCC_OscConfig+0x478>)
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fe8:	4b1b      	ldr	r3, [pc, #108]	; (8003058 <HAL_RCC_OscConfig+0x480>)
 8002fea:	2201      	movs	r2, #1
 8002fec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fee:	f7fe fbf1 	bl	80017d4 <HAL_GetTick>
 8002ff2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ff4:	e008      	b.n	8003008 <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ff6:	f7fe fbed 	bl	80017d4 <HAL_GetTick>
 8002ffa:	4602      	mov	r2, r0
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	1ad3      	subs	r3, r2, r3
 8003000:	2b02      	cmp	r3, #2
 8003002:	d901      	bls.n	8003008 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 8003004:	2303      	movs	r3, #3
 8003006:	e064      	b.n	80030d2 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003008:	4b11      	ldr	r3, [pc, #68]	; (8003050 <HAL_RCC_OscConfig+0x478>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003010:	2b00      	cmp	r3, #0
 8003012:	d0f0      	beq.n	8002ff6 <HAL_RCC_OscConfig+0x41e>
 8003014:	e05c      	b.n	80030d0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003016:	4b10      	ldr	r3, [pc, #64]	; (8003058 <HAL_RCC_OscConfig+0x480>)
 8003018:	2200      	movs	r2, #0
 800301a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800301c:	f7fe fbda 	bl	80017d4 <HAL_GetTick>
 8003020:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003022:	e008      	b.n	8003036 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003024:	f7fe fbd6 	bl	80017d4 <HAL_GetTick>
 8003028:	4602      	mov	r2, r0
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	1ad3      	subs	r3, r2, r3
 800302e:	2b02      	cmp	r3, #2
 8003030:	d901      	bls.n	8003036 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8003032:	2303      	movs	r3, #3
 8003034:	e04d      	b.n	80030d2 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003036:	4b06      	ldr	r3, [pc, #24]	; (8003050 <HAL_RCC_OscConfig+0x478>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800303e:	2b00      	cmp	r3, #0
 8003040:	d1f0      	bne.n	8003024 <HAL_RCC_OscConfig+0x44c>
 8003042:	e045      	b.n	80030d0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	699b      	ldr	r3, [r3, #24]
 8003048:	2b01      	cmp	r3, #1
 800304a:	d107      	bne.n	800305c <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	e040      	b.n	80030d2 <HAL_RCC_OscConfig+0x4fa>
 8003050:	40023800 	.word	0x40023800
 8003054:	40007000 	.word	0x40007000
 8003058:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800305c:	4b1f      	ldr	r3, [pc, #124]	; (80030dc <HAL_RCC_OscConfig+0x504>)
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	699b      	ldr	r3, [r3, #24]
 8003066:	2b01      	cmp	r3, #1
 8003068:	d030      	beq.n	80030cc <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003074:	429a      	cmp	r2, r3
 8003076:	d129      	bne.n	80030cc <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003082:	429a      	cmp	r2, r3
 8003084:	d122      	bne.n	80030cc <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003086:	68fa      	ldr	r2, [r7, #12]
 8003088:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800308c:	4013      	ands	r3, r2
 800308e:	687a      	ldr	r2, [r7, #4]
 8003090:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003092:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003094:	4293      	cmp	r3, r2
 8003096:	d119      	bne.n	80030cc <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030a2:	085b      	lsrs	r3, r3, #1
 80030a4:	3b01      	subs	r3, #1
 80030a6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d10f      	bne.n	80030cc <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030b6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030b8:	429a      	cmp	r2, r3
 80030ba:	d107      	bne.n	80030cc <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80030c8:	429a      	cmp	r2, r3
 80030ca:	d001      	beq.n	80030d0 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	e000      	b.n	80030d2 <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 80030d0:	2300      	movs	r3, #0
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3718      	adds	r7, #24
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	bf00      	nop
 80030dc:	40023800 	.word	0x40023800

080030e0 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b082      	sub	sp, #8
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d101      	bne.n	80030f2 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e01c      	b.n	800312c <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	795b      	ldrb	r3, [r3, #5]
 80030f6:	b2db      	uxtb	r3, r3
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d105      	bne.n	8003108 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2200      	movs	r2, #0
 8003100:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8003102:	6878      	ldr	r0, [r7, #4]
 8003104:	f7fd ffd0 	bl	80010a8 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2202      	movs	r2, #2
 800310c:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	681a      	ldr	r2, [r3, #0]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f042 0204 	orr.w	r2, r2, #4
 800311c:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2201      	movs	r2, #1
 8003122:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2200      	movs	r2, #0
 8003128:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 800312a:	2300      	movs	r3, #0
}
 800312c:	4618      	mov	r0, r3
 800312e:	3708      	adds	r7, #8
 8003130:	46bd      	mov	sp, r7
 8003132:	bd80      	pop	{r7, pc}

08003134 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b084      	sub	sp, #16
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
 800313c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800313e:	2300      	movs	r3, #0
 8003140:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	791b      	ldrb	r3, [r3, #4]
 8003146:	2b01      	cmp	r3, #1
 8003148:	d101      	bne.n	800314e <HAL_RNG_GenerateRandomNumber+0x1a>
 800314a:	2302      	movs	r3, #2
 800314c:	e044      	b.n	80031d8 <HAL_RNG_GenerateRandomNumber+0xa4>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2201      	movs	r2, #1
 8003152:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	795b      	ldrb	r3, [r3, #5]
 8003158:	b2db      	uxtb	r3, r3
 800315a:	2b01      	cmp	r3, #1
 800315c:	d133      	bne.n	80031c6 <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2202      	movs	r2, #2
 8003162:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003164:	f7fe fb36 	bl	80017d4 <HAL_GetTick>
 8003168:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800316a:	e018      	b.n	800319e <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800316c:	f7fe fb32 	bl	80017d4 <HAL_GetTick>
 8003170:	4602      	mov	r2, r0
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	1ad3      	subs	r3, r2, r3
 8003176:	2b02      	cmp	r3, #2
 8003178:	d911      	bls.n	800319e <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	f003 0301 	and.w	r3, r3, #1
 8003184:	2b01      	cmp	r3, #1
 8003186:	d00a      	beq.n	800319e <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2201      	movs	r2, #1
 800318c:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2202      	movs	r2, #2
 8003192:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2200      	movs	r2, #0
 8003198:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e01c      	b.n	80031d8 <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	f003 0301 	and.w	r3, r3, #1
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	d1df      	bne.n	800316c <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	689a      	ldr	r2, [r3, #8]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	68da      	ldr	r2, [r3, #12]
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2201      	movs	r2, #1
 80031c2:	715a      	strb	r2, [r3, #5]
 80031c4:	e004      	b.n	80031d0 <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2204      	movs	r2, #4
 80031ca:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2200      	movs	r2, #0
 80031d4:	711a      	strb	r2, [r3, #4]

  return status;
 80031d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80031d8:	4618      	mov	r0, r3
 80031da:	3710      	adds	r7, #16
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}

080031e0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b084      	sub	sp, #16
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80031e8:	2301      	movs	r3, #1
 80031ea:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d101      	bne.n	80031f6 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e066      	b.n	80032c4 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	7f5b      	ldrb	r3, [r3, #29]
 80031fa:	b2db      	uxtb	r3, r3
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d105      	bne.n	800320c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2200      	movs	r2, #0
 8003204:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f7fd ff96 	bl	8001138 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2202      	movs	r2, #2
 8003210:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	22ca      	movs	r2, #202	; 0xca
 8003218:	625a      	str	r2, [r3, #36]	; 0x24
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	2253      	movs	r2, #83	; 0x53
 8003220:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f000 f927 	bl	8003476 <RTC_EnterInitMode>
 8003228:	4603      	mov	r3, r0
 800322a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800322c:	7bfb      	ldrb	r3, [r7, #15]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d12c      	bne.n	800328c <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	687a      	ldr	r2, [r7, #4]
 800323a:	6812      	ldr	r2, [r2, #0]
 800323c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003240:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003244:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	6899      	ldr	r1, [r3, #8]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	685a      	ldr	r2, [r3, #4]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	691b      	ldr	r3, [r3, #16]
 8003254:	431a      	orrs	r2, r3
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	695b      	ldr	r3, [r3, #20]
 800325a:	431a      	orrs	r2, r3
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	430a      	orrs	r2, r1
 8003262:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	687a      	ldr	r2, [r7, #4]
 800326a:	68d2      	ldr	r2, [r2, #12]
 800326c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	6919      	ldr	r1, [r3, #16]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	041a      	lsls	r2, r3, #16
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	430a      	orrs	r2, r1
 8003280:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	f000 f92e 	bl	80034e4 <RTC_ExitInitMode>
 8003288:	4603      	mov	r3, r0
 800328a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800328c:	7bfb      	ldrb	r3, [r7, #15]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d113      	bne.n	80032ba <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80032a0:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	699a      	ldr	r2, [r3, #24]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	430a      	orrs	r2, r1
 80032b2:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2201      	movs	r2, #1
 80032b8:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	22ff      	movs	r2, #255	; 0xff
 80032c0:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 80032c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	3710      	adds	r7, #16
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}

080032cc <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b086      	sub	sp, #24
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	60f8      	str	r0, [r7, #12]
 80032d4:	60b9      	str	r1, [r7, #8]
 80032d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80032d8:	2300      	movs	r3, #0
 80032da:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80032e2:	68bb      	ldr	r3, [r7, #8]
 80032e4:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	691b      	ldr	r3, [r3, #16]
 80032ec:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80032fe:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003302:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	0c1b      	lsrs	r3, r3, #16
 8003308:	b2db      	uxtb	r3, r3
 800330a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800330e:	b2da      	uxtb	r2, r3
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	0a1b      	lsrs	r3, r3, #8
 8003318:	b2db      	uxtb	r3, r3
 800331a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800331e:	b2da      	uxtb	r2, r3
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	b2db      	uxtb	r3, r3
 8003328:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800332c:	b2da      	uxtb	r2, r3
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	0d9b      	lsrs	r3, r3, #22
 8003336:	b2db      	uxtb	r3, r3
 8003338:	f003 0301 	and.w	r3, r3, #1
 800333c:	b2da      	uxtb	r2, r3
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d11a      	bne.n	800337e <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	781b      	ldrb	r3, [r3, #0]
 800334c:	4618      	mov	r0, r3
 800334e:	f000 f8ee 	bl	800352e <RTC_Bcd2ToByte>
 8003352:	4603      	mov	r3, r0
 8003354:	461a      	mov	r2, r3
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	785b      	ldrb	r3, [r3, #1]
 800335e:	4618      	mov	r0, r3
 8003360:	f000 f8e5 	bl	800352e <RTC_Bcd2ToByte>
 8003364:	4603      	mov	r3, r0
 8003366:	461a      	mov	r2, r3
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	789b      	ldrb	r3, [r3, #2]
 8003370:	4618      	mov	r0, r3
 8003372:	f000 f8dc 	bl	800352e <RTC_Bcd2ToByte>
 8003376:	4603      	mov	r3, r0
 8003378:	461a      	mov	r2, r3
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800337e:	2300      	movs	r3, #0
}
 8003380:	4618      	mov	r0, r3
 8003382:	3718      	adds	r7, #24
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}

08003388 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b086      	sub	sp, #24
 800338c:	af00      	add	r7, sp, #0
 800338e:	60f8      	str	r0, [r7, #12]
 8003390:	60b9      	str	r1, [r7, #8]
 8003392:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8003394:	2300      	movs	r3, #0
 8003396:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80033a2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80033a6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	0c1b      	lsrs	r3, r3, #16
 80033ac:	b2da      	uxtb	r2, r3
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	0a1b      	lsrs	r3, r3, #8
 80033b6:	b2db      	uxtb	r3, r3
 80033b8:	f003 031f 	and.w	r3, r3, #31
 80033bc:	b2da      	uxtb	r2, r3
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	b2db      	uxtb	r3, r3
 80033c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80033ca:	b2da      	uxtb	r2, r3
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	0b5b      	lsrs	r3, r3, #13
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	f003 0307 	and.w	r3, r3, #7
 80033da:	b2da      	uxtb	r2, r3
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d11a      	bne.n	800341c <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	78db      	ldrb	r3, [r3, #3]
 80033ea:	4618      	mov	r0, r3
 80033ec:	f000 f89f 	bl	800352e <RTC_Bcd2ToByte>
 80033f0:	4603      	mov	r3, r0
 80033f2:	461a      	mov	r2, r3
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	785b      	ldrb	r3, [r3, #1]
 80033fc:	4618      	mov	r0, r3
 80033fe:	f000 f896 	bl	800352e <RTC_Bcd2ToByte>
 8003402:	4603      	mov	r3, r0
 8003404:	461a      	mov	r2, r3
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	789b      	ldrb	r3, [r3, #2]
 800340e:	4618      	mov	r0, r3
 8003410:	f000 f88d 	bl	800352e <RTC_Bcd2ToByte>
 8003414:	4603      	mov	r3, r0
 8003416:	461a      	mov	r2, r3
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800341c:	2300      	movs	r3, #0
}
 800341e:	4618      	mov	r0, r3
 8003420:	3718      	adds	r7, #24
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}

08003426 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003426:	b580      	push	{r7, lr}
 8003428:	b084      	sub	sp, #16
 800342a:	af00      	add	r7, sp, #0
 800342c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800342e:	2300      	movs	r3, #0
 8003430:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	68da      	ldr	r2, [r3, #12]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003440:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003442:	f7fe f9c7 	bl	80017d4 <HAL_GetTick>
 8003446:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003448:	e009      	b.n	800345e <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800344a:	f7fe f9c3 	bl	80017d4 <HAL_GetTick>
 800344e:	4602      	mov	r2, r0
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	1ad3      	subs	r3, r2, r3
 8003454:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003458:	d901      	bls.n	800345e <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800345a:	2303      	movs	r3, #3
 800345c:	e007      	b.n	800346e <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	68db      	ldr	r3, [r3, #12]
 8003464:	f003 0320 	and.w	r3, r3, #32
 8003468:	2b00      	cmp	r3, #0
 800346a:	d0ee      	beq.n	800344a <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800346c:	2300      	movs	r3, #0
}
 800346e:	4618      	mov	r0, r3
 8003470:	3710      	adds	r7, #16
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}

08003476 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003476:	b580      	push	{r7, lr}
 8003478:	b084      	sub	sp, #16
 800347a:	af00      	add	r7, sp, #0
 800347c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800347e:	2300      	movs	r3, #0
 8003480:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003482:	2300      	movs	r3, #0
 8003484:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	68db      	ldr	r3, [r3, #12]
 800348c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003490:	2b00      	cmp	r3, #0
 8003492:	d122      	bne.n	80034da <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	68da      	ldr	r2, [r3, #12]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80034a2:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80034a4:	f7fe f996 	bl	80017d4 <HAL_GetTick>
 80034a8:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80034aa:	e00c      	b.n	80034c6 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80034ac:	f7fe f992 	bl	80017d4 <HAL_GetTick>
 80034b0:	4602      	mov	r2, r0
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	1ad3      	subs	r3, r2, r3
 80034b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80034ba:	d904      	bls.n	80034c6 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2204      	movs	r2, #4
 80034c0:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	68db      	ldr	r3, [r3, #12]
 80034cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d102      	bne.n	80034da <RTC_EnterInitMode+0x64>
 80034d4:	7bfb      	ldrb	r3, [r7, #15]
 80034d6:	2b01      	cmp	r3, #1
 80034d8:	d1e8      	bne.n	80034ac <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80034da:	7bfb      	ldrb	r3, [r7, #15]
}
 80034dc:	4618      	mov	r0, r3
 80034de:	3710      	adds	r7, #16
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}

080034e4 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b084      	sub	sp, #16
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034ec:	2300      	movs	r3, #0
 80034ee:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	68da      	ldr	r2, [r3, #12]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80034fe:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	f003 0320 	and.w	r3, r3, #32
 800350a:	2b00      	cmp	r3, #0
 800350c:	d10a      	bne.n	8003524 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f7ff ff89 	bl	8003426 <HAL_RTC_WaitForSynchro>
 8003514:	4603      	mov	r3, r0
 8003516:	2b00      	cmp	r3, #0
 8003518:	d004      	beq.n	8003524 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2204      	movs	r2, #4
 800351e:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003524:	7bfb      	ldrb	r3, [r7, #15]
}
 8003526:	4618      	mov	r0, r3
 8003528:	3710      	adds	r7, #16
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}

0800352e <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 800352e:	b480      	push	{r7}
 8003530:	b085      	sub	sp, #20
 8003532:	af00      	add	r7, sp, #0
 8003534:	4603      	mov	r3, r0
 8003536:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8003538:	2300      	movs	r3, #0
 800353a:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800353c:	79fb      	ldrb	r3, [r7, #7]
 800353e:	091b      	lsrs	r3, r3, #4
 8003540:	b2db      	uxtb	r3, r3
 8003542:	461a      	mov	r2, r3
 8003544:	0092      	lsls	r2, r2, #2
 8003546:	4413      	add	r3, r2
 8003548:	005b      	lsls	r3, r3, #1
 800354a:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 800354c:	79fb      	ldrb	r3, [r7, #7]
 800354e:	f003 030f 	and.w	r3, r3, #15
 8003552:	b2da      	uxtb	r2, r3
 8003554:	7bfb      	ldrb	r3, [r7, #15]
 8003556:	4413      	add	r3, r2
 8003558:	b2db      	uxtb	r3, r3
}
 800355a:	4618      	mov	r0, r3
 800355c:	3714      	adds	r7, #20
 800355e:	46bd      	mov	sp, r7
 8003560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003564:	4770      	bx	lr

08003566 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003566:	b580      	push	{r7, lr}
 8003568:	b082      	sub	sp, #8
 800356a:	af00      	add	r7, sp, #0
 800356c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d101      	bne.n	8003578 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003574:	2301      	movs	r3, #1
 8003576:	e041      	b.n	80035fc <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800357e:	b2db      	uxtb	r3, r3
 8003580:	2b00      	cmp	r3, #0
 8003582:	d106      	bne.n	8003592 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2200      	movs	r2, #0
 8003588:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800358c:	6878      	ldr	r0, [r7, #4]
 800358e:	f000 f839 	bl	8003604 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2202      	movs	r2, #2
 8003596:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681a      	ldr	r2, [r3, #0]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	3304      	adds	r3, #4
 80035a2:	4619      	mov	r1, r3
 80035a4:	4610      	mov	r0, r2
 80035a6:	f000 fbc9 	bl	8003d3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2201      	movs	r2, #1
 80035ae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2201      	movs	r2, #1
 80035b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2201      	movs	r2, #1
 80035be:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2201      	movs	r2, #1
 80035c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2201      	movs	r2, #1
 80035ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2201      	movs	r2, #1
 80035d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2201      	movs	r2, #1
 80035de:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2201      	movs	r2, #1
 80035e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2201      	movs	r2, #1
 80035ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2201      	movs	r2, #1
 80035f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80035fa:	2300      	movs	r3, #0
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	3708      	adds	r7, #8
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}

08003604 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003604:	b480      	push	{r7}
 8003606:	b083      	sub	sp, #12
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800360c:	bf00      	nop
 800360e:	370c      	adds	r7, #12
 8003610:	46bd      	mov	sp, r7
 8003612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003616:	4770      	bx	lr

08003618 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003618:	b480      	push	{r7}
 800361a:	b085      	sub	sp, #20
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003626:	b2db      	uxtb	r3, r3
 8003628:	2b01      	cmp	r3, #1
 800362a:	d001      	beq.n	8003630 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	e035      	b.n	800369c <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2202      	movs	r2, #2
 8003634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	68da      	ldr	r2, [r3, #12]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f042 0201 	orr.w	r2, r2, #1
 8003646:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a16      	ldr	r2, [pc, #88]	; (80036a8 <HAL_TIM_Base_Start_IT+0x90>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d009      	beq.n	8003666 <HAL_TIM_Base_Start_IT+0x4e>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a15      	ldr	r2, [pc, #84]	; (80036ac <HAL_TIM_Base_Start_IT+0x94>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d004      	beq.n	8003666 <HAL_TIM_Base_Start_IT+0x4e>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a13      	ldr	r2, [pc, #76]	; (80036b0 <HAL_TIM_Base_Start_IT+0x98>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d111      	bne.n	800368a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	f003 0307 	and.w	r3, r3, #7
 8003670:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2b06      	cmp	r3, #6
 8003676:	d010      	beq.n	800369a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f042 0201 	orr.w	r2, r2, #1
 8003686:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003688:	e007      	b.n	800369a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	681a      	ldr	r2, [r3, #0]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f042 0201 	orr.w	r2, r2, #1
 8003698:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800369a:	2300      	movs	r3, #0
}
 800369c:	4618      	mov	r0, r3
 800369e:	3714      	adds	r7, #20
 80036a0:	46bd      	mov	sp, r7
 80036a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a6:	4770      	bx	lr
 80036a8:	40010000 	.word	0x40010000
 80036ac:	40000c00 	.word	0x40000c00
 80036b0:	40014000 	.word	0x40014000

080036b4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b082      	sub	sp, #8
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d101      	bne.n	80036c6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	e041      	b.n	800374a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d106      	bne.n	80036e0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2200      	movs	r2, #0
 80036d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	f7fd ff44 	bl	8001568 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2202      	movs	r2, #2
 80036e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	3304      	adds	r3, #4
 80036f0:	4619      	mov	r1, r3
 80036f2:	4610      	mov	r0, r2
 80036f4:	f000 fb22 	bl	8003d3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2201      	movs	r2, #1
 80036fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2201      	movs	r2, #1
 8003704:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2201      	movs	r2, #1
 800370c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2201      	movs	r2, #1
 8003714:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2201      	movs	r2, #1
 800371c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2201      	movs	r2, #1
 8003724:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2201      	movs	r2, #1
 800372c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2201      	movs	r2, #1
 8003734:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2201      	movs	r2, #1
 800373c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2201      	movs	r2, #1
 8003744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003748:	2300      	movs	r3, #0
}
 800374a:	4618      	mov	r0, r3
 800374c:	3708      	adds	r7, #8
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}
	...

08003754 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b084      	sub	sp, #16
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
 800375c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d109      	bne.n	8003778 <HAL_TIM_PWM_Start+0x24>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800376a:	b2db      	uxtb	r3, r3
 800376c:	2b01      	cmp	r3, #1
 800376e:	bf14      	ite	ne
 8003770:	2301      	movne	r3, #1
 8003772:	2300      	moveq	r3, #0
 8003774:	b2db      	uxtb	r3, r3
 8003776:	e022      	b.n	80037be <HAL_TIM_PWM_Start+0x6a>
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	2b04      	cmp	r3, #4
 800377c:	d109      	bne.n	8003792 <HAL_TIM_PWM_Start+0x3e>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003784:	b2db      	uxtb	r3, r3
 8003786:	2b01      	cmp	r3, #1
 8003788:	bf14      	ite	ne
 800378a:	2301      	movne	r3, #1
 800378c:	2300      	moveq	r3, #0
 800378e:	b2db      	uxtb	r3, r3
 8003790:	e015      	b.n	80037be <HAL_TIM_PWM_Start+0x6a>
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	2b08      	cmp	r3, #8
 8003796:	d109      	bne.n	80037ac <HAL_TIM_PWM_Start+0x58>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800379e:	b2db      	uxtb	r3, r3
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	bf14      	ite	ne
 80037a4:	2301      	movne	r3, #1
 80037a6:	2300      	moveq	r3, #0
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	e008      	b.n	80037be <HAL_TIM_PWM_Start+0x6a>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037b2:	b2db      	uxtb	r3, r3
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	bf14      	ite	ne
 80037b8:	2301      	movne	r3, #1
 80037ba:	2300      	moveq	r3, #0
 80037bc:	b2db      	uxtb	r3, r3
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d001      	beq.n	80037c6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	e059      	b.n	800387a <HAL_TIM_PWM_Start+0x126>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d104      	bne.n	80037d6 <HAL_TIM_PWM_Start+0x82>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2202      	movs	r2, #2
 80037d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80037d4:	e013      	b.n	80037fe <HAL_TIM_PWM_Start+0xaa>
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	2b04      	cmp	r3, #4
 80037da:	d104      	bne.n	80037e6 <HAL_TIM_PWM_Start+0x92>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2202      	movs	r2, #2
 80037e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80037e4:	e00b      	b.n	80037fe <HAL_TIM_PWM_Start+0xaa>
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	2b08      	cmp	r3, #8
 80037ea:	d104      	bne.n	80037f6 <HAL_TIM_PWM_Start+0xa2>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2202      	movs	r2, #2
 80037f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80037f4:	e003      	b.n	80037fe <HAL_TIM_PWM_Start+0xaa>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2202      	movs	r2, #2
 80037fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	2201      	movs	r2, #1
 8003804:	6839      	ldr	r1, [r7, #0]
 8003806:	4618      	mov	r0, r3
 8003808:	f000 fc82 	bl	8004110 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a1c      	ldr	r2, [pc, #112]	; (8003884 <HAL_TIM_PWM_Start+0x130>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d107      	bne.n	8003826 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003824:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a16      	ldr	r2, [pc, #88]	; (8003884 <HAL_TIM_PWM_Start+0x130>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d009      	beq.n	8003844 <HAL_TIM_PWM_Start+0xf0>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a14      	ldr	r2, [pc, #80]	; (8003888 <HAL_TIM_PWM_Start+0x134>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d004      	beq.n	8003844 <HAL_TIM_PWM_Start+0xf0>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a13      	ldr	r2, [pc, #76]	; (800388c <HAL_TIM_PWM_Start+0x138>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d111      	bne.n	8003868 <HAL_TIM_PWM_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	689b      	ldr	r3, [r3, #8]
 800384a:	f003 0307 	and.w	r3, r3, #7
 800384e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2b06      	cmp	r3, #6
 8003854:	d010      	beq.n	8003878 <HAL_TIM_PWM_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f042 0201 	orr.w	r2, r2, #1
 8003864:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003866:	e007      	b.n	8003878 <HAL_TIM_PWM_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f042 0201 	orr.w	r2, r2, #1
 8003876:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003878:	2300      	movs	r3, #0
}
 800387a:	4618      	mov	r0, r3
 800387c:	3710      	adds	r7, #16
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}
 8003882:	bf00      	nop
 8003884:	40010000 	.word	0x40010000
 8003888:	40000c00 	.word	0x40000c00
 800388c:	40014000 	.word	0x40014000

08003890 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b082      	sub	sp, #8
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
 8003898:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	2200      	movs	r2, #0
 80038a0:	6839      	ldr	r1, [r7, #0]
 80038a2:	4618      	mov	r0, r3
 80038a4:	f000 fc34 	bl	8004110 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a29      	ldr	r2, [pc, #164]	; (8003954 <HAL_TIM_PWM_Stop+0xc4>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d117      	bne.n	80038e2 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	6a1a      	ldr	r2, [r3, #32]
 80038b8:	f241 1311 	movw	r3, #4369	; 0x1111
 80038bc:	4013      	ands	r3, r2
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d10f      	bne.n	80038e2 <HAL_TIM_PWM_Stop+0x52>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	6a1a      	ldr	r2, [r3, #32]
 80038c8:	f240 4344 	movw	r3, #1092	; 0x444
 80038cc:	4013      	ands	r3, r2
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d107      	bne.n	80038e2 <HAL_TIM_PWM_Stop+0x52>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80038e0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	6a1a      	ldr	r2, [r3, #32]
 80038e8:	f241 1311 	movw	r3, #4369	; 0x1111
 80038ec:	4013      	ands	r3, r2
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d10f      	bne.n	8003912 <HAL_TIM_PWM_Stop+0x82>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	6a1a      	ldr	r2, [r3, #32]
 80038f8:	f240 4344 	movw	r3, #1092	; 0x444
 80038fc:	4013      	ands	r3, r2
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d107      	bne.n	8003912 <HAL_TIM_PWM_Stop+0x82>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f022 0201 	bic.w	r2, r2, #1
 8003910:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d104      	bne.n	8003922 <HAL_TIM_PWM_Stop+0x92>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2201      	movs	r2, #1
 800391c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003920:	e013      	b.n	800394a <HAL_TIM_PWM_Stop+0xba>
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	2b04      	cmp	r3, #4
 8003926:	d104      	bne.n	8003932 <HAL_TIM_PWM_Stop+0xa2>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2201      	movs	r2, #1
 800392c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003930:	e00b      	b.n	800394a <HAL_TIM_PWM_Stop+0xba>
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	2b08      	cmp	r3, #8
 8003936:	d104      	bne.n	8003942 <HAL_TIM_PWM_Stop+0xb2>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2201      	movs	r2, #1
 800393c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003940:	e003      	b.n	800394a <HAL_TIM_PWM_Stop+0xba>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2201      	movs	r2, #1
 8003946:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 800394a:	2300      	movs	r3, #0
}
 800394c:	4618      	mov	r0, r3
 800394e:	3708      	adds	r7, #8
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}
 8003954:	40010000 	.word	0x40010000

08003958 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b082      	sub	sp, #8
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	691b      	ldr	r3, [r3, #16]
 8003966:	f003 0302 	and.w	r3, r3, #2
 800396a:	2b02      	cmp	r3, #2
 800396c:	d122      	bne.n	80039b4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	68db      	ldr	r3, [r3, #12]
 8003974:	f003 0302 	and.w	r3, r3, #2
 8003978:	2b02      	cmp	r3, #2
 800397a:	d11b      	bne.n	80039b4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f06f 0202 	mvn.w	r2, #2
 8003984:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2201      	movs	r2, #1
 800398a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	699b      	ldr	r3, [r3, #24]
 8003992:	f003 0303 	and.w	r3, r3, #3
 8003996:	2b00      	cmp	r3, #0
 8003998:	d003      	beq.n	80039a2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	f000 f9b0 	bl	8003d00 <HAL_TIM_IC_CaptureCallback>
 80039a0:	e005      	b.n	80039ae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	f000 f9a2 	bl	8003cec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039a8:	6878      	ldr	r0, [r7, #4]
 80039aa:	f000 f9b3 	bl	8003d14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2200      	movs	r2, #0
 80039b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	691b      	ldr	r3, [r3, #16]
 80039ba:	f003 0304 	and.w	r3, r3, #4
 80039be:	2b04      	cmp	r3, #4
 80039c0:	d122      	bne.n	8003a08 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	68db      	ldr	r3, [r3, #12]
 80039c8:	f003 0304 	and.w	r3, r3, #4
 80039cc:	2b04      	cmp	r3, #4
 80039ce:	d11b      	bne.n	8003a08 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f06f 0204 	mvn.w	r2, #4
 80039d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2202      	movs	r2, #2
 80039de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	699b      	ldr	r3, [r3, #24]
 80039e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d003      	beq.n	80039f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	f000 f986 	bl	8003d00 <HAL_TIM_IC_CaptureCallback>
 80039f4:	e005      	b.n	8003a02 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039f6:	6878      	ldr	r0, [r7, #4]
 80039f8:	f000 f978 	bl	8003cec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	f000 f989 	bl	8003d14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2200      	movs	r2, #0
 8003a06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	691b      	ldr	r3, [r3, #16]
 8003a0e:	f003 0308 	and.w	r3, r3, #8
 8003a12:	2b08      	cmp	r3, #8
 8003a14:	d122      	bne.n	8003a5c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	68db      	ldr	r3, [r3, #12]
 8003a1c:	f003 0308 	and.w	r3, r3, #8
 8003a20:	2b08      	cmp	r3, #8
 8003a22:	d11b      	bne.n	8003a5c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f06f 0208 	mvn.w	r2, #8
 8003a2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2204      	movs	r2, #4
 8003a32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	69db      	ldr	r3, [r3, #28]
 8003a3a:	f003 0303 	and.w	r3, r3, #3
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d003      	beq.n	8003a4a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	f000 f95c 	bl	8003d00 <HAL_TIM_IC_CaptureCallback>
 8003a48:	e005      	b.n	8003a56 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f000 f94e 	bl	8003cec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a50:	6878      	ldr	r0, [r7, #4]
 8003a52:	f000 f95f 	bl	8003d14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	691b      	ldr	r3, [r3, #16]
 8003a62:	f003 0310 	and.w	r3, r3, #16
 8003a66:	2b10      	cmp	r3, #16
 8003a68:	d122      	bne.n	8003ab0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	68db      	ldr	r3, [r3, #12]
 8003a70:	f003 0310 	and.w	r3, r3, #16
 8003a74:	2b10      	cmp	r3, #16
 8003a76:	d11b      	bne.n	8003ab0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f06f 0210 	mvn.w	r2, #16
 8003a80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2208      	movs	r2, #8
 8003a86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	69db      	ldr	r3, [r3, #28]
 8003a8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d003      	beq.n	8003a9e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f000 f932 	bl	8003d00 <HAL_TIM_IC_CaptureCallback>
 8003a9c:	e005      	b.n	8003aaa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f000 f924 	bl	8003cec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003aa4:	6878      	ldr	r0, [r7, #4]
 8003aa6:	f000 f935 	bl	8003d14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2200      	movs	r2, #0
 8003aae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	691b      	ldr	r3, [r3, #16]
 8003ab6:	f003 0301 	and.w	r3, r3, #1
 8003aba:	2b01      	cmp	r3, #1
 8003abc:	d10e      	bne.n	8003adc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	68db      	ldr	r3, [r3, #12]
 8003ac4:	f003 0301 	and.w	r3, r3, #1
 8003ac8:	2b01      	cmp	r3, #1
 8003aca:	d107      	bne.n	8003adc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f06f 0201 	mvn.w	r2, #1
 8003ad4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f7fc ff1e 	bl	8000918 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	691b      	ldr	r3, [r3, #16]
 8003ae2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ae6:	2b80      	cmp	r3, #128	; 0x80
 8003ae8:	d10e      	bne.n	8003b08 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	68db      	ldr	r3, [r3, #12]
 8003af0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003af4:	2b80      	cmp	r3, #128	; 0x80
 8003af6:	d107      	bne.n	8003b08 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003b00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f000 fbe0 	bl	80042c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	691b      	ldr	r3, [r3, #16]
 8003b0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b12:	2b40      	cmp	r3, #64	; 0x40
 8003b14:	d10e      	bne.n	8003b34 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	68db      	ldr	r3, [r3, #12]
 8003b1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b20:	2b40      	cmp	r3, #64	; 0x40
 8003b22:	d107      	bne.n	8003b34 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003b2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	f000 f8fa 	bl	8003d28 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	691b      	ldr	r3, [r3, #16]
 8003b3a:	f003 0320 	and.w	r3, r3, #32
 8003b3e:	2b20      	cmp	r3, #32
 8003b40:	d10e      	bne.n	8003b60 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	68db      	ldr	r3, [r3, #12]
 8003b48:	f003 0320 	and.w	r3, r3, #32
 8003b4c:	2b20      	cmp	r3, #32
 8003b4e:	d107      	bne.n	8003b60 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f06f 0220 	mvn.w	r2, #32
 8003b58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f000 fbaa 	bl	80042b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003b60:	bf00      	nop
 8003b62:	3708      	adds	r7, #8
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd80      	pop	{r7, pc}

08003b68 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b086      	sub	sp, #24
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	60f8      	str	r0, [r7, #12]
 8003b70:	60b9      	str	r1, [r7, #8]
 8003b72:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b74:	2300      	movs	r3, #0
 8003b76:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b7e:	2b01      	cmp	r3, #1
 8003b80:	d101      	bne.n	8003b86 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003b82:	2302      	movs	r3, #2
 8003b84:	e0ae      	b.n	8003ce4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2201      	movs	r2, #1
 8003b8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2b0c      	cmp	r3, #12
 8003b92:	f200 809f 	bhi.w	8003cd4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003b96:	a201      	add	r2, pc, #4	; (adr r2, 8003b9c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003b98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b9c:	08003bd1 	.word	0x08003bd1
 8003ba0:	08003cd5 	.word	0x08003cd5
 8003ba4:	08003cd5 	.word	0x08003cd5
 8003ba8:	08003cd5 	.word	0x08003cd5
 8003bac:	08003c11 	.word	0x08003c11
 8003bb0:	08003cd5 	.word	0x08003cd5
 8003bb4:	08003cd5 	.word	0x08003cd5
 8003bb8:	08003cd5 	.word	0x08003cd5
 8003bbc:	08003c53 	.word	0x08003c53
 8003bc0:	08003cd5 	.word	0x08003cd5
 8003bc4:	08003cd5 	.word	0x08003cd5
 8003bc8:	08003cd5 	.word	0x08003cd5
 8003bcc:	08003c93 	.word	0x08003c93
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	68b9      	ldr	r1, [r7, #8]
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f000 f90e 	bl	8003df8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	699a      	ldr	r2, [r3, #24]
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f042 0208 	orr.w	r2, r2, #8
 8003bea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	699a      	ldr	r2, [r3, #24]
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f022 0204 	bic.w	r2, r2, #4
 8003bfa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	6999      	ldr	r1, [r3, #24]
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	691a      	ldr	r2, [r3, #16]
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	430a      	orrs	r2, r1
 8003c0c:	619a      	str	r2, [r3, #24]
      break;
 8003c0e:	e064      	b.n	8003cda <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	68b9      	ldr	r1, [r7, #8]
 8003c16:	4618      	mov	r0, r3
 8003c18:	f000 f954 	bl	8003ec4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	699a      	ldr	r2, [r3, #24]
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c2a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	699a      	ldr	r2, [r3, #24]
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c3a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	6999      	ldr	r1, [r3, #24]
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	691b      	ldr	r3, [r3, #16]
 8003c46:	021a      	lsls	r2, r3, #8
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	430a      	orrs	r2, r1
 8003c4e:	619a      	str	r2, [r3, #24]
      break;
 8003c50:	e043      	b.n	8003cda <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	68b9      	ldr	r1, [r7, #8]
 8003c58:	4618      	mov	r0, r3
 8003c5a:	f000 f99f 	bl	8003f9c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	69da      	ldr	r2, [r3, #28]
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f042 0208 	orr.w	r2, r2, #8
 8003c6c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	69da      	ldr	r2, [r3, #28]
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f022 0204 	bic.w	r2, r2, #4
 8003c7c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	69d9      	ldr	r1, [r3, #28]
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	691a      	ldr	r2, [r3, #16]
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	430a      	orrs	r2, r1
 8003c8e:	61da      	str	r2, [r3, #28]
      break;
 8003c90:	e023      	b.n	8003cda <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	68b9      	ldr	r1, [r7, #8]
 8003c98:	4618      	mov	r0, r3
 8003c9a:	f000 f9e9 	bl	8004070 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	69da      	ldr	r2, [r3, #28]
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003cac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	69da      	ldr	r2, [r3, #28]
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cbc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	69d9      	ldr	r1, [r3, #28]
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	691b      	ldr	r3, [r3, #16]
 8003cc8:	021a      	lsls	r2, r3, #8
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	430a      	orrs	r2, r1
 8003cd0:	61da      	str	r2, [r3, #28]
      break;
 8003cd2:	e002      	b.n	8003cda <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	75fb      	strb	r3, [r7, #23]
      break;
 8003cd8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003ce2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	3718      	adds	r7, #24
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	bd80      	pop	{r7, pc}

08003cec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003cec:	b480      	push	{r7}
 8003cee:	b083      	sub	sp, #12
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003cf4:	bf00      	nop
 8003cf6:	370c      	adds	r7, #12
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfe:	4770      	bx	lr

08003d00 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b083      	sub	sp, #12
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003d08:	bf00      	nop
 8003d0a:	370c      	adds	r7, #12
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d12:	4770      	bx	lr

08003d14 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b083      	sub	sp, #12
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003d1c:	bf00      	nop
 8003d1e:	370c      	adds	r7, #12
 8003d20:	46bd      	mov	sp, r7
 8003d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d26:	4770      	bx	lr

08003d28 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b083      	sub	sp, #12
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003d30:	bf00      	nop
 8003d32:	370c      	adds	r7, #12
 8003d34:	46bd      	mov	sp, r7
 8003d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3a:	4770      	bx	lr

08003d3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b085      	sub	sp, #20
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
 8003d44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	4a26      	ldr	r2, [pc, #152]	; (8003de8 <TIM_Base_SetConfig+0xac>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d003      	beq.n	8003d5c <TIM_Base_SetConfig+0x20>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	4a25      	ldr	r2, [pc, #148]	; (8003dec <TIM_Base_SetConfig+0xb0>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d108      	bne.n	8003d6e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	68fa      	ldr	r2, [r7, #12]
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	4a1d      	ldr	r2, [pc, #116]	; (8003de8 <TIM_Base_SetConfig+0xac>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d00b      	beq.n	8003d8e <TIM_Base_SetConfig+0x52>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	4a1c      	ldr	r2, [pc, #112]	; (8003dec <TIM_Base_SetConfig+0xb0>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d007      	beq.n	8003d8e <TIM_Base_SetConfig+0x52>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	4a1b      	ldr	r2, [pc, #108]	; (8003df0 <TIM_Base_SetConfig+0xb4>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d003      	beq.n	8003d8e <TIM_Base_SetConfig+0x52>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	4a1a      	ldr	r2, [pc, #104]	; (8003df4 <TIM_Base_SetConfig+0xb8>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d108      	bne.n	8003da0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	68db      	ldr	r3, [r3, #12]
 8003d9a:	68fa      	ldr	r2, [r7, #12]
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	695b      	ldr	r3, [r3, #20]
 8003daa:	4313      	orrs	r3, r2
 8003dac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	68fa      	ldr	r2, [r7, #12]
 8003db2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	689a      	ldr	r2, [r3, #8]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	4a08      	ldr	r2, [pc, #32]	; (8003de8 <TIM_Base_SetConfig+0xac>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d103      	bne.n	8003dd4 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	691a      	ldr	r2, [r3, #16]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	615a      	str	r2, [r3, #20]
}
 8003dda:	bf00      	nop
 8003ddc:	3714      	adds	r7, #20
 8003dde:	46bd      	mov	sp, r7
 8003de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de4:	4770      	bx	lr
 8003de6:	bf00      	nop
 8003de8:	40010000 	.word	0x40010000
 8003dec:	40000c00 	.word	0x40000c00
 8003df0:	40014000 	.word	0x40014000
 8003df4:	40014800 	.word	0x40014800

08003df8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b087      	sub	sp, #28
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
 8003e00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6a1b      	ldr	r3, [r3, #32]
 8003e06:	f023 0201 	bic.w	r2, r3, #1
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6a1b      	ldr	r3, [r3, #32]
 8003e12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	699b      	ldr	r3, [r3, #24]
 8003e1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	f023 0303 	bic.w	r3, r3, #3
 8003e2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	68fa      	ldr	r2, [r7, #12]
 8003e36:	4313      	orrs	r3, r2
 8003e38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	f023 0302 	bic.w	r3, r3, #2
 8003e40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	697a      	ldr	r2, [r7, #20]
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	4a1c      	ldr	r2, [pc, #112]	; (8003ec0 <TIM_OC1_SetConfig+0xc8>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d10c      	bne.n	8003e6e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	f023 0308 	bic.w	r3, r3, #8
 8003e5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	68db      	ldr	r3, [r3, #12]
 8003e60:	697a      	ldr	r2, [r7, #20]
 8003e62:	4313      	orrs	r3, r2
 8003e64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	f023 0304 	bic.w	r3, r3, #4
 8003e6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	4a13      	ldr	r2, [pc, #76]	; (8003ec0 <TIM_OC1_SetConfig+0xc8>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d111      	bne.n	8003e9a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003e84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	695b      	ldr	r3, [r3, #20]
 8003e8a:	693a      	ldr	r2, [r7, #16]
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	699b      	ldr	r3, [r3, #24]
 8003e94:	693a      	ldr	r2, [r7, #16]
 8003e96:	4313      	orrs	r3, r2
 8003e98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	693a      	ldr	r2, [r7, #16]
 8003e9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	68fa      	ldr	r2, [r7, #12]
 8003ea4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	685a      	ldr	r2, [r3, #4]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	697a      	ldr	r2, [r7, #20]
 8003eb2:	621a      	str	r2, [r3, #32]
}
 8003eb4:	bf00      	nop
 8003eb6:	371c      	adds	r7, #28
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebe:	4770      	bx	lr
 8003ec0:	40010000 	.word	0x40010000

08003ec4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b087      	sub	sp, #28
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
 8003ecc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6a1b      	ldr	r3, [r3, #32]
 8003ed2:	f023 0210 	bic.w	r2, r3, #16
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6a1b      	ldr	r3, [r3, #32]
 8003ede:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	699b      	ldr	r3, [r3, #24]
 8003eea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ef2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003efa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	021b      	lsls	r3, r3, #8
 8003f02:	68fa      	ldr	r2, [r7, #12]
 8003f04:	4313      	orrs	r3, r2
 8003f06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	f023 0320 	bic.w	r3, r3, #32
 8003f0e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	689b      	ldr	r3, [r3, #8]
 8003f14:	011b      	lsls	r3, r3, #4
 8003f16:	697a      	ldr	r2, [r7, #20]
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	4a1e      	ldr	r2, [pc, #120]	; (8003f98 <TIM_OC2_SetConfig+0xd4>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d10d      	bne.n	8003f40 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	68db      	ldr	r3, [r3, #12]
 8003f30:	011b      	lsls	r3, r3, #4
 8003f32:	697a      	ldr	r2, [r7, #20]
 8003f34:	4313      	orrs	r3, r2
 8003f36:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f3e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	4a15      	ldr	r2, [pc, #84]	; (8003f98 <TIM_OC2_SetConfig+0xd4>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d113      	bne.n	8003f70 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003f4e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003f56:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	695b      	ldr	r3, [r3, #20]
 8003f5c:	009b      	lsls	r3, r3, #2
 8003f5e:	693a      	ldr	r2, [r7, #16]
 8003f60:	4313      	orrs	r3, r2
 8003f62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	699b      	ldr	r3, [r3, #24]
 8003f68:	009b      	lsls	r3, r3, #2
 8003f6a:	693a      	ldr	r2, [r7, #16]
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	693a      	ldr	r2, [r7, #16]
 8003f74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	68fa      	ldr	r2, [r7, #12]
 8003f7a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	685a      	ldr	r2, [r3, #4]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	697a      	ldr	r2, [r7, #20]
 8003f88:	621a      	str	r2, [r3, #32]
}
 8003f8a:	bf00      	nop
 8003f8c:	371c      	adds	r7, #28
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f94:	4770      	bx	lr
 8003f96:	bf00      	nop
 8003f98:	40010000 	.word	0x40010000

08003f9c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b087      	sub	sp, #28
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
 8003fa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6a1b      	ldr	r3, [r3, #32]
 8003faa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6a1b      	ldr	r3, [r3, #32]
 8003fb6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	69db      	ldr	r3, [r3, #28]
 8003fc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	f023 0303 	bic.w	r3, r3, #3
 8003fd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	68fa      	ldr	r2, [r7, #12]
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003fe4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	021b      	lsls	r3, r3, #8
 8003fec:	697a      	ldr	r2, [r7, #20]
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	4a1d      	ldr	r2, [pc, #116]	; (800406c <TIM_OC3_SetConfig+0xd0>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d10d      	bne.n	8004016 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004000:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	68db      	ldr	r3, [r3, #12]
 8004006:	021b      	lsls	r3, r3, #8
 8004008:	697a      	ldr	r2, [r7, #20]
 800400a:	4313      	orrs	r3, r2
 800400c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004014:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	4a14      	ldr	r2, [pc, #80]	; (800406c <TIM_OC3_SetConfig+0xd0>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d113      	bne.n	8004046 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004024:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800402c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	695b      	ldr	r3, [r3, #20]
 8004032:	011b      	lsls	r3, r3, #4
 8004034:	693a      	ldr	r2, [r7, #16]
 8004036:	4313      	orrs	r3, r2
 8004038:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	699b      	ldr	r3, [r3, #24]
 800403e:	011b      	lsls	r3, r3, #4
 8004040:	693a      	ldr	r2, [r7, #16]
 8004042:	4313      	orrs	r3, r2
 8004044:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	693a      	ldr	r2, [r7, #16]
 800404a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	68fa      	ldr	r2, [r7, #12]
 8004050:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	685a      	ldr	r2, [r3, #4]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	697a      	ldr	r2, [r7, #20]
 800405e:	621a      	str	r2, [r3, #32]
}
 8004060:	bf00      	nop
 8004062:	371c      	adds	r7, #28
 8004064:	46bd      	mov	sp, r7
 8004066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406a:	4770      	bx	lr
 800406c:	40010000 	.word	0x40010000

08004070 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004070:	b480      	push	{r7}
 8004072:	b087      	sub	sp, #28
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
 8004078:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6a1b      	ldr	r3, [r3, #32]
 800407e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6a1b      	ldr	r3, [r3, #32]
 800408a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	69db      	ldr	r3, [r3, #28]
 8004096:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800409e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	021b      	lsls	r3, r3, #8
 80040ae:	68fa      	ldr	r2, [r7, #12]
 80040b0:	4313      	orrs	r3, r2
 80040b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80040ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	031b      	lsls	r3, r3, #12
 80040c2:	693a      	ldr	r2, [r7, #16]
 80040c4:	4313      	orrs	r3, r2
 80040c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	4a10      	ldr	r2, [pc, #64]	; (800410c <TIM_OC4_SetConfig+0x9c>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d109      	bne.n	80040e4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80040d6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	695b      	ldr	r3, [r3, #20]
 80040dc:	019b      	lsls	r3, r3, #6
 80040de:	697a      	ldr	r2, [r7, #20]
 80040e0:	4313      	orrs	r3, r2
 80040e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	697a      	ldr	r2, [r7, #20]
 80040e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	68fa      	ldr	r2, [r7, #12]
 80040ee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	685a      	ldr	r2, [r3, #4]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	693a      	ldr	r2, [r7, #16]
 80040fc:	621a      	str	r2, [r3, #32]
}
 80040fe:	bf00      	nop
 8004100:	371c      	adds	r7, #28
 8004102:	46bd      	mov	sp, r7
 8004104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004108:	4770      	bx	lr
 800410a:	bf00      	nop
 800410c:	40010000 	.word	0x40010000

08004110 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004110:	b480      	push	{r7}
 8004112:	b087      	sub	sp, #28
 8004114:	af00      	add	r7, sp, #0
 8004116:	60f8      	str	r0, [r7, #12]
 8004118:	60b9      	str	r1, [r7, #8]
 800411a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	f003 031f 	and.w	r3, r3, #31
 8004122:	2201      	movs	r2, #1
 8004124:	fa02 f303 	lsl.w	r3, r2, r3
 8004128:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	6a1a      	ldr	r2, [r3, #32]
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	43db      	mvns	r3, r3
 8004132:	401a      	ands	r2, r3
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	6a1a      	ldr	r2, [r3, #32]
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	f003 031f 	and.w	r3, r3, #31
 8004142:	6879      	ldr	r1, [r7, #4]
 8004144:	fa01 f303 	lsl.w	r3, r1, r3
 8004148:	431a      	orrs	r2, r3
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	621a      	str	r2, [r3, #32]
}
 800414e:	bf00      	nop
 8004150:	371c      	adds	r7, #28
 8004152:	46bd      	mov	sp, r7
 8004154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004158:	4770      	bx	lr
	...

0800415c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800415c:	b480      	push	{r7}
 800415e:	b085      	sub	sp, #20
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
 8004164:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800416c:	2b01      	cmp	r3, #1
 800416e:	d101      	bne.n	8004174 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004170:	2302      	movs	r3, #2
 8004172:	e041      	b.n	80041f8 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2201      	movs	r2, #1
 8004178:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2202      	movs	r2, #2
 8004180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800419a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	68fa      	ldr	r2, [r7, #12]
 80041a2:	4313      	orrs	r3, r2
 80041a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	68fa      	ldr	r2, [r7, #12]
 80041ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a14      	ldr	r2, [pc, #80]	; (8004204 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d009      	beq.n	80041cc <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a12      	ldr	r2, [pc, #72]	; (8004208 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d004      	beq.n	80041cc <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a11      	ldr	r2, [pc, #68]	; (800420c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d10c      	bne.n	80041e6 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041d2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	68ba      	ldr	r2, [r7, #8]
 80041da:	4313      	orrs	r3, r2
 80041dc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	68ba      	ldr	r2, [r7, #8]
 80041e4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2201      	movs	r2, #1
 80041ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2200      	movs	r2, #0
 80041f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80041f6:	2300      	movs	r3, #0
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	3714      	adds	r7, #20
 80041fc:	46bd      	mov	sp, r7
 80041fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004202:	4770      	bx	lr
 8004204:	40010000 	.word	0x40010000
 8004208:	40000c00 	.word	0x40000c00
 800420c:	40014000 	.word	0x40014000

08004210 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004210:	b480      	push	{r7}
 8004212:	b085      	sub	sp, #20
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
 8004218:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800421a:	2300      	movs	r3, #0
 800421c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004224:	2b01      	cmp	r3, #1
 8004226:	d101      	bne.n	800422c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004228:	2302      	movs	r3, #2
 800422a:	e03d      	b.n	80042a8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2201      	movs	r2, #1
 8004230:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	68db      	ldr	r3, [r3, #12]
 800423e:	4313      	orrs	r3, r2
 8004240:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	4313      	orrs	r3, r2
 800424e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	4313      	orrs	r3, r2
 800425c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4313      	orrs	r3, r2
 800426a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	691b      	ldr	r3, [r3, #16]
 8004276:	4313      	orrs	r3, r2
 8004278:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	695b      	ldr	r3, [r3, #20]
 8004284:	4313      	orrs	r3, r2
 8004286:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	69db      	ldr	r3, [r3, #28]
 8004292:	4313      	orrs	r3, r2
 8004294:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	68fa      	ldr	r2, [r7, #12]
 800429c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2200      	movs	r2, #0
 80042a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80042a6:	2300      	movs	r3, #0
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	3714      	adds	r7, #20
 80042ac:	46bd      	mov	sp, r7
 80042ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b2:	4770      	bx	lr

080042b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b083      	sub	sp, #12
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80042bc:	bf00      	nop
 80042be:	370c      	adds	r7, #12
 80042c0:	46bd      	mov	sp, r7
 80042c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c6:	4770      	bx	lr

080042c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b083      	sub	sp, #12
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80042d0:	bf00      	nop
 80042d2:	370c      	adds	r7, #12
 80042d4:	46bd      	mov	sp, r7
 80042d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042da:	4770      	bx	lr

080042dc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b082      	sub	sp, #8
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d101      	bne.n	80042ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	e03f      	b.n	800436e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042f4:	b2db      	uxtb	r3, r3
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d106      	bne.n	8004308 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2200      	movs	r2, #0
 80042fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f7fd f9b6 	bl	8001674 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2224      	movs	r2, #36	; 0x24
 800430c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	68da      	ldr	r2, [r3, #12]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800431e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004320:	6878      	ldr	r0, [r7, #4]
 8004322:	f000 fe81 	bl	8005028 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	691a      	ldr	r2, [r3, #16]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004334:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	695a      	ldr	r2, [r3, #20]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004344:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	68da      	ldr	r2, [r3, #12]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004354:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2200      	movs	r2, #0
 800435a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2220      	movs	r2, #32
 8004360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2220      	movs	r2, #32
 8004368:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800436c:	2300      	movs	r3, #0
}
 800436e:	4618      	mov	r0, r3
 8004370:	3708      	adds	r7, #8
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}

08004376 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004376:	b580      	push	{r7, lr}
 8004378:	b08a      	sub	sp, #40	; 0x28
 800437a:	af02      	add	r7, sp, #8
 800437c:	60f8      	str	r0, [r7, #12]
 800437e:	60b9      	str	r1, [r7, #8]
 8004380:	603b      	str	r3, [r7, #0]
 8004382:	4613      	mov	r3, r2
 8004384:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004386:	2300      	movs	r3, #0
 8004388:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004390:	b2db      	uxtb	r3, r3
 8004392:	2b20      	cmp	r3, #32
 8004394:	d17c      	bne.n	8004490 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d002      	beq.n	80043a2 <HAL_UART_Transmit+0x2c>
 800439c:	88fb      	ldrh	r3, [r7, #6]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d101      	bne.n	80043a6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	e075      	b.n	8004492 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043ac:	2b01      	cmp	r3, #1
 80043ae:	d101      	bne.n	80043b4 <HAL_UART_Transmit+0x3e>
 80043b0:	2302      	movs	r3, #2
 80043b2:	e06e      	b.n	8004492 <HAL_UART_Transmit+0x11c>
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	2201      	movs	r2, #1
 80043b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2200      	movs	r2, #0
 80043c0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	2221      	movs	r2, #33	; 0x21
 80043c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80043ca:	f7fd fa03 	bl	80017d4 <HAL_GetTick>
 80043ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	88fa      	ldrh	r2, [r7, #6]
 80043d4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	88fa      	ldrh	r2, [r7, #6]
 80043da:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	689b      	ldr	r3, [r3, #8]
 80043e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043e4:	d108      	bne.n	80043f8 <HAL_UART_Transmit+0x82>
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	691b      	ldr	r3, [r3, #16]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d104      	bne.n	80043f8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80043ee:	2300      	movs	r3, #0
 80043f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	61bb      	str	r3, [r7, #24]
 80043f6:	e003      	b.n	8004400 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80043fc:	2300      	movs	r3, #0
 80043fe:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	2200      	movs	r2, #0
 8004404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004408:	e02a      	b.n	8004460 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	9300      	str	r3, [sp, #0]
 800440e:	697b      	ldr	r3, [r7, #20]
 8004410:	2200      	movs	r2, #0
 8004412:	2180      	movs	r1, #128	; 0x80
 8004414:	68f8      	ldr	r0, [r7, #12]
 8004416:	f000 fbc1 	bl	8004b9c <UART_WaitOnFlagUntilTimeout>
 800441a:	4603      	mov	r3, r0
 800441c:	2b00      	cmp	r3, #0
 800441e:	d001      	beq.n	8004424 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004420:	2303      	movs	r3, #3
 8004422:	e036      	b.n	8004492 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004424:	69fb      	ldr	r3, [r7, #28]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d10b      	bne.n	8004442 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800442a:	69bb      	ldr	r3, [r7, #24]
 800442c:	881b      	ldrh	r3, [r3, #0]
 800442e:	461a      	mov	r2, r3
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004438:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800443a:	69bb      	ldr	r3, [r7, #24]
 800443c:	3302      	adds	r3, #2
 800443e:	61bb      	str	r3, [r7, #24]
 8004440:	e007      	b.n	8004452 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004442:	69fb      	ldr	r3, [r7, #28]
 8004444:	781a      	ldrb	r2, [r3, #0]
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800444c:	69fb      	ldr	r3, [r7, #28]
 800444e:	3301      	adds	r3, #1
 8004450:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004456:	b29b      	uxth	r3, r3
 8004458:	3b01      	subs	r3, #1
 800445a:	b29a      	uxth	r2, r3
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004464:	b29b      	uxth	r3, r3
 8004466:	2b00      	cmp	r3, #0
 8004468:	d1cf      	bne.n	800440a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	9300      	str	r3, [sp, #0]
 800446e:	697b      	ldr	r3, [r7, #20]
 8004470:	2200      	movs	r2, #0
 8004472:	2140      	movs	r1, #64	; 0x40
 8004474:	68f8      	ldr	r0, [r7, #12]
 8004476:	f000 fb91 	bl	8004b9c <UART_WaitOnFlagUntilTimeout>
 800447a:	4603      	mov	r3, r0
 800447c:	2b00      	cmp	r3, #0
 800447e:	d001      	beq.n	8004484 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004480:	2303      	movs	r3, #3
 8004482:	e006      	b.n	8004492 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	2220      	movs	r2, #32
 8004488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800448c:	2300      	movs	r3, #0
 800448e:	e000      	b.n	8004492 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004490:	2302      	movs	r3, #2
  }
}
 8004492:	4618      	mov	r0, r3
 8004494:	3720      	adds	r7, #32
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}

0800449a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800449a:	b580      	push	{r7, lr}
 800449c:	b08a      	sub	sp, #40	; 0x28
 800449e:	af02      	add	r7, sp, #8
 80044a0:	60f8      	str	r0, [r7, #12]
 80044a2:	60b9      	str	r1, [r7, #8]
 80044a4:	603b      	str	r3, [r7, #0]
 80044a6:	4613      	mov	r3, r2
 80044a8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80044aa:	2300      	movs	r3, #0
 80044ac:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80044b4:	b2db      	uxtb	r3, r3
 80044b6:	2b20      	cmp	r3, #32
 80044b8:	f040 808c 	bne.w	80045d4 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d002      	beq.n	80044c8 <HAL_UART_Receive+0x2e>
 80044c2:	88fb      	ldrh	r3, [r7, #6]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d101      	bne.n	80044cc <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80044c8:	2301      	movs	r3, #1
 80044ca:	e084      	b.n	80045d6 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044d2:	2b01      	cmp	r3, #1
 80044d4:	d101      	bne.n	80044da <HAL_UART_Receive+0x40>
 80044d6:	2302      	movs	r3, #2
 80044d8:	e07d      	b.n	80045d6 <HAL_UART_Receive+0x13c>
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	2201      	movs	r2, #1
 80044de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2200      	movs	r2, #0
 80044e6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	2222      	movs	r2, #34	; 0x22
 80044ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	2200      	movs	r2, #0
 80044f4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80044f6:	f7fd f96d 	bl	80017d4 <HAL_GetTick>
 80044fa:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	88fa      	ldrh	r2, [r7, #6]
 8004500:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	88fa      	ldrh	r2, [r7, #6]
 8004506:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	689b      	ldr	r3, [r3, #8]
 800450c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004510:	d108      	bne.n	8004524 <HAL_UART_Receive+0x8a>
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	691b      	ldr	r3, [r3, #16]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d104      	bne.n	8004524 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800451a:	2300      	movs	r3, #0
 800451c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	61bb      	str	r3, [r7, #24]
 8004522:	e003      	b.n	800452c <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004528:	2300      	movs	r3, #0
 800452a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2200      	movs	r2, #0
 8004530:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004534:	e043      	b.n	80045be <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	9300      	str	r3, [sp, #0]
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	2200      	movs	r2, #0
 800453e:	2120      	movs	r1, #32
 8004540:	68f8      	ldr	r0, [r7, #12]
 8004542:	f000 fb2b 	bl	8004b9c <UART_WaitOnFlagUntilTimeout>
 8004546:	4603      	mov	r3, r0
 8004548:	2b00      	cmp	r3, #0
 800454a:	d001      	beq.n	8004550 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 800454c:	2303      	movs	r3, #3
 800454e:	e042      	b.n	80045d6 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8004550:	69fb      	ldr	r3, [r7, #28]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d10c      	bne.n	8004570 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	b29b      	uxth	r3, r3
 800455e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004562:	b29a      	uxth	r2, r3
 8004564:	69bb      	ldr	r3, [r7, #24]
 8004566:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004568:	69bb      	ldr	r3, [r7, #24]
 800456a:	3302      	adds	r3, #2
 800456c:	61bb      	str	r3, [r7, #24]
 800456e:	e01f      	b.n	80045b0 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	689b      	ldr	r3, [r3, #8]
 8004574:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004578:	d007      	beq.n	800458a <HAL_UART_Receive+0xf0>
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d10a      	bne.n	8004598 <HAL_UART_Receive+0xfe>
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	691b      	ldr	r3, [r3, #16]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d106      	bne.n	8004598 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	b2da      	uxtb	r2, r3
 8004592:	69fb      	ldr	r3, [r7, #28]
 8004594:	701a      	strb	r2, [r3, #0]
 8004596:	e008      	b.n	80045aa <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	b2db      	uxtb	r3, r3
 80045a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80045a4:	b2da      	uxtb	r2, r3
 80045a6:	69fb      	ldr	r3, [r7, #28]
 80045a8:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80045aa:	69fb      	ldr	r3, [r7, #28]
 80045ac:	3301      	adds	r3, #1
 80045ae:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80045b4:	b29b      	uxth	r3, r3
 80045b6:	3b01      	subs	r3, #1
 80045b8:	b29a      	uxth	r2, r3
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80045c2:	b29b      	uxth	r3, r3
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d1b6      	bne.n	8004536 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2220      	movs	r2, #32
 80045cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80045d0:	2300      	movs	r3, #0
 80045d2:	e000      	b.n	80045d6 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80045d4:	2302      	movs	r3, #2
  }
}
 80045d6:	4618      	mov	r0, r3
 80045d8:	3720      	adds	r7, #32
 80045da:	46bd      	mov	sp, r7
 80045dc:	bd80      	pop	{r7, pc}

080045de <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80045de:	b580      	push	{r7, lr}
 80045e0:	b084      	sub	sp, #16
 80045e2:	af00      	add	r7, sp, #0
 80045e4:	60f8      	str	r0, [r7, #12]
 80045e6:	60b9      	str	r1, [r7, #8]
 80045e8:	4613      	mov	r3, r2
 80045ea:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80045f2:	b2db      	uxtb	r3, r3
 80045f4:	2b20      	cmp	r3, #32
 80045f6:	d11d      	bne.n	8004634 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d002      	beq.n	8004604 <HAL_UART_Receive_IT+0x26>
 80045fe:	88fb      	ldrh	r3, [r7, #6]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d101      	bne.n	8004608 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004604:	2301      	movs	r3, #1
 8004606:	e016      	b.n	8004636 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800460e:	2b01      	cmp	r3, #1
 8004610:	d101      	bne.n	8004616 <HAL_UART_Receive_IT+0x38>
 8004612:	2302      	movs	r3, #2
 8004614:	e00f      	b.n	8004636 <HAL_UART_Receive_IT+0x58>
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	2201      	movs	r2, #1
 800461a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	2200      	movs	r2, #0
 8004622:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004624:	88fb      	ldrh	r3, [r7, #6]
 8004626:	461a      	mov	r2, r3
 8004628:	68b9      	ldr	r1, [r7, #8]
 800462a:	68f8      	ldr	r0, [r7, #12]
 800462c:	f000 fb24 	bl	8004c78 <UART_Start_Receive_IT>
 8004630:	4603      	mov	r3, r0
 8004632:	e000      	b.n	8004636 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004634:	2302      	movs	r3, #2
  }
}
 8004636:	4618      	mov	r0, r3
 8004638:	3710      	adds	r7, #16
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}
	...

08004640 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b0ba      	sub	sp, #232	; 0xe8
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	68db      	ldr	r3, [r3, #12]
 8004658:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	695b      	ldr	r3, [r3, #20]
 8004662:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004666:	2300      	movs	r3, #0
 8004668:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800466c:	2300      	movs	r3, #0
 800466e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004672:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004676:	f003 030f 	and.w	r3, r3, #15
 800467a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800467e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004682:	2b00      	cmp	r3, #0
 8004684:	d10f      	bne.n	80046a6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004686:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800468a:	f003 0320 	and.w	r3, r3, #32
 800468e:	2b00      	cmp	r3, #0
 8004690:	d009      	beq.n	80046a6 <HAL_UART_IRQHandler+0x66>
 8004692:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004696:	f003 0320 	and.w	r3, r3, #32
 800469a:	2b00      	cmp	r3, #0
 800469c:	d003      	beq.n	80046a6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	f000 fc07 	bl	8004eb2 <UART_Receive_IT>
      return;
 80046a4:	e256      	b.n	8004b54 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80046a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	f000 80de 	beq.w	800486c <HAL_UART_IRQHandler+0x22c>
 80046b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80046b4:	f003 0301 	and.w	r3, r3, #1
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d106      	bne.n	80046ca <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80046bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046c0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	f000 80d1 	beq.w	800486c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80046ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046ce:	f003 0301 	and.w	r3, r3, #1
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d00b      	beq.n	80046ee <HAL_UART_IRQHandler+0xae>
 80046d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d005      	beq.n	80046ee <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e6:	f043 0201 	orr.w	r2, r3, #1
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80046ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046f2:	f003 0304 	and.w	r3, r3, #4
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d00b      	beq.n	8004712 <HAL_UART_IRQHandler+0xd2>
 80046fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80046fe:	f003 0301 	and.w	r3, r3, #1
 8004702:	2b00      	cmp	r3, #0
 8004704:	d005      	beq.n	8004712 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800470a:	f043 0202 	orr.w	r2, r3, #2
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004712:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004716:	f003 0302 	and.w	r3, r3, #2
 800471a:	2b00      	cmp	r3, #0
 800471c:	d00b      	beq.n	8004736 <HAL_UART_IRQHandler+0xf6>
 800471e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004722:	f003 0301 	and.w	r3, r3, #1
 8004726:	2b00      	cmp	r3, #0
 8004728:	d005      	beq.n	8004736 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800472e:	f043 0204 	orr.w	r2, r3, #4
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004736:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800473a:	f003 0308 	and.w	r3, r3, #8
 800473e:	2b00      	cmp	r3, #0
 8004740:	d011      	beq.n	8004766 <HAL_UART_IRQHandler+0x126>
 8004742:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004746:	f003 0320 	and.w	r3, r3, #32
 800474a:	2b00      	cmp	r3, #0
 800474c:	d105      	bne.n	800475a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800474e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004752:	f003 0301 	and.w	r3, r3, #1
 8004756:	2b00      	cmp	r3, #0
 8004758:	d005      	beq.n	8004766 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800475e:	f043 0208 	orr.w	r2, r3, #8
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800476a:	2b00      	cmp	r3, #0
 800476c:	f000 81ed 	beq.w	8004b4a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004770:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004774:	f003 0320 	and.w	r3, r3, #32
 8004778:	2b00      	cmp	r3, #0
 800477a:	d008      	beq.n	800478e <HAL_UART_IRQHandler+0x14e>
 800477c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004780:	f003 0320 	and.w	r3, r3, #32
 8004784:	2b00      	cmp	r3, #0
 8004786:	d002      	beq.n	800478e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004788:	6878      	ldr	r0, [r7, #4]
 800478a:	f000 fb92 	bl	8004eb2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	695b      	ldr	r3, [r3, #20]
 8004794:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004798:	2b40      	cmp	r3, #64	; 0x40
 800479a:	bf0c      	ite	eq
 800479c:	2301      	moveq	r3, #1
 800479e:	2300      	movne	r3, #0
 80047a0:	b2db      	uxtb	r3, r3
 80047a2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047aa:	f003 0308 	and.w	r3, r3, #8
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d103      	bne.n	80047ba <HAL_UART_IRQHandler+0x17a>
 80047b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d04f      	beq.n	800485a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80047ba:	6878      	ldr	r0, [r7, #4]
 80047bc:	f000 fa9a 	bl	8004cf4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	695b      	ldr	r3, [r3, #20]
 80047c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047ca:	2b40      	cmp	r3, #64	; 0x40
 80047cc:	d141      	bne.n	8004852 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	3314      	adds	r3, #20
 80047d4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80047dc:	e853 3f00 	ldrex	r3, [r3]
 80047e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80047e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80047e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	3314      	adds	r3, #20
 80047f6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80047fa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80047fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004802:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004806:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800480a:	e841 2300 	strex	r3, r2, [r1]
 800480e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004812:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004816:	2b00      	cmp	r3, #0
 8004818:	d1d9      	bne.n	80047ce <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800481e:	2b00      	cmp	r3, #0
 8004820:	d013      	beq.n	800484a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004826:	4a7d      	ldr	r2, [pc, #500]	; (8004a1c <HAL_UART_IRQHandler+0x3dc>)
 8004828:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800482e:	4618      	mov	r0, r3
 8004830:	f7fd fcdc 	bl	80021ec <HAL_DMA_Abort_IT>
 8004834:	4603      	mov	r3, r0
 8004836:	2b00      	cmp	r3, #0
 8004838:	d016      	beq.n	8004868 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800483e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004840:	687a      	ldr	r2, [r7, #4]
 8004842:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004844:	4610      	mov	r0, r2
 8004846:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004848:	e00e      	b.n	8004868 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	f000 f990 	bl	8004b70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004850:	e00a      	b.n	8004868 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004852:	6878      	ldr	r0, [r7, #4]
 8004854:	f000 f98c 	bl	8004b70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004858:	e006      	b.n	8004868 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800485a:	6878      	ldr	r0, [r7, #4]
 800485c:	f000 f988 	bl	8004b70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2200      	movs	r2, #0
 8004864:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004866:	e170      	b.n	8004b4a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004868:	bf00      	nop
    return;
 800486a:	e16e      	b.n	8004b4a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004870:	2b01      	cmp	r3, #1
 8004872:	f040 814a 	bne.w	8004b0a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004876:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800487a:	f003 0310 	and.w	r3, r3, #16
 800487e:	2b00      	cmp	r3, #0
 8004880:	f000 8143 	beq.w	8004b0a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004884:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004888:	f003 0310 	and.w	r3, r3, #16
 800488c:	2b00      	cmp	r3, #0
 800488e:	f000 813c 	beq.w	8004b0a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004892:	2300      	movs	r3, #0
 8004894:	60bb      	str	r3, [r7, #8]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	60bb      	str	r3, [r7, #8]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	60bb      	str	r3, [r7, #8]
 80048a6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	695b      	ldr	r3, [r3, #20]
 80048ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048b2:	2b40      	cmp	r3, #64	; 0x40
 80048b4:	f040 80b4 	bne.w	8004a20 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80048c4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	f000 8140 	beq.w	8004b4e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80048d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80048d6:	429a      	cmp	r2, r3
 80048d8:	f080 8139 	bcs.w	8004b4e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80048e2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048e8:	69db      	ldr	r3, [r3, #28]
 80048ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048ee:	f000 8088 	beq.w	8004a02 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	330c      	adds	r3, #12
 80048f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004900:	e853 3f00 	ldrex	r3, [r3]
 8004904:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004908:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800490c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004910:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	330c      	adds	r3, #12
 800491a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800491e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004922:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004926:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800492a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800492e:	e841 2300 	strex	r3, r2, [r1]
 8004932:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004936:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800493a:	2b00      	cmp	r3, #0
 800493c:	d1d9      	bne.n	80048f2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	3314      	adds	r3, #20
 8004944:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004946:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004948:	e853 3f00 	ldrex	r3, [r3]
 800494c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800494e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004950:	f023 0301 	bic.w	r3, r3, #1
 8004954:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	3314      	adds	r3, #20
 800495e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004962:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004966:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004968:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800496a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800496e:	e841 2300 	strex	r3, r2, [r1]
 8004972:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004974:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004976:	2b00      	cmp	r3, #0
 8004978:	d1e1      	bne.n	800493e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	3314      	adds	r3, #20
 8004980:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004982:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004984:	e853 3f00 	ldrex	r3, [r3]
 8004988:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800498a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800498c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004990:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	3314      	adds	r3, #20
 800499a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800499e:	66fa      	str	r2, [r7, #108]	; 0x6c
 80049a0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049a2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80049a4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80049a6:	e841 2300 	strex	r3, r2, [r1]
 80049aa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80049ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d1e3      	bne.n	800497a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2220      	movs	r2, #32
 80049b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2200      	movs	r2, #0
 80049be:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	330c      	adds	r3, #12
 80049c6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049ca:	e853 3f00 	ldrex	r3, [r3]
 80049ce:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80049d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049d2:	f023 0310 	bic.w	r3, r3, #16
 80049d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	330c      	adds	r3, #12
 80049e0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80049e4:	65ba      	str	r2, [r7, #88]	; 0x58
 80049e6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049e8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80049ea:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80049ec:	e841 2300 	strex	r3, r2, [r1]
 80049f0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80049f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d1e3      	bne.n	80049c0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049fc:	4618      	mov	r0, r3
 80049fe:	f7fd fb85 	bl	800210c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004a0a:	b29b      	uxth	r3, r3
 8004a0c:	1ad3      	subs	r3, r2, r3
 8004a0e:	b29b      	uxth	r3, r3
 8004a10:	4619      	mov	r1, r3
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	f000 f8b6 	bl	8004b84 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004a18:	e099      	b.n	8004b4e <HAL_UART_IRQHandler+0x50e>
 8004a1a:	bf00      	nop
 8004a1c:	08004dbb 	.word	0x08004dbb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004a28:	b29b      	uxth	r3, r3
 8004a2a:	1ad3      	subs	r3, r2, r3
 8004a2c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004a34:	b29b      	uxth	r3, r3
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	f000 808b 	beq.w	8004b52 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004a3c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	f000 8086 	beq.w	8004b52 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	330c      	adds	r3, #12
 8004a4c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a50:	e853 3f00 	ldrex	r3, [r3]
 8004a54:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004a56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a58:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004a5c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	330c      	adds	r3, #12
 8004a66:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004a6a:	647a      	str	r2, [r7, #68]	; 0x44
 8004a6c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a6e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004a70:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004a72:	e841 2300 	strex	r3, r2, [r1]
 8004a76:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004a78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d1e3      	bne.n	8004a46 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	3314      	adds	r3, #20
 8004a84:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a88:	e853 3f00 	ldrex	r3, [r3]
 8004a8c:	623b      	str	r3, [r7, #32]
   return(result);
 8004a8e:	6a3b      	ldr	r3, [r7, #32]
 8004a90:	f023 0301 	bic.w	r3, r3, #1
 8004a94:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	3314      	adds	r3, #20
 8004a9e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004aa2:	633a      	str	r2, [r7, #48]	; 0x30
 8004aa4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aa6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004aa8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004aaa:	e841 2300 	strex	r3, r2, [r1]
 8004aae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d1e3      	bne.n	8004a7e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2220      	movs	r2, #32
 8004aba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	330c      	adds	r3, #12
 8004aca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004acc:	693b      	ldr	r3, [r7, #16]
 8004ace:	e853 3f00 	ldrex	r3, [r3]
 8004ad2:	60fb      	str	r3, [r7, #12]
   return(result);
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	f023 0310 	bic.w	r3, r3, #16
 8004ada:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	330c      	adds	r3, #12
 8004ae4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004ae8:	61fa      	str	r2, [r7, #28]
 8004aea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aec:	69b9      	ldr	r1, [r7, #24]
 8004aee:	69fa      	ldr	r2, [r7, #28]
 8004af0:	e841 2300 	strex	r3, r2, [r1]
 8004af4:	617b      	str	r3, [r7, #20]
   return(result);
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d1e3      	bne.n	8004ac4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004afc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004b00:	4619      	mov	r1, r3
 8004b02:	6878      	ldr	r0, [r7, #4]
 8004b04:	f000 f83e 	bl	8004b84 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004b08:	e023      	b.n	8004b52 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004b0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d009      	beq.n	8004b2a <HAL_UART_IRQHandler+0x4ea>
 8004b16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d003      	beq.n	8004b2a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004b22:	6878      	ldr	r0, [r7, #4]
 8004b24:	f000 f95d 	bl	8004de2 <UART_Transmit_IT>
    return;
 8004b28:	e014      	b.n	8004b54 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004b2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d00e      	beq.n	8004b54 <HAL_UART_IRQHandler+0x514>
 8004b36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d008      	beq.n	8004b54 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004b42:	6878      	ldr	r0, [r7, #4]
 8004b44:	f000 f99d 	bl	8004e82 <UART_EndTransmit_IT>
    return;
 8004b48:	e004      	b.n	8004b54 <HAL_UART_IRQHandler+0x514>
    return;
 8004b4a:	bf00      	nop
 8004b4c:	e002      	b.n	8004b54 <HAL_UART_IRQHandler+0x514>
      return;
 8004b4e:	bf00      	nop
 8004b50:	e000      	b.n	8004b54 <HAL_UART_IRQHandler+0x514>
      return;
 8004b52:	bf00      	nop
  }
}
 8004b54:	37e8      	adds	r7, #232	; 0xe8
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd80      	pop	{r7, pc}
 8004b5a:	bf00      	nop

08004b5c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b083      	sub	sp, #12
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004b64:	bf00      	nop
 8004b66:	370c      	adds	r7, #12
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6e:	4770      	bx	lr

08004b70 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004b70:	b480      	push	{r7}
 8004b72:	b083      	sub	sp, #12
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004b78:	bf00      	nop
 8004b7a:	370c      	adds	r7, #12
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b82:	4770      	bx	lr

08004b84 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004b84:	b480      	push	{r7}
 8004b86:	b083      	sub	sp, #12
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
 8004b8c:	460b      	mov	r3, r1
 8004b8e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004b90:	bf00      	nop
 8004b92:	370c      	adds	r7, #12
 8004b94:	46bd      	mov	sp, r7
 8004b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9a:	4770      	bx	lr

08004b9c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b090      	sub	sp, #64	; 0x40
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	60f8      	str	r0, [r7, #12]
 8004ba4:	60b9      	str	r1, [r7, #8]
 8004ba6:	603b      	str	r3, [r7, #0]
 8004ba8:	4613      	mov	r3, r2
 8004baa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bac:	e050      	b.n	8004c50 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004bb0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004bb4:	d04c      	beq.n	8004c50 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004bb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d007      	beq.n	8004bcc <UART_WaitOnFlagUntilTimeout+0x30>
 8004bbc:	f7fc fe0a 	bl	80017d4 <HAL_GetTick>
 8004bc0:	4602      	mov	r2, r0
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	1ad3      	subs	r3, r2, r3
 8004bc6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004bc8:	429a      	cmp	r2, r3
 8004bca:	d241      	bcs.n	8004c50 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	330c      	adds	r3, #12
 8004bd2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bd6:	e853 3f00 	ldrex	r3, [r3]
 8004bda:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bde:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004be2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	330c      	adds	r3, #12
 8004bea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004bec:	637a      	str	r2, [r7, #52]	; 0x34
 8004bee:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bf0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004bf2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004bf4:	e841 2300 	strex	r3, r2, [r1]
 8004bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d1e5      	bne.n	8004bcc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	3314      	adds	r3, #20
 8004c06:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	e853 3f00 	ldrex	r3, [r3]
 8004c0e:	613b      	str	r3, [r7, #16]
   return(result);
 8004c10:	693b      	ldr	r3, [r7, #16]
 8004c12:	f023 0301 	bic.w	r3, r3, #1
 8004c16:	63bb      	str	r3, [r7, #56]	; 0x38
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	3314      	adds	r3, #20
 8004c1e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004c20:	623a      	str	r2, [r7, #32]
 8004c22:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c24:	69f9      	ldr	r1, [r7, #28]
 8004c26:	6a3a      	ldr	r2, [r7, #32]
 8004c28:	e841 2300 	strex	r3, r2, [r1]
 8004c2c:	61bb      	str	r3, [r7, #24]
   return(result);
 8004c2e:	69bb      	ldr	r3, [r7, #24]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d1e5      	bne.n	8004c00 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	2220      	movs	r2, #32
 8004c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	2220      	movs	r2, #32
 8004c40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	2200      	movs	r2, #0
 8004c48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004c4c:	2303      	movs	r3, #3
 8004c4e:	e00f      	b.n	8004c70 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	681a      	ldr	r2, [r3, #0]
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	4013      	ands	r3, r2
 8004c5a:	68ba      	ldr	r2, [r7, #8]
 8004c5c:	429a      	cmp	r2, r3
 8004c5e:	bf0c      	ite	eq
 8004c60:	2301      	moveq	r3, #1
 8004c62:	2300      	movne	r3, #0
 8004c64:	b2db      	uxtb	r3, r3
 8004c66:	461a      	mov	r2, r3
 8004c68:	79fb      	ldrb	r3, [r7, #7]
 8004c6a:	429a      	cmp	r2, r3
 8004c6c:	d09f      	beq.n	8004bae <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004c6e:	2300      	movs	r3, #0
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	3740      	adds	r7, #64	; 0x40
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bd80      	pop	{r7, pc}

08004c78 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	b085      	sub	sp, #20
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	60f8      	str	r0, [r7, #12]
 8004c80:	60b9      	str	r1, [r7, #8]
 8004c82:	4613      	mov	r3, r2
 8004c84:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	68ba      	ldr	r2, [r7, #8]
 8004c8a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	88fa      	ldrh	r2, [r7, #6]
 8004c90:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	88fa      	ldrh	r2, [r7, #6]
 8004c96:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	2222      	movs	r2, #34	; 0x22
 8004ca2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	691b      	ldr	r3, [r3, #16]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d007      	beq.n	8004cc6 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	68da      	ldr	r2, [r3, #12]
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004cc4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	695a      	ldr	r2, [r3, #20]
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f042 0201 	orr.w	r2, r2, #1
 8004cd4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	68da      	ldr	r2, [r3, #12]
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f042 0220 	orr.w	r2, r2, #32
 8004ce4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004ce6:	2300      	movs	r3, #0
}
 8004ce8:	4618      	mov	r0, r3
 8004cea:	3714      	adds	r7, #20
 8004cec:	46bd      	mov	sp, r7
 8004cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf2:	4770      	bx	lr

08004cf4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b095      	sub	sp, #84	; 0x54
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	330c      	adds	r3, #12
 8004d02:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d06:	e853 3f00 	ldrex	r3, [r3]
 8004d0a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d0e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004d12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	330c      	adds	r3, #12
 8004d1a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004d1c:	643a      	str	r2, [r7, #64]	; 0x40
 8004d1e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d20:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004d22:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004d24:	e841 2300 	strex	r3, r2, [r1]
 8004d28:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004d2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d1e5      	bne.n	8004cfc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	3314      	adds	r3, #20
 8004d36:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d38:	6a3b      	ldr	r3, [r7, #32]
 8004d3a:	e853 3f00 	ldrex	r3, [r3]
 8004d3e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d40:	69fb      	ldr	r3, [r7, #28]
 8004d42:	f023 0301 	bic.w	r3, r3, #1
 8004d46:	64bb      	str	r3, [r7, #72]	; 0x48
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	3314      	adds	r3, #20
 8004d4e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d50:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004d52:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d54:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d58:	e841 2300 	strex	r3, r2, [r1]
 8004d5c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d1e5      	bne.n	8004d30 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d68:	2b01      	cmp	r3, #1
 8004d6a:	d119      	bne.n	8004da0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	330c      	adds	r3, #12
 8004d72:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	e853 3f00 	ldrex	r3, [r3]
 8004d7a:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	f023 0310 	bic.w	r3, r3, #16
 8004d82:	647b      	str	r3, [r7, #68]	; 0x44
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	330c      	adds	r3, #12
 8004d8a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004d8c:	61ba      	str	r2, [r7, #24]
 8004d8e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d90:	6979      	ldr	r1, [r7, #20]
 8004d92:	69ba      	ldr	r2, [r7, #24]
 8004d94:	e841 2300 	strex	r3, r2, [r1]
 8004d98:	613b      	str	r3, [r7, #16]
   return(result);
 8004d9a:	693b      	ldr	r3, [r7, #16]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d1e5      	bne.n	8004d6c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2220      	movs	r2, #32
 8004da4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2200      	movs	r2, #0
 8004dac:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004dae:	bf00      	nop
 8004db0:	3754      	adds	r7, #84	; 0x54
 8004db2:	46bd      	mov	sp, r7
 8004db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db8:	4770      	bx	lr

08004dba <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004dba:	b580      	push	{r7, lr}
 8004dbc:	b084      	sub	sp, #16
 8004dbe:	af00      	add	r7, sp, #0
 8004dc0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dc6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004dd4:	68f8      	ldr	r0, [r7, #12]
 8004dd6:	f7ff fecb 	bl	8004b70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004dda:	bf00      	nop
 8004ddc:	3710      	adds	r7, #16
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}

08004de2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004de2:	b480      	push	{r7}
 8004de4:	b085      	sub	sp, #20
 8004de6:	af00      	add	r7, sp, #0
 8004de8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004df0:	b2db      	uxtb	r3, r3
 8004df2:	2b21      	cmp	r3, #33	; 0x21
 8004df4:	d13e      	bne.n	8004e74 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	689b      	ldr	r3, [r3, #8]
 8004dfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dfe:	d114      	bne.n	8004e2a <UART_Transmit_IT+0x48>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	691b      	ldr	r3, [r3, #16]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d110      	bne.n	8004e2a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6a1b      	ldr	r3, [r3, #32]
 8004e0c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	881b      	ldrh	r3, [r3, #0]
 8004e12:	461a      	mov	r2, r3
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e1c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6a1b      	ldr	r3, [r3, #32]
 8004e22:	1c9a      	adds	r2, r3, #2
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	621a      	str	r2, [r3, #32]
 8004e28:	e008      	b.n	8004e3c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6a1b      	ldr	r3, [r3, #32]
 8004e2e:	1c59      	adds	r1, r3, #1
 8004e30:	687a      	ldr	r2, [r7, #4]
 8004e32:	6211      	str	r1, [r2, #32]
 8004e34:	781a      	ldrb	r2, [r3, #0]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004e40:	b29b      	uxth	r3, r3
 8004e42:	3b01      	subs	r3, #1
 8004e44:	b29b      	uxth	r3, r3
 8004e46:	687a      	ldr	r2, [r7, #4]
 8004e48:	4619      	mov	r1, r3
 8004e4a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d10f      	bne.n	8004e70 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	68da      	ldr	r2, [r3, #12]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004e5e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	68da      	ldr	r2, [r3, #12]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e6e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004e70:	2300      	movs	r3, #0
 8004e72:	e000      	b.n	8004e76 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004e74:	2302      	movs	r3, #2
  }
}
 8004e76:	4618      	mov	r0, r3
 8004e78:	3714      	adds	r7, #20
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e80:	4770      	bx	lr

08004e82 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004e82:	b580      	push	{r7, lr}
 8004e84:	b082      	sub	sp, #8
 8004e86:	af00      	add	r7, sp, #0
 8004e88:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	68da      	ldr	r2, [r3, #12]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e98:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2220      	movs	r2, #32
 8004e9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	f7ff fe5a 	bl	8004b5c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004ea8:	2300      	movs	r3, #0
}
 8004eaa:	4618      	mov	r0, r3
 8004eac:	3708      	adds	r7, #8
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bd80      	pop	{r7, pc}

08004eb2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004eb2:	b580      	push	{r7, lr}
 8004eb4:	b08c      	sub	sp, #48	; 0x30
 8004eb6:	af00      	add	r7, sp, #0
 8004eb8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ec0:	b2db      	uxtb	r3, r3
 8004ec2:	2b22      	cmp	r3, #34	; 0x22
 8004ec4:	f040 80ab 	bne.w	800501e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	689b      	ldr	r3, [r3, #8]
 8004ecc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ed0:	d117      	bne.n	8004f02 <UART_Receive_IT+0x50>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	691b      	ldr	r3, [r3, #16]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d113      	bne.n	8004f02 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004eda:	2300      	movs	r3, #0
 8004edc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ee2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	685b      	ldr	r3, [r3, #4]
 8004eea:	b29b      	uxth	r3, r3
 8004eec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ef0:	b29a      	uxth	r2, r3
 8004ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ef4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004efa:	1c9a      	adds	r2, r3, #2
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	629a      	str	r2, [r3, #40]	; 0x28
 8004f00:	e026      	b.n	8004f50 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f06:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004f08:	2300      	movs	r3, #0
 8004f0a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	689b      	ldr	r3, [r3, #8]
 8004f10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f14:	d007      	beq.n	8004f26 <UART_Receive_IT+0x74>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	689b      	ldr	r3, [r3, #8]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d10a      	bne.n	8004f34 <UART_Receive_IT+0x82>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	691b      	ldr	r3, [r3, #16]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d106      	bne.n	8004f34 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	b2da      	uxtb	r2, r3
 8004f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f30:	701a      	strb	r2, [r3, #0]
 8004f32:	e008      	b.n	8004f46 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	b2db      	uxtb	r3, r3
 8004f3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f40:	b2da      	uxtb	r2, r3
 8004f42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f44:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f4a:	1c5a      	adds	r2, r3, #1
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004f54:	b29b      	uxth	r3, r3
 8004f56:	3b01      	subs	r3, #1
 8004f58:	b29b      	uxth	r3, r3
 8004f5a:	687a      	ldr	r2, [r7, #4]
 8004f5c:	4619      	mov	r1, r3
 8004f5e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d15a      	bne.n	800501a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	68da      	ldr	r2, [r3, #12]
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f022 0220 	bic.w	r2, r2, #32
 8004f72:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	68da      	ldr	r2, [r3, #12]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004f82:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	695a      	ldr	r2, [r3, #20]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f022 0201 	bic.w	r2, r2, #1
 8004f92:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2220      	movs	r2, #32
 8004f98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fa0:	2b01      	cmp	r3, #1
 8004fa2:	d135      	bne.n	8005010 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	330c      	adds	r3, #12
 8004fb0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	e853 3f00 	ldrex	r3, [r3]
 8004fb8:	613b      	str	r3, [r7, #16]
   return(result);
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	f023 0310 	bic.w	r3, r3, #16
 8004fc0:	627b      	str	r3, [r7, #36]	; 0x24
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	330c      	adds	r3, #12
 8004fc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fca:	623a      	str	r2, [r7, #32]
 8004fcc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fce:	69f9      	ldr	r1, [r7, #28]
 8004fd0:	6a3a      	ldr	r2, [r7, #32]
 8004fd2:	e841 2300 	strex	r3, r2, [r1]
 8004fd6:	61bb      	str	r3, [r7, #24]
   return(result);
 8004fd8:	69bb      	ldr	r3, [r7, #24]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d1e5      	bne.n	8004faa <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f003 0310 	and.w	r3, r3, #16
 8004fe8:	2b10      	cmp	r3, #16
 8004fea:	d10a      	bne.n	8005002 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004fec:	2300      	movs	r3, #0
 8004fee:	60fb      	str	r3, [r7, #12]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	60fb      	str	r3, [r7, #12]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	60fb      	str	r3, [r7, #12]
 8005000:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005006:	4619      	mov	r1, r3
 8005008:	6878      	ldr	r0, [r7, #4]
 800500a:	f7ff fdbb 	bl	8004b84 <HAL_UARTEx_RxEventCallback>
 800500e:	e002      	b.n	8005016 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005010:	6878      	ldr	r0, [r7, #4]
 8005012:	f7fb fe11 	bl	8000c38 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005016:	2300      	movs	r3, #0
 8005018:	e002      	b.n	8005020 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800501a:	2300      	movs	r3, #0
 800501c:	e000      	b.n	8005020 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800501e:	2302      	movs	r3, #2
  }
}
 8005020:	4618      	mov	r0, r3
 8005022:	3730      	adds	r7, #48	; 0x30
 8005024:	46bd      	mov	sp, r7
 8005026:	bd80      	pop	{r7, pc}

08005028 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005028:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800502c:	b0c0      	sub	sp, #256	; 0x100
 800502e:	af00      	add	r7, sp, #0
 8005030:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005034:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	691b      	ldr	r3, [r3, #16]
 800503c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005040:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005044:	68d9      	ldr	r1, [r3, #12]
 8005046:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800504a:	681a      	ldr	r2, [r3, #0]
 800504c:	ea40 0301 	orr.w	r3, r0, r1
 8005050:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005052:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005056:	689a      	ldr	r2, [r3, #8]
 8005058:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800505c:	691b      	ldr	r3, [r3, #16]
 800505e:	431a      	orrs	r2, r3
 8005060:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005064:	695b      	ldr	r3, [r3, #20]
 8005066:	431a      	orrs	r2, r3
 8005068:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800506c:	69db      	ldr	r3, [r3, #28]
 800506e:	4313      	orrs	r3, r2
 8005070:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005074:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	68db      	ldr	r3, [r3, #12]
 800507c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005080:	f021 010c 	bic.w	r1, r1, #12
 8005084:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005088:	681a      	ldr	r2, [r3, #0]
 800508a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800508e:	430b      	orrs	r3, r1
 8005090:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005092:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	695b      	ldr	r3, [r3, #20]
 800509a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800509e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050a2:	6999      	ldr	r1, [r3, #24]
 80050a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050a8:	681a      	ldr	r2, [r3, #0]
 80050aa:	ea40 0301 	orr.w	r3, r0, r1
 80050ae:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80050b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050b4:	681a      	ldr	r2, [r3, #0]
 80050b6:	4b8f      	ldr	r3, [pc, #572]	; (80052f4 <UART_SetConfig+0x2cc>)
 80050b8:	429a      	cmp	r2, r3
 80050ba:	d005      	beq.n	80050c8 <UART_SetConfig+0xa0>
 80050bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050c0:	681a      	ldr	r2, [r3, #0]
 80050c2:	4b8d      	ldr	r3, [pc, #564]	; (80052f8 <UART_SetConfig+0x2d0>)
 80050c4:	429a      	cmp	r2, r3
 80050c6:	d104      	bne.n	80050d2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80050c8:	f7fd fc64 	bl	8002994 <HAL_RCC_GetPCLK2Freq>
 80050cc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80050d0:	e003      	b.n	80050da <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80050d2:	f7fd fc4b 	bl	800296c <HAL_RCC_GetPCLK1Freq>
 80050d6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80050da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050de:	69db      	ldr	r3, [r3, #28]
 80050e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050e4:	f040 810c 	bne.w	8005300 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80050e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80050ec:	2200      	movs	r2, #0
 80050ee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80050f2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80050f6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80050fa:	4622      	mov	r2, r4
 80050fc:	462b      	mov	r3, r5
 80050fe:	1891      	adds	r1, r2, r2
 8005100:	65b9      	str	r1, [r7, #88]	; 0x58
 8005102:	415b      	adcs	r3, r3
 8005104:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005106:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800510a:	4621      	mov	r1, r4
 800510c:	eb12 0801 	adds.w	r8, r2, r1
 8005110:	4629      	mov	r1, r5
 8005112:	eb43 0901 	adc.w	r9, r3, r1
 8005116:	f04f 0200 	mov.w	r2, #0
 800511a:	f04f 0300 	mov.w	r3, #0
 800511e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005122:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005126:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800512a:	4690      	mov	r8, r2
 800512c:	4699      	mov	r9, r3
 800512e:	4623      	mov	r3, r4
 8005130:	eb18 0303 	adds.w	r3, r8, r3
 8005134:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005138:	462b      	mov	r3, r5
 800513a:	eb49 0303 	adc.w	r3, r9, r3
 800513e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005142:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	2200      	movs	r2, #0
 800514a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800514e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005152:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005156:	460b      	mov	r3, r1
 8005158:	18db      	adds	r3, r3, r3
 800515a:	653b      	str	r3, [r7, #80]	; 0x50
 800515c:	4613      	mov	r3, r2
 800515e:	eb42 0303 	adc.w	r3, r2, r3
 8005162:	657b      	str	r3, [r7, #84]	; 0x54
 8005164:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005168:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800516c:	f7fb f8a0 	bl	80002b0 <__aeabi_uldivmod>
 8005170:	4602      	mov	r2, r0
 8005172:	460b      	mov	r3, r1
 8005174:	4b61      	ldr	r3, [pc, #388]	; (80052fc <UART_SetConfig+0x2d4>)
 8005176:	fba3 2302 	umull	r2, r3, r3, r2
 800517a:	095b      	lsrs	r3, r3, #5
 800517c:	011c      	lsls	r4, r3, #4
 800517e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005182:	2200      	movs	r2, #0
 8005184:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005188:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800518c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005190:	4642      	mov	r2, r8
 8005192:	464b      	mov	r3, r9
 8005194:	1891      	adds	r1, r2, r2
 8005196:	64b9      	str	r1, [r7, #72]	; 0x48
 8005198:	415b      	adcs	r3, r3
 800519a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800519c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80051a0:	4641      	mov	r1, r8
 80051a2:	eb12 0a01 	adds.w	sl, r2, r1
 80051a6:	4649      	mov	r1, r9
 80051a8:	eb43 0b01 	adc.w	fp, r3, r1
 80051ac:	f04f 0200 	mov.w	r2, #0
 80051b0:	f04f 0300 	mov.w	r3, #0
 80051b4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80051b8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80051bc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80051c0:	4692      	mov	sl, r2
 80051c2:	469b      	mov	fp, r3
 80051c4:	4643      	mov	r3, r8
 80051c6:	eb1a 0303 	adds.w	r3, sl, r3
 80051ca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80051ce:	464b      	mov	r3, r9
 80051d0:	eb4b 0303 	adc.w	r3, fp, r3
 80051d4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80051d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	2200      	movs	r2, #0
 80051e0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80051e4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80051e8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80051ec:	460b      	mov	r3, r1
 80051ee:	18db      	adds	r3, r3, r3
 80051f0:	643b      	str	r3, [r7, #64]	; 0x40
 80051f2:	4613      	mov	r3, r2
 80051f4:	eb42 0303 	adc.w	r3, r2, r3
 80051f8:	647b      	str	r3, [r7, #68]	; 0x44
 80051fa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80051fe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005202:	f7fb f855 	bl	80002b0 <__aeabi_uldivmod>
 8005206:	4602      	mov	r2, r0
 8005208:	460b      	mov	r3, r1
 800520a:	4611      	mov	r1, r2
 800520c:	4b3b      	ldr	r3, [pc, #236]	; (80052fc <UART_SetConfig+0x2d4>)
 800520e:	fba3 2301 	umull	r2, r3, r3, r1
 8005212:	095b      	lsrs	r3, r3, #5
 8005214:	2264      	movs	r2, #100	; 0x64
 8005216:	fb02 f303 	mul.w	r3, r2, r3
 800521a:	1acb      	subs	r3, r1, r3
 800521c:	00db      	lsls	r3, r3, #3
 800521e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005222:	4b36      	ldr	r3, [pc, #216]	; (80052fc <UART_SetConfig+0x2d4>)
 8005224:	fba3 2302 	umull	r2, r3, r3, r2
 8005228:	095b      	lsrs	r3, r3, #5
 800522a:	005b      	lsls	r3, r3, #1
 800522c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005230:	441c      	add	r4, r3
 8005232:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005236:	2200      	movs	r2, #0
 8005238:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800523c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005240:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005244:	4642      	mov	r2, r8
 8005246:	464b      	mov	r3, r9
 8005248:	1891      	adds	r1, r2, r2
 800524a:	63b9      	str	r1, [r7, #56]	; 0x38
 800524c:	415b      	adcs	r3, r3
 800524e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005250:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005254:	4641      	mov	r1, r8
 8005256:	1851      	adds	r1, r2, r1
 8005258:	6339      	str	r1, [r7, #48]	; 0x30
 800525a:	4649      	mov	r1, r9
 800525c:	414b      	adcs	r3, r1
 800525e:	637b      	str	r3, [r7, #52]	; 0x34
 8005260:	f04f 0200 	mov.w	r2, #0
 8005264:	f04f 0300 	mov.w	r3, #0
 8005268:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800526c:	4659      	mov	r1, fp
 800526e:	00cb      	lsls	r3, r1, #3
 8005270:	4651      	mov	r1, sl
 8005272:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005276:	4651      	mov	r1, sl
 8005278:	00ca      	lsls	r2, r1, #3
 800527a:	4610      	mov	r0, r2
 800527c:	4619      	mov	r1, r3
 800527e:	4603      	mov	r3, r0
 8005280:	4642      	mov	r2, r8
 8005282:	189b      	adds	r3, r3, r2
 8005284:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005288:	464b      	mov	r3, r9
 800528a:	460a      	mov	r2, r1
 800528c:	eb42 0303 	adc.w	r3, r2, r3
 8005290:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005294:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005298:	685b      	ldr	r3, [r3, #4]
 800529a:	2200      	movs	r2, #0
 800529c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80052a0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80052a4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80052a8:	460b      	mov	r3, r1
 80052aa:	18db      	adds	r3, r3, r3
 80052ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80052ae:	4613      	mov	r3, r2
 80052b0:	eb42 0303 	adc.w	r3, r2, r3
 80052b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052b6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80052ba:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80052be:	f7fa fff7 	bl	80002b0 <__aeabi_uldivmod>
 80052c2:	4602      	mov	r2, r0
 80052c4:	460b      	mov	r3, r1
 80052c6:	4b0d      	ldr	r3, [pc, #52]	; (80052fc <UART_SetConfig+0x2d4>)
 80052c8:	fba3 1302 	umull	r1, r3, r3, r2
 80052cc:	095b      	lsrs	r3, r3, #5
 80052ce:	2164      	movs	r1, #100	; 0x64
 80052d0:	fb01 f303 	mul.w	r3, r1, r3
 80052d4:	1ad3      	subs	r3, r2, r3
 80052d6:	00db      	lsls	r3, r3, #3
 80052d8:	3332      	adds	r3, #50	; 0x32
 80052da:	4a08      	ldr	r2, [pc, #32]	; (80052fc <UART_SetConfig+0x2d4>)
 80052dc:	fba2 2303 	umull	r2, r3, r2, r3
 80052e0:	095b      	lsrs	r3, r3, #5
 80052e2:	f003 0207 	and.w	r2, r3, #7
 80052e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4422      	add	r2, r4
 80052ee:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80052f0:	e105      	b.n	80054fe <UART_SetConfig+0x4d6>
 80052f2:	bf00      	nop
 80052f4:	40011000 	.word	0x40011000
 80052f8:	40011400 	.word	0x40011400
 80052fc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005300:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005304:	2200      	movs	r2, #0
 8005306:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800530a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800530e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005312:	4642      	mov	r2, r8
 8005314:	464b      	mov	r3, r9
 8005316:	1891      	adds	r1, r2, r2
 8005318:	6239      	str	r1, [r7, #32]
 800531a:	415b      	adcs	r3, r3
 800531c:	627b      	str	r3, [r7, #36]	; 0x24
 800531e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005322:	4641      	mov	r1, r8
 8005324:	1854      	adds	r4, r2, r1
 8005326:	4649      	mov	r1, r9
 8005328:	eb43 0501 	adc.w	r5, r3, r1
 800532c:	f04f 0200 	mov.w	r2, #0
 8005330:	f04f 0300 	mov.w	r3, #0
 8005334:	00eb      	lsls	r3, r5, #3
 8005336:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800533a:	00e2      	lsls	r2, r4, #3
 800533c:	4614      	mov	r4, r2
 800533e:	461d      	mov	r5, r3
 8005340:	4643      	mov	r3, r8
 8005342:	18e3      	adds	r3, r4, r3
 8005344:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005348:	464b      	mov	r3, r9
 800534a:	eb45 0303 	adc.w	r3, r5, r3
 800534e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005352:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005356:	685b      	ldr	r3, [r3, #4]
 8005358:	2200      	movs	r2, #0
 800535a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800535e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005362:	f04f 0200 	mov.w	r2, #0
 8005366:	f04f 0300 	mov.w	r3, #0
 800536a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800536e:	4629      	mov	r1, r5
 8005370:	008b      	lsls	r3, r1, #2
 8005372:	4621      	mov	r1, r4
 8005374:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005378:	4621      	mov	r1, r4
 800537a:	008a      	lsls	r2, r1, #2
 800537c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005380:	f7fa ff96 	bl	80002b0 <__aeabi_uldivmod>
 8005384:	4602      	mov	r2, r0
 8005386:	460b      	mov	r3, r1
 8005388:	4b60      	ldr	r3, [pc, #384]	; (800550c <UART_SetConfig+0x4e4>)
 800538a:	fba3 2302 	umull	r2, r3, r3, r2
 800538e:	095b      	lsrs	r3, r3, #5
 8005390:	011c      	lsls	r4, r3, #4
 8005392:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005396:	2200      	movs	r2, #0
 8005398:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800539c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80053a0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80053a4:	4642      	mov	r2, r8
 80053a6:	464b      	mov	r3, r9
 80053a8:	1891      	adds	r1, r2, r2
 80053aa:	61b9      	str	r1, [r7, #24]
 80053ac:	415b      	adcs	r3, r3
 80053ae:	61fb      	str	r3, [r7, #28]
 80053b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80053b4:	4641      	mov	r1, r8
 80053b6:	1851      	adds	r1, r2, r1
 80053b8:	6139      	str	r1, [r7, #16]
 80053ba:	4649      	mov	r1, r9
 80053bc:	414b      	adcs	r3, r1
 80053be:	617b      	str	r3, [r7, #20]
 80053c0:	f04f 0200 	mov.w	r2, #0
 80053c4:	f04f 0300 	mov.w	r3, #0
 80053c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80053cc:	4659      	mov	r1, fp
 80053ce:	00cb      	lsls	r3, r1, #3
 80053d0:	4651      	mov	r1, sl
 80053d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80053d6:	4651      	mov	r1, sl
 80053d8:	00ca      	lsls	r2, r1, #3
 80053da:	4610      	mov	r0, r2
 80053dc:	4619      	mov	r1, r3
 80053de:	4603      	mov	r3, r0
 80053e0:	4642      	mov	r2, r8
 80053e2:	189b      	adds	r3, r3, r2
 80053e4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80053e8:	464b      	mov	r3, r9
 80053ea:	460a      	mov	r2, r1
 80053ec:	eb42 0303 	adc.w	r3, r2, r3
 80053f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80053f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	2200      	movs	r2, #0
 80053fc:	67bb      	str	r3, [r7, #120]	; 0x78
 80053fe:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005400:	f04f 0200 	mov.w	r2, #0
 8005404:	f04f 0300 	mov.w	r3, #0
 8005408:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800540c:	4649      	mov	r1, r9
 800540e:	008b      	lsls	r3, r1, #2
 8005410:	4641      	mov	r1, r8
 8005412:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005416:	4641      	mov	r1, r8
 8005418:	008a      	lsls	r2, r1, #2
 800541a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800541e:	f7fa ff47 	bl	80002b0 <__aeabi_uldivmod>
 8005422:	4602      	mov	r2, r0
 8005424:	460b      	mov	r3, r1
 8005426:	4b39      	ldr	r3, [pc, #228]	; (800550c <UART_SetConfig+0x4e4>)
 8005428:	fba3 1302 	umull	r1, r3, r3, r2
 800542c:	095b      	lsrs	r3, r3, #5
 800542e:	2164      	movs	r1, #100	; 0x64
 8005430:	fb01 f303 	mul.w	r3, r1, r3
 8005434:	1ad3      	subs	r3, r2, r3
 8005436:	011b      	lsls	r3, r3, #4
 8005438:	3332      	adds	r3, #50	; 0x32
 800543a:	4a34      	ldr	r2, [pc, #208]	; (800550c <UART_SetConfig+0x4e4>)
 800543c:	fba2 2303 	umull	r2, r3, r2, r3
 8005440:	095b      	lsrs	r3, r3, #5
 8005442:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005446:	441c      	add	r4, r3
 8005448:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800544c:	2200      	movs	r2, #0
 800544e:	673b      	str	r3, [r7, #112]	; 0x70
 8005450:	677a      	str	r2, [r7, #116]	; 0x74
 8005452:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005456:	4642      	mov	r2, r8
 8005458:	464b      	mov	r3, r9
 800545a:	1891      	adds	r1, r2, r2
 800545c:	60b9      	str	r1, [r7, #8]
 800545e:	415b      	adcs	r3, r3
 8005460:	60fb      	str	r3, [r7, #12]
 8005462:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005466:	4641      	mov	r1, r8
 8005468:	1851      	adds	r1, r2, r1
 800546a:	6039      	str	r1, [r7, #0]
 800546c:	4649      	mov	r1, r9
 800546e:	414b      	adcs	r3, r1
 8005470:	607b      	str	r3, [r7, #4]
 8005472:	f04f 0200 	mov.w	r2, #0
 8005476:	f04f 0300 	mov.w	r3, #0
 800547a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800547e:	4659      	mov	r1, fp
 8005480:	00cb      	lsls	r3, r1, #3
 8005482:	4651      	mov	r1, sl
 8005484:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005488:	4651      	mov	r1, sl
 800548a:	00ca      	lsls	r2, r1, #3
 800548c:	4610      	mov	r0, r2
 800548e:	4619      	mov	r1, r3
 8005490:	4603      	mov	r3, r0
 8005492:	4642      	mov	r2, r8
 8005494:	189b      	adds	r3, r3, r2
 8005496:	66bb      	str	r3, [r7, #104]	; 0x68
 8005498:	464b      	mov	r3, r9
 800549a:	460a      	mov	r2, r1
 800549c:	eb42 0303 	adc.w	r3, r2, r3
 80054a0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80054a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054a6:	685b      	ldr	r3, [r3, #4]
 80054a8:	2200      	movs	r2, #0
 80054aa:	663b      	str	r3, [r7, #96]	; 0x60
 80054ac:	667a      	str	r2, [r7, #100]	; 0x64
 80054ae:	f04f 0200 	mov.w	r2, #0
 80054b2:	f04f 0300 	mov.w	r3, #0
 80054b6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80054ba:	4649      	mov	r1, r9
 80054bc:	008b      	lsls	r3, r1, #2
 80054be:	4641      	mov	r1, r8
 80054c0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80054c4:	4641      	mov	r1, r8
 80054c6:	008a      	lsls	r2, r1, #2
 80054c8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80054cc:	f7fa fef0 	bl	80002b0 <__aeabi_uldivmod>
 80054d0:	4602      	mov	r2, r0
 80054d2:	460b      	mov	r3, r1
 80054d4:	4b0d      	ldr	r3, [pc, #52]	; (800550c <UART_SetConfig+0x4e4>)
 80054d6:	fba3 1302 	umull	r1, r3, r3, r2
 80054da:	095b      	lsrs	r3, r3, #5
 80054dc:	2164      	movs	r1, #100	; 0x64
 80054de:	fb01 f303 	mul.w	r3, r1, r3
 80054e2:	1ad3      	subs	r3, r2, r3
 80054e4:	011b      	lsls	r3, r3, #4
 80054e6:	3332      	adds	r3, #50	; 0x32
 80054e8:	4a08      	ldr	r2, [pc, #32]	; (800550c <UART_SetConfig+0x4e4>)
 80054ea:	fba2 2303 	umull	r2, r3, r2, r3
 80054ee:	095b      	lsrs	r3, r3, #5
 80054f0:	f003 020f 	and.w	r2, r3, #15
 80054f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4422      	add	r2, r4
 80054fc:	609a      	str	r2, [r3, #8]
}
 80054fe:	bf00      	nop
 8005500:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005504:	46bd      	mov	sp, r7
 8005506:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800550a:	bf00      	nop
 800550c:	51eb851f 	.word	0x51eb851f

08005510 <__NVIC_SetPriority>:
{
 8005510:	b480      	push	{r7}
 8005512:	b083      	sub	sp, #12
 8005514:	af00      	add	r7, sp, #0
 8005516:	4603      	mov	r3, r0
 8005518:	6039      	str	r1, [r7, #0]
 800551a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800551c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005520:	2b00      	cmp	r3, #0
 8005522:	db0a      	blt.n	800553a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	b2da      	uxtb	r2, r3
 8005528:	490c      	ldr	r1, [pc, #48]	; (800555c <__NVIC_SetPriority+0x4c>)
 800552a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800552e:	0112      	lsls	r2, r2, #4
 8005530:	b2d2      	uxtb	r2, r2
 8005532:	440b      	add	r3, r1
 8005534:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005538:	e00a      	b.n	8005550 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	b2da      	uxtb	r2, r3
 800553e:	4908      	ldr	r1, [pc, #32]	; (8005560 <__NVIC_SetPriority+0x50>)
 8005540:	79fb      	ldrb	r3, [r7, #7]
 8005542:	f003 030f 	and.w	r3, r3, #15
 8005546:	3b04      	subs	r3, #4
 8005548:	0112      	lsls	r2, r2, #4
 800554a:	b2d2      	uxtb	r2, r2
 800554c:	440b      	add	r3, r1
 800554e:	761a      	strb	r2, [r3, #24]
}
 8005550:	bf00      	nop
 8005552:	370c      	adds	r7, #12
 8005554:	46bd      	mov	sp, r7
 8005556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555a:	4770      	bx	lr
 800555c:	e000e100 	.word	0xe000e100
 8005560:	e000ed00 	.word	0xe000ed00

08005564 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005564:	b580      	push	{r7, lr}
 8005566:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005568:	4b05      	ldr	r3, [pc, #20]	; (8005580 <SysTick_Handler+0x1c>)
 800556a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800556c:	f002 f86e 	bl	800764c <xTaskGetSchedulerState>
 8005570:	4603      	mov	r3, r0
 8005572:	2b01      	cmp	r3, #1
 8005574:	d001      	beq.n	800557a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005576:	f003 f847 	bl	8008608 <xPortSysTickHandler>
  }
}
 800557a:	bf00      	nop
 800557c:	bd80      	pop	{r7, pc}
 800557e:	bf00      	nop
 8005580:	e000e010 	.word	0xe000e010

08005584 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005584:	b580      	push	{r7, lr}
 8005586:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005588:	2100      	movs	r1, #0
 800558a:	f06f 0004 	mvn.w	r0, #4
 800558e:	f7ff ffbf 	bl	8005510 <__NVIC_SetPriority>
#endif
}
 8005592:	bf00      	nop
 8005594:	bd80      	pop	{r7, pc}
	...

08005598 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005598:	b480      	push	{r7}
 800559a:	b083      	sub	sp, #12
 800559c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800559e:	f3ef 8305 	mrs	r3, IPSR
 80055a2:	603b      	str	r3, [r7, #0]
  return(result);
 80055a4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d003      	beq.n	80055b2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80055aa:	f06f 0305 	mvn.w	r3, #5
 80055ae:	607b      	str	r3, [r7, #4]
 80055b0:	e00c      	b.n	80055cc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80055b2:	4b0a      	ldr	r3, [pc, #40]	; (80055dc <osKernelInitialize+0x44>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d105      	bne.n	80055c6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80055ba:	4b08      	ldr	r3, [pc, #32]	; (80055dc <osKernelInitialize+0x44>)
 80055bc:	2201      	movs	r2, #1
 80055be:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80055c0:	2300      	movs	r3, #0
 80055c2:	607b      	str	r3, [r7, #4]
 80055c4:	e002      	b.n	80055cc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80055c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80055ca:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80055cc:	687b      	ldr	r3, [r7, #4]
}
 80055ce:	4618      	mov	r0, r3
 80055d0:	370c      	adds	r7, #12
 80055d2:	46bd      	mov	sp, r7
 80055d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d8:	4770      	bx	lr
 80055da:	bf00      	nop
 80055dc:	20000328 	.word	0x20000328

080055e0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b082      	sub	sp, #8
 80055e4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80055e6:	f3ef 8305 	mrs	r3, IPSR
 80055ea:	603b      	str	r3, [r7, #0]
  return(result);
 80055ec:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d003      	beq.n	80055fa <osKernelStart+0x1a>
    stat = osErrorISR;
 80055f2:	f06f 0305 	mvn.w	r3, #5
 80055f6:	607b      	str	r3, [r7, #4]
 80055f8:	e010      	b.n	800561c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80055fa:	4b0b      	ldr	r3, [pc, #44]	; (8005628 <osKernelStart+0x48>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	2b01      	cmp	r3, #1
 8005600:	d109      	bne.n	8005616 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005602:	f7ff ffbf 	bl	8005584 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005606:	4b08      	ldr	r3, [pc, #32]	; (8005628 <osKernelStart+0x48>)
 8005608:	2202      	movs	r2, #2
 800560a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800560c:	f001 fbd6 	bl	8006dbc <vTaskStartScheduler>
      stat = osOK;
 8005610:	2300      	movs	r3, #0
 8005612:	607b      	str	r3, [r7, #4]
 8005614:	e002      	b.n	800561c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005616:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800561a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800561c:	687b      	ldr	r3, [r7, #4]
}
 800561e:	4618      	mov	r0, r3
 8005620:	3708      	adds	r7, #8
 8005622:	46bd      	mov	sp, r7
 8005624:	bd80      	pop	{r7, pc}
 8005626:	bf00      	nop
 8005628:	20000328 	.word	0x20000328

0800562c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800562c:	b580      	push	{r7, lr}
 800562e:	b08e      	sub	sp, #56	; 0x38
 8005630:	af04      	add	r7, sp, #16
 8005632:	60f8      	str	r0, [r7, #12]
 8005634:	60b9      	str	r1, [r7, #8]
 8005636:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005638:	2300      	movs	r3, #0
 800563a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800563c:	f3ef 8305 	mrs	r3, IPSR
 8005640:	617b      	str	r3, [r7, #20]
  return(result);
 8005642:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005644:	2b00      	cmp	r3, #0
 8005646:	d17e      	bne.n	8005746 <osThreadNew+0x11a>
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d07b      	beq.n	8005746 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800564e:	2380      	movs	r3, #128	; 0x80
 8005650:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005652:	2318      	movs	r3, #24
 8005654:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005656:	2300      	movs	r3, #0
 8005658:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800565a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800565e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d045      	beq.n	80056f2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d002      	beq.n	8005674 <osThreadNew+0x48>
        name = attr->name;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	699b      	ldr	r3, [r3, #24]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d002      	beq.n	8005682 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	699b      	ldr	r3, [r3, #24]
 8005680:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005682:	69fb      	ldr	r3, [r7, #28]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d008      	beq.n	800569a <osThreadNew+0x6e>
 8005688:	69fb      	ldr	r3, [r7, #28]
 800568a:	2b38      	cmp	r3, #56	; 0x38
 800568c:	d805      	bhi.n	800569a <osThreadNew+0x6e>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	685b      	ldr	r3, [r3, #4]
 8005692:	f003 0301 	and.w	r3, r3, #1
 8005696:	2b00      	cmp	r3, #0
 8005698:	d001      	beq.n	800569e <osThreadNew+0x72>
        return (NULL);
 800569a:	2300      	movs	r3, #0
 800569c:	e054      	b.n	8005748 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	695b      	ldr	r3, [r3, #20]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d003      	beq.n	80056ae <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	695b      	ldr	r3, [r3, #20]
 80056aa:	089b      	lsrs	r3, r3, #2
 80056ac:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	689b      	ldr	r3, [r3, #8]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d00e      	beq.n	80056d4 <osThreadNew+0xa8>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	68db      	ldr	r3, [r3, #12]
 80056ba:	2b5b      	cmp	r3, #91	; 0x5b
 80056bc:	d90a      	bls.n	80056d4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d006      	beq.n	80056d4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	695b      	ldr	r3, [r3, #20]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d002      	beq.n	80056d4 <osThreadNew+0xa8>
        mem = 1;
 80056ce:	2301      	movs	r3, #1
 80056d0:	61bb      	str	r3, [r7, #24]
 80056d2:	e010      	b.n	80056f6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	689b      	ldr	r3, [r3, #8]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d10c      	bne.n	80056f6 <osThreadNew+0xca>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	68db      	ldr	r3, [r3, #12]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d108      	bne.n	80056f6 <osThreadNew+0xca>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	691b      	ldr	r3, [r3, #16]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d104      	bne.n	80056f6 <osThreadNew+0xca>
          mem = 0;
 80056ec:	2300      	movs	r3, #0
 80056ee:	61bb      	str	r3, [r7, #24]
 80056f0:	e001      	b.n	80056f6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80056f2:	2300      	movs	r3, #0
 80056f4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80056f6:	69bb      	ldr	r3, [r7, #24]
 80056f8:	2b01      	cmp	r3, #1
 80056fa:	d110      	bne.n	800571e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005700:	687a      	ldr	r2, [r7, #4]
 8005702:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005704:	9202      	str	r2, [sp, #8]
 8005706:	9301      	str	r3, [sp, #4]
 8005708:	69fb      	ldr	r3, [r7, #28]
 800570a:	9300      	str	r3, [sp, #0]
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	6a3a      	ldr	r2, [r7, #32]
 8005710:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005712:	68f8      	ldr	r0, [r7, #12]
 8005714:	f001 f97c 	bl	8006a10 <xTaskCreateStatic>
 8005718:	4603      	mov	r3, r0
 800571a:	613b      	str	r3, [r7, #16]
 800571c:	e013      	b.n	8005746 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800571e:	69bb      	ldr	r3, [r7, #24]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d110      	bne.n	8005746 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005724:	6a3b      	ldr	r3, [r7, #32]
 8005726:	b29a      	uxth	r2, r3
 8005728:	f107 0310 	add.w	r3, r7, #16
 800572c:	9301      	str	r3, [sp, #4]
 800572e:	69fb      	ldr	r3, [r7, #28]
 8005730:	9300      	str	r3, [sp, #0]
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005736:	68f8      	ldr	r0, [r7, #12]
 8005738:	f001 f9c7 	bl	8006aca <xTaskCreate>
 800573c:	4603      	mov	r3, r0
 800573e:	2b01      	cmp	r3, #1
 8005740:	d001      	beq.n	8005746 <osThreadNew+0x11a>
            hTask = NULL;
 8005742:	2300      	movs	r3, #0
 8005744:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005746:	693b      	ldr	r3, [r7, #16]
}
 8005748:	4618      	mov	r0, r3
 800574a:	3728      	adds	r7, #40	; 0x28
 800574c:	46bd      	mov	sp, r7
 800574e:	bd80      	pop	{r7, pc}

08005750 <osThreadFlagsSet>:
  return (count);
}
#endif /* (configUSE_OS2_THREAD_ENUMERATE == 1) */

#if (configUSE_OS2_THREAD_FLAGS == 1)
uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 8005750:	b580      	push	{r7, lr}
 8005752:	b088      	sub	sp, #32
 8005754:	af02      	add	r7, sp, #8
 8005756:	6078      	str	r0, [r7, #4]
 8005758:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	617b      	str	r3, [r7, #20]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 800575e:	697b      	ldr	r3, [r7, #20]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d002      	beq.n	800576a <osThreadFlagsSet+0x1a>
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	2b00      	cmp	r3, #0
 8005768:	da03      	bge.n	8005772 <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 800576a:	f06f 0303 	mvn.w	r3, #3
 800576e:	60fb      	str	r3, [r7, #12]
 8005770:	e035      	b.n	80057de <osThreadFlagsSet+0x8e>
  }
  else {
    rflags = (uint32_t)osError;
 8005772:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005776:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005778:	f3ef 8305 	mrs	r3, IPSR
 800577c:	613b      	str	r3, [r7, #16]
  return(result);
 800577e:	693b      	ldr	r3, [r7, #16]

    if (IS_IRQ()) {
 8005780:	2b00      	cmp	r3, #0
 8005782:	d01f      	beq.n	80057c4 <osThreadFlagsSet+0x74>
      yield = pdFALSE;
 8005784:	2300      	movs	r3, #0
 8005786:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 8005788:	f107 0308 	add.w	r3, r7, #8
 800578c:	9300      	str	r3, [sp, #0]
 800578e:	2300      	movs	r3, #0
 8005790:	2201      	movs	r2, #1
 8005792:	6839      	ldr	r1, [r7, #0]
 8005794:	6978      	ldr	r0, [r7, #20]
 8005796:	f002 f8f7 	bl	8007988 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 800579a:	f107 030c 	add.w	r3, r7, #12
 800579e:	2200      	movs	r2, #0
 80057a0:	9200      	str	r2, [sp, #0]
 80057a2:	2200      	movs	r2, #0
 80057a4:	2100      	movs	r1, #0
 80057a6:	6978      	ldr	r0, [r7, #20]
 80057a8:	f002 f8ee 	bl	8007988 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d015      	beq.n	80057de <osThreadFlagsSet+0x8e>
 80057b2:	4b0d      	ldr	r3, [pc, #52]	; (80057e8 <osThreadFlagsSet+0x98>)
 80057b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057b8:	601a      	str	r2, [r3, #0]
 80057ba:	f3bf 8f4f 	dsb	sy
 80057be:	f3bf 8f6f 	isb	sy
 80057c2:	e00c      	b.n	80057de <osThreadFlagsSet+0x8e>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 80057c4:	2300      	movs	r3, #0
 80057c6:	2201      	movs	r2, #1
 80057c8:	6839      	ldr	r1, [r7, #0]
 80057ca:	6978      	ldr	r0, [r7, #20]
 80057cc:	f002 f824 	bl	8007818 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 80057d0:	f107 030c 	add.w	r3, r7, #12
 80057d4:	2200      	movs	r2, #0
 80057d6:	2100      	movs	r1, #0
 80057d8:	6978      	ldr	r0, [r7, #20]
 80057da:	f002 f81d 	bl	8007818 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 80057de:	68fb      	ldr	r3, [r7, #12]
}
 80057e0:	4618      	mov	r0, r3
 80057e2:	3718      	adds	r7, #24
 80057e4:	46bd      	mov	sp, r7
 80057e6:	bd80      	pop	{r7, pc}
 80057e8:	e000ed04 	.word	0xe000ed04

080057ec <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b08c      	sub	sp, #48	; 0x30
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	60f8      	str	r0, [r7, #12]
 80057f4:	60b9      	str	r1, [r7, #8]
 80057f6:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80057f8:	f3ef 8305 	mrs	r3, IPSR
 80057fc:	617b      	str	r3, [r7, #20]
  return(result);
 80057fe:	697b      	ldr	r3, [r7, #20]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 8005800:	2b00      	cmp	r3, #0
 8005802:	d003      	beq.n	800580c <osThreadFlagsWait+0x20>
    rflags = (uint32_t)osErrorISR;
 8005804:	f06f 0305 	mvn.w	r3, #5
 8005808:	62fb      	str	r3, [r7, #44]	; 0x2c
 800580a:	e06b      	b.n	80058e4 <osThreadFlagsWait+0xf8>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	2b00      	cmp	r3, #0
 8005810:	da03      	bge.n	800581a <osThreadFlagsWait+0x2e>
    rflags = (uint32_t)osErrorParameter;
 8005812:	f06f 0303 	mvn.w	r3, #3
 8005816:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005818:	e064      	b.n	80058e4 <osThreadFlagsWait+0xf8>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	f003 0302 	and.w	r3, r3, #2
 8005820:	2b00      	cmp	r3, #0
 8005822:	d002      	beq.n	800582a <osThreadFlagsWait+0x3e>
      clear = 0U;
 8005824:	2300      	movs	r3, #0
 8005826:	62bb      	str	r3, [r7, #40]	; 0x28
 8005828:	e001      	b.n	800582e <osThreadFlagsWait+0x42>
    } else {
      clear = flags;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    rflags = 0U;
 800582e:	2300      	movs	r3, #0
 8005830:	62fb      	str	r3, [r7, #44]	; 0x2c
    tout   = timeout;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	627b      	str	r3, [r7, #36]	; 0x24

    t0 = xTaskGetTickCount();
 8005836:	f001 fbd3 	bl	8006fe0 <xTaskGetTickCount>
 800583a:	6238      	str	r0, [r7, #32]
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 800583c:	f107 0210 	add.w	r2, r7, #16
 8005840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005842:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005844:	2000      	movs	r0, #0
 8005846:	f001 ff8d 	bl	8007764 <xTaskNotifyWait>
 800584a:	61f8      	str	r0, [r7, #28]

      if (rval == pdPASS) {
 800584c:	69fb      	ldr	r3, [r7, #28]
 800584e:	2b01      	cmp	r3, #1
 8005850:	d137      	bne.n	80058c2 <osThreadFlagsWait+0xd6>
        rflags &= flags;
 8005852:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	4013      	ands	r3, r2
 8005858:	62fb      	str	r3, [r7, #44]	; 0x2c
        rflags |= nval;
 800585a:	693b      	ldr	r3, [r7, #16]
 800585c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800585e:	4313      	orrs	r3, r2
 8005860:	62fb      	str	r3, [r7, #44]	; 0x2c

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	f003 0301 	and.w	r3, r3, #1
 8005868:	2b00      	cmp	r3, #0
 800586a:	d00c      	beq.n	8005886 <osThreadFlagsWait+0x9a>
          if ((flags & rflags) == flags) {
 800586c:	68fa      	ldr	r2, [r7, #12]
 800586e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005870:	4013      	ands	r3, r2
 8005872:	68fa      	ldr	r2, [r7, #12]
 8005874:	429a      	cmp	r2, r3
 8005876:	d032      	beq.n	80058de <osThreadFlagsWait+0xf2>
            break;
          } else {
            if (timeout == 0U) {
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d10f      	bne.n	800589e <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 800587e:	f06f 0302 	mvn.w	r3, #2
 8005882:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 8005884:	e02e      	b.n	80058e4 <osThreadFlagsWait+0xf8>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 8005886:	68fa      	ldr	r2, [r7, #12]
 8005888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800588a:	4013      	ands	r3, r2
 800588c:	2b00      	cmp	r3, #0
 800588e:	d128      	bne.n	80058e2 <osThreadFlagsWait+0xf6>
            break;
          } else {
            if (timeout == 0U) {
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d103      	bne.n	800589e <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 8005896:	f06f 0302 	mvn.w	r3, #2
 800589a:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 800589c:	e022      	b.n	80058e4 <osThreadFlagsWait+0xf8>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 800589e:	f001 fb9f 	bl	8006fe0 <xTaskGetTickCount>
 80058a2:	4602      	mov	r2, r0
 80058a4:	6a3b      	ldr	r3, [r7, #32]
 80058a6:	1ad3      	subs	r3, r2, r3
 80058a8:	61bb      	str	r3, [r7, #24]

        if (td > tout) {
 80058aa:	69ba      	ldr	r2, [r7, #24]
 80058ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ae:	429a      	cmp	r2, r3
 80058b0:	d902      	bls.n	80058b8 <osThreadFlagsWait+0xcc>
          tout  = 0;
 80058b2:	2300      	movs	r3, #0
 80058b4:	627b      	str	r3, [r7, #36]	; 0x24
 80058b6:	e00e      	b.n	80058d6 <osThreadFlagsWait+0xea>
        } else {
          tout -= td;
 80058b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058ba:	69bb      	ldr	r3, [r7, #24]
 80058bc:	1ad3      	subs	r3, r2, r3
 80058be:	627b      	str	r3, [r7, #36]	; 0x24
 80058c0:	e009      	b.n	80058d6 <osThreadFlagsWait+0xea>
        }
      }
      else {
        if (timeout == 0) {
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d103      	bne.n	80058d0 <osThreadFlagsWait+0xe4>
          rflags = (uint32_t)osErrorResource;
 80058c8:	f06f 0302 	mvn.w	r3, #2
 80058cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80058ce:	e002      	b.n	80058d6 <osThreadFlagsWait+0xea>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 80058d0:	f06f 0301 	mvn.w	r3, #1
 80058d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
      }
    }
    while (rval != pdFAIL);
 80058d6:	69fb      	ldr	r3, [r7, #28]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d1af      	bne.n	800583c <osThreadFlagsWait+0x50>
 80058dc:	e002      	b.n	80058e4 <osThreadFlagsWait+0xf8>
            break;
 80058de:	bf00      	nop
 80058e0:	e000      	b.n	80058e4 <osThreadFlagsWait+0xf8>
            break;
 80058e2:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 80058e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80058e6:	4618      	mov	r0, r3
 80058e8:	3730      	adds	r7, #48	; 0x30
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bd80      	pop	{r7, pc}

080058ee <osDelay>:
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80058ee:	b580      	push	{r7, lr}
 80058f0:	b084      	sub	sp, #16
 80058f2:	af00      	add	r7, sp, #0
 80058f4:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80058f6:	f3ef 8305 	mrs	r3, IPSR
 80058fa:	60bb      	str	r3, [r7, #8]
  return(result);
 80058fc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d003      	beq.n	800590a <osDelay+0x1c>
    stat = osErrorISR;
 8005902:	f06f 0305 	mvn.w	r3, #5
 8005906:	60fb      	str	r3, [r7, #12]
 8005908:	e007      	b.n	800591a <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800590a:	2300      	movs	r3, #0
 800590c:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d002      	beq.n	800591a <osDelay+0x2c>
      vTaskDelay(ticks);
 8005914:	6878      	ldr	r0, [r7, #4]
 8005916:	f001 fa1d 	bl	8006d54 <vTaskDelay>
    }
  }

  return (stat);
 800591a:	68fb      	ldr	r3, [r7, #12]
}
 800591c:	4618      	mov	r0, r3
 800591e:	3710      	adds	r7, #16
 8005920:	46bd      	mov	sp, r7
 8005922:	bd80      	pop	{r7, pc}

08005924 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8005924:	b580      	push	{r7, lr}
 8005926:	b08a      	sub	sp, #40	; 0x28
 8005928:	af02      	add	r7, sp, #8
 800592a:	60f8      	str	r0, [r7, #12]
 800592c:	60b9      	str	r1, [r7, #8]
 800592e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8005930:	2300      	movs	r3, #0
 8005932:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005934:	f3ef 8305 	mrs	r3, IPSR
 8005938:	613b      	str	r3, [r7, #16]
  return(result);
 800593a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800593c:	2b00      	cmp	r3, #0
 800593e:	d15f      	bne.n	8005a00 <osMessageQueueNew+0xdc>
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d05c      	beq.n	8005a00 <osMessageQueueNew+0xdc>
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d059      	beq.n	8005a00 <osMessageQueueNew+0xdc>
    mem = -1;
 800594c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005950:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d029      	beq.n	80059ac <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	689b      	ldr	r3, [r3, #8]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d012      	beq.n	8005986 <osMessageQueueNew+0x62>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	68db      	ldr	r3, [r3, #12]
 8005964:	2b4f      	cmp	r3, #79	; 0x4f
 8005966:	d90e      	bls.n	8005986 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800596c:	2b00      	cmp	r3, #0
 800596e:	d00a      	beq.n	8005986 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	695a      	ldr	r2, [r3, #20]
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	68b9      	ldr	r1, [r7, #8]
 8005978:	fb01 f303 	mul.w	r3, r1, r3
 800597c:	429a      	cmp	r2, r3
 800597e:	d302      	bcc.n	8005986 <osMessageQueueNew+0x62>
        mem = 1;
 8005980:	2301      	movs	r3, #1
 8005982:	61bb      	str	r3, [r7, #24]
 8005984:	e014      	b.n	80059b0 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	689b      	ldr	r3, [r3, #8]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d110      	bne.n	80059b0 <osMessageQueueNew+0x8c>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	68db      	ldr	r3, [r3, #12]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d10c      	bne.n	80059b0 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800599a:	2b00      	cmp	r3, #0
 800599c:	d108      	bne.n	80059b0 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	695b      	ldr	r3, [r3, #20]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d104      	bne.n	80059b0 <osMessageQueueNew+0x8c>
          mem = 0;
 80059a6:	2300      	movs	r3, #0
 80059a8:	61bb      	str	r3, [r7, #24]
 80059aa:	e001      	b.n	80059b0 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80059ac:	2300      	movs	r3, #0
 80059ae:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80059b0:	69bb      	ldr	r3, [r7, #24]
 80059b2:	2b01      	cmp	r3, #1
 80059b4:	d10b      	bne.n	80059ce <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	691a      	ldr	r2, [r3, #16]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	689b      	ldr	r3, [r3, #8]
 80059be:	2100      	movs	r1, #0
 80059c0:	9100      	str	r1, [sp, #0]
 80059c2:	68b9      	ldr	r1, [r7, #8]
 80059c4:	68f8      	ldr	r0, [r7, #12]
 80059c6:	f000 fa85 	bl	8005ed4 <xQueueGenericCreateStatic>
 80059ca:	61f8      	str	r0, [r7, #28]
 80059cc:	e008      	b.n	80059e0 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80059ce:	69bb      	ldr	r3, [r7, #24]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d105      	bne.n	80059e0 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80059d4:	2200      	movs	r2, #0
 80059d6:	68b9      	ldr	r1, [r7, #8]
 80059d8:	68f8      	ldr	r0, [r7, #12]
 80059da:	f000 faf3 	bl	8005fc4 <xQueueGenericCreate>
 80059de:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80059e0:	69fb      	ldr	r3, [r7, #28]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d00c      	beq.n	8005a00 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d003      	beq.n	80059f4 <osMessageQueueNew+0xd0>
        name = attr->name;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	617b      	str	r3, [r7, #20]
 80059f2:	e001      	b.n	80059f8 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80059f4:	2300      	movs	r3, #0
 80059f6:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80059f8:	6979      	ldr	r1, [r7, #20]
 80059fa:	69f8      	ldr	r0, [r7, #28]
 80059fc:	f000 ffaa 	bl	8006954 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8005a00:	69fb      	ldr	r3, [r7, #28]
}
 8005a02:	4618      	mov	r0, r3
 8005a04:	3720      	adds	r7, #32
 8005a06:	46bd      	mov	sp, r7
 8005a08:	bd80      	pop	{r7, pc}
	...

08005a0c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b088      	sub	sp, #32
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	60f8      	str	r0, [r7, #12]
 8005a14:	60b9      	str	r1, [r7, #8]
 8005a16:	603b      	str	r3, [r7, #0]
 8005a18:	4613      	mov	r3, r2
 8005a1a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005a20:	2300      	movs	r3, #0
 8005a22:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005a24:	f3ef 8305 	mrs	r3, IPSR
 8005a28:	617b      	str	r3, [r7, #20]
  return(result);
 8005a2a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d028      	beq.n	8005a82 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005a30:	69bb      	ldr	r3, [r7, #24]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d005      	beq.n	8005a42 <osMessageQueuePut+0x36>
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d002      	beq.n	8005a42 <osMessageQueuePut+0x36>
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d003      	beq.n	8005a4a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8005a42:	f06f 0303 	mvn.w	r3, #3
 8005a46:	61fb      	str	r3, [r7, #28]
 8005a48:	e038      	b.n	8005abc <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8005a4e:	f107 0210 	add.w	r2, r7, #16
 8005a52:	2300      	movs	r3, #0
 8005a54:	68b9      	ldr	r1, [r7, #8]
 8005a56:	69b8      	ldr	r0, [r7, #24]
 8005a58:	f000 fc10 	bl	800627c <xQueueGenericSendFromISR>
 8005a5c:	4603      	mov	r3, r0
 8005a5e:	2b01      	cmp	r3, #1
 8005a60:	d003      	beq.n	8005a6a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8005a62:	f06f 0302 	mvn.w	r3, #2
 8005a66:	61fb      	str	r3, [r7, #28]
 8005a68:	e028      	b.n	8005abc <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8005a6a:	693b      	ldr	r3, [r7, #16]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d025      	beq.n	8005abc <osMessageQueuePut+0xb0>
 8005a70:	4b15      	ldr	r3, [pc, #84]	; (8005ac8 <osMessageQueuePut+0xbc>)
 8005a72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a76:	601a      	str	r2, [r3, #0]
 8005a78:	f3bf 8f4f 	dsb	sy
 8005a7c:	f3bf 8f6f 	isb	sy
 8005a80:	e01c      	b.n	8005abc <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005a82:	69bb      	ldr	r3, [r7, #24]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d002      	beq.n	8005a8e <osMessageQueuePut+0x82>
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d103      	bne.n	8005a96 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8005a8e:	f06f 0303 	mvn.w	r3, #3
 8005a92:	61fb      	str	r3, [r7, #28]
 8005a94:	e012      	b.n	8005abc <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005a96:	2300      	movs	r3, #0
 8005a98:	683a      	ldr	r2, [r7, #0]
 8005a9a:	68b9      	ldr	r1, [r7, #8]
 8005a9c:	69b8      	ldr	r0, [r7, #24]
 8005a9e:	f000 faef 	bl	8006080 <xQueueGenericSend>
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	2b01      	cmp	r3, #1
 8005aa6:	d009      	beq.n	8005abc <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d003      	beq.n	8005ab6 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8005aae:	f06f 0301 	mvn.w	r3, #1
 8005ab2:	61fb      	str	r3, [r7, #28]
 8005ab4:	e002      	b.n	8005abc <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8005ab6:	f06f 0302 	mvn.w	r3, #2
 8005aba:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8005abc:	69fb      	ldr	r3, [r7, #28]
}
 8005abe:	4618      	mov	r0, r3
 8005ac0:	3720      	adds	r7, #32
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bd80      	pop	{r7, pc}
 8005ac6:	bf00      	nop
 8005ac8:	e000ed04 	.word	0xe000ed04

08005acc <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b088      	sub	sp, #32
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	60f8      	str	r0, [r7, #12]
 8005ad4:	60b9      	str	r1, [r7, #8]
 8005ad6:	607a      	str	r2, [r7, #4]
 8005ad8:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005ade:	2300      	movs	r3, #0
 8005ae0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005ae2:	f3ef 8305 	mrs	r3, IPSR
 8005ae6:	617b      	str	r3, [r7, #20]
  return(result);
 8005ae8:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d028      	beq.n	8005b40 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005aee:	69bb      	ldr	r3, [r7, #24]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d005      	beq.n	8005b00 <osMessageQueueGet+0x34>
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d002      	beq.n	8005b00 <osMessageQueueGet+0x34>
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d003      	beq.n	8005b08 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8005b00:	f06f 0303 	mvn.w	r3, #3
 8005b04:	61fb      	str	r3, [r7, #28]
 8005b06:	e037      	b.n	8005b78 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8005b08:	2300      	movs	r3, #0
 8005b0a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8005b0c:	f107 0310 	add.w	r3, r7, #16
 8005b10:	461a      	mov	r2, r3
 8005b12:	68b9      	ldr	r1, [r7, #8]
 8005b14:	69b8      	ldr	r0, [r7, #24]
 8005b16:	f000 fd2d 	bl	8006574 <xQueueReceiveFromISR>
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	2b01      	cmp	r3, #1
 8005b1e:	d003      	beq.n	8005b28 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8005b20:	f06f 0302 	mvn.w	r3, #2
 8005b24:	61fb      	str	r3, [r7, #28]
 8005b26:	e027      	b.n	8005b78 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8005b28:	693b      	ldr	r3, [r7, #16]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d024      	beq.n	8005b78 <osMessageQueueGet+0xac>
 8005b2e:	4b15      	ldr	r3, [pc, #84]	; (8005b84 <osMessageQueueGet+0xb8>)
 8005b30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b34:	601a      	str	r2, [r3, #0]
 8005b36:	f3bf 8f4f 	dsb	sy
 8005b3a:	f3bf 8f6f 	isb	sy
 8005b3e:	e01b      	b.n	8005b78 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005b40:	69bb      	ldr	r3, [r7, #24]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d002      	beq.n	8005b4c <osMessageQueueGet+0x80>
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d103      	bne.n	8005b54 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8005b4c:	f06f 0303 	mvn.w	r3, #3
 8005b50:	61fb      	str	r3, [r7, #28]
 8005b52:	e011      	b.n	8005b78 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005b54:	683a      	ldr	r2, [r7, #0]
 8005b56:	68b9      	ldr	r1, [r7, #8]
 8005b58:	69b8      	ldr	r0, [r7, #24]
 8005b5a:	f000 fc2b 	bl	80063b4 <xQueueReceive>
 8005b5e:	4603      	mov	r3, r0
 8005b60:	2b01      	cmp	r3, #1
 8005b62:	d009      	beq.n	8005b78 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d003      	beq.n	8005b72 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8005b6a:	f06f 0301 	mvn.w	r3, #1
 8005b6e:	61fb      	str	r3, [r7, #28]
 8005b70:	e002      	b.n	8005b78 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8005b72:	f06f 0302 	mvn.w	r3, #2
 8005b76:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8005b78:	69fb      	ldr	r3, [r7, #28]
}
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	3720      	adds	r7, #32
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	bd80      	pop	{r7, pc}
 8005b82:	bf00      	nop
 8005b84:	e000ed04 	.word	0xe000ed04

08005b88 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b086      	sub	sp, #24
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 8005b94:	693b      	ldr	r3, [r7, #16]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d102      	bne.n	8005ba0 <osMessageQueueGetCount+0x18>
    count = 0U;
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	617b      	str	r3, [r7, #20]
 8005b9e:	e00e      	b.n	8005bbe <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005ba0:	f3ef 8305 	mrs	r3, IPSR
 8005ba4:	60fb      	str	r3, [r7, #12]
  return(result);
 8005ba6:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d004      	beq.n	8005bb6 <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 8005bac:	6938      	ldr	r0, [r7, #16]
 8005bae:	f000 fda2 	bl	80066f6 <uxQueueMessagesWaitingFromISR>
 8005bb2:	6178      	str	r0, [r7, #20]
 8005bb4:	e003      	b.n	8005bbe <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 8005bb6:	6938      	ldr	r0, [r7, #16]
 8005bb8:	f000 fd5c 	bl	8006674 <uxQueueMessagesWaiting>
 8005bbc:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 8005bbe:	697b      	ldr	r3, [r7, #20]
}
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	3718      	adds	r7, #24
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	bd80      	pop	{r7, pc}

08005bc8 <osMessageQueueGetSpace>:

uint32_t osMessageQueueGetSpace (osMessageQueueId_t mq_id) {
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b08a      	sub	sp, #40	; 0x28
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
  StaticQueue_t *mq = (StaticQueue_t *)mq_id;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	623b      	str	r3, [r7, #32]
  uint32_t space;
  uint32_t isrm;

  if (mq == NULL) {
 8005bd4:	6a3b      	ldr	r3, [r7, #32]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d102      	bne.n	8005be0 <osMessageQueueGetSpace+0x18>
    space = 0U;
 8005bda:	2300      	movs	r3, #0
 8005bdc:	627b      	str	r3, [r7, #36]	; 0x24
 8005bde:	e023      	b.n	8005c28 <osMessageQueueGetSpace+0x60>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005be0:	f3ef 8305 	mrs	r3, IPSR
 8005be4:	61bb      	str	r3, [r7, #24]
  return(result);
 8005be6:	69bb      	ldr	r3, [r7, #24]
  }
  else if (IS_IRQ()) {
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d019      	beq.n	8005c20 <osMessageQueueGetSpace+0x58>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005bec:	f3ef 8211 	mrs	r2, BASEPRI
 8005bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bf4:	f383 8811 	msr	BASEPRI, r3
 8005bf8:	f3bf 8f6f 	isb	sy
 8005bfc:	f3bf 8f4f 	dsb	sy
 8005c00:	613a      	str	r2, [r7, #16]
 8005c02:	60fb      	str	r3, [r7, #12]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005c04:	693b      	ldr	r3, [r7, #16]
    isrm = taskENTER_CRITICAL_FROM_ISR();
 8005c06:	61fb      	str	r3, [r7, #28]

    /* space = pxQueue->uxLength - pxQueue->uxMessagesWaiting; */
    space = mq->uxDummy4[1] - mq->uxDummy4[0];
 8005c08:	6a3b      	ldr	r3, [r7, #32]
 8005c0a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c0c:	6a3b      	ldr	r3, [r7, #32]
 8005c0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c10:	1ad3      	subs	r3, r2, r3
 8005c12:	627b      	str	r3, [r7, #36]	; 0x24
 8005c14:	69fb      	ldr	r3, [r7, #28]
 8005c16:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005c18:	697b      	ldr	r3, [r7, #20]
 8005c1a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005c1e:	e003      	b.n	8005c28 <osMessageQueueGetSpace+0x60>

    taskEXIT_CRITICAL_FROM_ISR(isrm);
  }
  else {
    space = (uint32_t)uxQueueSpacesAvailable ((QueueHandle_t)mq);
 8005c20:	6a38      	ldr	r0, [r7, #32]
 8005c22:	f000 fd45 	bl	80066b0 <uxQueueSpacesAvailable>
 8005c26:	6278      	str	r0, [r7, #36]	; 0x24
  }

  return (space);
 8005c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	3728      	adds	r7, #40	; 0x28
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd80      	pop	{r7, pc}
	...

08005c34 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005c34:	b480      	push	{r7}
 8005c36:	b085      	sub	sp, #20
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	60f8      	str	r0, [r7, #12]
 8005c3c:	60b9      	str	r1, [r7, #8]
 8005c3e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	4a07      	ldr	r2, [pc, #28]	; (8005c60 <vApplicationGetIdleTaskMemory+0x2c>)
 8005c44:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005c46:	68bb      	ldr	r3, [r7, #8]
 8005c48:	4a06      	ldr	r2, [pc, #24]	; (8005c64 <vApplicationGetIdleTaskMemory+0x30>)
 8005c4a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2280      	movs	r2, #128	; 0x80
 8005c50:	601a      	str	r2, [r3, #0]
}
 8005c52:	bf00      	nop
 8005c54:	3714      	adds	r7, #20
 8005c56:	46bd      	mov	sp, r7
 8005c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5c:	4770      	bx	lr
 8005c5e:	bf00      	nop
 8005c60:	2000032c 	.word	0x2000032c
 8005c64:	20000388 	.word	0x20000388

08005c68 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005c68:	b480      	push	{r7}
 8005c6a:	b085      	sub	sp, #20
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	60f8      	str	r0, [r7, #12]
 8005c70:	60b9      	str	r1, [r7, #8]
 8005c72:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	4a07      	ldr	r2, [pc, #28]	; (8005c94 <vApplicationGetTimerTaskMemory+0x2c>)
 8005c78:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	4a06      	ldr	r2, [pc, #24]	; (8005c98 <vApplicationGetTimerTaskMemory+0x30>)
 8005c7e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005c86:	601a      	str	r2, [r3, #0]
}
 8005c88:	bf00      	nop
 8005c8a:	3714      	adds	r7, #20
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c92:	4770      	bx	lr
 8005c94:	20000588 	.word	0x20000588
 8005c98:	200005e4 	.word	0x200005e4

08005c9c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b083      	sub	sp, #12
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	f103 0208 	add.w	r2, r3, #8
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005cb4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	f103 0208 	add.w	r2, r3, #8
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	f103 0208 	add.w	r2, r3, #8
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005cd0:	bf00      	nop
 8005cd2:	370c      	adds	r7, #12
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cda:	4770      	bx	lr

08005cdc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005cdc:	b480      	push	{r7}
 8005cde:	b083      	sub	sp, #12
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005cea:	bf00      	nop
 8005cec:	370c      	adds	r7, #12
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf4:	4770      	bx	lr

08005cf6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005cf6:	b480      	push	{r7}
 8005cf8:	b085      	sub	sp, #20
 8005cfa:	af00      	add	r7, sp, #0
 8005cfc:	6078      	str	r0, [r7, #4]
 8005cfe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	685b      	ldr	r3, [r3, #4]
 8005d04:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	68fa      	ldr	r2, [r7, #12]
 8005d0a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	689a      	ldr	r2, [r3, #8]
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	689b      	ldr	r3, [r3, #8]
 8005d18:	683a      	ldr	r2, [r7, #0]
 8005d1a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	683a      	ldr	r2, [r7, #0]
 8005d20:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	687a      	ldr	r2, [r7, #4]
 8005d26:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	1c5a      	adds	r2, r3, #1
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	601a      	str	r2, [r3, #0]
}
 8005d32:	bf00      	nop
 8005d34:	3714      	adds	r7, #20
 8005d36:	46bd      	mov	sp, r7
 8005d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3c:	4770      	bx	lr

08005d3e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005d3e:	b480      	push	{r7}
 8005d40:	b085      	sub	sp, #20
 8005d42:	af00      	add	r7, sp, #0
 8005d44:	6078      	str	r0, [r7, #4]
 8005d46:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005d4e:	68bb      	ldr	r3, [r7, #8]
 8005d50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005d54:	d103      	bne.n	8005d5e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	691b      	ldr	r3, [r3, #16]
 8005d5a:	60fb      	str	r3, [r7, #12]
 8005d5c:	e00c      	b.n	8005d78 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	3308      	adds	r3, #8
 8005d62:	60fb      	str	r3, [r7, #12]
 8005d64:	e002      	b.n	8005d6c <vListInsert+0x2e>
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	685b      	ldr	r3, [r3, #4]
 8005d6a:	60fb      	str	r3, [r7, #12]
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	685b      	ldr	r3, [r3, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	68ba      	ldr	r2, [r7, #8]
 8005d74:	429a      	cmp	r2, r3
 8005d76:	d2f6      	bcs.n	8005d66 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	685a      	ldr	r2, [r3, #4]
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	685b      	ldr	r3, [r3, #4]
 8005d84:	683a      	ldr	r2, [r7, #0]
 8005d86:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	68fa      	ldr	r2, [r7, #12]
 8005d8c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	683a      	ldr	r2, [r7, #0]
 8005d92:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	687a      	ldr	r2, [r7, #4]
 8005d98:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	1c5a      	adds	r2, r3, #1
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	601a      	str	r2, [r3, #0]
}
 8005da4:	bf00      	nop
 8005da6:	3714      	adds	r7, #20
 8005da8:	46bd      	mov	sp, r7
 8005daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dae:	4770      	bx	lr

08005db0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005db0:	b480      	push	{r7}
 8005db2:	b085      	sub	sp, #20
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	691b      	ldr	r3, [r3, #16]
 8005dbc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	685b      	ldr	r3, [r3, #4]
 8005dc2:	687a      	ldr	r2, [r7, #4]
 8005dc4:	6892      	ldr	r2, [r2, #8]
 8005dc6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	689b      	ldr	r3, [r3, #8]
 8005dcc:	687a      	ldr	r2, [r7, #4]
 8005dce:	6852      	ldr	r2, [r2, #4]
 8005dd0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	685b      	ldr	r3, [r3, #4]
 8005dd6:	687a      	ldr	r2, [r7, #4]
 8005dd8:	429a      	cmp	r2, r3
 8005dda:	d103      	bne.n	8005de4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	689a      	ldr	r2, [r3, #8]
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2200      	movs	r2, #0
 8005de8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	1e5a      	subs	r2, r3, #1
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
}
 8005df8:	4618      	mov	r0, r3
 8005dfa:	3714      	adds	r7, #20
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e02:	4770      	bx	lr

08005e04 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b084      	sub	sp, #16
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
 8005e0c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d10a      	bne.n	8005e2e <xQueueGenericReset+0x2a>
	__asm volatile
 8005e18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e1c:	f383 8811 	msr	BASEPRI, r3
 8005e20:	f3bf 8f6f 	isb	sy
 8005e24:	f3bf 8f4f 	dsb	sy
 8005e28:	60bb      	str	r3, [r7, #8]
}
 8005e2a:	bf00      	nop
 8005e2c:	e7fe      	b.n	8005e2c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005e2e:	f002 fb59 	bl	80084e4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681a      	ldr	r2, [r3, #0]
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e3a:	68f9      	ldr	r1, [r7, #12]
 8005e3c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005e3e:	fb01 f303 	mul.w	r3, r1, r3
 8005e42:	441a      	add	r2, r3
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681a      	ldr	r2, [r3, #0]
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681a      	ldr	r2, [r3, #0]
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e5e:	3b01      	subs	r3, #1
 8005e60:	68f9      	ldr	r1, [r7, #12]
 8005e62:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005e64:	fb01 f303 	mul.w	r3, r1, r3
 8005e68:	441a      	add	r2, r3
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	22ff      	movs	r2, #255	; 0xff
 8005e72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	22ff      	movs	r2, #255	; 0xff
 8005e7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d114      	bne.n	8005eae <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	691b      	ldr	r3, [r3, #16]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d01a      	beq.n	8005ec2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	3310      	adds	r3, #16
 8005e90:	4618      	mov	r0, r3
 8005e92:	f001 fa1d 	bl	80072d0 <xTaskRemoveFromEventList>
 8005e96:	4603      	mov	r3, r0
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d012      	beq.n	8005ec2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005e9c:	4b0c      	ldr	r3, [pc, #48]	; (8005ed0 <xQueueGenericReset+0xcc>)
 8005e9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ea2:	601a      	str	r2, [r3, #0]
 8005ea4:	f3bf 8f4f 	dsb	sy
 8005ea8:	f3bf 8f6f 	isb	sy
 8005eac:	e009      	b.n	8005ec2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	3310      	adds	r3, #16
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	f7ff fef2 	bl	8005c9c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	3324      	adds	r3, #36	; 0x24
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	f7ff feed 	bl	8005c9c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005ec2:	f002 fb3f 	bl	8008544 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005ec6:	2301      	movs	r3, #1
}
 8005ec8:	4618      	mov	r0, r3
 8005eca:	3710      	adds	r7, #16
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	bd80      	pop	{r7, pc}
 8005ed0:	e000ed04 	.word	0xe000ed04

08005ed4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b08e      	sub	sp, #56	; 0x38
 8005ed8:	af02      	add	r7, sp, #8
 8005eda:	60f8      	str	r0, [r7, #12]
 8005edc:	60b9      	str	r1, [r7, #8]
 8005ede:	607a      	str	r2, [r7, #4]
 8005ee0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d10a      	bne.n	8005efe <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005ee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eec:	f383 8811 	msr	BASEPRI, r3
 8005ef0:	f3bf 8f6f 	isb	sy
 8005ef4:	f3bf 8f4f 	dsb	sy
 8005ef8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005efa:	bf00      	nop
 8005efc:	e7fe      	b.n	8005efc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d10a      	bne.n	8005f1a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f08:	f383 8811 	msr	BASEPRI, r3
 8005f0c:	f3bf 8f6f 	isb	sy
 8005f10:	f3bf 8f4f 	dsb	sy
 8005f14:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005f16:	bf00      	nop
 8005f18:	e7fe      	b.n	8005f18 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d002      	beq.n	8005f26 <xQueueGenericCreateStatic+0x52>
 8005f20:	68bb      	ldr	r3, [r7, #8]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d001      	beq.n	8005f2a <xQueueGenericCreateStatic+0x56>
 8005f26:	2301      	movs	r3, #1
 8005f28:	e000      	b.n	8005f2c <xQueueGenericCreateStatic+0x58>
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d10a      	bne.n	8005f46 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f34:	f383 8811 	msr	BASEPRI, r3
 8005f38:	f3bf 8f6f 	isb	sy
 8005f3c:	f3bf 8f4f 	dsb	sy
 8005f40:	623b      	str	r3, [r7, #32]
}
 8005f42:	bf00      	nop
 8005f44:	e7fe      	b.n	8005f44 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d102      	bne.n	8005f52 <xQueueGenericCreateStatic+0x7e>
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d101      	bne.n	8005f56 <xQueueGenericCreateStatic+0x82>
 8005f52:	2301      	movs	r3, #1
 8005f54:	e000      	b.n	8005f58 <xQueueGenericCreateStatic+0x84>
 8005f56:	2300      	movs	r3, #0
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d10a      	bne.n	8005f72 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f60:	f383 8811 	msr	BASEPRI, r3
 8005f64:	f3bf 8f6f 	isb	sy
 8005f68:	f3bf 8f4f 	dsb	sy
 8005f6c:	61fb      	str	r3, [r7, #28]
}
 8005f6e:	bf00      	nop
 8005f70:	e7fe      	b.n	8005f70 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005f72:	2350      	movs	r3, #80	; 0x50
 8005f74:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005f76:	697b      	ldr	r3, [r7, #20]
 8005f78:	2b50      	cmp	r3, #80	; 0x50
 8005f7a:	d00a      	beq.n	8005f92 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f80:	f383 8811 	msr	BASEPRI, r3
 8005f84:	f3bf 8f6f 	isb	sy
 8005f88:	f3bf 8f4f 	dsb	sy
 8005f8c:	61bb      	str	r3, [r7, #24]
}
 8005f8e:	bf00      	nop
 8005f90:	e7fe      	b.n	8005f90 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005f92:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005f98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d00d      	beq.n	8005fba <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005f9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fa0:	2201      	movs	r2, #1
 8005fa2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005fa6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005faa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fac:	9300      	str	r3, [sp, #0]
 8005fae:	4613      	mov	r3, r2
 8005fb0:	687a      	ldr	r2, [r7, #4]
 8005fb2:	68b9      	ldr	r1, [r7, #8]
 8005fb4:	68f8      	ldr	r0, [r7, #12]
 8005fb6:	f000 f83f 	bl	8006038 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	3730      	adds	r7, #48	; 0x30
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	bd80      	pop	{r7, pc}

08005fc4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b08a      	sub	sp, #40	; 0x28
 8005fc8:	af02      	add	r7, sp, #8
 8005fca:	60f8      	str	r0, [r7, #12]
 8005fcc:	60b9      	str	r1, [r7, #8]
 8005fce:	4613      	mov	r3, r2
 8005fd0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d10a      	bne.n	8005fee <xQueueGenericCreate+0x2a>
	__asm volatile
 8005fd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fdc:	f383 8811 	msr	BASEPRI, r3
 8005fe0:	f3bf 8f6f 	isb	sy
 8005fe4:	f3bf 8f4f 	dsb	sy
 8005fe8:	613b      	str	r3, [r7, #16]
}
 8005fea:	bf00      	nop
 8005fec:	e7fe      	b.n	8005fec <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	68ba      	ldr	r2, [r7, #8]
 8005ff2:	fb02 f303 	mul.w	r3, r2, r3
 8005ff6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005ff8:	69fb      	ldr	r3, [r7, #28]
 8005ffa:	3350      	adds	r3, #80	; 0x50
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	f002 fb93 	bl	8008728 <pvPortMalloc>
 8006002:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006004:	69bb      	ldr	r3, [r7, #24]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d011      	beq.n	800602e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800600a:	69bb      	ldr	r3, [r7, #24]
 800600c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800600e:	697b      	ldr	r3, [r7, #20]
 8006010:	3350      	adds	r3, #80	; 0x50
 8006012:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006014:	69bb      	ldr	r3, [r7, #24]
 8006016:	2200      	movs	r2, #0
 8006018:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800601c:	79fa      	ldrb	r2, [r7, #7]
 800601e:	69bb      	ldr	r3, [r7, #24]
 8006020:	9300      	str	r3, [sp, #0]
 8006022:	4613      	mov	r3, r2
 8006024:	697a      	ldr	r2, [r7, #20]
 8006026:	68b9      	ldr	r1, [r7, #8]
 8006028:	68f8      	ldr	r0, [r7, #12]
 800602a:	f000 f805 	bl	8006038 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800602e:	69bb      	ldr	r3, [r7, #24]
	}
 8006030:	4618      	mov	r0, r3
 8006032:	3720      	adds	r7, #32
 8006034:	46bd      	mov	sp, r7
 8006036:	bd80      	pop	{r7, pc}

08006038 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b084      	sub	sp, #16
 800603c:	af00      	add	r7, sp, #0
 800603e:	60f8      	str	r0, [r7, #12]
 8006040:	60b9      	str	r1, [r7, #8]
 8006042:	607a      	str	r2, [r7, #4]
 8006044:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d103      	bne.n	8006054 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800604c:	69bb      	ldr	r3, [r7, #24]
 800604e:	69ba      	ldr	r2, [r7, #24]
 8006050:	601a      	str	r2, [r3, #0]
 8006052:	e002      	b.n	800605a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006054:	69bb      	ldr	r3, [r7, #24]
 8006056:	687a      	ldr	r2, [r7, #4]
 8006058:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800605a:	69bb      	ldr	r3, [r7, #24]
 800605c:	68fa      	ldr	r2, [r7, #12]
 800605e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006060:	69bb      	ldr	r3, [r7, #24]
 8006062:	68ba      	ldr	r2, [r7, #8]
 8006064:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006066:	2101      	movs	r1, #1
 8006068:	69b8      	ldr	r0, [r7, #24]
 800606a:	f7ff fecb 	bl	8005e04 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800606e:	69bb      	ldr	r3, [r7, #24]
 8006070:	78fa      	ldrb	r2, [r7, #3]
 8006072:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006076:	bf00      	nop
 8006078:	3710      	adds	r7, #16
 800607a:	46bd      	mov	sp, r7
 800607c:	bd80      	pop	{r7, pc}
	...

08006080 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b08e      	sub	sp, #56	; 0x38
 8006084:	af00      	add	r7, sp, #0
 8006086:	60f8      	str	r0, [r7, #12]
 8006088:	60b9      	str	r1, [r7, #8]
 800608a:	607a      	str	r2, [r7, #4]
 800608c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800608e:	2300      	movs	r3, #0
 8006090:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006098:	2b00      	cmp	r3, #0
 800609a:	d10a      	bne.n	80060b2 <xQueueGenericSend+0x32>
	__asm volatile
 800609c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060a0:	f383 8811 	msr	BASEPRI, r3
 80060a4:	f3bf 8f6f 	isb	sy
 80060a8:	f3bf 8f4f 	dsb	sy
 80060ac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80060ae:	bf00      	nop
 80060b0:	e7fe      	b.n	80060b0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d103      	bne.n	80060c0 <xQueueGenericSend+0x40>
 80060b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d101      	bne.n	80060c4 <xQueueGenericSend+0x44>
 80060c0:	2301      	movs	r3, #1
 80060c2:	e000      	b.n	80060c6 <xQueueGenericSend+0x46>
 80060c4:	2300      	movs	r3, #0
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d10a      	bne.n	80060e0 <xQueueGenericSend+0x60>
	__asm volatile
 80060ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060ce:	f383 8811 	msr	BASEPRI, r3
 80060d2:	f3bf 8f6f 	isb	sy
 80060d6:	f3bf 8f4f 	dsb	sy
 80060da:	627b      	str	r3, [r7, #36]	; 0x24
}
 80060dc:	bf00      	nop
 80060de:	e7fe      	b.n	80060de <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	2b02      	cmp	r3, #2
 80060e4:	d103      	bne.n	80060ee <xQueueGenericSend+0x6e>
 80060e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060ea:	2b01      	cmp	r3, #1
 80060ec:	d101      	bne.n	80060f2 <xQueueGenericSend+0x72>
 80060ee:	2301      	movs	r3, #1
 80060f0:	e000      	b.n	80060f4 <xQueueGenericSend+0x74>
 80060f2:	2300      	movs	r3, #0
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d10a      	bne.n	800610e <xQueueGenericSend+0x8e>
	__asm volatile
 80060f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060fc:	f383 8811 	msr	BASEPRI, r3
 8006100:	f3bf 8f6f 	isb	sy
 8006104:	f3bf 8f4f 	dsb	sy
 8006108:	623b      	str	r3, [r7, #32]
}
 800610a:	bf00      	nop
 800610c:	e7fe      	b.n	800610c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800610e:	f001 fa9d 	bl	800764c <xTaskGetSchedulerState>
 8006112:	4603      	mov	r3, r0
 8006114:	2b00      	cmp	r3, #0
 8006116:	d102      	bne.n	800611e <xQueueGenericSend+0x9e>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d101      	bne.n	8006122 <xQueueGenericSend+0xa2>
 800611e:	2301      	movs	r3, #1
 8006120:	e000      	b.n	8006124 <xQueueGenericSend+0xa4>
 8006122:	2300      	movs	r3, #0
 8006124:	2b00      	cmp	r3, #0
 8006126:	d10a      	bne.n	800613e <xQueueGenericSend+0xbe>
	__asm volatile
 8006128:	f04f 0350 	mov.w	r3, #80	; 0x50
 800612c:	f383 8811 	msr	BASEPRI, r3
 8006130:	f3bf 8f6f 	isb	sy
 8006134:	f3bf 8f4f 	dsb	sy
 8006138:	61fb      	str	r3, [r7, #28]
}
 800613a:	bf00      	nop
 800613c:	e7fe      	b.n	800613c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800613e:	f002 f9d1 	bl	80084e4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006144:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006148:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800614a:	429a      	cmp	r2, r3
 800614c:	d302      	bcc.n	8006154 <xQueueGenericSend+0xd4>
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	2b02      	cmp	r3, #2
 8006152:	d129      	bne.n	80061a8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006154:	683a      	ldr	r2, [r7, #0]
 8006156:	68b9      	ldr	r1, [r7, #8]
 8006158:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800615a:	f000 faea 	bl	8006732 <prvCopyDataToQueue>
 800615e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006164:	2b00      	cmp	r3, #0
 8006166:	d010      	beq.n	800618a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800616a:	3324      	adds	r3, #36	; 0x24
 800616c:	4618      	mov	r0, r3
 800616e:	f001 f8af 	bl	80072d0 <xTaskRemoveFromEventList>
 8006172:	4603      	mov	r3, r0
 8006174:	2b00      	cmp	r3, #0
 8006176:	d013      	beq.n	80061a0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006178:	4b3f      	ldr	r3, [pc, #252]	; (8006278 <xQueueGenericSend+0x1f8>)
 800617a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800617e:	601a      	str	r2, [r3, #0]
 8006180:	f3bf 8f4f 	dsb	sy
 8006184:	f3bf 8f6f 	isb	sy
 8006188:	e00a      	b.n	80061a0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800618a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800618c:	2b00      	cmp	r3, #0
 800618e:	d007      	beq.n	80061a0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006190:	4b39      	ldr	r3, [pc, #228]	; (8006278 <xQueueGenericSend+0x1f8>)
 8006192:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006196:	601a      	str	r2, [r3, #0]
 8006198:	f3bf 8f4f 	dsb	sy
 800619c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80061a0:	f002 f9d0 	bl	8008544 <vPortExitCritical>
				return pdPASS;
 80061a4:	2301      	movs	r3, #1
 80061a6:	e063      	b.n	8006270 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d103      	bne.n	80061b6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80061ae:	f002 f9c9 	bl	8008544 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80061b2:	2300      	movs	r3, #0
 80061b4:	e05c      	b.n	8006270 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80061b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d106      	bne.n	80061ca <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80061bc:	f107 0314 	add.w	r3, r7, #20
 80061c0:	4618      	mov	r0, r3
 80061c2:	f001 f8e9 	bl	8007398 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80061c6:	2301      	movs	r3, #1
 80061c8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80061ca:	f002 f9bb 	bl	8008544 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80061ce:	f000 fe5b 	bl	8006e88 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80061d2:	f002 f987 	bl	80084e4 <vPortEnterCritical>
 80061d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80061dc:	b25b      	sxtb	r3, r3
 80061de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80061e2:	d103      	bne.n	80061ec <xQueueGenericSend+0x16c>
 80061e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061e6:	2200      	movs	r2, #0
 80061e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80061ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80061f2:	b25b      	sxtb	r3, r3
 80061f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80061f8:	d103      	bne.n	8006202 <xQueueGenericSend+0x182>
 80061fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061fc:	2200      	movs	r2, #0
 80061fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006202:	f002 f99f 	bl	8008544 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006206:	1d3a      	adds	r2, r7, #4
 8006208:	f107 0314 	add.w	r3, r7, #20
 800620c:	4611      	mov	r1, r2
 800620e:	4618      	mov	r0, r3
 8006210:	f001 f8d8 	bl	80073c4 <xTaskCheckForTimeOut>
 8006214:	4603      	mov	r3, r0
 8006216:	2b00      	cmp	r3, #0
 8006218:	d124      	bne.n	8006264 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800621a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800621c:	f000 fb81 	bl	8006922 <prvIsQueueFull>
 8006220:	4603      	mov	r3, r0
 8006222:	2b00      	cmp	r3, #0
 8006224:	d018      	beq.n	8006258 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006228:	3310      	adds	r3, #16
 800622a:	687a      	ldr	r2, [r7, #4]
 800622c:	4611      	mov	r1, r2
 800622e:	4618      	mov	r0, r3
 8006230:	f000 fffe 	bl	8007230 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006234:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006236:	f000 fb0c 	bl	8006852 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800623a:	f000 fe33 	bl	8006ea4 <xTaskResumeAll>
 800623e:	4603      	mov	r3, r0
 8006240:	2b00      	cmp	r3, #0
 8006242:	f47f af7c 	bne.w	800613e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006246:	4b0c      	ldr	r3, [pc, #48]	; (8006278 <xQueueGenericSend+0x1f8>)
 8006248:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800624c:	601a      	str	r2, [r3, #0]
 800624e:	f3bf 8f4f 	dsb	sy
 8006252:	f3bf 8f6f 	isb	sy
 8006256:	e772      	b.n	800613e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006258:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800625a:	f000 fafa 	bl	8006852 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800625e:	f000 fe21 	bl	8006ea4 <xTaskResumeAll>
 8006262:	e76c      	b.n	800613e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006264:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006266:	f000 faf4 	bl	8006852 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800626a:	f000 fe1b 	bl	8006ea4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800626e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006270:	4618      	mov	r0, r3
 8006272:	3738      	adds	r7, #56	; 0x38
 8006274:	46bd      	mov	sp, r7
 8006276:	bd80      	pop	{r7, pc}
 8006278:	e000ed04 	.word	0xe000ed04

0800627c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b090      	sub	sp, #64	; 0x40
 8006280:	af00      	add	r7, sp, #0
 8006282:	60f8      	str	r0, [r7, #12]
 8006284:	60b9      	str	r1, [r7, #8]
 8006286:	607a      	str	r2, [r7, #4]
 8006288:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800628e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006290:	2b00      	cmp	r3, #0
 8006292:	d10a      	bne.n	80062aa <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006298:	f383 8811 	msr	BASEPRI, r3
 800629c:	f3bf 8f6f 	isb	sy
 80062a0:	f3bf 8f4f 	dsb	sy
 80062a4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80062a6:	bf00      	nop
 80062a8:	e7fe      	b.n	80062a8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d103      	bne.n	80062b8 <xQueueGenericSendFromISR+0x3c>
 80062b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d101      	bne.n	80062bc <xQueueGenericSendFromISR+0x40>
 80062b8:	2301      	movs	r3, #1
 80062ba:	e000      	b.n	80062be <xQueueGenericSendFromISR+0x42>
 80062bc:	2300      	movs	r3, #0
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d10a      	bne.n	80062d8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80062c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062c6:	f383 8811 	msr	BASEPRI, r3
 80062ca:	f3bf 8f6f 	isb	sy
 80062ce:	f3bf 8f4f 	dsb	sy
 80062d2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80062d4:	bf00      	nop
 80062d6:	e7fe      	b.n	80062d6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	2b02      	cmp	r3, #2
 80062dc:	d103      	bne.n	80062e6 <xQueueGenericSendFromISR+0x6a>
 80062de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062e2:	2b01      	cmp	r3, #1
 80062e4:	d101      	bne.n	80062ea <xQueueGenericSendFromISR+0x6e>
 80062e6:	2301      	movs	r3, #1
 80062e8:	e000      	b.n	80062ec <xQueueGenericSendFromISR+0x70>
 80062ea:	2300      	movs	r3, #0
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d10a      	bne.n	8006306 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80062f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062f4:	f383 8811 	msr	BASEPRI, r3
 80062f8:	f3bf 8f6f 	isb	sy
 80062fc:	f3bf 8f4f 	dsb	sy
 8006300:	623b      	str	r3, [r7, #32]
}
 8006302:	bf00      	nop
 8006304:	e7fe      	b.n	8006304 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006306:	f002 f9cf 	bl	80086a8 <vPortValidateInterruptPriority>
	__asm volatile
 800630a:	f3ef 8211 	mrs	r2, BASEPRI
 800630e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006312:	f383 8811 	msr	BASEPRI, r3
 8006316:	f3bf 8f6f 	isb	sy
 800631a:	f3bf 8f4f 	dsb	sy
 800631e:	61fa      	str	r2, [r7, #28]
 8006320:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8006322:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006324:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006328:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800632a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800632c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800632e:	429a      	cmp	r2, r3
 8006330:	d302      	bcc.n	8006338 <xQueueGenericSendFromISR+0xbc>
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	2b02      	cmp	r3, #2
 8006336:	d12f      	bne.n	8006398 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800633a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800633e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006346:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006348:	683a      	ldr	r2, [r7, #0]
 800634a:	68b9      	ldr	r1, [r7, #8]
 800634c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800634e:	f000 f9f0 	bl	8006732 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006352:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006356:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800635a:	d112      	bne.n	8006382 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800635c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800635e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006360:	2b00      	cmp	r3, #0
 8006362:	d016      	beq.n	8006392 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006366:	3324      	adds	r3, #36	; 0x24
 8006368:	4618      	mov	r0, r3
 800636a:	f000 ffb1 	bl	80072d0 <xTaskRemoveFromEventList>
 800636e:	4603      	mov	r3, r0
 8006370:	2b00      	cmp	r3, #0
 8006372:	d00e      	beq.n	8006392 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d00b      	beq.n	8006392 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2201      	movs	r2, #1
 800637e:	601a      	str	r2, [r3, #0]
 8006380:	e007      	b.n	8006392 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006382:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006386:	3301      	adds	r3, #1
 8006388:	b2db      	uxtb	r3, r3
 800638a:	b25a      	sxtb	r2, r3
 800638c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800638e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006392:	2301      	movs	r3, #1
 8006394:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8006396:	e001      	b.n	800639c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006398:	2300      	movs	r3, #0
 800639a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800639c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800639e:	617b      	str	r3, [r7, #20]
	__asm volatile
 80063a0:	697b      	ldr	r3, [r7, #20]
 80063a2:	f383 8811 	msr	BASEPRI, r3
}
 80063a6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80063a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80063aa:	4618      	mov	r0, r3
 80063ac:	3740      	adds	r7, #64	; 0x40
 80063ae:	46bd      	mov	sp, r7
 80063b0:	bd80      	pop	{r7, pc}
	...

080063b4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b08c      	sub	sp, #48	; 0x30
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	60f8      	str	r0, [r7, #12]
 80063bc:	60b9      	str	r1, [r7, #8]
 80063be:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80063c0:	2300      	movs	r3, #0
 80063c2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80063c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d10a      	bne.n	80063e4 <xQueueReceive+0x30>
	__asm volatile
 80063ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063d2:	f383 8811 	msr	BASEPRI, r3
 80063d6:	f3bf 8f6f 	isb	sy
 80063da:	f3bf 8f4f 	dsb	sy
 80063de:	623b      	str	r3, [r7, #32]
}
 80063e0:	bf00      	nop
 80063e2:	e7fe      	b.n	80063e2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d103      	bne.n	80063f2 <xQueueReceive+0x3e>
 80063ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d101      	bne.n	80063f6 <xQueueReceive+0x42>
 80063f2:	2301      	movs	r3, #1
 80063f4:	e000      	b.n	80063f8 <xQueueReceive+0x44>
 80063f6:	2300      	movs	r3, #0
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d10a      	bne.n	8006412 <xQueueReceive+0x5e>
	__asm volatile
 80063fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006400:	f383 8811 	msr	BASEPRI, r3
 8006404:	f3bf 8f6f 	isb	sy
 8006408:	f3bf 8f4f 	dsb	sy
 800640c:	61fb      	str	r3, [r7, #28]
}
 800640e:	bf00      	nop
 8006410:	e7fe      	b.n	8006410 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006412:	f001 f91b 	bl	800764c <xTaskGetSchedulerState>
 8006416:	4603      	mov	r3, r0
 8006418:	2b00      	cmp	r3, #0
 800641a:	d102      	bne.n	8006422 <xQueueReceive+0x6e>
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d101      	bne.n	8006426 <xQueueReceive+0x72>
 8006422:	2301      	movs	r3, #1
 8006424:	e000      	b.n	8006428 <xQueueReceive+0x74>
 8006426:	2300      	movs	r3, #0
 8006428:	2b00      	cmp	r3, #0
 800642a:	d10a      	bne.n	8006442 <xQueueReceive+0x8e>
	__asm volatile
 800642c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006430:	f383 8811 	msr	BASEPRI, r3
 8006434:	f3bf 8f6f 	isb	sy
 8006438:	f3bf 8f4f 	dsb	sy
 800643c:	61bb      	str	r3, [r7, #24]
}
 800643e:	bf00      	nop
 8006440:	e7fe      	b.n	8006440 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006442:	f002 f84f 	bl	80084e4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800644a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800644c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800644e:	2b00      	cmp	r3, #0
 8006450:	d01f      	beq.n	8006492 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006452:	68b9      	ldr	r1, [r7, #8]
 8006454:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006456:	f000 f9d6 	bl	8006806 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800645a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800645c:	1e5a      	subs	r2, r3, #1
 800645e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006460:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006464:	691b      	ldr	r3, [r3, #16]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d00f      	beq.n	800648a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800646a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800646c:	3310      	adds	r3, #16
 800646e:	4618      	mov	r0, r3
 8006470:	f000 ff2e 	bl	80072d0 <xTaskRemoveFromEventList>
 8006474:	4603      	mov	r3, r0
 8006476:	2b00      	cmp	r3, #0
 8006478:	d007      	beq.n	800648a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800647a:	4b3d      	ldr	r3, [pc, #244]	; (8006570 <xQueueReceive+0x1bc>)
 800647c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006480:	601a      	str	r2, [r3, #0]
 8006482:	f3bf 8f4f 	dsb	sy
 8006486:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800648a:	f002 f85b 	bl	8008544 <vPortExitCritical>
				return pdPASS;
 800648e:	2301      	movs	r3, #1
 8006490:	e069      	b.n	8006566 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d103      	bne.n	80064a0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006498:	f002 f854 	bl	8008544 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800649c:	2300      	movs	r3, #0
 800649e:	e062      	b.n	8006566 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80064a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d106      	bne.n	80064b4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80064a6:	f107 0310 	add.w	r3, r7, #16
 80064aa:	4618      	mov	r0, r3
 80064ac:	f000 ff74 	bl	8007398 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80064b0:	2301      	movs	r3, #1
 80064b2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80064b4:	f002 f846 	bl	8008544 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80064b8:	f000 fce6 	bl	8006e88 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80064bc:	f002 f812 	bl	80084e4 <vPortEnterCritical>
 80064c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064c2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80064c6:	b25b      	sxtb	r3, r3
 80064c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80064cc:	d103      	bne.n	80064d6 <xQueueReceive+0x122>
 80064ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064d0:	2200      	movs	r2, #0
 80064d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80064d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80064dc:	b25b      	sxtb	r3, r3
 80064de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80064e2:	d103      	bne.n	80064ec <xQueueReceive+0x138>
 80064e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064e6:	2200      	movs	r2, #0
 80064e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80064ec:	f002 f82a 	bl	8008544 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80064f0:	1d3a      	adds	r2, r7, #4
 80064f2:	f107 0310 	add.w	r3, r7, #16
 80064f6:	4611      	mov	r1, r2
 80064f8:	4618      	mov	r0, r3
 80064fa:	f000 ff63 	bl	80073c4 <xTaskCheckForTimeOut>
 80064fe:	4603      	mov	r3, r0
 8006500:	2b00      	cmp	r3, #0
 8006502:	d123      	bne.n	800654c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006504:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006506:	f000 f9f6 	bl	80068f6 <prvIsQueueEmpty>
 800650a:	4603      	mov	r3, r0
 800650c:	2b00      	cmp	r3, #0
 800650e:	d017      	beq.n	8006540 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006512:	3324      	adds	r3, #36	; 0x24
 8006514:	687a      	ldr	r2, [r7, #4]
 8006516:	4611      	mov	r1, r2
 8006518:	4618      	mov	r0, r3
 800651a:	f000 fe89 	bl	8007230 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800651e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006520:	f000 f997 	bl	8006852 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006524:	f000 fcbe 	bl	8006ea4 <xTaskResumeAll>
 8006528:	4603      	mov	r3, r0
 800652a:	2b00      	cmp	r3, #0
 800652c:	d189      	bne.n	8006442 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800652e:	4b10      	ldr	r3, [pc, #64]	; (8006570 <xQueueReceive+0x1bc>)
 8006530:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006534:	601a      	str	r2, [r3, #0]
 8006536:	f3bf 8f4f 	dsb	sy
 800653a:	f3bf 8f6f 	isb	sy
 800653e:	e780      	b.n	8006442 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006540:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006542:	f000 f986 	bl	8006852 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006546:	f000 fcad 	bl	8006ea4 <xTaskResumeAll>
 800654a:	e77a      	b.n	8006442 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800654c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800654e:	f000 f980 	bl	8006852 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006552:	f000 fca7 	bl	8006ea4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006556:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006558:	f000 f9cd 	bl	80068f6 <prvIsQueueEmpty>
 800655c:	4603      	mov	r3, r0
 800655e:	2b00      	cmp	r3, #0
 8006560:	f43f af6f 	beq.w	8006442 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006564:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006566:	4618      	mov	r0, r3
 8006568:	3730      	adds	r7, #48	; 0x30
 800656a:	46bd      	mov	sp, r7
 800656c:	bd80      	pop	{r7, pc}
 800656e:	bf00      	nop
 8006570:	e000ed04 	.word	0xe000ed04

08006574 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b08e      	sub	sp, #56	; 0x38
 8006578:	af00      	add	r7, sp, #0
 800657a:	60f8      	str	r0, [r7, #12]
 800657c:	60b9      	str	r1, [r7, #8]
 800657e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006586:	2b00      	cmp	r3, #0
 8006588:	d10a      	bne.n	80065a0 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800658a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800658e:	f383 8811 	msr	BASEPRI, r3
 8006592:	f3bf 8f6f 	isb	sy
 8006596:	f3bf 8f4f 	dsb	sy
 800659a:	623b      	str	r3, [r7, #32]
}
 800659c:	bf00      	nop
 800659e:	e7fe      	b.n	800659e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d103      	bne.n	80065ae <xQueueReceiveFromISR+0x3a>
 80065a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d101      	bne.n	80065b2 <xQueueReceiveFromISR+0x3e>
 80065ae:	2301      	movs	r3, #1
 80065b0:	e000      	b.n	80065b4 <xQueueReceiveFromISR+0x40>
 80065b2:	2300      	movs	r3, #0
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d10a      	bne.n	80065ce <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80065b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065bc:	f383 8811 	msr	BASEPRI, r3
 80065c0:	f3bf 8f6f 	isb	sy
 80065c4:	f3bf 8f4f 	dsb	sy
 80065c8:	61fb      	str	r3, [r7, #28]
}
 80065ca:	bf00      	nop
 80065cc:	e7fe      	b.n	80065cc <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80065ce:	f002 f86b 	bl	80086a8 <vPortValidateInterruptPriority>
	__asm volatile
 80065d2:	f3ef 8211 	mrs	r2, BASEPRI
 80065d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065da:	f383 8811 	msr	BASEPRI, r3
 80065de:	f3bf 8f6f 	isb	sy
 80065e2:	f3bf 8f4f 	dsb	sy
 80065e6:	61ba      	str	r2, [r7, #24]
 80065e8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80065ea:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80065ec:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80065ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065f2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80065f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d02f      	beq.n	800665a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80065fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065fc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006600:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006604:	68b9      	ldr	r1, [r7, #8]
 8006606:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006608:	f000 f8fd 	bl	8006806 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800660c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800660e:	1e5a      	subs	r2, r3, #1
 8006610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006612:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006614:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006618:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800661c:	d112      	bne.n	8006644 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800661e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006620:	691b      	ldr	r3, [r3, #16]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d016      	beq.n	8006654 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006628:	3310      	adds	r3, #16
 800662a:	4618      	mov	r0, r3
 800662c:	f000 fe50 	bl	80072d0 <xTaskRemoveFromEventList>
 8006630:	4603      	mov	r3, r0
 8006632:	2b00      	cmp	r3, #0
 8006634:	d00e      	beq.n	8006654 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d00b      	beq.n	8006654 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2201      	movs	r2, #1
 8006640:	601a      	str	r2, [r3, #0]
 8006642:	e007      	b.n	8006654 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006644:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006648:	3301      	adds	r3, #1
 800664a:	b2db      	uxtb	r3, r3
 800664c:	b25a      	sxtb	r2, r3
 800664e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006650:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8006654:	2301      	movs	r3, #1
 8006656:	637b      	str	r3, [r7, #52]	; 0x34
 8006658:	e001      	b.n	800665e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800665a:	2300      	movs	r3, #0
 800665c:	637b      	str	r3, [r7, #52]	; 0x34
 800665e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006660:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006662:	693b      	ldr	r3, [r7, #16]
 8006664:	f383 8811 	msr	BASEPRI, r3
}
 8006668:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800666a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800666c:	4618      	mov	r0, r3
 800666e:	3738      	adds	r7, #56	; 0x38
 8006670:	46bd      	mov	sp, r7
 8006672:	bd80      	pop	{r7, pc}

08006674 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8006674:	b580      	push	{r7, lr}
 8006676:	b084      	sub	sp, #16
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d10a      	bne.n	8006698 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 8006682:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006686:	f383 8811 	msr	BASEPRI, r3
 800668a:	f3bf 8f6f 	isb	sy
 800668e:	f3bf 8f4f 	dsb	sy
 8006692:	60bb      	str	r3, [r7, #8]
}
 8006694:	bf00      	nop
 8006696:	e7fe      	b.n	8006696 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8006698:	f001 ff24 	bl	80084e4 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066a0:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 80066a2:	f001 ff4f 	bl	8008544 <vPortExitCritical>

	return uxReturn;
 80066a6:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80066a8:	4618      	mov	r0, r3
 80066aa:	3710      	adds	r7, #16
 80066ac:	46bd      	mov	sp, r7
 80066ae:	bd80      	pop	{r7, pc}

080066b0 <uxQueueSpacesAvailable>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b086      	sub	sp, #24
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 80066bc:	697b      	ldr	r3, [r7, #20]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d10a      	bne.n	80066d8 <uxQueueSpacesAvailable+0x28>
	__asm volatile
 80066c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066c6:	f383 8811 	msr	BASEPRI, r3
 80066ca:	f3bf 8f6f 	isb	sy
 80066ce:	f3bf 8f4f 	dsb	sy
 80066d2:	60fb      	str	r3, [r7, #12]
}
 80066d4:	bf00      	nop
 80066d6:	e7fe      	b.n	80066d6 <uxQueueSpacesAvailable+0x26>

	taskENTER_CRITICAL();
 80066d8:	f001 ff04 	bl	80084e4 <vPortEnterCritical>
	{
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
 80066dc:	697b      	ldr	r3, [r7, #20]
 80066de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80066e0:	697b      	ldr	r3, [r7, #20]
 80066e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066e4:	1ad3      	subs	r3, r2, r3
 80066e6:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 80066e8:	f001 ff2c 	bl	8008544 <vPortExitCritical>

	return uxReturn;
 80066ec:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80066ee:	4618      	mov	r0, r3
 80066f0:	3718      	adds	r7, #24
 80066f2:	46bd      	mov	sp, r7
 80066f4:	bd80      	pop	{r7, pc}

080066f6 <uxQueueMessagesWaitingFromISR>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 80066f6:	b480      	push	{r7}
 80066f8:	b087      	sub	sp, #28
 80066fa:	af00      	add	r7, sp, #0
 80066fc:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8006702:	697b      	ldr	r3, [r7, #20]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d10a      	bne.n	800671e <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 8006708:	f04f 0350 	mov.w	r3, #80	; 0x50
 800670c:	f383 8811 	msr	BASEPRI, r3
 8006710:	f3bf 8f6f 	isb	sy
 8006714:	f3bf 8f4f 	dsb	sy
 8006718:	60fb      	str	r3, [r7, #12]
}
 800671a:	bf00      	nop
 800671c:	e7fe      	b.n	800671c <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 800671e:	697b      	ldr	r3, [r7, #20]
 8006720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006722:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8006724:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8006726:	4618      	mov	r0, r3
 8006728:	371c      	adds	r7, #28
 800672a:	46bd      	mov	sp, r7
 800672c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006730:	4770      	bx	lr

08006732 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006732:	b580      	push	{r7, lr}
 8006734:	b086      	sub	sp, #24
 8006736:	af00      	add	r7, sp, #0
 8006738:	60f8      	str	r0, [r7, #12]
 800673a:	60b9      	str	r1, [r7, #8]
 800673c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800673e:	2300      	movs	r3, #0
 8006740:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006746:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800674c:	2b00      	cmp	r3, #0
 800674e:	d10d      	bne.n	800676c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d14d      	bne.n	80067f4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	689b      	ldr	r3, [r3, #8]
 800675c:	4618      	mov	r0, r3
 800675e:	f000 ff93 	bl	8007688 <xTaskPriorityDisinherit>
 8006762:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	2200      	movs	r2, #0
 8006768:	609a      	str	r2, [r3, #8]
 800676a:	e043      	b.n	80067f4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d119      	bne.n	80067a6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	6858      	ldr	r0, [r3, #4]
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800677a:	461a      	mov	r2, r3
 800677c:	68b9      	ldr	r1, [r7, #8]
 800677e:	f002 f9eb 	bl	8008b58 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	685a      	ldr	r2, [r3, #4]
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800678a:	441a      	add	r2, r3
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	685a      	ldr	r2, [r3, #4]
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	689b      	ldr	r3, [r3, #8]
 8006798:	429a      	cmp	r2, r3
 800679a:	d32b      	bcc.n	80067f4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681a      	ldr	r2, [r3, #0]
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	605a      	str	r2, [r3, #4]
 80067a4:	e026      	b.n	80067f4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	68d8      	ldr	r0, [r3, #12]
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067ae:	461a      	mov	r2, r3
 80067b0:	68b9      	ldr	r1, [r7, #8]
 80067b2:	f002 f9d1 	bl	8008b58 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	68da      	ldr	r2, [r3, #12]
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067be:	425b      	negs	r3, r3
 80067c0:	441a      	add	r2, r3
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	68da      	ldr	r2, [r3, #12]
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	429a      	cmp	r2, r3
 80067d0:	d207      	bcs.n	80067e2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	689a      	ldr	r2, [r3, #8]
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067da:	425b      	negs	r3, r3
 80067dc:	441a      	add	r2, r3
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2b02      	cmp	r3, #2
 80067e6:	d105      	bne.n	80067f4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80067e8:	693b      	ldr	r3, [r7, #16]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d002      	beq.n	80067f4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80067ee:	693b      	ldr	r3, [r7, #16]
 80067f0:	3b01      	subs	r3, #1
 80067f2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80067f4:	693b      	ldr	r3, [r7, #16]
 80067f6:	1c5a      	adds	r2, r3, #1
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80067fc:	697b      	ldr	r3, [r7, #20]
}
 80067fe:	4618      	mov	r0, r3
 8006800:	3718      	adds	r7, #24
 8006802:	46bd      	mov	sp, r7
 8006804:	bd80      	pop	{r7, pc}

08006806 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006806:	b580      	push	{r7, lr}
 8006808:	b082      	sub	sp, #8
 800680a:	af00      	add	r7, sp, #0
 800680c:	6078      	str	r0, [r7, #4]
 800680e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006814:	2b00      	cmp	r3, #0
 8006816:	d018      	beq.n	800684a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	68da      	ldr	r2, [r3, #12]
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006820:	441a      	add	r2, r3
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	68da      	ldr	r2, [r3, #12]
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	689b      	ldr	r3, [r3, #8]
 800682e:	429a      	cmp	r2, r3
 8006830:	d303      	bcc.n	800683a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681a      	ldr	r2, [r3, #0]
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	68d9      	ldr	r1, [r3, #12]
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006842:	461a      	mov	r2, r3
 8006844:	6838      	ldr	r0, [r7, #0]
 8006846:	f002 f987 	bl	8008b58 <memcpy>
	}
}
 800684a:	bf00      	nop
 800684c:	3708      	adds	r7, #8
 800684e:	46bd      	mov	sp, r7
 8006850:	bd80      	pop	{r7, pc}

08006852 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006852:	b580      	push	{r7, lr}
 8006854:	b084      	sub	sp, #16
 8006856:	af00      	add	r7, sp, #0
 8006858:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800685a:	f001 fe43 	bl	80084e4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006864:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006866:	e011      	b.n	800688c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800686c:	2b00      	cmp	r3, #0
 800686e:	d012      	beq.n	8006896 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	3324      	adds	r3, #36	; 0x24
 8006874:	4618      	mov	r0, r3
 8006876:	f000 fd2b 	bl	80072d0 <xTaskRemoveFromEventList>
 800687a:	4603      	mov	r3, r0
 800687c:	2b00      	cmp	r3, #0
 800687e:	d001      	beq.n	8006884 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006880:	f000 fe02 	bl	8007488 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006884:	7bfb      	ldrb	r3, [r7, #15]
 8006886:	3b01      	subs	r3, #1
 8006888:	b2db      	uxtb	r3, r3
 800688a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800688c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006890:	2b00      	cmp	r3, #0
 8006892:	dce9      	bgt.n	8006868 <prvUnlockQueue+0x16>
 8006894:	e000      	b.n	8006898 <prvUnlockQueue+0x46>
					break;
 8006896:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	22ff      	movs	r2, #255	; 0xff
 800689c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80068a0:	f001 fe50 	bl	8008544 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80068a4:	f001 fe1e 	bl	80084e4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80068ae:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80068b0:	e011      	b.n	80068d6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	691b      	ldr	r3, [r3, #16]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d012      	beq.n	80068e0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	3310      	adds	r3, #16
 80068be:	4618      	mov	r0, r3
 80068c0:	f000 fd06 	bl	80072d0 <xTaskRemoveFromEventList>
 80068c4:	4603      	mov	r3, r0
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d001      	beq.n	80068ce <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80068ca:	f000 fddd 	bl	8007488 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80068ce:	7bbb      	ldrb	r3, [r7, #14]
 80068d0:	3b01      	subs	r3, #1
 80068d2:	b2db      	uxtb	r3, r3
 80068d4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80068d6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	dce9      	bgt.n	80068b2 <prvUnlockQueue+0x60>
 80068de:	e000      	b.n	80068e2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80068e0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	22ff      	movs	r2, #255	; 0xff
 80068e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80068ea:	f001 fe2b 	bl	8008544 <vPortExitCritical>
}
 80068ee:	bf00      	nop
 80068f0:	3710      	adds	r7, #16
 80068f2:	46bd      	mov	sp, r7
 80068f4:	bd80      	pop	{r7, pc}

080068f6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80068f6:	b580      	push	{r7, lr}
 80068f8:	b084      	sub	sp, #16
 80068fa:	af00      	add	r7, sp, #0
 80068fc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80068fe:	f001 fdf1 	bl	80084e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006906:	2b00      	cmp	r3, #0
 8006908:	d102      	bne.n	8006910 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800690a:	2301      	movs	r3, #1
 800690c:	60fb      	str	r3, [r7, #12]
 800690e:	e001      	b.n	8006914 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006910:	2300      	movs	r3, #0
 8006912:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006914:	f001 fe16 	bl	8008544 <vPortExitCritical>

	return xReturn;
 8006918:	68fb      	ldr	r3, [r7, #12]
}
 800691a:	4618      	mov	r0, r3
 800691c:	3710      	adds	r7, #16
 800691e:	46bd      	mov	sp, r7
 8006920:	bd80      	pop	{r7, pc}

08006922 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006922:	b580      	push	{r7, lr}
 8006924:	b084      	sub	sp, #16
 8006926:	af00      	add	r7, sp, #0
 8006928:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800692a:	f001 fddb 	bl	80084e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006936:	429a      	cmp	r2, r3
 8006938:	d102      	bne.n	8006940 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800693a:	2301      	movs	r3, #1
 800693c:	60fb      	str	r3, [r7, #12]
 800693e:	e001      	b.n	8006944 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006940:	2300      	movs	r3, #0
 8006942:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006944:	f001 fdfe 	bl	8008544 <vPortExitCritical>

	return xReturn;
 8006948:	68fb      	ldr	r3, [r7, #12]
}
 800694a:	4618      	mov	r0, r3
 800694c:	3710      	adds	r7, #16
 800694e:	46bd      	mov	sp, r7
 8006950:	bd80      	pop	{r7, pc}
	...

08006954 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006954:	b480      	push	{r7}
 8006956:	b085      	sub	sp, #20
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
 800695c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800695e:	2300      	movs	r3, #0
 8006960:	60fb      	str	r3, [r7, #12]
 8006962:	e014      	b.n	800698e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006964:	4a0f      	ldr	r2, [pc, #60]	; (80069a4 <vQueueAddToRegistry+0x50>)
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d10b      	bne.n	8006988 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006970:	490c      	ldr	r1, [pc, #48]	; (80069a4 <vQueueAddToRegistry+0x50>)
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	683a      	ldr	r2, [r7, #0]
 8006976:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800697a:	4a0a      	ldr	r2, [pc, #40]	; (80069a4 <vQueueAddToRegistry+0x50>)
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	00db      	lsls	r3, r3, #3
 8006980:	4413      	add	r3, r2
 8006982:	687a      	ldr	r2, [r7, #4]
 8006984:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006986:	e006      	b.n	8006996 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	3301      	adds	r3, #1
 800698c:	60fb      	str	r3, [r7, #12]
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	2b07      	cmp	r3, #7
 8006992:	d9e7      	bls.n	8006964 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006994:	bf00      	nop
 8006996:	bf00      	nop
 8006998:	3714      	adds	r7, #20
 800699a:	46bd      	mov	sp, r7
 800699c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a0:	4770      	bx	lr
 80069a2:	bf00      	nop
 80069a4:	200009e4 	.word	0x200009e4

080069a8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b086      	sub	sp, #24
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	60f8      	str	r0, [r7, #12]
 80069b0:	60b9      	str	r1, [r7, #8]
 80069b2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80069b8:	f001 fd94 	bl	80084e4 <vPortEnterCritical>
 80069bc:	697b      	ldr	r3, [r7, #20]
 80069be:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80069c2:	b25b      	sxtb	r3, r3
 80069c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80069c8:	d103      	bne.n	80069d2 <vQueueWaitForMessageRestricted+0x2a>
 80069ca:	697b      	ldr	r3, [r7, #20]
 80069cc:	2200      	movs	r2, #0
 80069ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80069d2:	697b      	ldr	r3, [r7, #20]
 80069d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80069d8:	b25b      	sxtb	r3, r3
 80069da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80069de:	d103      	bne.n	80069e8 <vQueueWaitForMessageRestricted+0x40>
 80069e0:	697b      	ldr	r3, [r7, #20]
 80069e2:	2200      	movs	r2, #0
 80069e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80069e8:	f001 fdac 	bl	8008544 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80069ec:	697b      	ldr	r3, [r7, #20]
 80069ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d106      	bne.n	8006a02 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80069f4:	697b      	ldr	r3, [r7, #20]
 80069f6:	3324      	adds	r3, #36	; 0x24
 80069f8:	687a      	ldr	r2, [r7, #4]
 80069fa:	68b9      	ldr	r1, [r7, #8]
 80069fc:	4618      	mov	r0, r3
 80069fe:	f000 fc3b 	bl	8007278 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006a02:	6978      	ldr	r0, [r7, #20]
 8006a04:	f7ff ff25 	bl	8006852 <prvUnlockQueue>
	}
 8006a08:	bf00      	nop
 8006a0a:	3718      	adds	r7, #24
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	bd80      	pop	{r7, pc}

08006a10 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b08e      	sub	sp, #56	; 0x38
 8006a14:	af04      	add	r7, sp, #16
 8006a16:	60f8      	str	r0, [r7, #12]
 8006a18:	60b9      	str	r1, [r7, #8]
 8006a1a:	607a      	str	r2, [r7, #4]
 8006a1c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006a1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d10a      	bne.n	8006a3a <xTaskCreateStatic+0x2a>
	__asm volatile
 8006a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a28:	f383 8811 	msr	BASEPRI, r3
 8006a2c:	f3bf 8f6f 	isb	sy
 8006a30:	f3bf 8f4f 	dsb	sy
 8006a34:	623b      	str	r3, [r7, #32]
}
 8006a36:	bf00      	nop
 8006a38:	e7fe      	b.n	8006a38 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006a3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d10a      	bne.n	8006a56 <xTaskCreateStatic+0x46>
	__asm volatile
 8006a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a44:	f383 8811 	msr	BASEPRI, r3
 8006a48:	f3bf 8f6f 	isb	sy
 8006a4c:	f3bf 8f4f 	dsb	sy
 8006a50:	61fb      	str	r3, [r7, #28]
}
 8006a52:	bf00      	nop
 8006a54:	e7fe      	b.n	8006a54 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006a56:	235c      	movs	r3, #92	; 0x5c
 8006a58:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006a5a:	693b      	ldr	r3, [r7, #16]
 8006a5c:	2b5c      	cmp	r3, #92	; 0x5c
 8006a5e:	d00a      	beq.n	8006a76 <xTaskCreateStatic+0x66>
	__asm volatile
 8006a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a64:	f383 8811 	msr	BASEPRI, r3
 8006a68:	f3bf 8f6f 	isb	sy
 8006a6c:	f3bf 8f4f 	dsb	sy
 8006a70:	61bb      	str	r3, [r7, #24]
}
 8006a72:	bf00      	nop
 8006a74:	e7fe      	b.n	8006a74 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006a76:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006a78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d01e      	beq.n	8006abc <xTaskCreateStatic+0xac>
 8006a7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d01b      	beq.n	8006abc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006a84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a86:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a8a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006a8c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a90:	2202      	movs	r2, #2
 8006a92:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006a96:	2300      	movs	r3, #0
 8006a98:	9303      	str	r3, [sp, #12]
 8006a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a9c:	9302      	str	r3, [sp, #8]
 8006a9e:	f107 0314 	add.w	r3, r7, #20
 8006aa2:	9301      	str	r3, [sp, #4]
 8006aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aa6:	9300      	str	r3, [sp, #0]
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	687a      	ldr	r2, [r7, #4]
 8006aac:	68b9      	ldr	r1, [r7, #8]
 8006aae:	68f8      	ldr	r0, [r7, #12]
 8006ab0:	f000 f850 	bl	8006b54 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006ab4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006ab6:	f000 f8dd 	bl	8006c74 <prvAddNewTaskToReadyList>
 8006aba:	e001      	b.n	8006ac0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006abc:	2300      	movs	r3, #0
 8006abe:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006ac0:	697b      	ldr	r3, [r7, #20]
	}
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	3728      	adds	r7, #40	; 0x28
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	bd80      	pop	{r7, pc}

08006aca <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006aca:	b580      	push	{r7, lr}
 8006acc:	b08c      	sub	sp, #48	; 0x30
 8006ace:	af04      	add	r7, sp, #16
 8006ad0:	60f8      	str	r0, [r7, #12]
 8006ad2:	60b9      	str	r1, [r7, #8]
 8006ad4:	603b      	str	r3, [r7, #0]
 8006ad6:	4613      	mov	r3, r2
 8006ad8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006ada:	88fb      	ldrh	r3, [r7, #6]
 8006adc:	009b      	lsls	r3, r3, #2
 8006ade:	4618      	mov	r0, r3
 8006ae0:	f001 fe22 	bl	8008728 <pvPortMalloc>
 8006ae4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006ae6:	697b      	ldr	r3, [r7, #20]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d00e      	beq.n	8006b0a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006aec:	205c      	movs	r0, #92	; 0x5c
 8006aee:	f001 fe1b 	bl	8008728 <pvPortMalloc>
 8006af2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006af4:	69fb      	ldr	r3, [r7, #28]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d003      	beq.n	8006b02 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006afa:	69fb      	ldr	r3, [r7, #28]
 8006afc:	697a      	ldr	r2, [r7, #20]
 8006afe:	631a      	str	r2, [r3, #48]	; 0x30
 8006b00:	e005      	b.n	8006b0e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006b02:	6978      	ldr	r0, [r7, #20]
 8006b04:	f001 fedc 	bl	80088c0 <vPortFree>
 8006b08:	e001      	b.n	8006b0e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006b0e:	69fb      	ldr	r3, [r7, #28]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d017      	beq.n	8006b44 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006b14:	69fb      	ldr	r3, [r7, #28]
 8006b16:	2200      	movs	r2, #0
 8006b18:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006b1c:	88fa      	ldrh	r2, [r7, #6]
 8006b1e:	2300      	movs	r3, #0
 8006b20:	9303      	str	r3, [sp, #12]
 8006b22:	69fb      	ldr	r3, [r7, #28]
 8006b24:	9302      	str	r3, [sp, #8]
 8006b26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b28:	9301      	str	r3, [sp, #4]
 8006b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b2c:	9300      	str	r3, [sp, #0]
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	68b9      	ldr	r1, [r7, #8]
 8006b32:	68f8      	ldr	r0, [r7, #12]
 8006b34:	f000 f80e 	bl	8006b54 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006b38:	69f8      	ldr	r0, [r7, #28]
 8006b3a:	f000 f89b 	bl	8006c74 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006b3e:	2301      	movs	r3, #1
 8006b40:	61bb      	str	r3, [r7, #24]
 8006b42:	e002      	b.n	8006b4a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006b44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006b48:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006b4a:	69bb      	ldr	r3, [r7, #24]
	}
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	3720      	adds	r7, #32
 8006b50:	46bd      	mov	sp, r7
 8006b52:	bd80      	pop	{r7, pc}

08006b54 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b088      	sub	sp, #32
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	60f8      	str	r0, [r7, #12]
 8006b5c:	60b9      	str	r1, [r7, #8]
 8006b5e:	607a      	str	r2, [r7, #4]
 8006b60:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b64:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	009b      	lsls	r3, r3, #2
 8006b6a:	461a      	mov	r2, r3
 8006b6c:	21a5      	movs	r1, #165	; 0xa5
 8006b6e:	f002 f801 	bl	8008b74 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006b7c:	3b01      	subs	r3, #1
 8006b7e:	009b      	lsls	r3, r3, #2
 8006b80:	4413      	add	r3, r2
 8006b82:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006b84:	69bb      	ldr	r3, [r7, #24]
 8006b86:	f023 0307 	bic.w	r3, r3, #7
 8006b8a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006b8c:	69bb      	ldr	r3, [r7, #24]
 8006b8e:	f003 0307 	and.w	r3, r3, #7
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d00a      	beq.n	8006bac <prvInitialiseNewTask+0x58>
	__asm volatile
 8006b96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b9a:	f383 8811 	msr	BASEPRI, r3
 8006b9e:	f3bf 8f6f 	isb	sy
 8006ba2:	f3bf 8f4f 	dsb	sy
 8006ba6:	617b      	str	r3, [r7, #20]
}
 8006ba8:	bf00      	nop
 8006baa:	e7fe      	b.n	8006baa <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006bac:	68bb      	ldr	r3, [r7, #8]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d01f      	beq.n	8006bf2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	61fb      	str	r3, [r7, #28]
 8006bb6:	e012      	b.n	8006bde <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006bb8:	68ba      	ldr	r2, [r7, #8]
 8006bba:	69fb      	ldr	r3, [r7, #28]
 8006bbc:	4413      	add	r3, r2
 8006bbe:	7819      	ldrb	r1, [r3, #0]
 8006bc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006bc2:	69fb      	ldr	r3, [r7, #28]
 8006bc4:	4413      	add	r3, r2
 8006bc6:	3334      	adds	r3, #52	; 0x34
 8006bc8:	460a      	mov	r2, r1
 8006bca:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006bcc:	68ba      	ldr	r2, [r7, #8]
 8006bce:	69fb      	ldr	r3, [r7, #28]
 8006bd0:	4413      	add	r3, r2
 8006bd2:	781b      	ldrb	r3, [r3, #0]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d006      	beq.n	8006be6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006bd8:	69fb      	ldr	r3, [r7, #28]
 8006bda:	3301      	adds	r3, #1
 8006bdc:	61fb      	str	r3, [r7, #28]
 8006bde:	69fb      	ldr	r3, [r7, #28]
 8006be0:	2b0f      	cmp	r3, #15
 8006be2:	d9e9      	bls.n	8006bb8 <prvInitialiseNewTask+0x64>
 8006be4:	e000      	b.n	8006be8 <prvInitialiseNewTask+0x94>
			{
				break;
 8006be6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bea:	2200      	movs	r2, #0
 8006bec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006bf0:	e003      	b.n	8006bfa <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bfc:	2b37      	cmp	r3, #55	; 0x37
 8006bfe:	d901      	bls.n	8006c04 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006c00:	2337      	movs	r3, #55	; 0x37
 8006c02:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c08:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c0e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c12:	2200      	movs	r2, #0
 8006c14:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c18:	3304      	adds	r3, #4
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	f7ff f85e 	bl	8005cdc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c22:	3318      	adds	r3, #24
 8006c24:	4618      	mov	r0, r3
 8006c26:	f7ff f859 	bl	8005cdc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c2e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c32:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c38:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c3e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c42:	2200      	movs	r2, #0
 8006c44:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c48:	2200      	movs	r2, #0
 8006c4a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006c4e:	683a      	ldr	r2, [r7, #0]
 8006c50:	68f9      	ldr	r1, [r7, #12]
 8006c52:	69b8      	ldr	r0, [r7, #24]
 8006c54:	f001 fb16 	bl	8008284 <pxPortInitialiseStack>
 8006c58:	4602      	mov	r2, r0
 8006c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c5c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d002      	beq.n	8006c6a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c68:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006c6a:	bf00      	nop
 8006c6c:	3720      	adds	r7, #32
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	bd80      	pop	{r7, pc}
	...

08006c74 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b082      	sub	sp, #8
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006c7c:	f001 fc32 	bl	80084e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006c80:	4b2d      	ldr	r3, [pc, #180]	; (8006d38 <prvAddNewTaskToReadyList+0xc4>)
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	3301      	adds	r3, #1
 8006c86:	4a2c      	ldr	r2, [pc, #176]	; (8006d38 <prvAddNewTaskToReadyList+0xc4>)
 8006c88:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006c8a:	4b2c      	ldr	r3, [pc, #176]	; (8006d3c <prvAddNewTaskToReadyList+0xc8>)
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d109      	bne.n	8006ca6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006c92:	4a2a      	ldr	r2, [pc, #168]	; (8006d3c <prvAddNewTaskToReadyList+0xc8>)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006c98:	4b27      	ldr	r3, [pc, #156]	; (8006d38 <prvAddNewTaskToReadyList+0xc4>)
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	2b01      	cmp	r3, #1
 8006c9e:	d110      	bne.n	8006cc2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006ca0:	f000 fc16 	bl	80074d0 <prvInitialiseTaskLists>
 8006ca4:	e00d      	b.n	8006cc2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006ca6:	4b26      	ldr	r3, [pc, #152]	; (8006d40 <prvAddNewTaskToReadyList+0xcc>)
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d109      	bne.n	8006cc2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006cae:	4b23      	ldr	r3, [pc, #140]	; (8006d3c <prvAddNewTaskToReadyList+0xc8>)
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cb8:	429a      	cmp	r2, r3
 8006cba:	d802      	bhi.n	8006cc2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006cbc:	4a1f      	ldr	r2, [pc, #124]	; (8006d3c <prvAddNewTaskToReadyList+0xc8>)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006cc2:	4b20      	ldr	r3, [pc, #128]	; (8006d44 <prvAddNewTaskToReadyList+0xd0>)
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	3301      	adds	r3, #1
 8006cc8:	4a1e      	ldr	r2, [pc, #120]	; (8006d44 <prvAddNewTaskToReadyList+0xd0>)
 8006cca:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006ccc:	4b1d      	ldr	r3, [pc, #116]	; (8006d44 <prvAddNewTaskToReadyList+0xd0>)
 8006cce:	681a      	ldr	r2, [r3, #0]
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cd8:	4b1b      	ldr	r3, [pc, #108]	; (8006d48 <prvAddNewTaskToReadyList+0xd4>)
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	429a      	cmp	r2, r3
 8006cde:	d903      	bls.n	8006ce8 <prvAddNewTaskToReadyList+0x74>
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ce4:	4a18      	ldr	r2, [pc, #96]	; (8006d48 <prvAddNewTaskToReadyList+0xd4>)
 8006ce6:	6013      	str	r3, [r2, #0]
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cec:	4613      	mov	r3, r2
 8006cee:	009b      	lsls	r3, r3, #2
 8006cf0:	4413      	add	r3, r2
 8006cf2:	009b      	lsls	r3, r3, #2
 8006cf4:	4a15      	ldr	r2, [pc, #84]	; (8006d4c <prvAddNewTaskToReadyList+0xd8>)
 8006cf6:	441a      	add	r2, r3
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	3304      	adds	r3, #4
 8006cfc:	4619      	mov	r1, r3
 8006cfe:	4610      	mov	r0, r2
 8006d00:	f7fe fff9 	bl	8005cf6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006d04:	f001 fc1e 	bl	8008544 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006d08:	4b0d      	ldr	r3, [pc, #52]	; (8006d40 <prvAddNewTaskToReadyList+0xcc>)
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d00e      	beq.n	8006d2e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006d10:	4b0a      	ldr	r3, [pc, #40]	; (8006d3c <prvAddNewTaskToReadyList+0xc8>)
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d1a:	429a      	cmp	r2, r3
 8006d1c:	d207      	bcs.n	8006d2e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006d1e:	4b0c      	ldr	r3, [pc, #48]	; (8006d50 <prvAddNewTaskToReadyList+0xdc>)
 8006d20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d24:	601a      	str	r2, [r3, #0]
 8006d26:	f3bf 8f4f 	dsb	sy
 8006d2a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006d2e:	bf00      	nop
 8006d30:	3708      	adds	r7, #8
 8006d32:	46bd      	mov	sp, r7
 8006d34:	bd80      	pop	{r7, pc}
 8006d36:	bf00      	nop
 8006d38:	20000ef8 	.word	0x20000ef8
 8006d3c:	20000a24 	.word	0x20000a24
 8006d40:	20000f04 	.word	0x20000f04
 8006d44:	20000f14 	.word	0x20000f14
 8006d48:	20000f00 	.word	0x20000f00
 8006d4c:	20000a28 	.word	0x20000a28
 8006d50:	e000ed04 	.word	0xe000ed04

08006d54 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b084      	sub	sp, #16
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d017      	beq.n	8006d96 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006d66:	4b13      	ldr	r3, [pc, #76]	; (8006db4 <vTaskDelay+0x60>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d00a      	beq.n	8006d84 <vTaskDelay+0x30>
	__asm volatile
 8006d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d72:	f383 8811 	msr	BASEPRI, r3
 8006d76:	f3bf 8f6f 	isb	sy
 8006d7a:	f3bf 8f4f 	dsb	sy
 8006d7e:	60bb      	str	r3, [r7, #8]
}
 8006d80:	bf00      	nop
 8006d82:	e7fe      	b.n	8006d82 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006d84:	f000 f880 	bl	8006e88 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006d88:	2100      	movs	r1, #0
 8006d8a:	6878      	ldr	r0, [r7, #4]
 8006d8c:	f000 fed8 	bl	8007b40 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006d90:	f000 f888 	bl	8006ea4 <xTaskResumeAll>
 8006d94:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d107      	bne.n	8006dac <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006d9c:	4b06      	ldr	r3, [pc, #24]	; (8006db8 <vTaskDelay+0x64>)
 8006d9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006da2:	601a      	str	r2, [r3, #0]
 8006da4:	f3bf 8f4f 	dsb	sy
 8006da8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006dac:	bf00      	nop
 8006dae:	3710      	adds	r7, #16
 8006db0:	46bd      	mov	sp, r7
 8006db2:	bd80      	pop	{r7, pc}
 8006db4:	20000f20 	.word	0x20000f20
 8006db8:	e000ed04 	.word	0xe000ed04

08006dbc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b08a      	sub	sp, #40	; 0x28
 8006dc0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006dca:	463a      	mov	r2, r7
 8006dcc:	1d39      	adds	r1, r7, #4
 8006dce:	f107 0308 	add.w	r3, r7, #8
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	f7fe ff2e 	bl	8005c34 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006dd8:	6839      	ldr	r1, [r7, #0]
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	68ba      	ldr	r2, [r7, #8]
 8006dde:	9202      	str	r2, [sp, #8]
 8006de0:	9301      	str	r3, [sp, #4]
 8006de2:	2300      	movs	r3, #0
 8006de4:	9300      	str	r3, [sp, #0]
 8006de6:	2300      	movs	r3, #0
 8006de8:	460a      	mov	r2, r1
 8006dea:	4921      	ldr	r1, [pc, #132]	; (8006e70 <vTaskStartScheduler+0xb4>)
 8006dec:	4821      	ldr	r0, [pc, #132]	; (8006e74 <vTaskStartScheduler+0xb8>)
 8006dee:	f7ff fe0f 	bl	8006a10 <xTaskCreateStatic>
 8006df2:	4603      	mov	r3, r0
 8006df4:	4a20      	ldr	r2, [pc, #128]	; (8006e78 <vTaskStartScheduler+0xbc>)
 8006df6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006df8:	4b1f      	ldr	r3, [pc, #124]	; (8006e78 <vTaskStartScheduler+0xbc>)
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d002      	beq.n	8006e06 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006e00:	2301      	movs	r3, #1
 8006e02:	617b      	str	r3, [r7, #20]
 8006e04:	e001      	b.n	8006e0a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006e06:	2300      	movs	r3, #0
 8006e08:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006e0a:	697b      	ldr	r3, [r7, #20]
 8006e0c:	2b01      	cmp	r3, #1
 8006e0e:	d102      	bne.n	8006e16 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006e10:	f000 feea 	bl	8007be8 <xTimerCreateTimerTask>
 8006e14:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006e16:	697b      	ldr	r3, [r7, #20]
 8006e18:	2b01      	cmp	r3, #1
 8006e1a:	d116      	bne.n	8006e4a <vTaskStartScheduler+0x8e>
	__asm volatile
 8006e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e20:	f383 8811 	msr	BASEPRI, r3
 8006e24:	f3bf 8f6f 	isb	sy
 8006e28:	f3bf 8f4f 	dsb	sy
 8006e2c:	613b      	str	r3, [r7, #16]
}
 8006e2e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006e30:	4b12      	ldr	r3, [pc, #72]	; (8006e7c <vTaskStartScheduler+0xc0>)
 8006e32:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006e36:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006e38:	4b11      	ldr	r3, [pc, #68]	; (8006e80 <vTaskStartScheduler+0xc4>)
 8006e3a:	2201      	movs	r2, #1
 8006e3c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006e3e:	4b11      	ldr	r3, [pc, #68]	; (8006e84 <vTaskStartScheduler+0xc8>)
 8006e40:	2200      	movs	r2, #0
 8006e42:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006e44:	f001 faac 	bl	80083a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006e48:	e00e      	b.n	8006e68 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006e4a:	697b      	ldr	r3, [r7, #20]
 8006e4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e50:	d10a      	bne.n	8006e68 <vTaskStartScheduler+0xac>
	__asm volatile
 8006e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e56:	f383 8811 	msr	BASEPRI, r3
 8006e5a:	f3bf 8f6f 	isb	sy
 8006e5e:	f3bf 8f4f 	dsb	sy
 8006e62:	60fb      	str	r3, [r7, #12]
}
 8006e64:	bf00      	nop
 8006e66:	e7fe      	b.n	8006e66 <vTaskStartScheduler+0xaa>
}
 8006e68:	bf00      	nop
 8006e6a:	3718      	adds	r7, #24
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	bd80      	pop	{r7, pc}
 8006e70:	08009c58 	.word	0x08009c58
 8006e74:	080074a1 	.word	0x080074a1
 8006e78:	20000f1c 	.word	0x20000f1c
 8006e7c:	20000f18 	.word	0x20000f18
 8006e80:	20000f04 	.word	0x20000f04
 8006e84:	20000efc 	.word	0x20000efc

08006e88 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006e88:	b480      	push	{r7}
 8006e8a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006e8c:	4b04      	ldr	r3, [pc, #16]	; (8006ea0 <vTaskSuspendAll+0x18>)
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	3301      	adds	r3, #1
 8006e92:	4a03      	ldr	r2, [pc, #12]	; (8006ea0 <vTaskSuspendAll+0x18>)
 8006e94:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006e96:	bf00      	nop
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9e:	4770      	bx	lr
 8006ea0:	20000f20 	.word	0x20000f20

08006ea4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b084      	sub	sp, #16
 8006ea8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006eaa:	2300      	movs	r3, #0
 8006eac:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006eae:	2300      	movs	r3, #0
 8006eb0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006eb2:	4b42      	ldr	r3, [pc, #264]	; (8006fbc <xTaskResumeAll+0x118>)
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d10a      	bne.n	8006ed0 <xTaskResumeAll+0x2c>
	__asm volatile
 8006eba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ebe:	f383 8811 	msr	BASEPRI, r3
 8006ec2:	f3bf 8f6f 	isb	sy
 8006ec6:	f3bf 8f4f 	dsb	sy
 8006eca:	603b      	str	r3, [r7, #0]
}
 8006ecc:	bf00      	nop
 8006ece:	e7fe      	b.n	8006ece <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006ed0:	f001 fb08 	bl	80084e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006ed4:	4b39      	ldr	r3, [pc, #228]	; (8006fbc <xTaskResumeAll+0x118>)
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	3b01      	subs	r3, #1
 8006eda:	4a38      	ldr	r2, [pc, #224]	; (8006fbc <xTaskResumeAll+0x118>)
 8006edc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006ede:	4b37      	ldr	r3, [pc, #220]	; (8006fbc <xTaskResumeAll+0x118>)
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d162      	bne.n	8006fac <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006ee6:	4b36      	ldr	r3, [pc, #216]	; (8006fc0 <xTaskResumeAll+0x11c>)
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d05e      	beq.n	8006fac <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006eee:	e02f      	b.n	8006f50 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ef0:	4b34      	ldr	r3, [pc, #208]	; (8006fc4 <xTaskResumeAll+0x120>)
 8006ef2:	68db      	ldr	r3, [r3, #12]
 8006ef4:	68db      	ldr	r3, [r3, #12]
 8006ef6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	3318      	adds	r3, #24
 8006efc:	4618      	mov	r0, r3
 8006efe:	f7fe ff57 	bl	8005db0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	3304      	adds	r3, #4
 8006f06:	4618      	mov	r0, r3
 8006f08:	f7fe ff52 	bl	8005db0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f10:	4b2d      	ldr	r3, [pc, #180]	; (8006fc8 <xTaskResumeAll+0x124>)
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	429a      	cmp	r2, r3
 8006f16:	d903      	bls.n	8006f20 <xTaskResumeAll+0x7c>
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f1c:	4a2a      	ldr	r2, [pc, #168]	; (8006fc8 <xTaskResumeAll+0x124>)
 8006f1e:	6013      	str	r3, [r2, #0]
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f24:	4613      	mov	r3, r2
 8006f26:	009b      	lsls	r3, r3, #2
 8006f28:	4413      	add	r3, r2
 8006f2a:	009b      	lsls	r3, r3, #2
 8006f2c:	4a27      	ldr	r2, [pc, #156]	; (8006fcc <xTaskResumeAll+0x128>)
 8006f2e:	441a      	add	r2, r3
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	3304      	adds	r3, #4
 8006f34:	4619      	mov	r1, r3
 8006f36:	4610      	mov	r0, r2
 8006f38:	f7fe fedd 	bl	8005cf6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f40:	4b23      	ldr	r3, [pc, #140]	; (8006fd0 <xTaskResumeAll+0x12c>)
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f46:	429a      	cmp	r2, r3
 8006f48:	d302      	bcc.n	8006f50 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006f4a:	4b22      	ldr	r3, [pc, #136]	; (8006fd4 <xTaskResumeAll+0x130>)
 8006f4c:	2201      	movs	r2, #1
 8006f4e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006f50:	4b1c      	ldr	r3, [pc, #112]	; (8006fc4 <xTaskResumeAll+0x120>)
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d1cb      	bne.n	8006ef0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d001      	beq.n	8006f62 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006f5e:	f000 fb55 	bl	800760c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006f62:	4b1d      	ldr	r3, [pc, #116]	; (8006fd8 <xTaskResumeAll+0x134>)
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d010      	beq.n	8006f90 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006f6e:	f000 f847 	bl	8007000 <xTaskIncrementTick>
 8006f72:	4603      	mov	r3, r0
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d002      	beq.n	8006f7e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006f78:	4b16      	ldr	r3, [pc, #88]	; (8006fd4 <xTaskResumeAll+0x130>)
 8006f7a:	2201      	movs	r2, #1
 8006f7c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	3b01      	subs	r3, #1
 8006f82:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d1f1      	bne.n	8006f6e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8006f8a:	4b13      	ldr	r3, [pc, #76]	; (8006fd8 <xTaskResumeAll+0x134>)
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006f90:	4b10      	ldr	r3, [pc, #64]	; (8006fd4 <xTaskResumeAll+0x130>)
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d009      	beq.n	8006fac <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006f98:	2301      	movs	r3, #1
 8006f9a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006f9c:	4b0f      	ldr	r3, [pc, #60]	; (8006fdc <xTaskResumeAll+0x138>)
 8006f9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006fa2:	601a      	str	r2, [r3, #0]
 8006fa4:	f3bf 8f4f 	dsb	sy
 8006fa8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006fac:	f001 faca 	bl	8008544 <vPortExitCritical>

	return xAlreadyYielded;
 8006fb0:	68bb      	ldr	r3, [r7, #8]
}
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	3710      	adds	r7, #16
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	bd80      	pop	{r7, pc}
 8006fba:	bf00      	nop
 8006fbc:	20000f20 	.word	0x20000f20
 8006fc0:	20000ef8 	.word	0x20000ef8
 8006fc4:	20000eb8 	.word	0x20000eb8
 8006fc8:	20000f00 	.word	0x20000f00
 8006fcc:	20000a28 	.word	0x20000a28
 8006fd0:	20000a24 	.word	0x20000a24
 8006fd4:	20000f0c 	.word	0x20000f0c
 8006fd8:	20000f08 	.word	0x20000f08
 8006fdc:	e000ed04 	.word	0xe000ed04

08006fe0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006fe0:	b480      	push	{r7}
 8006fe2:	b083      	sub	sp, #12
 8006fe4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006fe6:	4b05      	ldr	r3, [pc, #20]	; (8006ffc <xTaskGetTickCount+0x1c>)
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006fec:	687b      	ldr	r3, [r7, #4]
}
 8006fee:	4618      	mov	r0, r3
 8006ff0:	370c      	adds	r7, #12
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff8:	4770      	bx	lr
 8006ffa:	bf00      	nop
 8006ffc:	20000efc 	.word	0x20000efc

08007000 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b086      	sub	sp, #24
 8007004:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007006:	2300      	movs	r3, #0
 8007008:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800700a:	4b4f      	ldr	r3, [pc, #316]	; (8007148 <xTaskIncrementTick+0x148>)
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	2b00      	cmp	r3, #0
 8007010:	f040 808f 	bne.w	8007132 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007014:	4b4d      	ldr	r3, [pc, #308]	; (800714c <xTaskIncrementTick+0x14c>)
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	3301      	adds	r3, #1
 800701a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800701c:	4a4b      	ldr	r2, [pc, #300]	; (800714c <xTaskIncrementTick+0x14c>)
 800701e:	693b      	ldr	r3, [r7, #16]
 8007020:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007022:	693b      	ldr	r3, [r7, #16]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d120      	bne.n	800706a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007028:	4b49      	ldr	r3, [pc, #292]	; (8007150 <xTaskIncrementTick+0x150>)
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d00a      	beq.n	8007048 <xTaskIncrementTick+0x48>
	__asm volatile
 8007032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007036:	f383 8811 	msr	BASEPRI, r3
 800703a:	f3bf 8f6f 	isb	sy
 800703e:	f3bf 8f4f 	dsb	sy
 8007042:	603b      	str	r3, [r7, #0]
}
 8007044:	bf00      	nop
 8007046:	e7fe      	b.n	8007046 <xTaskIncrementTick+0x46>
 8007048:	4b41      	ldr	r3, [pc, #260]	; (8007150 <xTaskIncrementTick+0x150>)
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	60fb      	str	r3, [r7, #12]
 800704e:	4b41      	ldr	r3, [pc, #260]	; (8007154 <xTaskIncrementTick+0x154>)
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	4a3f      	ldr	r2, [pc, #252]	; (8007150 <xTaskIncrementTick+0x150>)
 8007054:	6013      	str	r3, [r2, #0]
 8007056:	4a3f      	ldr	r2, [pc, #252]	; (8007154 <xTaskIncrementTick+0x154>)
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	6013      	str	r3, [r2, #0]
 800705c:	4b3e      	ldr	r3, [pc, #248]	; (8007158 <xTaskIncrementTick+0x158>)
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	3301      	adds	r3, #1
 8007062:	4a3d      	ldr	r2, [pc, #244]	; (8007158 <xTaskIncrementTick+0x158>)
 8007064:	6013      	str	r3, [r2, #0]
 8007066:	f000 fad1 	bl	800760c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800706a:	4b3c      	ldr	r3, [pc, #240]	; (800715c <xTaskIncrementTick+0x15c>)
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	693a      	ldr	r2, [r7, #16]
 8007070:	429a      	cmp	r2, r3
 8007072:	d349      	bcc.n	8007108 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007074:	4b36      	ldr	r3, [pc, #216]	; (8007150 <xTaskIncrementTick+0x150>)
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d104      	bne.n	8007088 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800707e:	4b37      	ldr	r3, [pc, #220]	; (800715c <xTaskIncrementTick+0x15c>)
 8007080:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007084:	601a      	str	r2, [r3, #0]
					break;
 8007086:	e03f      	b.n	8007108 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007088:	4b31      	ldr	r3, [pc, #196]	; (8007150 <xTaskIncrementTick+0x150>)
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	68db      	ldr	r3, [r3, #12]
 800708e:	68db      	ldr	r3, [r3, #12]
 8007090:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007092:	68bb      	ldr	r3, [r7, #8]
 8007094:	685b      	ldr	r3, [r3, #4]
 8007096:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007098:	693a      	ldr	r2, [r7, #16]
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	429a      	cmp	r2, r3
 800709e:	d203      	bcs.n	80070a8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80070a0:	4a2e      	ldr	r2, [pc, #184]	; (800715c <xTaskIncrementTick+0x15c>)
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80070a6:	e02f      	b.n	8007108 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80070a8:	68bb      	ldr	r3, [r7, #8]
 80070aa:	3304      	adds	r3, #4
 80070ac:	4618      	mov	r0, r3
 80070ae:	f7fe fe7f 	bl	8005db0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80070b2:	68bb      	ldr	r3, [r7, #8]
 80070b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d004      	beq.n	80070c4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80070ba:	68bb      	ldr	r3, [r7, #8]
 80070bc:	3318      	adds	r3, #24
 80070be:	4618      	mov	r0, r3
 80070c0:	f7fe fe76 	bl	8005db0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80070c4:	68bb      	ldr	r3, [r7, #8]
 80070c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070c8:	4b25      	ldr	r3, [pc, #148]	; (8007160 <xTaskIncrementTick+0x160>)
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	429a      	cmp	r2, r3
 80070ce:	d903      	bls.n	80070d8 <xTaskIncrementTick+0xd8>
 80070d0:	68bb      	ldr	r3, [r7, #8]
 80070d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070d4:	4a22      	ldr	r2, [pc, #136]	; (8007160 <xTaskIncrementTick+0x160>)
 80070d6:	6013      	str	r3, [r2, #0]
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070dc:	4613      	mov	r3, r2
 80070de:	009b      	lsls	r3, r3, #2
 80070e0:	4413      	add	r3, r2
 80070e2:	009b      	lsls	r3, r3, #2
 80070e4:	4a1f      	ldr	r2, [pc, #124]	; (8007164 <xTaskIncrementTick+0x164>)
 80070e6:	441a      	add	r2, r3
 80070e8:	68bb      	ldr	r3, [r7, #8]
 80070ea:	3304      	adds	r3, #4
 80070ec:	4619      	mov	r1, r3
 80070ee:	4610      	mov	r0, r2
 80070f0:	f7fe fe01 	bl	8005cf6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070f8:	4b1b      	ldr	r3, [pc, #108]	; (8007168 <xTaskIncrementTick+0x168>)
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070fe:	429a      	cmp	r2, r3
 8007100:	d3b8      	bcc.n	8007074 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007102:	2301      	movs	r3, #1
 8007104:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007106:	e7b5      	b.n	8007074 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007108:	4b17      	ldr	r3, [pc, #92]	; (8007168 <xTaskIncrementTick+0x168>)
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800710e:	4915      	ldr	r1, [pc, #84]	; (8007164 <xTaskIncrementTick+0x164>)
 8007110:	4613      	mov	r3, r2
 8007112:	009b      	lsls	r3, r3, #2
 8007114:	4413      	add	r3, r2
 8007116:	009b      	lsls	r3, r3, #2
 8007118:	440b      	add	r3, r1
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	2b01      	cmp	r3, #1
 800711e:	d901      	bls.n	8007124 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007120:	2301      	movs	r3, #1
 8007122:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007124:	4b11      	ldr	r3, [pc, #68]	; (800716c <xTaskIncrementTick+0x16c>)
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d007      	beq.n	800713c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800712c:	2301      	movs	r3, #1
 800712e:	617b      	str	r3, [r7, #20]
 8007130:	e004      	b.n	800713c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007132:	4b0f      	ldr	r3, [pc, #60]	; (8007170 <xTaskIncrementTick+0x170>)
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	3301      	adds	r3, #1
 8007138:	4a0d      	ldr	r2, [pc, #52]	; (8007170 <xTaskIncrementTick+0x170>)
 800713a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800713c:	697b      	ldr	r3, [r7, #20]
}
 800713e:	4618      	mov	r0, r3
 8007140:	3718      	adds	r7, #24
 8007142:	46bd      	mov	sp, r7
 8007144:	bd80      	pop	{r7, pc}
 8007146:	bf00      	nop
 8007148:	20000f20 	.word	0x20000f20
 800714c:	20000efc 	.word	0x20000efc
 8007150:	20000eb0 	.word	0x20000eb0
 8007154:	20000eb4 	.word	0x20000eb4
 8007158:	20000f10 	.word	0x20000f10
 800715c:	20000f18 	.word	0x20000f18
 8007160:	20000f00 	.word	0x20000f00
 8007164:	20000a28 	.word	0x20000a28
 8007168:	20000a24 	.word	0x20000a24
 800716c:	20000f0c 	.word	0x20000f0c
 8007170:	20000f08 	.word	0x20000f08

08007174 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007174:	b480      	push	{r7}
 8007176:	b085      	sub	sp, #20
 8007178:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800717a:	4b28      	ldr	r3, [pc, #160]	; (800721c <vTaskSwitchContext+0xa8>)
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d003      	beq.n	800718a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007182:	4b27      	ldr	r3, [pc, #156]	; (8007220 <vTaskSwitchContext+0xac>)
 8007184:	2201      	movs	r2, #1
 8007186:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007188:	e041      	b.n	800720e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800718a:	4b25      	ldr	r3, [pc, #148]	; (8007220 <vTaskSwitchContext+0xac>)
 800718c:	2200      	movs	r2, #0
 800718e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007190:	4b24      	ldr	r3, [pc, #144]	; (8007224 <vTaskSwitchContext+0xb0>)
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	60fb      	str	r3, [r7, #12]
 8007196:	e010      	b.n	80071ba <vTaskSwitchContext+0x46>
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d10a      	bne.n	80071b4 <vTaskSwitchContext+0x40>
	__asm volatile
 800719e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071a2:	f383 8811 	msr	BASEPRI, r3
 80071a6:	f3bf 8f6f 	isb	sy
 80071aa:	f3bf 8f4f 	dsb	sy
 80071ae:	607b      	str	r3, [r7, #4]
}
 80071b0:	bf00      	nop
 80071b2:	e7fe      	b.n	80071b2 <vTaskSwitchContext+0x3e>
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	3b01      	subs	r3, #1
 80071b8:	60fb      	str	r3, [r7, #12]
 80071ba:	491b      	ldr	r1, [pc, #108]	; (8007228 <vTaskSwitchContext+0xb4>)
 80071bc:	68fa      	ldr	r2, [r7, #12]
 80071be:	4613      	mov	r3, r2
 80071c0:	009b      	lsls	r3, r3, #2
 80071c2:	4413      	add	r3, r2
 80071c4:	009b      	lsls	r3, r3, #2
 80071c6:	440b      	add	r3, r1
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d0e4      	beq.n	8007198 <vTaskSwitchContext+0x24>
 80071ce:	68fa      	ldr	r2, [r7, #12]
 80071d0:	4613      	mov	r3, r2
 80071d2:	009b      	lsls	r3, r3, #2
 80071d4:	4413      	add	r3, r2
 80071d6:	009b      	lsls	r3, r3, #2
 80071d8:	4a13      	ldr	r2, [pc, #76]	; (8007228 <vTaskSwitchContext+0xb4>)
 80071da:	4413      	add	r3, r2
 80071dc:	60bb      	str	r3, [r7, #8]
 80071de:	68bb      	ldr	r3, [r7, #8]
 80071e0:	685b      	ldr	r3, [r3, #4]
 80071e2:	685a      	ldr	r2, [r3, #4]
 80071e4:	68bb      	ldr	r3, [r7, #8]
 80071e6:	605a      	str	r2, [r3, #4]
 80071e8:	68bb      	ldr	r3, [r7, #8]
 80071ea:	685a      	ldr	r2, [r3, #4]
 80071ec:	68bb      	ldr	r3, [r7, #8]
 80071ee:	3308      	adds	r3, #8
 80071f0:	429a      	cmp	r2, r3
 80071f2:	d104      	bne.n	80071fe <vTaskSwitchContext+0x8a>
 80071f4:	68bb      	ldr	r3, [r7, #8]
 80071f6:	685b      	ldr	r3, [r3, #4]
 80071f8:	685a      	ldr	r2, [r3, #4]
 80071fa:	68bb      	ldr	r3, [r7, #8]
 80071fc:	605a      	str	r2, [r3, #4]
 80071fe:	68bb      	ldr	r3, [r7, #8]
 8007200:	685b      	ldr	r3, [r3, #4]
 8007202:	68db      	ldr	r3, [r3, #12]
 8007204:	4a09      	ldr	r2, [pc, #36]	; (800722c <vTaskSwitchContext+0xb8>)
 8007206:	6013      	str	r3, [r2, #0]
 8007208:	4a06      	ldr	r2, [pc, #24]	; (8007224 <vTaskSwitchContext+0xb0>)
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	6013      	str	r3, [r2, #0]
}
 800720e:	bf00      	nop
 8007210:	3714      	adds	r7, #20
 8007212:	46bd      	mov	sp, r7
 8007214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007218:	4770      	bx	lr
 800721a:	bf00      	nop
 800721c:	20000f20 	.word	0x20000f20
 8007220:	20000f0c 	.word	0x20000f0c
 8007224:	20000f00 	.word	0x20000f00
 8007228:	20000a28 	.word	0x20000a28
 800722c:	20000a24 	.word	0x20000a24

08007230 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007230:	b580      	push	{r7, lr}
 8007232:	b084      	sub	sp, #16
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
 8007238:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d10a      	bne.n	8007256 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007244:	f383 8811 	msr	BASEPRI, r3
 8007248:	f3bf 8f6f 	isb	sy
 800724c:	f3bf 8f4f 	dsb	sy
 8007250:	60fb      	str	r3, [r7, #12]
}
 8007252:	bf00      	nop
 8007254:	e7fe      	b.n	8007254 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007256:	4b07      	ldr	r3, [pc, #28]	; (8007274 <vTaskPlaceOnEventList+0x44>)
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	3318      	adds	r3, #24
 800725c:	4619      	mov	r1, r3
 800725e:	6878      	ldr	r0, [r7, #4]
 8007260:	f7fe fd6d 	bl	8005d3e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007264:	2101      	movs	r1, #1
 8007266:	6838      	ldr	r0, [r7, #0]
 8007268:	f000 fc6a 	bl	8007b40 <prvAddCurrentTaskToDelayedList>
}
 800726c:	bf00      	nop
 800726e:	3710      	adds	r7, #16
 8007270:	46bd      	mov	sp, r7
 8007272:	bd80      	pop	{r7, pc}
 8007274:	20000a24 	.word	0x20000a24

08007278 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007278:	b580      	push	{r7, lr}
 800727a:	b086      	sub	sp, #24
 800727c:	af00      	add	r7, sp, #0
 800727e:	60f8      	str	r0, [r7, #12]
 8007280:	60b9      	str	r1, [r7, #8]
 8007282:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d10a      	bne.n	80072a0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800728a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800728e:	f383 8811 	msr	BASEPRI, r3
 8007292:	f3bf 8f6f 	isb	sy
 8007296:	f3bf 8f4f 	dsb	sy
 800729a:	617b      	str	r3, [r7, #20]
}
 800729c:	bf00      	nop
 800729e:	e7fe      	b.n	800729e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80072a0:	4b0a      	ldr	r3, [pc, #40]	; (80072cc <vTaskPlaceOnEventListRestricted+0x54>)
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	3318      	adds	r3, #24
 80072a6:	4619      	mov	r1, r3
 80072a8:	68f8      	ldr	r0, [r7, #12]
 80072aa:	f7fe fd24 	bl	8005cf6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d002      	beq.n	80072ba <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80072b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80072b8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80072ba:	6879      	ldr	r1, [r7, #4]
 80072bc:	68b8      	ldr	r0, [r7, #8]
 80072be:	f000 fc3f 	bl	8007b40 <prvAddCurrentTaskToDelayedList>
	}
 80072c2:	bf00      	nop
 80072c4:	3718      	adds	r7, #24
 80072c6:	46bd      	mov	sp, r7
 80072c8:	bd80      	pop	{r7, pc}
 80072ca:	bf00      	nop
 80072cc:	20000a24 	.word	0x20000a24

080072d0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b086      	sub	sp, #24
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	68db      	ldr	r3, [r3, #12]
 80072dc:	68db      	ldr	r3, [r3, #12]
 80072de:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80072e0:	693b      	ldr	r3, [r7, #16]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d10a      	bne.n	80072fc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80072e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072ea:	f383 8811 	msr	BASEPRI, r3
 80072ee:	f3bf 8f6f 	isb	sy
 80072f2:	f3bf 8f4f 	dsb	sy
 80072f6:	60fb      	str	r3, [r7, #12]
}
 80072f8:	bf00      	nop
 80072fa:	e7fe      	b.n	80072fa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80072fc:	693b      	ldr	r3, [r7, #16]
 80072fe:	3318      	adds	r3, #24
 8007300:	4618      	mov	r0, r3
 8007302:	f7fe fd55 	bl	8005db0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007306:	4b1e      	ldr	r3, [pc, #120]	; (8007380 <xTaskRemoveFromEventList+0xb0>)
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d11d      	bne.n	800734a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800730e:	693b      	ldr	r3, [r7, #16]
 8007310:	3304      	adds	r3, #4
 8007312:	4618      	mov	r0, r3
 8007314:	f7fe fd4c 	bl	8005db0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007318:	693b      	ldr	r3, [r7, #16]
 800731a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800731c:	4b19      	ldr	r3, [pc, #100]	; (8007384 <xTaskRemoveFromEventList+0xb4>)
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	429a      	cmp	r2, r3
 8007322:	d903      	bls.n	800732c <xTaskRemoveFromEventList+0x5c>
 8007324:	693b      	ldr	r3, [r7, #16]
 8007326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007328:	4a16      	ldr	r2, [pc, #88]	; (8007384 <xTaskRemoveFromEventList+0xb4>)
 800732a:	6013      	str	r3, [r2, #0]
 800732c:	693b      	ldr	r3, [r7, #16]
 800732e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007330:	4613      	mov	r3, r2
 8007332:	009b      	lsls	r3, r3, #2
 8007334:	4413      	add	r3, r2
 8007336:	009b      	lsls	r3, r3, #2
 8007338:	4a13      	ldr	r2, [pc, #76]	; (8007388 <xTaskRemoveFromEventList+0xb8>)
 800733a:	441a      	add	r2, r3
 800733c:	693b      	ldr	r3, [r7, #16]
 800733e:	3304      	adds	r3, #4
 8007340:	4619      	mov	r1, r3
 8007342:	4610      	mov	r0, r2
 8007344:	f7fe fcd7 	bl	8005cf6 <vListInsertEnd>
 8007348:	e005      	b.n	8007356 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800734a:	693b      	ldr	r3, [r7, #16]
 800734c:	3318      	adds	r3, #24
 800734e:	4619      	mov	r1, r3
 8007350:	480e      	ldr	r0, [pc, #56]	; (800738c <xTaskRemoveFromEventList+0xbc>)
 8007352:	f7fe fcd0 	bl	8005cf6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007356:	693b      	ldr	r3, [r7, #16]
 8007358:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800735a:	4b0d      	ldr	r3, [pc, #52]	; (8007390 <xTaskRemoveFromEventList+0xc0>)
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007360:	429a      	cmp	r2, r3
 8007362:	d905      	bls.n	8007370 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007364:	2301      	movs	r3, #1
 8007366:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007368:	4b0a      	ldr	r3, [pc, #40]	; (8007394 <xTaskRemoveFromEventList+0xc4>)
 800736a:	2201      	movs	r2, #1
 800736c:	601a      	str	r2, [r3, #0]
 800736e:	e001      	b.n	8007374 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007370:	2300      	movs	r3, #0
 8007372:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007374:	697b      	ldr	r3, [r7, #20]
}
 8007376:	4618      	mov	r0, r3
 8007378:	3718      	adds	r7, #24
 800737a:	46bd      	mov	sp, r7
 800737c:	bd80      	pop	{r7, pc}
 800737e:	bf00      	nop
 8007380:	20000f20 	.word	0x20000f20
 8007384:	20000f00 	.word	0x20000f00
 8007388:	20000a28 	.word	0x20000a28
 800738c:	20000eb8 	.word	0x20000eb8
 8007390:	20000a24 	.word	0x20000a24
 8007394:	20000f0c 	.word	0x20000f0c

08007398 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007398:	b480      	push	{r7}
 800739a:	b083      	sub	sp, #12
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80073a0:	4b06      	ldr	r3, [pc, #24]	; (80073bc <vTaskInternalSetTimeOutState+0x24>)
 80073a2:	681a      	ldr	r2, [r3, #0]
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80073a8:	4b05      	ldr	r3, [pc, #20]	; (80073c0 <vTaskInternalSetTimeOutState+0x28>)
 80073aa:	681a      	ldr	r2, [r3, #0]
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	605a      	str	r2, [r3, #4]
}
 80073b0:	bf00      	nop
 80073b2:	370c      	adds	r7, #12
 80073b4:	46bd      	mov	sp, r7
 80073b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ba:	4770      	bx	lr
 80073bc:	20000f10 	.word	0x20000f10
 80073c0:	20000efc 	.word	0x20000efc

080073c4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b088      	sub	sp, #32
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
 80073cc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d10a      	bne.n	80073ea <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80073d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073d8:	f383 8811 	msr	BASEPRI, r3
 80073dc:	f3bf 8f6f 	isb	sy
 80073e0:	f3bf 8f4f 	dsb	sy
 80073e4:	613b      	str	r3, [r7, #16]
}
 80073e6:	bf00      	nop
 80073e8:	e7fe      	b.n	80073e8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d10a      	bne.n	8007406 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80073f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073f4:	f383 8811 	msr	BASEPRI, r3
 80073f8:	f3bf 8f6f 	isb	sy
 80073fc:	f3bf 8f4f 	dsb	sy
 8007400:	60fb      	str	r3, [r7, #12]
}
 8007402:	bf00      	nop
 8007404:	e7fe      	b.n	8007404 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007406:	f001 f86d 	bl	80084e4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800740a:	4b1d      	ldr	r3, [pc, #116]	; (8007480 <xTaskCheckForTimeOut+0xbc>)
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	685b      	ldr	r3, [r3, #4]
 8007414:	69ba      	ldr	r2, [r7, #24]
 8007416:	1ad3      	subs	r3, r2, r3
 8007418:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007422:	d102      	bne.n	800742a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007424:	2300      	movs	r3, #0
 8007426:	61fb      	str	r3, [r7, #28]
 8007428:	e023      	b.n	8007472 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681a      	ldr	r2, [r3, #0]
 800742e:	4b15      	ldr	r3, [pc, #84]	; (8007484 <xTaskCheckForTimeOut+0xc0>)
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	429a      	cmp	r2, r3
 8007434:	d007      	beq.n	8007446 <xTaskCheckForTimeOut+0x82>
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	685b      	ldr	r3, [r3, #4]
 800743a:	69ba      	ldr	r2, [r7, #24]
 800743c:	429a      	cmp	r2, r3
 800743e:	d302      	bcc.n	8007446 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007440:	2301      	movs	r3, #1
 8007442:	61fb      	str	r3, [r7, #28]
 8007444:	e015      	b.n	8007472 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	697a      	ldr	r2, [r7, #20]
 800744c:	429a      	cmp	r2, r3
 800744e:	d20b      	bcs.n	8007468 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	681a      	ldr	r2, [r3, #0]
 8007454:	697b      	ldr	r3, [r7, #20]
 8007456:	1ad2      	subs	r2, r2, r3
 8007458:	683b      	ldr	r3, [r7, #0]
 800745a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800745c:	6878      	ldr	r0, [r7, #4]
 800745e:	f7ff ff9b 	bl	8007398 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007462:	2300      	movs	r3, #0
 8007464:	61fb      	str	r3, [r7, #28]
 8007466:	e004      	b.n	8007472 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	2200      	movs	r2, #0
 800746c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800746e:	2301      	movs	r3, #1
 8007470:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007472:	f001 f867 	bl	8008544 <vPortExitCritical>

	return xReturn;
 8007476:	69fb      	ldr	r3, [r7, #28]
}
 8007478:	4618      	mov	r0, r3
 800747a:	3720      	adds	r7, #32
 800747c:	46bd      	mov	sp, r7
 800747e:	bd80      	pop	{r7, pc}
 8007480:	20000efc 	.word	0x20000efc
 8007484:	20000f10 	.word	0x20000f10

08007488 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007488:	b480      	push	{r7}
 800748a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800748c:	4b03      	ldr	r3, [pc, #12]	; (800749c <vTaskMissedYield+0x14>)
 800748e:	2201      	movs	r2, #1
 8007490:	601a      	str	r2, [r3, #0]
}
 8007492:	bf00      	nop
 8007494:	46bd      	mov	sp, r7
 8007496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749a:	4770      	bx	lr
 800749c:	20000f0c 	.word	0x20000f0c

080074a0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b082      	sub	sp, #8
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80074a8:	f000 f852 	bl	8007550 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80074ac:	4b06      	ldr	r3, [pc, #24]	; (80074c8 <prvIdleTask+0x28>)
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	2b01      	cmp	r3, #1
 80074b2:	d9f9      	bls.n	80074a8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80074b4:	4b05      	ldr	r3, [pc, #20]	; (80074cc <prvIdleTask+0x2c>)
 80074b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074ba:	601a      	str	r2, [r3, #0]
 80074bc:	f3bf 8f4f 	dsb	sy
 80074c0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80074c4:	e7f0      	b.n	80074a8 <prvIdleTask+0x8>
 80074c6:	bf00      	nop
 80074c8:	20000a28 	.word	0x20000a28
 80074cc:	e000ed04 	.word	0xe000ed04

080074d0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b082      	sub	sp, #8
 80074d4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80074d6:	2300      	movs	r3, #0
 80074d8:	607b      	str	r3, [r7, #4]
 80074da:	e00c      	b.n	80074f6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80074dc:	687a      	ldr	r2, [r7, #4]
 80074de:	4613      	mov	r3, r2
 80074e0:	009b      	lsls	r3, r3, #2
 80074e2:	4413      	add	r3, r2
 80074e4:	009b      	lsls	r3, r3, #2
 80074e6:	4a12      	ldr	r2, [pc, #72]	; (8007530 <prvInitialiseTaskLists+0x60>)
 80074e8:	4413      	add	r3, r2
 80074ea:	4618      	mov	r0, r3
 80074ec:	f7fe fbd6 	bl	8005c9c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	3301      	adds	r3, #1
 80074f4:	607b      	str	r3, [r7, #4]
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2b37      	cmp	r3, #55	; 0x37
 80074fa:	d9ef      	bls.n	80074dc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80074fc:	480d      	ldr	r0, [pc, #52]	; (8007534 <prvInitialiseTaskLists+0x64>)
 80074fe:	f7fe fbcd 	bl	8005c9c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007502:	480d      	ldr	r0, [pc, #52]	; (8007538 <prvInitialiseTaskLists+0x68>)
 8007504:	f7fe fbca 	bl	8005c9c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007508:	480c      	ldr	r0, [pc, #48]	; (800753c <prvInitialiseTaskLists+0x6c>)
 800750a:	f7fe fbc7 	bl	8005c9c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800750e:	480c      	ldr	r0, [pc, #48]	; (8007540 <prvInitialiseTaskLists+0x70>)
 8007510:	f7fe fbc4 	bl	8005c9c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007514:	480b      	ldr	r0, [pc, #44]	; (8007544 <prvInitialiseTaskLists+0x74>)
 8007516:	f7fe fbc1 	bl	8005c9c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800751a:	4b0b      	ldr	r3, [pc, #44]	; (8007548 <prvInitialiseTaskLists+0x78>)
 800751c:	4a05      	ldr	r2, [pc, #20]	; (8007534 <prvInitialiseTaskLists+0x64>)
 800751e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007520:	4b0a      	ldr	r3, [pc, #40]	; (800754c <prvInitialiseTaskLists+0x7c>)
 8007522:	4a05      	ldr	r2, [pc, #20]	; (8007538 <prvInitialiseTaskLists+0x68>)
 8007524:	601a      	str	r2, [r3, #0]
}
 8007526:	bf00      	nop
 8007528:	3708      	adds	r7, #8
 800752a:	46bd      	mov	sp, r7
 800752c:	bd80      	pop	{r7, pc}
 800752e:	bf00      	nop
 8007530:	20000a28 	.word	0x20000a28
 8007534:	20000e88 	.word	0x20000e88
 8007538:	20000e9c 	.word	0x20000e9c
 800753c:	20000eb8 	.word	0x20000eb8
 8007540:	20000ecc 	.word	0x20000ecc
 8007544:	20000ee4 	.word	0x20000ee4
 8007548:	20000eb0 	.word	0x20000eb0
 800754c:	20000eb4 	.word	0x20000eb4

08007550 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007550:	b580      	push	{r7, lr}
 8007552:	b082      	sub	sp, #8
 8007554:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007556:	e019      	b.n	800758c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007558:	f000 ffc4 	bl	80084e4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800755c:	4b10      	ldr	r3, [pc, #64]	; (80075a0 <prvCheckTasksWaitingTermination+0x50>)
 800755e:	68db      	ldr	r3, [r3, #12]
 8007560:	68db      	ldr	r3, [r3, #12]
 8007562:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	3304      	adds	r3, #4
 8007568:	4618      	mov	r0, r3
 800756a:	f7fe fc21 	bl	8005db0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800756e:	4b0d      	ldr	r3, [pc, #52]	; (80075a4 <prvCheckTasksWaitingTermination+0x54>)
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	3b01      	subs	r3, #1
 8007574:	4a0b      	ldr	r2, [pc, #44]	; (80075a4 <prvCheckTasksWaitingTermination+0x54>)
 8007576:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007578:	4b0b      	ldr	r3, [pc, #44]	; (80075a8 <prvCheckTasksWaitingTermination+0x58>)
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	3b01      	subs	r3, #1
 800757e:	4a0a      	ldr	r2, [pc, #40]	; (80075a8 <prvCheckTasksWaitingTermination+0x58>)
 8007580:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007582:	f000 ffdf 	bl	8008544 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007586:	6878      	ldr	r0, [r7, #4]
 8007588:	f000 f810 	bl	80075ac <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800758c:	4b06      	ldr	r3, [pc, #24]	; (80075a8 <prvCheckTasksWaitingTermination+0x58>)
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d1e1      	bne.n	8007558 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007594:	bf00      	nop
 8007596:	bf00      	nop
 8007598:	3708      	adds	r7, #8
 800759a:	46bd      	mov	sp, r7
 800759c:	bd80      	pop	{r7, pc}
 800759e:	bf00      	nop
 80075a0:	20000ecc 	.word	0x20000ecc
 80075a4:	20000ef8 	.word	0x20000ef8
 80075a8:	20000ee0 	.word	0x20000ee0

080075ac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b084      	sub	sp, #16
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d108      	bne.n	80075d0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075c2:	4618      	mov	r0, r3
 80075c4:	f001 f97c 	bl	80088c0 <vPortFree>
				vPortFree( pxTCB );
 80075c8:	6878      	ldr	r0, [r7, #4]
 80075ca:	f001 f979 	bl	80088c0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80075ce:	e018      	b.n	8007602 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80075d6:	2b01      	cmp	r3, #1
 80075d8:	d103      	bne.n	80075e2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80075da:	6878      	ldr	r0, [r7, #4]
 80075dc:	f001 f970 	bl	80088c0 <vPortFree>
	}
 80075e0:	e00f      	b.n	8007602 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80075e8:	2b02      	cmp	r3, #2
 80075ea:	d00a      	beq.n	8007602 <prvDeleteTCB+0x56>
	__asm volatile
 80075ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075f0:	f383 8811 	msr	BASEPRI, r3
 80075f4:	f3bf 8f6f 	isb	sy
 80075f8:	f3bf 8f4f 	dsb	sy
 80075fc:	60fb      	str	r3, [r7, #12]
}
 80075fe:	bf00      	nop
 8007600:	e7fe      	b.n	8007600 <prvDeleteTCB+0x54>
	}
 8007602:	bf00      	nop
 8007604:	3710      	adds	r7, #16
 8007606:	46bd      	mov	sp, r7
 8007608:	bd80      	pop	{r7, pc}
	...

0800760c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800760c:	b480      	push	{r7}
 800760e:	b083      	sub	sp, #12
 8007610:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007612:	4b0c      	ldr	r3, [pc, #48]	; (8007644 <prvResetNextTaskUnblockTime+0x38>)
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d104      	bne.n	8007626 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800761c:	4b0a      	ldr	r3, [pc, #40]	; (8007648 <prvResetNextTaskUnblockTime+0x3c>)
 800761e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007622:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007624:	e008      	b.n	8007638 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007626:	4b07      	ldr	r3, [pc, #28]	; (8007644 <prvResetNextTaskUnblockTime+0x38>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	68db      	ldr	r3, [r3, #12]
 800762c:	68db      	ldr	r3, [r3, #12]
 800762e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	685b      	ldr	r3, [r3, #4]
 8007634:	4a04      	ldr	r2, [pc, #16]	; (8007648 <prvResetNextTaskUnblockTime+0x3c>)
 8007636:	6013      	str	r3, [r2, #0]
}
 8007638:	bf00      	nop
 800763a:	370c      	adds	r7, #12
 800763c:	46bd      	mov	sp, r7
 800763e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007642:	4770      	bx	lr
 8007644:	20000eb0 	.word	0x20000eb0
 8007648:	20000f18 	.word	0x20000f18

0800764c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800764c:	b480      	push	{r7}
 800764e:	b083      	sub	sp, #12
 8007650:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007652:	4b0b      	ldr	r3, [pc, #44]	; (8007680 <xTaskGetSchedulerState+0x34>)
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d102      	bne.n	8007660 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800765a:	2301      	movs	r3, #1
 800765c:	607b      	str	r3, [r7, #4]
 800765e:	e008      	b.n	8007672 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007660:	4b08      	ldr	r3, [pc, #32]	; (8007684 <xTaskGetSchedulerState+0x38>)
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d102      	bne.n	800766e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007668:	2302      	movs	r3, #2
 800766a:	607b      	str	r3, [r7, #4]
 800766c:	e001      	b.n	8007672 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800766e:	2300      	movs	r3, #0
 8007670:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007672:	687b      	ldr	r3, [r7, #4]
	}
 8007674:	4618      	mov	r0, r3
 8007676:	370c      	adds	r7, #12
 8007678:	46bd      	mov	sp, r7
 800767a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767e:	4770      	bx	lr
 8007680:	20000f04 	.word	0x20000f04
 8007684:	20000f20 	.word	0x20000f20

08007688 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007688:	b580      	push	{r7, lr}
 800768a:	b086      	sub	sp, #24
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007694:	2300      	movs	r3, #0
 8007696:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d056      	beq.n	800774c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800769e:	4b2e      	ldr	r3, [pc, #184]	; (8007758 <xTaskPriorityDisinherit+0xd0>)
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	693a      	ldr	r2, [r7, #16]
 80076a4:	429a      	cmp	r2, r3
 80076a6:	d00a      	beq.n	80076be <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80076a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076ac:	f383 8811 	msr	BASEPRI, r3
 80076b0:	f3bf 8f6f 	isb	sy
 80076b4:	f3bf 8f4f 	dsb	sy
 80076b8:	60fb      	str	r3, [r7, #12]
}
 80076ba:	bf00      	nop
 80076bc:	e7fe      	b.n	80076bc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80076be:	693b      	ldr	r3, [r7, #16]
 80076c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d10a      	bne.n	80076dc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80076c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076ca:	f383 8811 	msr	BASEPRI, r3
 80076ce:	f3bf 8f6f 	isb	sy
 80076d2:	f3bf 8f4f 	dsb	sy
 80076d6:	60bb      	str	r3, [r7, #8]
}
 80076d8:	bf00      	nop
 80076da:	e7fe      	b.n	80076da <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80076dc:	693b      	ldr	r3, [r7, #16]
 80076de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076e0:	1e5a      	subs	r2, r3, #1
 80076e2:	693b      	ldr	r3, [r7, #16]
 80076e4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80076e6:	693b      	ldr	r3, [r7, #16]
 80076e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076ea:	693b      	ldr	r3, [r7, #16]
 80076ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80076ee:	429a      	cmp	r2, r3
 80076f0:	d02c      	beq.n	800774c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80076f2:	693b      	ldr	r3, [r7, #16]
 80076f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d128      	bne.n	800774c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80076fa:	693b      	ldr	r3, [r7, #16]
 80076fc:	3304      	adds	r3, #4
 80076fe:	4618      	mov	r0, r3
 8007700:	f7fe fb56 	bl	8005db0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007704:	693b      	ldr	r3, [r7, #16]
 8007706:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007708:	693b      	ldr	r3, [r7, #16]
 800770a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800770c:	693b      	ldr	r3, [r7, #16]
 800770e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007710:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007714:	693b      	ldr	r3, [r7, #16]
 8007716:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007718:	693b      	ldr	r3, [r7, #16]
 800771a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800771c:	4b0f      	ldr	r3, [pc, #60]	; (800775c <xTaskPriorityDisinherit+0xd4>)
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	429a      	cmp	r2, r3
 8007722:	d903      	bls.n	800772c <xTaskPriorityDisinherit+0xa4>
 8007724:	693b      	ldr	r3, [r7, #16]
 8007726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007728:	4a0c      	ldr	r2, [pc, #48]	; (800775c <xTaskPriorityDisinherit+0xd4>)
 800772a:	6013      	str	r3, [r2, #0]
 800772c:	693b      	ldr	r3, [r7, #16]
 800772e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007730:	4613      	mov	r3, r2
 8007732:	009b      	lsls	r3, r3, #2
 8007734:	4413      	add	r3, r2
 8007736:	009b      	lsls	r3, r3, #2
 8007738:	4a09      	ldr	r2, [pc, #36]	; (8007760 <xTaskPriorityDisinherit+0xd8>)
 800773a:	441a      	add	r2, r3
 800773c:	693b      	ldr	r3, [r7, #16]
 800773e:	3304      	adds	r3, #4
 8007740:	4619      	mov	r1, r3
 8007742:	4610      	mov	r0, r2
 8007744:	f7fe fad7 	bl	8005cf6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007748:	2301      	movs	r3, #1
 800774a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800774c:	697b      	ldr	r3, [r7, #20]
	}
 800774e:	4618      	mov	r0, r3
 8007750:	3718      	adds	r7, #24
 8007752:	46bd      	mov	sp, r7
 8007754:	bd80      	pop	{r7, pc}
 8007756:	bf00      	nop
 8007758:	20000a24 	.word	0x20000a24
 800775c:	20000f00 	.word	0x20000f00
 8007760:	20000a28 	.word	0x20000a28

08007764 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8007764:	b580      	push	{r7, lr}
 8007766:	b086      	sub	sp, #24
 8007768:	af00      	add	r7, sp, #0
 800776a:	60f8      	str	r0, [r7, #12]
 800776c:	60b9      	str	r1, [r7, #8]
 800776e:	607a      	str	r2, [r7, #4]
 8007770:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8007772:	f000 feb7 	bl	80084e4 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8007776:	4b26      	ldr	r3, [pc, #152]	; (8007810 <xTaskNotifyWait+0xac>)
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800777e:	b2db      	uxtb	r3, r3
 8007780:	2b02      	cmp	r3, #2
 8007782:	d01a      	beq.n	80077ba <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8007784:	4b22      	ldr	r3, [pc, #136]	; (8007810 <xTaskNotifyWait+0xac>)
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800778a:	68fa      	ldr	r2, [r7, #12]
 800778c:	43d2      	mvns	r2, r2
 800778e:	400a      	ands	r2, r1
 8007790:	655a      	str	r2, [r3, #84]	; 0x54

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8007792:	4b1f      	ldr	r3, [pc, #124]	; (8007810 <xTaskNotifyWait+0xac>)
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	2201      	movs	r2, #1
 8007798:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d00b      	beq.n	80077ba <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80077a2:	2101      	movs	r1, #1
 80077a4:	6838      	ldr	r0, [r7, #0]
 80077a6:	f000 f9cb 	bl	8007b40 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 80077aa:	4b1a      	ldr	r3, [pc, #104]	; (8007814 <xTaskNotifyWait+0xb0>)
 80077ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80077b0:	601a      	str	r2, [r3, #0]
 80077b2:	f3bf 8f4f 	dsb	sy
 80077b6:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80077ba:	f000 fec3 	bl	8008544 <vPortExitCritical>

		taskENTER_CRITICAL();
 80077be:	f000 fe91 	bl	80084e4 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d004      	beq.n	80077d2 <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 80077c8:	4b11      	ldr	r3, [pc, #68]	; (8007810 <xTaskNotifyWait+0xac>)
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80077d2:	4b0f      	ldr	r3, [pc, #60]	; (8007810 <xTaskNotifyWait+0xac>)
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80077da:	b2db      	uxtb	r3, r3
 80077dc:	2b02      	cmp	r3, #2
 80077de:	d002      	beq.n	80077e6 <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 80077e0:	2300      	movs	r3, #0
 80077e2:	617b      	str	r3, [r7, #20]
 80077e4:	e008      	b.n	80077f8 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 80077e6:	4b0a      	ldr	r3, [pc, #40]	; (8007810 <xTaskNotifyWait+0xac>)
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80077ec:	68ba      	ldr	r2, [r7, #8]
 80077ee:	43d2      	mvns	r2, r2
 80077f0:	400a      	ands	r2, r1
 80077f2:	655a      	str	r2, [r3, #84]	; 0x54
				xReturn = pdTRUE;
 80077f4:	2301      	movs	r3, #1
 80077f6:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80077f8:	4b05      	ldr	r3, [pc, #20]	; (8007810 <xTaskNotifyWait+0xac>)
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	2200      	movs	r2, #0
 80077fe:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 8007802:	f000 fe9f 	bl	8008544 <vPortExitCritical>

		return xReturn;
 8007806:	697b      	ldr	r3, [r7, #20]
	}
 8007808:	4618      	mov	r0, r3
 800780a:	3718      	adds	r7, #24
 800780c:	46bd      	mov	sp, r7
 800780e:	bd80      	pop	{r7, pc}
 8007810:	20000a24 	.word	0x20000a24
 8007814:	e000ed04 	.word	0xe000ed04

08007818 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8007818:	b580      	push	{r7, lr}
 800781a:	b08a      	sub	sp, #40	; 0x28
 800781c:	af00      	add	r7, sp, #0
 800781e:	60f8      	str	r0, [r7, #12]
 8007820:	60b9      	str	r1, [r7, #8]
 8007822:	603b      	str	r3, [r7, #0]
 8007824:	4613      	mov	r3, r2
 8007826:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8007828:	2301      	movs	r3, #1
 800782a:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d10a      	bne.n	8007848 <xTaskGenericNotify+0x30>
	__asm volatile
 8007832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007836:	f383 8811 	msr	BASEPRI, r3
 800783a:	f3bf 8f6f 	isb	sy
 800783e:	f3bf 8f4f 	dsb	sy
 8007842:	61bb      	str	r3, [r7, #24]
}
 8007844:	bf00      	nop
 8007846:	e7fe      	b.n	8007846 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800784c:	f000 fe4a 	bl	80084e4 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8007850:	683b      	ldr	r3, [r7, #0]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d003      	beq.n	800785e <xTaskGenericNotify+0x46>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8007856:	6a3b      	ldr	r3, [r7, #32]
 8007858:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800785e:	6a3b      	ldr	r3, [r7, #32]
 8007860:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8007864:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8007866:	6a3b      	ldr	r3, [r7, #32]
 8007868:	2202      	movs	r2, #2
 800786a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 800786e:	79fb      	ldrb	r3, [r7, #7]
 8007870:	2b04      	cmp	r3, #4
 8007872:	d828      	bhi.n	80078c6 <xTaskGenericNotify+0xae>
 8007874:	a201      	add	r2, pc, #4	; (adr r2, 800787c <xTaskGenericNotify+0x64>)
 8007876:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800787a:	bf00      	nop
 800787c:	080078e7 	.word	0x080078e7
 8007880:	08007891 	.word	0x08007891
 8007884:	0800789f 	.word	0x0800789f
 8007888:	080078ab 	.word	0x080078ab
 800788c:	080078b3 	.word	0x080078b3
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8007890:	6a3b      	ldr	r3, [r7, #32]
 8007892:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007894:	68bb      	ldr	r3, [r7, #8]
 8007896:	431a      	orrs	r2, r3
 8007898:	6a3b      	ldr	r3, [r7, #32]
 800789a:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800789c:	e026      	b.n	80078ec <xTaskGenericNotify+0xd4>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800789e:	6a3b      	ldr	r3, [r7, #32]
 80078a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078a2:	1c5a      	adds	r2, r3, #1
 80078a4:	6a3b      	ldr	r3, [r7, #32]
 80078a6:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 80078a8:	e020      	b.n	80078ec <xTaskGenericNotify+0xd4>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80078aa:	6a3b      	ldr	r3, [r7, #32]
 80078ac:	68ba      	ldr	r2, [r7, #8]
 80078ae:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 80078b0:	e01c      	b.n	80078ec <xTaskGenericNotify+0xd4>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80078b2:	7ffb      	ldrb	r3, [r7, #31]
 80078b4:	2b02      	cmp	r3, #2
 80078b6:	d003      	beq.n	80078c0 <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80078b8:	6a3b      	ldr	r3, [r7, #32]
 80078ba:	68ba      	ldr	r2, [r7, #8]
 80078bc:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80078be:	e015      	b.n	80078ec <xTaskGenericNotify+0xd4>
						xReturn = pdFAIL;
 80078c0:	2300      	movs	r3, #0
 80078c2:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 80078c4:	e012      	b.n	80078ec <xTaskGenericNotify+0xd4>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80078c6:	6a3b      	ldr	r3, [r7, #32]
 80078c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80078ce:	d00c      	beq.n	80078ea <xTaskGenericNotify+0xd2>
	__asm volatile
 80078d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078d4:	f383 8811 	msr	BASEPRI, r3
 80078d8:	f3bf 8f6f 	isb	sy
 80078dc:	f3bf 8f4f 	dsb	sy
 80078e0:	617b      	str	r3, [r7, #20]
}
 80078e2:	bf00      	nop
 80078e4:	e7fe      	b.n	80078e4 <xTaskGenericNotify+0xcc>
					break;
 80078e6:	bf00      	nop
 80078e8:	e000      	b.n	80078ec <xTaskGenericNotify+0xd4>

					break;
 80078ea:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80078ec:	7ffb      	ldrb	r3, [r7, #31]
 80078ee:	2b01      	cmp	r3, #1
 80078f0:	d13a      	bne.n	8007968 <xTaskGenericNotify+0x150>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80078f2:	6a3b      	ldr	r3, [r7, #32]
 80078f4:	3304      	adds	r3, #4
 80078f6:	4618      	mov	r0, r3
 80078f8:	f7fe fa5a 	bl	8005db0 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 80078fc:	6a3b      	ldr	r3, [r7, #32]
 80078fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007900:	4b1d      	ldr	r3, [pc, #116]	; (8007978 <xTaskGenericNotify+0x160>)
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	429a      	cmp	r2, r3
 8007906:	d903      	bls.n	8007910 <xTaskGenericNotify+0xf8>
 8007908:	6a3b      	ldr	r3, [r7, #32]
 800790a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800790c:	4a1a      	ldr	r2, [pc, #104]	; (8007978 <xTaskGenericNotify+0x160>)
 800790e:	6013      	str	r3, [r2, #0]
 8007910:	6a3b      	ldr	r3, [r7, #32]
 8007912:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007914:	4613      	mov	r3, r2
 8007916:	009b      	lsls	r3, r3, #2
 8007918:	4413      	add	r3, r2
 800791a:	009b      	lsls	r3, r3, #2
 800791c:	4a17      	ldr	r2, [pc, #92]	; (800797c <xTaskGenericNotify+0x164>)
 800791e:	441a      	add	r2, r3
 8007920:	6a3b      	ldr	r3, [r7, #32]
 8007922:	3304      	adds	r3, #4
 8007924:	4619      	mov	r1, r3
 8007926:	4610      	mov	r0, r2
 8007928:	f7fe f9e5 	bl	8005cf6 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800792c:	6a3b      	ldr	r3, [r7, #32]
 800792e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007930:	2b00      	cmp	r3, #0
 8007932:	d00a      	beq.n	800794a <xTaskGenericNotify+0x132>
	__asm volatile
 8007934:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007938:	f383 8811 	msr	BASEPRI, r3
 800793c:	f3bf 8f6f 	isb	sy
 8007940:	f3bf 8f4f 	dsb	sy
 8007944:	613b      	str	r3, [r7, #16]
}
 8007946:	bf00      	nop
 8007948:	e7fe      	b.n	8007948 <xTaskGenericNotify+0x130>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800794a:	6a3b      	ldr	r3, [r7, #32]
 800794c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800794e:	4b0c      	ldr	r3, [pc, #48]	; (8007980 <xTaskGenericNotify+0x168>)
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007954:	429a      	cmp	r2, r3
 8007956:	d907      	bls.n	8007968 <xTaskGenericNotify+0x150>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8007958:	4b0a      	ldr	r3, [pc, #40]	; (8007984 <xTaskGenericNotify+0x16c>)
 800795a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800795e:	601a      	str	r2, [r3, #0]
 8007960:	f3bf 8f4f 	dsb	sy
 8007964:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8007968:	f000 fdec 	bl	8008544 <vPortExitCritical>

		return xReturn;
 800796c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800796e:	4618      	mov	r0, r3
 8007970:	3728      	adds	r7, #40	; 0x28
 8007972:	46bd      	mov	sp, r7
 8007974:	bd80      	pop	{r7, pc}
 8007976:	bf00      	nop
 8007978:	20000f00 	.word	0x20000f00
 800797c:	20000a28 	.word	0x20000a28
 8007980:	20000a24 	.word	0x20000a24
 8007984:	e000ed04 	.word	0xe000ed04

08007988 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8007988:	b580      	push	{r7, lr}
 800798a:	b08e      	sub	sp, #56	; 0x38
 800798c:	af00      	add	r7, sp, #0
 800798e:	60f8      	str	r0, [r7, #12]
 8007990:	60b9      	str	r1, [r7, #8]
 8007992:	603b      	str	r3, [r7, #0]
 8007994:	4613      	mov	r3, r2
 8007996:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8007998:	2301      	movs	r3, #1
 800799a:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d10a      	bne.n	80079b8 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 80079a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079a6:	f383 8811 	msr	BASEPRI, r3
 80079aa:	f3bf 8f6f 	isb	sy
 80079ae:	f3bf 8f4f 	dsb	sy
 80079b2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80079b4:	bf00      	nop
 80079b6:	e7fe      	b.n	80079b6 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80079b8:	f000 fe76 	bl	80086a8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 80079c0:	f3ef 8211 	mrs	r2, BASEPRI
 80079c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079c8:	f383 8811 	msr	BASEPRI, r3
 80079cc:	f3bf 8f6f 	isb	sy
 80079d0:	f3bf 8f4f 	dsb	sy
 80079d4:	623a      	str	r2, [r7, #32]
 80079d6:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 80079d8:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80079da:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d003      	beq.n	80079ea <xTaskGenericNotifyFromISR+0x62>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80079e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80079ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079ec:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80079f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80079f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079f6:	2202      	movs	r2, #2
 80079f8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 80079fc:	79fb      	ldrb	r3, [r7, #7]
 80079fe:	2b04      	cmp	r3, #4
 8007a00:	d828      	bhi.n	8007a54 <xTaskGenericNotifyFromISR+0xcc>
 8007a02:	a201      	add	r2, pc, #4	; (adr r2, 8007a08 <xTaskGenericNotifyFromISR+0x80>)
 8007a04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a08:	08007a75 	.word	0x08007a75
 8007a0c:	08007a1d 	.word	0x08007a1d
 8007a10:	08007a2b 	.word	0x08007a2b
 8007a14:	08007a37 	.word	0x08007a37
 8007a18:	08007a3f 	.word	0x08007a3f
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8007a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a1e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007a20:	68bb      	ldr	r3, [r7, #8]
 8007a22:	431a      	orrs	r2, r3
 8007a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a26:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8007a28:	e027      	b.n	8007a7a <xTaskGenericNotifyFromISR+0xf2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8007a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a2e:	1c5a      	adds	r2, r3, #1
 8007a30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a32:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8007a34:	e021      	b.n	8007a7a <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8007a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a38:	68ba      	ldr	r2, [r7, #8]
 8007a3a:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8007a3c:	e01d      	b.n	8007a7a <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8007a3e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007a42:	2b02      	cmp	r3, #2
 8007a44:	d003      	beq.n	8007a4e <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8007a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a48:	68ba      	ldr	r2, [r7, #8]
 8007a4a:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8007a4c:	e015      	b.n	8007a7a <xTaskGenericNotifyFromISR+0xf2>
						xReturn = pdFAIL;
 8007a4e:	2300      	movs	r3, #0
 8007a50:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 8007a52:	e012      	b.n	8007a7a <xTaskGenericNotifyFromISR+0xf2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8007a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a58:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007a5c:	d00c      	beq.n	8007a78 <xTaskGenericNotifyFromISR+0xf0>
	__asm volatile
 8007a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a62:	f383 8811 	msr	BASEPRI, r3
 8007a66:	f3bf 8f6f 	isb	sy
 8007a6a:	f3bf 8f4f 	dsb	sy
 8007a6e:	61bb      	str	r3, [r7, #24]
}
 8007a70:	bf00      	nop
 8007a72:	e7fe      	b.n	8007a72 <xTaskGenericNotifyFromISR+0xea>
					break;
 8007a74:	bf00      	nop
 8007a76:	e000      	b.n	8007a7a <xTaskGenericNotifyFromISR+0xf2>
					break;
 8007a78:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8007a7a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007a7e:	2b01      	cmp	r3, #1
 8007a80:	d146      	bne.n	8007b10 <xTaskGenericNotifyFromISR+0x188>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8007a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d00a      	beq.n	8007aa0 <xTaskGenericNotifyFromISR+0x118>
	__asm volatile
 8007a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a8e:	f383 8811 	msr	BASEPRI, r3
 8007a92:	f3bf 8f6f 	isb	sy
 8007a96:	f3bf 8f4f 	dsb	sy
 8007a9a:	617b      	str	r3, [r7, #20]
}
 8007a9c:	bf00      	nop
 8007a9e:	e7fe      	b.n	8007a9e <xTaskGenericNotifyFromISR+0x116>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007aa0:	4b21      	ldr	r3, [pc, #132]	; (8007b28 <xTaskGenericNotifyFromISR+0x1a0>)
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d11d      	bne.n	8007ae4 <xTaskGenericNotifyFromISR+0x15c>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aaa:	3304      	adds	r3, #4
 8007aac:	4618      	mov	r0, r3
 8007aae:	f7fe f97f 	bl	8005db0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ab4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ab6:	4b1d      	ldr	r3, [pc, #116]	; (8007b2c <xTaskGenericNotifyFromISR+0x1a4>)
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	429a      	cmp	r2, r3
 8007abc:	d903      	bls.n	8007ac6 <xTaskGenericNotifyFromISR+0x13e>
 8007abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ac2:	4a1a      	ldr	r2, [pc, #104]	; (8007b2c <xTaskGenericNotifyFromISR+0x1a4>)
 8007ac4:	6013      	str	r3, [r2, #0]
 8007ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ac8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007aca:	4613      	mov	r3, r2
 8007acc:	009b      	lsls	r3, r3, #2
 8007ace:	4413      	add	r3, r2
 8007ad0:	009b      	lsls	r3, r3, #2
 8007ad2:	4a17      	ldr	r2, [pc, #92]	; (8007b30 <xTaskGenericNotifyFromISR+0x1a8>)
 8007ad4:	441a      	add	r2, r3
 8007ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ad8:	3304      	adds	r3, #4
 8007ada:	4619      	mov	r1, r3
 8007adc:	4610      	mov	r0, r2
 8007ade:	f7fe f90a 	bl	8005cf6 <vListInsertEnd>
 8007ae2:	e005      	b.n	8007af0 <xTaskGenericNotifyFromISR+0x168>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8007ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ae6:	3318      	adds	r3, #24
 8007ae8:	4619      	mov	r1, r3
 8007aea:	4812      	ldr	r0, [pc, #72]	; (8007b34 <xTaskGenericNotifyFromISR+0x1ac>)
 8007aec:	f7fe f903 	bl	8005cf6 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007af2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007af4:	4b10      	ldr	r3, [pc, #64]	; (8007b38 <xTaskGenericNotifyFromISR+0x1b0>)
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007afa:	429a      	cmp	r2, r3
 8007afc:	d908      	bls.n	8007b10 <xTaskGenericNotifyFromISR+0x188>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8007afe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d002      	beq.n	8007b0a <xTaskGenericNotifyFromISR+0x182>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8007b04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b06:	2201      	movs	r2, #1
 8007b08:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8007b0a:	4b0c      	ldr	r3, [pc, #48]	; (8007b3c <xTaskGenericNotifyFromISR+0x1b4>)
 8007b0c:	2201      	movs	r2, #1
 8007b0e:	601a      	str	r2, [r3, #0]
 8007b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b12:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007b14:	693b      	ldr	r3, [r7, #16]
 8007b16:	f383 8811 	msr	BASEPRI, r3
}
 8007b1a:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8007b1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8007b1e:	4618      	mov	r0, r3
 8007b20:	3738      	adds	r7, #56	; 0x38
 8007b22:	46bd      	mov	sp, r7
 8007b24:	bd80      	pop	{r7, pc}
 8007b26:	bf00      	nop
 8007b28:	20000f20 	.word	0x20000f20
 8007b2c:	20000f00 	.word	0x20000f00
 8007b30:	20000a28 	.word	0x20000a28
 8007b34:	20000eb8 	.word	0x20000eb8
 8007b38:	20000a24 	.word	0x20000a24
 8007b3c:	20000f0c 	.word	0x20000f0c

08007b40 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b084      	sub	sp, #16
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
 8007b48:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007b4a:	4b21      	ldr	r3, [pc, #132]	; (8007bd0 <prvAddCurrentTaskToDelayedList+0x90>)
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007b50:	4b20      	ldr	r3, [pc, #128]	; (8007bd4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	3304      	adds	r3, #4
 8007b56:	4618      	mov	r0, r3
 8007b58:	f7fe f92a 	bl	8005db0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007b62:	d10a      	bne.n	8007b7a <prvAddCurrentTaskToDelayedList+0x3a>
 8007b64:	683b      	ldr	r3, [r7, #0]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d007      	beq.n	8007b7a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007b6a:	4b1a      	ldr	r3, [pc, #104]	; (8007bd4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	3304      	adds	r3, #4
 8007b70:	4619      	mov	r1, r3
 8007b72:	4819      	ldr	r0, [pc, #100]	; (8007bd8 <prvAddCurrentTaskToDelayedList+0x98>)
 8007b74:	f7fe f8bf 	bl	8005cf6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007b78:	e026      	b.n	8007bc8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007b7a:	68fa      	ldr	r2, [r7, #12]
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	4413      	add	r3, r2
 8007b80:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007b82:	4b14      	ldr	r3, [pc, #80]	; (8007bd4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	68ba      	ldr	r2, [r7, #8]
 8007b88:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007b8a:	68ba      	ldr	r2, [r7, #8]
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	429a      	cmp	r2, r3
 8007b90:	d209      	bcs.n	8007ba6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007b92:	4b12      	ldr	r3, [pc, #72]	; (8007bdc <prvAddCurrentTaskToDelayedList+0x9c>)
 8007b94:	681a      	ldr	r2, [r3, #0]
 8007b96:	4b0f      	ldr	r3, [pc, #60]	; (8007bd4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	3304      	adds	r3, #4
 8007b9c:	4619      	mov	r1, r3
 8007b9e:	4610      	mov	r0, r2
 8007ba0:	f7fe f8cd 	bl	8005d3e <vListInsert>
}
 8007ba4:	e010      	b.n	8007bc8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007ba6:	4b0e      	ldr	r3, [pc, #56]	; (8007be0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007ba8:	681a      	ldr	r2, [r3, #0]
 8007baa:	4b0a      	ldr	r3, [pc, #40]	; (8007bd4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	3304      	adds	r3, #4
 8007bb0:	4619      	mov	r1, r3
 8007bb2:	4610      	mov	r0, r2
 8007bb4:	f7fe f8c3 	bl	8005d3e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007bb8:	4b0a      	ldr	r3, [pc, #40]	; (8007be4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	68ba      	ldr	r2, [r7, #8]
 8007bbe:	429a      	cmp	r2, r3
 8007bc0:	d202      	bcs.n	8007bc8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007bc2:	4a08      	ldr	r2, [pc, #32]	; (8007be4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007bc4:	68bb      	ldr	r3, [r7, #8]
 8007bc6:	6013      	str	r3, [r2, #0]
}
 8007bc8:	bf00      	nop
 8007bca:	3710      	adds	r7, #16
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	bd80      	pop	{r7, pc}
 8007bd0:	20000efc 	.word	0x20000efc
 8007bd4:	20000a24 	.word	0x20000a24
 8007bd8:	20000ee4 	.word	0x20000ee4
 8007bdc:	20000eb4 	.word	0x20000eb4
 8007be0:	20000eb0 	.word	0x20000eb0
 8007be4:	20000f18 	.word	0x20000f18

08007be8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b08a      	sub	sp, #40	; 0x28
 8007bec:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007bee:	2300      	movs	r3, #0
 8007bf0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007bf2:	f000 fb07 	bl	8008204 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007bf6:	4b1c      	ldr	r3, [pc, #112]	; (8007c68 <xTimerCreateTimerTask+0x80>)
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d021      	beq.n	8007c42 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007bfe:	2300      	movs	r3, #0
 8007c00:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007c02:	2300      	movs	r3, #0
 8007c04:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007c06:	1d3a      	adds	r2, r7, #4
 8007c08:	f107 0108 	add.w	r1, r7, #8
 8007c0c:	f107 030c 	add.w	r3, r7, #12
 8007c10:	4618      	mov	r0, r3
 8007c12:	f7fe f829 	bl	8005c68 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007c16:	6879      	ldr	r1, [r7, #4]
 8007c18:	68bb      	ldr	r3, [r7, #8]
 8007c1a:	68fa      	ldr	r2, [r7, #12]
 8007c1c:	9202      	str	r2, [sp, #8]
 8007c1e:	9301      	str	r3, [sp, #4]
 8007c20:	2302      	movs	r3, #2
 8007c22:	9300      	str	r3, [sp, #0]
 8007c24:	2300      	movs	r3, #0
 8007c26:	460a      	mov	r2, r1
 8007c28:	4910      	ldr	r1, [pc, #64]	; (8007c6c <xTimerCreateTimerTask+0x84>)
 8007c2a:	4811      	ldr	r0, [pc, #68]	; (8007c70 <xTimerCreateTimerTask+0x88>)
 8007c2c:	f7fe fef0 	bl	8006a10 <xTaskCreateStatic>
 8007c30:	4603      	mov	r3, r0
 8007c32:	4a10      	ldr	r2, [pc, #64]	; (8007c74 <xTimerCreateTimerTask+0x8c>)
 8007c34:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007c36:	4b0f      	ldr	r3, [pc, #60]	; (8007c74 <xTimerCreateTimerTask+0x8c>)
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d001      	beq.n	8007c42 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007c3e:	2301      	movs	r3, #1
 8007c40:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007c42:	697b      	ldr	r3, [r7, #20]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d10a      	bne.n	8007c5e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007c48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c4c:	f383 8811 	msr	BASEPRI, r3
 8007c50:	f3bf 8f6f 	isb	sy
 8007c54:	f3bf 8f4f 	dsb	sy
 8007c58:	613b      	str	r3, [r7, #16]
}
 8007c5a:	bf00      	nop
 8007c5c:	e7fe      	b.n	8007c5c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007c5e:	697b      	ldr	r3, [r7, #20]
}
 8007c60:	4618      	mov	r0, r3
 8007c62:	3718      	adds	r7, #24
 8007c64:	46bd      	mov	sp, r7
 8007c66:	bd80      	pop	{r7, pc}
 8007c68:	20000f54 	.word	0x20000f54
 8007c6c:	08009c60 	.word	0x08009c60
 8007c70:	08007dad 	.word	0x08007dad
 8007c74:	20000f58 	.word	0x20000f58

08007c78 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b08a      	sub	sp, #40	; 0x28
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	60f8      	str	r0, [r7, #12]
 8007c80:	60b9      	str	r1, [r7, #8]
 8007c82:	607a      	str	r2, [r7, #4]
 8007c84:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007c86:	2300      	movs	r3, #0
 8007c88:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d10a      	bne.n	8007ca6 <xTimerGenericCommand+0x2e>
	__asm volatile
 8007c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c94:	f383 8811 	msr	BASEPRI, r3
 8007c98:	f3bf 8f6f 	isb	sy
 8007c9c:	f3bf 8f4f 	dsb	sy
 8007ca0:	623b      	str	r3, [r7, #32]
}
 8007ca2:	bf00      	nop
 8007ca4:	e7fe      	b.n	8007ca4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007ca6:	4b1a      	ldr	r3, [pc, #104]	; (8007d10 <xTimerGenericCommand+0x98>)
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d02a      	beq.n	8007d04 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007cae:	68bb      	ldr	r3, [r7, #8]
 8007cb0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007cba:	68bb      	ldr	r3, [r7, #8]
 8007cbc:	2b05      	cmp	r3, #5
 8007cbe:	dc18      	bgt.n	8007cf2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007cc0:	f7ff fcc4 	bl	800764c <xTaskGetSchedulerState>
 8007cc4:	4603      	mov	r3, r0
 8007cc6:	2b02      	cmp	r3, #2
 8007cc8:	d109      	bne.n	8007cde <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007cca:	4b11      	ldr	r3, [pc, #68]	; (8007d10 <xTimerGenericCommand+0x98>)
 8007ccc:	6818      	ldr	r0, [r3, #0]
 8007cce:	f107 0110 	add.w	r1, r7, #16
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007cd6:	f7fe f9d3 	bl	8006080 <xQueueGenericSend>
 8007cda:	6278      	str	r0, [r7, #36]	; 0x24
 8007cdc:	e012      	b.n	8007d04 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007cde:	4b0c      	ldr	r3, [pc, #48]	; (8007d10 <xTimerGenericCommand+0x98>)
 8007ce0:	6818      	ldr	r0, [r3, #0]
 8007ce2:	f107 0110 	add.w	r1, r7, #16
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	2200      	movs	r2, #0
 8007cea:	f7fe f9c9 	bl	8006080 <xQueueGenericSend>
 8007cee:	6278      	str	r0, [r7, #36]	; 0x24
 8007cf0:	e008      	b.n	8007d04 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007cf2:	4b07      	ldr	r3, [pc, #28]	; (8007d10 <xTimerGenericCommand+0x98>)
 8007cf4:	6818      	ldr	r0, [r3, #0]
 8007cf6:	f107 0110 	add.w	r1, r7, #16
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	683a      	ldr	r2, [r7, #0]
 8007cfe:	f7fe fabd 	bl	800627c <xQueueGenericSendFromISR>
 8007d02:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007d06:	4618      	mov	r0, r3
 8007d08:	3728      	adds	r7, #40	; 0x28
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	bd80      	pop	{r7, pc}
 8007d0e:	bf00      	nop
 8007d10:	20000f54 	.word	0x20000f54

08007d14 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007d14:	b580      	push	{r7, lr}
 8007d16:	b088      	sub	sp, #32
 8007d18:	af02      	add	r7, sp, #8
 8007d1a:	6078      	str	r0, [r7, #4]
 8007d1c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d1e:	4b22      	ldr	r3, [pc, #136]	; (8007da8 <prvProcessExpiredTimer+0x94>)
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	68db      	ldr	r3, [r3, #12]
 8007d24:	68db      	ldr	r3, [r3, #12]
 8007d26:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007d28:	697b      	ldr	r3, [r7, #20]
 8007d2a:	3304      	adds	r3, #4
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	f7fe f83f 	bl	8005db0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007d32:	697b      	ldr	r3, [r7, #20]
 8007d34:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007d38:	f003 0304 	and.w	r3, r3, #4
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d022      	beq.n	8007d86 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007d40:	697b      	ldr	r3, [r7, #20]
 8007d42:	699a      	ldr	r2, [r3, #24]
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	18d1      	adds	r1, r2, r3
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	683a      	ldr	r2, [r7, #0]
 8007d4c:	6978      	ldr	r0, [r7, #20]
 8007d4e:	f000 f8d1 	bl	8007ef4 <prvInsertTimerInActiveList>
 8007d52:	4603      	mov	r3, r0
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d01f      	beq.n	8007d98 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007d58:	2300      	movs	r3, #0
 8007d5a:	9300      	str	r3, [sp, #0]
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	687a      	ldr	r2, [r7, #4]
 8007d60:	2100      	movs	r1, #0
 8007d62:	6978      	ldr	r0, [r7, #20]
 8007d64:	f7ff ff88 	bl	8007c78 <xTimerGenericCommand>
 8007d68:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007d6a:	693b      	ldr	r3, [r7, #16]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d113      	bne.n	8007d98 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8007d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d74:	f383 8811 	msr	BASEPRI, r3
 8007d78:	f3bf 8f6f 	isb	sy
 8007d7c:	f3bf 8f4f 	dsb	sy
 8007d80:	60fb      	str	r3, [r7, #12]
}
 8007d82:	bf00      	nop
 8007d84:	e7fe      	b.n	8007d84 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007d86:	697b      	ldr	r3, [r7, #20]
 8007d88:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007d8c:	f023 0301 	bic.w	r3, r3, #1
 8007d90:	b2da      	uxtb	r2, r3
 8007d92:	697b      	ldr	r3, [r7, #20]
 8007d94:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007d98:	697b      	ldr	r3, [r7, #20]
 8007d9a:	6a1b      	ldr	r3, [r3, #32]
 8007d9c:	6978      	ldr	r0, [r7, #20]
 8007d9e:	4798      	blx	r3
}
 8007da0:	bf00      	nop
 8007da2:	3718      	adds	r7, #24
 8007da4:	46bd      	mov	sp, r7
 8007da6:	bd80      	pop	{r7, pc}
 8007da8:	20000f4c 	.word	0x20000f4c

08007dac <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007dac:	b580      	push	{r7, lr}
 8007dae:	b084      	sub	sp, #16
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007db4:	f107 0308 	add.w	r3, r7, #8
 8007db8:	4618      	mov	r0, r3
 8007dba:	f000 f857 	bl	8007e6c <prvGetNextExpireTime>
 8007dbe:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007dc0:	68bb      	ldr	r3, [r7, #8]
 8007dc2:	4619      	mov	r1, r3
 8007dc4:	68f8      	ldr	r0, [r7, #12]
 8007dc6:	f000 f803 	bl	8007dd0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007dca:	f000 f8d5 	bl	8007f78 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007dce:	e7f1      	b.n	8007db4 <prvTimerTask+0x8>

08007dd0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b084      	sub	sp, #16
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
 8007dd8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007dda:	f7ff f855 	bl	8006e88 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007dde:	f107 0308 	add.w	r3, r7, #8
 8007de2:	4618      	mov	r0, r3
 8007de4:	f000 f866 	bl	8007eb4 <prvSampleTimeNow>
 8007de8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007dea:	68bb      	ldr	r3, [r7, #8]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d130      	bne.n	8007e52 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007df0:	683b      	ldr	r3, [r7, #0]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d10a      	bne.n	8007e0c <prvProcessTimerOrBlockTask+0x3c>
 8007df6:	687a      	ldr	r2, [r7, #4]
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	429a      	cmp	r2, r3
 8007dfc:	d806      	bhi.n	8007e0c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007dfe:	f7ff f851 	bl	8006ea4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007e02:	68f9      	ldr	r1, [r7, #12]
 8007e04:	6878      	ldr	r0, [r7, #4]
 8007e06:	f7ff ff85 	bl	8007d14 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007e0a:	e024      	b.n	8007e56 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d008      	beq.n	8007e24 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007e12:	4b13      	ldr	r3, [pc, #76]	; (8007e60 <prvProcessTimerOrBlockTask+0x90>)
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d101      	bne.n	8007e20 <prvProcessTimerOrBlockTask+0x50>
 8007e1c:	2301      	movs	r3, #1
 8007e1e:	e000      	b.n	8007e22 <prvProcessTimerOrBlockTask+0x52>
 8007e20:	2300      	movs	r3, #0
 8007e22:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007e24:	4b0f      	ldr	r3, [pc, #60]	; (8007e64 <prvProcessTimerOrBlockTask+0x94>)
 8007e26:	6818      	ldr	r0, [r3, #0]
 8007e28:	687a      	ldr	r2, [r7, #4]
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	1ad3      	subs	r3, r2, r3
 8007e2e:	683a      	ldr	r2, [r7, #0]
 8007e30:	4619      	mov	r1, r3
 8007e32:	f7fe fdb9 	bl	80069a8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007e36:	f7ff f835 	bl	8006ea4 <xTaskResumeAll>
 8007e3a:	4603      	mov	r3, r0
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d10a      	bne.n	8007e56 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007e40:	4b09      	ldr	r3, [pc, #36]	; (8007e68 <prvProcessTimerOrBlockTask+0x98>)
 8007e42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e46:	601a      	str	r2, [r3, #0]
 8007e48:	f3bf 8f4f 	dsb	sy
 8007e4c:	f3bf 8f6f 	isb	sy
}
 8007e50:	e001      	b.n	8007e56 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007e52:	f7ff f827 	bl	8006ea4 <xTaskResumeAll>
}
 8007e56:	bf00      	nop
 8007e58:	3710      	adds	r7, #16
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	bd80      	pop	{r7, pc}
 8007e5e:	bf00      	nop
 8007e60:	20000f50 	.word	0x20000f50
 8007e64:	20000f54 	.word	0x20000f54
 8007e68:	e000ed04 	.word	0xe000ed04

08007e6c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007e6c:	b480      	push	{r7}
 8007e6e:	b085      	sub	sp, #20
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007e74:	4b0e      	ldr	r3, [pc, #56]	; (8007eb0 <prvGetNextExpireTime+0x44>)
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d101      	bne.n	8007e82 <prvGetNextExpireTime+0x16>
 8007e7e:	2201      	movs	r2, #1
 8007e80:	e000      	b.n	8007e84 <prvGetNextExpireTime+0x18>
 8007e82:	2200      	movs	r2, #0
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d105      	bne.n	8007e9c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007e90:	4b07      	ldr	r3, [pc, #28]	; (8007eb0 <prvGetNextExpireTime+0x44>)
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	68db      	ldr	r3, [r3, #12]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	60fb      	str	r3, [r7, #12]
 8007e9a:	e001      	b.n	8007ea0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007ea0:	68fb      	ldr	r3, [r7, #12]
}
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	3714      	adds	r7, #20
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eac:	4770      	bx	lr
 8007eae:	bf00      	nop
 8007eb0:	20000f4c 	.word	0x20000f4c

08007eb4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	b084      	sub	sp, #16
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007ebc:	f7ff f890 	bl	8006fe0 <xTaskGetTickCount>
 8007ec0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007ec2:	4b0b      	ldr	r3, [pc, #44]	; (8007ef0 <prvSampleTimeNow+0x3c>)
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	68fa      	ldr	r2, [r7, #12]
 8007ec8:	429a      	cmp	r2, r3
 8007eca:	d205      	bcs.n	8007ed8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007ecc:	f000 f936 	bl	800813c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	2201      	movs	r2, #1
 8007ed4:	601a      	str	r2, [r3, #0]
 8007ed6:	e002      	b.n	8007ede <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	2200      	movs	r2, #0
 8007edc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007ede:	4a04      	ldr	r2, [pc, #16]	; (8007ef0 <prvSampleTimeNow+0x3c>)
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007ee4:	68fb      	ldr	r3, [r7, #12]
}
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	3710      	adds	r7, #16
 8007eea:	46bd      	mov	sp, r7
 8007eec:	bd80      	pop	{r7, pc}
 8007eee:	bf00      	nop
 8007ef0:	20000f5c 	.word	0x20000f5c

08007ef4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b086      	sub	sp, #24
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	60f8      	str	r0, [r7, #12]
 8007efc:	60b9      	str	r1, [r7, #8]
 8007efe:	607a      	str	r2, [r7, #4]
 8007f00:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007f02:	2300      	movs	r3, #0
 8007f04:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	68ba      	ldr	r2, [r7, #8]
 8007f0a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	68fa      	ldr	r2, [r7, #12]
 8007f10:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007f12:	68ba      	ldr	r2, [r7, #8]
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	429a      	cmp	r2, r3
 8007f18:	d812      	bhi.n	8007f40 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f1a:	687a      	ldr	r2, [r7, #4]
 8007f1c:	683b      	ldr	r3, [r7, #0]
 8007f1e:	1ad2      	subs	r2, r2, r3
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	699b      	ldr	r3, [r3, #24]
 8007f24:	429a      	cmp	r2, r3
 8007f26:	d302      	bcc.n	8007f2e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007f28:	2301      	movs	r3, #1
 8007f2a:	617b      	str	r3, [r7, #20]
 8007f2c:	e01b      	b.n	8007f66 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007f2e:	4b10      	ldr	r3, [pc, #64]	; (8007f70 <prvInsertTimerInActiveList+0x7c>)
 8007f30:	681a      	ldr	r2, [r3, #0]
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	3304      	adds	r3, #4
 8007f36:	4619      	mov	r1, r3
 8007f38:	4610      	mov	r0, r2
 8007f3a:	f7fd ff00 	bl	8005d3e <vListInsert>
 8007f3e:	e012      	b.n	8007f66 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007f40:	687a      	ldr	r2, [r7, #4]
 8007f42:	683b      	ldr	r3, [r7, #0]
 8007f44:	429a      	cmp	r2, r3
 8007f46:	d206      	bcs.n	8007f56 <prvInsertTimerInActiveList+0x62>
 8007f48:	68ba      	ldr	r2, [r7, #8]
 8007f4a:	683b      	ldr	r3, [r7, #0]
 8007f4c:	429a      	cmp	r2, r3
 8007f4e:	d302      	bcc.n	8007f56 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007f50:	2301      	movs	r3, #1
 8007f52:	617b      	str	r3, [r7, #20]
 8007f54:	e007      	b.n	8007f66 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007f56:	4b07      	ldr	r3, [pc, #28]	; (8007f74 <prvInsertTimerInActiveList+0x80>)
 8007f58:	681a      	ldr	r2, [r3, #0]
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	3304      	adds	r3, #4
 8007f5e:	4619      	mov	r1, r3
 8007f60:	4610      	mov	r0, r2
 8007f62:	f7fd feec 	bl	8005d3e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007f66:	697b      	ldr	r3, [r7, #20]
}
 8007f68:	4618      	mov	r0, r3
 8007f6a:	3718      	adds	r7, #24
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	bd80      	pop	{r7, pc}
 8007f70:	20000f50 	.word	0x20000f50
 8007f74:	20000f4c 	.word	0x20000f4c

08007f78 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b08e      	sub	sp, #56	; 0x38
 8007f7c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007f7e:	e0ca      	b.n	8008116 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	da18      	bge.n	8007fb8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007f86:	1d3b      	adds	r3, r7, #4
 8007f88:	3304      	adds	r3, #4
 8007f8a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007f8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d10a      	bne.n	8007fa8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8007f92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f96:	f383 8811 	msr	BASEPRI, r3
 8007f9a:	f3bf 8f6f 	isb	sy
 8007f9e:	f3bf 8f4f 	dsb	sy
 8007fa2:	61fb      	str	r3, [r7, #28]
}
 8007fa4:	bf00      	nop
 8007fa6:	e7fe      	b.n	8007fa6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007fa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007fae:	6850      	ldr	r0, [r2, #4]
 8007fb0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007fb2:	6892      	ldr	r2, [r2, #8]
 8007fb4:	4611      	mov	r1, r2
 8007fb6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	f2c0 80aa 	blt.w	8008114 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fc6:	695b      	ldr	r3, [r3, #20]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d004      	beq.n	8007fd6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fce:	3304      	adds	r3, #4
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	f7fd feed 	bl	8005db0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007fd6:	463b      	mov	r3, r7
 8007fd8:	4618      	mov	r0, r3
 8007fda:	f7ff ff6b 	bl	8007eb4 <prvSampleTimeNow>
 8007fde:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2b09      	cmp	r3, #9
 8007fe4:	f200 8097 	bhi.w	8008116 <prvProcessReceivedCommands+0x19e>
 8007fe8:	a201      	add	r2, pc, #4	; (adr r2, 8007ff0 <prvProcessReceivedCommands+0x78>)
 8007fea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fee:	bf00      	nop
 8007ff0:	08008019 	.word	0x08008019
 8007ff4:	08008019 	.word	0x08008019
 8007ff8:	08008019 	.word	0x08008019
 8007ffc:	0800808d 	.word	0x0800808d
 8008000:	080080a1 	.word	0x080080a1
 8008004:	080080eb 	.word	0x080080eb
 8008008:	08008019 	.word	0x08008019
 800800c:	08008019 	.word	0x08008019
 8008010:	0800808d 	.word	0x0800808d
 8008014:	080080a1 	.word	0x080080a1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800801a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800801e:	f043 0301 	orr.w	r3, r3, #1
 8008022:	b2da      	uxtb	r2, r3
 8008024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008026:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800802a:	68ba      	ldr	r2, [r7, #8]
 800802c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800802e:	699b      	ldr	r3, [r3, #24]
 8008030:	18d1      	adds	r1, r2, r3
 8008032:	68bb      	ldr	r3, [r7, #8]
 8008034:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008036:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008038:	f7ff ff5c 	bl	8007ef4 <prvInsertTimerInActiveList>
 800803c:	4603      	mov	r3, r0
 800803e:	2b00      	cmp	r3, #0
 8008040:	d069      	beq.n	8008116 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008044:	6a1b      	ldr	r3, [r3, #32]
 8008046:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008048:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800804a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800804c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008050:	f003 0304 	and.w	r3, r3, #4
 8008054:	2b00      	cmp	r3, #0
 8008056:	d05e      	beq.n	8008116 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008058:	68ba      	ldr	r2, [r7, #8]
 800805a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800805c:	699b      	ldr	r3, [r3, #24]
 800805e:	441a      	add	r2, r3
 8008060:	2300      	movs	r3, #0
 8008062:	9300      	str	r3, [sp, #0]
 8008064:	2300      	movs	r3, #0
 8008066:	2100      	movs	r1, #0
 8008068:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800806a:	f7ff fe05 	bl	8007c78 <xTimerGenericCommand>
 800806e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008070:	6a3b      	ldr	r3, [r7, #32]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d14f      	bne.n	8008116 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8008076:	f04f 0350 	mov.w	r3, #80	; 0x50
 800807a:	f383 8811 	msr	BASEPRI, r3
 800807e:	f3bf 8f6f 	isb	sy
 8008082:	f3bf 8f4f 	dsb	sy
 8008086:	61bb      	str	r3, [r7, #24]
}
 8008088:	bf00      	nop
 800808a:	e7fe      	b.n	800808a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800808c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800808e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008092:	f023 0301 	bic.w	r3, r3, #1
 8008096:	b2da      	uxtb	r2, r3
 8008098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800809a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800809e:	e03a      	b.n	8008116 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80080a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80080a6:	f043 0301 	orr.w	r3, r3, #1
 80080aa:	b2da      	uxtb	r2, r3
 80080ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80080b2:	68ba      	ldr	r2, [r7, #8]
 80080b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080b6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80080b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080ba:	699b      	ldr	r3, [r3, #24]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d10a      	bne.n	80080d6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80080c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080c4:	f383 8811 	msr	BASEPRI, r3
 80080c8:	f3bf 8f6f 	isb	sy
 80080cc:	f3bf 8f4f 	dsb	sy
 80080d0:	617b      	str	r3, [r7, #20]
}
 80080d2:	bf00      	nop
 80080d4:	e7fe      	b.n	80080d4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80080d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080d8:	699a      	ldr	r2, [r3, #24]
 80080da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080dc:	18d1      	adds	r1, r2, r3
 80080de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80080e4:	f7ff ff06 	bl	8007ef4 <prvInsertTimerInActiveList>
					break;
 80080e8:	e015      	b.n	8008116 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80080ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80080f0:	f003 0302 	and.w	r3, r3, #2
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d103      	bne.n	8008100 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80080f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80080fa:	f000 fbe1 	bl	80088c0 <vPortFree>
 80080fe:	e00a      	b.n	8008116 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008102:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008106:	f023 0301 	bic.w	r3, r3, #1
 800810a:	b2da      	uxtb	r2, r3
 800810c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800810e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008112:	e000      	b.n	8008116 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008114:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008116:	4b08      	ldr	r3, [pc, #32]	; (8008138 <prvProcessReceivedCommands+0x1c0>)
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	1d39      	adds	r1, r7, #4
 800811c:	2200      	movs	r2, #0
 800811e:	4618      	mov	r0, r3
 8008120:	f7fe f948 	bl	80063b4 <xQueueReceive>
 8008124:	4603      	mov	r3, r0
 8008126:	2b00      	cmp	r3, #0
 8008128:	f47f af2a 	bne.w	8007f80 <prvProcessReceivedCommands+0x8>
	}
}
 800812c:	bf00      	nop
 800812e:	bf00      	nop
 8008130:	3730      	adds	r7, #48	; 0x30
 8008132:	46bd      	mov	sp, r7
 8008134:	bd80      	pop	{r7, pc}
 8008136:	bf00      	nop
 8008138:	20000f54 	.word	0x20000f54

0800813c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800813c:	b580      	push	{r7, lr}
 800813e:	b088      	sub	sp, #32
 8008140:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008142:	e048      	b.n	80081d6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008144:	4b2d      	ldr	r3, [pc, #180]	; (80081fc <prvSwitchTimerLists+0xc0>)
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	68db      	ldr	r3, [r3, #12]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800814e:	4b2b      	ldr	r3, [pc, #172]	; (80081fc <prvSwitchTimerLists+0xc0>)
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	68db      	ldr	r3, [r3, #12]
 8008154:	68db      	ldr	r3, [r3, #12]
 8008156:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	3304      	adds	r3, #4
 800815c:	4618      	mov	r0, r3
 800815e:	f7fd fe27 	bl	8005db0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	6a1b      	ldr	r3, [r3, #32]
 8008166:	68f8      	ldr	r0, [r7, #12]
 8008168:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008170:	f003 0304 	and.w	r3, r3, #4
 8008174:	2b00      	cmp	r3, #0
 8008176:	d02e      	beq.n	80081d6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	699b      	ldr	r3, [r3, #24]
 800817c:	693a      	ldr	r2, [r7, #16]
 800817e:	4413      	add	r3, r2
 8008180:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008182:	68ba      	ldr	r2, [r7, #8]
 8008184:	693b      	ldr	r3, [r7, #16]
 8008186:	429a      	cmp	r2, r3
 8008188:	d90e      	bls.n	80081a8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	68ba      	ldr	r2, [r7, #8]
 800818e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	68fa      	ldr	r2, [r7, #12]
 8008194:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008196:	4b19      	ldr	r3, [pc, #100]	; (80081fc <prvSwitchTimerLists+0xc0>)
 8008198:	681a      	ldr	r2, [r3, #0]
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	3304      	adds	r3, #4
 800819e:	4619      	mov	r1, r3
 80081a0:	4610      	mov	r0, r2
 80081a2:	f7fd fdcc 	bl	8005d3e <vListInsert>
 80081a6:	e016      	b.n	80081d6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80081a8:	2300      	movs	r3, #0
 80081aa:	9300      	str	r3, [sp, #0]
 80081ac:	2300      	movs	r3, #0
 80081ae:	693a      	ldr	r2, [r7, #16]
 80081b0:	2100      	movs	r1, #0
 80081b2:	68f8      	ldr	r0, [r7, #12]
 80081b4:	f7ff fd60 	bl	8007c78 <xTimerGenericCommand>
 80081b8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d10a      	bne.n	80081d6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80081c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081c4:	f383 8811 	msr	BASEPRI, r3
 80081c8:	f3bf 8f6f 	isb	sy
 80081cc:	f3bf 8f4f 	dsb	sy
 80081d0:	603b      	str	r3, [r7, #0]
}
 80081d2:	bf00      	nop
 80081d4:	e7fe      	b.n	80081d4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80081d6:	4b09      	ldr	r3, [pc, #36]	; (80081fc <prvSwitchTimerLists+0xc0>)
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d1b1      	bne.n	8008144 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80081e0:	4b06      	ldr	r3, [pc, #24]	; (80081fc <prvSwitchTimerLists+0xc0>)
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80081e6:	4b06      	ldr	r3, [pc, #24]	; (8008200 <prvSwitchTimerLists+0xc4>)
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	4a04      	ldr	r2, [pc, #16]	; (80081fc <prvSwitchTimerLists+0xc0>)
 80081ec:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80081ee:	4a04      	ldr	r2, [pc, #16]	; (8008200 <prvSwitchTimerLists+0xc4>)
 80081f0:	697b      	ldr	r3, [r7, #20]
 80081f2:	6013      	str	r3, [r2, #0]
}
 80081f4:	bf00      	nop
 80081f6:	3718      	adds	r7, #24
 80081f8:	46bd      	mov	sp, r7
 80081fa:	bd80      	pop	{r7, pc}
 80081fc:	20000f4c 	.word	0x20000f4c
 8008200:	20000f50 	.word	0x20000f50

08008204 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008204:	b580      	push	{r7, lr}
 8008206:	b082      	sub	sp, #8
 8008208:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800820a:	f000 f96b 	bl	80084e4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800820e:	4b15      	ldr	r3, [pc, #84]	; (8008264 <prvCheckForValidListAndQueue+0x60>)
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	2b00      	cmp	r3, #0
 8008214:	d120      	bne.n	8008258 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008216:	4814      	ldr	r0, [pc, #80]	; (8008268 <prvCheckForValidListAndQueue+0x64>)
 8008218:	f7fd fd40 	bl	8005c9c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800821c:	4813      	ldr	r0, [pc, #76]	; (800826c <prvCheckForValidListAndQueue+0x68>)
 800821e:	f7fd fd3d 	bl	8005c9c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008222:	4b13      	ldr	r3, [pc, #76]	; (8008270 <prvCheckForValidListAndQueue+0x6c>)
 8008224:	4a10      	ldr	r2, [pc, #64]	; (8008268 <prvCheckForValidListAndQueue+0x64>)
 8008226:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008228:	4b12      	ldr	r3, [pc, #72]	; (8008274 <prvCheckForValidListAndQueue+0x70>)
 800822a:	4a10      	ldr	r2, [pc, #64]	; (800826c <prvCheckForValidListAndQueue+0x68>)
 800822c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800822e:	2300      	movs	r3, #0
 8008230:	9300      	str	r3, [sp, #0]
 8008232:	4b11      	ldr	r3, [pc, #68]	; (8008278 <prvCheckForValidListAndQueue+0x74>)
 8008234:	4a11      	ldr	r2, [pc, #68]	; (800827c <prvCheckForValidListAndQueue+0x78>)
 8008236:	2110      	movs	r1, #16
 8008238:	200a      	movs	r0, #10
 800823a:	f7fd fe4b 	bl	8005ed4 <xQueueGenericCreateStatic>
 800823e:	4603      	mov	r3, r0
 8008240:	4a08      	ldr	r2, [pc, #32]	; (8008264 <prvCheckForValidListAndQueue+0x60>)
 8008242:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008244:	4b07      	ldr	r3, [pc, #28]	; (8008264 <prvCheckForValidListAndQueue+0x60>)
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	2b00      	cmp	r3, #0
 800824a:	d005      	beq.n	8008258 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800824c:	4b05      	ldr	r3, [pc, #20]	; (8008264 <prvCheckForValidListAndQueue+0x60>)
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	490b      	ldr	r1, [pc, #44]	; (8008280 <prvCheckForValidListAndQueue+0x7c>)
 8008252:	4618      	mov	r0, r3
 8008254:	f7fe fb7e 	bl	8006954 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008258:	f000 f974 	bl	8008544 <vPortExitCritical>
}
 800825c:	bf00      	nop
 800825e:	46bd      	mov	sp, r7
 8008260:	bd80      	pop	{r7, pc}
 8008262:	bf00      	nop
 8008264:	20000f54 	.word	0x20000f54
 8008268:	20000f24 	.word	0x20000f24
 800826c:	20000f38 	.word	0x20000f38
 8008270:	20000f4c 	.word	0x20000f4c
 8008274:	20000f50 	.word	0x20000f50
 8008278:	20001000 	.word	0x20001000
 800827c:	20000f60 	.word	0x20000f60
 8008280:	08009c68 	.word	0x08009c68

08008284 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008284:	b480      	push	{r7}
 8008286:	b085      	sub	sp, #20
 8008288:	af00      	add	r7, sp, #0
 800828a:	60f8      	str	r0, [r7, #12]
 800828c:	60b9      	str	r1, [r7, #8]
 800828e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	3b04      	subs	r3, #4
 8008294:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800829c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	3b04      	subs	r3, #4
 80082a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80082a4:	68bb      	ldr	r3, [r7, #8]
 80082a6:	f023 0201 	bic.w	r2, r3, #1
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	3b04      	subs	r3, #4
 80082b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80082b4:	4a0c      	ldr	r2, [pc, #48]	; (80082e8 <pxPortInitialiseStack+0x64>)
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	3b14      	subs	r3, #20
 80082be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80082c0:	687a      	ldr	r2, [r7, #4]
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	3b04      	subs	r3, #4
 80082ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	f06f 0202 	mvn.w	r2, #2
 80082d2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	3b20      	subs	r3, #32
 80082d8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80082da:	68fb      	ldr	r3, [r7, #12]
}
 80082dc:	4618      	mov	r0, r3
 80082de:	3714      	adds	r7, #20
 80082e0:	46bd      	mov	sp, r7
 80082e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e6:	4770      	bx	lr
 80082e8:	080082ed 	.word	0x080082ed

080082ec <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80082ec:	b480      	push	{r7}
 80082ee:	b085      	sub	sp, #20
 80082f0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80082f2:	2300      	movs	r3, #0
 80082f4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80082f6:	4b12      	ldr	r3, [pc, #72]	; (8008340 <prvTaskExitError+0x54>)
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80082fe:	d00a      	beq.n	8008316 <prvTaskExitError+0x2a>
	__asm volatile
 8008300:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008304:	f383 8811 	msr	BASEPRI, r3
 8008308:	f3bf 8f6f 	isb	sy
 800830c:	f3bf 8f4f 	dsb	sy
 8008310:	60fb      	str	r3, [r7, #12]
}
 8008312:	bf00      	nop
 8008314:	e7fe      	b.n	8008314 <prvTaskExitError+0x28>
	__asm volatile
 8008316:	f04f 0350 	mov.w	r3, #80	; 0x50
 800831a:	f383 8811 	msr	BASEPRI, r3
 800831e:	f3bf 8f6f 	isb	sy
 8008322:	f3bf 8f4f 	dsb	sy
 8008326:	60bb      	str	r3, [r7, #8]
}
 8008328:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800832a:	bf00      	nop
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2b00      	cmp	r3, #0
 8008330:	d0fc      	beq.n	800832c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008332:	bf00      	nop
 8008334:	bf00      	nop
 8008336:	3714      	adds	r7, #20
 8008338:	46bd      	mov	sp, r7
 800833a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833e:	4770      	bx	lr
 8008340:	2000010c 	.word	0x2000010c
	...

08008350 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008350:	4b07      	ldr	r3, [pc, #28]	; (8008370 <pxCurrentTCBConst2>)
 8008352:	6819      	ldr	r1, [r3, #0]
 8008354:	6808      	ldr	r0, [r1, #0]
 8008356:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800835a:	f380 8809 	msr	PSP, r0
 800835e:	f3bf 8f6f 	isb	sy
 8008362:	f04f 0000 	mov.w	r0, #0
 8008366:	f380 8811 	msr	BASEPRI, r0
 800836a:	4770      	bx	lr
 800836c:	f3af 8000 	nop.w

08008370 <pxCurrentTCBConst2>:
 8008370:	20000a24 	.word	0x20000a24
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008374:	bf00      	nop
 8008376:	bf00      	nop

08008378 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008378:	4808      	ldr	r0, [pc, #32]	; (800839c <prvPortStartFirstTask+0x24>)
 800837a:	6800      	ldr	r0, [r0, #0]
 800837c:	6800      	ldr	r0, [r0, #0]
 800837e:	f380 8808 	msr	MSP, r0
 8008382:	f04f 0000 	mov.w	r0, #0
 8008386:	f380 8814 	msr	CONTROL, r0
 800838a:	b662      	cpsie	i
 800838c:	b661      	cpsie	f
 800838e:	f3bf 8f4f 	dsb	sy
 8008392:	f3bf 8f6f 	isb	sy
 8008396:	df00      	svc	0
 8008398:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800839a:	bf00      	nop
 800839c:	e000ed08 	.word	0xe000ed08

080083a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80083a0:	b580      	push	{r7, lr}
 80083a2:	b086      	sub	sp, #24
 80083a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80083a6:	4b46      	ldr	r3, [pc, #280]	; (80084c0 <xPortStartScheduler+0x120>)
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	4a46      	ldr	r2, [pc, #280]	; (80084c4 <xPortStartScheduler+0x124>)
 80083ac:	4293      	cmp	r3, r2
 80083ae:	d10a      	bne.n	80083c6 <xPortStartScheduler+0x26>
	__asm volatile
 80083b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083b4:	f383 8811 	msr	BASEPRI, r3
 80083b8:	f3bf 8f6f 	isb	sy
 80083bc:	f3bf 8f4f 	dsb	sy
 80083c0:	613b      	str	r3, [r7, #16]
}
 80083c2:	bf00      	nop
 80083c4:	e7fe      	b.n	80083c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80083c6:	4b3e      	ldr	r3, [pc, #248]	; (80084c0 <xPortStartScheduler+0x120>)
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	4a3f      	ldr	r2, [pc, #252]	; (80084c8 <xPortStartScheduler+0x128>)
 80083cc:	4293      	cmp	r3, r2
 80083ce:	d10a      	bne.n	80083e6 <xPortStartScheduler+0x46>
	__asm volatile
 80083d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083d4:	f383 8811 	msr	BASEPRI, r3
 80083d8:	f3bf 8f6f 	isb	sy
 80083dc:	f3bf 8f4f 	dsb	sy
 80083e0:	60fb      	str	r3, [r7, #12]
}
 80083e2:	bf00      	nop
 80083e4:	e7fe      	b.n	80083e4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80083e6:	4b39      	ldr	r3, [pc, #228]	; (80084cc <xPortStartScheduler+0x12c>)
 80083e8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80083ea:	697b      	ldr	r3, [r7, #20]
 80083ec:	781b      	ldrb	r3, [r3, #0]
 80083ee:	b2db      	uxtb	r3, r3
 80083f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80083f2:	697b      	ldr	r3, [r7, #20]
 80083f4:	22ff      	movs	r2, #255	; 0xff
 80083f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80083f8:	697b      	ldr	r3, [r7, #20]
 80083fa:	781b      	ldrb	r3, [r3, #0]
 80083fc:	b2db      	uxtb	r3, r3
 80083fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008400:	78fb      	ldrb	r3, [r7, #3]
 8008402:	b2db      	uxtb	r3, r3
 8008404:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008408:	b2da      	uxtb	r2, r3
 800840a:	4b31      	ldr	r3, [pc, #196]	; (80084d0 <xPortStartScheduler+0x130>)
 800840c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800840e:	4b31      	ldr	r3, [pc, #196]	; (80084d4 <xPortStartScheduler+0x134>)
 8008410:	2207      	movs	r2, #7
 8008412:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008414:	e009      	b.n	800842a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008416:	4b2f      	ldr	r3, [pc, #188]	; (80084d4 <xPortStartScheduler+0x134>)
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	3b01      	subs	r3, #1
 800841c:	4a2d      	ldr	r2, [pc, #180]	; (80084d4 <xPortStartScheduler+0x134>)
 800841e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008420:	78fb      	ldrb	r3, [r7, #3]
 8008422:	b2db      	uxtb	r3, r3
 8008424:	005b      	lsls	r3, r3, #1
 8008426:	b2db      	uxtb	r3, r3
 8008428:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800842a:	78fb      	ldrb	r3, [r7, #3]
 800842c:	b2db      	uxtb	r3, r3
 800842e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008432:	2b80      	cmp	r3, #128	; 0x80
 8008434:	d0ef      	beq.n	8008416 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008436:	4b27      	ldr	r3, [pc, #156]	; (80084d4 <xPortStartScheduler+0x134>)
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	f1c3 0307 	rsb	r3, r3, #7
 800843e:	2b04      	cmp	r3, #4
 8008440:	d00a      	beq.n	8008458 <xPortStartScheduler+0xb8>
	__asm volatile
 8008442:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008446:	f383 8811 	msr	BASEPRI, r3
 800844a:	f3bf 8f6f 	isb	sy
 800844e:	f3bf 8f4f 	dsb	sy
 8008452:	60bb      	str	r3, [r7, #8]
}
 8008454:	bf00      	nop
 8008456:	e7fe      	b.n	8008456 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008458:	4b1e      	ldr	r3, [pc, #120]	; (80084d4 <xPortStartScheduler+0x134>)
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	021b      	lsls	r3, r3, #8
 800845e:	4a1d      	ldr	r2, [pc, #116]	; (80084d4 <xPortStartScheduler+0x134>)
 8008460:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008462:	4b1c      	ldr	r3, [pc, #112]	; (80084d4 <xPortStartScheduler+0x134>)
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800846a:	4a1a      	ldr	r2, [pc, #104]	; (80084d4 <xPortStartScheduler+0x134>)
 800846c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	b2da      	uxtb	r2, r3
 8008472:	697b      	ldr	r3, [r7, #20]
 8008474:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008476:	4b18      	ldr	r3, [pc, #96]	; (80084d8 <xPortStartScheduler+0x138>)
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	4a17      	ldr	r2, [pc, #92]	; (80084d8 <xPortStartScheduler+0x138>)
 800847c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008480:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008482:	4b15      	ldr	r3, [pc, #84]	; (80084d8 <xPortStartScheduler+0x138>)
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	4a14      	ldr	r2, [pc, #80]	; (80084d8 <xPortStartScheduler+0x138>)
 8008488:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800848c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800848e:	f000 f8dd 	bl	800864c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008492:	4b12      	ldr	r3, [pc, #72]	; (80084dc <xPortStartScheduler+0x13c>)
 8008494:	2200      	movs	r2, #0
 8008496:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008498:	f000 f8fc 	bl	8008694 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800849c:	4b10      	ldr	r3, [pc, #64]	; (80084e0 <xPortStartScheduler+0x140>)
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	4a0f      	ldr	r2, [pc, #60]	; (80084e0 <xPortStartScheduler+0x140>)
 80084a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80084a6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80084a8:	f7ff ff66 	bl	8008378 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80084ac:	f7fe fe62 	bl	8007174 <vTaskSwitchContext>
	prvTaskExitError();
 80084b0:	f7ff ff1c 	bl	80082ec <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80084b4:	2300      	movs	r3, #0
}
 80084b6:	4618      	mov	r0, r3
 80084b8:	3718      	adds	r7, #24
 80084ba:	46bd      	mov	sp, r7
 80084bc:	bd80      	pop	{r7, pc}
 80084be:	bf00      	nop
 80084c0:	e000ed00 	.word	0xe000ed00
 80084c4:	410fc271 	.word	0x410fc271
 80084c8:	410fc270 	.word	0x410fc270
 80084cc:	e000e400 	.word	0xe000e400
 80084d0:	20001050 	.word	0x20001050
 80084d4:	20001054 	.word	0x20001054
 80084d8:	e000ed20 	.word	0xe000ed20
 80084dc:	2000010c 	.word	0x2000010c
 80084e0:	e000ef34 	.word	0xe000ef34

080084e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80084e4:	b480      	push	{r7}
 80084e6:	b083      	sub	sp, #12
 80084e8:	af00      	add	r7, sp, #0
	__asm volatile
 80084ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084ee:	f383 8811 	msr	BASEPRI, r3
 80084f2:	f3bf 8f6f 	isb	sy
 80084f6:	f3bf 8f4f 	dsb	sy
 80084fa:	607b      	str	r3, [r7, #4]
}
 80084fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80084fe:	4b0f      	ldr	r3, [pc, #60]	; (800853c <vPortEnterCritical+0x58>)
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	3301      	adds	r3, #1
 8008504:	4a0d      	ldr	r2, [pc, #52]	; (800853c <vPortEnterCritical+0x58>)
 8008506:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008508:	4b0c      	ldr	r3, [pc, #48]	; (800853c <vPortEnterCritical+0x58>)
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	2b01      	cmp	r3, #1
 800850e:	d10f      	bne.n	8008530 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008510:	4b0b      	ldr	r3, [pc, #44]	; (8008540 <vPortEnterCritical+0x5c>)
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	b2db      	uxtb	r3, r3
 8008516:	2b00      	cmp	r3, #0
 8008518:	d00a      	beq.n	8008530 <vPortEnterCritical+0x4c>
	__asm volatile
 800851a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800851e:	f383 8811 	msr	BASEPRI, r3
 8008522:	f3bf 8f6f 	isb	sy
 8008526:	f3bf 8f4f 	dsb	sy
 800852a:	603b      	str	r3, [r7, #0]
}
 800852c:	bf00      	nop
 800852e:	e7fe      	b.n	800852e <vPortEnterCritical+0x4a>
	}
}
 8008530:	bf00      	nop
 8008532:	370c      	adds	r7, #12
 8008534:	46bd      	mov	sp, r7
 8008536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853a:	4770      	bx	lr
 800853c:	2000010c 	.word	0x2000010c
 8008540:	e000ed04 	.word	0xe000ed04

08008544 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008544:	b480      	push	{r7}
 8008546:	b083      	sub	sp, #12
 8008548:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800854a:	4b12      	ldr	r3, [pc, #72]	; (8008594 <vPortExitCritical+0x50>)
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	2b00      	cmp	r3, #0
 8008550:	d10a      	bne.n	8008568 <vPortExitCritical+0x24>
	__asm volatile
 8008552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008556:	f383 8811 	msr	BASEPRI, r3
 800855a:	f3bf 8f6f 	isb	sy
 800855e:	f3bf 8f4f 	dsb	sy
 8008562:	607b      	str	r3, [r7, #4]
}
 8008564:	bf00      	nop
 8008566:	e7fe      	b.n	8008566 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008568:	4b0a      	ldr	r3, [pc, #40]	; (8008594 <vPortExitCritical+0x50>)
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	3b01      	subs	r3, #1
 800856e:	4a09      	ldr	r2, [pc, #36]	; (8008594 <vPortExitCritical+0x50>)
 8008570:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008572:	4b08      	ldr	r3, [pc, #32]	; (8008594 <vPortExitCritical+0x50>)
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	2b00      	cmp	r3, #0
 8008578:	d105      	bne.n	8008586 <vPortExitCritical+0x42>
 800857a:	2300      	movs	r3, #0
 800857c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800857e:	683b      	ldr	r3, [r7, #0]
 8008580:	f383 8811 	msr	BASEPRI, r3
}
 8008584:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008586:	bf00      	nop
 8008588:	370c      	adds	r7, #12
 800858a:	46bd      	mov	sp, r7
 800858c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008590:	4770      	bx	lr
 8008592:	bf00      	nop
 8008594:	2000010c 	.word	0x2000010c
	...

080085a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80085a0:	f3ef 8009 	mrs	r0, PSP
 80085a4:	f3bf 8f6f 	isb	sy
 80085a8:	4b15      	ldr	r3, [pc, #84]	; (8008600 <pxCurrentTCBConst>)
 80085aa:	681a      	ldr	r2, [r3, #0]
 80085ac:	f01e 0f10 	tst.w	lr, #16
 80085b0:	bf08      	it	eq
 80085b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80085b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085ba:	6010      	str	r0, [r2, #0]
 80085bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80085c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80085c4:	f380 8811 	msr	BASEPRI, r0
 80085c8:	f3bf 8f4f 	dsb	sy
 80085cc:	f3bf 8f6f 	isb	sy
 80085d0:	f7fe fdd0 	bl	8007174 <vTaskSwitchContext>
 80085d4:	f04f 0000 	mov.w	r0, #0
 80085d8:	f380 8811 	msr	BASEPRI, r0
 80085dc:	bc09      	pop	{r0, r3}
 80085de:	6819      	ldr	r1, [r3, #0]
 80085e0:	6808      	ldr	r0, [r1, #0]
 80085e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085e6:	f01e 0f10 	tst.w	lr, #16
 80085ea:	bf08      	it	eq
 80085ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80085f0:	f380 8809 	msr	PSP, r0
 80085f4:	f3bf 8f6f 	isb	sy
 80085f8:	4770      	bx	lr
 80085fa:	bf00      	nop
 80085fc:	f3af 8000 	nop.w

08008600 <pxCurrentTCBConst>:
 8008600:	20000a24 	.word	0x20000a24
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008604:	bf00      	nop
 8008606:	bf00      	nop

08008608 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008608:	b580      	push	{r7, lr}
 800860a:	b082      	sub	sp, #8
 800860c:	af00      	add	r7, sp, #0
	__asm volatile
 800860e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008612:	f383 8811 	msr	BASEPRI, r3
 8008616:	f3bf 8f6f 	isb	sy
 800861a:	f3bf 8f4f 	dsb	sy
 800861e:	607b      	str	r3, [r7, #4]
}
 8008620:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008622:	f7fe fced 	bl	8007000 <xTaskIncrementTick>
 8008626:	4603      	mov	r3, r0
 8008628:	2b00      	cmp	r3, #0
 800862a:	d003      	beq.n	8008634 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800862c:	4b06      	ldr	r3, [pc, #24]	; (8008648 <xPortSysTickHandler+0x40>)
 800862e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008632:	601a      	str	r2, [r3, #0]
 8008634:	2300      	movs	r3, #0
 8008636:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008638:	683b      	ldr	r3, [r7, #0]
 800863a:	f383 8811 	msr	BASEPRI, r3
}
 800863e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008640:	bf00      	nop
 8008642:	3708      	adds	r7, #8
 8008644:	46bd      	mov	sp, r7
 8008646:	bd80      	pop	{r7, pc}
 8008648:	e000ed04 	.word	0xe000ed04

0800864c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800864c:	b480      	push	{r7}
 800864e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008650:	4b0b      	ldr	r3, [pc, #44]	; (8008680 <vPortSetupTimerInterrupt+0x34>)
 8008652:	2200      	movs	r2, #0
 8008654:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008656:	4b0b      	ldr	r3, [pc, #44]	; (8008684 <vPortSetupTimerInterrupt+0x38>)
 8008658:	2200      	movs	r2, #0
 800865a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800865c:	4b0a      	ldr	r3, [pc, #40]	; (8008688 <vPortSetupTimerInterrupt+0x3c>)
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	4a0a      	ldr	r2, [pc, #40]	; (800868c <vPortSetupTimerInterrupt+0x40>)
 8008662:	fba2 2303 	umull	r2, r3, r2, r3
 8008666:	099b      	lsrs	r3, r3, #6
 8008668:	4a09      	ldr	r2, [pc, #36]	; (8008690 <vPortSetupTimerInterrupt+0x44>)
 800866a:	3b01      	subs	r3, #1
 800866c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800866e:	4b04      	ldr	r3, [pc, #16]	; (8008680 <vPortSetupTimerInterrupt+0x34>)
 8008670:	2207      	movs	r2, #7
 8008672:	601a      	str	r2, [r3, #0]
}
 8008674:	bf00      	nop
 8008676:	46bd      	mov	sp, r7
 8008678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867c:	4770      	bx	lr
 800867e:	bf00      	nop
 8008680:	e000e010 	.word	0xe000e010
 8008684:	e000e018 	.word	0xe000e018
 8008688:	20000100 	.word	0x20000100
 800868c:	10624dd3 	.word	0x10624dd3
 8008690:	e000e014 	.word	0xe000e014

08008694 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008694:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80086a4 <vPortEnableVFP+0x10>
 8008698:	6801      	ldr	r1, [r0, #0]
 800869a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800869e:	6001      	str	r1, [r0, #0]
 80086a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80086a2:	bf00      	nop
 80086a4:	e000ed88 	.word	0xe000ed88

080086a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80086a8:	b480      	push	{r7}
 80086aa:	b085      	sub	sp, #20
 80086ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80086ae:	f3ef 8305 	mrs	r3, IPSR
 80086b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	2b0f      	cmp	r3, #15
 80086b8:	d914      	bls.n	80086e4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80086ba:	4a17      	ldr	r2, [pc, #92]	; (8008718 <vPortValidateInterruptPriority+0x70>)
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	4413      	add	r3, r2
 80086c0:	781b      	ldrb	r3, [r3, #0]
 80086c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80086c4:	4b15      	ldr	r3, [pc, #84]	; (800871c <vPortValidateInterruptPriority+0x74>)
 80086c6:	781b      	ldrb	r3, [r3, #0]
 80086c8:	7afa      	ldrb	r2, [r7, #11]
 80086ca:	429a      	cmp	r2, r3
 80086cc:	d20a      	bcs.n	80086e4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80086ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086d2:	f383 8811 	msr	BASEPRI, r3
 80086d6:	f3bf 8f6f 	isb	sy
 80086da:	f3bf 8f4f 	dsb	sy
 80086de:	607b      	str	r3, [r7, #4]
}
 80086e0:	bf00      	nop
 80086e2:	e7fe      	b.n	80086e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80086e4:	4b0e      	ldr	r3, [pc, #56]	; (8008720 <vPortValidateInterruptPriority+0x78>)
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80086ec:	4b0d      	ldr	r3, [pc, #52]	; (8008724 <vPortValidateInterruptPriority+0x7c>)
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	429a      	cmp	r2, r3
 80086f2:	d90a      	bls.n	800870a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80086f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086f8:	f383 8811 	msr	BASEPRI, r3
 80086fc:	f3bf 8f6f 	isb	sy
 8008700:	f3bf 8f4f 	dsb	sy
 8008704:	603b      	str	r3, [r7, #0]
}
 8008706:	bf00      	nop
 8008708:	e7fe      	b.n	8008708 <vPortValidateInterruptPriority+0x60>
	}
 800870a:	bf00      	nop
 800870c:	3714      	adds	r7, #20
 800870e:	46bd      	mov	sp, r7
 8008710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008714:	4770      	bx	lr
 8008716:	bf00      	nop
 8008718:	e000e3f0 	.word	0xe000e3f0
 800871c:	20001050 	.word	0x20001050
 8008720:	e000ed0c 	.word	0xe000ed0c
 8008724:	20001054 	.word	0x20001054

08008728 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b08a      	sub	sp, #40	; 0x28
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008730:	2300      	movs	r3, #0
 8008732:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008734:	f7fe fba8 	bl	8006e88 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008738:	4b5b      	ldr	r3, [pc, #364]	; (80088a8 <pvPortMalloc+0x180>)
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	2b00      	cmp	r3, #0
 800873e:	d101      	bne.n	8008744 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008740:	f000 f920 	bl	8008984 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008744:	4b59      	ldr	r3, [pc, #356]	; (80088ac <pvPortMalloc+0x184>)
 8008746:	681a      	ldr	r2, [r3, #0]
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	4013      	ands	r3, r2
 800874c:	2b00      	cmp	r3, #0
 800874e:	f040 8093 	bne.w	8008878 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	2b00      	cmp	r3, #0
 8008756:	d01d      	beq.n	8008794 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008758:	2208      	movs	r2, #8
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	4413      	add	r3, r2
 800875e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	f003 0307 	and.w	r3, r3, #7
 8008766:	2b00      	cmp	r3, #0
 8008768:	d014      	beq.n	8008794 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	f023 0307 	bic.w	r3, r3, #7
 8008770:	3308      	adds	r3, #8
 8008772:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	f003 0307 	and.w	r3, r3, #7
 800877a:	2b00      	cmp	r3, #0
 800877c:	d00a      	beq.n	8008794 <pvPortMalloc+0x6c>
	__asm volatile
 800877e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008782:	f383 8811 	msr	BASEPRI, r3
 8008786:	f3bf 8f6f 	isb	sy
 800878a:	f3bf 8f4f 	dsb	sy
 800878e:	617b      	str	r3, [r7, #20]
}
 8008790:	bf00      	nop
 8008792:	e7fe      	b.n	8008792 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d06e      	beq.n	8008878 <pvPortMalloc+0x150>
 800879a:	4b45      	ldr	r3, [pc, #276]	; (80088b0 <pvPortMalloc+0x188>)
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	687a      	ldr	r2, [r7, #4]
 80087a0:	429a      	cmp	r2, r3
 80087a2:	d869      	bhi.n	8008878 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80087a4:	4b43      	ldr	r3, [pc, #268]	; (80088b4 <pvPortMalloc+0x18c>)
 80087a6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80087a8:	4b42      	ldr	r3, [pc, #264]	; (80088b4 <pvPortMalloc+0x18c>)
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80087ae:	e004      	b.n	80087ba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80087b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087b2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80087b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80087ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087bc:	685b      	ldr	r3, [r3, #4]
 80087be:	687a      	ldr	r2, [r7, #4]
 80087c0:	429a      	cmp	r2, r3
 80087c2:	d903      	bls.n	80087cc <pvPortMalloc+0xa4>
 80087c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d1f1      	bne.n	80087b0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80087cc:	4b36      	ldr	r3, [pc, #216]	; (80088a8 <pvPortMalloc+0x180>)
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087d2:	429a      	cmp	r2, r3
 80087d4:	d050      	beq.n	8008878 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80087d6:	6a3b      	ldr	r3, [r7, #32]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	2208      	movs	r2, #8
 80087dc:	4413      	add	r3, r2
 80087de:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80087e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087e2:	681a      	ldr	r2, [r3, #0]
 80087e4:	6a3b      	ldr	r3, [r7, #32]
 80087e6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80087e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087ea:	685a      	ldr	r2, [r3, #4]
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	1ad2      	subs	r2, r2, r3
 80087f0:	2308      	movs	r3, #8
 80087f2:	005b      	lsls	r3, r3, #1
 80087f4:	429a      	cmp	r2, r3
 80087f6:	d91f      	bls.n	8008838 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80087f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	4413      	add	r3, r2
 80087fe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008800:	69bb      	ldr	r3, [r7, #24]
 8008802:	f003 0307 	and.w	r3, r3, #7
 8008806:	2b00      	cmp	r3, #0
 8008808:	d00a      	beq.n	8008820 <pvPortMalloc+0xf8>
	__asm volatile
 800880a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800880e:	f383 8811 	msr	BASEPRI, r3
 8008812:	f3bf 8f6f 	isb	sy
 8008816:	f3bf 8f4f 	dsb	sy
 800881a:	613b      	str	r3, [r7, #16]
}
 800881c:	bf00      	nop
 800881e:	e7fe      	b.n	800881e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008822:	685a      	ldr	r2, [r3, #4]
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	1ad2      	subs	r2, r2, r3
 8008828:	69bb      	ldr	r3, [r7, #24]
 800882a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800882c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800882e:	687a      	ldr	r2, [r7, #4]
 8008830:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008832:	69b8      	ldr	r0, [r7, #24]
 8008834:	f000 f908 	bl	8008a48 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008838:	4b1d      	ldr	r3, [pc, #116]	; (80088b0 <pvPortMalloc+0x188>)
 800883a:	681a      	ldr	r2, [r3, #0]
 800883c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800883e:	685b      	ldr	r3, [r3, #4]
 8008840:	1ad3      	subs	r3, r2, r3
 8008842:	4a1b      	ldr	r2, [pc, #108]	; (80088b0 <pvPortMalloc+0x188>)
 8008844:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008846:	4b1a      	ldr	r3, [pc, #104]	; (80088b0 <pvPortMalloc+0x188>)
 8008848:	681a      	ldr	r2, [r3, #0]
 800884a:	4b1b      	ldr	r3, [pc, #108]	; (80088b8 <pvPortMalloc+0x190>)
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	429a      	cmp	r2, r3
 8008850:	d203      	bcs.n	800885a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008852:	4b17      	ldr	r3, [pc, #92]	; (80088b0 <pvPortMalloc+0x188>)
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	4a18      	ldr	r2, [pc, #96]	; (80088b8 <pvPortMalloc+0x190>)
 8008858:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800885a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800885c:	685a      	ldr	r2, [r3, #4]
 800885e:	4b13      	ldr	r3, [pc, #76]	; (80088ac <pvPortMalloc+0x184>)
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	431a      	orrs	r2, r3
 8008864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008866:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800886a:	2200      	movs	r2, #0
 800886c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800886e:	4b13      	ldr	r3, [pc, #76]	; (80088bc <pvPortMalloc+0x194>)
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	3301      	adds	r3, #1
 8008874:	4a11      	ldr	r2, [pc, #68]	; (80088bc <pvPortMalloc+0x194>)
 8008876:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008878:	f7fe fb14 	bl	8006ea4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800887c:	69fb      	ldr	r3, [r7, #28]
 800887e:	f003 0307 	and.w	r3, r3, #7
 8008882:	2b00      	cmp	r3, #0
 8008884:	d00a      	beq.n	800889c <pvPortMalloc+0x174>
	__asm volatile
 8008886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800888a:	f383 8811 	msr	BASEPRI, r3
 800888e:	f3bf 8f6f 	isb	sy
 8008892:	f3bf 8f4f 	dsb	sy
 8008896:	60fb      	str	r3, [r7, #12]
}
 8008898:	bf00      	nop
 800889a:	e7fe      	b.n	800889a <pvPortMalloc+0x172>
	return pvReturn;
 800889c:	69fb      	ldr	r3, [r7, #28]
}
 800889e:	4618      	mov	r0, r3
 80088a0:	3728      	adds	r7, #40	; 0x28
 80088a2:	46bd      	mov	sp, r7
 80088a4:	bd80      	pop	{r7, pc}
 80088a6:	bf00      	nop
 80088a8:	20004c60 	.word	0x20004c60
 80088ac:	20004c74 	.word	0x20004c74
 80088b0:	20004c64 	.word	0x20004c64
 80088b4:	20004c58 	.word	0x20004c58
 80088b8:	20004c68 	.word	0x20004c68
 80088bc:	20004c6c 	.word	0x20004c6c

080088c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b086      	sub	sp, #24
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d04d      	beq.n	800896e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80088d2:	2308      	movs	r3, #8
 80088d4:	425b      	negs	r3, r3
 80088d6:	697a      	ldr	r2, [r7, #20]
 80088d8:	4413      	add	r3, r2
 80088da:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80088dc:	697b      	ldr	r3, [r7, #20]
 80088de:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80088e0:	693b      	ldr	r3, [r7, #16]
 80088e2:	685a      	ldr	r2, [r3, #4]
 80088e4:	4b24      	ldr	r3, [pc, #144]	; (8008978 <vPortFree+0xb8>)
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	4013      	ands	r3, r2
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d10a      	bne.n	8008904 <vPortFree+0x44>
	__asm volatile
 80088ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088f2:	f383 8811 	msr	BASEPRI, r3
 80088f6:	f3bf 8f6f 	isb	sy
 80088fa:	f3bf 8f4f 	dsb	sy
 80088fe:	60fb      	str	r3, [r7, #12]
}
 8008900:	bf00      	nop
 8008902:	e7fe      	b.n	8008902 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008904:	693b      	ldr	r3, [r7, #16]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	2b00      	cmp	r3, #0
 800890a:	d00a      	beq.n	8008922 <vPortFree+0x62>
	__asm volatile
 800890c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008910:	f383 8811 	msr	BASEPRI, r3
 8008914:	f3bf 8f6f 	isb	sy
 8008918:	f3bf 8f4f 	dsb	sy
 800891c:	60bb      	str	r3, [r7, #8]
}
 800891e:	bf00      	nop
 8008920:	e7fe      	b.n	8008920 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008922:	693b      	ldr	r3, [r7, #16]
 8008924:	685a      	ldr	r2, [r3, #4]
 8008926:	4b14      	ldr	r3, [pc, #80]	; (8008978 <vPortFree+0xb8>)
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	4013      	ands	r3, r2
 800892c:	2b00      	cmp	r3, #0
 800892e:	d01e      	beq.n	800896e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008930:	693b      	ldr	r3, [r7, #16]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d11a      	bne.n	800896e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008938:	693b      	ldr	r3, [r7, #16]
 800893a:	685a      	ldr	r2, [r3, #4]
 800893c:	4b0e      	ldr	r3, [pc, #56]	; (8008978 <vPortFree+0xb8>)
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	43db      	mvns	r3, r3
 8008942:	401a      	ands	r2, r3
 8008944:	693b      	ldr	r3, [r7, #16]
 8008946:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008948:	f7fe fa9e 	bl	8006e88 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800894c:	693b      	ldr	r3, [r7, #16]
 800894e:	685a      	ldr	r2, [r3, #4]
 8008950:	4b0a      	ldr	r3, [pc, #40]	; (800897c <vPortFree+0xbc>)
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	4413      	add	r3, r2
 8008956:	4a09      	ldr	r2, [pc, #36]	; (800897c <vPortFree+0xbc>)
 8008958:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800895a:	6938      	ldr	r0, [r7, #16]
 800895c:	f000 f874 	bl	8008a48 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008960:	4b07      	ldr	r3, [pc, #28]	; (8008980 <vPortFree+0xc0>)
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	3301      	adds	r3, #1
 8008966:	4a06      	ldr	r2, [pc, #24]	; (8008980 <vPortFree+0xc0>)
 8008968:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800896a:	f7fe fa9b 	bl	8006ea4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800896e:	bf00      	nop
 8008970:	3718      	adds	r7, #24
 8008972:	46bd      	mov	sp, r7
 8008974:	bd80      	pop	{r7, pc}
 8008976:	bf00      	nop
 8008978:	20004c74 	.word	0x20004c74
 800897c:	20004c64 	.word	0x20004c64
 8008980:	20004c70 	.word	0x20004c70

08008984 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008984:	b480      	push	{r7}
 8008986:	b085      	sub	sp, #20
 8008988:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800898a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800898e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008990:	4b27      	ldr	r3, [pc, #156]	; (8008a30 <prvHeapInit+0xac>)
 8008992:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	f003 0307 	and.w	r3, r3, #7
 800899a:	2b00      	cmp	r3, #0
 800899c:	d00c      	beq.n	80089b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	3307      	adds	r3, #7
 80089a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	f023 0307 	bic.w	r3, r3, #7
 80089aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80089ac:	68ba      	ldr	r2, [r7, #8]
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	1ad3      	subs	r3, r2, r3
 80089b2:	4a1f      	ldr	r2, [pc, #124]	; (8008a30 <prvHeapInit+0xac>)
 80089b4:	4413      	add	r3, r2
 80089b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80089bc:	4a1d      	ldr	r2, [pc, #116]	; (8008a34 <prvHeapInit+0xb0>)
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80089c2:	4b1c      	ldr	r3, [pc, #112]	; (8008a34 <prvHeapInit+0xb0>)
 80089c4:	2200      	movs	r2, #0
 80089c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	68ba      	ldr	r2, [r7, #8]
 80089cc:	4413      	add	r3, r2
 80089ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80089d0:	2208      	movs	r2, #8
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	1a9b      	subs	r3, r3, r2
 80089d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	f023 0307 	bic.w	r3, r3, #7
 80089de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	4a15      	ldr	r2, [pc, #84]	; (8008a38 <prvHeapInit+0xb4>)
 80089e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80089e6:	4b14      	ldr	r3, [pc, #80]	; (8008a38 <prvHeapInit+0xb4>)
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	2200      	movs	r2, #0
 80089ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80089ee:	4b12      	ldr	r3, [pc, #72]	; (8008a38 <prvHeapInit+0xb4>)
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	2200      	movs	r2, #0
 80089f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80089fa:	683b      	ldr	r3, [r7, #0]
 80089fc:	68fa      	ldr	r2, [r7, #12]
 80089fe:	1ad2      	subs	r2, r2, r3
 8008a00:	683b      	ldr	r3, [r7, #0]
 8008a02:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008a04:	4b0c      	ldr	r3, [pc, #48]	; (8008a38 <prvHeapInit+0xb4>)
 8008a06:	681a      	ldr	r2, [r3, #0]
 8008a08:	683b      	ldr	r3, [r7, #0]
 8008a0a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008a0c:	683b      	ldr	r3, [r7, #0]
 8008a0e:	685b      	ldr	r3, [r3, #4]
 8008a10:	4a0a      	ldr	r2, [pc, #40]	; (8008a3c <prvHeapInit+0xb8>)
 8008a12:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008a14:	683b      	ldr	r3, [r7, #0]
 8008a16:	685b      	ldr	r3, [r3, #4]
 8008a18:	4a09      	ldr	r2, [pc, #36]	; (8008a40 <prvHeapInit+0xbc>)
 8008a1a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008a1c:	4b09      	ldr	r3, [pc, #36]	; (8008a44 <prvHeapInit+0xc0>)
 8008a1e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008a22:	601a      	str	r2, [r3, #0]
}
 8008a24:	bf00      	nop
 8008a26:	3714      	adds	r7, #20
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2e:	4770      	bx	lr
 8008a30:	20001058 	.word	0x20001058
 8008a34:	20004c58 	.word	0x20004c58
 8008a38:	20004c60 	.word	0x20004c60
 8008a3c:	20004c68 	.word	0x20004c68
 8008a40:	20004c64 	.word	0x20004c64
 8008a44:	20004c74 	.word	0x20004c74

08008a48 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008a48:	b480      	push	{r7}
 8008a4a:	b085      	sub	sp, #20
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008a50:	4b28      	ldr	r3, [pc, #160]	; (8008af4 <prvInsertBlockIntoFreeList+0xac>)
 8008a52:	60fb      	str	r3, [r7, #12]
 8008a54:	e002      	b.n	8008a5c <prvInsertBlockIntoFreeList+0x14>
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	60fb      	str	r3, [r7, #12]
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	687a      	ldr	r2, [r7, #4]
 8008a62:	429a      	cmp	r2, r3
 8008a64:	d8f7      	bhi.n	8008a56 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	685b      	ldr	r3, [r3, #4]
 8008a6e:	68ba      	ldr	r2, [r7, #8]
 8008a70:	4413      	add	r3, r2
 8008a72:	687a      	ldr	r2, [r7, #4]
 8008a74:	429a      	cmp	r2, r3
 8008a76:	d108      	bne.n	8008a8a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	685a      	ldr	r2, [r3, #4]
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	685b      	ldr	r3, [r3, #4]
 8008a80:	441a      	add	r2, r3
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	685b      	ldr	r3, [r3, #4]
 8008a92:	68ba      	ldr	r2, [r7, #8]
 8008a94:	441a      	add	r2, r3
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	429a      	cmp	r2, r3
 8008a9c:	d118      	bne.n	8008ad0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	681a      	ldr	r2, [r3, #0]
 8008aa2:	4b15      	ldr	r3, [pc, #84]	; (8008af8 <prvInsertBlockIntoFreeList+0xb0>)
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	429a      	cmp	r2, r3
 8008aa8:	d00d      	beq.n	8008ac6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	685a      	ldr	r2, [r3, #4]
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	685b      	ldr	r3, [r3, #4]
 8008ab4:	441a      	add	r2, r3
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	681a      	ldr	r2, [r3, #0]
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	601a      	str	r2, [r3, #0]
 8008ac4:	e008      	b.n	8008ad8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008ac6:	4b0c      	ldr	r3, [pc, #48]	; (8008af8 <prvInsertBlockIntoFreeList+0xb0>)
 8008ac8:	681a      	ldr	r2, [r3, #0]
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	601a      	str	r2, [r3, #0]
 8008ace:	e003      	b.n	8008ad8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	681a      	ldr	r2, [r3, #0]
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008ad8:	68fa      	ldr	r2, [r7, #12]
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	429a      	cmp	r2, r3
 8008ade:	d002      	beq.n	8008ae6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	687a      	ldr	r2, [r7, #4]
 8008ae4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008ae6:	bf00      	nop
 8008ae8:	3714      	adds	r7, #20
 8008aea:	46bd      	mov	sp, r7
 8008aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af0:	4770      	bx	lr
 8008af2:	bf00      	nop
 8008af4:	20004c58 	.word	0x20004c58
 8008af8:	20004c60 	.word	0x20004c60

08008afc <atoi>:
 8008afc:	220a      	movs	r2, #10
 8008afe:	2100      	movs	r1, #0
 8008b00:	f000 b8da 	b.w	8008cb8 <strtol>

08008b04 <__errno>:
 8008b04:	4b01      	ldr	r3, [pc, #4]	; (8008b0c <__errno+0x8>)
 8008b06:	6818      	ldr	r0, [r3, #0]
 8008b08:	4770      	bx	lr
 8008b0a:	bf00      	nop
 8008b0c:	20000110 	.word	0x20000110

08008b10 <__libc_init_array>:
 8008b10:	b570      	push	{r4, r5, r6, lr}
 8008b12:	4d0d      	ldr	r5, [pc, #52]	; (8008b48 <__libc_init_array+0x38>)
 8008b14:	4c0d      	ldr	r4, [pc, #52]	; (8008b4c <__libc_init_array+0x3c>)
 8008b16:	1b64      	subs	r4, r4, r5
 8008b18:	10a4      	asrs	r4, r4, #2
 8008b1a:	2600      	movs	r6, #0
 8008b1c:	42a6      	cmp	r6, r4
 8008b1e:	d109      	bne.n	8008b34 <__libc_init_array+0x24>
 8008b20:	4d0b      	ldr	r5, [pc, #44]	; (8008b50 <__libc_init_array+0x40>)
 8008b22:	4c0c      	ldr	r4, [pc, #48]	; (8008b54 <__libc_init_array+0x44>)
 8008b24:	f001 f848 	bl	8009bb8 <_init>
 8008b28:	1b64      	subs	r4, r4, r5
 8008b2a:	10a4      	asrs	r4, r4, #2
 8008b2c:	2600      	movs	r6, #0
 8008b2e:	42a6      	cmp	r6, r4
 8008b30:	d105      	bne.n	8008b3e <__libc_init_array+0x2e>
 8008b32:	bd70      	pop	{r4, r5, r6, pc}
 8008b34:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b38:	4798      	blx	r3
 8008b3a:	3601      	adds	r6, #1
 8008b3c:	e7ee      	b.n	8008b1c <__libc_init_array+0xc>
 8008b3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b42:	4798      	blx	r3
 8008b44:	3601      	adds	r6, #1
 8008b46:	e7f2      	b.n	8008b2e <__libc_init_array+0x1e>
 8008b48:	08009e2c 	.word	0x08009e2c
 8008b4c:	08009e2c 	.word	0x08009e2c
 8008b50:	08009e2c 	.word	0x08009e2c
 8008b54:	08009e30 	.word	0x08009e30

08008b58 <memcpy>:
 8008b58:	440a      	add	r2, r1
 8008b5a:	4291      	cmp	r1, r2
 8008b5c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008b60:	d100      	bne.n	8008b64 <memcpy+0xc>
 8008b62:	4770      	bx	lr
 8008b64:	b510      	push	{r4, lr}
 8008b66:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008b6a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008b6e:	4291      	cmp	r1, r2
 8008b70:	d1f9      	bne.n	8008b66 <memcpy+0xe>
 8008b72:	bd10      	pop	{r4, pc}

08008b74 <memset>:
 8008b74:	4402      	add	r2, r0
 8008b76:	4603      	mov	r3, r0
 8008b78:	4293      	cmp	r3, r2
 8008b7a:	d100      	bne.n	8008b7e <memset+0xa>
 8008b7c:	4770      	bx	lr
 8008b7e:	f803 1b01 	strb.w	r1, [r3], #1
 8008b82:	e7f9      	b.n	8008b78 <memset+0x4>

08008b84 <iprintf>:
 8008b84:	b40f      	push	{r0, r1, r2, r3}
 8008b86:	4b0a      	ldr	r3, [pc, #40]	; (8008bb0 <iprintf+0x2c>)
 8008b88:	b513      	push	{r0, r1, r4, lr}
 8008b8a:	681c      	ldr	r4, [r3, #0]
 8008b8c:	b124      	cbz	r4, 8008b98 <iprintf+0x14>
 8008b8e:	69a3      	ldr	r3, [r4, #24]
 8008b90:	b913      	cbnz	r3, 8008b98 <iprintf+0x14>
 8008b92:	4620      	mov	r0, r4
 8008b94:	f000 f8f2 	bl	8008d7c <__sinit>
 8008b98:	ab05      	add	r3, sp, #20
 8008b9a:	9a04      	ldr	r2, [sp, #16]
 8008b9c:	68a1      	ldr	r1, [r4, #8]
 8008b9e:	9301      	str	r3, [sp, #4]
 8008ba0:	4620      	mov	r0, r4
 8008ba2:	f000 fa49 	bl	8009038 <_vfiprintf_r>
 8008ba6:	b002      	add	sp, #8
 8008ba8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008bac:	b004      	add	sp, #16
 8008bae:	4770      	bx	lr
 8008bb0:	20000110 	.word	0x20000110

08008bb4 <_strtol_l.constprop.0>:
 8008bb4:	2b01      	cmp	r3, #1
 8008bb6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008bba:	d001      	beq.n	8008bc0 <_strtol_l.constprop.0+0xc>
 8008bbc:	2b24      	cmp	r3, #36	; 0x24
 8008bbe:	d906      	bls.n	8008bce <_strtol_l.constprop.0+0x1a>
 8008bc0:	f7ff ffa0 	bl	8008b04 <__errno>
 8008bc4:	2316      	movs	r3, #22
 8008bc6:	6003      	str	r3, [r0, #0]
 8008bc8:	2000      	movs	r0, #0
 8008bca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bce:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8008cb4 <_strtol_l.constprop.0+0x100>
 8008bd2:	460d      	mov	r5, r1
 8008bd4:	462e      	mov	r6, r5
 8008bd6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008bda:	f814 700c 	ldrb.w	r7, [r4, ip]
 8008bde:	f017 0708 	ands.w	r7, r7, #8
 8008be2:	d1f7      	bne.n	8008bd4 <_strtol_l.constprop.0+0x20>
 8008be4:	2c2d      	cmp	r4, #45	; 0x2d
 8008be6:	d132      	bne.n	8008c4e <_strtol_l.constprop.0+0x9a>
 8008be8:	782c      	ldrb	r4, [r5, #0]
 8008bea:	2701      	movs	r7, #1
 8008bec:	1cb5      	adds	r5, r6, #2
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d05b      	beq.n	8008caa <_strtol_l.constprop.0+0xf6>
 8008bf2:	2b10      	cmp	r3, #16
 8008bf4:	d109      	bne.n	8008c0a <_strtol_l.constprop.0+0x56>
 8008bf6:	2c30      	cmp	r4, #48	; 0x30
 8008bf8:	d107      	bne.n	8008c0a <_strtol_l.constprop.0+0x56>
 8008bfa:	782c      	ldrb	r4, [r5, #0]
 8008bfc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008c00:	2c58      	cmp	r4, #88	; 0x58
 8008c02:	d14d      	bne.n	8008ca0 <_strtol_l.constprop.0+0xec>
 8008c04:	786c      	ldrb	r4, [r5, #1]
 8008c06:	2310      	movs	r3, #16
 8008c08:	3502      	adds	r5, #2
 8008c0a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8008c0e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8008c12:	f04f 0c00 	mov.w	ip, #0
 8008c16:	fbb8 f9f3 	udiv	r9, r8, r3
 8008c1a:	4666      	mov	r6, ip
 8008c1c:	fb03 8a19 	mls	sl, r3, r9, r8
 8008c20:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8008c24:	f1be 0f09 	cmp.w	lr, #9
 8008c28:	d816      	bhi.n	8008c58 <_strtol_l.constprop.0+0xa4>
 8008c2a:	4674      	mov	r4, lr
 8008c2c:	42a3      	cmp	r3, r4
 8008c2e:	dd24      	ble.n	8008c7a <_strtol_l.constprop.0+0xc6>
 8008c30:	f1bc 0f00 	cmp.w	ip, #0
 8008c34:	db1e      	blt.n	8008c74 <_strtol_l.constprop.0+0xc0>
 8008c36:	45b1      	cmp	r9, r6
 8008c38:	d31c      	bcc.n	8008c74 <_strtol_l.constprop.0+0xc0>
 8008c3a:	d101      	bne.n	8008c40 <_strtol_l.constprop.0+0x8c>
 8008c3c:	45a2      	cmp	sl, r4
 8008c3e:	db19      	blt.n	8008c74 <_strtol_l.constprop.0+0xc0>
 8008c40:	fb06 4603 	mla	r6, r6, r3, r4
 8008c44:	f04f 0c01 	mov.w	ip, #1
 8008c48:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008c4c:	e7e8      	b.n	8008c20 <_strtol_l.constprop.0+0x6c>
 8008c4e:	2c2b      	cmp	r4, #43	; 0x2b
 8008c50:	bf04      	itt	eq
 8008c52:	782c      	ldrbeq	r4, [r5, #0]
 8008c54:	1cb5      	addeq	r5, r6, #2
 8008c56:	e7ca      	b.n	8008bee <_strtol_l.constprop.0+0x3a>
 8008c58:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8008c5c:	f1be 0f19 	cmp.w	lr, #25
 8008c60:	d801      	bhi.n	8008c66 <_strtol_l.constprop.0+0xb2>
 8008c62:	3c37      	subs	r4, #55	; 0x37
 8008c64:	e7e2      	b.n	8008c2c <_strtol_l.constprop.0+0x78>
 8008c66:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8008c6a:	f1be 0f19 	cmp.w	lr, #25
 8008c6e:	d804      	bhi.n	8008c7a <_strtol_l.constprop.0+0xc6>
 8008c70:	3c57      	subs	r4, #87	; 0x57
 8008c72:	e7db      	b.n	8008c2c <_strtol_l.constprop.0+0x78>
 8008c74:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8008c78:	e7e6      	b.n	8008c48 <_strtol_l.constprop.0+0x94>
 8008c7a:	f1bc 0f00 	cmp.w	ip, #0
 8008c7e:	da05      	bge.n	8008c8c <_strtol_l.constprop.0+0xd8>
 8008c80:	2322      	movs	r3, #34	; 0x22
 8008c82:	6003      	str	r3, [r0, #0]
 8008c84:	4646      	mov	r6, r8
 8008c86:	b942      	cbnz	r2, 8008c9a <_strtol_l.constprop.0+0xe6>
 8008c88:	4630      	mov	r0, r6
 8008c8a:	e79e      	b.n	8008bca <_strtol_l.constprop.0+0x16>
 8008c8c:	b107      	cbz	r7, 8008c90 <_strtol_l.constprop.0+0xdc>
 8008c8e:	4276      	negs	r6, r6
 8008c90:	2a00      	cmp	r2, #0
 8008c92:	d0f9      	beq.n	8008c88 <_strtol_l.constprop.0+0xd4>
 8008c94:	f1bc 0f00 	cmp.w	ip, #0
 8008c98:	d000      	beq.n	8008c9c <_strtol_l.constprop.0+0xe8>
 8008c9a:	1e69      	subs	r1, r5, #1
 8008c9c:	6011      	str	r1, [r2, #0]
 8008c9e:	e7f3      	b.n	8008c88 <_strtol_l.constprop.0+0xd4>
 8008ca0:	2430      	movs	r4, #48	; 0x30
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d1b1      	bne.n	8008c0a <_strtol_l.constprop.0+0x56>
 8008ca6:	2308      	movs	r3, #8
 8008ca8:	e7af      	b.n	8008c0a <_strtol_l.constprop.0+0x56>
 8008caa:	2c30      	cmp	r4, #48	; 0x30
 8008cac:	d0a5      	beq.n	8008bfa <_strtol_l.constprop.0+0x46>
 8008cae:	230a      	movs	r3, #10
 8008cb0:	e7ab      	b.n	8008c0a <_strtol_l.constprop.0+0x56>
 8008cb2:	bf00      	nop
 8008cb4:	08009c8d 	.word	0x08009c8d

08008cb8 <strtol>:
 8008cb8:	4613      	mov	r3, r2
 8008cba:	460a      	mov	r2, r1
 8008cbc:	4601      	mov	r1, r0
 8008cbe:	4802      	ldr	r0, [pc, #8]	; (8008cc8 <strtol+0x10>)
 8008cc0:	6800      	ldr	r0, [r0, #0]
 8008cc2:	f7ff bf77 	b.w	8008bb4 <_strtol_l.constprop.0>
 8008cc6:	bf00      	nop
 8008cc8:	20000110 	.word	0x20000110

08008ccc <std>:
 8008ccc:	2300      	movs	r3, #0
 8008cce:	b510      	push	{r4, lr}
 8008cd0:	4604      	mov	r4, r0
 8008cd2:	e9c0 3300 	strd	r3, r3, [r0]
 8008cd6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008cda:	6083      	str	r3, [r0, #8]
 8008cdc:	8181      	strh	r1, [r0, #12]
 8008cde:	6643      	str	r3, [r0, #100]	; 0x64
 8008ce0:	81c2      	strh	r2, [r0, #14]
 8008ce2:	6183      	str	r3, [r0, #24]
 8008ce4:	4619      	mov	r1, r3
 8008ce6:	2208      	movs	r2, #8
 8008ce8:	305c      	adds	r0, #92	; 0x5c
 8008cea:	f7ff ff43 	bl	8008b74 <memset>
 8008cee:	4b05      	ldr	r3, [pc, #20]	; (8008d04 <std+0x38>)
 8008cf0:	6263      	str	r3, [r4, #36]	; 0x24
 8008cf2:	4b05      	ldr	r3, [pc, #20]	; (8008d08 <std+0x3c>)
 8008cf4:	62a3      	str	r3, [r4, #40]	; 0x28
 8008cf6:	4b05      	ldr	r3, [pc, #20]	; (8008d0c <std+0x40>)
 8008cf8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008cfa:	4b05      	ldr	r3, [pc, #20]	; (8008d10 <std+0x44>)
 8008cfc:	6224      	str	r4, [r4, #32]
 8008cfe:	6323      	str	r3, [r4, #48]	; 0x30
 8008d00:	bd10      	pop	{r4, pc}
 8008d02:	bf00      	nop
 8008d04:	080095e1 	.word	0x080095e1
 8008d08:	08009603 	.word	0x08009603
 8008d0c:	0800963b 	.word	0x0800963b
 8008d10:	0800965f 	.word	0x0800965f

08008d14 <_cleanup_r>:
 8008d14:	4901      	ldr	r1, [pc, #4]	; (8008d1c <_cleanup_r+0x8>)
 8008d16:	f000 b8af 	b.w	8008e78 <_fwalk_reent>
 8008d1a:	bf00      	nop
 8008d1c:	08009939 	.word	0x08009939

08008d20 <__sfmoreglue>:
 8008d20:	b570      	push	{r4, r5, r6, lr}
 8008d22:	2268      	movs	r2, #104	; 0x68
 8008d24:	1e4d      	subs	r5, r1, #1
 8008d26:	4355      	muls	r5, r2
 8008d28:	460e      	mov	r6, r1
 8008d2a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008d2e:	f000 f8e5 	bl	8008efc <_malloc_r>
 8008d32:	4604      	mov	r4, r0
 8008d34:	b140      	cbz	r0, 8008d48 <__sfmoreglue+0x28>
 8008d36:	2100      	movs	r1, #0
 8008d38:	e9c0 1600 	strd	r1, r6, [r0]
 8008d3c:	300c      	adds	r0, #12
 8008d3e:	60a0      	str	r0, [r4, #8]
 8008d40:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008d44:	f7ff ff16 	bl	8008b74 <memset>
 8008d48:	4620      	mov	r0, r4
 8008d4a:	bd70      	pop	{r4, r5, r6, pc}

08008d4c <__sfp_lock_acquire>:
 8008d4c:	4801      	ldr	r0, [pc, #4]	; (8008d54 <__sfp_lock_acquire+0x8>)
 8008d4e:	f000 b8b3 	b.w	8008eb8 <__retarget_lock_acquire_recursive>
 8008d52:	bf00      	nop
 8008d54:	20004c79 	.word	0x20004c79

08008d58 <__sfp_lock_release>:
 8008d58:	4801      	ldr	r0, [pc, #4]	; (8008d60 <__sfp_lock_release+0x8>)
 8008d5a:	f000 b8ae 	b.w	8008eba <__retarget_lock_release_recursive>
 8008d5e:	bf00      	nop
 8008d60:	20004c79 	.word	0x20004c79

08008d64 <__sinit_lock_acquire>:
 8008d64:	4801      	ldr	r0, [pc, #4]	; (8008d6c <__sinit_lock_acquire+0x8>)
 8008d66:	f000 b8a7 	b.w	8008eb8 <__retarget_lock_acquire_recursive>
 8008d6a:	bf00      	nop
 8008d6c:	20004c7a 	.word	0x20004c7a

08008d70 <__sinit_lock_release>:
 8008d70:	4801      	ldr	r0, [pc, #4]	; (8008d78 <__sinit_lock_release+0x8>)
 8008d72:	f000 b8a2 	b.w	8008eba <__retarget_lock_release_recursive>
 8008d76:	bf00      	nop
 8008d78:	20004c7a 	.word	0x20004c7a

08008d7c <__sinit>:
 8008d7c:	b510      	push	{r4, lr}
 8008d7e:	4604      	mov	r4, r0
 8008d80:	f7ff fff0 	bl	8008d64 <__sinit_lock_acquire>
 8008d84:	69a3      	ldr	r3, [r4, #24]
 8008d86:	b11b      	cbz	r3, 8008d90 <__sinit+0x14>
 8008d88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d8c:	f7ff bff0 	b.w	8008d70 <__sinit_lock_release>
 8008d90:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008d94:	6523      	str	r3, [r4, #80]	; 0x50
 8008d96:	4b13      	ldr	r3, [pc, #76]	; (8008de4 <__sinit+0x68>)
 8008d98:	4a13      	ldr	r2, [pc, #76]	; (8008de8 <__sinit+0x6c>)
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	62a2      	str	r2, [r4, #40]	; 0x28
 8008d9e:	42a3      	cmp	r3, r4
 8008da0:	bf04      	itt	eq
 8008da2:	2301      	moveq	r3, #1
 8008da4:	61a3      	streq	r3, [r4, #24]
 8008da6:	4620      	mov	r0, r4
 8008da8:	f000 f820 	bl	8008dec <__sfp>
 8008dac:	6060      	str	r0, [r4, #4]
 8008dae:	4620      	mov	r0, r4
 8008db0:	f000 f81c 	bl	8008dec <__sfp>
 8008db4:	60a0      	str	r0, [r4, #8]
 8008db6:	4620      	mov	r0, r4
 8008db8:	f000 f818 	bl	8008dec <__sfp>
 8008dbc:	2200      	movs	r2, #0
 8008dbe:	60e0      	str	r0, [r4, #12]
 8008dc0:	2104      	movs	r1, #4
 8008dc2:	6860      	ldr	r0, [r4, #4]
 8008dc4:	f7ff ff82 	bl	8008ccc <std>
 8008dc8:	68a0      	ldr	r0, [r4, #8]
 8008dca:	2201      	movs	r2, #1
 8008dcc:	2109      	movs	r1, #9
 8008dce:	f7ff ff7d 	bl	8008ccc <std>
 8008dd2:	68e0      	ldr	r0, [r4, #12]
 8008dd4:	2202      	movs	r2, #2
 8008dd6:	2112      	movs	r1, #18
 8008dd8:	f7ff ff78 	bl	8008ccc <std>
 8008ddc:	2301      	movs	r3, #1
 8008dde:	61a3      	str	r3, [r4, #24]
 8008de0:	e7d2      	b.n	8008d88 <__sinit+0xc>
 8008de2:	bf00      	nop
 8008de4:	08009c88 	.word	0x08009c88
 8008de8:	08008d15 	.word	0x08008d15

08008dec <__sfp>:
 8008dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dee:	4607      	mov	r7, r0
 8008df0:	f7ff ffac 	bl	8008d4c <__sfp_lock_acquire>
 8008df4:	4b1e      	ldr	r3, [pc, #120]	; (8008e70 <__sfp+0x84>)
 8008df6:	681e      	ldr	r6, [r3, #0]
 8008df8:	69b3      	ldr	r3, [r6, #24]
 8008dfa:	b913      	cbnz	r3, 8008e02 <__sfp+0x16>
 8008dfc:	4630      	mov	r0, r6
 8008dfe:	f7ff ffbd 	bl	8008d7c <__sinit>
 8008e02:	3648      	adds	r6, #72	; 0x48
 8008e04:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008e08:	3b01      	subs	r3, #1
 8008e0a:	d503      	bpl.n	8008e14 <__sfp+0x28>
 8008e0c:	6833      	ldr	r3, [r6, #0]
 8008e0e:	b30b      	cbz	r3, 8008e54 <__sfp+0x68>
 8008e10:	6836      	ldr	r6, [r6, #0]
 8008e12:	e7f7      	b.n	8008e04 <__sfp+0x18>
 8008e14:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008e18:	b9d5      	cbnz	r5, 8008e50 <__sfp+0x64>
 8008e1a:	4b16      	ldr	r3, [pc, #88]	; (8008e74 <__sfp+0x88>)
 8008e1c:	60e3      	str	r3, [r4, #12]
 8008e1e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008e22:	6665      	str	r5, [r4, #100]	; 0x64
 8008e24:	f000 f847 	bl	8008eb6 <__retarget_lock_init_recursive>
 8008e28:	f7ff ff96 	bl	8008d58 <__sfp_lock_release>
 8008e2c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008e30:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008e34:	6025      	str	r5, [r4, #0]
 8008e36:	61a5      	str	r5, [r4, #24]
 8008e38:	2208      	movs	r2, #8
 8008e3a:	4629      	mov	r1, r5
 8008e3c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008e40:	f7ff fe98 	bl	8008b74 <memset>
 8008e44:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008e48:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008e4c:	4620      	mov	r0, r4
 8008e4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e50:	3468      	adds	r4, #104	; 0x68
 8008e52:	e7d9      	b.n	8008e08 <__sfp+0x1c>
 8008e54:	2104      	movs	r1, #4
 8008e56:	4638      	mov	r0, r7
 8008e58:	f7ff ff62 	bl	8008d20 <__sfmoreglue>
 8008e5c:	4604      	mov	r4, r0
 8008e5e:	6030      	str	r0, [r6, #0]
 8008e60:	2800      	cmp	r0, #0
 8008e62:	d1d5      	bne.n	8008e10 <__sfp+0x24>
 8008e64:	f7ff ff78 	bl	8008d58 <__sfp_lock_release>
 8008e68:	230c      	movs	r3, #12
 8008e6a:	603b      	str	r3, [r7, #0]
 8008e6c:	e7ee      	b.n	8008e4c <__sfp+0x60>
 8008e6e:	bf00      	nop
 8008e70:	08009c88 	.word	0x08009c88
 8008e74:	ffff0001 	.word	0xffff0001

08008e78 <_fwalk_reent>:
 8008e78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e7c:	4606      	mov	r6, r0
 8008e7e:	4688      	mov	r8, r1
 8008e80:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008e84:	2700      	movs	r7, #0
 8008e86:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008e8a:	f1b9 0901 	subs.w	r9, r9, #1
 8008e8e:	d505      	bpl.n	8008e9c <_fwalk_reent+0x24>
 8008e90:	6824      	ldr	r4, [r4, #0]
 8008e92:	2c00      	cmp	r4, #0
 8008e94:	d1f7      	bne.n	8008e86 <_fwalk_reent+0xe>
 8008e96:	4638      	mov	r0, r7
 8008e98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e9c:	89ab      	ldrh	r3, [r5, #12]
 8008e9e:	2b01      	cmp	r3, #1
 8008ea0:	d907      	bls.n	8008eb2 <_fwalk_reent+0x3a>
 8008ea2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008ea6:	3301      	adds	r3, #1
 8008ea8:	d003      	beq.n	8008eb2 <_fwalk_reent+0x3a>
 8008eaa:	4629      	mov	r1, r5
 8008eac:	4630      	mov	r0, r6
 8008eae:	47c0      	blx	r8
 8008eb0:	4307      	orrs	r7, r0
 8008eb2:	3568      	adds	r5, #104	; 0x68
 8008eb4:	e7e9      	b.n	8008e8a <_fwalk_reent+0x12>

08008eb6 <__retarget_lock_init_recursive>:
 8008eb6:	4770      	bx	lr

08008eb8 <__retarget_lock_acquire_recursive>:
 8008eb8:	4770      	bx	lr

08008eba <__retarget_lock_release_recursive>:
 8008eba:	4770      	bx	lr

08008ebc <sbrk_aligned>:
 8008ebc:	b570      	push	{r4, r5, r6, lr}
 8008ebe:	4e0e      	ldr	r6, [pc, #56]	; (8008ef8 <sbrk_aligned+0x3c>)
 8008ec0:	460c      	mov	r4, r1
 8008ec2:	6831      	ldr	r1, [r6, #0]
 8008ec4:	4605      	mov	r5, r0
 8008ec6:	b911      	cbnz	r1, 8008ece <sbrk_aligned+0x12>
 8008ec8:	f000 fb7a 	bl	80095c0 <_sbrk_r>
 8008ecc:	6030      	str	r0, [r6, #0]
 8008ece:	4621      	mov	r1, r4
 8008ed0:	4628      	mov	r0, r5
 8008ed2:	f000 fb75 	bl	80095c0 <_sbrk_r>
 8008ed6:	1c43      	adds	r3, r0, #1
 8008ed8:	d00a      	beq.n	8008ef0 <sbrk_aligned+0x34>
 8008eda:	1cc4      	adds	r4, r0, #3
 8008edc:	f024 0403 	bic.w	r4, r4, #3
 8008ee0:	42a0      	cmp	r0, r4
 8008ee2:	d007      	beq.n	8008ef4 <sbrk_aligned+0x38>
 8008ee4:	1a21      	subs	r1, r4, r0
 8008ee6:	4628      	mov	r0, r5
 8008ee8:	f000 fb6a 	bl	80095c0 <_sbrk_r>
 8008eec:	3001      	adds	r0, #1
 8008eee:	d101      	bne.n	8008ef4 <sbrk_aligned+0x38>
 8008ef0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008ef4:	4620      	mov	r0, r4
 8008ef6:	bd70      	pop	{r4, r5, r6, pc}
 8008ef8:	20004c80 	.word	0x20004c80

08008efc <_malloc_r>:
 8008efc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f00:	1ccd      	adds	r5, r1, #3
 8008f02:	f025 0503 	bic.w	r5, r5, #3
 8008f06:	3508      	adds	r5, #8
 8008f08:	2d0c      	cmp	r5, #12
 8008f0a:	bf38      	it	cc
 8008f0c:	250c      	movcc	r5, #12
 8008f0e:	2d00      	cmp	r5, #0
 8008f10:	4607      	mov	r7, r0
 8008f12:	db01      	blt.n	8008f18 <_malloc_r+0x1c>
 8008f14:	42a9      	cmp	r1, r5
 8008f16:	d905      	bls.n	8008f24 <_malloc_r+0x28>
 8008f18:	230c      	movs	r3, #12
 8008f1a:	603b      	str	r3, [r7, #0]
 8008f1c:	2600      	movs	r6, #0
 8008f1e:	4630      	mov	r0, r6
 8008f20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f24:	4e2e      	ldr	r6, [pc, #184]	; (8008fe0 <_malloc_r+0xe4>)
 8008f26:	f000 fdbb 	bl	8009aa0 <__malloc_lock>
 8008f2a:	6833      	ldr	r3, [r6, #0]
 8008f2c:	461c      	mov	r4, r3
 8008f2e:	bb34      	cbnz	r4, 8008f7e <_malloc_r+0x82>
 8008f30:	4629      	mov	r1, r5
 8008f32:	4638      	mov	r0, r7
 8008f34:	f7ff ffc2 	bl	8008ebc <sbrk_aligned>
 8008f38:	1c43      	adds	r3, r0, #1
 8008f3a:	4604      	mov	r4, r0
 8008f3c:	d14d      	bne.n	8008fda <_malloc_r+0xde>
 8008f3e:	6834      	ldr	r4, [r6, #0]
 8008f40:	4626      	mov	r6, r4
 8008f42:	2e00      	cmp	r6, #0
 8008f44:	d140      	bne.n	8008fc8 <_malloc_r+0xcc>
 8008f46:	6823      	ldr	r3, [r4, #0]
 8008f48:	4631      	mov	r1, r6
 8008f4a:	4638      	mov	r0, r7
 8008f4c:	eb04 0803 	add.w	r8, r4, r3
 8008f50:	f000 fb36 	bl	80095c0 <_sbrk_r>
 8008f54:	4580      	cmp	r8, r0
 8008f56:	d13a      	bne.n	8008fce <_malloc_r+0xd2>
 8008f58:	6821      	ldr	r1, [r4, #0]
 8008f5a:	3503      	adds	r5, #3
 8008f5c:	1a6d      	subs	r5, r5, r1
 8008f5e:	f025 0503 	bic.w	r5, r5, #3
 8008f62:	3508      	adds	r5, #8
 8008f64:	2d0c      	cmp	r5, #12
 8008f66:	bf38      	it	cc
 8008f68:	250c      	movcc	r5, #12
 8008f6a:	4629      	mov	r1, r5
 8008f6c:	4638      	mov	r0, r7
 8008f6e:	f7ff ffa5 	bl	8008ebc <sbrk_aligned>
 8008f72:	3001      	adds	r0, #1
 8008f74:	d02b      	beq.n	8008fce <_malloc_r+0xd2>
 8008f76:	6823      	ldr	r3, [r4, #0]
 8008f78:	442b      	add	r3, r5
 8008f7a:	6023      	str	r3, [r4, #0]
 8008f7c:	e00e      	b.n	8008f9c <_malloc_r+0xa0>
 8008f7e:	6822      	ldr	r2, [r4, #0]
 8008f80:	1b52      	subs	r2, r2, r5
 8008f82:	d41e      	bmi.n	8008fc2 <_malloc_r+0xc6>
 8008f84:	2a0b      	cmp	r2, #11
 8008f86:	d916      	bls.n	8008fb6 <_malloc_r+0xba>
 8008f88:	1961      	adds	r1, r4, r5
 8008f8a:	42a3      	cmp	r3, r4
 8008f8c:	6025      	str	r5, [r4, #0]
 8008f8e:	bf18      	it	ne
 8008f90:	6059      	strne	r1, [r3, #4]
 8008f92:	6863      	ldr	r3, [r4, #4]
 8008f94:	bf08      	it	eq
 8008f96:	6031      	streq	r1, [r6, #0]
 8008f98:	5162      	str	r2, [r4, r5]
 8008f9a:	604b      	str	r3, [r1, #4]
 8008f9c:	4638      	mov	r0, r7
 8008f9e:	f104 060b 	add.w	r6, r4, #11
 8008fa2:	f000 fd83 	bl	8009aac <__malloc_unlock>
 8008fa6:	f026 0607 	bic.w	r6, r6, #7
 8008faa:	1d23      	adds	r3, r4, #4
 8008fac:	1af2      	subs	r2, r6, r3
 8008fae:	d0b6      	beq.n	8008f1e <_malloc_r+0x22>
 8008fb0:	1b9b      	subs	r3, r3, r6
 8008fb2:	50a3      	str	r3, [r4, r2]
 8008fb4:	e7b3      	b.n	8008f1e <_malloc_r+0x22>
 8008fb6:	6862      	ldr	r2, [r4, #4]
 8008fb8:	42a3      	cmp	r3, r4
 8008fba:	bf0c      	ite	eq
 8008fbc:	6032      	streq	r2, [r6, #0]
 8008fbe:	605a      	strne	r2, [r3, #4]
 8008fc0:	e7ec      	b.n	8008f9c <_malloc_r+0xa0>
 8008fc2:	4623      	mov	r3, r4
 8008fc4:	6864      	ldr	r4, [r4, #4]
 8008fc6:	e7b2      	b.n	8008f2e <_malloc_r+0x32>
 8008fc8:	4634      	mov	r4, r6
 8008fca:	6876      	ldr	r6, [r6, #4]
 8008fcc:	e7b9      	b.n	8008f42 <_malloc_r+0x46>
 8008fce:	230c      	movs	r3, #12
 8008fd0:	603b      	str	r3, [r7, #0]
 8008fd2:	4638      	mov	r0, r7
 8008fd4:	f000 fd6a 	bl	8009aac <__malloc_unlock>
 8008fd8:	e7a1      	b.n	8008f1e <_malloc_r+0x22>
 8008fda:	6025      	str	r5, [r4, #0]
 8008fdc:	e7de      	b.n	8008f9c <_malloc_r+0xa0>
 8008fde:	bf00      	nop
 8008fe0:	20004c7c 	.word	0x20004c7c

08008fe4 <__sfputc_r>:
 8008fe4:	6893      	ldr	r3, [r2, #8]
 8008fe6:	3b01      	subs	r3, #1
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	b410      	push	{r4}
 8008fec:	6093      	str	r3, [r2, #8]
 8008fee:	da08      	bge.n	8009002 <__sfputc_r+0x1e>
 8008ff0:	6994      	ldr	r4, [r2, #24]
 8008ff2:	42a3      	cmp	r3, r4
 8008ff4:	db01      	blt.n	8008ffa <__sfputc_r+0x16>
 8008ff6:	290a      	cmp	r1, #10
 8008ff8:	d103      	bne.n	8009002 <__sfputc_r+0x1e>
 8008ffa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008ffe:	f000 bb33 	b.w	8009668 <__swbuf_r>
 8009002:	6813      	ldr	r3, [r2, #0]
 8009004:	1c58      	adds	r0, r3, #1
 8009006:	6010      	str	r0, [r2, #0]
 8009008:	7019      	strb	r1, [r3, #0]
 800900a:	4608      	mov	r0, r1
 800900c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009010:	4770      	bx	lr

08009012 <__sfputs_r>:
 8009012:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009014:	4606      	mov	r6, r0
 8009016:	460f      	mov	r7, r1
 8009018:	4614      	mov	r4, r2
 800901a:	18d5      	adds	r5, r2, r3
 800901c:	42ac      	cmp	r4, r5
 800901e:	d101      	bne.n	8009024 <__sfputs_r+0x12>
 8009020:	2000      	movs	r0, #0
 8009022:	e007      	b.n	8009034 <__sfputs_r+0x22>
 8009024:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009028:	463a      	mov	r2, r7
 800902a:	4630      	mov	r0, r6
 800902c:	f7ff ffda 	bl	8008fe4 <__sfputc_r>
 8009030:	1c43      	adds	r3, r0, #1
 8009032:	d1f3      	bne.n	800901c <__sfputs_r+0xa>
 8009034:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009038 <_vfiprintf_r>:
 8009038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800903c:	460d      	mov	r5, r1
 800903e:	b09d      	sub	sp, #116	; 0x74
 8009040:	4614      	mov	r4, r2
 8009042:	4698      	mov	r8, r3
 8009044:	4606      	mov	r6, r0
 8009046:	b118      	cbz	r0, 8009050 <_vfiprintf_r+0x18>
 8009048:	6983      	ldr	r3, [r0, #24]
 800904a:	b90b      	cbnz	r3, 8009050 <_vfiprintf_r+0x18>
 800904c:	f7ff fe96 	bl	8008d7c <__sinit>
 8009050:	4b89      	ldr	r3, [pc, #548]	; (8009278 <_vfiprintf_r+0x240>)
 8009052:	429d      	cmp	r5, r3
 8009054:	d11b      	bne.n	800908e <_vfiprintf_r+0x56>
 8009056:	6875      	ldr	r5, [r6, #4]
 8009058:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800905a:	07d9      	lsls	r1, r3, #31
 800905c:	d405      	bmi.n	800906a <_vfiprintf_r+0x32>
 800905e:	89ab      	ldrh	r3, [r5, #12]
 8009060:	059a      	lsls	r2, r3, #22
 8009062:	d402      	bmi.n	800906a <_vfiprintf_r+0x32>
 8009064:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009066:	f7ff ff27 	bl	8008eb8 <__retarget_lock_acquire_recursive>
 800906a:	89ab      	ldrh	r3, [r5, #12]
 800906c:	071b      	lsls	r3, r3, #28
 800906e:	d501      	bpl.n	8009074 <_vfiprintf_r+0x3c>
 8009070:	692b      	ldr	r3, [r5, #16]
 8009072:	b9eb      	cbnz	r3, 80090b0 <_vfiprintf_r+0x78>
 8009074:	4629      	mov	r1, r5
 8009076:	4630      	mov	r0, r6
 8009078:	f000 fb5a 	bl	8009730 <__swsetup_r>
 800907c:	b1c0      	cbz	r0, 80090b0 <_vfiprintf_r+0x78>
 800907e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009080:	07dc      	lsls	r4, r3, #31
 8009082:	d50e      	bpl.n	80090a2 <_vfiprintf_r+0x6a>
 8009084:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009088:	b01d      	add	sp, #116	; 0x74
 800908a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800908e:	4b7b      	ldr	r3, [pc, #492]	; (800927c <_vfiprintf_r+0x244>)
 8009090:	429d      	cmp	r5, r3
 8009092:	d101      	bne.n	8009098 <_vfiprintf_r+0x60>
 8009094:	68b5      	ldr	r5, [r6, #8]
 8009096:	e7df      	b.n	8009058 <_vfiprintf_r+0x20>
 8009098:	4b79      	ldr	r3, [pc, #484]	; (8009280 <_vfiprintf_r+0x248>)
 800909a:	429d      	cmp	r5, r3
 800909c:	bf08      	it	eq
 800909e:	68f5      	ldreq	r5, [r6, #12]
 80090a0:	e7da      	b.n	8009058 <_vfiprintf_r+0x20>
 80090a2:	89ab      	ldrh	r3, [r5, #12]
 80090a4:	0598      	lsls	r0, r3, #22
 80090a6:	d4ed      	bmi.n	8009084 <_vfiprintf_r+0x4c>
 80090a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80090aa:	f7ff ff06 	bl	8008eba <__retarget_lock_release_recursive>
 80090ae:	e7e9      	b.n	8009084 <_vfiprintf_r+0x4c>
 80090b0:	2300      	movs	r3, #0
 80090b2:	9309      	str	r3, [sp, #36]	; 0x24
 80090b4:	2320      	movs	r3, #32
 80090b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80090ba:	f8cd 800c 	str.w	r8, [sp, #12]
 80090be:	2330      	movs	r3, #48	; 0x30
 80090c0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009284 <_vfiprintf_r+0x24c>
 80090c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80090c8:	f04f 0901 	mov.w	r9, #1
 80090cc:	4623      	mov	r3, r4
 80090ce:	469a      	mov	sl, r3
 80090d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80090d4:	b10a      	cbz	r2, 80090da <_vfiprintf_r+0xa2>
 80090d6:	2a25      	cmp	r2, #37	; 0x25
 80090d8:	d1f9      	bne.n	80090ce <_vfiprintf_r+0x96>
 80090da:	ebba 0b04 	subs.w	fp, sl, r4
 80090de:	d00b      	beq.n	80090f8 <_vfiprintf_r+0xc0>
 80090e0:	465b      	mov	r3, fp
 80090e2:	4622      	mov	r2, r4
 80090e4:	4629      	mov	r1, r5
 80090e6:	4630      	mov	r0, r6
 80090e8:	f7ff ff93 	bl	8009012 <__sfputs_r>
 80090ec:	3001      	adds	r0, #1
 80090ee:	f000 80aa 	beq.w	8009246 <_vfiprintf_r+0x20e>
 80090f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80090f4:	445a      	add	r2, fp
 80090f6:	9209      	str	r2, [sp, #36]	; 0x24
 80090f8:	f89a 3000 	ldrb.w	r3, [sl]
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	f000 80a2 	beq.w	8009246 <_vfiprintf_r+0x20e>
 8009102:	2300      	movs	r3, #0
 8009104:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009108:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800910c:	f10a 0a01 	add.w	sl, sl, #1
 8009110:	9304      	str	r3, [sp, #16]
 8009112:	9307      	str	r3, [sp, #28]
 8009114:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009118:	931a      	str	r3, [sp, #104]	; 0x68
 800911a:	4654      	mov	r4, sl
 800911c:	2205      	movs	r2, #5
 800911e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009122:	4858      	ldr	r0, [pc, #352]	; (8009284 <_vfiprintf_r+0x24c>)
 8009124:	f7f7 f874 	bl	8000210 <memchr>
 8009128:	9a04      	ldr	r2, [sp, #16]
 800912a:	b9d8      	cbnz	r0, 8009164 <_vfiprintf_r+0x12c>
 800912c:	06d1      	lsls	r1, r2, #27
 800912e:	bf44      	itt	mi
 8009130:	2320      	movmi	r3, #32
 8009132:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009136:	0713      	lsls	r3, r2, #28
 8009138:	bf44      	itt	mi
 800913a:	232b      	movmi	r3, #43	; 0x2b
 800913c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009140:	f89a 3000 	ldrb.w	r3, [sl]
 8009144:	2b2a      	cmp	r3, #42	; 0x2a
 8009146:	d015      	beq.n	8009174 <_vfiprintf_r+0x13c>
 8009148:	9a07      	ldr	r2, [sp, #28]
 800914a:	4654      	mov	r4, sl
 800914c:	2000      	movs	r0, #0
 800914e:	f04f 0c0a 	mov.w	ip, #10
 8009152:	4621      	mov	r1, r4
 8009154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009158:	3b30      	subs	r3, #48	; 0x30
 800915a:	2b09      	cmp	r3, #9
 800915c:	d94e      	bls.n	80091fc <_vfiprintf_r+0x1c4>
 800915e:	b1b0      	cbz	r0, 800918e <_vfiprintf_r+0x156>
 8009160:	9207      	str	r2, [sp, #28]
 8009162:	e014      	b.n	800918e <_vfiprintf_r+0x156>
 8009164:	eba0 0308 	sub.w	r3, r0, r8
 8009168:	fa09 f303 	lsl.w	r3, r9, r3
 800916c:	4313      	orrs	r3, r2
 800916e:	9304      	str	r3, [sp, #16]
 8009170:	46a2      	mov	sl, r4
 8009172:	e7d2      	b.n	800911a <_vfiprintf_r+0xe2>
 8009174:	9b03      	ldr	r3, [sp, #12]
 8009176:	1d19      	adds	r1, r3, #4
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	9103      	str	r1, [sp, #12]
 800917c:	2b00      	cmp	r3, #0
 800917e:	bfbb      	ittet	lt
 8009180:	425b      	neglt	r3, r3
 8009182:	f042 0202 	orrlt.w	r2, r2, #2
 8009186:	9307      	strge	r3, [sp, #28]
 8009188:	9307      	strlt	r3, [sp, #28]
 800918a:	bfb8      	it	lt
 800918c:	9204      	strlt	r2, [sp, #16]
 800918e:	7823      	ldrb	r3, [r4, #0]
 8009190:	2b2e      	cmp	r3, #46	; 0x2e
 8009192:	d10c      	bne.n	80091ae <_vfiprintf_r+0x176>
 8009194:	7863      	ldrb	r3, [r4, #1]
 8009196:	2b2a      	cmp	r3, #42	; 0x2a
 8009198:	d135      	bne.n	8009206 <_vfiprintf_r+0x1ce>
 800919a:	9b03      	ldr	r3, [sp, #12]
 800919c:	1d1a      	adds	r2, r3, #4
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	9203      	str	r2, [sp, #12]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	bfb8      	it	lt
 80091a6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80091aa:	3402      	adds	r4, #2
 80091ac:	9305      	str	r3, [sp, #20]
 80091ae:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009294 <_vfiprintf_r+0x25c>
 80091b2:	7821      	ldrb	r1, [r4, #0]
 80091b4:	2203      	movs	r2, #3
 80091b6:	4650      	mov	r0, sl
 80091b8:	f7f7 f82a 	bl	8000210 <memchr>
 80091bc:	b140      	cbz	r0, 80091d0 <_vfiprintf_r+0x198>
 80091be:	2340      	movs	r3, #64	; 0x40
 80091c0:	eba0 000a 	sub.w	r0, r0, sl
 80091c4:	fa03 f000 	lsl.w	r0, r3, r0
 80091c8:	9b04      	ldr	r3, [sp, #16]
 80091ca:	4303      	orrs	r3, r0
 80091cc:	3401      	adds	r4, #1
 80091ce:	9304      	str	r3, [sp, #16]
 80091d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091d4:	482c      	ldr	r0, [pc, #176]	; (8009288 <_vfiprintf_r+0x250>)
 80091d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80091da:	2206      	movs	r2, #6
 80091dc:	f7f7 f818 	bl	8000210 <memchr>
 80091e0:	2800      	cmp	r0, #0
 80091e2:	d03f      	beq.n	8009264 <_vfiprintf_r+0x22c>
 80091e4:	4b29      	ldr	r3, [pc, #164]	; (800928c <_vfiprintf_r+0x254>)
 80091e6:	bb1b      	cbnz	r3, 8009230 <_vfiprintf_r+0x1f8>
 80091e8:	9b03      	ldr	r3, [sp, #12]
 80091ea:	3307      	adds	r3, #7
 80091ec:	f023 0307 	bic.w	r3, r3, #7
 80091f0:	3308      	adds	r3, #8
 80091f2:	9303      	str	r3, [sp, #12]
 80091f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091f6:	443b      	add	r3, r7
 80091f8:	9309      	str	r3, [sp, #36]	; 0x24
 80091fa:	e767      	b.n	80090cc <_vfiprintf_r+0x94>
 80091fc:	fb0c 3202 	mla	r2, ip, r2, r3
 8009200:	460c      	mov	r4, r1
 8009202:	2001      	movs	r0, #1
 8009204:	e7a5      	b.n	8009152 <_vfiprintf_r+0x11a>
 8009206:	2300      	movs	r3, #0
 8009208:	3401      	adds	r4, #1
 800920a:	9305      	str	r3, [sp, #20]
 800920c:	4619      	mov	r1, r3
 800920e:	f04f 0c0a 	mov.w	ip, #10
 8009212:	4620      	mov	r0, r4
 8009214:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009218:	3a30      	subs	r2, #48	; 0x30
 800921a:	2a09      	cmp	r2, #9
 800921c:	d903      	bls.n	8009226 <_vfiprintf_r+0x1ee>
 800921e:	2b00      	cmp	r3, #0
 8009220:	d0c5      	beq.n	80091ae <_vfiprintf_r+0x176>
 8009222:	9105      	str	r1, [sp, #20]
 8009224:	e7c3      	b.n	80091ae <_vfiprintf_r+0x176>
 8009226:	fb0c 2101 	mla	r1, ip, r1, r2
 800922a:	4604      	mov	r4, r0
 800922c:	2301      	movs	r3, #1
 800922e:	e7f0      	b.n	8009212 <_vfiprintf_r+0x1da>
 8009230:	ab03      	add	r3, sp, #12
 8009232:	9300      	str	r3, [sp, #0]
 8009234:	462a      	mov	r2, r5
 8009236:	4b16      	ldr	r3, [pc, #88]	; (8009290 <_vfiprintf_r+0x258>)
 8009238:	a904      	add	r1, sp, #16
 800923a:	4630      	mov	r0, r6
 800923c:	f3af 8000 	nop.w
 8009240:	4607      	mov	r7, r0
 8009242:	1c78      	adds	r0, r7, #1
 8009244:	d1d6      	bne.n	80091f4 <_vfiprintf_r+0x1bc>
 8009246:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009248:	07d9      	lsls	r1, r3, #31
 800924a:	d405      	bmi.n	8009258 <_vfiprintf_r+0x220>
 800924c:	89ab      	ldrh	r3, [r5, #12]
 800924e:	059a      	lsls	r2, r3, #22
 8009250:	d402      	bmi.n	8009258 <_vfiprintf_r+0x220>
 8009252:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009254:	f7ff fe31 	bl	8008eba <__retarget_lock_release_recursive>
 8009258:	89ab      	ldrh	r3, [r5, #12]
 800925a:	065b      	lsls	r3, r3, #25
 800925c:	f53f af12 	bmi.w	8009084 <_vfiprintf_r+0x4c>
 8009260:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009262:	e711      	b.n	8009088 <_vfiprintf_r+0x50>
 8009264:	ab03      	add	r3, sp, #12
 8009266:	9300      	str	r3, [sp, #0]
 8009268:	462a      	mov	r2, r5
 800926a:	4b09      	ldr	r3, [pc, #36]	; (8009290 <_vfiprintf_r+0x258>)
 800926c:	a904      	add	r1, sp, #16
 800926e:	4630      	mov	r0, r6
 8009270:	f000 f880 	bl	8009374 <_printf_i>
 8009274:	e7e4      	b.n	8009240 <_vfiprintf_r+0x208>
 8009276:	bf00      	nop
 8009278:	08009db0 	.word	0x08009db0
 800927c:	08009dd0 	.word	0x08009dd0
 8009280:	08009d90 	.word	0x08009d90
 8009284:	08009df0 	.word	0x08009df0
 8009288:	08009dfa 	.word	0x08009dfa
 800928c:	00000000 	.word	0x00000000
 8009290:	08009013 	.word	0x08009013
 8009294:	08009df6 	.word	0x08009df6

08009298 <_printf_common>:
 8009298:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800929c:	4616      	mov	r6, r2
 800929e:	4699      	mov	r9, r3
 80092a0:	688a      	ldr	r2, [r1, #8]
 80092a2:	690b      	ldr	r3, [r1, #16]
 80092a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80092a8:	4293      	cmp	r3, r2
 80092aa:	bfb8      	it	lt
 80092ac:	4613      	movlt	r3, r2
 80092ae:	6033      	str	r3, [r6, #0]
 80092b0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80092b4:	4607      	mov	r7, r0
 80092b6:	460c      	mov	r4, r1
 80092b8:	b10a      	cbz	r2, 80092be <_printf_common+0x26>
 80092ba:	3301      	adds	r3, #1
 80092bc:	6033      	str	r3, [r6, #0]
 80092be:	6823      	ldr	r3, [r4, #0]
 80092c0:	0699      	lsls	r1, r3, #26
 80092c2:	bf42      	ittt	mi
 80092c4:	6833      	ldrmi	r3, [r6, #0]
 80092c6:	3302      	addmi	r3, #2
 80092c8:	6033      	strmi	r3, [r6, #0]
 80092ca:	6825      	ldr	r5, [r4, #0]
 80092cc:	f015 0506 	ands.w	r5, r5, #6
 80092d0:	d106      	bne.n	80092e0 <_printf_common+0x48>
 80092d2:	f104 0a19 	add.w	sl, r4, #25
 80092d6:	68e3      	ldr	r3, [r4, #12]
 80092d8:	6832      	ldr	r2, [r6, #0]
 80092da:	1a9b      	subs	r3, r3, r2
 80092dc:	42ab      	cmp	r3, r5
 80092de:	dc26      	bgt.n	800932e <_printf_common+0x96>
 80092e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80092e4:	1e13      	subs	r3, r2, #0
 80092e6:	6822      	ldr	r2, [r4, #0]
 80092e8:	bf18      	it	ne
 80092ea:	2301      	movne	r3, #1
 80092ec:	0692      	lsls	r2, r2, #26
 80092ee:	d42b      	bmi.n	8009348 <_printf_common+0xb0>
 80092f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80092f4:	4649      	mov	r1, r9
 80092f6:	4638      	mov	r0, r7
 80092f8:	47c0      	blx	r8
 80092fa:	3001      	adds	r0, #1
 80092fc:	d01e      	beq.n	800933c <_printf_common+0xa4>
 80092fe:	6823      	ldr	r3, [r4, #0]
 8009300:	68e5      	ldr	r5, [r4, #12]
 8009302:	6832      	ldr	r2, [r6, #0]
 8009304:	f003 0306 	and.w	r3, r3, #6
 8009308:	2b04      	cmp	r3, #4
 800930a:	bf08      	it	eq
 800930c:	1aad      	subeq	r5, r5, r2
 800930e:	68a3      	ldr	r3, [r4, #8]
 8009310:	6922      	ldr	r2, [r4, #16]
 8009312:	bf0c      	ite	eq
 8009314:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009318:	2500      	movne	r5, #0
 800931a:	4293      	cmp	r3, r2
 800931c:	bfc4      	itt	gt
 800931e:	1a9b      	subgt	r3, r3, r2
 8009320:	18ed      	addgt	r5, r5, r3
 8009322:	2600      	movs	r6, #0
 8009324:	341a      	adds	r4, #26
 8009326:	42b5      	cmp	r5, r6
 8009328:	d11a      	bne.n	8009360 <_printf_common+0xc8>
 800932a:	2000      	movs	r0, #0
 800932c:	e008      	b.n	8009340 <_printf_common+0xa8>
 800932e:	2301      	movs	r3, #1
 8009330:	4652      	mov	r2, sl
 8009332:	4649      	mov	r1, r9
 8009334:	4638      	mov	r0, r7
 8009336:	47c0      	blx	r8
 8009338:	3001      	adds	r0, #1
 800933a:	d103      	bne.n	8009344 <_printf_common+0xac>
 800933c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009340:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009344:	3501      	adds	r5, #1
 8009346:	e7c6      	b.n	80092d6 <_printf_common+0x3e>
 8009348:	18e1      	adds	r1, r4, r3
 800934a:	1c5a      	adds	r2, r3, #1
 800934c:	2030      	movs	r0, #48	; 0x30
 800934e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009352:	4422      	add	r2, r4
 8009354:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009358:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800935c:	3302      	adds	r3, #2
 800935e:	e7c7      	b.n	80092f0 <_printf_common+0x58>
 8009360:	2301      	movs	r3, #1
 8009362:	4622      	mov	r2, r4
 8009364:	4649      	mov	r1, r9
 8009366:	4638      	mov	r0, r7
 8009368:	47c0      	blx	r8
 800936a:	3001      	adds	r0, #1
 800936c:	d0e6      	beq.n	800933c <_printf_common+0xa4>
 800936e:	3601      	adds	r6, #1
 8009370:	e7d9      	b.n	8009326 <_printf_common+0x8e>
	...

08009374 <_printf_i>:
 8009374:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009378:	7e0f      	ldrb	r7, [r1, #24]
 800937a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800937c:	2f78      	cmp	r7, #120	; 0x78
 800937e:	4691      	mov	r9, r2
 8009380:	4680      	mov	r8, r0
 8009382:	460c      	mov	r4, r1
 8009384:	469a      	mov	sl, r3
 8009386:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800938a:	d807      	bhi.n	800939c <_printf_i+0x28>
 800938c:	2f62      	cmp	r7, #98	; 0x62
 800938e:	d80a      	bhi.n	80093a6 <_printf_i+0x32>
 8009390:	2f00      	cmp	r7, #0
 8009392:	f000 80d8 	beq.w	8009546 <_printf_i+0x1d2>
 8009396:	2f58      	cmp	r7, #88	; 0x58
 8009398:	f000 80a3 	beq.w	80094e2 <_printf_i+0x16e>
 800939c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80093a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80093a4:	e03a      	b.n	800941c <_printf_i+0xa8>
 80093a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80093aa:	2b15      	cmp	r3, #21
 80093ac:	d8f6      	bhi.n	800939c <_printf_i+0x28>
 80093ae:	a101      	add	r1, pc, #4	; (adr r1, 80093b4 <_printf_i+0x40>)
 80093b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80093b4:	0800940d 	.word	0x0800940d
 80093b8:	08009421 	.word	0x08009421
 80093bc:	0800939d 	.word	0x0800939d
 80093c0:	0800939d 	.word	0x0800939d
 80093c4:	0800939d 	.word	0x0800939d
 80093c8:	0800939d 	.word	0x0800939d
 80093cc:	08009421 	.word	0x08009421
 80093d0:	0800939d 	.word	0x0800939d
 80093d4:	0800939d 	.word	0x0800939d
 80093d8:	0800939d 	.word	0x0800939d
 80093dc:	0800939d 	.word	0x0800939d
 80093e0:	0800952d 	.word	0x0800952d
 80093e4:	08009451 	.word	0x08009451
 80093e8:	0800950f 	.word	0x0800950f
 80093ec:	0800939d 	.word	0x0800939d
 80093f0:	0800939d 	.word	0x0800939d
 80093f4:	0800954f 	.word	0x0800954f
 80093f8:	0800939d 	.word	0x0800939d
 80093fc:	08009451 	.word	0x08009451
 8009400:	0800939d 	.word	0x0800939d
 8009404:	0800939d 	.word	0x0800939d
 8009408:	08009517 	.word	0x08009517
 800940c:	682b      	ldr	r3, [r5, #0]
 800940e:	1d1a      	adds	r2, r3, #4
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	602a      	str	r2, [r5, #0]
 8009414:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009418:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800941c:	2301      	movs	r3, #1
 800941e:	e0a3      	b.n	8009568 <_printf_i+0x1f4>
 8009420:	6820      	ldr	r0, [r4, #0]
 8009422:	6829      	ldr	r1, [r5, #0]
 8009424:	0606      	lsls	r6, r0, #24
 8009426:	f101 0304 	add.w	r3, r1, #4
 800942a:	d50a      	bpl.n	8009442 <_printf_i+0xce>
 800942c:	680e      	ldr	r6, [r1, #0]
 800942e:	602b      	str	r3, [r5, #0]
 8009430:	2e00      	cmp	r6, #0
 8009432:	da03      	bge.n	800943c <_printf_i+0xc8>
 8009434:	232d      	movs	r3, #45	; 0x2d
 8009436:	4276      	negs	r6, r6
 8009438:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800943c:	485e      	ldr	r0, [pc, #376]	; (80095b8 <_printf_i+0x244>)
 800943e:	230a      	movs	r3, #10
 8009440:	e019      	b.n	8009476 <_printf_i+0x102>
 8009442:	680e      	ldr	r6, [r1, #0]
 8009444:	602b      	str	r3, [r5, #0]
 8009446:	f010 0f40 	tst.w	r0, #64	; 0x40
 800944a:	bf18      	it	ne
 800944c:	b236      	sxthne	r6, r6
 800944e:	e7ef      	b.n	8009430 <_printf_i+0xbc>
 8009450:	682b      	ldr	r3, [r5, #0]
 8009452:	6820      	ldr	r0, [r4, #0]
 8009454:	1d19      	adds	r1, r3, #4
 8009456:	6029      	str	r1, [r5, #0]
 8009458:	0601      	lsls	r1, r0, #24
 800945a:	d501      	bpl.n	8009460 <_printf_i+0xec>
 800945c:	681e      	ldr	r6, [r3, #0]
 800945e:	e002      	b.n	8009466 <_printf_i+0xf2>
 8009460:	0646      	lsls	r6, r0, #25
 8009462:	d5fb      	bpl.n	800945c <_printf_i+0xe8>
 8009464:	881e      	ldrh	r6, [r3, #0]
 8009466:	4854      	ldr	r0, [pc, #336]	; (80095b8 <_printf_i+0x244>)
 8009468:	2f6f      	cmp	r7, #111	; 0x6f
 800946a:	bf0c      	ite	eq
 800946c:	2308      	moveq	r3, #8
 800946e:	230a      	movne	r3, #10
 8009470:	2100      	movs	r1, #0
 8009472:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009476:	6865      	ldr	r5, [r4, #4]
 8009478:	60a5      	str	r5, [r4, #8]
 800947a:	2d00      	cmp	r5, #0
 800947c:	bfa2      	ittt	ge
 800947e:	6821      	ldrge	r1, [r4, #0]
 8009480:	f021 0104 	bicge.w	r1, r1, #4
 8009484:	6021      	strge	r1, [r4, #0]
 8009486:	b90e      	cbnz	r6, 800948c <_printf_i+0x118>
 8009488:	2d00      	cmp	r5, #0
 800948a:	d04d      	beq.n	8009528 <_printf_i+0x1b4>
 800948c:	4615      	mov	r5, r2
 800948e:	fbb6 f1f3 	udiv	r1, r6, r3
 8009492:	fb03 6711 	mls	r7, r3, r1, r6
 8009496:	5dc7      	ldrb	r7, [r0, r7]
 8009498:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800949c:	4637      	mov	r7, r6
 800949e:	42bb      	cmp	r3, r7
 80094a0:	460e      	mov	r6, r1
 80094a2:	d9f4      	bls.n	800948e <_printf_i+0x11a>
 80094a4:	2b08      	cmp	r3, #8
 80094a6:	d10b      	bne.n	80094c0 <_printf_i+0x14c>
 80094a8:	6823      	ldr	r3, [r4, #0]
 80094aa:	07de      	lsls	r6, r3, #31
 80094ac:	d508      	bpl.n	80094c0 <_printf_i+0x14c>
 80094ae:	6923      	ldr	r3, [r4, #16]
 80094b0:	6861      	ldr	r1, [r4, #4]
 80094b2:	4299      	cmp	r1, r3
 80094b4:	bfde      	ittt	le
 80094b6:	2330      	movle	r3, #48	; 0x30
 80094b8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80094bc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80094c0:	1b52      	subs	r2, r2, r5
 80094c2:	6122      	str	r2, [r4, #16]
 80094c4:	f8cd a000 	str.w	sl, [sp]
 80094c8:	464b      	mov	r3, r9
 80094ca:	aa03      	add	r2, sp, #12
 80094cc:	4621      	mov	r1, r4
 80094ce:	4640      	mov	r0, r8
 80094d0:	f7ff fee2 	bl	8009298 <_printf_common>
 80094d4:	3001      	adds	r0, #1
 80094d6:	d14c      	bne.n	8009572 <_printf_i+0x1fe>
 80094d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80094dc:	b004      	add	sp, #16
 80094de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094e2:	4835      	ldr	r0, [pc, #212]	; (80095b8 <_printf_i+0x244>)
 80094e4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80094e8:	6829      	ldr	r1, [r5, #0]
 80094ea:	6823      	ldr	r3, [r4, #0]
 80094ec:	f851 6b04 	ldr.w	r6, [r1], #4
 80094f0:	6029      	str	r1, [r5, #0]
 80094f2:	061d      	lsls	r5, r3, #24
 80094f4:	d514      	bpl.n	8009520 <_printf_i+0x1ac>
 80094f6:	07df      	lsls	r7, r3, #31
 80094f8:	bf44      	itt	mi
 80094fa:	f043 0320 	orrmi.w	r3, r3, #32
 80094fe:	6023      	strmi	r3, [r4, #0]
 8009500:	b91e      	cbnz	r6, 800950a <_printf_i+0x196>
 8009502:	6823      	ldr	r3, [r4, #0]
 8009504:	f023 0320 	bic.w	r3, r3, #32
 8009508:	6023      	str	r3, [r4, #0]
 800950a:	2310      	movs	r3, #16
 800950c:	e7b0      	b.n	8009470 <_printf_i+0xfc>
 800950e:	6823      	ldr	r3, [r4, #0]
 8009510:	f043 0320 	orr.w	r3, r3, #32
 8009514:	6023      	str	r3, [r4, #0]
 8009516:	2378      	movs	r3, #120	; 0x78
 8009518:	4828      	ldr	r0, [pc, #160]	; (80095bc <_printf_i+0x248>)
 800951a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800951e:	e7e3      	b.n	80094e8 <_printf_i+0x174>
 8009520:	0659      	lsls	r1, r3, #25
 8009522:	bf48      	it	mi
 8009524:	b2b6      	uxthmi	r6, r6
 8009526:	e7e6      	b.n	80094f6 <_printf_i+0x182>
 8009528:	4615      	mov	r5, r2
 800952a:	e7bb      	b.n	80094a4 <_printf_i+0x130>
 800952c:	682b      	ldr	r3, [r5, #0]
 800952e:	6826      	ldr	r6, [r4, #0]
 8009530:	6961      	ldr	r1, [r4, #20]
 8009532:	1d18      	adds	r0, r3, #4
 8009534:	6028      	str	r0, [r5, #0]
 8009536:	0635      	lsls	r5, r6, #24
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	d501      	bpl.n	8009540 <_printf_i+0x1cc>
 800953c:	6019      	str	r1, [r3, #0]
 800953e:	e002      	b.n	8009546 <_printf_i+0x1d2>
 8009540:	0670      	lsls	r0, r6, #25
 8009542:	d5fb      	bpl.n	800953c <_printf_i+0x1c8>
 8009544:	8019      	strh	r1, [r3, #0]
 8009546:	2300      	movs	r3, #0
 8009548:	6123      	str	r3, [r4, #16]
 800954a:	4615      	mov	r5, r2
 800954c:	e7ba      	b.n	80094c4 <_printf_i+0x150>
 800954e:	682b      	ldr	r3, [r5, #0]
 8009550:	1d1a      	adds	r2, r3, #4
 8009552:	602a      	str	r2, [r5, #0]
 8009554:	681d      	ldr	r5, [r3, #0]
 8009556:	6862      	ldr	r2, [r4, #4]
 8009558:	2100      	movs	r1, #0
 800955a:	4628      	mov	r0, r5
 800955c:	f7f6 fe58 	bl	8000210 <memchr>
 8009560:	b108      	cbz	r0, 8009566 <_printf_i+0x1f2>
 8009562:	1b40      	subs	r0, r0, r5
 8009564:	6060      	str	r0, [r4, #4]
 8009566:	6863      	ldr	r3, [r4, #4]
 8009568:	6123      	str	r3, [r4, #16]
 800956a:	2300      	movs	r3, #0
 800956c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009570:	e7a8      	b.n	80094c4 <_printf_i+0x150>
 8009572:	6923      	ldr	r3, [r4, #16]
 8009574:	462a      	mov	r2, r5
 8009576:	4649      	mov	r1, r9
 8009578:	4640      	mov	r0, r8
 800957a:	47d0      	blx	sl
 800957c:	3001      	adds	r0, #1
 800957e:	d0ab      	beq.n	80094d8 <_printf_i+0x164>
 8009580:	6823      	ldr	r3, [r4, #0]
 8009582:	079b      	lsls	r3, r3, #30
 8009584:	d413      	bmi.n	80095ae <_printf_i+0x23a>
 8009586:	68e0      	ldr	r0, [r4, #12]
 8009588:	9b03      	ldr	r3, [sp, #12]
 800958a:	4298      	cmp	r0, r3
 800958c:	bfb8      	it	lt
 800958e:	4618      	movlt	r0, r3
 8009590:	e7a4      	b.n	80094dc <_printf_i+0x168>
 8009592:	2301      	movs	r3, #1
 8009594:	4632      	mov	r2, r6
 8009596:	4649      	mov	r1, r9
 8009598:	4640      	mov	r0, r8
 800959a:	47d0      	blx	sl
 800959c:	3001      	adds	r0, #1
 800959e:	d09b      	beq.n	80094d8 <_printf_i+0x164>
 80095a0:	3501      	adds	r5, #1
 80095a2:	68e3      	ldr	r3, [r4, #12]
 80095a4:	9903      	ldr	r1, [sp, #12]
 80095a6:	1a5b      	subs	r3, r3, r1
 80095a8:	42ab      	cmp	r3, r5
 80095aa:	dcf2      	bgt.n	8009592 <_printf_i+0x21e>
 80095ac:	e7eb      	b.n	8009586 <_printf_i+0x212>
 80095ae:	2500      	movs	r5, #0
 80095b0:	f104 0619 	add.w	r6, r4, #25
 80095b4:	e7f5      	b.n	80095a2 <_printf_i+0x22e>
 80095b6:	bf00      	nop
 80095b8:	08009e01 	.word	0x08009e01
 80095bc:	08009e12 	.word	0x08009e12

080095c0 <_sbrk_r>:
 80095c0:	b538      	push	{r3, r4, r5, lr}
 80095c2:	4d06      	ldr	r5, [pc, #24]	; (80095dc <_sbrk_r+0x1c>)
 80095c4:	2300      	movs	r3, #0
 80095c6:	4604      	mov	r4, r0
 80095c8:	4608      	mov	r0, r1
 80095ca:	602b      	str	r3, [r5, #0]
 80095cc:	f7f7 ff00 	bl	80013d0 <_sbrk>
 80095d0:	1c43      	adds	r3, r0, #1
 80095d2:	d102      	bne.n	80095da <_sbrk_r+0x1a>
 80095d4:	682b      	ldr	r3, [r5, #0]
 80095d6:	b103      	cbz	r3, 80095da <_sbrk_r+0x1a>
 80095d8:	6023      	str	r3, [r4, #0]
 80095da:	bd38      	pop	{r3, r4, r5, pc}
 80095dc:	20004c84 	.word	0x20004c84

080095e0 <__sread>:
 80095e0:	b510      	push	{r4, lr}
 80095e2:	460c      	mov	r4, r1
 80095e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80095e8:	f000 fab2 	bl	8009b50 <_read_r>
 80095ec:	2800      	cmp	r0, #0
 80095ee:	bfab      	itete	ge
 80095f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80095f2:	89a3      	ldrhlt	r3, [r4, #12]
 80095f4:	181b      	addge	r3, r3, r0
 80095f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80095fa:	bfac      	ite	ge
 80095fc:	6563      	strge	r3, [r4, #84]	; 0x54
 80095fe:	81a3      	strhlt	r3, [r4, #12]
 8009600:	bd10      	pop	{r4, pc}

08009602 <__swrite>:
 8009602:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009606:	461f      	mov	r7, r3
 8009608:	898b      	ldrh	r3, [r1, #12]
 800960a:	05db      	lsls	r3, r3, #23
 800960c:	4605      	mov	r5, r0
 800960e:	460c      	mov	r4, r1
 8009610:	4616      	mov	r6, r2
 8009612:	d505      	bpl.n	8009620 <__swrite+0x1e>
 8009614:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009618:	2302      	movs	r3, #2
 800961a:	2200      	movs	r2, #0
 800961c:	f000 f9c8 	bl	80099b0 <_lseek_r>
 8009620:	89a3      	ldrh	r3, [r4, #12]
 8009622:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009626:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800962a:	81a3      	strh	r3, [r4, #12]
 800962c:	4632      	mov	r2, r6
 800962e:	463b      	mov	r3, r7
 8009630:	4628      	mov	r0, r5
 8009632:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009636:	f000 b869 	b.w	800970c <_write_r>

0800963a <__sseek>:
 800963a:	b510      	push	{r4, lr}
 800963c:	460c      	mov	r4, r1
 800963e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009642:	f000 f9b5 	bl	80099b0 <_lseek_r>
 8009646:	1c43      	adds	r3, r0, #1
 8009648:	89a3      	ldrh	r3, [r4, #12]
 800964a:	bf15      	itete	ne
 800964c:	6560      	strne	r0, [r4, #84]	; 0x54
 800964e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009652:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009656:	81a3      	strheq	r3, [r4, #12]
 8009658:	bf18      	it	ne
 800965a:	81a3      	strhne	r3, [r4, #12]
 800965c:	bd10      	pop	{r4, pc}

0800965e <__sclose>:
 800965e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009662:	f000 b8d3 	b.w	800980c <_close_r>
	...

08009668 <__swbuf_r>:
 8009668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800966a:	460e      	mov	r6, r1
 800966c:	4614      	mov	r4, r2
 800966e:	4605      	mov	r5, r0
 8009670:	b118      	cbz	r0, 800967a <__swbuf_r+0x12>
 8009672:	6983      	ldr	r3, [r0, #24]
 8009674:	b90b      	cbnz	r3, 800967a <__swbuf_r+0x12>
 8009676:	f7ff fb81 	bl	8008d7c <__sinit>
 800967a:	4b21      	ldr	r3, [pc, #132]	; (8009700 <__swbuf_r+0x98>)
 800967c:	429c      	cmp	r4, r3
 800967e:	d12b      	bne.n	80096d8 <__swbuf_r+0x70>
 8009680:	686c      	ldr	r4, [r5, #4]
 8009682:	69a3      	ldr	r3, [r4, #24]
 8009684:	60a3      	str	r3, [r4, #8]
 8009686:	89a3      	ldrh	r3, [r4, #12]
 8009688:	071a      	lsls	r2, r3, #28
 800968a:	d52f      	bpl.n	80096ec <__swbuf_r+0x84>
 800968c:	6923      	ldr	r3, [r4, #16]
 800968e:	b36b      	cbz	r3, 80096ec <__swbuf_r+0x84>
 8009690:	6923      	ldr	r3, [r4, #16]
 8009692:	6820      	ldr	r0, [r4, #0]
 8009694:	1ac0      	subs	r0, r0, r3
 8009696:	6963      	ldr	r3, [r4, #20]
 8009698:	b2f6      	uxtb	r6, r6
 800969a:	4283      	cmp	r3, r0
 800969c:	4637      	mov	r7, r6
 800969e:	dc04      	bgt.n	80096aa <__swbuf_r+0x42>
 80096a0:	4621      	mov	r1, r4
 80096a2:	4628      	mov	r0, r5
 80096a4:	f000 f948 	bl	8009938 <_fflush_r>
 80096a8:	bb30      	cbnz	r0, 80096f8 <__swbuf_r+0x90>
 80096aa:	68a3      	ldr	r3, [r4, #8]
 80096ac:	3b01      	subs	r3, #1
 80096ae:	60a3      	str	r3, [r4, #8]
 80096b0:	6823      	ldr	r3, [r4, #0]
 80096b2:	1c5a      	adds	r2, r3, #1
 80096b4:	6022      	str	r2, [r4, #0]
 80096b6:	701e      	strb	r6, [r3, #0]
 80096b8:	6963      	ldr	r3, [r4, #20]
 80096ba:	3001      	adds	r0, #1
 80096bc:	4283      	cmp	r3, r0
 80096be:	d004      	beq.n	80096ca <__swbuf_r+0x62>
 80096c0:	89a3      	ldrh	r3, [r4, #12]
 80096c2:	07db      	lsls	r3, r3, #31
 80096c4:	d506      	bpl.n	80096d4 <__swbuf_r+0x6c>
 80096c6:	2e0a      	cmp	r6, #10
 80096c8:	d104      	bne.n	80096d4 <__swbuf_r+0x6c>
 80096ca:	4621      	mov	r1, r4
 80096cc:	4628      	mov	r0, r5
 80096ce:	f000 f933 	bl	8009938 <_fflush_r>
 80096d2:	b988      	cbnz	r0, 80096f8 <__swbuf_r+0x90>
 80096d4:	4638      	mov	r0, r7
 80096d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80096d8:	4b0a      	ldr	r3, [pc, #40]	; (8009704 <__swbuf_r+0x9c>)
 80096da:	429c      	cmp	r4, r3
 80096dc:	d101      	bne.n	80096e2 <__swbuf_r+0x7a>
 80096de:	68ac      	ldr	r4, [r5, #8]
 80096e0:	e7cf      	b.n	8009682 <__swbuf_r+0x1a>
 80096e2:	4b09      	ldr	r3, [pc, #36]	; (8009708 <__swbuf_r+0xa0>)
 80096e4:	429c      	cmp	r4, r3
 80096e6:	bf08      	it	eq
 80096e8:	68ec      	ldreq	r4, [r5, #12]
 80096ea:	e7ca      	b.n	8009682 <__swbuf_r+0x1a>
 80096ec:	4621      	mov	r1, r4
 80096ee:	4628      	mov	r0, r5
 80096f0:	f000 f81e 	bl	8009730 <__swsetup_r>
 80096f4:	2800      	cmp	r0, #0
 80096f6:	d0cb      	beq.n	8009690 <__swbuf_r+0x28>
 80096f8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80096fc:	e7ea      	b.n	80096d4 <__swbuf_r+0x6c>
 80096fe:	bf00      	nop
 8009700:	08009db0 	.word	0x08009db0
 8009704:	08009dd0 	.word	0x08009dd0
 8009708:	08009d90 	.word	0x08009d90

0800970c <_write_r>:
 800970c:	b538      	push	{r3, r4, r5, lr}
 800970e:	4d07      	ldr	r5, [pc, #28]	; (800972c <_write_r+0x20>)
 8009710:	4604      	mov	r4, r0
 8009712:	4608      	mov	r0, r1
 8009714:	4611      	mov	r1, r2
 8009716:	2200      	movs	r2, #0
 8009718:	602a      	str	r2, [r5, #0]
 800971a:	461a      	mov	r2, r3
 800971c:	f7f7 fbf0 	bl	8000f00 <_write>
 8009720:	1c43      	adds	r3, r0, #1
 8009722:	d102      	bne.n	800972a <_write_r+0x1e>
 8009724:	682b      	ldr	r3, [r5, #0]
 8009726:	b103      	cbz	r3, 800972a <_write_r+0x1e>
 8009728:	6023      	str	r3, [r4, #0]
 800972a:	bd38      	pop	{r3, r4, r5, pc}
 800972c:	20004c84 	.word	0x20004c84

08009730 <__swsetup_r>:
 8009730:	4b32      	ldr	r3, [pc, #200]	; (80097fc <__swsetup_r+0xcc>)
 8009732:	b570      	push	{r4, r5, r6, lr}
 8009734:	681d      	ldr	r5, [r3, #0]
 8009736:	4606      	mov	r6, r0
 8009738:	460c      	mov	r4, r1
 800973a:	b125      	cbz	r5, 8009746 <__swsetup_r+0x16>
 800973c:	69ab      	ldr	r3, [r5, #24]
 800973e:	b913      	cbnz	r3, 8009746 <__swsetup_r+0x16>
 8009740:	4628      	mov	r0, r5
 8009742:	f7ff fb1b 	bl	8008d7c <__sinit>
 8009746:	4b2e      	ldr	r3, [pc, #184]	; (8009800 <__swsetup_r+0xd0>)
 8009748:	429c      	cmp	r4, r3
 800974a:	d10f      	bne.n	800976c <__swsetup_r+0x3c>
 800974c:	686c      	ldr	r4, [r5, #4]
 800974e:	89a3      	ldrh	r3, [r4, #12]
 8009750:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009754:	0719      	lsls	r1, r3, #28
 8009756:	d42c      	bmi.n	80097b2 <__swsetup_r+0x82>
 8009758:	06dd      	lsls	r5, r3, #27
 800975a:	d411      	bmi.n	8009780 <__swsetup_r+0x50>
 800975c:	2309      	movs	r3, #9
 800975e:	6033      	str	r3, [r6, #0]
 8009760:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009764:	81a3      	strh	r3, [r4, #12]
 8009766:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800976a:	e03e      	b.n	80097ea <__swsetup_r+0xba>
 800976c:	4b25      	ldr	r3, [pc, #148]	; (8009804 <__swsetup_r+0xd4>)
 800976e:	429c      	cmp	r4, r3
 8009770:	d101      	bne.n	8009776 <__swsetup_r+0x46>
 8009772:	68ac      	ldr	r4, [r5, #8]
 8009774:	e7eb      	b.n	800974e <__swsetup_r+0x1e>
 8009776:	4b24      	ldr	r3, [pc, #144]	; (8009808 <__swsetup_r+0xd8>)
 8009778:	429c      	cmp	r4, r3
 800977a:	bf08      	it	eq
 800977c:	68ec      	ldreq	r4, [r5, #12]
 800977e:	e7e6      	b.n	800974e <__swsetup_r+0x1e>
 8009780:	0758      	lsls	r0, r3, #29
 8009782:	d512      	bpl.n	80097aa <__swsetup_r+0x7a>
 8009784:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009786:	b141      	cbz	r1, 800979a <__swsetup_r+0x6a>
 8009788:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800978c:	4299      	cmp	r1, r3
 800978e:	d002      	beq.n	8009796 <__swsetup_r+0x66>
 8009790:	4630      	mov	r0, r6
 8009792:	f000 f991 	bl	8009ab8 <_free_r>
 8009796:	2300      	movs	r3, #0
 8009798:	6363      	str	r3, [r4, #52]	; 0x34
 800979a:	89a3      	ldrh	r3, [r4, #12]
 800979c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80097a0:	81a3      	strh	r3, [r4, #12]
 80097a2:	2300      	movs	r3, #0
 80097a4:	6063      	str	r3, [r4, #4]
 80097a6:	6923      	ldr	r3, [r4, #16]
 80097a8:	6023      	str	r3, [r4, #0]
 80097aa:	89a3      	ldrh	r3, [r4, #12]
 80097ac:	f043 0308 	orr.w	r3, r3, #8
 80097b0:	81a3      	strh	r3, [r4, #12]
 80097b2:	6923      	ldr	r3, [r4, #16]
 80097b4:	b94b      	cbnz	r3, 80097ca <__swsetup_r+0x9a>
 80097b6:	89a3      	ldrh	r3, [r4, #12]
 80097b8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80097bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80097c0:	d003      	beq.n	80097ca <__swsetup_r+0x9a>
 80097c2:	4621      	mov	r1, r4
 80097c4:	4630      	mov	r0, r6
 80097c6:	f000 f92b 	bl	8009a20 <__smakebuf_r>
 80097ca:	89a0      	ldrh	r0, [r4, #12]
 80097cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80097d0:	f010 0301 	ands.w	r3, r0, #1
 80097d4:	d00a      	beq.n	80097ec <__swsetup_r+0xbc>
 80097d6:	2300      	movs	r3, #0
 80097d8:	60a3      	str	r3, [r4, #8]
 80097da:	6963      	ldr	r3, [r4, #20]
 80097dc:	425b      	negs	r3, r3
 80097de:	61a3      	str	r3, [r4, #24]
 80097e0:	6923      	ldr	r3, [r4, #16]
 80097e2:	b943      	cbnz	r3, 80097f6 <__swsetup_r+0xc6>
 80097e4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80097e8:	d1ba      	bne.n	8009760 <__swsetup_r+0x30>
 80097ea:	bd70      	pop	{r4, r5, r6, pc}
 80097ec:	0781      	lsls	r1, r0, #30
 80097ee:	bf58      	it	pl
 80097f0:	6963      	ldrpl	r3, [r4, #20]
 80097f2:	60a3      	str	r3, [r4, #8]
 80097f4:	e7f4      	b.n	80097e0 <__swsetup_r+0xb0>
 80097f6:	2000      	movs	r0, #0
 80097f8:	e7f7      	b.n	80097ea <__swsetup_r+0xba>
 80097fa:	bf00      	nop
 80097fc:	20000110 	.word	0x20000110
 8009800:	08009db0 	.word	0x08009db0
 8009804:	08009dd0 	.word	0x08009dd0
 8009808:	08009d90 	.word	0x08009d90

0800980c <_close_r>:
 800980c:	b538      	push	{r3, r4, r5, lr}
 800980e:	4d06      	ldr	r5, [pc, #24]	; (8009828 <_close_r+0x1c>)
 8009810:	2300      	movs	r3, #0
 8009812:	4604      	mov	r4, r0
 8009814:	4608      	mov	r0, r1
 8009816:	602b      	str	r3, [r5, #0]
 8009818:	f7f7 fda6 	bl	8001368 <_close>
 800981c:	1c43      	adds	r3, r0, #1
 800981e:	d102      	bne.n	8009826 <_close_r+0x1a>
 8009820:	682b      	ldr	r3, [r5, #0]
 8009822:	b103      	cbz	r3, 8009826 <_close_r+0x1a>
 8009824:	6023      	str	r3, [r4, #0]
 8009826:	bd38      	pop	{r3, r4, r5, pc}
 8009828:	20004c84 	.word	0x20004c84

0800982c <__sflush_r>:
 800982c:	898a      	ldrh	r2, [r1, #12]
 800982e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009832:	4605      	mov	r5, r0
 8009834:	0710      	lsls	r0, r2, #28
 8009836:	460c      	mov	r4, r1
 8009838:	d458      	bmi.n	80098ec <__sflush_r+0xc0>
 800983a:	684b      	ldr	r3, [r1, #4]
 800983c:	2b00      	cmp	r3, #0
 800983e:	dc05      	bgt.n	800984c <__sflush_r+0x20>
 8009840:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009842:	2b00      	cmp	r3, #0
 8009844:	dc02      	bgt.n	800984c <__sflush_r+0x20>
 8009846:	2000      	movs	r0, #0
 8009848:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800984c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800984e:	2e00      	cmp	r6, #0
 8009850:	d0f9      	beq.n	8009846 <__sflush_r+0x1a>
 8009852:	2300      	movs	r3, #0
 8009854:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009858:	682f      	ldr	r7, [r5, #0]
 800985a:	602b      	str	r3, [r5, #0]
 800985c:	d032      	beq.n	80098c4 <__sflush_r+0x98>
 800985e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009860:	89a3      	ldrh	r3, [r4, #12]
 8009862:	075a      	lsls	r2, r3, #29
 8009864:	d505      	bpl.n	8009872 <__sflush_r+0x46>
 8009866:	6863      	ldr	r3, [r4, #4]
 8009868:	1ac0      	subs	r0, r0, r3
 800986a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800986c:	b10b      	cbz	r3, 8009872 <__sflush_r+0x46>
 800986e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009870:	1ac0      	subs	r0, r0, r3
 8009872:	2300      	movs	r3, #0
 8009874:	4602      	mov	r2, r0
 8009876:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009878:	6a21      	ldr	r1, [r4, #32]
 800987a:	4628      	mov	r0, r5
 800987c:	47b0      	blx	r6
 800987e:	1c43      	adds	r3, r0, #1
 8009880:	89a3      	ldrh	r3, [r4, #12]
 8009882:	d106      	bne.n	8009892 <__sflush_r+0x66>
 8009884:	6829      	ldr	r1, [r5, #0]
 8009886:	291d      	cmp	r1, #29
 8009888:	d82c      	bhi.n	80098e4 <__sflush_r+0xb8>
 800988a:	4a2a      	ldr	r2, [pc, #168]	; (8009934 <__sflush_r+0x108>)
 800988c:	40ca      	lsrs	r2, r1
 800988e:	07d6      	lsls	r6, r2, #31
 8009890:	d528      	bpl.n	80098e4 <__sflush_r+0xb8>
 8009892:	2200      	movs	r2, #0
 8009894:	6062      	str	r2, [r4, #4]
 8009896:	04d9      	lsls	r1, r3, #19
 8009898:	6922      	ldr	r2, [r4, #16]
 800989a:	6022      	str	r2, [r4, #0]
 800989c:	d504      	bpl.n	80098a8 <__sflush_r+0x7c>
 800989e:	1c42      	adds	r2, r0, #1
 80098a0:	d101      	bne.n	80098a6 <__sflush_r+0x7a>
 80098a2:	682b      	ldr	r3, [r5, #0]
 80098a4:	b903      	cbnz	r3, 80098a8 <__sflush_r+0x7c>
 80098a6:	6560      	str	r0, [r4, #84]	; 0x54
 80098a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80098aa:	602f      	str	r7, [r5, #0]
 80098ac:	2900      	cmp	r1, #0
 80098ae:	d0ca      	beq.n	8009846 <__sflush_r+0x1a>
 80098b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80098b4:	4299      	cmp	r1, r3
 80098b6:	d002      	beq.n	80098be <__sflush_r+0x92>
 80098b8:	4628      	mov	r0, r5
 80098ba:	f000 f8fd 	bl	8009ab8 <_free_r>
 80098be:	2000      	movs	r0, #0
 80098c0:	6360      	str	r0, [r4, #52]	; 0x34
 80098c2:	e7c1      	b.n	8009848 <__sflush_r+0x1c>
 80098c4:	6a21      	ldr	r1, [r4, #32]
 80098c6:	2301      	movs	r3, #1
 80098c8:	4628      	mov	r0, r5
 80098ca:	47b0      	blx	r6
 80098cc:	1c41      	adds	r1, r0, #1
 80098ce:	d1c7      	bne.n	8009860 <__sflush_r+0x34>
 80098d0:	682b      	ldr	r3, [r5, #0]
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d0c4      	beq.n	8009860 <__sflush_r+0x34>
 80098d6:	2b1d      	cmp	r3, #29
 80098d8:	d001      	beq.n	80098de <__sflush_r+0xb2>
 80098da:	2b16      	cmp	r3, #22
 80098dc:	d101      	bne.n	80098e2 <__sflush_r+0xb6>
 80098de:	602f      	str	r7, [r5, #0]
 80098e0:	e7b1      	b.n	8009846 <__sflush_r+0x1a>
 80098e2:	89a3      	ldrh	r3, [r4, #12]
 80098e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80098e8:	81a3      	strh	r3, [r4, #12]
 80098ea:	e7ad      	b.n	8009848 <__sflush_r+0x1c>
 80098ec:	690f      	ldr	r7, [r1, #16]
 80098ee:	2f00      	cmp	r7, #0
 80098f0:	d0a9      	beq.n	8009846 <__sflush_r+0x1a>
 80098f2:	0793      	lsls	r3, r2, #30
 80098f4:	680e      	ldr	r6, [r1, #0]
 80098f6:	bf08      	it	eq
 80098f8:	694b      	ldreq	r3, [r1, #20]
 80098fa:	600f      	str	r7, [r1, #0]
 80098fc:	bf18      	it	ne
 80098fe:	2300      	movne	r3, #0
 8009900:	eba6 0807 	sub.w	r8, r6, r7
 8009904:	608b      	str	r3, [r1, #8]
 8009906:	f1b8 0f00 	cmp.w	r8, #0
 800990a:	dd9c      	ble.n	8009846 <__sflush_r+0x1a>
 800990c:	6a21      	ldr	r1, [r4, #32]
 800990e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009910:	4643      	mov	r3, r8
 8009912:	463a      	mov	r2, r7
 8009914:	4628      	mov	r0, r5
 8009916:	47b0      	blx	r6
 8009918:	2800      	cmp	r0, #0
 800991a:	dc06      	bgt.n	800992a <__sflush_r+0xfe>
 800991c:	89a3      	ldrh	r3, [r4, #12]
 800991e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009922:	81a3      	strh	r3, [r4, #12]
 8009924:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009928:	e78e      	b.n	8009848 <__sflush_r+0x1c>
 800992a:	4407      	add	r7, r0
 800992c:	eba8 0800 	sub.w	r8, r8, r0
 8009930:	e7e9      	b.n	8009906 <__sflush_r+0xda>
 8009932:	bf00      	nop
 8009934:	20400001 	.word	0x20400001

08009938 <_fflush_r>:
 8009938:	b538      	push	{r3, r4, r5, lr}
 800993a:	690b      	ldr	r3, [r1, #16]
 800993c:	4605      	mov	r5, r0
 800993e:	460c      	mov	r4, r1
 8009940:	b913      	cbnz	r3, 8009948 <_fflush_r+0x10>
 8009942:	2500      	movs	r5, #0
 8009944:	4628      	mov	r0, r5
 8009946:	bd38      	pop	{r3, r4, r5, pc}
 8009948:	b118      	cbz	r0, 8009952 <_fflush_r+0x1a>
 800994a:	6983      	ldr	r3, [r0, #24]
 800994c:	b90b      	cbnz	r3, 8009952 <_fflush_r+0x1a>
 800994e:	f7ff fa15 	bl	8008d7c <__sinit>
 8009952:	4b14      	ldr	r3, [pc, #80]	; (80099a4 <_fflush_r+0x6c>)
 8009954:	429c      	cmp	r4, r3
 8009956:	d11b      	bne.n	8009990 <_fflush_r+0x58>
 8009958:	686c      	ldr	r4, [r5, #4]
 800995a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800995e:	2b00      	cmp	r3, #0
 8009960:	d0ef      	beq.n	8009942 <_fflush_r+0xa>
 8009962:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009964:	07d0      	lsls	r0, r2, #31
 8009966:	d404      	bmi.n	8009972 <_fflush_r+0x3a>
 8009968:	0599      	lsls	r1, r3, #22
 800996a:	d402      	bmi.n	8009972 <_fflush_r+0x3a>
 800996c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800996e:	f7ff faa3 	bl	8008eb8 <__retarget_lock_acquire_recursive>
 8009972:	4628      	mov	r0, r5
 8009974:	4621      	mov	r1, r4
 8009976:	f7ff ff59 	bl	800982c <__sflush_r>
 800997a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800997c:	07da      	lsls	r2, r3, #31
 800997e:	4605      	mov	r5, r0
 8009980:	d4e0      	bmi.n	8009944 <_fflush_r+0xc>
 8009982:	89a3      	ldrh	r3, [r4, #12]
 8009984:	059b      	lsls	r3, r3, #22
 8009986:	d4dd      	bmi.n	8009944 <_fflush_r+0xc>
 8009988:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800998a:	f7ff fa96 	bl	8008eba <__retarget_lock_release_recursive>
 800998e:	e7d9      	b.n	8009944 <_fflush_r+0xc>
 8009990:	4b05      	ldr	r3, [pc, #20]	; (80099a8 <_fflush_r+0x70>)
 8009992:	429c      	cmp	r4, r3
 8009994:	d101      	bne.n	800999a <_fflush_r+0x62>
 8009996:	68ac      	ldr	r4, [r5, #8]
 8009998:	e7df      	b.n	800995a <_fflush_r+0x22>
 800999a:	4b04      	ldr	r3, [pc, #16]	; (80099ac <_fflush_r+0x74>)
 800999c:	429c      	cmp	r4, r3
 800999e:	bf08      	it	eq
 80099a0:	68ec      	ldreq	r4, [r5, #12]
 80099a2:	e7da      	b.n	800995a <_fflush_r+0x22>
 80099a4:	08009db0 	.word	0x08009db0
 80099a8:	08009dd0 	.word	0x08009dd0
 80099ac:	08009d90 	.word	0x08009d90

080099b0 <_lseek_r>:
 80099b0:	b538      	push	{r3, r4, r5, lr}
 80099b2:	4d07      	ldr	r5, [pc, #28]	; (80099d0 <_lseek_r+0x20>)
 80099b4:	4604      	mov	r4, r0
 80099b6:	4608      	mov	r0, r1
 80099b8:	4611      	mov	r1, r2
 80099ba:	2200      	movs	r2, #0
 80099bc:	602a      	str	r2, [r5, #0]
 80099be:	461a      	mov	r2, r3
 80099c0:	f7f7 fcf9 	bl	80013b6 <_lseek>
 80099c4:	1c43      	adds	r3, r0, #1
 80099c6:	d102      	bne.n	80099ce <_lseek_r+0x1e>
 80099c8:	682b      	ldr	r3, [r5, #0]
 80099ca:	b103      	cbz	r3, 80099ce <_lseek_r+0x1e>
 80099cc:	6023      	str	r3, [r4, #0]
 80099ce:	bd38      	pop	{r3, r4, r5, pc}
 80099d0:	20004c84 	.word	0x20004c84

080099d4 <__swhatbuf_r>:
 80099d4:	b570      	push	{r4, r5, r6, lr}
 80099d6:	460e      	mov	r6, r1
 80099d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099dc:	2900      	cmp	r1, #0
 80099de:	b096      	sub	sp, #88	; 0x58
 80099e0:	4614      	mov	r4, r2
 80099e2:	461d      	mov	r5, r3
 80099e4:	da08      	bge.n	80099f8 <__swhatbuf_r+0x24>
 80099e6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80099ea:	2200      	movs	r2, #0
 80099ec:	602a      	str	r2, [r5, #0]
 80099ee:	061a      	lsls	r2, r3, #24
 80099f0:	d410      	bmi.n	8009a14 <__swhatbuf_r+0x40>
 80099f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80099f6:	e00e      	b.n	8009a16 <__swhatbuf_r+0x42>
 80099f8:	466a      	mov	r2, sp
 80099fa:	f000 f8bb 	bl	8009b74 <_fstat_r>
 80099fe:	2800      	cmp	r0, #0
 8009a00:	dbf1      	blt.n	80099e6 <__swhatbuf_r+0x12>
 8009a02:	9a01      	ldr	r2, [sp, #4]
 8009a04:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009a08:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009a0c:	425a      	negs	r2, r3
 8009a0e:	415a      	adcs	r2, r3
 8009a10:	602a      	str	r2, [r5, #0]
 8009a12:	e7ee      	b.n	80099f2 <__swhatbuf_r+0x1e>
 8009a14:	2340      	movs	r3, #64	; 0x40
 8009a16:	2000      	movs	r0, #0
 8009a18:	6023      	str	r3, [r4, #0]
 8009a1a:	b016      	add	sp, #88	; 0x58
 8009a1c:	bd70      	pop	{r4, r5, r6, pc}
	...

08009a20 <__smakebuf_r>:
 8009a20:	898b      	ldrh	r3, [r1, #12]
 8009a22:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009a24:	079d      	lsls	r5, r3, #30
 8009a26:	4606      	mov	r6, r0
 8009a28:	460c      	mov	r4, r1
 8009a2a:	d507      	bpl.n	8009a3c <__smakebuf_r+0x1c>
 8009a2c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009a30:	6023      	str	r3, [r4, #0]
 8009a32:	6123      	str	r3, [r4, #16]
 8009a34:	2301      	movs	r3, #1
 8009a36:	6163      	str	r3, [r4, #20]
 8009a38:	b002      	add	sp, #8
 8009a3a:	bd70      	pop	{r4, r5, r6, pc}
 8009a3c:	ab01      	add	r3, sp, #4
 8009a3e:	466a      	mov	r2, sp
 8009a40:	f7ff ffc8 	bl	80099d4 <__swhatbuf_r>
 8009a44:	9900      	ldr	r1, [sp, #0]
 8009a46:	4605      	mov	r5, r0
 8009a48:	4630      	mov	r0, r6
 8009a4a:	f7ff fa57 	bl	8008efc <_malloc_r>
 8009a4e:	b948      	cbnz	r0, 8009a64 <__smakebuf_r+0x44>
 8009a50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a54:	059a      	lsls	r2, r3, #22
 8009a56:	d4ef      	bmi.n	8009a38 <__smakebuf_r+0x18>
 8009a58:	f023 0303 	bic.w	r3, r3, #3
 8009a5c:	f043 0302 	orr.w	r3, r3, #2
 8009a60:	81a3      	strh	r3, [r4, #12]
 8009a62:	e7e3      	b.n	8009a2c <__smakebuf_r+0xc>
 8009a64:	4b0d      	ldr	r3, [pc, #52]	; (8009a9c <__smakebuf_r+0x7c>)
 8009a66:	62b3      	str	r3, [r6, #40]	; 0x28
 8009a68:	89a3      	ldrh	r3, [r4, #12]
 8009a6a:	6020      	str	r0, [r4, #0]
 8009a6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a70:	81a3      	strh	r3, [r4, #12]
 8009a72:	9b00      	ldr	r3, [sp, #0]
 8009a74:	6163      	str	r3, [r4, #20]
 8009a76:	9b01      	ldr	r3, [sp, #4]
 8009a78:	6120      	str	r0, [r4, #16]
 8009a7a:	b15b      	cbz	r3, 8009a94 <__smakebuf_r+0x74>
 8009a7c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009a80:	4630      	mov	r0, r6
 8009a82:	f000 f889 	bl	8009b98 <_isatty_r>
 8009a86:	b128      	cbz	r0, 8009a94 <__smakebuf_r+0x74>
 8009a88:	89a3      	ldrh	r3, [r4, #12]
 8009a8a:	f023 0303 	bic.w	r3, r3, #3
 8009a8e:	f043 0301 	orr.w	r3, r3, #1
 8009a92:	81a3      	strh	r3, [r4, #12]
 8009a94:	89a0      	ldrh	r0, [r4, #12]
 8009a96:	4305      	orrs	r5, r0
 8009a98:	81a5      	strh	r5, [r4, #12]
 8009a9a:	e7cd      	b.n	8009a38 <__smakebuf_r+0x18>
 8009a9c:	08008d15 	.word	0x08008d15

08009aa0 <__malloc_lock>:
 8009aa0:	4801      	ldr	r0, [pc, #4]	; (8009aa8 <__malloc_lock+0x8>)
 8009aa2:	f7ff ba09 	b.w	8008eb8 <__retarget_lock_acquire_recursive>
 8009aa6:	bf00      	nop
 8009aa8:	20004c78 	.word	0x20004c78

08009aac <__malloc_unlock>:
 8009aac:	4801      	ldr	r0, [pc, #4]	; (8009ab4 <__malloc_unlock+0x8>)
 8009aae:	f7ff ba04 	b.w	8008eba <__retarget_lock_release_recursive>
 8009ab2:	bf00      	nop
 8009ab4:	20004c78 	.word	0x20004c78

08009ab8 <_free_r>:
 8009ab8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009aba:	2900      	cmp	r1, #0
 8009abc:	d044      	beq.n	8009b48 <_free_r+0x90>
 8009abe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009ac2:	9001      	str	r0, [sp, #4]
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	f1a1 0404 	sub.w	r4, r1, #4
 8009aca:	bfb8      	it	lt
 8009acc:	18e4      	addlt	r4, r4, r3
 8009ace:	f7ff ffe7 	bl	8009aa0 <__malloc_lock>
 8009ad2:	4a1e      	ldr	r2, [pc, #120]	; (8009b4c <_free_r+0x94>)
 8009ad4:	9801      	ldr	r0, [sp, #4]
 8009ad6:	6813      	ldr	r3, [r2, #0]
 8009ad8:	b933      	cbnz	r3, 8009ae8 <_free_r+0x30>
 8009ada:	6063      	str	r3, [r4, #4]
 8009adc:	6014      	str	r4, [r2, #0]
 8009ade:	b003      	add	sp, #12
 8009ae0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009ae4:	f7ff bfe2 	b.w	8009aac <__malloc_unlock>
 8009ae8:	42a3      	cmp	r3, r4
 8009aea:	d908      	bls.n	8009afe <_free_r+0x46>
 8009aec:	6825      	ldr	r5, [r4, #0]
 8009aee:	1961      	adds	r1, r4, r5
 8009af0:	428b      	cmp	r3, r1
 8009af2:	bf01      	itttt	eq
 8009af4:	6819      	ldreq	r1, [r3, #0]
 8009af6:	685b      	ldreq	r3, [r3, #4]
 8009af8:	1949      	addeq	r1, r1, r5
 8009afa:	6021      	streq	r1, [r4, #0]
 8009afc:	e7ed      	b.n	8009ada <_free_r+0x22>
 8009afe:	461a      	mov	r2, r3
 8009b00:	685b      	ldr	r3, [r3, #4]
 8009b02:	b10b      	cbz	r3, 8009b08 <_free_r+0x50>
 8009b04:	42a3      	cmp	r3, r4
 8009b06:	d9fa      	bls.n	8009afe <_free_r+0x46>
 8009b08:	6811      	ldr	r1, [r2, #0]
 8009b0a:	1855      	adds	r5, r2, r1
 8009b0c:	42a5      	cmp	r5, r4
 8009b0e:	d10b      	bne.n	8009b28 <_free_r+0x70>
 8009b10:	6824      	ldr	r4, [r4, #0]
 8009b12:	4421      	add	r1, r4
 8009b14:	1854      	adds	r4, r2, r1
 8009b16:	42a3      	cmp	r3, r4
 8009b18:	6011      	str	r1, [r2, #0]
 8009b1a:	d1e0      	bne.n	8009ade <_free_r+0x26>
 8009b1c:	681c      	ldr	r4, [r3, #0]
 8009b1e:	685b      	ldr	r3, [r3, #4]
 8009b20:	6053      	str	r3, [r2, #4]
 8009b22:	4421      	add	r1, r4
 8009b24:	6011      	str	r1, [r2, #0]
 8009b26:	e7da      	b.n	8009ade <_free_r+0x26>
 8009b28:	d902      	bls.n	8009b30 <_free_r+0x78>
 8009b2a:	230c      	movs	r3, #12
 8009b2c:	6003      	str	r3, [r0, #0]
 8009b2e:	e7d6      	b.n	8009ade <_free_r+0x26>
 8009b30:	6825      	ldr	r5, [r4, #0]
 8009b32:	1961      	adds	r1, r4, r5
 8009b34:	428b      	cmp	r3, r1
 8009b36:	bf04      	itt	eq
 8009b38:	6819      	ldreq	r1, [r3, #0]
 8009b3a:	685b      	ldreq	r3, [r3, #4]
 8009b3c:	6063      	str	r3, [r4, #4]
 8009b3e:	bf04      	itt	eq
 8009b40:	1949      	addeq	r1, r1, r5
 8009b42:	6021      	streq	r1, [r4, #0]
 8009b44:	6054      	str	r4, [r2, #4]
 8009b46:	e7ca      	b.n	8009ade <_free_r+0x26>
 8009b48:	b003      	add	sp, #12
 8009b4a:	bd30      	pop	{r4, r5, pc}
 8009b4c:	20004c7c 	.word	0x20004c7c

08009b50 <_read_r>:
 8009b50:	b538      	push	{r3, r4, r5, lr}
 8009b52:	4d07      	ldr	r5, [pc, #28]	; (8009b70 <_read_r+0x20>)
 8009b54:	4604      	mov	r4, r0
 8009b56:	4608      	mov	r0, r1
 8009b58:	4611      	mov	r1, r2
 8009b5a:	2200      	movs	r2, #0
 8009b5c:	602a      	str	r2, [r5, #0]
 8009b5e:	461a      	mov	r2, r3
 8009b60:	f7f7 f9ec 	bl	8000f3c <_read>
 8009b64:	1c43      	adds	r3, r0, #1
 8009b66:	d102      	bne.n	8009b6e <_read_r+0x1e>
 8009b68:	682b      	ldr	r3, [r5, #0]
 8009b6a:	b103      	cbz	r3, 8009b6e <_read_r+0x1e>
 8009b6c:	6023      	str	r3, [r4, #0]
 8009b6e:	bd38      	pop	{r3, r4, r5, pc}
 8009b70:	20004c84 	.word	0x20004c84

08009b74 <_fstat_r>:
 8009b74:	b538      	push	{r3, r4, r5, lr}
 8009b76:	4d07      	ldr	r5, [pc, #28]	; (8009b94 <_fstat_r+0x20>)
 8009b78:	2300      	movs	r3, #0
 8009b7a:	4604      	mov	r4, r0
 8009b7c:	4608      	mov	r0, r1
 8009b7e:	4611      	mov	r1, r2
 8009b80:	602b      	str	r3, [r5, #0]
 8009b82:	f7f7 fbfd 	bl	8001380 <_fstat>
 8009b86:	1c43      	adds	r3, r0, #1
 8009b88:	d102      	bne.n	8009b90 <_fstat_r+0x1c>
 8009b8a:	682b      	ldr	r3, [r5, #0]
 8009b8c:	b103      	cbz	r3, 8009b90 <_fstat_r+0x1c>
 8009b8e:	6023      	str	r3, [r4, #0]
 8009b90:	bd38      	pop	{r3, r4, r5, pc}
 8009b92:	bf00      	nop
 8009b94:	20004c84 	.word	0x20004c84

08009b98 <_isatty_r>:
 8009b98:	b538      	push	{r3, r4, r5, lr}
 8009b9a:	4d06      	ldr	r5, [pc, #24]	; (8009bb4 <_isatty_r+0x1c>)
 8009b9c:	2300      	movs	r3, #0
 8009b9e:	4604      	mov	r4, r0
 8009ba0:	4608      	mov	r0, r1
 8009ba2:	602b      	str	r3, [r5, #0]
 8009ba4:	f7f7 fbfc 	bl	80013a0 <_isatty>
 8009ba8:	1c43      	adds	r3, r0, #1
 8009baa:	d102      	bne.n	8009bb2 <_isatty_r+0x1a>
 8009bac:	682b      	ldr	r3, [r5, #0]
 8009bae:	b103      	cbz	r3, 8009bb2 <_isatty_r+0x1a>
 8009bb0:	6023      	str	r3, [r4, #0]
 8009bb2:	bd38      	pop	{r3, r4, r5, pc}
 8009bb4:	20004c84 	.word	0x20004c84

08009bb8 <_init>:
 8009bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bba:	bf00      	nop
 8009bbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009bbe:	bc08      	pop	{r3}
 8009bc0:	469e      	mov	lr, r3
 8009bc2:	4770      	bx	lr

08009bc4 <_fini>:
 8009bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bc6:	bf00      	nop
 8009bc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009bca:	bc08      	pop	{r3}
 8009bcc:	469e      	mov	lr, r3
 8009bce:	4770      	bx	lr
