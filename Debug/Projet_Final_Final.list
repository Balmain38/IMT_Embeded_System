
Projet_Final_Final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008d60  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000027c  08008f30  08008f30  00018f30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080091ac  080091ac  00020138  2**0
                  CONTENTS
  4 .ARM          00000008  080091ac  080091ac  000191ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080091b4  080091b4  00020138  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080091b4  080091b4  000191b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080091b8  080091b8  000191b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000138  20000000  080091bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004ac8  20000138  080092f4  00020138  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004c00  080092f4  00024c00  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020138  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d6df  00000000  00000000  00020168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004549  00000000  00000000  0003d847  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018d8  00000000  00000000  00041d90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001700  00000000  00000000  00043668  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019ed3  00000000  00000000  00044d68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d61a  00000000  00000000  0005ec3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d69a  00000000  00000000  0007c255  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001198ef  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006f00  00000000  00000000  00119940  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000138 	.word	0x20000138
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008f18 	.word	0x08008f18

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000013c 	.word	0x2000013c
 800020c:	08008f18 	.word	0x08008f18

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b084      	sub	sp, #16
 80005b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005ba:	463b      	mov	r3, r7
 80005bc:	2200      	movs	r2, #0
 80005be:	601a      	str	r2, [r3, #0]
 80005c0:	605a      	str	r2, [r3, #4]
 80005c2:	609a      	str	r2, [r3, #8]
 80005c4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005c6:	4b21      	ldr	r3, [pc, #132]	; (800064c <MX_ADC1_Init+0x98>)
 80005c8:	4a21      	ldr	r2, [pc, #132]	; (8000650 <MX_ADC1_Init+0x9c>)
 80005ca:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005cc:	4b1f      	ldr	r3, [pc, #124]	; (800064c <MX_ADC1_Init+0x98>)
 80005ce:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80005d2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005d4:	4b1d      	ldr	r3, [pc, #116]	; (800064c <MX_ADC1_Init+0x98>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80005da:	4b1c      	ldr	r3, [pc, #112]	; (800064c <MX_ADC1_Init+0x98>)
 80005dc:	2200      	movs	r2, #0
 80005de:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005e0:	4b1a      	ldr	r3, [pc, #104]	; (800064c <MX_ADC1_Init+0x98>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005e6:	4b19      	ldr	r3, [pc, #100]	; (800064c <MX_ADC1_Init+0x98>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005ee:	4b17      	ldr	r3, [pc, #92]	; (800064c <MX_ADC1_Init+0x98>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005f4:	4b15      	ldr	r3, [pc, #84]	; (800064c <MX_ADC1_Init+0x98>)
 80005f6:	4a17      	ldr	r2, [pc, #92]	; (8000654 <MX_ADC1_Init+0xa0>)
 80005f8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005fa:	4b14      	ldr	r3, [pc, #80]	; (800064c <MX_ADC1_Init+0x98>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000600:	4b12      	ldr	r3, [pc, #72]	; (800064c <MX_ADC1_Init+0x98>)
 8000602:	2201      	movs	r2, #1
 8000604:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000606:	4b11      	ldr	r3, [pc, #68]	; (800064c <MX_ADC1_Init+0x98>)
 8000608:	2200      	movs	r2, #0
 800060a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800060e:	4b0f      	ldr	r3, [pc, #60]	; (800064c <MX_ADC1_Init+0x98>)
 8000610:	2201      	movs	r2, #1
 8000612:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000614:	480d      	ldr	r0, [pc, #52]	; (800064c <MX_ADC1_Init+0x98>)
 8000616:	f000 ff0d 	bl	8001434 <HAL_ADC_Init>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000620:	f000 f97a 	bl	8000918 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000624:	2300      	movs	r3, #0
 8000626:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000628:	2301      	movs	r3, #1
 800062a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800062c:	2300      	movs	r3, #0
 800062e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000630:	463b      	mov	r3, r7
 8000632:	4619      	mov	r1, r3
 8000634:	4805      	ldr	r0, [pc, #20]	; (800064c <MX_ADC1_Init+0x98>)
 8000636:	f001 f88d 	bl	8001754 <HAL_ADC_ConfigChannel>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000640:	f000 f96a 	bl	8000918 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000644:	bf00      	nop
 8000646:	3710      	adds	r7, #16
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	20000154 	.word	0x20000154
 8000650:	40012000 	.word	0x40012000
 8000654:	0f000001 	.word	0x0f000001

08000658 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b08a      	sub	sp, #40	; 0x28
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000660:	f107 0314 	add.w	r3, r7, #20
 8000664:	2200      	movs	r2, #0
 8000666:	601a      	str	r2, [r3, #0]
 8000668:	605a      	str	r2, [r3, #4]
 800066a:	609a      	str	r2, [r3, #8]
 800066c:	60da      	str	r2, [r3, #12]
 800066e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	4a17      	ldr	r2, [pc, #92]	; (80006d4 <HAL_ADC_MspInit+0x7c>)
 8000676:	4293      	cmp	r3, r2
 8000678:	d127      	bne.n	80006ca <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800067a:	2300      	movs	r3, #0
 800067c:	613b      	str	r3, [r7, #16]
 800067e:	4b16      	ldr	r3, [pc, #88]	; (80006d8 <HAL_ADC_MspInit+0x80>)
 8000680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000682:	4a15      	ldr	r2, [pc, #84]	; (80006d8 <HAL_ADC_MspInit+0x80>)
 8000684:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000688:	6453      	str	r3, [r2, #68]	; 0x44
 800068a:	4b13      	ldr	r3, [pc, #76]	; (80006d8 <HAL_ADC_MspInit+0x80>)
 800068c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800068e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000692:	613b      	str	r3, [r7, #16]
 8000694:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000696:	2300      	movs	r3, #0
 8000698:	60fb      	str	r3, [r7, #12]
 800069a:	4b0f      	ldr	r3, [pc, #60]	; (80006d8 <HAL_ADC_MspInit+0x80>)
 800069c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069e:	4a0e      	ldr	r2, [pc, #56]	; (80006d8 <HAL_ADC_MspInit+0x80>)
 80006a0:	f043 0301 	orr.w	r3, r3, #1
 80006a4:	6313      	str	r3, [r2, #48]	; 0x30
 80006a6:	4b0c      	ldr	r3, [pc, #48]	; (80006d8 <HAL_ADC_MspInit+0x80>)
 80006a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006aa:	f003 0301 	and.w	r3, r3, #1
 80006ae:	60fb      	str	r3, [r7, #12]
 80006b0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006b2:	2301      	movs	r3, #1
 80006b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006b6:	2303      	movs	r3, #3
 80006b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ba:	2300      	movs	r3, #0
 80006bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006be:	f107 0314 	add.w	r3, r7, #20
 80006c2:	4619      	mov	r1, r3
 80006c4:	4805      	ldr	r0, [pc, #20]	; (80006dc <HAL_ADC_MspInit+0x84>)
 80006c6:	f001 fbd7 	bl	8001e78 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006ca:	bf00      	nop
 80006cc:	3728      	adds	r7, #40	; 0x28
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	40012000 	.word	0x40012000
 80006d8:	40023800 	.word	0x40023800
 80006dc:	40020000 	.word	0x40020000

080006e0 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b088      	sub	sp, #32
 80006e4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e6:	f107 030c 	add.w	r3, r7, #12
 80006ea:	2200      	movs	r2, #0
 80006ec:	601a      	str	r2, [r3, #0]
 80006ee:	605a      	str	r2, [r3, #4]
 80006f0:	609a      	str	r2, [r3, #8]
 80006f2:	60da      	str	r2, [r3, #12]
 80006f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006f6:	2300      	movs	r3, #0
 80006f8:	60bb      	str	r3, [r7, #8]
 80006fa:	4b43      	ldr	r3, [pc, #268]	; (8000808 <MX_GPIO_Init+0x128>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fe:	4a42      	ldr	r2, [pc, #264]	; (8000808 <MX_GPIO_Init+0x128>)
 8000700:	f043 0304 	orr.w	r3, r3, #4
 8000704:	6313      	str	r3, [r2, #48]	; 0x30
 8000706:	4b40      	ldr	r3, [pc, #256]	; (8000808 <MX_GPIO_Init+0x128>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070a:	f003 0304 	and.w	r3, r3, #4
 800070e:	60bb      	str	r3, [r7, #8]
 8000710:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000712:	2300      	movs	r3, #0
 8000714:	607b      	str	r3, [r7, #4]
 8000716:	4b3c      	ldr	r3, [pc, #240]	; (8000808 <MX_GPIO_Init+0x128>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	4a3b      	ldr	r2, [pc, #236]	; (8000808 <MX_GPIO_Init+0x128>)
 800071c:	f043 0301 	orr.w	r3, r3, #1
 8000720:	6313      	str	r3, [r2, #48]	; 0x30
 8000722:	4b39      	ldr	r3, [pc, #228]	; (8000808 <MX_GPIO_Init+0x128>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	f003 0301 	and.w	r3, r3, #1
 800072a:	607b      	str	r3, [r7, #4]
 800072c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800072e:	2300      	movs	r3, #0
 8000730:	603b      	str	r3, [r7, #0]
 8000732:	4b35      	ldr	r3, [pc, #212]	; (8000808 <MX_GPIO_Init+0x128>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	4a34      	ldr	r2, [pc, #208]	; (8000808 <MX_GPIO_Init+0x128>)
 8000738:	f043 0302 	orr.w	r3, r3, #2
 800073c:	6313      	str	r3, [r2, #48]	; 0x30
 800073e:	4b32      	ldr	r3, [pc, #200]	; (8000808 <MX_GPIO_Init+0x128>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	f003 0302 	and.w	r3, r3, #2
 8000746:	603b      	str	r3, [r7, #0]
 8000748:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_SENSOR_3_Pin|LED_SENSOR_2_Pin|LED_FREQ_SEND_DATA_Pin, GPIO_PIN_RESET);
 800074a:	2200      	movs	r2, #0
 800074c:	2183      	movs	r1, #131	; 0x83
 800074e:	482f      	ldr	r0, [pc, #188]	; (800080c <MX_GPIO_Init+0x12c>)
 8000750:	f001 fd06 	bl	8002160 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_SENSOR_1_GPIO_Port, LED_SENSOR_1_Pin, GPIO_PIN_RESET);
 8000754:	2200      	movs	r2, #0
 8000756:	2101      	movs	r1, #1
 8000758:	482d      	ldr	r0, [pc, #180]	; (8000810 <MX_GPIO_Init+0x130>)
 800075a:	f001 fd01 	bl	8002160 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_SEND_DATA_Pin;
 800075e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000762:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000764:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000768:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076a:	2300      	movs	r3, #0
 800076c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BTN_SEND_DATA_GPIO_Port, &GPIO_InitStruct);
 800076e:	f107 030c 	add.w	r3, r7, #12
 8000772:	4619      	mov	r1, r3
 8000774:	4825      	ldr	r0, [pc, #148]	; (800080c <MX_GPIO_Init+0x12c>)
 8000776:	f001 fb7f 	bl	8001e78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LED_SENSOR_3_Pin|LED_SENSOR_2_Pin|LED_FREQ_SEND_DATA_Pin;
 800077a:	2383      	movs	r3, #131	; 0x83
 800077c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800077e:	2301      	movs	r3, #1
 8000780:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000782:	2300      	movs	r3, #0
 8000784:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000786:	2300      	movs	r3, #0
 8000788:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800078a:	f107 030c 	add.w	r3, r7, #12
 800078e:	4619      	mov	r1, r3
 8000790:	481e      	ldr	r0, [pc, #120]	; (800080c <MX_GPIO_Init+0x12c>)
 8000792:	f001 fb71 	bl	8001e78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = BTN_PLUS_Pin|BTN_MINUS_Pin|BTN_SELECT_Pin;
 8000796:	f240 2322 	movw	r3, #546	; 0x222
 800079a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800079c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80007a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80007a2:	2302      	movs	r3, #2
 80007a4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007a6:	f107 030c 	add.w	r3, r7, #12
 80007aa:	4619      	mov	r1, r3
 80007ac:	4819      	ldr	r0, [pc, #100]	; (8000814 <MX_GPIO_Init+0x134>)
 80007ae:	f001 fb63 	bl	8001e78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_SENSOR_1_Pin;
 80007b2:	2301      	movs	r3, #1
 80007b4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b6:	2301      	movs	r3, #1
 80007b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ba:	2300      	movs	r3, #0
 80007bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007be:	2300      	movs	r3, #0
 80007c0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_SENSOR_1_GPIO_Port, &GPIO_InitStruct);
 80007c2:	f107 030c 	add.w	r3, r7, #12
 80007c6:	4619      	mov	r1, r3
 80007c8:	4811      	ldr	r0, [pc, #68]	; (8000810 <MX_GPIO_Init+0x130>)
 80007ca:	f001 fb55 	bl	8001e78 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 80007ce:	2200      	movs	r2, #0
 80007d0:	2105      	movs	r1, #5
 80007d2:	2007      	movs	r0, #7
 80007d4:	f001 fa94 	bl	8001d00 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80007d8:	2007      	movs	r0, #7
 80007da:	f001 faad 	bl	8001d38 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 80007de:	2200      	movs	r2, #0
 80007e0:	2105      	movs	r1, #5
 80007e2:	2017      	movs	r0, #23
 80007e4:	f001 fa8c 	bl	8001d00 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80007e8:	2017      	movs	r0, #23
 80007ea:	f001 faa5 	bl	8001d38 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80007ee:	2200      	movs	r2, #0
 80007f0:	2105      	movs	r1, #5
 80007f2:	2028      	movs	r0, #40	; 0x28
 80007f4:	f001 fa84 	bl	8001d00 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80007f8:	2028      	movs	r0, #40	; 0x28
 80007fa:	f001 fa9d 	bl	8001d38 <HAL_NVIC_EnableIRQ>

}
 80007fe:	bf00      	nop
 8000800:	3720      	adds	r7, #32
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	40023800 	.word	0x40023800
 800080c:	40020800 	.word	0x40020800
 8000810:	40020400 	.word	0x40020400
 8000814:	40020000 	.word	0x40020000

08000818 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b094      	sub	sp, #80	; 0x50
 800081c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800081e:	f107 031c 	add.w	r3, r7, #28
 8000822:	2234      	movs	r2, #52	; 0x34
 8000824:	2100      	movs	r1, #0
 8000826:	4618      	mov	r0, r3
 8000828:	f007 fb54 	bl	8007ed4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800082c:	f107 0308 	add.w	r3, r7, #8
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
 8000834:	605a      	str	r2, [r3, #4]
 8000836:	609a      	str	r2, [r3, #8]
 8000838:	60da      	str	r2, [r3, #12]
 800083a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800083c:	2300      	movs	r3, #0
 800083e:	607b      	str	r3, [r7, #4]
 8000840:	4b2a      	ldr	r3, [pc, #168]	; (80008ec <SystemClock_Config+0xd4>)
 8000842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000844:	4a29      	ldr	r2, [pc, #164]	; (80008ec <SystemClock_Config+0xd4>)
 8000846:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800084a:	6413      	str	r3, [r2, #64]	; 0x40
 800084c:	4b27      	ldr	r3, [pc, #156]	; (80008ec <SystemClock_Config+0xd4>)
 800084e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000850:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000854:	607b      	str	r3, [r7, #4]
 8000856:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000858:	2300      	movs	r3, #0
 800085a:	603b      	str	r3, [r7, #0]
 800085c:	4b24      	ldr	r3, [pc, #144]	; (80008f0 <SystemClock_Config+0xd8>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	4a23      	ldr	r2, [pc, #140]	; (80008f0 <SystemClock_Config+0xd8>)
 8000862:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000866:	6013      	str	r3, [r2, #0]
 8000868:	4b21      	ldr	r3, [pc, #132]	; (80008f0 <SystemClock_Config+0xd8>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000870:	603b      	str	r3, [r7, #0]
 8000872:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000874:	230a      	movs	r3, #10
 8000876:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000878:	2301      	movs	r3, #1
 800087a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800087c:	2310      	movs	r3, #16
 800087e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000880:	2301      	movs	r3, #1
 8000882:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000884:	2302      	movs	r3, #2
 8000886:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000888:	2300      	movs	r3, #0
 800088a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 800088c:	2310      	movs	r3, #16
 800088e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000890:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000894:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000896:	2304      	movs	r3, #4
 8000898:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800089a:	2304      	movs	r3, #4
 800089c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800089e:	2302      	movs	r3, #2
 80008a0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008a2:	f107 031c 	add.w	r3, r7, #28
 80008a6:	4618      	mov	r0, r3
 80008a8:	f001 ffba 	bl	8002820 <HAL_RCC_OscConfig>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80008b2:	f000 f831 	bl	8000918 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008b6:	230f      	movs	r3, #15
 80008b8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008ba:	2302      	movs	r3, #2
 80008bc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008be:	2300      	movs	r3, #0
 80008c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008c8:	2300      	movs	r3, #0
 80008ca:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008cc:	f107 0308 	add.w	r3, r7, #8
 80008d0:	2102      	movs	r1, #2
 80008d2:	4618      	mov	r0, r3
 80008d4:	f001 fc76 	bl	80021c4 <HAL_RCC_ClockConfig>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80008de:	f000 f81b 	bl	8000918 <Error_Handler>
  }
}
 80008e2:	bf00      	nop
 80008e4:	3750      	adds	r7, #80	; 0x50
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	40023800 	.word	0x40023800
 80008f0:	40007000 	.word	0x40007000

080008f4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	4a04      	ldr	r2, [pc, #16]	; (8000914 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000902:	4293      	cmp	r3, r2
 8000904:	d101      	bne.n	800090a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000906:	f000 fd75 	bl	80013f4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800090a:	bf00      	nop
 800090c:	3708      	adds	r7, #8
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	40001000 	.word	0x40001000

08000918 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800091c:	b672      	cpsid	i
}
 800091e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000920:	e7fe      	b.n	8000920 <Error_Handler+0x8>
	...

08000924 <Fonction_Thread_Sensor_1>:
	.priority=osPriorityHigh, // le niveau est 8 (voir cmsis_os2.h)
	.stack_size=128*4 // Pile de 128 mots de 32 bits
};

// analog read
void Fonction_Thread_Sensor_1(void* P_Info){
 8000924:	b580      	push	{r7, lr}
 8000926:	b08a      	sub	sp, #40	; 0x28
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
	T_DATA Data={.Type=1};
 800092c:	f107 0308 	add.w	r3, r7, #8
 8000930:	221d      	movs	r2, #29
 8000932:	2100      	movs	r1, #0
 8000934:	4618      	mov	r0, r3
 8000936:	f007 facd 	bl	8007ed4 <memset>
 800093a:	2301      	movs	r3, #1
 800093c:	723b      	strb	r3, [r7, #8]
	while(1) {
		HAL_ADC_Start(&hadc1);
 800093e:	481a      	ldr	r0, [pc, #104]	; (80009a8 <Fonction_Thread_Sensor_1+0x84>)
 8000940:	f000 fdbc 	bl	80014bc <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, 1);
 8000944:	2101      	movs	r1, #1
 8000946:	4818      	ldr	r0, [pc, #96]	; (80009a8 <Fonction_Thread_Sensor_1+0x84>)
 8000948:	f000 fe6c 	bl	8001624 <HAL_ADC_PollForConversion>
		uint16_t val_sensor_1 = HAL_ADC_GetValue(&hadc1);
 800094c:	4816      	ldr	r0, [pc, #88]	; (80009a8 <Fonction_Thread_Sensor_1+0x84>)
 800094e:	f000 fef4 	bl	800173a <HAL_ADC_GetValue>
 8000952:	4603      	mov	r3, r0
 8000954:	84fb      	strh	r3, [r7, #38]	; 0x26
		Data.Value = val_sensor_1;
 8000956:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000958:	f8c7 3021 	str.w	r3, [r7, #33]	; 0x21
		HAL_RTC_GetDate(&hrtc, &Data.Date, RTC_FORMAT_BIN);
 800095c:	f107 0308 	add.w	r3, r7, #8
 8000960:	3301      	adds	r3, #1
 8000962:	2200      	movs	r2, #0
 8000964:	4619      	mov	r1, r3
 8000966:	4811      	ldr	r0, [pc, #68]	; (80009ac <Fonction_Thread_Sensor_1+0x88>)
 8000968:	f002 fb32 	bl	8002fd0 <HAL_RTC_GetDate>
		HAL_RTC_GetTime(&hrtc, &Data.Hour, RTC_FORMAT_BIN);
 800096c:	f107 0308 	add.w	r3, r7, #8
 8000970:	3305      	adds	r3, #5
 8000972:	2200      	movs	r2, #0
 8000974:	4619      	mov	r1, r3
 8000976:	480d      	ldr	r0, [pc, #52]	; (80009ac <Fonction_Thread_Sensor_1+0x88>)
 8000978:	f002 facc 	bl	8002f14 <HAL_RTC_GetTime>
		osMessageQueuePut(Pipe_Reception_Analyse, (void*)&Data, 0, osWaitForever);
 800097c:	4b0c      	ldr	r3, [pc, #48]	; (80009b0 <Fonction_Thread_Sensor_1+0x8c>)
 800097e:	6818      	ldr	r0, [r3, #0]
 8000980:	f107 0108 	add.w	r1, r7, #8
 8000984:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000988:	2200      	movs	r2, #0
 800098a:	f004 f9f1 	bl	8004d70 <osMessageQueuePut>
		osThreadFlagsSet(Thread_Watch_Queue, FLAG_WATCH_QUEUE);
 800098e:	4b09      	ldr	r3, [pc, #36]	; (80009b4 <Fonction_Thread_Sensor_1+0x90>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	2102      	movs	r1, #2
 8000994:	4618      	mov	r0, r3
 8000996:	f004 f88d 	bl	8004ab4 <osThreadFlagsSet>
		osDelay(period_sensor_3);
 800099a:	4b07      	ldr	r3, [pc, #28]	; (80009b8 <Fonction_Thread_Sensor_1+0x94>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	4618      	mov	r0, r3
 80009a0:	f004 f957 	bl	8004c52 <osDelay>
	while(1) {
 80009a4:	e7cb      	b.n	800093e <Fonction_Thread_Sensor_1+0x1a>
 80009a6:	bf00      	nop
 80009a8:	20000154 	.word	0x20000154
 80009ac:	200001ec 	.word	0x200001ec
 80009b0:	200001d0 	.word	0x200001d0
 80009b4:	200001d8 	.word	0x200001d8
 80009b8:	20000008 	.word	0x20000008

080009bc <Fonction_Thread_Sensor_2>:
	}
	osThreadTerminate(NULL);
}
// RNG
void Fonction_Thread_Sensor_2(void* P_Info){
 80009bc:	b580      	push	{r7, lr}
 80009be:	b08a      	sub	sp, #40	; 0x28
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
	T_DATA Data={.Type=2};
 80009c4:	f107 0308 	add.w	r3, r7, #8
 80009c8:	221d      	movs	r2, #29
 80009ca:	2100      	movs	r1, #0
 80009cc:	4618      	mov	r0, r3
 80009ce:	f007 fa81 	bl	8007ed4 <memset>
 80009d2:	2302      	movs	r3, #2
 80009d4:	723b      	strb	r3, [r7, #8]
	while(1){
		HAL_RNG_GenerateRandomNumber(&hrng, &Data.Value);
 80009d6:	f107 0308 	add.w	r3, r7, #8
 80009da:	3319      	adds	r3, #25
 80009dc:	4619      	mov	r1, r3
 80009de:	481a      	ldr	r0, [pc, #104]	; (8000a48 <Fonction_Thread_Sensor_2+0x8c>)
 80009e0:	f002 f9cc 	bl	8002d7c <HAL_RNG_GenerateRandomNumber>
		Data.Value %= 12;
 80009e4:	f8d7 1021 	ldr.w	r1, [r7, #33]	; 0x21
 80009e8:	4b18      	ldr	r3, [pc, #96]	; (8000a4c <Fonction_Thread_Sensor_2+0x90>)
 80009ea:	fba3 2301 	umull	r2, r3, r3, r1
 80009ee:	08da      	lsrs	r2, r3, #3
 80009f0:	4613      	mov	r3, r2
 80009f2:	005b      	lsls	r3, r3, #1
 80009f4:	4413      	add	r3, r2
 80009f6:	009b      	lsls	r3, r3, #2
 80009f8:	1aca      	subs	r2, r1, r3
 80009fa:	f8c7 2021 	str.w	r2, [r7, #33]	; 0x21
		HAL_RTC_GetDate(&hrtc, &Data.Date, RTC_FORMAT_BIN);
 80009fe:	f107 0308 	add.w	r3, r7, #8
 8000a02:	3301      	adds	r3, #1
 8000a04:	2200      	movs	r2, #0
 8000a06:	4619      	mov	r1, r3
 8000a08:	4811      	ldr	r0, [pc, #68]	; (8000a50 <Fonction_Thread_Sensor_2+0x94>)
 8000a0a:	f002 fae1 	bl	8002fd0 <HAL_RTC_GetDate>
		HAL_RTC_GetTime(&hrtc, &Data.Hour, RTC_FORMAT_BIN);
 8000a0e:	f107 0308 	add.w	r3, r7, #8
 8000a12:	3305      	adds	r3, #5
 8000a14:	2200      	movs	r2, #0
 8000a16:	4619      	mov	r1, r3
 8000a18:	480d      	ldr	r0, [pc, #52]	; (8000a50 <Fonction_Thread_Sensor_2+0x94>)
 8000a1a:	f002 fa7b 	bl	8002f14 <HAL_RTC_GetTime>
		osMessageQueuePut(Pipe_Reception_Analyse, (void*)&Data, 0, osWaitForever);
 8000a1e:	4b0d      	ldr	r3, [pc, #52]	; (8000a54 <Fonction_Thread_Sensor_2+0x98>)
 8000a20:	6818      	ldr	r0, [r3, #0]
 8000a22:	f107 0108 	add.w	r1, r7, #8
 8000a26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	f004 f9a0 	bl	8004d70 <osMessageQueuePut>
		osThreadFlagsSet(Thread_Watch_Queue, FLAG_WATCH_QUEUE);
 8000a30:	4b09      	ldr	r3, [pc, #36]	; (8000a58 <Fonction_Thread_Sensor_2+0x9c>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	2102      	movs	r1, #2
 8000a36:	4618      	mov	r0, r3
 8000a38:	f004 f83c 	bl	8004ab4 <osThreadFlagsSet>
		osDelay(period_sensor_1);
 8000a3c:	4b07      	ldr	r3, [pc, #28]	; (8000a5c <Fonction_Thread_Sensor_2+0xa0>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	4618      	mov	r0, r3
 8000a42:	f004 f906 	bl	8004c52 <osDelay>
		HAL_RNG_GenerateRandomNumber(&hrng, &Data.Value);
 8000a46:	e7c6      	b.n	80009d6 <Fonction_Thread_Sensor_2+0x1a>
 8000a48:	200001dc 	.word	0x200001dc
 8000a4c:	aaaaaaab 	.word	0xaaaaaaab
 8000a50:	200001ec 	.word	0x200001ec
 8000a54:	200001d0 	.word	0x200001d0
 8000a58:	200001d8 	.word	0x200001d8
 8000a5c:	20000000 	.word	0x20000000

08000a60 <Fonction_Thread_Sensor_3>:
	}
	osThreadTerminate(NULL);
}
// RNG
void Fonction_Thread_Sensor_3(void* P_Info){
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b08a      	sub	sp, #40	; 0x28
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
	T_DATA Data={.Type=3};
 8000a68:	f107 0308 	add.w	r3, r7, #8
 8000a6c:	221d      	movs	r2, #29
 8000a6e:	2100      	movs	r1, #0
 8000a70:	4618      	mov	r0, r3
 8000a72:	f007 fa2f 	bl	8007ed4 <memset>
 8000a76:	2303      	movs	r3, #3
 8000a78:	723b      	strb	r3, [r7, #8]
	while(1){
		HAL_RNG_GenerateRandomNumber(&hrng, &Data.Value);
 8000a7a:	f107 0308 	add.w	r3, r7, #8
 8000a7e:	3319      	adds	r3, #25
 8000a80:	4619      	mov	r1, r3
 8000a82:	481a      	ldr	r0, [pc, #104]	; (8000aec <Fonction_Thread_Sensor_3+0x8c>)
 8000a84:	f002 f97a 	bl	8002d7c <HAL_RNG_GenerateRandomNumber>
		Data.Value %= 500;
 8000a88:	f8d7 2021 	ldr.w	r2, [r7, #33]	; 0x21
 8000a8c:	4b18      	ldr	r3, [pc, #96]	; (8000af0 <Fonction_Thread_Sensor_3+0x90>)
 8000a8e:	fba3 1302 	umull	r1, r3, r3, r2
 8000a92:	095b      	lsrs	r3, r3, #5
 8000a94:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000a98:	fb01 f303 	mul.w	r3, r1, r3
 8000a9c:	1ad3      	subs	r3, r2, r3
 8000a9e:	f8c7 3021 	str.w	r3, [r7, #33]	; 0x21
		HAL_RTC_GetDate(&hrtc, &Data.Date, RTC_FORMAT_BIN);
 8000aa2:	f107 0308 	add.w	r3, r7, #8
 8000aa6:	3301      	adds	r3, #1
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	4619      	mov	r1, r3
 8000aac:	4811      	ldr	r0, [pc, #68]	; (8000af4 <Fonction_Thread_Sensor_3+0x94>)
 8000aae:	f002 fa8f 	bl	8002fd0 <HAL_RTC_GetDate>
		HAL_RTC_GetTime(&hrtc, &Data.Hour, RTC_FORMAT_BIN);
 8000ab2:	f107 0308 	add.w	r3, r7, #8
 8000ab6:	3305      	adds	r3, #5
 8000ab8:	2200      	movs	r2, #0
 8000aba:	4619      	mov	r1, r3
 8000abc:	480d      	ldr	r0, [pc, #52]	; (8000af4 <Fonction_Thread_Sensor_3+0x94>)
 8000abe:	f002 fa29 	bl	8002f14 <HAL_RTC_GetTime>
		osMessageQueuePut(Pipe_Reception_Analyse, (void*)&Data, 0, osWaitForever);
 8000ac2:	4b0d      	ldr	r3, [pc, #52]	; (8000af8 <Fonction_Thread_Sensor_3+0x98>)
 8000ac4:	6818      	ldr	r0, [r3, #0]
 8000ac6:	f107 0108 	add.w	r1, r7, #8
 8000aca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ace:	2200      	movs	r2, #0
 8000ad0:	f004 f94e 	bl	8004d70 <osMessageQueuePut>
		osThreadFlagsSet(Thread_Watch_Queue, FLAG_WATCH_QUEUE);
 8000ad4:	4b09      	ldr	r3, [pc, #36]	; (8000afc <Fonction_Thread_Sensor_3+0x9c>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	2102      	movs	r1, #2
 8000ada:	4618      	mov	r0, r3
 8000adc:	f003 ffea 	bl	8004ab4 <osThreadFlagsSet>
		osDelay(period_sensor_2);
 8000ae0:	4b07      	ldr	r3, [pc, #28]	; (8000b00 <Fonction_Thread_Sensor_3+0xa0>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f004 f8b4 	bl	8004c52 <osDelay>
		HAL_RNG_GenerateRandomNumber(&hrng, &Data.Value);
 8000aea:	e7c6      	b.n	8000a7a <Fonction_Thread_Sensor_3+0x1a>
 8000aec:	200001dc 	.word	0x200001dc
 8000af0:	10624dd3 	.word	0x10624dd3
 8000af4:	200001ec 	.word	0x200001ec
 8000af8:	200001d0 	.word	0x200001d0
 8000afc:	200001d8 	.word	0x200001d8
 8000b00:	20000004 	.word	0x20000004

08000b04 <Fonction_Thread_Send>:
	}
	osThreadTerminate(NULL);
}

void Fonction_Thread_Send(void* P_Info){
 8000b04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b06:	b093      	sub	sp, #76	; 0x4c
 8000b08:	af06      	add	r7, sp, #24
 8000b0a:	6078      	str	r0, [r7, #4]
	T_DATA Data;
	// char* json_message = "{1:0000000000,2:0,3:0000}";
	while(1){
		osThreadFlagsWait(FLAG_SEND_DATA, osFlagsWaitAll, period_send_data);
 8000b0c:	4b1c      	ldr	r3, [pc, #112]	; (8000b80 <Fonction_Thread_Send+0x7c>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	461a      	mov	r2, r3
 8000b12:	2101      	movs	r1, #1
 8000b14:	2001      	movs	r0, #1
 8000b16:	f004 f81b 	bl	8004b50 <osThreadFlagsWait>
		int i = osMessageQueueGetCount(Pipe_Reception_Analyse);
 8000b1a:	4b1a      	ldr	r3, [pc, #104]	; (8000b84 <Fonction_Thread_Send+0x80>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f004 f9e4 	bl	8004eec <osMessageQueueGetCount>
 8000b24:	4603      	mov	r3, r0
 8000b26:	62fb      	str	r3, [r7, #44]	; 0x2c
		while(i--){
 8000b28:	e023      	b.n	8000b72 <Fonction_Thread_Send+0x6e>
			osMessageQueueGet(Pipe_Reception_Analyse, &Data, NULL, osWaitForever);
 8000b2a:	4b16      	ldr	r3, [pc, #88]	; (8000b84 <Fonction_Thread_Send+0x80>)
 8000b2c:	6818      	ldr	r0, [r3, #0]
 8000b2e:	f107 010c 	add.w	r1, r7, #12
 8000b32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b36:	2200      	movs	r2, #0
 8000b38:	f004 f97a 	bl	8004e30 <osMessageQueueGet>
			// memcpy(json_message, buffer, sizeof(Data.Value));
			// memcpy(json_message + sizeof(char) * INDEX_TYPE, itoa(Data.Type), sizeof(Data.Type));
			// send via UART*/

			// printf ("Ecriture Date : %d %d %d\n\r", Data.Hour.Hours, Data.Hour.Minutes, Data.Hour.Seconds);
			printf("{\"1\":\"%d/%d/%d-%d:%d:%d\",\"2\":%d,\"3\":%d}\n", Data.Date.Date, Data.Date.Month, Data.Date.Year, Data.Hour.Hours, Data.Hour.Minutes, Data.Hour.Seconds, Data.Type, Data.Value);
 8000b3c:	7bfb      	ldrb	r3, [r7, #15]
 8000b3e:	461d      	mov	r5, r3
 8000b40:	7bbb      	ldrb	r3, [r7, #14]
 8000b42:	461e      	mov	r6, r3
 8000b44:	7c3b      	ldrb	r3, [r7, #16]
 8000b46:	469c      	mov	ip, r3
 8000b48:	7c7b      	ldrb	r3, [r7, #17]
 8000b4a:	461a      	mov	r2, r3
 8000b4c:	7cbb      	ldrb	r3, [r7, #18]
 8000b4e:	4619      	mov	r1, r3
 8000b50:	7cfb      	ldrb	r3, [r7, #19]
 8000b52:	4618      	mov	r0, r3
 8000b54:	7b3b      	ldrb	r3, [r7, #12]
 8000b56:	461c      	mov	r4, r3
 8000b58:	f8d7 3025 	ldr.w	r3, [r7, #37]	; 0x25
 8000b5c:	9304      	str	r3, [sp, #16]
 8000b5e:	9403      	str	r4, [sp, #12]
 8000b60:	9002      	str	r0, [sp, #8]
 8000b62:	9101      	str	r1, [sp, #4]
 8000b64:	9200      	str	r2, [sp, #0]
 8000b66:	4663      	mov	r3, ip
 8000b68:	4632      	mov	r2, r6
 8000b6a:	4629      	mov	r1, r5
 8000b6c:	4806      	ldr	r0, [pc, #24]	; (8000b88 <Fonction_Thread_Send+0x84>)
 8000b6e:	f007 f9b9 	bl	8007ee4 <iprintf>
		while(i--){
 8000b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b74:	1e5a      	subs	r2, r3, #1
 8000b76:	62fa      	str	r2, [r7, #44]	; 0x2c
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d1d6      	bne.n	8000b2a <Fonction_Thread_Send+0x26>
	while(1){
 8000b7c:	e7c6      	b.n	8000b0c <Fonction_Thread_Send+0x8>
 8000b7e:	bf00      	nop
 8000b80:	2000000c 	.word	0x2000000c
 8000b84:	200001d0 	.word	0x200001d0
 8000b88:	08008f50 	.word	0x08008f50

08000b8c <Fonction_Thread_Watch_Queue>:
		}
	}
	osThreadTerminate(NULL);
}

void Fonction_Thread_Watch_Queue(void* P_Info){
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
	while (1){
		osThreadFlagsWait(FLAG_WATCH_QUEUE, osFlagsWaitAll, HAL_MAX_DELAY);
 8000b94:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000b98:	2101      	movs	r1, #1
 8000b9a:	2002      	movs	r0, #2
 8000b9c:	f003 ffd8 	bl	8004b50 <osThreadFlagsWait>
		if (osMessageQueueGetSpace(Pipe_Reception_Analyse) == 0){
 8000ba0:	4b07      	ldr	r3, [pc, #28]	; (8000bc0 <Fonction_Thread_Watch_Queue+0x34>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f004 f9c1 	bl	8004f2c <osMessageQueueGetSpace>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d1f1      	bne.n	8000b94 <Fonction_Thread_Watch_Queue+0x8>
			osThreadFlagsSet(Thread_Send_Data, FLAG_SEND_DATA);
 8000bb0:	4b04      	ldr	r3, [pc, #16]	; (8000bc4 <Fonction_Thread_Watch_Queue+0x38>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	2101      	movs	r1, #1
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f003 ff7c 	bl	8004ab4 <osThreadFlagsSet>
		osThreadFlagsWait(FLAG_WATCH_QUEUE, osFlagsWaitAll, HAL_MAX_DELAY);
 8000bbc:	e7ea      	b.n	8000b94 <Fonction_Thread_Watch_Queue+0x8>
 8000bbe:	bf00      	nop
 8000bc0:	200001d0 	.word	0x200001d0
 8000bc4:	200001d4 	.word	0x200001d4

08000bc8 <HAL_UART_RxCpltCallback>:
		}
	}
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b086      	sub	sp, #24
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
 8000bd0:	4b21      	ldr	r3, [pc, #132]	; (8000c58 <HAL_UART_RxCpltCallback+0x90>)
 8000bd2:	f8d3 3003 	ldr.w	r3, [r3, #3]
	char subbuff_5[5];
	char subbuff_6[6];
	memcpy(subbuff_5, &receive_buffer[3], 4);
 8000bd6:	613b      	str	r3, [r7, #16]
	subbuff_5[4] = '\0';
 8000bd8:	2300      	movs	r3, #0
 8000bda:	753b      	strb	r3, [r7, #20]
	period_sensor_1 = atoi(subbuff_5);
 8000bdc:	f107 0310 	add.w	r3, r7, #16
 8000be0:	4618      	mov	r0, r3
 8000be2:	f007 f93b 	bl	8007e5c <atoi>
 8000be6:	4603      	mov	r3, r0
 8000be8:	4a1c      	ldr	r2, [pc, #112]	; (8000c5c <HAL_UART_RxCpltCallback+0x94>)
 8000bea:	6013      	str	r3, [r2, #0]
 8000bec:	4b1a      	ldr	r3, [pc, #104]	; (8000c58 <HAL_UART_RxCpltCallback+0x90>)
 8000bee:	f8d3 300a 	ldr.w	r3, [r3, #10]
	memcpy(subbuff_5, &receive_buffer[10], 4);
 8000bf2:	613b      	str	r3, [r7, #16]
	subbuff_5[4] = '\0';
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	753b      	strb	r3, [r7, #20]
	period_sensor_2 = atoi(subbuff_5);
 8000bf8:	f107 0310 	add.w	r3, r7, #16
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f007 f92d 	bl	8007e5c <atoi>
 8000c02:	4603      	mov	r3, r0
 8000c04:	4a16      	ldr	r2, [pc, #88]	; (8000c60 <HAL_UART_RxCpltCallback+0x98>)
 8000c06:	6013      	str	r3, [r2, #0]
 8000c08:	4b13      	ldr	r3, [pc, #76]	; (8000c58 <HAL_UART_RxCpltCallback+0x90>)
 8000c0a:	f8d3 3011 	ldr.w	r3, [r3, #17]
	memcpy(subbuff_5, &receive_buffer[17], 4);
 8000c0e:	613b      	str	r3, [r7, #16]
	subbuff_5[4] = '\0';
 8000c10:	2300      	movs	r3, #0
 8000c12:	753b      	strb	r3, [r7, #20]
	period_sensor_3 = atoi(subbuff_5);
 8000c14:	f107 0310 	add.w	r3, r7, #16
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f007 f91f 	bl	8007e5c <atoi>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	4a10      	ldr	r2, [pc, #64]	; (8000c64 <HAL_UART_RxCpltCallback+0x9c>)
 8000c22:	6013      	str	r3, [r2, #0]
	memcpy(subbuff_6, &receive_buffer[24], 5);
 8000c24:	f107 0308 	add.w	r3, r7, #8
 8000c28:	2205      	movs	r2, #5
 8000c2a:	490f      	ldr	r1, [pc, #60]	; (8000c68 <HAL_UART_RxCpltCallback+0xa0>)
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f007 f943 	bl	8007eb8 <memcpy>
	subbuff_6[5] = '\0';
 8000c32:	2300      	movs	r3, #0
 8000c34:	737b      	strb	r3, [r7, #13]
	period_send_data = atoi(subbuff_6);
 8000c36:	f107 0308 	add.w	r3, r7, #8
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f007 f90e 	bl	8007e5c <atoi>
 8000c40:	4603      	mov	r3, r0
 8000c42:	4a0a      	ldr	r2, [pc, #40]	; (8000c6c <HAL_UART_RxCpltCallback+0xa4>)
 8000c44:	6013      	str	r3, [r2, #0]
	// printf("%d %d %d %d\n\r", period_sensor_1, period_sensor_2, period_sensor_3, period_send_data);
	// {1:1000,2:1000,3:1000,4:03000}
	// }*/
	HAL_UART_Receive_IT(&huart2, (void*)&receive_buffer, MESSAGE_RECEIVE_SIZE);
 8000c46:	221e      	movs	r2, #30
 8000c48:	4903      	ldr	r1, [pc, #12]	; (8000c58 <HAL_UART_RxCpltCallback+0x90>)
 8000c4a:	4809      	ldr	r0, [pc, #36]	; (8000c70 <HAL_UART_RxCpltCallback+0xa8>)
 8000c4c:	f002 fe79 	bl	8003942 <HAL_UART_Receive_IT>
}
 8000c50:	bf00      	nop
 8000c52:	3718      	adds	r7, #24
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	2000019c 	.word	0x2000019c
 8000c5c:	20000000 	.word	0x20000000
 8000c60:	20000004 	.word	0x20000004
 8000c64:	20000008 	.word	0x20000008
 8000c68:	200001b4 	.word	0x200001b4
 8000c6c:	2000000c 	.word	0x2000000c
 8000c70:	20000258 	.word	0x20000258

08000c74 <HAL_GPIO_EXTI_Callback>:
	if (state_config != 4 && *(PERIOD[state_config]) > 100) PERIOD[state_config] -= 100;
	else if (state_config == 4 && *(PERIOD[state_config]) > 1000) PERIOD[state_config] -= 100;
}


void HAL_GPIO_EXTI_Callback(uint16_t P_Pin){
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b088      	sub	sp, #32
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	80fb      	strh	r3, [r7, #6]
	char * pr = "Appui brtn";
 8000c7e:	4b21      	ldr	r3, [pc, #132]	; (8000d04 <HAL_GPIO_EXTI_Callback+0x90>)
 8000c80:	61fb      	str	r3, [r7, #28]
	printf("%s\n\r", pr);
 8000c82:	69f9      	ldr	r1, [r7, #28]
 8000c84:	4820      	ldr	r0, [pc, #128]	; (8000d08 <HAL_GPIO_EXTI_Callback+0x94>)
 8000c86:	f007 f92d 	bl	8007ee4 <iprintf>
	if (P_Pin == BTN_SEND_DATA_Pin){
 8000c8a:	88fb      	ldrh	r3, [r7, #6]
 8000c8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000c90:	d10c      	bne.n	8000cac <HAL_GPIO_EXTI_Callback+0x38>
		char * p = "Btn bleu";
 8000c92:	4b1e      	ldr	r3, [pc, #120]	; (8000d0c <HAL_GPIO_EXTI_Callback+0x98>)
 8000c94:	60fb      	str	r3, [r7, #12]
		printf("%s\n\r", p);
 8000c96:	68f9      	ldr	r1, [r7, #12]
 8000c98:	481b      	ldr	r0, [pc, #108]	; (8000d08 <HAL_GPIO_EXTI_Callback+0x94>)
 8000c9a:	f007 f923 	bl	8007ee4 <iprintf>
		osThreadFlagsSet(Thread_Send_Data, FLAG_SEND_DATA);
 8000c9e:	4b1c      	ldr	r3, [pc, #112]	; (8000d10 <HAL_GPIO_EXTI_Callback+0x9c>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	2101      	movs	r1, #1
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f003 ff05 	bl	8004ab4 <osThreadFlagsSet>
	else if (P_Pin == BTN_MINUS_Pin){ // && state_config != 0
		char * me = "Bonton minus";
		printf("%s, state config : %d\n\r", me, state_config);
		// handler_btn_minus();
	}
}
 8000caa:	e026      	b.n	8000cfa <HAL_GPIO_EXTI_Callback+0x86>
	else if (P_Pin == BTN_SELECT_Pin){
 8000cac:	88fb      	ldrh	r3, [r7, #6]
 8000cae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000cb2:	d109      	bne.n	8000cc8 <HAL_GPIO_EXTI_Callback+0x54>
		char * mess = "Bouton select";
 8000cb4:	4b17      	ldr	r3, [pc, #92]	; (8000d14 <HAL_GPIO_EXTI_Callback+0xa0>)
 8000cb6:	613b      	str	r3, [r7, #16]
		printf("%s, state config : %d\n\r", mess, state_config);
 8000cb8:	4b17      	ldr	r3, [pc, #92]	; (8000d18 <HAL_GPIO_EXTI_Callback+0xa4>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	461a      	mov	r2, r3
 8000cbe:	6939      	ldr	r1, [r7, #16]
 8000cc0:	4816      	ldr	r0, [pc, #88]	; (8000d1c <HAL_GPIO_EXTI_Callback+0xa8>)
 8000cc2:	f007 f90f 	bl	8007ee4 <iprintf>
}
 8000cc6:	e018      	b.n	8000cfa <HAL_GPIO_EXTI_Callback+0x86>
	else if (P_Pin == BTN_PLUS_Pin){ //  && state_config != 0
 8000cc8:	88fb      	ldrh	r3, [r7, #6]
 8000cca:	2b02      	cmp	r3, #2
 8000ccc:	d109      	bne.n	8000ce2 <HAL_GPIO_EXTI_Callback+0x6e>
		char * mes = "Bonton plus";
 8000cce:	4b14      	ldr	r3, [pc, #80]	; (8000d20 <HAL_GPIO_EXTI_Callback+0xac>)
 8000cd0:	617b      	str	r3, [r7, #20]
		printf("%s, state config : %d\n\r", mes, state_config);
 8000cd2:	4b11      	ldr	r3, [pc, #68]	; (8000d18 <HAL_GPIO_EXTI_Callback+0xa4>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	461a      	mov	r2, r3
 8000cd8:	6979      	ldr	r1, [r7, #20]
 8000cda:	4810      	ldr	r0, [pc, #64]	; (8000d1c <HAL_GPIO_EXTI_Callback+0xa8>)
 8000cdc:	f007 f902 	bl	8007ee4 <iprintf>
}
 8000ce0:	e00b      	b.n	8000cfa <HAL_GPIO_EXTI_Callback+0x86>
	else if (P_Pin == BTN_MINUS_Pin){ // && state_config != 0
 8000ce2:	88fb      	ldrh	r3, [r7, #6]
 8000ce4:	2b20      	cmp	r3, #32
 8000ce6:	d108      	bne.n	8000cfa <HAL_GPIO_EXTI_Callback+0x86>
		char * me = "Bonton minus";
 8000ce8:	4b0e      	ldr	r3, [pc, #56]	; (8000d24 <HAL_GPIO_EXTI_Callback+0xb0>)
 8000cea:	61bb      	str	r3, [r7, #24]
		printf("%s, state config : %d\n\r", me, state_config);
 8000cec:	4b0a      	ldr	r3, [pc, #40]	; (8000d18 <HAL_GPIO_EXTI_Callback+0xa4>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	461a      	mov	r2, r3
 8000cf2:	69b9      	ldr	r1, [r7, #24]
 8000cf4:	4809      	ldr	r0, [pc, #36]	; (8000d1c <HAL_GPIO_EXTI_Callback+0xa8>)
 8000cf6:	f007 f8f5 	bl	8007ee4 <iprintf>
}
 8000cfa:	bf00      	nop
 8000cfc:	3720      	adds	r7, #32
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	08008f7c 	.word	0x08008f7c
 8000d08:	08008f88 	.word	0x08008f88
 8000d0c:	08008f90 	.word	0x08008f90
 8000d10:	200001d4 	.word	0x200001d4
 8000d14:	08008f9c 	.word	0x08008f9c
 8000d18:	200001bc 	.word	0x200001bc
 8000d1c:	08008fac 	.word	0x08008fac
 8000d20:	08008fc4 	.word	0x08008fc4
 8000d24:	08008fd0 	.word	0x08008fd0

08000d28 <_write>:

int _write(int P_Flux, char* P_Message, int P_Taille) {
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b086      	sub	sp, #24
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	60f8      	str	r0, [r7, #12]
 8000d30:	60b9      	str	r1, [r7, #8]
 8000d32:	607a      	str	r2, [r7, #4]
	HAL_StatusTypeDef Etat = HAL_UART_Transmit(&huart2, (uint8_t *) P_Message, P_Taille, HAL_MAX_DELAY);
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	b29a      	uxth	r2, r3
 8000d38:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d3c:	68b9      	ldr	r1, [r7, #8]
 8000d3e:	4808      	ldr	r0, [pc, #32]	; (8000d60 <_write+0x38>)
 8000d40:	f002 fccb 	bl	80036da <HAL_UART_Transmit>
 8000d44:	4603      	mov	r3, r0
 8000d46:	75fb      	strb	r3, [r7, #23]
	if (Etat == HAL_OK) return P_Taille;
 8000d48:	7dfb      	ldrb	r3, [r7, #23]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d101      	bne.n	8000d52 <_write+0x2a>
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	e001      	b.n	8000d56 <_write+0x2e>
	else return -1;
 8000d52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	3718      	adds	r7, #24
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	20000258 	.word	0x20000258

08000d64 <_read>:
//---------------------------
int _read(int P_Flux, char* P_Message, int P_Taille) {
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b086      	sub	sp, #24
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	60f8      	str	r0, [r7, #12]
 8000d6c:	60b9      	str	r1, [r7, #8]
 8000d6e:	607a      	str	r2, [r7, #4]
	HAL_StatusTypeDef Etat=HAL_UART_Receive(&huart2, (uint8_t *) P_Message, 1, HAL_MAX_DELAY);
 8000d70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d74:	2201      	movs	r2, #1
 8000d76:	68b9      	ldr	r1, [r7, #8]
 8000d78:	4807      	ldr	r0, [pc, #28]	; (8000d98 <_read+0x34>)
 8000d7a:	f002 fd40 	bl	80037fe <HAL_UART_Receive>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	75fb      	strb	r3, [r7, #23]
	if (Etat == HAL_OK) return 1;
 8000d82:	7dfb      	ldrb	r3, [r7, #23]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d101      	bne.n	8000d8c <_read+0x28>
 8000d88:	2301      	movs	r3, #1
 8000d8a:	e001      	b.n	8000d90 <_read+0x2c>
	else return -1;
 8000d8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000d90:	4618      	mov	r0, r3
 8000d92:	3718      	adds	r7, #24
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	20000258 	.word	0x20000258

08000d9c <main>:

void SystemClock_Config(void);
//--------------------
extern UART_HandleTypeDef huart2;

int main(){
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
	PERIOD[0] = &period_sensor_1;
 8000da0:	4b25      	ldr	r3, [pc, #148]	; (8000e38 <main+0x9c>)
 8000da2:	4a26      	ldr	r2, [pc, #152]	; (8000e3c <main+0xa0>)
 8000da4:	601a      	str	r2, [r3, #0]
	PERIOD[1] = &period_sensor_2;
 8000da6:	4b24      	ldr	r3, [pc, #144]	; (8000e38 <main+0x9c>)
 8000da8:	4a25      	ldr	r2, [pc, #148]	; (8000e40 <main+0xa4>)
 8000daa:	605a      	str	r2, [r3, #4]
	PERIOD[2] = &period_sensor_3;
 8000dac:	4b22      	ldr	r3, [pc, #136]	; (8000e38 <main+0x9c>)
 8000dae:	4a25      	ldr	r2, [pc, #148]	; (8000e44 <main+0xa8>)
 8000db0:	609a      	str	r2, [r3, #8]
	PERIOD[3] = &period_send_data;
 8000db2:	4b21      	ldr	r3, [pc, #132]	; (8000e38 <main+0x9c>)
 8000db4:	4a24      	ldr	r2, [pc, #144]	; (8000e48 <main+0xac>)
 8000db6:	60da      	str	r2, [r3, #12]
	HAL_Init();
 8000db8:	f000 fafa 	bl	80013b0 <HAL_Init>
	SystemClock_Config();
 8000dbc:	f7ff fd2c 	bl	8000818 <SystemClock_Config>
	MX_USART2_UART_Init();
 8000dc0:	f000 fa52 	bl	8001268 <MX_USART2_UART_Init>
	MX_RNG_Init();
 8000dc4:	f000 f860 	bl	8000e88 <MX_RNG_Init>
	MX_GPIO_Init();
 8000dc8:	f7ff fc8a 	bl	80006e0 <MX_GPIO_Init>
	MX_RTC_Init();
 8000dcc:	f000 f892 	bl	8000ef4 <MX_RTC_Init>
	MX_ADC1_Init();
 8000dd0:	f7ff fbf0 	bl	80005b4 <MX_ADC1_Init>
	osKernelInitialize();
 8000dd4:	f003 fd92 	bl	80048fc <osKernelInitialize>
	HAL_UART_Receive_IT(&huart2, (void*)&receive_buffer, MESSAGE_RECEIVE_SIZE);
 8000dd8:	221e      	movs	r2, #30
 8000dda:	491c      	ldr	r1, [pc, #112]	; (8000e4c <main+0xb0>)
 8000ddc:	481c      	ldr	r0, [pc, #112]	; (8000e50 <main+0xb4>)
 8000dde:	f002 fdb0 	bl	8003942 <HAL_UART_Receive_IT>
	Pipe_Reception_Analyse = osMessageQueueNew(TAILLE_PIPE_RECEPTION_ANALYSE, sizeof(T_DATA), NULL);
 8000de2:	2200      	movs	r2, #0
 8000de4:	211d      	movs	r1, #29
 8000de6:	20c8      	movs	r0, #200	; 0xc8
 8000de8:	f003 ff4e 	bl	8004c88 <osMessageQueueNew>
 8000dec:	4603      	mov	r3, r0
 8000dee:	4a19      	ldr	r2, [pc, #100]	; (8000e54 <main+0xb8>)
 8000df0:	6013      	str	r3, [r2, #0]
	osThreadNew(Fonction_Thread_Sensor_1, NULL, &Config_Thread_Sensor_1);
 8000df2:	4a19      	ldr	r2, [pc, #100]	; (8000e58 <main+0xbc>)
 8000df4:	2100      	movs	r1, #0
 8000df6:	4819      	ldr	r0, [pc, #100]	; (8000e5c <main+0xc0>)
 8000df8:	f003 fdca 	bl	8004990 <osThreadNew>
	osThreadNew(Fonction_Thread_Sensor_2, NULL, &Config_Thread_Sensor_2);
 8000dfc:	4a18      	ldr	r2, [pc, #96]	; (8000e60 <main+0xc4>)
 8000dfe:	2100      	movs	r1, #0
 8000e00:	4818      	ldr	r0, [pc, #96]	; (8000e64 <main+0xc8>)
 8000e02:	f003 fdc5 	bl	8004990 <osThreadNew>
	osThreadNew(Fonction_Thread_Sensor_3, NULL, &Config_Thread_Sensor_3);
 8000e06:	4a18      	ldr	r2, [pc, #96]	; (8000e68 <main+0xcc>)
 8000e08:	2100      	movs	r1, #0
 8000e0a:	4818      	ldr	r0, [pc, #96]	; (8000e6c <main+0xd0>)
 8000e0c:	f003 fdc0 	bl	8004990 <osThreadNew>
	Thread_Watch_Queue = osThreadNew(Fonction_Thread_Watch_Queue, NULL, &Config_Thread_Watch_Queue);
 8000e10:	4a17      	ldr	r2, [pc, #92]	; (8000e70 <main+0xd4>)
 8000e12:	2100      	movs	r1, #0
 8000e14:	4817      	ldr	r0, [pc, #92]	; (8000e74 <main+0xd8>)
 8000e16:	f003 fdbb 	bl	8004990 <osThreadNew>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	4a16      	ldr	r2, [pc, #88]	; (8000e78 <main+0xdc>)
 8000e1e:	6013      	str	r3, [r2, #0]
	Thread_Send_Data = osThreadNew(Fonction_Thread_Send, NULL, &Config_Thread_Send);
 8000e20:	4a16      	ldr	r2, [pc, #88]	; (8000e7c <main+0xe0>)
 8000e22:	2100      	movs	r1, #0
 8000e24:	4816      	ldr	r0, [pc, #88]	; (8000e80 <main+0xe4>)
 8000e26:	f003 fdb3 	bl	8004990 <osThreadNew>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	4a15      	ldr	r2, [pc, #84]	; (8000e84 <main+0xe8>)
 8000e2e:	6013      	str	r3, [r2, #0]
	osKernelStart();
 8000e30:	f003 fd88 	bl	8004944 <osKernelStart>
	while(1);
 8000e34:	e7fe      	b.n	8000e34 <main+0x98>
 8000e36:	bf00      	nop
 8000e38:	200001c0 	.word	0x200001c0
 8000e3c:	20000000 	.word	0x20000000
 8000e40:	20000004 	.word	0x20000004
 8000e44:	20000008 	.word	0x20000008
 8000e48:	2000000c 	.word	0x2000000c
 8000e4c:	2000019c 	.word	0x2000019c
 8000e50:	20000258 	.word	0x20000258
 8000e54:	200001d0 	.word	0x200001d0
 8000e58:	20000010 	.word	0x20000010
 8000e5c:	08000925 	.word	0x08000925
 8000e60:	20000034 	.word	0x20000034
 8000e64:	080009bd 	.word	0x080009bd
 8000e68:	20000058 	.word	0x20000058
 8000e6c:	08000a61 	.word	0x08000a61
 8000e70:	200000a0 	.word	0x200000a0
 8000e74:	08000b8d 	.word	0x08000b8d
 8000e78:	200001d8 	.word	0x200001d8
 8000e7c:	2000007c 	.word	0x2000007c
 8000e80:	08000b05 	.word	0x08000b05
 8000e84:	200001d4 	.word	0x200001d4

08000e88 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8000e8c:	4b06      	ldr	r3, [pc, #24]	; (8000ea8 <MX_RNG_Init+0x20>)
 8000e8e:	4a07      	ldr	r2, [pc, #28]	; (8000eac <MX_RNG_Init+0x24>)
 8000e90:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8000e92:	4805      	ldr	r0, [pc, #20]	; (8000ea8 <MX_RNG_Init+0x20>)
 8000e94:	f001 ff48 	bl	8002d28 <HAL_RNG_Init>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d001      	beq.n	8000ea2 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8000e9e:	f7ff fd3b 	bl	8000918 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8000ea2:	bf00      	nop
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	200001dc 	.word	0x200001dc
 8000eac:	40080000 	.word	0x40080000

08000eb0 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b085      	sub	sp, #20
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]

  if(rngHandle->Instance==RNG)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a0b      	ldr	r2, [pc, #44]	; (8000eec <HAL_RNG_MspInit+0x3c>)
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	d10d      	bne.n	8000ede <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	60fb      	str	r3, [r7, #12]
 8000ec6:	4b0a      	ldr	r3, [pc, #40]	; (8000ef0 <HAL_RNG_MspInit+0x40>)
 8000ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eca:	4a09      	ldr	r2, [pc, #36]	; (8000ef0 <HAL_RNG_MspInit+0x40>)
 8000ecc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ed0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ed2:	4b07      	ldr	r3, [pc, #28]	; (8000ef0 <HAL_RNG_MspInit+0x40>)
 8000ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000eda:	60fb      	str	r3, [r7, #12]
 8000edc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 8000ede:	bf00      	nop
 8000ee0:	3714      	adds	r7, #20
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	40080000 	.word	0x40080000
 8000ef0:	40023800 	.word	0x40023800

08000ef4 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000ef8:	4b0f      	ldr	r3, [pc, #60]	; (8000f38 <MX_RTC_Init+0x44>)
 8000efa:	4a10      	ldr	r2, [pc, #64]	; (8000f3c <MX_RTC_Init+0x48>)
 8000efc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000efe:	4b0e      	ldr	r3, [pc, #56]	; (8000f38 <MX_RTC_Init+0x44>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000f04:	4b0c      	ldr	r3, [pc, #48]	; (8000f38 <MX_RTC_Init+0x44>)
 8000f06:	227f      	movs	r2, #127	; 0x7f
 8000f08:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000f0a:	4b0b      	ldr	r3, [pc, #44]	; (8000f38 <MX_RTC_Init+0x44>)
 8000f0c:	22ff      	movs	r2, #255	; 0xff
 8000f0e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000f10:	4b09      	ldr	r3, [pc, #36]	; (8000f38 <MX_RTC_Init+0x44>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000f16:	4b08      	ldr	r3, [pc, #32]	; (8000f38 <MX_RTC_Init+0x44>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000f1c:	4b06      	ldr	r3, [pc, #24]	; (8000f38 <MX_RTC_Init+0x44>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000f22:	4805      	ldr	r0, [pc, #20]	; (8000f38 <MX_RTC_Init+0x44>)
 8000f24:	f001 ff80 	bl	8002e28 <HAL_RTC_Init>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000f2e:	f7ff fcf3 	bl	8000918 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000f32:	bf00      	nop
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	200001ec 	.word	0x200001ec
 8000f3c:	40002800 	.word	0x40002800

08000f40 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b088      	sub	sp, #32
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f48:	f107 0308 	add.w	r3, r7, #8
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	601a      	str	r2, [r3, #0]
 8000f50:	605a      	str	r2, [r3, #4]
 8000f52:	609a      	str	r2, [r3, #8]
 8000f54:	60da      	str	r2, [r3, #12]
 8000f56:	611a      	str	r2, [r3, #16]
 8000f58:	615a      	str	r2, [r3, #20]
  if(rtcHandle->Instance==RTC)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	4a0c      	ldr	r2, [pc, #48]	; (8000f90 <HAL_RTC_MspInit+0x50>)
 8000f60:	4293      	cmp	r3, r2
 8000f62:	d111      	bne.n	8000f88 <HAL_RTC_MspInit+0x48>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000f64:	2304      	movs	r3, #4
 8000f66:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000f68:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f6c:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f6e:	f107 0308 	add.w	r3, r7, #8
 8000f72:	4618      	mov	r0, r3
 8000f74:	f001 fb78 	bl	8002668 <HAL_RCCEx_PeriphCLKConfig>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8000f7e:	f7ff fccb 	bl	8000918 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000f82:	4b04      	ldr	r3, [pc, #16]	; (8000f94 <HAL_RTC_MspInit+0x54>)
 8000f84:	2201      	movs	r2, #1
 8000f86:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000f88:	bf00      	nop
 8000f8a:	3720      	adds	r7, #32
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	40002800 	.word	0x40002800
 8000f94:	42470e3c 	.word	0x42470e3c

08000f98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	607b      	str	r3, [r7, #4]
 8000fa2:	4b12      	ldr	r3, [pc, #72]	; (8000fec <HAL_MspInit+0x54>)
 8000fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fa6:	4a11      	ldr	r2, [pc, #68]	; (8000fec <HAL_MspInit+0x54>)
 8000fa8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fac:	6453      	str	r3, [r2, #68]	; 0x44
 8000fae:	4b0f      	ldr	r3, [pc, #60]	; (8000fec <HAL_MspInit+0x54>)
 8000fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fb6:	607b      	str	r3, [r7, #4]
 8000fb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fba:	2300      	movs	r3, #0
 8000fbc:	603b      	str	r3, [r7, #0]
 8000fbe:	4b0b      	ldr	r3, [pc, #44]	; (8000fec <HAL_MspInit+0x54>)
 8000fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc2:	4a0a      	ldr	r2, [pc, #40]	; (8000fec <HAL_MspInit+0x54>)
 8000fc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fc8:	6413      	str	r3, [r2, #64]	; 0x40
 8000fca:	4b08      	ldr	r3, [pc, #32]	; (8000fec <HAL_MspInit+0x54>)
 8000fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fd2:	603b      	str	r3, [r7, #0]
 8000fd4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	210f      	movs	r1, #15
 8000fda:	f06f 0001 	mvn.w	r0, #1
 8000fde:	f000 fe8f 	bl	8001d00 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fe2:	bf00      	nop
 8000fe4:	3708      	adds	r7, #8
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	40023800 	.word	0x40023800

08000ff0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b08e      	sub	sp, #56	; 0x38
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001000:	2300      	movs	r3, #0
 8001002:	60fb      	str	r3, [r7, #12]
 8001004:	4b33      	ldr	r3, [pc, #204]	; (80010d4 <HAL_InitTick+0xe4>)
 8001006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001008:	4a32      	ldr	r2, [pc, #200]	; (80010d4 <HAL_InitTick+0xe4>)
 800100a:	f043 0310 	orr.w	r3, r3, #16
 800100e:	6413      	str	r3, [r2, #64]	; 0x40
 8001010:	4b30      	ldr	r3, [pc, #192]	; (80010d4 <HAL_InitTick+0xe4>)
 8001012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001014:	f003 0310 	and.w	r3, r3, #16
 8001018:	60fb      	str	r3, [r7, #12]
 800101a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800101c:	f107 0210 	add.w	r2, r7, #16
 8001020:	f107 0314 	add.w	r3, r7, #20
 8001024:	4611      	mov	r1, r2
 8001026:	4618      	mov	r0, r3
 8001028:	f001 faec 	bl	8002604 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800102c:	6a3b      	ldr	r3, [r7, #32]
 800102e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001032:	2b00      	cmp	r3, #0
 8001034:	d103      	bne.n	800103e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001036:	f001 fabd 	bl	80025b4 <HAL_RCC_GetPCLK1Freq>
 800103a:	6378      	str	r0, [r7, #52]	; 0x34
 800103c:	e004      	b.n	8001048 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800103e:	f001 fab9 	bl	80025b4 <HAL_RCC_GetPCLK1Freq>
 8001042:	4603      	mov	r3, r0
 8001044:	005b      	lsls	r3, r3, #1
 8001046:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001048:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800104a:	4a23      	ldr	r2, [pc, #140]	; (80010d8 <HAL_InitTick+0xe8>)
 800104c:	fba2 2303 	umull	r2, r3, r2, r3
 8001050:	0c9b      	lsrs	r3, r3, #18
 8001052:	3b01      	subs	r3, #1
 8001054:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001056:	4b21      	ldr	r3, [pc, #132]	; (80010dc <HAL_InitTick+0xec>)
 8001058:	4a21      	ldr	r2, [pc, #132]	; (80010e0 <HAL_InitTick+0xf0>)
 800105a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800105c:	4b1f      	ldr	r3, [pc, #124]	; (80010dc <HAL_InitTick+0xec>)
 800105e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001062:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001064:	4a1d      	ldr	r2, [pc, #116]	; (80010dc <HAL_InitTick+0xec>)
 8001066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001068:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800106a:	4b1c      	ldr	r3, [pc, #112]	; (80010dc <HAL_InitTick+0xec>)
 800106c:	2200      	movs	r2, #0
 800106e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001070:	4b1a      	ldr	r3, [pc, #104]	; (80010dc <HAL_InitTick+0xec>)
 8001072:	2200      	movs	r2, #0
 8001074:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001076:	4b19      	ldr	r3, [pc, #100]	; (80010dc <HAL_InitTick+0xec>)
 8001078:	2200      	movs	r2, #0
 800107a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800107c:	4817      	ldr	r0, [pc, #92]	; (80010dc <HAL_InitTick+0xec>)
 800107e:	f002 f896 	bl	80031ae <HAL_TIM_Base_Init>
 8001082:	4603      	mov	r3, r0
 8001084:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001088:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800108c:	2b00      	cmp	r3, #0
 800108e:	d11b      	bne.n	80010c8 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001090:	4812      	ldr	r0, [pc, #72]	; (80010dc <HAL_InitTick+0xec>)
 8001092:	f002 f8e5 	bl	8003260 <HAL_TIM_Base_Start_IT>
 8001096:	4603      	mov	r3, r0
 8001098:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800109c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d111      	bne.n	80010c8 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80010a4:	2036      	movs	r0, #54	; 0x36
 80010a6:	f000 fe47 	bl	8001d38 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2b0f      	cmp	r3, #15
 80010ae:	d808      	bhi.n	80010c2 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80010b0:	2200      	movs	r2, #0
 80010b2:	6879      	ldr	r1, [r7, #4]
 80010b4:	2036      	movs	r0, #54	; 0x36
 80010b6:	f000 fe23 	bl	8001d00 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010ba:	4a0a      	ldr	r2, [pc, #40]	; (80010e4 <HAL_InitTick+0xf4>)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	6013      	str	r3, [r2, #0]
 80010c0:	e002      	b.n	80010c8 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80010c2:	2301      	movs	r3, #1
 80010c4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80010c8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	3738      	adds	r7, #56	; 0x38
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	40023800 	.word	0x40023800
 80010d8:	431bde83 	.word	0x431bde83
 80010dc:	2000020c 	.word	0x2000020c
 80010e0:	40001000 	.word	0x40001000
 80010e4:	200000c8 	.word	0x200000c8

080010e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010ec:	e7fe      	b.n	80010ec <NMI_Handler+0x4>

080010ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010ee:	b480      	push	{r7}
 80010f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010f2:	e7fe      	b.n	80010f2 <HardFault_Handler+0x4>

080010f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010f8:	e7fe      	b.n	80010f8 <MemManage_Handler+0x4>

080010fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010fa:	b480      	push	{r7}
 80010fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010fe:	e7fe      	b.n	80010fe <BusFault_Handler+0x4>

08001100 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001104:	e7fe      	b.n	8001104 <UsageFault_Handler+0x4>

08001106 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001106:	b480      	push	{r7}
 8001108:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800110a:	bf00      	nop
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr

08001114 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_PLUS_Pin);
 8001118:	2002      	movs	r0, #2
 800111a:	f001 f83b 	bl	8002194 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800111e:	bf00      	nop
 8001120:	bd80      	pop	{r7, pc}

08001122 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001122:	b580      	push	{r7, lr}
 8001124:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_MINUS_Pin);
 8001126:	2020      	movs	r0, #32
 8001128:	f001 f834 	bl	8002194 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BTN_SELECT_Pin);
 800112c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001130:	f001 f830 	bl	8002194 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001134:	bf00      	nop
 8001136:	bd80      	pop	{r7, pc}

08001138 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800113c:	4802      	ldr	r0, [pc, #8]	; (8001148 <USART2_IRQHandler+0x10>)
 800113e:	f002 fc31 	bl	80039a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001142:	bf00      	nop
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	20000258 	.word	0x20000258

0800114c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_SEND_DATA_Pin);
 8001150:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001154:	f001 f81e 	bl	8002194 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001158:	bf00      	nop
 800115a:	bd80      	pop	{r7, pc}

0800115c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC channel underrun error interrupt.
  */
void TIM6_DAC_IRQHandler(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001160:	4802      	ldr	r0, [pc, #8]	; (800116c <TIM6_DAC_IRQHandler+0x10>)
 8001162:	f002 f8cb 	bl	80032fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001166:	bf00      	nop
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	2000020c 	.word	0x2000020c

08001170 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001178:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800117c:	4618      	mov	r0, r3
 800117e:	370c      	adds	r7, #12
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr

08001188 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001188:	b480      	push	{r7}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
 8001190:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001198:	605a      	str	r2, [r3, #4]
  return 0;
 800119a:	2300      	movs	r3, #0
}
 800119c:	4618      	mov	r0, r3
 800119e:	370c      	adds	r7, #12
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr

080011a8 <_isatty>:

int _isatty(int file)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80011b0:	2301      	movs	r3, #1
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	370c      	adds	r7, #12
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr

080011be <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80011be:	b480      	push	{r7}
 80011c0:	b085      	sub	sp, #20
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	60f8      	str	r0, [r7, #12]
 80011c6:	60b9      	str	r1, [r7, #8]
 80011c8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80011ca:	2300      	movs	r3, #0
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	3714      	adds	r7, #20
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr

080011d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b086      	sub	sp, #24
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011e0:	4a14      	ldr	r2, [pc, #80]	; (8001234 <_sbrk+0x5c>)
 80011e2:	4b15      	ldr	r3, [pc, #84]	; (8001238 <_sbrk+0x60>)
 80011e4:	1ad3      	subs	r3, r2, r3
 80011e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011ec:	4b13      	ldr	r3, [pc, #76]	; (800123c <_sbrk+0x64>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d102      	bne.n	80011fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011f4:	4b11      	ldr	r3, [pc, #68]	; (800123c <_sbrk+0x64>)
 80011f6:	4a12      	ldr	r2, [pc, #72]	; (8001240 <_sbrk+0x68>)
 80011f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011fa:	4b10      	ldr	r3, [pc, #64]	; (800123c <_sbrk+0x64>)
 80011fc:	681a      	ldr	r2, [r3, #0]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	4413      	add	r3, r2
 8001202:	693a      	ldr	r2, [r7, #16]
 8001204:	429a      	cmp	r2, r3
 8001206:	d207      	bcs.n	8001218 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001208:	f006 fe2c 	bl	8007e64 <__errno>
 800120c:	4603      	mov	r3, r0
 800120e:	220c      	movs	r2, #12
 8001210:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001212:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001216:	e009      	b.n	800122c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001218:	4b08      	ldr	r3, [pc, #32]	; (800123c <_sbrk+0x64>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800121e:	4b07      	ldr	r3, [pc, #28]	; (800123c <_sbrk+0x64>)
 8001220:	681a      	ldr	r2, [r3, #0]
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	4413      	add	r3, r2
 8001226:	4a05      	ldr	r2, [pc, #20]	; (800123c <_sbrk+0x64>)
 8001228:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800122a:	68fb      	ldr	r3, [r7, #12]
}
 800122c:	4618      	mov	r0, r3
 800122e:	3718      	adds	r7, #24
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	20008000 	.word	0x20008000
 8001238:	00000400 	.word	0x00000400
 800123c:	20000254 	.word	0x20000254
 8001240:	20004c00 	.word	0x20004c00

08001244 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001248:	4b06      	ldr	r3, [pc, #24]	; (8001264 <SystemInit+0x20>)
 800124a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800124e:	4a05      	ldr	r2, [pc, #20]	; (8001264 <SystemInit+0x20>)
 8001250:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001254:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001258:	bf00      	nop
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	e000ed00 	.word	0xe000ed00

08001268 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800126c:	4b11      	ldr	r3, [pc, #68]	; (80012b4 <MX_USART2_UART_Init+0x4c>)
 800126e:	4a12      	ldr	r2, [pc, #72]	; (80012b8 <MX_USART2_UART_Init+0x50>)
 8001270:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001272:	4b10      	ldr	r3, [pc, #64]	; (80012b4 <MX_USART2_UART_Init+0x4c>)
 8001274:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001278:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800127a:	4b0e      	ldr	r3, [pc, #56]	; (80012b4 <MX_USART2_UART_Init+0x4c>)
 800127c:	2200      	movs	r2, #0
 800127e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001280:	4b0c      	ldr	r3, [pc, #48]	; (80012b4 <MX_USART2_UART_Init+0x4c>)
 8001282:	2200      	movs	r2, #0
 8001284:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001286:	4b0b      	ldr	r3, [pc, #44]	; (80012b4 <MX_USART2_UART_Init+0x4c>)
 8001288:	2200      	movs	r2, #0
 800128a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800128c:	4b09      	ldr	r3, [pc, #36]	; (80012b4 <MX_USART2_UART_Init+0x4c>)
 800128e:	220c      	movs	r2, #12
 8001290:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001292:	4b08      	ldr	r3, [pc, #32]	; (80012b4 <MX_USART2_UART_Init+0x4c>)
 8001294:	2200      	movs	r2, #0
 8001296:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001298:	4b06      	ldr	r3, [pc, #24]	; (80012b4 <MX_USART2_UART_Init+0x4c>)
 800129a:	2200      	movs	r2, #0
 800129c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800129e:	4805      	ldr	r0, [pc, #20]	; (80012b4 <MX_USART2_UART_Init+0x4c>)
 80012a0:	f002 f9ce 	bl	8003640 <HAL_UART_Init>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80012aa:	f7ff fb35 	bl	8000918 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80012ae:	bf00      	nop
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	20000258 	.word	0x20000258
 80012b8:	40004400 	.word	0x40004400

080012bc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b08a      	sub	sp, #40	; 0x28
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c4:	f107 0314 	add.w	r3, r7, #20
 80012c8:	2200      	movs	r2, #0
 80012ca:	601a      	str	r2, [r3, #0]
 80012cc:	605a      	str	r2, [r3, #4]
 80012ce:	609a      	str	r2, [r3, #8]
 80012d0:	60da      	str	r2, [r3, #12]
 80012d2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a1d      	ldr	r2, [pc, #116]	; (8001350 <HAL_UART_MspInit+0x94>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d133      	bne.n	8001346 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80012de:	2300      	movs	r3, #0
 80012e0:	613b      	str	r3, [r7, #16]
 80012e2:	4b1c      	ldr	r3, [pc, #112]	; (8001354 <HAL_UART_MspInit+0x98>)
 80012e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e6:	4a1b      	ldr	r2, [pc, #108]	; (8001354 <HAL_UART_MspInit+0x98>)
 80012e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012ec:	6413      	str	r3, [r2, #64]	; 0x40
 80012ee:	4b19      	ldr	r3, [pc, #100]	; (8001354 <HAL_UART_MspInit+0x98>)
 80012f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012f6:	613b      	str	r3, [r7, #16]
 80012f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012fa:	2300      	movs	r3, #0
 80012fc:	60fb      	str	r3, [r7, #12]
 80012fe:	4b15      	ldr	r3, [pc, #84]	; (8001354 <HAL_UART_MspInit+0x98>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001302:	4a14      	ldr	r2, [pc, #80]	; (8001354 <HAL_UART_MspInit+0x98>)
 8001304:	f043 0301 	orr.w	r3, r3, #1
 8001308:	6313      	str	r3, [r2, #48]	; 0x30
 800130a:	4b12      	ldr	r3, [pc, #72]	; (8001354 <HAL_UART_MspInit+0x98>)
 800130c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130e:	f003 0301 	and.w	r3, r3, #1
 8001312:	60fb      	str	r3, [r7, #12]
 8001314:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001316:	230c      	movs	r3, #12
 8001318:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800131a:	2302      	movs	r3, #2
 800131c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131e:	2300      	movs	r3, #0
 8001320:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001322:	2303      	movs	r3, #3
 8001324:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001326:	2307      	movs	r3, #7
 8001328:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800132a:	f107 0314 	add.w	r3, r7, #20
 800132e:	4619      	mov	r1, r3
 8001330:	4809      	ldr	r0, [pc, #36]	; (8001358 <HAL_UART_MspInit+0x9c>)
 8001332:	f000 fda1 	bl	8001e78 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001336:	2200      	movs	r2, #0
 8001338:	2105      	movs	r1, #5
 800133a:	2026      	movs	r0, #38	; 0x26
 800133c:	f000 fce0 	bl	8001d00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001340:	2026      	movs	r0, #38	; 0x26
 8001342:	f000 fcf9 	bl	8001d38 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001346:	bf00      	nop
 8001348:	3728      	adds	r7, #40	; 0x28
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	40004400 	.word	0x40004400
 8001354:	40023800 	.word	0x40023800
 8001358:	40020000 	.word	0x40020000

0800135c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 800135c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001394 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001360:	480d      	ldr	r0, [pc, #52]	; (8001398 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001362:	490e      	ldr	r1, [pc, #56]	; (800139c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001364:	4a0e      	ldr	r2, [pc, #56]	; (80013a0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001366:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001368:	e002      	b.n	8001370 <LoopCopyDataInit>

0800136a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800136a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800136c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800136e:	3304      	adds	r3, #4

08001370 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001370:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001372:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001374:	d3f9      	bcc.n	800136a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001376:	4a0b      	ldr	r2, [pc, #44]	; (80013a4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001378:	4c0b      	ldr	r4, [pc, #44]	; (80013a8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800137a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800137c:	e001      	b.n	8001382 <LoopFillZerobss>

0800137e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800137e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001380:	3204      	adds	r2, #4

08001382 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001382:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001384:	d3fb      	bcc.n	800137e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001386:	f7ff ff5d 	bl	8001244 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800138a:	f006 fd71 	bl	8007e70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800138e:	f7ff fd05 	bl	8000d9c <main>
  bx  lr    
 8001392:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001394:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001398:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800139c:	20000138 	.word	0x20000138
  ldr r2, =_sidata
 80013a0:	080091bc 	.word	0x080091bc
  ldr r2, =_sbss
 80013a4:	20000138 	.word	0x20000138
  ldr r4, =_ebss
 80013a8:	20004c00 	.word	0x20004c00

080013ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013ac:	e7fe      	b.n	80013ac <ADC_IRQHandler>
	...

080013b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80013b4:	4b0e      	ldr	r3, [pc, #56]	; (80013f0 <HAL_Init+0x40>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a0d      	ldr	r2, [pc, #52]	; (80013f0 <HAL_Init+0x40>)
 80013ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80013c0:	4b0b      	ldr	r3, [pc, #44]	; (80013f0 <HAL_Init+0x40>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a0a      	ldr	r2, [pc, #40]	; (80013f0 <HAL_Init+0x40>)
 80013c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013cc:	4b08      	ldr	r3, [pc, #32]	; (80013f0 <HAL_Init+0x40>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a07      	ldr	r2, [pc, #28]	; (80013f0 <HAL_Init+0x40>)
 80013d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013d8:	2003      	movs	r0, #3
 80013da:	f000 fc86 	bl	8001cea <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013de:	200f      	movs	r0, #15
 80013e0:	f7ff fe06 	bl	8000ff0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013e4:	f7ff fdd8 	bl	8000f98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013e8:	2300      	movs	r3, #0
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	40023c00 	.word	0x40023c00

080013f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013f8:	4b06      	ldr	r3, [pc, #24]	; (8001414 <HAL_IncTick+0x20>)
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	461a      	mov	r2, r3
 80013fe:	4b06      	ldr	r3, [pc, #24]	; (8001418 <HAL_IncTick+0x24>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4413      	add	r3, r2
 8001404:	4a04      	ldr	r2, [pc, #16]	; (8001418 <HAL_IncTick+0x24>)
 8001406:	6013      	str	r3, [r2, #0]
}
 8001408:	bf00      	nop
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
 8001412:	bf00      	nop
 8001414:	200000cc 	.word	0x200000cc
 8001418:	2000029c 	.word	0x2000029c

0800141c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  return uwTick;
 8001420:	4b03      	ldr	r3, [pc, #12]	; (8001430 <HAL_GetTick+0x14>)
 8001422:	681b      	ldr	r3, [r3, #0]
}
 8001424:	4618      	mov	r0, r3
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	2000029c 	.word	0x2000029c

08001434 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b084      	sub	sp, #16
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800143c:	2300      	movs	r3, #0
 800143e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d101      	bne.n	800144a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001446:	2301      	movs	r3, #1
 8001448:	e033      	b.n	80014b2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144e:	2b00      	cmp	r3, #0
 8001450:	d109      	bne.n	8001466 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001452:	6878      	ldr	r0, [r7, #4]
 8001454:	f7ff f900 	bl	8000658 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2200      	movs	r2, #0
 800145c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2200      	movs	r2, #0
 8001462:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146a:	f003 0310 	and.w	r3, r3, #16
 800146e:	2b00      	cmp	r3, #0
 8001470:	d118      	bne.n	80014a4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001476:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800147a:	f023 0302 	bic.w	r3, r3, #2
 800147e:	f043 0202 	orr.w	r2, r3, #2
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001486:	6878      	ldr	r0, [r7, #4]
 8001488:	f000 fa86 	bl	8001998 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2200      	movs	r2, #0
 8001490:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001496:	f023 0303 	bic.w	r3, r3, #3
 800149a:	f043 0201 	orr.w	r2, r3, #1
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	641a      	str	r2, [r3, #64]	; 0x40
 80014a2:	e001      	b.n	80014a8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80014a4:	2301      	movs	r3, #1
 80014a6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2200      	movs	r2, #0
 80014ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80014b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3710      	adds	r7, #16
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
	...

080014bc <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80014bc:	b480      	push	{r7}
 80014be:	b085      	sub	sp, #20
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80014c4:	2300      	movs	r3, #0
 80014c6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80014ce:	2b01      	cmp	r3, #1
 80014d0:	d101      	bne.n	80014d6 <HAL_ADC_Start+0x1a>
 80014d2:	2302      	movs	r3, #2
 80014d4:	e097      	b.n	8001606 <HAL_ADC_Start+0x14a>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2201      	movs	r2, #1
 80014da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	689b      	ldr	r3, [r3, #8]
 80014e4:	f003 0301 	and.w	r3, r3, #1
 80014e8:	2b01      	cmp	r3, #1
 80014ea:	d018      	beq.n	800151e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	689a      	ldr	r2, [r3, #8]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f042 0201 	orr.w	r2, r2, #1
 80014fa:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80014fc:	4b45      	ldr	r3, [pc, #276]	; (8001614 <HAL_ADC_Start+0x158>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a45      	ldr	r2, [pc, #276]	; (8001618 <HAL_ADC_Start+0x15c>)
 8001502:	fba2 2303 	umull	r2, r3, r2, r3
 8001506:	0c9a      	lsrs	r2, r3, #18
 8001508:	4613      	mov	r3, r2
 800150a:	005b      	lsls	r3, r3, #1
 800150c:	4413      	add	r3, r2
 800150e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001510:	e002      	b.n	8001518 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001512:	68bb      	ldr	r3, [r7, #8]
 8001514:	3b01      	subs	r3, #1
 8001516:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d1f9      	bne.n	8001512 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	689b      	ldr	r3, [r3, #8]
 8001524:	f003 0301 	and.w	r3, r3, #1
 8001528:	2b01      	cmp	r3, #1
 800152a:	d15f      	bne.n	80015ec <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001530:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001534:	f023 0301 	bic.w	r3, r3, #1
 8001538:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800154a:	2b00      	cmp	r3, #0
 800154c:	d007      	beq.n	800155e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001552:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001556:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001562:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001566:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800156a:	d106      	bne.n	800157a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001570:	f023 0206 	bic.w	r2, r3, #6
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	645a      	str	r2, [r3, #68]	; 0x44
 8001578:	e002      	b.n	8001580 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2200      	movs	r2, #0
 800157e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2200      	movs	r2, #0
 8001584:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001588:	4b24      	ldr	r3, [pc, #144]	; (800161c <HAL_ADC_Start+0x160>)
 800158a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001594:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	f003 031f 	and.w	r3, r3, #31
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d10f      	bne.n	80015c2 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	689b      	ldr	r3, [r3, #8]
 80015a8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d129      	bne.n	8001604 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	689a      	ldr	r2, [r3, #8]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80015be:	609a      	str	r2, [r3, #8]
 80015c0:	e020      	b.n	8001604 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4a16      	ldr	r2, [pc, #88]	; (8001620 <HAL_ADC_Start+0x164>)
 80015c8:	4293      	cmp	r3, r2
 80015ca:	d11b      	bne.n	8001604 <HAL_ADC_Start+0x148>
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	689b      	ldr	r3, [r3, #8]
 80015d2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d114      	bne.n	8001604 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	689a      	ldr	r2, [r3, #8]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80015e8:	609a      	str	r2, [r3, #8]
 80015ea:	e00b      	b.n	8001604 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f0:	f043 0210 	orr.w	r2, r3, #16
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015fc:	f043 0201 	orr.w	r2, r3, #1
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001604:	2300      	movs	r3, #0
}
 8001606:	4618      	mov	r0, r3
 8001608:	3714      	adds	r7, #20
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr
 8001612:	bf00      	nop
 8001614:	200000c4 	.word	0x200000c4
 8001618:	431bde83 	.word	0x431bde83
 800161c:	40012300 	.word	0x40012300
 8001620:	40012000 	.word	0x40012000

08001624 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b084      	sub	sp, #16
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
 800162c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800162e:	2300      	movs	r3, #0
 8001630:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	689b      	ldr	r3, [r3, #8]
 8001638:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800163c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001640:	d113      	bne.n	800166a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	689b      	ldr	r3, [r3, #8]
 8001648:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800164c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001650:	d10b      	bne.n	800166a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001656:	f043 0220 	orr.w	r2, r3, #32
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2200      	movs	r2, #0
 8001662:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001666:	2301      	movs	r3, #1
 8001668:	e063      	b.n	8001732 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800166a:	f7ff fed7 	bl	800141c <HAL_GetTick>
 800166e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001670:	e021      	b.n	80016b6 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001678:	d01d      	beq.n	80016b6 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d007      	beq.n	8001690 <HAL_ADC_PollForConversion+0x6c>
 8001680:	f7ff fecc 	bl	800141c <HAL_GetTick>
 8001684:	4602      	mov	r2, r0
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	683a      	ldr	r2, [r7, #0]
 800168c:	429a      	cmp	r2, r3
 800168e:	d212      	bcs.n	80016b6 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f003 0302 	and.w	r3, r3, #2
 800169a:	2b02      	cmp	r3, #2
 800169c:	d00b      	beq.n	80016b6 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a2:	f043 0204 	orr.w	r2, r3, #4
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2200      	movs	r2, #0
 80016ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80016b2:	2303      	movs	r3, #3
 80016b4:	e03d      	b.n	8001732 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f003 0302 	and.w	r3, r3, #2
 80016c0:	2b02      	cmp	r3, #2
 80016c2:	d1d6      	bne.n	8001672 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f06f 0212 	mvn.w	r2, #18
 80016cc:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	689b      	ldr	r3, [r3, #8]
 80016e0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d123      	bne.n	8001730 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d11f      	bne.n	8001730 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016f6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d006      	beq.n	800170c <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	689b      	ldr	r3, [r3, #8]
 8001704:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001708:	2b00      	cmp	r3, #0
 800170a:	d111      	bne.n	8001730 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001710:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800171c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001720:	2b00      	cmp	r3, #0
 8001722:	d105      	bne.n	8001730 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001728:	f043 0201 	orr.w	r2, r3, #1
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001730:	2300      	movs	r3, #0
}
 8001732:	4618      	mov	r0, r3
 8001734:	3710      	adds	r7, #16
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}

0800173a <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800173a:	b480      	push	{r7}
 800173c:	b083      	sub	sp, #12
 800173e:	af00      	add	r7, sp, #0
 8001740:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001748:	4618      	mov	r0, r3
 800174a:	370c      	adds	r7, #12
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr

08001754 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001754:	b480      	push	{r7}
 8001756:	b085      	sub	sp, #20
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
 800175c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800175e:	2300      	movs	r3, #0
 8001760:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001768:	2b01      	cmp	r3, #1
 800176a:	d101      	bne.n	8001770 <HAL_ADC_ConfigChannel+0x1c>
 800176c:	2302      	movs	r3, #2
 800176e:	e105      	b.n	800197c <HAL_ADC_ConfigChannel+0x228>
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2201      	movs	r2, #1
 8001774:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	2b09      	cmp	r3, #9
 800177e:	d925      	bls.n	80017cc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	68d9      	ldr	r1, [r3, #12]
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	b29b      	uxth	r3, r3
 800178c:	461a      	mov	r2, r3
 800178e:	4613      	mov	r3, r2
 8001790:	005b      	lsls	r3, r3, #1
 8001792:	4413      	add	r3, r2
 8001794:	3b1e      	subs	r3, #30
 8001796:	2207      	movs	r2, #7
 8001798:	fa02 f303 	lsl.w	r3, r2, r3
 800179c:	43da      	mvns	r2, r3
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	400a      	ands	r2, r1
 80017a4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	68d9      	ldr	r1, [r3, #12]
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	689a      	ldr	r2, [r3, #8]
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	b29b      	uxth	r3, r3
 80017b6:	4618      	mov	r0, r3
 80017b8:	4603      	mov	r3, r0
 80017ba:	005b      	lsls	r3, r3, #1
 80017bc:	4403      	add	r3, r0
 80017be:	3b1e      	subs	r3, #30
 80017c0:	409a      	lsls	r2, r3
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	430a      	orrs	r2, r1
 80017c8:	60da      	str	r2, [r3, #12]
 80017ca:	e022      	b.n	8001812 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	6919      	ldr	r1, [r3, #16]
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	b29b      	uxth	r3, r3
 80017d8:	461a      	mov	r2, r3
 80017da:	4613      	mov	r3, r2
 80017dc:	005b      	lsls	r3, r3, #1
 80017de:	4413      	add	r3, r2
 80017e0:	2207      	movs	r2, #7
 80017e2:	fa02 f303 	lsl.w	r3, r2, r3
 80017e6:	43da      	mvns	r2, r3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	400a      	ands	r2, r1
 80017ee:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	6919      	ldr	r1, [r3, #16]
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	689a      	ldr	r2, [r3, #8]
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	b29b      	uxth	r3, r3
 8001800:	4618      	mov	r0, r3
 8001802:	4603      	mov	r3, r0
 8001804:	005b      	lsls	r3, r3, #1
 8001806:	4403      	add	r3, r0
 8001808:	409a      	lsls	r2, r3
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	430a      	orrs	r2, r1
 8001810:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	2b06      	cmp	r3, #6
 8001818:	d824      	bhi.n	8001864 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	685a      	ldr	r2, [r3, #4]
 8001824:	4613      	mov	r3, r2
 8001826:	009b      	lsls	r3, r3, #2
 8001828:	4413      	add	r3, r2
 800182a:	3b05      	subs	r3, #5
 800182c:	221f      	movs	r2, #31
 800182e:	fa02 f303 	lsl.w	r3, r2, r3
 8001832:	43da      	mvns	r2, r3
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	400a      	ands	r2, r1
 800183a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	b29b      	uxth	r3, r3
 8001848:	4618      	mov	r0, r3
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	685a      	ldr	r2, [r3, #4]
 800184e:	4613      	mov	r3, r2
 8001850:	009b      	lsls	r3, r3, #2
 8001852:	4413      	add	r3, r2
 8001854:	3b05      	subs	r3, #5
 8001856:	fa00 f203 	lsl.w	r2, r0, r3
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	430a      	orrs	r2, r1
 8001860:	635a      	str	r2, [r3, #52]	; 0x34
 8001862:	e04c      	b.n	80018fe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	2b0c      	cmp	r3, #12
 800186a:	d824      	bhi.n	80018b6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	685a      	ldr	r2, [r3, #4]
 8001876:	4613      	mov	r3, r2
 8001878:	009b      	lsls	r3, r3, #2
 800187a:	4413      	add	r3, r2
 800187c:	3b23      	subs	r3, #35	; 0x23
 800187e:	221f      	movs	r2, #31
 8001880:	fa02 f303 	lsl.w	r3, r2, r3
 8001884:	43da      	mvns	r2, r3
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	400a      	ands	r2, r1
 800188c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	b29b      	uxth	r3, r3
 800189a:	4618      	mov	r0, r3
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	685a      	ldr	r2, [r3, #4]
 80018a0:	4613      	mov	r3, r2
 80018a2:	009b      	lsls	r3, r3, #2
 80018a4:	4413      	add	r3, r2
 80018a6:	3b23      	subs	r3, #35	; 0x23
 80018a8:	fa00 f203 	lsl.w	r2, r0, r3
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	430a      	orrs	r2, r1
 80018b2:	631a      	str	r2, [r3, #48]	; 0x30
 80018b4:	e023      	b.n	80018fe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	685a      	ldr	r2, [r3, #4]
 80018c0:	4613      	mov	r3, r2
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	4413      	add	r3, r2
 80018c6:	3b41      	subs	r3, #65	; 0x41
 80018c8:	221f      	movs	r2, #31
 80018ca:	fa02 f303 	lsl.w	r3, r2, r3
 80018ce:	43da      	mvns	r2, r3
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	400a      	ands	r2, r1
 80018d6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	b29b      	uxth	r3, r3
 80018e4:	4618      	mov	r0, r3
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	685a      	ldr	r2, [r3, #4]
 80018ea:	4613      	mov	r3, r2
 80018ec:	009b      	lsls	r3, r3, #2
 80018ee:	4413      	add	r3, r2
 80018f0:	3b41      	subs	r3, #65	; 0x41
 80018f2:	fa00 f203 	lsl.w	r2, r0, r3
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	430a      	orrs	r2, r1
 80018fc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80018fe:	4b22      	ldr	r3, [pc, #136]	; (8001988 <HAL_ADC_ConfigChannel+0x234>)
 8001900:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4a21      	ldr	r2, [pc, #132]	; (800198c <HAL_ADC_ConfigChannel+0x238>)
 8001908:	4293      	cmp	r3, r2
 800190a:	d109      	bne.n	8001920 <HAL_ADC_ConfigChannel+0x1cc>
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	2b12      	cmp	r3, #18
 8001912:	d105      	bne.n	8001920 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a19      	ldr	r2, [pc, #100]	; (800198c <HAL_ADC_ConfigChannel+0x238>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d123      	bne.n	8001972 <HAL_ADC_ConfigChannel+0x21e>
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	2b10      	cmp	r3, #16
 8001930:	d003      	beq.n	800193a <HAL_ADC_ConfigChannel+0x1e6>
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	2b11      	cmp	r3, #17
 8001938:	d11b      	bne.n	8001972 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	2b10      	cmp	r3, #16
 800194c:	d111      	bne.n	8001972 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800194e:	4b10      	ldr	r3, [pc, #64]	; (8001990 <HAL_ADC_ConfigChannel+0x23c>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a10      	ldr	r2, [pc, #64]	; (8001994 <HAL_ADC_ConfigChannel+0x240>)
 8001954:	fba2 2303 	umull	r2, r3, r2, r3
 8001958:	0c9a      	lsrs	r2, r3, #18
 800195a:	4613      	mov	r3, r2
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	4413      	add	r3, r2
 8001960:	005b      	lsls	r3, r3, #1
 8001962:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001964:	e002      	b.n	800196c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001966:	68bb      	ldr	r3, [r7, #8]
 8001968:	3b01      	subs	r3, #1
 800196a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d1f9      	bne.n	8001966 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2200      	movs	r2, #0
 8001976:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800197a:	2300      	movs	r3, #0
}
 800197c:	4618      	mov	r0, r3
 800197e:	3714      	adds	r7, #20
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr
 8001988:	40012300 	.word	0x40012300
 800198c:	40012000 	.word	0x40012000
 8001990:	200000c4 	.word	0x200000c4
 8001994:	431bde83 	.word	0x431bde83

08001998 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001998:	b480      	push	{r7}
 800199a:	b085      	sub	sp, #20
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80019a0:	4b79      	ldr	r3, [pc, #484]	; (8001b88 <ADC_Init+0x1f0>)
 80019a2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	685a      	ldr	r2, [r3, #4]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	431a      	orrs	r2, r3
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	685a      	ldr	r2, [r3, #4]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80019cc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	6859      	ldr	r1, [r3, #4]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	691b      	ldr	r3, [r3, #16]
 80019d8:	021a      	lsls	r2, r3, #8
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	430a      	orrs	r2, r1
 80019e0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	685a      	ldr	r2, [r3, #4]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80019f0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	6859      	ldr	r1, [r3, #4]
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	689a      	ldr	r2, [r3, #8]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	430a      	orrs	r2, r1
 8001a02:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	689a      	ldr	r2, [r3, #8]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a12:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	6899      	ldr	r1, [r3, #8]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	68da      	ldr	r2, [r3, #12]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	430a      	orrs	r2, r1
 8001a24:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a2a:	4a58      	ldr	r2, [pc, #352]	; (8001b8c <ADC_Init+0x1f4>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d022      	beq.n	8001a76 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	689a      	ldr	r2, [r3, #8]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001a3e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	6899      	ldr	r1, [r3, #8]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	430a      	orrs	r2, r1
 8001a50:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	689a      	ldr	r2, [r3, #8]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001a60:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	6899      	ldr	r1, [r3, #8]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	430a      	orrs	r2, r1
 8001a72:	609a      	str	r2, [r3, #8]
 8001a74:	e00f      	b.n	8001a96 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	689a      	ldr	r2, [r3, #8]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001a84:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	689a      	ldr	r2, [r3, #8]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001a94:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	689a      	ldr	r2, [r3, #8]
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f022 0202 	bic.w	r2, r2, #2
 8001aa4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	6899      	ldr	r1, [r3, #8]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	7e1b      	ldrb	r3, [r3, #24]
 8001ab0:	005a      	lsls	r2, r3, #1
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	430a      	orrs	r2, r1
 8001ab8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d01b      	beq.n	8001afc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	685a      	ldr	r2, [r3, #4]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001ad2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	685a      	ldr	r2, [r3, #4]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001ae2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	6859      	ldr	r1, [r3, #4]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aee:	3b01      	subs	r3, #1
 8001af0:	035a      	lsls	r2, r3, #13
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	430a      	orrs	r2, r1
 8001af8:	605a      	str	r2, [r3, #4]
 8001afa:	e007      	b.n	8001b0c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	685a      	ldr	r2, [r3, #4]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b0a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001b1a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	69db      	ldr	r3, [r3, #28]
 8001b26:	3b01      	subs	r3, #1
 8001b28:	051a      	lsls	r2, r3, #20
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	430a      	orrs	r2, r1
 8001b30:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	689a      	ldr	r2, [r3, #8]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001b40:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	6899      	ldr	r1, [r3, #8]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001b4e:	025a      	lsls	r2, r3, #9
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	430a      	orrs	r2, r1
 8001b56:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	689a      	ldr	r2, [r3, #8]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b66:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	6899      	ldr	r1, [r3, #8]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	695b      	ldr	r3, [r3, #20]
 8001b72:	029a      	lsls	r2, r3, #10
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	430a      	orrs	r2, r1
 8001b7a:	609a      	str	r2, [r3, #8]
}
 8001b7c:	bf00      	nop
 8001b7e:	3714      	adds	r7, #20
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr
 8001b88:	40012300 	.word	0x40012300
 8001b8c:	0f000001 	.word	0x0f000001

08001b90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b085      	sub	sp, #20
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	f003 0307 	and.w	r3, r3, #7
 8001b9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ba0:	4b0c      	ldr	r3, [pc, #48]	; (8001bd4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ba2:	68db      	ldr	r3, [r3, #12]
 8001ba4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ba6:	68ba      	ldr	r2, [r7, #8]
 8001ba8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bac:	4013      	ands	r3, r2
 8001bae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bb8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bc2:	4a04      	ldr	r2, [pc, #16]	; (8001bd4 <__NVIC_SetPriorityGrouping+0x44>)
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	60d3      	str	r3, [r2, #12]
}
 8001bc8:	bf00      	nop
 8001bca:	3714      	adds	r7, #20
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr
 8001bd4:	e000ed00 	.word	0xe000ed00

08001bd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bdc:	4b04      	ldr	r3, [pc, #16]	; (8001bf0 <__NVIC_GetPriorityGrouping+0x18>)
 8001bde:	68db      	ldr	r3, [r3, #12]
 8001be0:	0a1b      	lsrs	r3, r3, #8
 8001be2:	f003 0307 	and.w	r3, r3, #7
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr
 8001bf0:	e000ed00 	.word	0xe000ed00

08001bf4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b083      	sub	sp, #12
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	db0b      	blt.n	8001c1e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c06:	79fb      	ldrb	r3, [r7, #7]
 8001c08:	f003 021f 	and.w	r2, r3, #31
 8001c0c:	4907      	ldr	r1, [pc, #28]	; (8001c2c <__NVIC_EnableIRQ+0x38>)
 8001c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c12:	095b      	lsrs	r3, r3, #5
 8001c14:	2001      	movs	r0, #1
 8001c16:	fa00 f202 	lsl.w	r2, r0, r2
 8001c1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c1e:	bf00      	nop
 8001c20:	370c      	adds	r7, #12
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr
 8001c2a:	bf00      	nop
 8001c2c:	e000e100 	.word	0xe000e100

08001c30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b083      	sub	sp, #12
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	4603      	mov	r3, r0
 8001c38:	6039      	str	r1, [r7, #0]
 8001c3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	db0a      	blt.n	8001c5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	b2da      	uxtb	r2, r3
 8001c48:	490c      	ldr	r1, [pc, #48]	; (8001c7c <__NVIC_SetPriority+0x4c>)
 8001c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c4e:	0112      	lsls	r2, r2, #4
 8001c50:	b2d2      	uxtb	r2, r2
 8001c52:	440b      	add	r3, r1
 8001c54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c58:	e00a      	b.n	8001c70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	b2da      	uxtb	r2, r3
 8001c5e:	4908      	ldr	r1, [pc, #32]	; (8001c80 <__NVIC_SetPriority+0x50>)
 8001c60:	79fb      	ldrb	r3, [r7, #7]
 8001c62:	f003 030f 	and.w	r3, r3, #15
 8001c66:	3b04      	subs	r3, #4
 8001c68:	0112      	lsls	r2, r2, #4
 8001c6a:	b2d2      	uxtb	r2, r2
 8001c6c:	440b      	add	r3, r1
 8001c6e:	761a      	strb	r2, [r3, #24]
}
 8001c70:	bf00      	nop
 8001c72:	370c      	adds	r7, #12
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr
 8001c7c:	e000e100 	.word	0xe000e100
 8001c80:	e000ed00 	.word	0xe000ed00

08001c84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b089      	sub	sp, #36	; 0x24
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	60f8      	str	r0, [r7, #12]
 8001c8c:	60b9      	str	r1, [r7, #8]
 8001c8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	f003 0307 	and.w	r3, r3, #7
 8001c96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c98:	69fb      	ldr	r3, [r7, #28]
 8001c9a:	f1c3 0307 	rsb	r3, r3, #7
 8001c9e:	2b04      	cmp	r3, #4
 8001ca0:	bf28      	it	cs
 8001ca2:	2304      	movcs	r3, #4
 8001ca4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	3304      	adds	r3, #4
 8001caa:	2b06      	cmp	r3, #6
 8001cac:	d902      	bls.n	8001cb4 <NVIC_EncodePriority+0x30>
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	3b03      	subs	r3, #3
 8001cb2:	e000      	b.n	8001cb6 <NVIC_EncodePriority+0x32>
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cb8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001cbc:	69bb      	ldr	r3, [r7, #24]
 8001cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc2:	43da      	mvns	r2, r3
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	401a      	ands	r2, r3
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ccc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	fa01 f303 	lsl.w	r3, r1, r3
 8001cd6:	43d9      	mvns	r1, r3
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cdc:	4313      	orrs	r3, r2
         );
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3724      	adds	r7, #36	; 0x24
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr

08001cea <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cea:	b580      	push	{r7, lr}
 8001cec:	b082      	sub	sp, #8
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	f7ff ff4c 	bl	8001b90 <__NVIC_SetPriorityGrouping>
}
 8001cf8:	bf00      	nop
 8001cfa:	3708      	adds	r7, #8
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}

08001d00 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b086      	sub	sp, #24
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	4603      	mov	r3, r0
 8001d08:	60b9      	str	r1, [r7, #8]
 8001d0a:	607a      	str	r2, [r7, #4]
 8001d0c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d12:	f7ff ff61 	bl	8001bd8 <__NVIC_GetPriorityGrouping>
 8001d16:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d18:	687a      	ldr	r2, [r7, #4]
 8001d1a:	68b9      	ldr	r1, [r7, #8]
 8001d1c:	6978      	ldr	r0, [r7, #20]
 8001d1e:	f7ff ffb1 	bl	8001c84 <NVIC_EncodePriority>
 8001d22:	4602      	mov	r2, r0
 8001d24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d28:	4611      	mov	r1, r2
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f7ff ff80 	bl	8001c30 <__NVIC_SetPriority>
}
 8001d30:	bf00      	nop
 8001d32:	3718      	adds	r7, #24
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}

08001d38 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b082      	sub	sp, #8
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	4603      	mov	r3, r0
 8001d40:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d46:	4618      	mov	r0, r3
 8001d48:	f7ff ff54 	bl	8001bf4 <__NVIC_EnableIRQ>
}
 8001d4c:	bf00      	nop
 8001d4e:	3708      	adds	r7, #8
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}

08001d54 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b084      	sub	sp, #16
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d60:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001d62:	f7ff fb5b 	bl	800141c <HAL_GetTick>
 8001d66:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d6e:	b2db      	uxtb	r3, r3
 8001d70:	2b02      	cmp	r3, #2
 8001d72:	d008      	beq.n	8001d86 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2280      	movs	r2, #128	; 0x80
 8001d78:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e052      	b.n	8001e2c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	681a      	ldr	r2, [r3, #0]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f022 0216 	bic.w	r2, r2, #22
 8001d94:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	695a      	ldr	r2, [r3, #20]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001da4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d103      	bne.n	8001db6 <HAL_DMA_Abort+0x62>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d007      	beq.n	8001dc6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f022 0208 	bic.w	r2, r2, #8
 8001dc4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f022 0201 	bic.w	r2, r2, #1
 8001dd4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001dd6:	e013      	b.n	8001e00 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001dd8:	f7ff fb20 	bl	800141c <HAL_GetTick>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	2b05      	cmp	r3, #5
 8001de4:	d90c      	bls.n	8001e00 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2220      	movs	r2, #32
 8001dea:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2203      	movs	r2, #3
 8001df0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2200      	movs	r2, #0
 8001df8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001dfc:	2303      	movs	r3, #3
 8001dfe:	e015      	b.n	8001e2c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f003 0301 	and.w	r3, r3, #1
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d1e4      	bne.n	8001dd8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e12:	223f      	movs	r2, #63	; 0x3f
 8001e14:	409a      	lsls	r2, r3
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2200      	movs	r2, #0
 8001e26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001e2a:	2300      	movs	r3, #0
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	3710      	adds	r7, #16
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}

08001e34 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b083      	sub	sp, #12
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e42:	b2db      	uxtb	r3, r3
 8001e44:	2b02      	cmp	r3, #2
 8001e46:	d004      	beq.n	8001e52 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2280      	movs	r2, #128	; 0x80
 8001e4c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e00c      	b.n	8001e6c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2205      	movs	r2, #5
 8001e56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f022 0201 	bic.w	r2, r2, #1
 8001e68:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001e6a:	2300      	movs	r3, #0
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	370c      	adds	r7, #12
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr

08001e78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b089      	sub	sp, #36	; 0x24
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
 8001e80:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e82:	2300      	movs	r3, #0
 8001e84:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e86:	2300      	movs	r3, #0
 8001e88:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e8e:	2300      	movs	r3, #0
 8001e90:	61fb      	str	r3, [r7, #28]
 8001e92:	e14d      	b.n	8002130 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e94:	2201      	movs	r2, #1
 8001e96:	69fb      	ldr	r3, [r7, #28]
 8001e98:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	697a      	ldr	r2, [r7, #20]
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ea8:	693a      	ldr	r2, [r7, #16]
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	429a      	cmp	r2, r3
 8001eae:	f040 813c 	bne.w	800212a <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	f003 0303 	and.w	r3, r3, #3
 8001eba:	2b01      	cmp	r3, #1
 8001ebc:	d005      	beq.n	8001eca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ec6:	2b02      	cmp	r3, #2
 8001ec8:	d130      	bne.n	8001f2c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ed0:	69fb      	ldr	r3, [r7, #28]
 8001ed2:	005b      	lsls	r3, r3, #1
 8001ed4:	2203      	movs	r2, #3
 8001ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eda:	43db      	mvns	r3, r3
 8001edc:	69ba      	ldr	r2, [r7, #24]
 8001ede:	4013      	ands	r3, r2
 8001ee0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	68da      	ldr	r2, [r3, #12]
 8001ee6:	69fb      	ldr	r3, [r7, #28]
 8001ee8:	005b      	lsls	r3, r3, #1
 8001eea:	fa02 f303 	lsl.w	r3, r2, r3
 8001eee:	69ba      	ldr	r2, [r7, #24]
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	69ba      	ldr	r2, [r7, #24]
 8001ef8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f00:	2201      	movs	r2, #1
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	fa02 f303 	lsl.w	r3, r2, r3
 8001f08:	43db      	mvns	r3, r3
 8001f0a:	69ba      	ldr	r2, [r7, #24]
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	091b      	lsrs	r3, r3, #4
 8001f16:	f003 0201 	and.w	r2, r3, #1
 8001f1a:	69fb      	ldr	r3, [r7, #28]
 8001f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f20:	69ba      	ldr	r2, [r7, #24]
 8001f22:	4313      	orrs	r3, r2
 8001f24:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	69ba      	ldr	r2, [r7, #24]
 8001f2a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f003 0303 	and.w	r3, r3, #3
 8001f34:	2b03      	cmp	r3, #3
 8001f36:	d017      	beq.n	8001f68 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	005b      	lsls	r3, r3, #1
 8001f42:	2203      	movs	r2, #3
 8001f44:	fa02 f303 	lsl.w	r3, r2, r3
 8001f48:	43db      	mvns	r3, r3
 8001f4a:	69ba      	ldr	r2, [r7, #24]
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	689a      	ldr	r2, [r3, #8]
 8001f54:	69fb      	ldr	r3, [r7, #28]
 8001f56:	005b      	lsls	r3, r3, #1
 8001f58:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5c:	69ba      	ldr	r2, [r7, #24]
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	69ba      	ldr	r2, [r7, #24]
 8001f66:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	f003 0303 	and.w	r3, r3, #3
 8001f70:	2b02      	cmp	r3, #2
 8001f72:	d123      	bne.n	8001fbc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f74:	69fb      	ldr	r3, [r7, #28]
 8001f76:	08da      	lsrs	r2, r3, #3
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	3208      	adds	r2, #8
 8001f7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f80:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f82:	69fb      	ldr	r3, [r7, #28]
 8001f84:	f003 0307 	and.w	r3, r3, #7
 8001f88:	009b      	lsls	r3, r3, #2
 8001f8a:	220f      	movs	r2, #15
 8001f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f90:	43db      	mvns	r3, r3
 8001f92:	69ba      	ldr	r2, [r7, #24]
 8001f94:	4013      	ands	r3, r2
 8001f96:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	691a      	ldr	r2, [r3, #16]
 8001f9c:	69fb      	ldr	r3, [r7, #28]
 8001f9e:	f003 0307 	and.w	r3, r3, #7
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa8:	69ba      	ldr	r2, [r7, #24]
 8001faa:	4313      	orrs	r3, r2
 8001fac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	08da      	lsrs	r2, r3, #3
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	3208      	adds	r2, #8
 8001fb6:	69b9      	ldr	r1, [r7, #24]
 8001fb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001fc2:	69fb      	ldr	r3, [r7, #28]
 8001fc4:	005b      	lsls	r3, r3, #1
 8001fc6:	2203      	movs	r2, #3
 8001fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fcc:	43db      	mvns	r3, r3
 8001fce:	69ba      	ldr	r2, [r7, #24]
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	f003 0203 	and.w	r2, r3, #3
 8001fdc:	69fb      	ldr	r3, [r7, #28]
 8001fde:	005b      	lsls	r3, r3, #1
 8001fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe4:	69ba      	ldr	r2, [r7, #24]
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	69ba      	ldr	r2, [r7, #24]
 8001fee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	f000 8096 	beq.w	800212a <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ffe:	2300      	movs	r3, #0
 8002000:	60fb      	str	r3, [r7, #12]
 8002002:	4b51      	ldr	r3, [pc, #324]	; (8002148 <HAL_GPIO_Init+0x2d0>)
 8002004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002006:	4a50      	ldr	r2, [pc, #320]	; (8002148 <HAL_GPIO_Init+0x2d0>)
 8002008:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800200c:	6453      	str	r3, [r2, #68]	; 0x44
 800200e:	4b4e      	ldr	r3, [pc, #312]	; (8002148 <HAL_GPIO_Init+0x2d0>)
 8002010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002012:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002016:	60fb      	str	r3, [r7, #12]
 8002018:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800201a:	4a4c      	ldr	r2, [pc, #304]	; (800214c <HAL_GPIO_Init+0x2d4>)
 800201c:	69fb      	ldr	r3, [r7, #28]
 800201e:	089b      	lsrs	r3, r3, #2
 8002020:	3302      	adds	r3, #2
 8002022:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002026:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002028:	69fb      	ldr	r3, [r7, #28]
 800202a:	f003 0303 	and.w	r3, r3, #3
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	220f      	movs	r2, #15
 8002032:	fa02 f303 	lsl.w	r3, r2, r3
 8002036:	43db      	mvns	r3, r3
 8002038:	69ba      	ldr	r2, [r7, #24]
 800203a:	4013      	ands	r3, r2
 800203c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4a43      	ldr	r2, [pc, #268]	; (8002150 <HAL_GPIO_Init+0x2d8>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d00d      	beq.n	8002062 <HAL_GPIO_Init+0x1ea>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	4a42      	ldr	r2, [pc, #264]	; (8002154 <HAL_GPIO_Init+0x2dc>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d007      	beq.n	800205e <HAL_GPIO_Init+0x1e6>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4a41      	ldr	r2, [pc, #260]	; (8002158 <HAL_GPIO_Init+0x2e0>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d101      	bne.n	800205a <HAL_GPIO_Init+0x1e2>
 8002056:	2302      	movs	r3, #2
 8002058:	e004      	b.n	8002064 <HAL_GPIO_Init+0x1ec>
 800205a:	2307      	movs	r3, #7
 800205c:	e002      	b.n	8002064 <HAL_GPIO_Init+0x1ec>
 800205e:	2301      	movs	r3, #1
 8002060:	e000      	b.n	8002064 <HAL_GPIO_Init+0x1ec>
 8002062:	2300      	movs	r3, #0
 8002064:	69fa      	ldr	r2, [r7, #28]
 8002066:	f002 0203 	and.w	r2, r2, #3
 800206a:	0092      	lsls	r2, r2, #2
 800206c:	4093      	lsls	r3, r2
 800206e:	69ba      	ldr	r2, [r7, #24]
 8002070:	4313      	orrs	r3, r2
 8002072:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002074:	4935      	ldr	r1, [pc, #212]	; (800214c <HAL_GPIO_Init+0x2d4>)
 8002076:	69fb      	ldr	r3, [r7, #28]
 8002078:	089b      	lsrs	r3, r3, #2
 800207a:	3302      	adds	r3, #2
 800207c:	69ba      	ldr	r2, [r7, #24]
 800207e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002082:	4b36      	ldr	r3, [pc, #216]	; (800215c <HAL_GPIO_Init+0x2e4>)
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	43db      	mvns	r3, r3
 800208c:	69ba      	ldr	r2, [r7, #24]
 800208e:	4013      	ands	r3, r2
 8002090:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800209a:	2b00      	cmp	r3, #0
 800209c:	d003      	beq.n	80020a6 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 800209e:	69ba      	ldr	r2, [r7, #24]
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	4313      	orrs	r3, r2
 80020a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80020a6:	4a2d      	ldr	r2, [pc, #180]	; (800215c <HAL_GPIO_Init+0x2e4>)
 80020a8:	69bb      	ldr	r3, [r7, #24]
 80020aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020ac:	4b2b      	ldr	r3, [pc, #172]	; (800215c <HAL_GPIO_Init+0x2e4>)
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	43db      	mvns	r3, r3
 80020b6:	69ba      	ldr	r2, [r7, #24]
 80020b8:	4013      	ands	r3, r2
 80020ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d003      	beq.n	80020d0 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 80020c8:	69ba      	ldr	r2, [r7, #24]
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	4313      	orrs	r3, r2
 80020ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80020d0:	4a22      	ldr	r2, [pc, #136]	; (800215c <HAL_GPIO_Init+0x2e4>)
 80020d2:	69bb      	ldr	r3, [r7, #24]
 80020d4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80020d6:	4b21      	ldr	r3, [pc, #132]	; (800215c <HAL_GPIO_Init+0x2e4>)
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	43db      	mvns	r3, r3
 80020e0:	69ba      	ldr	r2, [r7, #24]
 80020e2:	4013      	ands	r3, r2
 80020e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d003      	beq.n	80020fa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80020f2:	69ba      	ldr	r2, [r7, #24]
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	4313      	orrs	r3, r2
 80020f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80020fa:	4a18      	ldr	r2, [pc, #96]	; (800215c <HAL_GPIO_Init+0x2e4>)
 80020fc:	69bb      	ldr	r3, [r7, #24]
 80020fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002100:	4b16      	ldr	r3, [pc, #88]	; (800215c <HAL_GPIO_Init+0x2e4>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	43db      	mvns	r3, r3
 800210a:	69ba      	ldr	r2, [r7, #24]
 800210c:	4013      	ands	r3, r2
 800210e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002118:	2b00      	cmp	r3, #0
 800211a:	d003      	beq.n	8002124 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800211c:	69ba      	ldr	r2, [r7, #24]
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	4313      	orrs	r3, r2
 8002122:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002124:	4a0d      	ldr	r2, [pc, #52]	; (800215c <HAL_GPIO_Init+0x2e4>)
 8002126:	69bb      	ldr	r3, [r7, #24]
 8002128:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800212a:	69fb      	ldr	r3, [r7, #28]
 800212c:	3301      	adds	r3, #1
 800212e:	61fb      	str	r3, [r7, #28]
 8002130:	69fb      	ldr	r3, [r7, #28]
 8002132:	2b0f      	cmp	r3, #15
 8002134:	f67f aeae 	bls.w	8001e94 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002138:	bf00      	nop
 800213a:	bf00      	nop
 800213c:	3724      	adds	r7, #36	; 0x24
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr
 8002146:	bf00      	nop
 8002148:	40023800 	.word	0x40023800
 800214c:	40013800 	.word	0x40013800
 8002150:	40020000 	.word	0x40020000
 8002154:	40020400 	.word	0x40020400
 8002158:	40020800 	.word	0x40020800
 800215c:	40013c00 	.word	0x40013c00

08002160 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002160:	b480      	push	{r7}
 8002162:	b083      	sub	sp, #12
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
 8002168:	460b      	mov	r3, r1
 800216a:	807b      	strh	r3, [r7, #2]
 800216c:	4613      	mov	r3, r2
 800216e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002170:	787b      	ldrb	r3, [r7, #1]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d003      	beq.n	800217e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002176:	887a      	ldrh	r2, [r7, #2]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800217c:	e003      	b.n	8002186 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800217e:	887b      	ldrh	r3, [r7, #2]
 8002180:	041a      	lsls	r2, r3, #16
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	619a      	str	r2, [r3, #24]
}
 8002186:	bf00      	nop
 8002188:	370c      	adds	r7, #12
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr
	...

08002194 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b082      	sub	sp, #8
 8002198:	af00      	add	r7, sp, #0
 800219a:	4603      	mov	r3, r0
 800219c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800219e:	4b08      	ldr	r3, [pc, #32]	; (80021c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80021a0:	695a      	ldr	r2, [r3, #20]
 80021a2:	88fb      	ldrh	r3, [r7, #6]
 80021a4:	4013      	ands	r3, r2
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d006      	beq.n	80021b8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80021aa:	4a05      	ldr	r2, [pc, #20]	; (80021c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80021ac:	88fb      	ldrh	r3, [r7, #6]
 80021ae:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80021b0:	88fb      	ldrh	r3, [r7, #6]
 80021b2:	4618      	mov	r0, r3
 80021b4:	f7fe fd5e 	bl	8000c74 <HAL_GPIO_EXTI_Callback>
  }
}
 80021b8:	bf00      	nop
 80021ba:	3708      	adds	r7, #8
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	40013c00 	.word	0x40013c00

080021c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b084      	sub	sp, #16
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
 80021cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d101      	bne.n	80021d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021d4:	2301      	movs	r3, #1
 80021d6:	e0cc      	b.n	8002372 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80021d8:	4b68      	ldr	r3, [pc, #416]	; (800237c <HAL_RCC_ClockConfig+0x1b8>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f003 0307 	and.w	r3, r3, #7
 80021e0:	683a      	ldr	r2, [r7, #0]
 80021e2:	429a      	cmp	r2, r3
 80021e4:	d90c      	bls.n	8002200 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021e6:	4b65      	ldr	r3, [pc, #404]	; (800237c <HAL_RCC_ClockConfig+0x1b8>)
 80021e8:	683a      	ldr	r2, [r7, #0]
 80021ea:	b2d2      	uxtb	r2, r2
 80021ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021ee:	4b63      	ldr	r3, [pc, #396]	; (800237c <HAL_RCC_ClockConfig+0x1b8>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 0307 	and.w	r3, r3, #7
 80021f6:	683a      	ldr	r2, [r7, #0]
 80021f8:	429a      	cmp	r2, r3
 80021fa:	d001      	beq.n	8002200 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80021fc:	2301      	movs	r3, #1
 80021fe:	e0b8      	b.n	8002372 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 0302 	and.w	r3, r3, #2
 8002208:	2b00      	cmp	r3, #0
 800220a:	d020      	beq.n	800224e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f003 0304 	and.w	r3, r3, #4
 8002214:	2b00      	cmp	r3, #0
 8002216:	d005      	beq.n	8002224 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002218:	4b59      	ldr	r3, [pc, #356]	; (8002380 <HAL_RCC_ClockConfig+0x1bc>)
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	4a58      	ldr	r2, [pc, #352]	; (8002380 <HAL_RCC_ClockConfig+0x1bc>)
 800221e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002222:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f003 0308 	and.w	r3, r3, #8
 800222c:	2b00      	cmp	r3, #0
 800222e:	d005      	beq.n	800223c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002230:	4b53      	ldr	r3, [pc, #332]	; (8002380 <HAL_RCC_ClockConfig+0x1bc>)
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	4a52      	ldr	r2, [pc, #328]	; (8002380 <HAL_RCC_ClockConfig+0x1bc>)
 8002236:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800223a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800223c:	4b50      	ldr	r3, [pc, #320]	; (8002380 <HAL_RCC_ClockConfig+0x1bc>)
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	494d      	ldr	r1, [pc, #308]	; (8002380 <HAL_RCC_ClockConfig+0x1bc>)
 800224a:	4313      	orrs	r3, r2
 800224c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 0301 	and.w	r3, r3, #1
 8002256:	2b00      	cmp	r3, #0
 8002258:	d044      	beq.n	80022e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	2b01      	cmp	r3, #1
 8002260:	d107      	bne.n	8002272 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002262:	4b47      	ldr	r3, [pc, #284]	; (8002380 <HAL_RCC_ClockConfig+0x1bc>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800226a:	2b00      	cmp	r3, #0
 800226c:	d119      	bne.n	80022a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	e07f      	b.n	8002372 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	2b02      	cmp	r3, #2
 8002278:	d003      	beq.n	8002282 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800227e:	2b03      	cmp	r3, #3
 8002280:	d107      	bne.n	8002292 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002282:	4b3f      	ldr	r3, [pc, #252]	; (8002380 <HAL_RCC_ClockConfig+0x1bc>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800228a:	2b00      	cmp	r3, #0
 800228c:	d109      	bne.n	80022a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e06f      	b.n	8002372 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002292:	4b3b      	ldr	r3, [pc, #236]	; (8002380 <HAL_RCC_ClockConfig+0x1bc>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f003 0302 	and.w	r3, r3, #2
 800229a:	2b00      	cmp	r3, #0
 800229c:	d101      	bne.n	80022a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e067      	b.n	8002372 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022a2:	4b37      	ldr	r3, [pc, #220]	; (8002380 <HAL_RCC_ClockConfig+0x1bc>)
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	f023 0203 	bic.w	r2, r3, #3
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	4934      	ldr	r1, [pc, #208]	; (8002380 <HAL_RCC_ClockConfig+0x1bc>)
 80022b0:	4313      	orrs	r3, r2
 80022b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022b4:	f7ff f8b2 	bl	800141c <HAL_GetTick>
 80022b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022ba:	e00a      	b.n	80022d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022bc:	f7ff f8ae 	bl	800141c <HAL_GetTick>
 80022c0:	4602      	mov	r2, r0
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	1ad3      	subs	r3, r2, r3
 80022c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d901      	bls.n	80022d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80022ce:	2303      	movs	r3, #3
 80022d0:	e04f      	b.n	8002372 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022d2:	4b2b      	ldr	r3, [pc, #172]	; (8002380 <HAL_RCC_ClockConfig+0x1bc>)
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	f003 020c 	and.w	r2, r3, #12
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	429a      	cmp	r2, r3
 80022e2:	d1eb      	bne.n	80022bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80022e4:	4b25      	ldr	r3, [pc, #148]	; (800237c <HAL_RCC_ClockConfig+0x1b8>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f003 0307 	and.w	r3, r3, #7
 80022ec:	683a      	ldr	r2, [r7, #0]
 80022ee:	429a      	cmp	r2, r3
 80022f0:	d20c      	bcs.n	800230c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022f2:	4b22      	ldr	r3, [pc, #136]	; (800237c <HAL_RCC_ClockConfig+0x1b8>)
 80022f4:	683a      	ldr	r2, [r7, #0]
 80022f6:	b2d2      	uxtb	r2, r2
 80022f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022fa:	4b20      	ldr	r3, [pc, #128]	; (800237c <HAL_RCC_ClockConfig+0x1b8>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 0307 	and.w	r3, r3, #7
 8002302:	683a      	ldr	r2, [r7, #0]
 8002304:	429a      	cmp	r2, r3
 8002306:	d001      	beq.n	800230c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002308:	2301      	movs	r3, #1
 800230a:	e032      	b.n	8002372 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 0304 	and.w	r3, r3, #4
 8002314:	2b00      	cmp	r3, #0
 8002316:	d008      	beq.n	800232a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002318:	4b19      	ldr	r3, [pc, #100]	; (8002380 <HAL_RCC_ClockConfig+0x1bc>)
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	68db      	ldr	r3, [r3, #12]
 8002324:	4916      	ldr	r1, [pc, #88]	; (8002380 <HAL_RCC_ClockConfig+0x1bc>)
 8002326:	4313      	orrs	r3, r2
 8002328:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f003 0308 	and.w	r3, r3, #8
 8002332:	2b00      	cmp	r3, #0
 8002334:	d009      	beq.n	800234a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002336:	4b12      	ldr	r3, [pc, #72]	; (8002380 <HAL_RCC_ClockConfig+0x1bc>)
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	691b      	ldr	r3, [r3, #16]
 8002342:	00db      	lsls	r3, r3, #3
 8002344:	490e      	ldr	r1, [pc, #56]	; (8002380 <HAL_RCC_ClockConfig+0x1bc>)
 8002346:	4313      	orrs	r3, r2
 8002348:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800234a:	f000 f821 	bl	8002390 <HAL_RCC_GetSysClockFreq>
 800234e:	4602      	mov	r2, r0
 8002350:	4b0b      	ldr	r3, [pc, #44]	; (8002380 <HAL_RCC_ClockConfig+0x1bc>)
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	091b      	lsrs	r3, r3, #4
 8002356:	f003 030f 	and.w	r3, r3, #15
 800235a:	490a      	ldr	r1, [pc, #40]	; (8002384 <HAL_RCC_ClockConfig+0x1c0>)
 800235c:	5ccb      	ldrb	r3, [r1, r3]
 800235e:	fa22 f303 	lsr.w	r3, r2, r3
 8002362:	4a09      	ldr	r2, [pc, #36]	; (8002388 <HAL_RCC_ClockConfig+0x1c4>)
 8002364:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002366:	4b09      	ldr	r3, [pc, #36]	; (800238c <HAL_RCC_ClockConfig+0x1c8>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4618      	mov	r0, r3
 800236c:	f7fe fe40 	bl	8000ff0 <HAL_InitTick>

  return HAL_OK;
 8002370:	2300      	movs	r3, #0
}
 8002372:	4618      	mov	r0, r3
 8002374:	3710      	adds	r7, #16
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	40023c00 	.word	0x40023c00
 8002380:	40023800 	.word	0x40023800
 8002384:	08008ff8 	.word	0x08008ff8
 8002388:	200000c4 	.word	0x200000c4
 800238c:	200000c8 	.word	0x200000c8

08002390 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002390:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002394:	b094      	sub	sp, #80	; 0x50
 8002396:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002398:	2300      	movs	r3, #0
 800239a:	647b      	str	r3, [r7, #68]	; 0x44
 800239c:	2300      	movs	r3, #0
 800239e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80023a0:	2300      	movs	r3, #0
 80023a2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80023a4:	2300      	movs	r3, #0
 80023a6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80023a8:	4b79      	ldr	r3, [pc, #484]	; (8002590 <HAL_RCC_GetSysClockFreq+0x200>)
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	f003 030c 	and.w	r3, r3, #12
 80023b0:	2b08      	cmp	r3, #8
 80023b2:	d00d      	beq.n	80023d0 <HAL_RCC_GetSysClockFreq+0x40>
 80023b4:	2b08      	cmp	r3, #8
 80023b6:	f200 80e1 	bhi.w	800257c <HAL_RCC_GetSysClockFreq+0x1ec>
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d002      	beq.n	80023c4 <HAL_RCC_GetSysClockFreq+0x34>
 80023be:	2b04      	cmp	r3, #4
 80023c0:	d003      	beq.n	80023ca <HAL_RCC_GetSysClockFreq+0x3a>
 80023c2:	e0db      	b.n	800257c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80023c4:	4b73      	ldr	r3, [pc, #460]	; (8002594 <HAL_RCC_GetSysClockFreq+0x204>)
 80023c6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80023c8:	e0db      	b.n	8002582 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80023ca:	4b73      	ldr	r3, [pc, #460]	; (8002598 <HAL_RCC_GetSysClockFreq+0x208>)
 80023cc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80023ce:	e0d8      	b.n	8002582 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80023d0:	4b6f      	ldr	r3, [pc, #444]	; (8002590 <HAL_RCC_GetSysClockFreq+0x200>)
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80023d8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80023da:	4b6d      	ldr	r3, [pc, #436]	; (8002590 <HAL_RCC_GetSysClockFreq+0x200>)
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d063      	beq.n	80024ae <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023e6:	4b6a      	ldr	r3, [pc, #424]	; (8002590 <HAL_RCC_GetSysClockFreq+0x200>)
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	099b      	lsrs	r3, r3, #6
 80023ec:	2200      	movs	r2, #0
 80023ee:	63bb      	str	r3, [r7, #56]	; 0x38
 80023f0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80023f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023f8:	633b      	str	r3, [r7, #48]	; 0x30
 80023fa:	2300      	movs	r3, #0
 80023fc:	637b      	str	r3, [r7, #52]	; 0x34
 80023fe:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002402:	4622      	mov	r2, r4
 8002404:	462b      	mov	r3, r5
 8002406:	f04f 0000 	mov.w	r0, #0
 800240a:	f04f 0100 	mov.w	r1, #0
 800240e:	0159      	lsls	r1, r3, #5
 8002410:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002414:	0150      	lsls	r0, r2, #5
 8002416:	4602      	mov	r2, r0
 8002418:	460b      	mov	r3, r1
 800241a:	4621      	mov	r1, r4
 800241c:	1a51      	subs	r1, r2, r1
 800241e:	6139      	str	r1, [r7, #16]
 8002420:	4629      	mov	r1, r5
 8002422:	eb63 0301 	sbc.w	r3, r3, r1
 8002426:	617b      	str	r3, [r7, #20]
 8002428:	f04f 0200 	mov.w	r2, #0
 800242c:	f04f 0300 	mov.w	r3, #0
 8002430:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002434:	4659      	mov	r1, fp
 8002436:	018b      	lsls	r3, r1, #6
 8002438:	4651      	mov	r1, sl
 800243a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800243e:	4651      	mov	r1, sl
 8002440:	018a      	lsls	r2, r1, #6
 8002442:	4651      	mov	r1, sl
 8002444:	ebb2 0801 	subs.w	r8, r2, r1
 8002448:	4659      	mov	r1, fp
 800244a:	eb63 0901 	sbc.w	r9, r3, r1
 800244e:	f04f 0200 	mov.w	r2, #0
 8002452:	f04f 0300 	mov.w	r3, #0
 8002456:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800245a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800245e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002462:	4690      	mov	r8, r2
 8002464:	4699      	mov	r9, r3
 8002466:	4623      	mov	r3, r4
 8002468:	eb18 0303 	adds.w	r3, r8, r3
 800246c:	60bb      	str	r3, [r7, #8]
 800246e:	462b      	mov	r3, r5
 8002470:	eb49 0303 	adc.w	r3, r9, r3
 8002474:	60fb      	str	r3, [r7, #12]
 8002476:	f04f 0200 	mov.w	r2, #0
 800247a:	f04f 0300 	mov.w	r3, #0
 800247e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002482:	4629      	mov	r1, r5
 8002484:	024b      	lsls	r3, r1, #9
 8002486:	4621      	mov	r1, r4
 8002488:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800248c:	4621      	mov	r1, r4
 800248e:	024a      	lsls	r2, r1, #9
 8002490:	4610      	mov	r0, r2
 8002492:	4619      	mov	r1, r3
 8002494:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002496:	2200      	movs	r2, #0
 8002498:	62bb      	str	r3, [r7, #40]	; 0x28
 800249a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800249c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80024a0:	f7fd ff06 	bl	80002b0 <__aeabi_uldivmod>
 80024a4:	4602      	mov	r2, r0
 80024a6:	460b      	mov	r3, r1
 80024a8:	4613      	mov	r3, r2
 80024aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80024ac:	e058      	b.n	8002560 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024ae:	4b38      	ldr	r3, [pc, #224]	; (8002590 <HAL_RCC_GetSysClockFreq+0x200>)
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	099b      	lsrs	r3, r3, #6
 80024b4:	2200      	movs	r2, #0
 80024b6:	4618      	mov	r0, r3
 80024b8:	4611      	mov	r1, r2
 80024ba:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80024be:	623b      	str	r3, [r7, #32]
 80024c0:	2300      	movs	r3, #0
 80024c2:	627b      	str	r3, [r7, #36]	; 0x24
 80024c4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80024c8:	4642      	mov	r2, r8
 80024ca:	464b      	mov	r3, r9
 80024cc:	f04f 0000 	mov.w	r0, #0
 80024d0:	f04f 0100 	mov.w	r1, #0
 80024d4:	0159      	lsls	r1, r3, #5
 80024d6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80024da:	0150      	lsls	r0, r2, #5
 80024dc:	4602      	mov	r2, r0
 80024de:	460b      	mov	r3, r1
 80024e0:	4641      	mov	r1, r8
 80024e2:	ebb2 0a01 	subs.w	sl, r2, r1
 80024e6:	4649      	mov	r1, r9
 80024e8:	eb63 0b01 	sbc.w	fp, r3, r1
 80024ec:	f04f 0200 	mov.w	r2, #0
 80024f0:	f04f 0300 	mov.w	r3, #0
 80024f4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80024f8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80024fc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002500:	ebb2 040a 	subs.w	r4, r2, sl
 8002504:	eb63 050b 	sbc.w	r5, r3, fp
 8002508:	f04f 0200 	mov.w	r2, #0
 800250c:	f04f 0300 	mov.w	r3, #0
 8002510:	00eb      	lsls	r3, r5, #3
 8002512:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002516:	00e2      	lsls	r2, r4, #3
 8002518:	4614      	mov	r4, r2
 800251a:	461d      	mov	r5, r3
 800251c:	4643      	mov	r3, r8
 800251e:	18e3      	adds	r3, r4, r3
 8002520:	603b      	str	r3, [r7, #0]
 8002522:	464b      	mov	r3, r9
 8002524:	eb45 0303 	adc.w	r3, r5, r3
 8002528:	607b      	str	r3, [r7, #4]
 800252a:	f04f 0200 	mov.w	r2, #0
 800252e:	f04f 0300 	mov.w	r3, #0
 8002532:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002536:	4629      	mov	r1, r5
 8002538:	028b      	lsls	r3, r1, #10
 800253a:	4621      	mov	r1, r4
 800253c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002540:	4621      	mov	r1, r4
 8002542:	028a      	lsls	r2, r1, #10
 8002544:	4610      	mov	r0, r2
 8002546:	4619      	mov	r1, r3
 8002548:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800254a:	2200      	movs	r2, #0
 800254c:	61bb      	str	r3, [r7, #24]
 800254e:	61fa      	str	r2, [r7, #28]
 8002550:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002554:	f7fd feac 	bl	80002b0 <__aeabi_uldivmod>
 8002558:	4602      	mov	r2, r0
 800255a:	460b      	mov	r3, r1
 800255c:	4613      	mov	r3, r2
 800255e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002560:	4b0b      	ldr	r3, [pc, #44]	; (8002590 <HAL_RCC_GetSysClockFreq+0x200>)
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	0c1b      	lsrs	r3, r3, #16
 8002566:	f003 0303 	and.w	r3, r3, #3
 800256a:	3301      	adds	r3, #1
 800256c:	005b      	lsls	r3, r3, #1
 800256e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002570:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002572:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002574:	fbb2 f3f3 	udiv	r3, r2, r3
 8002578:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800257a:	e002      	b.n	8002582 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800257c:	4b05      	ldr	r3, [pc, #20]	; (8002594 <HAL_RCC_GetSysClockFreq+0x204>)
 800257e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002580:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002582:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002584:	4618      	mov	r0, r3
 8002586:	3750      	adds	r7, #80	; 0x50
 8002588:	46bd      	mov	sp, r7
 800258a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800258e:	bf00      	nop
 8002590:	40023800 	.word	0x40023800
 8002594:	00f42400 	.word	0x00f42400
 8002598:	007a1200 	.word	0x007a1200

0800259c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800259c:	b480      	push	{r7}
 800259e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025a0:	4b03      	ldr	r3, [pc, #12]	; (80025b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80025a2:	681b      	ldr	r3, [r3, #0]
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr
 80025ae:	bf00      	nop
 80025b0:	200000c4 	.word	0x200000c4

080025b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80025b8:	f7ff fff0 	bl	800259c <HAL_RCC_GetHCLKFreq>
 80025bc:	4602      	mov	r2, r0
 80025be:	4b05      	ldr	r3, [pc, #20]	; (80025d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	0a9b      	lsrs	r3, r3, #10
 80025c4:	f003 0307 	and.w	r3, r3, #7
 80025c8:	4903      	ldr	r1, [pc, #12]	; (80025d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80025ca:	5ccb      	ldrb	r3, [r1, r3]
 80025cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	bd80      	pop	{r7, pc}
 80025d4:	40023800 	.word	0x40023800
 80025d8:	08009008 	.word	0x08009008

080025dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80025e0:	f7ff ffdc 	bl	800259c <HAL_RCC_GetHCLKFreq>
 80025e4:	4602      	mov	r2, r0
 80025e6:	4b05      	ldr	r3, [pc, #20]	; (80025fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	0b5b      	lsrs	r3, r3, #13
 80025ec:	f003 0307 	and.w	r3, r3, #7
 80025f0:	4903      	ldr	r1, [pc, #12]	; (8002600 <HAL_RCC_GetPCLK2Freq+0x24>)
 80025f2:	5ccb      	ldrb	r3, [r1, r3]
 80025f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	bd80      	pop	{r7, pc}
 80025fc:	40023800 	.word	0x40023800
 8002600:	08009008 	.word	0x08009008

08002604 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002604:	b480      	push	{r7}
 8002606:	b083      	sub	sp, #12
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
 800260c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	220f      	movs	r2, #15
 8002612:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002614:	4b12      	ldr	r3, [pc, #72]	; (8002660 <HAL_RCC_GetClockConfig+0x5c>)
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	f003 0203 	and.w	r2, r3, #3
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002620:	4b0f      	ldr	r3, [pc, #60]	; (8002660 <HAL_RCC_GetClockConfig+0x5c>)
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800262c:	4b0c      	ldr	r3, [pc, #48]	; (8002660 <HAL_RCC_GetClockConfig+0x5c>)
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002638:	4b09      	ldr	r3, [pc, #36]	; (8002660 <HAL_RCC_GetClockConfig+0x5c>)
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	08db      	lsrs	r3, r3, #3
 800263e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002646:	4b07      	ldr	r3, [pc, #28]	; (8002664 <HAL_RCC_GetClockConfig+0x60>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 0207 	and.w	r2, r3, #7
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	601a      	str	r2, [r3, #0]
}
 8002652:	bf00      	nop
 8002654:	370c      	adds	r7, #12
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr
 800265e:	bf00      	nop
 8002660:	40023800 	.word	0x40023800
 8002664:	40023c00 	.word	0x40023c00

08002668 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b086      	sub	sp, #24
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002670:	2300      	movs	r3, #0
 8002672:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002674:	2300      	movs	r3, #0
 8002676:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 0304 	and.w	r3, r3, #4
 8002680:	2b00      	cmp	r3, #0
 8002682:	f000 8083 	beq.w	800278c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002686:	2300      	movs	r3, #0
 8002688:	60fb      	str	r3, [r7, #12]
 800268a:	4b61      	ldr	r3, [pc, #388]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800268c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268e:	4a60      	ldr	r2, [pc, #384]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002690:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002694:	6413      	str	r3, [r2, #64]	; 0x40
 8002696:	4b5e      	ldr	r3, [pc, #376]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800269e:	60fb      	str	r3, [r7, #12]
 80026a0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80026a2:	4b5c      	ldr	r3, [pc, #368]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a5b      	ldr	r2, [pc, #364]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80026a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026ac:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80026ae:	f7fe feb5 	bl	800141c <HAL_GetTick>
 80026b2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80026b4:	e008      	b.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x60>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80026b6:	f7fe feb1 	bl	800141c <HAL_GetTick>
 80026ba:	4602      	mov	r2, r0
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	1ad3      	subs	r3, r2, r3
 80026c0:	2b02      	cmp	r3, #2
 80026c2:	d901      	bls.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x60>
      {
        return HAL_TIMEOUT;
 80026c4:	2303      	movs	r3, #3
 80026c6:	e09f      	b.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80026c8:	4b52      	ldr	r3, [pc, #328]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d0f0      	beq.n	80026b6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80026d4:	4b4e      	ldr	r3, [pc, #312]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80026d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026dc:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d02f      	beq.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026ec:	693a      	ldr	r2, [r7, #16]
 80026ee:	429a      	cmp	r2, r3
 80026f0:	d028      	beq.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0xdc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80026f2:	4b47      	ldr	r3, [pc, #284]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80026f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026fa:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80026fc:	4b46      	ldr	r3, [pc, #280]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80026fe:	2201      	movs	r2, #1
 8002700:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002702:	4b45      	ldr	r3, [pc, #276]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002704:	2200      	movs	r2, #0
 8002706:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002708:	4a41      	ldr	r2, [pc, #260]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800270e:	4b40      	ldr	r3, [pc, #256]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002710:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002712:	f003 0301 	and.w	r3, r3, #1
 8002716:	2b01      	cmp	r3, #1
 8002718:	d114      	bne.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0xdc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800271a:	f7fe fe7f 	bl	800141c <HAL_GetTick>
 800271e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002720:	e00a      	b.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0xd0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002722:	f7fe fe7b 	bl	800141c <HAL_GetTick>
 8002726:	4602      	mov	r2, r0
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	1ad3      	subs	r3, r2, r3
 800272c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002730:	4293      	cmp	r3, r2
 8002732:	d901      	bls.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0xd0>
          {
            return HAL_TIMEOUT;
 8002734:	2303      	movs	r3, #3
 8002736:	e067      	b.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002738:	4b35      	ldr	r3, [pc, #212]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800273a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800273c:	f003 0302 	and.w	r3, r3, #2
 8002740:	2b00      	cmp	r3, #0
 8002742:	d0ee      	beq.n	8002722 <HAL_RCCEx_PeriphCLKConfig+0xba>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800274c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002750:	d10d      	bne.n	800276e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002752:	4b2f      	ldr	r3, [pc, #188]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002762:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002766:	492a      	ldr	r1, [pc, #168]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002768:	4313      	orrs	r3, r2
 800276a:	608b      	str	r3, [r1, #8]
 800276c:	e005      	b.n	800277a <HAL_RCCEx_PeriphCLKConfig+0x112>
 800276e:	4b28      	ldr	r3, [pc, #160]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	4a27      	ldr	r2, [pc, #156]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002774:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002778:	6093      	str	r3, [r2, #8]
 800277a:	4b25      	ldr	r3, [pc, #148]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800277c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002786:	4922      	ldr	r1, [pc, #136]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002788:	4313      	orrs	r3, r2
 800278a:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 0302 	and.w	r3, r3, #2
 8002794:	2b00      	cmp	r3, #0
 8002796:	d003      	beq.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x138>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	7d1a      	ldrb	r2, [r3, #20]
 800279c:	4b1f      	ldr	r3, [pc, #124]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800279e:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f003 0308 	and.w	r3, r3, #8
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d00a      	beq.n	80027c2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 80027ac:	4b18      	ldr	r3, [pc, #96]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80027ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027b2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	691b      	ldr	r3, [r3, #16]
 80027ba:	4915      	ldr	r1, [pc, #84]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80027bc:	4313      	orrs	r3, r2
 80027be:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- LPTIM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 0310 	and.w	r3, r3, #16
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d00a      	beq.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80027ce:	4b10      	ldr	r3, [pc, #64]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80027d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027d4:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	490c      	ldr	r1, [pc, #48]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80027de:	4313      	orrs	r3, r2
 80027e0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }

  /*---------------------------- I2S Configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f003 0301 	and.w	r3, r3, #1
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d00a      	beq.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPBCLKSOURCE(PeriphClkInit->I2SClockSelection));

    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2SClockSelection);
 80027f0:	4b07      	ldr	r3, [pc, #28]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80027f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80027f6:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	4904      	ldr	r1, [pc, #16]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002800:	4313      	orrs	r3, r2
 8002802:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  return HAL_OK;
 8002806:	2300      	movs	r3, #0
}
 8002808:	4618      	mov	r0, r3
 800280a:	3718      	adds	r7, #24
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}
 8002810:	40023800 	.word	0x40023800
 8002814:	40007000 	.word	0x40007000
 8002818:	42470e40 	.word	0x42470e40
 800281c:	424711e0 	.word	0x424711e0

08002820 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b086      	sub	sp, #24
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d101      	bne.n	8002832 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	e273      	b.n	8002d1a <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f003 0301 	and.w	r3, r3, #1
 800283a:	2b00      	cmp	r3, #0
 800283c:	d075      	beq.n	800292a <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800283e:	4b88      	ldr	r3, [pc, #544]	; (8002a60 <HAL_RCC_OscConfig+0x240>)
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	f003 030c 	and.w	r3, r3, #12
 8002846:	2b04      	cmp	r3, #4
 8002848:	d00c      	beq.n	8002864 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800284a:	4b85      	ldr	r3, [pc, #532]	; (8002a60 <HAL_RCC_OscConfig+0x240>)
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002852:	2b08      	cmp	r3, #8
 8002854:	d112      	bne.n	800287c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002856:	4b82      	ldr	r3, [pc, #520]	; (8002a60 <HAL_RCC_OscConfig+0x240>)
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800285e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002862:	d10b      	bne.n	800287c <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002864:	4b7e      	ldr	r3, [pc, #504]	; (8002a60 <HAL_RCC_OscConfig+0x240>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800286c:	2b00      	cmp	r3, #0
 800286e:	d05b      	beq.n	8002928 <HAL_RCC_OscConfig+0x108>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d157      	bne.n	8002928 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002878:	2301      	movs	r3, #1
 800287a:	e24e      	b.n	8002d1a <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002884:	d106      	bne.n	8002894 <HAL_RCC_OscConfig+0x74>
 8002886:	4b76      	ldr	r3, [pc, #472]	; (8002a60 <HAL_RCC_OscConfig+0x240>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a75      	ldr	r2, [pc, #468]	; (8002a60 <HAL_RCC_OscConfig+0x240>)
 800288c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002890:	6013      	str	r3, [r2, #0]
 8002892:	e01d      	b.n	80028d0 <HAL_RCC_OscConfig+0xb0>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800289c:	d10c      	bne.n	80028b8 <HAL_RCC_OscConfig+0x98>
 800289e:	4b70      	ldr	r3, [pc, #448]	; (8002a60 <HAL_RCC_OscConfig+0x240>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a6f      	ldr	r2, [pc, #444]	; (8002a60 <HAL_RCC_OscConfig+0x240>)
 80028a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028a8:	6013      	str	r3, [r2, #0]
 80028aa:	4b6d      	ldr	r3, [pc, #436]	; (8002a60 <HAL_RCC_OscConfig+0x240>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a6c      	ldr	r2, [pc, #432]	; (8002a60 <HAL_RCC_OscConfig+0x240>)
 80028b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028b4:	6013      	str	r3, [r2, #0]
 80028b6:	e00b      	b.n	80028d0 <HAL_RCC_OscConfig+0xb0>
 80028b8:	4b69      	ldr	r3, [pc, #420]	; (8002a60 <HAL_RCC_OscConfig+0x240>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a68      	ldr	r2, [pc, #416]	; (8002a60 <HAL_RCC_OscConfig+0x240>)
 80028be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028c2:	6013      	str	r3, [r2, #0]
 80028c4:	4b66      	ldr	r3, [pc, #408]	; (8002a60 <HAL_RCC_OscConfig+0x240>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a65      	ldr	r2, [pc, #404]	; (8002a60 <HAL_RCC_OscConfig+0x240>)
 80028ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d013      	beq.n	8002900 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028d8:	f7fe fda0 	bl	800141c <HAL_GetTick>
 80028dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028de:	e008      	b.n	80028f2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028e0:	f7fe fd9c 	bl	800141c <HAL_GetTick>
 80028e4:	4602      	mov	r2, r0
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	2b64      	cmp	r3, #100	; 0x64
 80028ec:	d901      	bls.n	80028f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80028ee:	2303      	movs	r3, #3
 80028f0:	e213      	b.n	8002d1a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028f2:	4b5b      	ldr	r3, [pc, #364]	; (8002a60 <HAL_RCC_OscConfig+0x240>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d0f0      	beq.n	80028e0 <HAL_RCC_OscConfig+0xc0>
 80028fe:	e014      	b.n	800292a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002900:	f7fe fd8c 	bl	800141c <HAL_GetTick>
 8002904:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002906:	e008      	b.n	800291a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002908:	f7fe fd88 	bl	800141c <HAL_GetTick>
 800290c:	4602      	mov	r2, r0
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	1ad3      	subs	r3, r2, r3
 8002912:	2b64      	cmp	r3, #100	; 0x64
 8002914:	d901      	bls.n	800291a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002916:	2303      	movs	r3, #3
 8002918:	e1ff      	b.n	8002d1a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800291a:	4b51      	ldr	r3, [pc, #324]	; (8002a60 <HAL_RCC_OscConfig+0x240>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002922:	2b00      	cmp	r3, #0
 8002924:	d1f0      	bne.n	8002908 <HAL_RCC_OscConfig+0xe8>
 8002926:	e000      	b.n	800292a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002928:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 0302 	and.w	r3, r3, #2
 8002932:	2b00      	cmp	r3, #0
 8002934:	d063      	beq.n	80029fe <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002936:	4b4a      	ldr	r3, [pc, #296]	; (8002a60 <HAL_RCC_OscConfig+0x240>)
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	f003 030c 	and.w	r3, r3, #12
 800293e:	2b00      	cmp	r3, #0
 8002940:	d00b      	beq.n	800295a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002942:	4b47      	ldr	r3, [pc, #284]	; (8002a60 <HAL_RCC_OscConfig+0x240>)
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800294a:	2b08      	cmp	r3, #8
 800294c:	d11c      	bne.n	8002988 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800294e:	4b44      	ldr	r3, [pc, #272]	; (8002a60 <HAL_RCC_OscConfig+0x240>)
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002956:	2b00      	cmp	r3, #0
 8002958:	d116      	bne.n	8002988 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800295a:	4b41      	ldr	r3, [pc, #260]	; (8002a60 <HAL_RCC_OscConfig+0x240>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 0302 	and.w	r3, r3, #2
 8002962:	2b00      	cmp	r3, #0
 8002964:	d005      	beq.n	8002972 <HAL_RCC_OscConfig+0x152>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	68db      	ldr	r3, [r3, #12]
 800296a:	2b01      	cmp	r3, #1
 800296c:	d001      	beq.n	8002972 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	e1d3      	b.n	8002d1a <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002972:	4b3b      	ldr	r3, [pc, #236]	; (8002a60 <HAL_RCC_OscConfig+0x240>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	691b      	ldr	r3, [r3, #16]
 800297e:	00db      	lsls	r3, r3, #3
 8002980:	4937      	ldr	r1, [pc, #220]	; (8002a60 <HAL_RCC_OscConfig+0x240>)
 8002982:	4313      	orrs	r3, r2
 8002984:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002986:	e03a      	b.n	80029fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	68db      	ldr	r3, [r3, #12]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d020      	beq.n	80029d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002990:	4b34      	ldr	r3, [pc, #208]	; (8002a64 <HAL_RCC_OscConfig+0x244>)
 8002992:	2201      	movs	r2, #1
 8002994:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002996:	f7fe fd41 	bl	800141c <HAL_GetTick>
 800299a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800299c:	e008      	b.n	80029b0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800299e:	f7fe fd3d 	bl	800141c <HAL_GetTick>
 80029a2:	4602      	mov	r2, r0
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	1ad3      	subs	r3, r2, r3
 80029a8:	2b02      	cmp	r3, #2
 80029aa:	d901      	bls.n	80029b0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80029ac:	2303      	movs	r3, #3
 80029ae:	e1b4      	b.n	8002d1a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029b0:	4b2b      	ldr	r3, [pc, #172]	; (8002a60 <HAL_RCC_OscConfig+0x240>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 0302 	and.w	r3, r3, #2
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d0f0      	beq.n	800299e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029bc:	4b28      	ldr	r3, [pc, #160]	; (8002a60 <HAL_RCC_OscConfig+0x240>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	691b      	ldr	r3, [r3, #16]
 80029c8:	00db      	lsls	r3, r3, #3
 80029ca:	4925      	ldr	r1, [pc, #148]	; (8002a60 <HAL_RCC_OscConfig+0x240>)
 80029cc:	4313      	orrs	r3, r2
 80029ce:	600b      	str	r3, [r1, #0]
 80029d0:	e015      	b.n	80029fe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029d2:	4b24      	ldr	r3, [pc, #144]	; (8002a64 <HAL_RCC_OscConfig+0x244>)
 80029d4:	2200      	movs	r2, #0
 80029d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029d8:	f7fe fd20 	bl	800141c <HAL_GetTick>
 80029dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029de:	e008      	b.n	80029f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029e0:	f7fe fd1c 	bl	800141c <HAL_GetTick>
 80029e4:	4602      	mov	r2, r0
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	1ad3      	subs	r3, r2, r3
 80029ea:	2b02      	cmp	r3, #2
 80029ec:	d901      	bls.n	80029f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80029ee:	2303      	movs	r3, #3
 80029f0:	e193      	b.n	8002d1a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029f2:	4b1b      	ldr	r3, [pc, #108]	; (8002a60 <HAL_RCC_OscConfig+0x240>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 0302 	and.w	r3, r3, #2
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d1f0      	bne.n	80029e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 0308 	and.w	r3, r3, #8
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d036      	beq.n	8002a78 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	695b      	ldr	r3, [r3, #20]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d016      	beq.n	8002a40 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a12:	4b15      	ldr	r3, [pc, #84]	; (8002a68 <HAL_RCC_OscConfig+0x248>)
 8002a14:	2201      	movs	r2, #1
 8002a16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a18:	f7fe fd00 	bl	800141c <HAL_GetTick>
 8002a1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a1e:	e008      	b.n	8002a32 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a20:	f7fe fcfc 	bl	800141c <HAL_GetTick>
 8002a24:	4602      	mov	r2, r0
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	1ad3      	subs	r3, r2, r3
 8002a2a:	2b02      	cmp	r3, #2
 8002a2c:	d901      	bls.n	8002a32 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002a2e:	2303      	movs	r3, #3
 8002a30:	e173      	b.n	8002d1a <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a32:	4b0b      	ldr	r3, [pc, #44]	; (8002a60 <HAL_RCC_OscConfig+0x240>)
 8002a34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a36:	f003 0302 	and.w	r3, r3, #2
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d0f0      	beq.n	8002a20 <HAL_RCC_OscConfig+0x200>
 8002a3e:	e01b      	b.n	8002a78 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a40:	4b09      	ldr	r3, [pc, #36]	; (8002a68 <HAL_RCC_OscConfig+0x248>)
 8002a42:	2200      	movs	r2, #0
 8002a44:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a46:	f7fe fce9 	bl	800141c <HAL_GetTick>
 8002a4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a4c:	e00e      	b.n	8002a6c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a4e:	f7fe fce5 	bl	800141c <HAL_GetTick>
 8002a52:	4602      	mov	r2, r0
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	1ad3      	subs	r3, r2, r3
 8002a58:	2b02      	cmp	r3, #2
 8002a5a:	d907      	bls.n	8002a6c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002a5c:	2303      	movs	r3, #3
 8002a5e:	e15c      	b.n	8002d1a <HAL_RCC_OscConfig+0x4fa>
 8002a60:	40023800 	.word	0x40023800
 8002a64:	42470000 	.word	0x42470000
 8002a68:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a6c:	4b8a      	ldr	r3, [pc, #552]	; (8002c98 <HAL_RCC_OscConfig+0x478>)
 8002a6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a70:	f003 0302 	and.w	r3, r3, #2
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d1ea      	bne.n	8002a4e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 0304 	and.w	r3, r3, #4
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	f000 8097 	beq.w	8002bb4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a86:	2300      	movs	r3, #0
 8002a88:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a8a:	4b83      	ldr	r3, [pc, #524]	; (8002c98 <HAL_RCC_OscConfig+0x478>)
 8002a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d10f      	bne.n	8002ab6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a96:	2300      	movs	r3, #0
 8002a98:	60bb      	str	r3, [r7, #8]
 8002a9a:	4b7f      	ldr	r3, [pc, #508]	; (8002c98 <HAL_RCC_OscConfig+0x478>)
 8002a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9e:	4a7e      	ldr	r2, [pc, #504]	; (8002c98 <HAL_RCC_OscConfig+0x478>)
 8002aa0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002aa4:	6413      	str	r3, [r2, #64]	; 0x40
 8002aa6:	4b7c      	ldr	r3, [pc, #496]	; (8002c98 <HAL_RCC_OscConfig+0x478>)
 8002aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aae:	60bb      	str	r3, [r7, #8]
 8002ab0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ab6:	4b79      	ldr	r3, [pc, #484]	; (8002c9c <HAL_RCC_OscConfig+0x47c>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d118      	bne.n	8002af4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ac2:	4b76      	ldr	r3, [pc, #472]	; (8002c9c <HAL_RCC_OscConfig+0x47c>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a75      	ldr	r2, [pc, #468]	; (8002c9c <HAL_RCC_OscConfig+0x47c>)
 8002ac8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002acc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ace:	f7fe fca5 	bl	800141c <HAL_GetTick>
 8002ad2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ad4:	e008      	b.n	8002ae8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ad6:	f7fe fca1 	bl	800141c <HAL_GetTick>
 8002ada:	4602      	mov	r2, r0
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	1ad3      	subs	r3, r2, r3
 8002ae0:	2b02      	cmp	r3, #2
 8002ae2:	d901      	bls.n	8002ae8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002ae4:	2303      	movs	r3, #3
 8002ae6:	e118      	b.n	8002d1a <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ae8:	4b6c      	ldr	r3, [pc, #432]	; (8002c9c <HAL_RCC_OscConfig+0x47c>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d0f0      	beq.n	8002ad6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	d106      	bne.n	8002b0a <HAL_RCC_OscConfig+0x2ea>
 8002afc:	4b66      	ldr	r3, [pc, #408]	; (8002c98 <HAL_RCC_OscConfig+0x478>)
 8002afe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b00:	4a65      	ldr	r2, [pc, #404]	; (8002c98 <HAL_RCC_OscConfig+0x478>)
 8002b02:	f043 0301 	orr.w	r3, r3, #1
 8002b06:	6713      	str	r3, [r2, #112]	; 0x70
 8002b08:	e01c      	b.n	8002b44 <HAL_RCC_OscConfig+0x324>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	2b05      	cmp	r3, #5
 8002b10:	d10c      	bne.n	8002b2c <HAL_RCC_OscConfig+0x30c>
 8002b12:	4b61      	ldr	r3, [pc, #388]	; (8002c98 <HAL_RCC_OscConfig+0x478>)
 8002b14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b16:	4a60      	ldr	r2, [pc, #384]	; (8002c98 <HAL_RCC_OscConfig+0x478>)
 8002b18:	f043 0304 	orr.w	r3, r3, #4
 8002b1c:	6713      	str	r3, [r2, #112]	; 0x70
 8002b1e:	4b5e      	ldr	r3, [pc, #376]	; (8002c98 <HAL_RCC_OscConfig+0x478>)
 8002b20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b22:	4a5d      	ldr	r2, [pc, #372]	; (8002c98 <HAL_RCC_OscConfig+0x478>)
 8002b24:	f043 0301 	orr.w	r3, r3, #1
 8002b28:	6713      	str	r3, [r2, #112]	; 0x70
 8002b2a:	e00b      	b.n	8002b44 <HAL_RCC_OscConfig+0x324>
 8002b2c:	4b5a      	ldr	r3, [pc, #360]	; (8002c98 <HAL_RCC_OscConfig+0x478>)
 8002b2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b30:	4a59      	ldr	r2, [pc, #356]	; (8002c98 <HAL_RCC_OscConfig+0x478>)
 8002b32:	f023 0301 	bic.w	r3, r3, #1
 8002b36:	6713      	str	r3, [r2, #112]	; 0x70
 8002b38:	4b57      	ldr	r3, [pc, #348]	; (8002c98 <HAL_RCC_OscConfig+0x478>)
 8002b3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b3c:	4a56      	ldr	r2, [pc, #344]	; (8002c98 <HAL_RCC_OscConfig+0x478>)
 8002b3e:	f023 0304 	bic.w	r3, r3, #4
 8002b42:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d015      	beq.n	8002b78 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b4c:	f7fe fc66 	bl	800141c <HAL_GetTick>
 8002b50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b52:	e00a      	b.n	8002b6a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b54:	f7fe fc62 	bl	800141c <HAL_GetTick>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	1ad3      	subs	r3, r2, r3
 8002b5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d901      	bls.n	8002b6a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002b66:	2303      	movs	r3, #3
 8002b68:	e0d7      	b.n	8002d1a <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b6a:	4b4b      	ldr	r3, [pc, #300]	; (8002c98 <HAL_RCC_OscConfig+0x478>)
 8002b6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b6e:	f003 0302 	and.w	r3, r3, #2
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d0ee      	beq.n	8002b54 <HAL_RCC_OscConfig+0x334>
 8002b76:	e014      	b.n	8002ba2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b78:	f7fe fc50 	bl	800141c <HAL_GetTick>
 8002b7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b7e:	e00a      	b.n	8002b96 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b80:	f7fe fc4c 	bl	800141c <HAL_GetTick>
 8002b84:	4602      	mov	r2, r0
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	1ad3      	subs	r3, r2, r3
 8002b8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d901      	bls.n	8002b96 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002b92:	2303      	movs	r3, #3
 8002b94:	e0c1      	b.n	8002d1a <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b96:	4b40      	ldr	r3, [pc, #256]	; (8002c98 <HAL_RCC_OscConfig+0x478>)
 8002b98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b9a:	f003 0302 	and.w	r3, r3, #2
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d1ee      	bne.n	8002b80 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ba2:	7dfb      	ldrb	r3, [r7, #23]
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	d105      	bne.n	8002bb4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ba8:	4b3b      	ldr	r3, [pc, #236]	; (8002c98 <HAL_RCC_OscConfig+0x478>)
 8002baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bac:	4a3a      	ldr	r2, [pc, #232]	; (8002c98 <HAL_RCC_OscConfig+0x478>)
 8002bae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bb2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	699b      	ldr	r3, [r3, #24]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	f000 80ad 	beq.w	8002d18 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002bbe:	4b36      	ldr	r3, [pc, #216]	; (8002c98 <HAL_RCC_OscConfig+0x478>)
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	f003 030c 	and.w	r3, r3, #12
 8002bc6:	2b08      	cmp	r3, #8
 8002bc8:	d060      	beq.n	8002c8c <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	699b      	ldr	r3, [r3, #24]
 8002bce:	2b02      	cmp	r3, #2
 8002bd0:	d145      	bne.n	8002c5e <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bd2:	4b33      	ldr	r3, [pc, #204]	; (8002ca0 <HAL_RCC_OscConfig+0x480>)
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bd8:	f7fe fc20 	bl	800141c <HAL_GetTick>
 8002bdc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bde:	e008      	b.n	8002bf2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002be0:	f7fe fc1c 	bl	800141c <HAL_GetTick>
 8002be4:	4602      	mov	r2, r0
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	1ad3      	subs	r3, r2, r3
 8002bea:	2b02      	cmp	r3, #2
 8002bec:	d901      	bls.n	8002bf2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002bee:	2303      	movs	r3, #3
 8002bf0:	e093      	b.n	8002d1a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bf2:	4b29      	ldr	r3, [pc, #164]	; (8002c98 <HAL_RCC_OscConfig+0x478>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d1f0      	bne.n	8002be0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	69da      	ldr	r2, [r3, #28]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6a1b      	ldr	r3, [r3, #32]
 8002c06:	431a      	orrs	r2, r3
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c0c:	019b      	lsls	r3, r3, #6
 8002c0e:	431a      	orrs	r2, r3
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c14:	085b      	lsrs	r3, r3, #1
 8002c16:	3b01      	subs	r3, #1
 8002c18:	041b      	lsls	r3, r3, #16
 8002c1a:	431a      	orrs	r2, r3
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c20:	061b      	lsls	r3, r3, #24
 8002c22:	431a      	orrs	r2, r3
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c28:	071b      	lsls	r3, r3, #28
 8002c2a:	491b      	ldr	r1, [pc, #108]	; (8002c98 <HAL_RCC_OscConfig+0x478>)
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c30:	4b1b      	ldr	r3, [pc, #108]	; (8002ca0 <HAL_RCC_OscConfig+0x480>)
 8002c32:	2201      	movs	r2, #1
 8002c34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c36:	f7fe fbf1 	bl	800141c <HAL_GetTick>
 8002c3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c3c:	e008      	b.n	8002c50 <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c3e:	f7fe fbed 	bl	800141c <HAL_GetTick>
 8002c42:	4602      	mov	r2, r0
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	1ad3      	subs	r3, r2, r3
 8002c48:	2b02      	cmp	r3, #2
 8002c4a:	d901      	bls.n	8002c50 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 8002c4c:	2303      	movs	r3, #3
 8002c4e:	e064      	b.n	8002d1a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c50:	4b11      	ldr	r3, [pc, #68]	; (8002c98 <HAL_RCC_OscConfig+0x478>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d0f0      	beq.n	8002c3e <HAL_RCC_OscConfig+0x41e>
 8002c5c:	e05c      	b.n	8002d18 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c5e:	4b10      	ldr	r3, [pc, #64]	; (8002ca0 <HAL_RCC_OscConfig+0x480>)
 8002c60:	2200      	movs	r2, #0
 8002c62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c64:	f7fe fbda 	bl	800141c <HAL_GetTick>
 8002c68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c6a:	e008      	b.n	8002c7e <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c6c:	f7fe fbd6 	bl	800141c <HAL_GetTick>
 8002c70:	4602      	mov	r2, r0
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	2b02      	cmp	r3, #2
 8002c78:	d901      	bls.n	8002c7e <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	e04d      	b.n	8002d1a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c7e:	4b06      	ldr	r3, [pc, #24]	; (8002c98 <HAL_RCC_OscConfig+0x478>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d1f0      	bne.n	8002c6c <HAL_RCC_OscConfig+0x44c>
 8002c8a:	e045      	b.n	8002d18 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	699b      	ldr	r3, [r3, #24]
 8002c90:	2b01      	cmp	r3, #1
 8002c92:	d107      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	e040      	b.n	8002d1a <HAL_RCC_OscConfig+0x4fa>
 8002c98:	40023800 	.word	0x40023800
 8002c9c:	40007000 	.word	0x40007000
 8002ca0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002ca4:	4b1f      	ldr	r3, [pc, #124]	; (8002d24 <HAL_RCC_OscConfig+0x504>)
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	699b      	ldr	r3, [r3, #24]
 8002cae:	2b01      	cmp	r3, #1
 8002cb0:	d030      	beq.n	8002d14 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cbc:	429a      	cmp	r2, r3
 8002cbe:	d129      	bne.n	8002d14 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cca:	429a      	cmp	r2, r3
 8002ccc:	d122      	bne.n	8002d14 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002cce:	68fa      	ldr	r2, [r7, #12]
 8002cd0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	687a      	ldr	r2, [r7, #4]
 8002cd8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002cda:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d119      	bne.n	8002d14 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cea:	085b      	lsrs	r3, r3, #1
 8002cec:	3b01      	subs	r3, #1
 8002cee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	d10f      	bne.n	8002d14 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cfe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d00:	429a      	cmp	r2, r3
 8002d02:	d107      	bne.n	8002d14 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d001      	beq.n	8002d18 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	e000      	b.n	8002d1a <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8002d18:	2300      	movs	r3, #0
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3718      	adds	r7, #24
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	bf00      	nop
 8002d24:	40023800 	.word	0x40023800

08002d28 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b082      	sub	sp, #8
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d101      	bne.n	8002d3a <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e01c      	b.n	8002d74 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	795b      	ldrb	r3, [r3, #5]
 8002d3e:	b2db      	uxtb	r3, r3
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d105      	bne.n	8002d50 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2200      	movs	r2, #0
 8002d48:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	f7fe f8b0 	bl	8000eb0 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2202      	movs	r2, #2
 8002d54:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f042 0204 	orr.w	r2, r2, #4
 8002d64:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2201      	movs	r2, #1
 8002d6a:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8002d72:	2300      	movs	r3, #0
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	3708      	adds	r7, #8
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}

08002d7c <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b084      	sub	sp, #16
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
 8002d84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002d86:	2300      	movs	r3, #0
 8002d88:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	791b      	ldrb	r3, [r3, #4]
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d101      	bne.n	8002d96 <HAL_RNG_GenerateRandomNumber+0x1a>
 8002d92:	2302      	movs	r3, #2
 8002d94:	e044      	b.n	8002e20 <HAL_RNG_GenerateRandomNumber+0xa4>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2201      	movs	r2, #1
 8002d9a:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	795b      	ldrb	r3, [r3, #5]
 8002da0:	b2db      	uxtb	r3, r3
 8002da2:	2b01      	cmp	r3, #1
 8002da4:	d133      	bne.n	8002e0e <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2202      	movs	r2, #2
 8002daa:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002dac:	f7fe fb36 	bl	800141c <HAL_GetTick>
 8002db0:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8002db2:	e018      	b.n	8002de6 <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8002db4:	f7fe fb32 	bl	800141c <HAL_GetTick>
 8002db8:	4602      	mov	r2, r0
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	1ad3      	subs	r3, r2, r3
 8002dbe:	2b02      	cmp	r3, #2
 8002dc0:	d911      	bls.n	8002de6 <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	f003 0301 	and.w	r3, r3, #1
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d00a      	beq.n	8002de6 <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2202      	movs	r2, #2
 8002dda:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2200      	movs	r2, #0
 8002de0:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e01c      	b.n	8002e20 <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	f003 0301 	and.w	r3, r3, #1
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	d1df      	bne.n	8002db4 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	689a      	ldr	r2, [r3, #8]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	68da      	ldr	r2, [r3, #12]
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2201      	movs	r2, #1
 8002e0a:	715a      	strb	r2, [r3, #5]
 8002e0c:	e004      	b.n	8002e18 <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2204      	movs	r2, #4
 8002e12:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	711a      	strb	r2, [r3, #4]

  return status;
 8002e1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	3710      	adds	r7, #16
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}

08002e28 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b084      	sub	sp, #16
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d101      	bne.n	8002e3e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e066      	b.n	8002f0c <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	7f5b      	ldrb	r3, [r3, #29]
 8002e42:	b2db      	uxtb	r3, r3
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d105      	bne.n	8002e54 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002e4e:	6878      	ldr	r0, [r7, #4]
 8002e50:	f7fe f876 	bl	8000f40 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2202      	movs	r2, #2
 8002e58:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	22ca      	movs	r2, #202	; 0xca
 8002e60:	625a      	str	r2, [r3, #36]	; 0x24
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	2253      	movs	r2, #83	; 0x53
 8002e68:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f000 f927 	bl	80030be <RTC_EnterInitMode>
 8002e70:	4603      	mov	r3, r0
 8002e72:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8002e74:	7bfb      	ldrb	r3, [r7, #15]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d12c      	bne.n	8002ed4 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	687a      	ldr	r2, [r7, #4]
 8002e82:	6812      	ldr	r2, [r2, #0]
 8002e84:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002e88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e8c:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	6899      	ldr	r1, [r3, #8]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	685a      	ldr	r2, [r3, #4]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	691b      	ldr	r3, [r3, #16]
 8002e9c:	431a      	orrs	r2, r3
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	695b      	ldr	r3, [r3, #20]
 8002ea2:	431a      	orrs	r2, r3
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	430a      	orrs	r2, r1
 8002eaa:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	687a      	ldr	r2, [r7, #4]
 8002eb2:	68d2      	ldr	r2, [r2, #12]
 8002eb4:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	6919      	ldr	r1, [r3, #16]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	041a      	lsls	r2, r3, #16
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	430a      	orrs	r2, r1
 8002ec8:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002eca:	6878      	ldr	r0, [r7, #4]
 8002ecc:	f000 f92e 	bl	800312c <RTC_ExitInitMode>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8002ed4:	7bfb      	ldrb	r3, [r7, #15]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d113      	bne.n	8002f02 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002ee8:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	699a      	ldr	r2, [r3, #24]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	430a      	orrs	r2, r1
 8002efa:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2201      	movs	r2, #1
 8002f00:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	22ff      	movs	r2, #255	; 0xff
 8002f08:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8002f0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	3710      	adds	r7, #16
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}

08002f14 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b086      	sub	sp, #24
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	60f8      	str	r0, [r7, #12]
 8002f1c:	60b9      	str	r1, [r7, #8]
 8002f1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002f20:	2300      	movs	r3, #0
 8002f22:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	691b      	ldr	r3, [r3, #16]
 8002f34:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002f46:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002f4a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	0c1b      	lsrs	r3, r3, #16
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f56:	b2da      	uxtb	r2, r3
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	0a1b      	lsrs	r3, r3, #8
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f66:	b2da      	uxtb	r2, r3
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	b2db      	uxtb	r3, r3
 8002f70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f74:	b2da      	uxtb	r2, r3
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	0d9b      	lsrs	r3, r3, #22
 8002f7e:	b2db      	uxtb	r3, r3
 8002f80:	f003 0301 	and.w	r3, r3, #1
 8002f84:	b2da      	uxtb	r2, r3
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d11a      	bne.n	8002fc6 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	781b      	ldrb	r3, [r3, #0]
 8002f94:	4618      	mov	r0, r3
 8002f96:	f000 f8ee 	bl	8003176 <RTC_Bcd2ToByte>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	461a      	mov	r2, r3
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	785b      	ldrb	r3, [r3, #1]
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f000 f8e5 	bl	8003176 <RTC_Bcd2ToByte>
 8002fac:	4603      	mov	r3, r0
 8002fae:	461a      	mov	r2, r3
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	789b      	ldrb	r3, [r3, #2]
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f000 f8dc 	bl	8003176 <RTC_Bcd2ToByte>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	461a      	mov	r2, r3
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8002fc6:	2300      	movs	r3, #0
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	3718      	adds	r7, #24
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}

08002fd0 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b086      	sub	sp, #24
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	60f8      	str	r0, [r7, #12]
 8002fd8:	60b9      	str	r1, [r7, #8]
 8002fda:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002fea:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002fee:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	0c1b      	lsrs	r3, r3, #16
 8002ff4:	b2da      	uxtb	r2, r3
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	0a1b      	lsrs	r3, r3, #8
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	f003 031f 	and.w	r3, r3, #31
 8003004:	b2da      	uxtb	r2, r3
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	b2db      	uxtb	r3, r3
 800300e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003012:	b2da      	uxtb	r2, r3
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	0b5b      	lsrs	r3, r3, #13
 800301c:	b2db      	uxtb	r3, r3
 800301e:	f003 0307 	and.w	r3, r3, #7
 8003022:	b2da      	uxtb	r2, r3
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d11a      	bne.n	8003064 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	78db      	ldrb	r3, [r3, #3]
 8003032:	4618      	mov	r0, r3
 8003034:	f000 f89f 	bl	8003176 <RTC_Bcd2ToByte>
 8003038:	4603      	mov	r3, r0
 800303a:	461a      	mov	r2, r3
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	785b      	ldrb	r3, [r3, #1]
 8003044:	4618      	mov	r0, r3
 8003046:	f000 f896 	bl	8003176 <RTC_Bcd2ToByte>
 800304a:	4603      	mov	r3, r0
 800304c:	461a      	mov	r2, r3
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	789b      	ldrb	r3, [r3, #2]
 8003056:	4618      	mov	r0, r3
 8003058:	f000 f88d 	bl	8003176 <RTC_Bcd2ToByte>
 800305c:	4603      	mov	r3, r0
 800305e:	461a      	mov	r2, r3
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8003064:	2300      	movs	r3, #0
}
 8003066:	4618      	mov	r0, r3
 8003068:	3718      	adds	r7, #24
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}

0800306e <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800306e:	b580      	push	{r7, lr}
 8003070:	b084      	sub	sp, #16
 8003072:	af00      	add	r7, sp, #0
 8003074:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003076:	2300      	movs	r3, #0
 8003078:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	68da      	ldr	r2, [r3, #12]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003088:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800308a:	f7fe f9c7 	bl	800141c <HAL_GetTick>
 800308e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003090:	e009      	b.n	80030a6 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003092:	f7fe f9c3 	bl	800141c <HAL_GetTick>
 8003096:	4602      	mov	r2, r0
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	1ad3      	subs	r3, r2, r3
 800309c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80030a0:	d901      	bls.n	80030a6 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80030a2:	2303      	movs	r3, #3
 80030a4:	e007      	b.n	80030b6 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	68db      	ldr	r3, [r3, #12]
 80030ac:	f003 0320 	and.w	r3, r3, #32
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d0ee      	beq.n	8003092 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80030b4:	2300      	movs	r3, #0
}
 80030b6:	4618      	mov	r0, r3
 80030b8:	3710      	adds	r7, #16
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}

080030be <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80030be:	b580      	push	{r7, lr}
 80030c0:	b084      	sub	sp, #16
 80030c2:	af00      	add	r7, sp, #0
 80030c4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80030c6:	2300      	movs	r3, #0
 80030c8:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80030ca:	2300      	movs	r3, #0
 80030cc:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	68db      	ldr	r3, [r3, #12]
 80030d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d122      	bne.n	8003122 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	68da      	ldr	r2, [r3, #12]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80030ea:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80030ec:	f7fe f996 	bl	800141c <HAL_GetTick>
 80030f0:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80030f2:	e00c      	b.n	800310e <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80030f4:	f7fe f992 	bl	800141c <HAL_GetTick>
 80030f8:	4602      	mov	r2, r0
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	1ad3      	subs	r3, r2, r3
 80030fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003102:	d904      	bls.n	800310e <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2204      	movs	r2, #4
 8003108:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	68db      	ldr	r3, [r3, #12]
 8003114:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003118:	2b00      	cmp	r3, #0
 800311a:	d102      	bne.n	8003122 <RTC_EnterInitMode+0x64>
 800311c:	7bfb      	ldrb	r3, [r7, #15]
 800311e:	2b01      	cmp	r3, #1
 8003120:	d1e8      	bne.n	80030f4 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8003122:	7bfb      	ldrb	r3, [r7, #15]
}
 8003124:	4618      	mov	r0, r3
 8003126:	3710      	adds	r7, #16
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}

0800312c <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b084      	sub	sp, #16
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003134:	2300      	movs	r3, #0
 8003136:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	68da      	ldr	r2, [r3, #12]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003146:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	f003 0320 	and.w	r3, r3, #32
 8003152:	2b00      	cmp	r3, #0
 8003154:	d10a      	bne.n	800316c <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003156:	6878      	ldr	r0, [r7, #4]
 8003158:	f7ff ff89 	bl	800306e <HAL_RTC_WaitForSynchro>
 800315c:	4603      	mov	r3, r0
 800315e:	2b00      	cmp	r3, #0
 8003160:	d004      	beq.n	800316c <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2204      	movs	r2, #4
 8003166:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800316c:	7bfb      	ldrb	r3, [r7, #15]
}
 800316e:	4618      	mov	r0, r3
 8003170:	3710      	adds	r7, #16
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}

08003176 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8003176:	b480      	push	{r7}
 8003178:	b085      	sub	sp, #20
 800317a:	af00      	add	r7, sp, #0
 800317c:	4603      	mov	r3, r0
 800317e:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8003180:	2300      	movs	r3, #0
 8003182:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8003184:	79fb      	ldrb	r3, [r7, #7]
 8003186:	091b      	lsrs	r3, r3, #4
 8003188:	b2db      	uxtb	r3, r3
 800318a:	461a      	mov	r2, r3
 800318c:	0092      	lsls	r2, r2, #2
 800318e:	4413      	add	r3, r2
 8003190:	005b      	lsls	r3, r3, #1
 8003192:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8003194:	79fb      	ldrb	r3, [r7, #7]
 8003196:	f003 030f 	and.w	r3, r3, #15
 800319a:	b2da      	uxtb	r2, r3
 800319c:	7bfb      	ldrb	r3, [r7, #15]
 800319e:	4413      	add	r3, r2
 80031a0:	b2db      	uxtb	r3, r3
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3714      	adds	r7, #20
 80031a6:	46bd      	mov	sp, r7
 80031a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ac:	4770      	bx	lr

080031ae <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80031ae:	b580      	push	{r7, lr}
 80031b0:	b082      	sub	sp, #8
 80031b2:	af00      	add	r7, sp, #0
 80031b4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d101      	bne.n	80031c0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80031bc:	2301      	movs	r3, #1
 80031be:	e041      	b.n	8003244 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031c6:	b2db      	uxtb	r3, r3
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d106      	bne.n	80031da <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2200      	movs	r2, #0
 80031d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80031d4:	6878      	ldr	r0, [r7, #4]
 80031d6:	f000 f839 	bl	800324c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2202      	movs	r2, #2
 80031de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	3304      	adds	r3, #4
 80031ea:	4619      	mov	r1, r3
 80031ec:	4610      	mov	r0, r2
 80031ee:	f000 f9b5 	bl	800355c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2201      	movs	r2, #1
 80031f6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2201      	movs	r2, #1
 80031fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2201      	movs	r2, #1
 8003206:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2201      	movs	r2, #1
 800320e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2201      	movs	r2, #1
 8003216:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2201      	movs	r2, #1
 800321e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2201      	movs	r2, #1
 8003226:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2201      	movs	r2, #1
 800322e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2201      	movs	r2, #1
 8003236:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2201      	movs	r2, #1
 800323e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003242:	2300      	movs	r3, #0
}
 8003244:	4618      	mov	r0, r3
 8003246:	3708      	adds	r7, #8
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}

0800324c <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800324c:	b480      	push	{r7}
 800324e:	b083      	sub	sp, #12
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003254:	bf00      	nop
 8003256:	370c      	adds	r7, #12
 8003258:	46bd      	mov	sp, r7
 800325a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325e:	4770      	bx	lr

08003260 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003260:	b480      	push	{r7}
 8003262:	b085      	sub	sp, #20
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800326e:	b2db      	uxtb	r3, r3
 8003270:	2b01      	cmp	r3, #1
 8003272:	d001      	beq.n	8003278 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003274:	2301      	movs	r3, #1
 8003276:	e035      	b.n	80032e4 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2202      	movs	r2, #2
 800327c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	68da      	ldr	r2, [r3, #12]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f042 0201 	orr.w	r2, r2, #1
 800328e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a16      	ldr	r2, [pc, #88]	; (80032f0 <HAL_TIM_Base_Start_IT+0x90>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d009      	beq.n	80032ae <HAL_TIM_Base_Start_IT+0x4e>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a15      	ldr	r2, [pc, #84]	; (80032f4 <HAL_TIM_Base_Start_IT+0x94>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d004      	beq.n	80032ae <HAL_TIM_Base_Start_IT+0x4e>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a13      	ldr	r2, [pc, #76]	; (80032f8 <HAL_TIM_Base_Start_IT+0x98>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d111      	bne.n	80032d2 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	f003 0307 	and.w	r3, r3, #7
 80032b8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	2b06      	cmp	r3, #6
 80032be:	d010      	beq.n	80032e2 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f042 0201 	orr.w	r2, r2, #1
 80032ce:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032d0:	e007      	b.n	80032e2 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f042 0201 	orr.w	r2, r2, #1
 80032e0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80032e2:	2300      	movs	r3, #0
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	3714      	adds	r7, #20
 80032e8:	46bd      	mov	sp, r7
 80032ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ee:	4770      	bx	lr
 80032f0:	40010000 	.word	0x40010000
 80032f4:	40000c00 	.word	0x40000c00
 80032f8:	40014000 	.word	0x40014000

080032fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b082      	sub	sp, #8
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	691b      	ldr	r3, [r3, #16]
 800330a:	f003 0302 	and.w	r3, r3, #2
 800330e:	2b02      	cmp	r3, #2
 8003310:	d122      	bne.n	8003358 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	68db      	ldr	r3, [r3, #12]
 8003318:	f003 0302 	and.w	r3, r3, #2
 800331c:	2b02      	cmp	r3, #2
 800331e:	d11b      	bne.n	8003358 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f06f 0202 	mvn.w	r2, #2
 8003328:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2201      	movs	r2, #1
 800332e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	699b      	ldr	r3, [r3, #24]
 8003336:	f003 0303 	and.w	r3, r3, #3
 800333a:	2b00      	cmp	r3, #0
 800333c:	d003      	beq.n	8003346 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	f000 f8ee 	bl	8003520 <HAL_TIM_IC_CaptureCallback>
 8003344:	e005      	b.n	8003352 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	f000 f8e0 	bl	800350c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800334c:	6878      	ldr	r0, [r7, #4]
 800334e:	f000 f8f1 	bl	8003534 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2200      	movs	r2, #0
 8003356:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	691b      	ldr	r3, [r3, #16]
 800335e:	f003 0304 	and.w	r3, r3, #4
 8003362:	2b04      	cmp	r3, #4
 8003364:	d122      	bne.n	80033ac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	f003 0304 	and.w	r3, r3, #4
 8003370:	2b04      	cmp	r3, #4
 8003372:	d11b      	bne.n	80033ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f06f 0204 	mvn.w	r2, #4
 800337c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2202      	movs	r2, #2
 8003382:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	699b      	ldr	r3, [r3, #24]
 800338a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800338e:	2b00      	cmp	r3, #0
 8003390:	d003      	beq.n	800339a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	f000 f8c4 	bl	8003520 <HAL_TIM_IC_CaptureCallback>
 8003398:	e005      	b.n	80033a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f000 f8b6 	bl	800350c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033a0:	6878      	ldr	r0, [r7, #4]
 80033a2:	f000 f8c7 	bl	8003534 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2200      	movs	r2, #0
 80033aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	691b      	ldr	r3, [r3, #16]
 80033b2:	f003 0308 	and.w	r3, r3, #8
 80033b6:	2b08      	cmp	r3, #8
 80033b8:	d122      	bne.n	8003400 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	68db      	ldr	r3, [r3, #12]
 80033c0:	f003 0308 	and.w	r3, r3, #8
 80033c4:	2b08      	cmp	r3, #8
 80033c6:	d11b      	bne.n	8003400 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f06f 0208 	mvn.w	r2, #8
 80033d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2204      	movs	r2, #4
 80033d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	69db      	ldr	r3, [r3, #28]
 80033de:	f003 0303 	and.w	r3, r3, #3
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d003      	beq.n	80033ee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f000 f89a 	bl	8003520 <HAL_TIM_IC_CaptureCallback>
 80033ec:	e005      	b.n	80033fa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	f000 f88c 	bl	800350c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033f4:	6878      	ldr	r0, [r7, #4]
 80033f6:	f000 f89d 	bl	8003534 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2200      	movs	r2, #0
 80033fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	691b      	ldr	r3, [r3, #16]
 8003406:	f003 0310 	and.w	r3, r3, #16
 800340a:	2b10      	cmp	r3, #16
 800340c:	d122      	bne.n	8003454 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	68db      	ldr	r3, [r3, #12]
 8003414:	f003 0310 	and.w	r3, r3, #16
 8003418:	2b10      	cmp	r3, #16
 800341a:	d11b      	bne.n	8003454 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f06f 0210 	mvn.w	r2, #16
 8003424:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2208      	movs	r2, #8
 800342a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	69db      	ldr	r3, [r3, #28]
 8003432:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003436:	2b00      	cmp	r3, #0
 8003438:	d003      	beq.n	8003442 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f000 f870 	bl	8003520 <HAL_TIM_IC_CaptureCallback>
 8003440:	e005      	b.n	800344e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	f000 f862 	bl	800350c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003448:	6878      	ldr	r0, [r7, #4]
 800344a:	f000 f873 	bl	8003534 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2200      	movs	r2, #0
 8003452:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	691b      	ldr	r3, [r3, #16]
 800345a:	f003 0301 	and.w	r3, r3, #1
 800345e:	2b01      	cmp	r3, #1
 8003460:	d10e      	bne.n	8003480 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	68db      	ldr	r3, [r3, #12]
 8003468:	f003 0301 	and.w	r3, r3, #1
 800346c:	2b01      	cmp	r3, #1
 800346e:	d107      	bne.n	8003480 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f06f 0201 	mvn.w	r2, #1
 8003478:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	f7fd fa3a 	bl	80008f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	691b      	ldr	r3, [r3, #16]
 8003486:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800348a:	2b80      	cmp	r3, #128	; 0x80
 800348c:	d10e      	bne.n	80034ac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	68db      	ldr	r3, [r3, #12]
 8003494:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003498:	2b80      	cmp	r3, #128	; 0x80
 800349a:	d107      	bne.n	80034ac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80034a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80034a6:	6878      	ldr	r0, [r7, #4]
 80034a8:	f000 f8c0 	bl	800362c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	691b      	ldr	r3, [r3, #16]
 80034b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034b6:	2b40      	cmp	r3, #64	; 0x40
 80034b8:	d10e      	bne.n	80034d8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	68db      	ldr	r3, [r3, #12]
 80034c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034c4:	2b40      	cmp	r3, #64	; 0x40
 80034c6:	d107      	bne.n	80034d8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80034d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	f000 f838 	bl	8003548 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	691b      	ldr	r3, [r3, #16]
 80034de:	f003 0320 	and.w	r3, r3, #32
 80034e2:	2b20      	cmp	r3, #32
 80034e4:	d10e      	bne.n	8003504 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	68db      	ldr	r3, [r3, #12]
 80034ec:	f003 0320 	and.w	r3, r3, #32
 80034f0:	2b20      	cmp	r3, #32
 80034f2:	d107      	bne.n	8003504 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f06f 0220 	mvn.w	r2, #32
 80034fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f000 f88a 	bl	8003618 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003504:	bf00      	nop
 8003506:	3708      	adds	r7, #8
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}

0800350c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800350c:	b480      	push	{r7}
 800350e:	b083      	sub	sp, #12
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003514:	bf00      	nop
 8003516:	370c      	adds	r7, #12
 8003518:	46bd      	mov	sp, r7
 800351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351e:	4770      	bx	lr

08003520 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003520:	b480      	push	{r7}
 8003522:	b083      	sub	sp, #12
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003528:	bf00      	nop
 800352a:	370c      	adds	r7, #12
 800352c:	46bd      	mov	sp, r7
 800352e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003532:	4770      	bx	lr

08003534 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003534:	b480      	push	{r7}
 8003536:	b083      	sub	sp, #12
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800353c:	bf00      	nop
 800353e:	370c      	adds	r7, #12
 8003540:	46bd      	mov	sp, r7
 8003542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003546:	4770      	bx	lr

08003548 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003548:	b480      	push	{r7}
 800354a:	b083      	sub	sp, #12
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003550:	bf00      	nop
 8003552:	370c      	adds	r7, #12
 8003554:	46bd      	mov	sp, r7
 8003556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355a:	4770      	bx	lr

0800355c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800355c:	b480      	push	{r7}
 800355e:	b085      	sub	sp, #20
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
 8003564:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	4a26      	ldr	r2, [pc, #152]	; (8003608 <TIM_Base_SetConfig+0xac>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d003      	beq.n	800357c <TIM_Base_SetConfig+0x20>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	4a25      	ldr	r2, [pc, #148]	; (800360c <TIM_Base_SetConfig+0xb0>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d108      	bne.n	800358e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003582:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	68fa      	ldr	r2, [r7, #12]
 800358a:	4313      	orrs	r3, r2
 800358c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	4a1d      	ldr	r2, [pc, #116]	; (8003608 <TIM_Base_SetConfig+0xac>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d00b      	beq.n	80035ae <TIM_Base_SetConfig+0x52>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	4a1c      	ldr	r2, [pc, #112]	; (800360c <TIM_Base_SetConfig+0xb0>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d007      	beq.n	80035ae <TIM_Base_SetConfig+0x52>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	4a1b      	ldr	r2, [pc, #108]	; (8003610 <TIM_Base_SetConfig+0xb4>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d003      	beq.n	80035ae <TIM_Base_SetConfig+0x52>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	4a1a      	ldr	r2, [pc, #104]	; (8003614 <TIM_Base_SetConfig+0xb8>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d108      	bne.n	80035c0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	68db      	ldr	r3, [r3, #12]
 80035ba:	68fa      	ldr	r2, [r7, #12]
 80035bc:	4313      	orrs	r3, r2
 80035be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	695b      	ldr	r3, [r3, #20]
 80035ca:	4313      	orrs	r3, r2
 80035cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	68fa      	ldr	r2, [r7, #12]
 80035d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	689a      	ldr	r2, [r3, #8]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	4a08      	ldr	r2, [pc, #32]	; (8003608 <TIM_Base_SetConfig+0xac>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d103      	bne.n	80035f4 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	691a      	ldr	r2, [r3, #16]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2201      	movs	r2, #1
 80035f8:	615a      	str	r2, [r3, #20]
}
 80035fa:	bf00      	nop
 80035fc:	3714      	adds	r7, #20
 80035fe:	46bd      	mov	sp, r7
 8003600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003604:	4770      	bx	lr
 8003606:	bf00      	nop
 8003608:	40010000 	.word	0x40010000
 800360c:	40000c00 	.word	0x40000c00
 8003610:	40014000 	.word	0x40014000
 8003614:	40014800 	.word	0x40014800

08003618 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003618:	b480      	push	{r7}
 800361a:	b083      	sub	sp, #12
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003620:	bf00      	nop
 8003622:	370c      	adds	r7, #12
 8003624:	46bd      	mov	sp, r7
 8003626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362a:	4770      	bx	lr

0800362c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800362c:	b480      	push	{r7}
 800362e:	b083      	sub	sp, #12
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003634:	bf00      	nop
 8003636:	370c      	adds	r7, #12
 8003638:	46bd      	mov	sp, r7
 800363a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363e:	4770      	bx	lr

08003640 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b082      	sub	sp, #8
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d101      	bne.n	8003652 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	e03f      	b.n	80036d2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003658:	b2db      	uxtb	r3, r3
 800365a:	2b00      	cmp	r3, #0
 800365c:	d106      	bne.n	800366c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2200      	movs	r2, #0
 8003662:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f7fd fe28 	bl	80012bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2224      	movs	r2, #36	; 0x24
 8003670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	68da      	ldr	r2, [r3, #12]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003682:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003684:	6878      	ldr	r0, [r7, #4]
 8003686:	f000 fe81 	bl	800438c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	691a      	ldr	r2, [r3, #16]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003698:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	695a      	ldr	r2, [r3, #20]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80036a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	68da      	ldr	r2, [r3, #12]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80036b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2200      	movs	r2, #0
 80036be:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2220      	movs	r2, #32
 80036c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2220      	movs	r2, #32
 80036cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80036d0:	2300      	movs	r3, #0
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	3708      	adds	r7, #8
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}

080036da <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036da:	b580      	push	{r7, lr}
 80036dc:	b08a      	sub	sp, #40	; 0x28
 80036de:	af02      	add	r7, sp, #8
 80036e0:	60f8      	str	r0, [r7, #12]
 80036e2:	60b9      	str	r1, [r7, #8]
 80036e4:	603b      	str	r3, [r7, #0]
 80036e6:	4613      	mov	r3, r2
 80036e8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80036ea:	2300      	movs	r3, #0
 80036ec:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036f4:	b2db      	uxtb	r3, r3
 80036f6:	2b20      	cmp	r3, #32
 80036f8:	d17c      	bne.n	80037f4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d002      	beq.n	8003706 <HAL_UART_Transmit+0x2c>
 8003700:	88fb      	ldrh	r3, [r7, #6]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d101      	bne.n	800370a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	e075      	b.n	80037f6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003710:	2b01      	cmp	r3, #1
 8003712:	d101      	bne.n	8003718 <HAL_UART_Transmit+0x3e>
 8003714:	2302      	movs	r3, #2
 8003716:	e06e      	b.n	80037f6 <HAL_UART_Transmit+0x11c>
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2201      	movs	r2, #1
 800371c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2200      	movs	r2, #0
 8003724:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2221      	movs	r2, #33	; 0x21
 800372a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800372e:	f7fd fe75 	bl	800141c <HAL_GetTick>
 8003732:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	88fa      	ldrh	r2, [r7, #6]
 8003738:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	88fa      	ldrh	r2, [r7, #6]
 800373e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003748:	d108      	bne.n	800375c <HAL_UART_Transmit+0x82>
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	691b      	ldr	r3, [r3, #16]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d104      	bne.n	800375c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003752:	2300      	movs	r3, #0
 8003754:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	61bb      	str	r3, [r7, #24]
 800375a:	e003      	b.n	8003764 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003760:	2300      	movs	r3, #0
 8003762:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2200      	movs	r2, #0
 8003768:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800376c:	e02a      	b.n	80037c4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	9300      	str	r3, [sp, #0]
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	2200      	movs	r2, #0
 8003776:	2180      	movs	r1, #128	; 0x80
 8003778:	68f8      	ldr	r0, [r7, #12]
 800377a:	f000 fbc1 	bl	8003f00 <UART_WaitOnFlagUntilTimeout>
 800377e:	4603      	mov	r3, r0
 8003780:	2b00      	cmp	r3, #0
 8003782:	d001      	beq.n	8003788 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003784:	2303      	movs	r3, #3
 8003786:	e036      	b.n	80037f6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003788:	69fb      	ldr	r3, [r7, #28]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d10b      	bne.n	80037a6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800378e:	69bb      	ldr	r3, [r7, #24]
 8003790:	881b      	ldrh	r3, [r3, #0]
 8003792:	461a      	mov	r2, r3
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800379c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800379e:	69bb      	ldr	r3, [r7, #24]
 80037a0:	3302      	adds	r3, #2
 80037a2:	61bb      	str	r3, [r7, #24]
 80037a4:	e007      	b.n	80037b6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80037a6:	69fb      	ldr	r3, [r7, #28]
 80037a8:	781a      	ldrb	r2, [r3, #0]
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80037b0:	69fb      	ldr	r3, [r7, #28]
 80037b2:	3301      	adds	r3, #1
 80037b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80037ba:	b29b      	uxth	r3, r3
 80037bc:	3b01      	subs	r3, #1
 80037be:	b29a      	uxth	r2, r3
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80037c8:	b29b      	uxth	r3, r3
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d1cf      	bne.n	800376e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	9300      	str	r3, [sp, #0]
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	2200      	movs	r2, #0
 80037d6:	2140      	movs	r1, #64	; 0x40
 80037d8:	68f8      	ldr	r0, [r7, #12]
 80037da:	f000 fb91 	bl	8003f00 <UART_WaitOnFlagUntilTimeout>
 80037de:	4603      	mov	r3, r0
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d001      	beq.n	80037e8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80037e4:	2303      	movs	r3, #3
 80037e6:	e006      	b.n	80037f6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2220      	movs	r2, #32
 80037ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80037f0:	2300      	movs	r3, #0
 80037f2:	e000      	b.n	80037f6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80037f4:	2302      	movs	r3, #2
  }
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	3720      	adds	r7, #32
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}

080037fe <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037fe:	b580      	push	{r7, lr}
 8003800:	b08a      	sub	sp, #40	; 0x28
 8003802:	af02      	add	r7, sp, #8
 8003804:	60f8      	str	r0, [r7, #12]
 8003806:	60b9      	str	r1, [r7, #8]
 8003808:	603b      	str	r3, [r7, #0]
 800380a:	4613      	mov	r3, r2
 800380c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800380e:	2300      	movs	r3, #0
 8003810:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003818:	b2db      	uxtb	r3, r3
 800381a:	2b20      	cmp	r3, #32
 800381c:	f040 808c 	bne.w	8003938 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d002      	beq.n	800382c <HAL_UART_Receive+0x2e>
 8003826:	88fb      	ldrh	r3, [r7, #6]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d101      	bne.n	8003830 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	e084      	b.n	800393a <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003836:	2b01      	cmp	r3, #1
 8003838:	d101      	bne.n	800383e <HAL_UART_Receive+0x40>
 800383a:	2302      	movs	r3, #2
 800383c:	e07d      	b.n	800393a <HAL_UART_Receive+0x13c>
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2201      	movs	r2, #1
 8003842:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2200      	movs	r2, #0
 800384a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2222      	movs	r2, #34	; 0x22
 8003850:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2200      	movs	r2, #0
 8003858:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800385a:	f7fd fddf 	bl	800141c <HAL_GetTick>
 800385e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	88fa      	ldrh	r2, [r7, #6]
 8003864:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	88fa      	ldrh	r2, [r7, #6]
 800386a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003874:	d108      	bne.n	8003888 <HAL_UART_Receive+0x8a>
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	691b      	ldr	r3, [r3, #16]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d104      	bne.n	8003888 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800387e:	2300      	movs	r3, #0
 8003880:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	61bb      	str	r3, [r7, #24]
 8003886:	e003      	b.n	8003890 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800388c:	2300      	movs	r3, #0
 800388e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2200      	movs	r2, #0
 8003894:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003898:	e043      	b.n	8003922 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	9300      	str	r3, [sp, #0]
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	2200      	movs	r2, #0
 80038a2:	2120      	movs	r1, #32
 80038a4:	68f8      	ldr	r0, [r7, #12]
 80038a6:	f000 fb2b 	bl	8003f00 <UART_WaitOnFlagUntilTimeout>
 80038aa:	4603      	mov	r3, r0
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d001      	beq.n	80038b4 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80038b0:	2303      	movs	r3, #3
 80038b2:	e042      	b.n	800393a <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80038b4:	69fb      	ldr	r3, [r7, #28]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d10c      	bne.n	80038d4 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	b29b      	uxth	r3, r3
 80038c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038c6:	b29a      	uxth	r2, r3
 80038c8:	69bb      	ldr	r3, [r7, #24]
 80038ca:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80038cc:	69bb      	ldr	r3, [r7, #24]
 80038ce:	3302      	adds	r3, #2
 80038d0:	61bb      	str	r3, [r7, #24]
 80038d2:	e01f      	b.n	8003914 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038dc:	d007      	beq.n	80038ee <HAL_UART_Receive+0xf0>
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d10a      	bne.n	80038fc <HAL_UART_Receive+0xfe>
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	691b      	ldr	r3, [r3, #16]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d106      	bne.n	80038fc <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	b2da      	uxtb	r2, r3
 80038f6:	69fb      	ldr	r3, [r7, #28]
 80038f8:	701a      	strb	r2, [r3, #0]
 80038fa:	e008      	b.n	800390e <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	b2db      	uxtb	r3, r3
 8003904:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003908:	b2da      	uxtb	r2, r3
 800390a:	69fb      	ldr	r3, [r7, #28]
 800390c:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800390e:	69fb      	ldr	r3, [r7, #28]
 8003910:	3301      	adds	r3, #1
 8003912:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003918:	b29b      	uxth	r3, r3
 800391a:	3b01      	subs	r3, #1
 800391c:	b29a      	uxth	r2, r3
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003926:	b29b      	uxth	r3, r3
 8003928:	2b00      	cmp	r3, #0
 800392a:	d1b6      	bne.n	800389a <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2220      	movs	r2, #32
 8003930:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8003934:	2300      	movs	r3, #0
 8003936:	e000      	b.n	800393a <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8003938:	2302      	movs	r3, #2
  }
}
 800393a:	4618      	mov	r0, r3
 800393c:	3720      	adds	r7, #32
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}

08003942 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003942:	b580      	push	{r7, lr}
 8003944:	b084      	sub	sp, #16
 8003946:	af00      	add	r7, sp, #0
 8003948:	60f8      	str	r0, [r7, #12]
 800394a:	60b9      	str	r1, [r7, #8]
 800394c:	4613      	mov	r3, r2
 800394e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003956:	b2db      	uxtb	r3, r3
 8003958:	2b20      	cmp	r3, #32
 800395a:	d11d      	bne.n	8003998 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d002      	beq.n	8003968 <HAL_UART_Receive_IT+0x26>
 8003962:	88fb      	ldrh	r3, [r7, #6]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d101      	bne.n	800396c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003968:	2301      	movs	r3, #1
 800396a:	e016      	b.n	800399a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003972:	2b01      	cmp	r3, #1
 8003974:	d101      	bne.n	800397a <HAL_UART_Receive_IT+0x38>
 8003976:	2302      	movs	r3, #2
 8003978:	e00f      	b.n	800399a <HAL_UART_Receive_IT+0x58>
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2201      	movs	r2, #1
 800397e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2200      	movs	r2, #0
 8003986:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003988:	88fb      	ldrh	r3, [r7, #6]
 800398a:	461a      	mov	r2, r3
 800398c:	68b9      	ldr	r1, [r7, #8]
 800398e:	68f8      	ldr	r0, [r7, #12]
 8003990:	f000 fb24 	bl	8003fdc <UART_Start_Receive_IT>
 8003994:	4603      	mov	r3, r0
 8003996:	e000      	b.n	800399a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003998:	2302      	movs	r3, #2
  }
}
 800399a:	4618      	mov	r0, r3
 800399c:	3710      	adds	r7, #16
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}
	...

080039a4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b0ba      	sub	sp, #232	; 0xe8
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	68db      	ldr	r3, [r3, #12]
 80039bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	695b      	ldr	r3, [r3, #20]
 80039c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80039ca:	2300      	movs	r3, #0
 80039cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80039d0:	2300      	movs	r3, #0
 80039d2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80039d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039da:	f003 030f 	and.w	r3, r3, #15
 80039de:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80039e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d10f      	bne.n	8003a0a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80039ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039ee:	f003 0320 	and.w	r3, r3, #32
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d009      	beq.n	8003a0a <HAL_UART_IRQHandler+0x66>
 80039f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039fa:	f003 0320 	and.w	r3, r3, #32
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d003      	beq.n	8003a0a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	f000 fc07 	bl	8004216 <UART_Receive_IT>
      return;
 8003a08:	e256      	b.n	8003eb8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003a0a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	f000 80de 	beq.w	8003bd0 <HAL_UART_IRQHandler+0x22c>
 8003a14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a18:	f003 0301 	and.w	r3, r3, #1
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d106      	bne.n	8003a2e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003a20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a24:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	f000 80d1 	beq.w	8003bd0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003a2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a32:	f003 0301 	and.w	r3, r3, #1
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d00b      	beq.n	8003a52 <HAL_UART_IRQHandler+0xae>
 8003a3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d005      	beq.n	8003a52 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a4a:	f043 0201 	orr.w	r2, r3, #1
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a56:	f003 0304 	and.w	r3, r3, #4
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d00b      	beq.n	8003a76 <HAL_UART_IRQHandler+0xd2>
 8003a5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a62:	f003 0301 	and.w	r3, r3, #1
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d005      	beq.n	8003a76 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a6e:	f043 0202 	orr.w	r2, r3, #2
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a7a:	f003 0302 	and.w	r3, r3, #2
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d00b      	beq.n	8003a9a <HAL_UART_IRQHandler+0xf6>
 8003a82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a86:	f003 0301 	and.w	r3, r3, #1
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d005      	beq.n	8003a9a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a92:	f043 0204 	orr.w	r2, r3, #4
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003a9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a9e:	f003 0308 	and.w	r3, r3, #8
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d011      	beq.n	8003aca <HAL_UART_IRQHandler+0x126>
 8003aa6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003aaa:	f003 0320 	and.w	r3, r3, #32
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d105      	bne.n	8003abe <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003ab2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ab6:	f003 0301 	and.w	r3, r3, #1
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d005      	beq.n	8003aca <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac2:	f043 0208 	orr.w	r2, r3, #8
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	f000 81ed 	beq.w	8003eae <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003ad4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ad8:	f003 0320 	and.w	r3, r3, #32
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d008      	beq.n	8003af2 <HAL_UART_IRQHandler+0x14e>
 8003ae0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ae4:	f003 0320 	and.w	r3, r3, #32
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d002      	beq.n	8003af2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003aec:	6878      	ldr	r0, [r7, #4]
 8003aee:	f000 fb92 	bl	8004216 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	695b      	ldr	r3, [r3, #20]
 8003af8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003afc:	2b40      	cmp	r3, #64	; 0x40
 8003afe:	bf0c      	ite	eq
 8003b00:	2301      	moveq	r3, #1
 8003b02:	2300      	movne	r3, #0
 8003b04:	b2db      	uxtb	r3, r3
 8003b06:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b0e:	f003 0308 	and.w	r3, r3, #8
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d103      	bne.n	8003b1e <HAL_UART_IRQHandler+0x17a>
 8003b16:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d04f      	beq.n	8003bbe <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	f000 fa9a 	bl	8004058 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	695b      	ldr	r3, [r3, #20]
 8003b2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b2e:	2b40      	cmp	r3, #64	; 0x40
 8003b30:	d141      	bne.n	8003bb6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	3314      	adds	r3, #20
 8003b38:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b3c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003b40:	e853 3f00 	ldrex	r3, [r3]
 8003b44:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003b48:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003b4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b50:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	3314      	adds	r3, #20
 8003b5a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003b5e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003b62:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b66:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003b6a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003b6e:	e841 2300 	strex	r3, r2, [r1]
 8003b72:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003b76:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d1d9      	bne.n	8003b32 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d013      	beq.n	8003bae <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b8a:	4a7d      	ldr	r2, [pc, #500]	; (8003d80 <HAL_UART_IRQHandler+0x3dc>)
 8003b8c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b92:	4618      	mov	r0, r3
 8003b94:	f7fe f94e 	bl	8001e34 <HAL_DMA_Abort_IT>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d016      	beq.n	8003bcc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ba2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ba4:	687a      	ldr	r2, [r7, #4]
 8003ba6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003ba8:	4610      	mov	r0, r2
 8003baa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bac:	e00e      	b.n	8003bcc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	f000 f990 	bl	8003ed4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bb4:	e00a      	b.n	8003bcc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	f000 f98c 	bl	8003ed4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bbc:	e006      	b.n	8003bcc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	f000 f988 	bl	8003ed4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003bca:	e170      	b.n	8003eae <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bcc:	bf00      	nop
    return;
 8003bce:	e16e      	b.n	8003eae <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bd4:	2b01      	cmp	r3, #1
 8003bd6:	f040 814a 	bne.w	8003e6e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003bda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bde:	f003 0310 	and.w	r3, r3, #16
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	f000 8143 	beq.w	8003e6e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003be8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003bec:	f003 0310 	and.w	r3, r3, #16
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	f000 813c 	beq.w	8003e6e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	60bb      	str	r3, [r7, #8]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	60bb      	str	r3, [r7, #8]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	60bb      	str	r3, [r7, #8]
 8003c0a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	695b      	ldr	r3, [r3, #20]
 8003c12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c16:	2b40      	cmp	r3, #64	; 0x40
 8003c18:	f040 80b4 	bne.w	8003d84 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003c28:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	f000 8140 	beq.w	8003eb2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003c36:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003c3a:	429a      	cmp	r2, r3
 8003c3c:	f080 8139 	bcs.w	8003eb2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003c46:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c4c:	69db      	ldr	r3, [r3, #28]
 8003c4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c52:	f000 8088 	beq.w	8003d66 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	330c      	adds	r3, #12
 8003c5c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c60:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003c64:	e853 3f00 	ldrex	r3, [r3]
 8003c68:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003c6c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003c70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c74:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	330c      	adds	r3, #12
 8003c7e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003c82:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003c86:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c8a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003c8e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003c92:	e841 2300 	strex	r3, r2, [r1]
 8003c96:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003c9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d1d9      	bne.n	8003c56 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	3314      	adds	r3, #20
 8003ca8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003caa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003cac:	e853 3f00 	ldrex	r3, [r3]
 8003cb0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003cb2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003cb4:	f023 0301 	bic.w	r3, r3, #1
 8003cb8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	3314      	adds	r3, #20
 8003cc2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003cc6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003cca:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ccc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003cce:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003cd2:	e841 2300 	strex	r3, r2, [r1]
 8003cd6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003cd8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d1e1      	bne.n	8003ca2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	3314      	adds	r3, #20
 8003ce4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ce6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ce8:	e853 3f00 	ldrex	r3, [r3]
 8003cec:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003cee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003cf0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003cf4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	3314      	adds	r3, #20
 8003cfe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003d02:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003d04:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d06:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003d08:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003d0a:	e841 2300 	strex	r3, r2, [r1]
 8003d0e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003d10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d1e3      	bne.n	8003cde <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2220      	movs	r2, #32
 8003d1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2200      	movs	r2, #0
 8003d22:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	330c      	adds	r3, #12
 8003d2a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d2e:	e853 3f00 	ldrex	r3, [r3]
 8003d32:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003d34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d36:	f023 0310 	bic.w	r3, r3, #16
 8003d3a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	330c      	adds	r3, #12
 8003d44:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003d48:	65ba      	str	r2, [r7, #88]	; 0x58
 8003d4a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d4c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003d4e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003d50:	e841 2300 	strex	r3, r2, [r1]
 8003d54:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003d56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d1e3      	bne.n	8003d24 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d60:	4618      	mov	r0, r3
 8003d62:	f7fd fff7 	bl	8001d54 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d6e:	b29b      	uxth	r3, r3
 8003d70:	1ad3      	subs	r3, r2, r3
 8003d72:	b29b      	uxth	r3, r3
 8003d74:	4619      	mov	r1, r3
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	f000 f8b6 	bl	8003ee8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003d7c:	e099      	b.n	8003eb2 <HAL_UART_IRQHandler+0x50e>
 8003d7e:	bf00      	nop
 8003d80:	0800411f 	.word	0x0800411f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d8c:	b29b      	uxth	r3, r3
 8003d8e:	1ad3      	subs	r3, r2, r3
 8003d90:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d98:	b29b      	uxth	r3, r3
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	f000 808b 	beq.w	8003eb6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003da0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	f000 8086 	beq.w	8003eb6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	330c      	adds	r3, #12
 8003db0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003db4:	e853 3f00 	ldrex	r3, [r3]
 8003db8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003dba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dbc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003dc0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	330c      	adds	r3, #12
 8003dca:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003dce:	647a      	str	r2, [r7, #68]	; 0x44
 8003dd0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dd2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003dd4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003dd6:	e841 2300 	strex	r3, r2, [r1]
 8003dda:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003ddc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d1e3      	bne.n	8003daa <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	3314      	adds	r3, #20
 8003de8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dec:	e853 3f00 	ldrex	r3, [r3]
 8003df0:	623b      	str	r3, [r7, #32]
   return(result);
 8003df2:	6a3b      	ldr	r3, [r7, #32]
 8003df4:	f023 0301 	bic.w	r3, r3, #1
 8003df8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	3314      	adds	r3, #20
 8003e02:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003e06:	633a      	str	r2, [r7, #48]	; 0x30
 8003e08:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e0a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003e0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e0e:	e841 2300 	strex	r3, r2, [r1]
 8003e12:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d1e3      	bne.n	8003de2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2220      	movs	r2, #32
 8003e1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2200      	movs	r2, #0
 8003e26:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	330c      	adds	r3, #12
 8003e2e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	e853 3f00 	ldrex	r3, [r3]
 8003e36:	60fb      	str	r3, [r7, #12]
   return(result);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	f023 0310 	bic.w	r3, r3, #16
 8003e3e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	330c      	adds	r3, #12
 8003e48:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003e4c:	61fa      	str	r2, [r7, #28]
 8003e4e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e50:	69b9      	ldr	r1, [r7, #24]
 8003e52:	69fa      	ldr	r2, [r7, #28]
 8003e54:	e841 2300 	strex	r3, r2, [r1]
 8003e58:	617b      	str	r3, [r7, #20]
   return(result);
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d1e3      	bne.n	8003e28 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003e60:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003e64:	4619      	mov	r1, r3
 8003e66:	6878      	ldr	r0, [r7, #4]
 8003e68:	f000 f83e 	bl	8003ee8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003e6c:	e023      	b.n	8003eb6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003e6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d009      	beq.n	8003e8e <HAL_UART_IRQHandler+0x4ea>
 8003e7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d003      	beq.n	8003e8e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003e86:	6878      	ldr	r0, [r7, #4]
 8003e88:	f000 f95d 	bl	8004146 <UART_Transmit_IT>
    return;
 8003e8c:	e014      	b.n	8003eb8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003e8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d00e      	beq.n	8003eb8 <HAL_UART_IRQHandler+0x514>
 8003e9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d008      	beq.n	8003eb8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f000 f99d 	bl	80041e6 <UART_EndTransmit_IT>
    return;
 8003eac:	e004      	b.n	8003eb8 <HAL_UART_IRQHandler+0x514>
    return;
 8003eae:	bf00      	nop
 8003eb0:	e002      	b.n	8003eb8 <HAL_UART_IRQHandler+0x514>
      return;
 8003eb2:	bf00      	nop
 8003eb4:	e000      	b.n	8003eb8 <HAL_UART_IRQHandler+0x514>
      return;
 8003eb6:	bf00      	nop
  }
}
 8003eb8:	37e8      	adds	r7, #232	; 0xe8
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}
 8003ebe:	bf00      	nop

08003ec0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b083      	sub	sp, #12
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003ec8:	bf00      	nop
 8003eca:	370c      	adds	r7, #12
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed2:	4770      	bx	lr

08003ed4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b083      	sub	sp, #12
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003edc:	bf00      	nop
 8003ede:	370c      	adds	r7, #12
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee6:	4770      	bx	lr

08003ee8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b083      	sub	sp, #12
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
 8003ef0:	460b      	mov	r3, r1
 8003ef2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003ef4:	bf00      	nop
 8003ef6:	370c      	adds	r7, #12
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efe:	4770      	bx	lr

08003f00 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b090      	sub	sp, #64	; 0x40
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	60f8      	str	r0, [r7, #12]
 8003f08:	60b9      	str	r1, [r7, #8]
 8003f0a:	603b      	str	r3, [r7, #0]
 8003f0c:	4613      	mov	r3, r2
 8003f0e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f10:	e050      	b.n	8003fb4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f14:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f18:	d04c      	beq.n	8003fb4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003f1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d007      	beq.n	8003f30 <UART_WaitOnFlagUntilTimeout+0x30>
 8003f20:	f7fd fa7c 	bl	800141c <HAL_GetTick>
 8003f24:	4602      	mov	r2, r0
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	1ad3      	subs	r3, r2, r3
 8003f2a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	d241      	bcs.n	8003fb4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	330c      	adds	r3, #12
 8003f36:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f3a:	e853 3f00 	ldrex	r3, [r3]
 8003f3e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f42:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003f46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	330c      	adds	r3, #12
 8003f4e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003f50:	637a      	str	r2, [r7, #52]	; 0x34
 8003f52:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f54:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003f56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f58:	e841 2300 	strex	r3, r2, [r1]
 8003f5c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d1e5      	bne.n	8003f30 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	3314      	adds	r3, #20
 8003f6a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	e853 3f00 	ldrex	r3, [r3]
 8003f72:	613b      	str	r3, [r7, #16]
   return(result);
 8003f74:	693b      	ldr	r3, [r7, #16]
 8003f76:	f023 0301 	bic.w	r3, r3, #1
 8003f7a:	63bb      	str	r3, [r7, #56]	; 0x38
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	3314      	adds	r3, #20
 8003f82:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003f84:	623a      	str	r2, [r7, #32]
 8003f86:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f88:	69f9      	ldr	r1, [r7, #28]
 8003f8a:	6a3a      	ldr	r2, [r7, #32]
 8003f8c:	e841 2300 	strex	r3, r2, [r1]
 8003f90:	61bb      	str	r3, [r7, #24]
   return(result);
 8003f92:	69bb      	ldr	r3, [r7, #24]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d1e5      	bne.n	8003f64 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	2220      	movs	r2, #32
 8003f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	2220      	movs	r2, #32
 8003fa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2200      	movs	r2, #0
 8003fac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003fb0:	2303      	movs	r3, #3
 8003fb2:	e00f      	b.n	8003fd4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	681a      	ldr	r2, [r3, #0]
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	4013      	ands	r3, r2
 8003fbe:	68ba      	ldr	r2, [r7, #8]
 8003fc0:	429a      	cmp	r2, r3
 8003fc2:	bf0c      	ite	eq
 8003fc4:	2301      	moveq	r3, #1
 8003fc6:	2300      	movne	r3, #0
 8003fc8:	b2db      	uxtb	r3, r3
 8003fca:	461a      	mov	r2, r3
 8003fcc:	79fb      	ldrb	r3, [r7, #7]
 8003fce:	429a      	cmp	r2, r3
 8003fd0:	d09f      	beq.n	8003f12 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003fd2:	2300      	movs	r3, #0
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	3740      	adds	r7, #64	; 0x40
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}

08003fdc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b085      	sub	sp, #20
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	60f8      	str	r0, [r7, #12]
 8003fe4:	60b9      	str	r1, [r7, #8]
 8003fe6:	4613      	mov	r3, r2
 8003fe8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	68ba      	ldr	r2, [r7, #8]
 8003fee:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	88fa      	ldrh	r2, [r7, #6]
 8003ff4:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	88fa      	ldrh	r2, [r7, #6]
 8003ffa:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	2200      	movs	r2, #0
 8004000:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	2222      	movs	r2, #34	; 0x22
 8004006:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2200      	movs	r2, #0
 800400e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	691b      	ldr	r3, [r3, #16]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d007      	beq.n	800402a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	68da      	ldr	r2, [r3, #12]
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004028:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	695a      	ldr	r2, [r3, #20]
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f042 0201 	orr.w	r2, r2, #1
 8004038:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	68da      	ldr	r2, [r3, #12]
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f042 0220 	orr.w	r2, r2, #32
 8004048:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800404a:	2300      	movs	r3, #0
}
 800404c:	4618      	mov	r0, r3
 800404e:	3714      	adds	r7, #20
 8004050:	46bd      	mov	sp, r7
 8004052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004056:	4770      	bx	lr

08004058 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004058:	b480      	push	{r7}
 800405a:	b095      	sub	sp, #84	; 0x54
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	330c      	adds	r3, #12
 8004066:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004068:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800406a:	e853 3f00 	ldrex	r3, [r3]
 800406e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004072:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004076:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	330c      	adds	r3, #12
 800407e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004080:	643a      	str	r2, [r7, #64]	; 0x40
 8004082:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004084:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004086:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004088:	e841 2300 	strex	r3, r2, [r1]
 800408c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800408e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004090:	2b00      	cmp	r3, #0
 8004092:	d1e5      	bne.n	8004060 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	3314      	adds	r3, #20
 800409a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800409c:	6a3b      	ldr	r3, [r7, #32]
 800409e:	e853 3f00 	ldrex	r3, [r3]
 80040a2:	61fb      	str	r3, [r7, #28]
   return(result);
 80040a4:	69fb      	ldr	r3, [r7, #28]
 80040a6:	f023 0301 	bic.w	r3, r3, #1
 80040aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	3314      	adds	r3, #20
 80040b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80040b4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80040b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80040ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040bc:	e841 2300 	strex	r3, r2, [r1]
 80040c0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80040c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d1e5      	bne.n	8004094 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040cc:	2b01      	cmp	r3, #1
 80040ce:	d119      	bne.n	8004104 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	330c      	adds	r3, #12
 80040d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	e853 3f00 	ldrex	r3, [r3]
 80040de:	60bb      	str	r3, [r7, #8]
   return(result);
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	f023 0310 	bic.w	r3, r3, #16
 80040e6:	647b      	str	r3, [r7, #68]	; 0x44
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	330c      	adds	r3, #12
 80040ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80040f0:	61ba      	str	r2, [r7, #24]
 80040f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040f4:	6979      	ldr	r1, [r7, #20]
 80040f6:	69ba      	ldr	r2, [r7, #24]
 80040f8:	e841 2300 	strex	r3, r2, [r1]
 80040fc:	613b      	str	r3, [r7, #16]
   return(result);
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d1e5      	bne.n	80040d0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2220      	movs	r2, #32
 8004108:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2200      	movs	r2, #0
 8004110:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004112:	bf00      	nop
 8004114:	3754      	adds	r7, #84	; 0x54
 8004116:	46bd      	mov	sp, r7
 8004118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411c:	4770      	bx	lr

0800411e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800411e:	b580      	push	{r7, lr}
 8004120:	b084      	sub	sp, #16
 8004122:	af00      	add	r7, sp, #0
 8004124:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800412a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	2200      	movs	r2, #0
 8004130:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2200      	movs	r2, #0
 8004136:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004138:	68f8      	ldr	r0, [r7, #12]
 800413a:	f7ff fecb 	bl	8003ed4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800413e:	bf00      	nop
 8004140:	3710      	adds	r7, #16
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}

08004146 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004146:	b480      	push	{r7}
 8004148:	b085      	sub	sp, #20
 800414a:	af00      	add	r7, sp, #0
 800414c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004154:	b2db      	uxtb	r3, r3
 8004156:	2b21      	cmp	r3, #33	; 0x21
 8004158:	d13e      	bne.n	80041d8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	689b      	ldr	r3, [r3, #8]
 800415e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004162:	d114      	bne.n	800418e <UART_Transmit_IT+0x48>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	691b      	ldr	r3, [r3, #16]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d110      	bne.n	800418e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6a1b      	ldr	r3, [r3, #32]
 8004170:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	881b      	ldrh	r3, [r3, #0]
 8004176:	461a      	mov	r2, r3
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004180:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6a1b      	ldr	r3, [r3, #32]
 8004186:	1c9a      	adds	r2, r3, #2
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	621a      	str	r2, [r3, #32]
 800418c:	e008      	b.n	80041a0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6a1b      	ldr	r3, [r3, #32]
 8004192:	1c59      	adds	r1, r3, #1
 8004194:	687a      	ldr	r2, [r7, #4]
 8004196:	6211      	str	r1, [r2, #32]
 8004198:	781a      	ldrb	r2, [r3, #0]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80041a4:	b29b      	uxth	r3, r3
 80041a6:	3b01      	subs	r3, #1
 80041a8:	b29b      	uxth	r3, r3
 80041aa:	687a      	ldr	r2, [r7, #4]
 80041ac:	4619      	mov	r1, r3
 80041ae:	84d1      	strh	r1, [r2, #38]	; 0x26
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d10f      	bne.n	80041d4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	68da      	ldr	r2, [r3, #12]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80041c2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	68da      	ldr	r2, [r3, #12]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80041d2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80041d4:	2300      	movs	r3, #0
 80041d6:	e000      	b.n	80041da <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80041d8:	2302      	movs	r3, #2
  }
}
 80041da:	4618      	mov	r0, r3
 80041dc:	3714      	adds	r7, #20
 80041de:	46bd      	mov	sp, r7
 80041e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e4:	4770      	bx	lr

080041e6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80041e6:	b580      	push	{r7, lr}
 80041e8:	b082      	sub	sp, #8
 80041ea:	af00      	add	r7, sp, #0
 80041ec:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	68da      	ldr	r2, [r3, #12]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041fc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2220      	movs	r2, #32
 8004202:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	f7ff fe5a 	bl	8003ec0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800420c:	2300      	movs	r3, #0
}
 800420e:	4618      	mov	r0, r3
 8004210:	3708      	adds	r7, #8
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}

08004216 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004216:	b580      	push	{r7, lr}
 8004218:	b08c      	sub	sp, #48	; 0x30
 800421a:	af00      	add	r7, sp, #0
 800421c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004224:	b2db      	uxtb	r3, r3
 8004226:	2b22      	cmp	r3, #34	; 0x22
 8004228:	f040 80ab 	bne.w	8004382 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004234:	d117      	bne.n	8004266 <UART_Receive_IT+0x50>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	691b      	ldr	r3, [r3, #16]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d113      	bne.n	8004266 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800423e:	2300      	movs	r3, #0
 8004240:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004246:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	b29b      	uxth	r3, r3
 8004250:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004254:	b29a      	uxth	r2, r3
 8004256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004258:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800425e:	1c9a      	adds	r2, r3, #2
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	629a      	str	r2, [r3, #40]	; 0x28
 8004264:	e026      	b.n	80042b4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800426a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800426c:	2300      	movs	r3, #0
 800426e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004278:	d007      	beq.n	800428a <UART_Receive_IT+0x74>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	689b      	ldr	r3, [r3, #8]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d10a      	bne.n	8004298 <UART_Receive_IT+0x82>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	691b      	ldr	r3, [r3, #16]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d106      	bne.n	8004298 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	b2da      	uxtb	r2, r3
 8004292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004294:	701a      	strb	r2, [r3, #0]
 8004296:	e008      	b.n	80042aa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	b2db      	uxtb	r3, r3
 80042a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80042a4:	b2da      	uxtb	r2, r3
 80042a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042a8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ae:	1c5a      	adds	r2, r3, #1
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80042b8:	b29b      	uxth	r3, r3
 80042ba:	3b01      	subs	r3, #1
 80042bc:	b29b      	uxth	r3, r3
 80042be:	687a      	ldr	r2, [r7, #4]
 80042c0:	4619      	mov	r1, r3
 80042c2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d15a      	bne.n	800437e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	68da      	ldr	r2, [r3, #12]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f022 0220 	bic.w	r2, r2, #32
 80042d6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	68da      	ldr	r2, [r3, #12]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80042e6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	695a      	ldr	r2, [r3, #20]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f022 0201 	bic.w	r2, r2, #1
 80042f6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2220      	movs	r2, #32
 80042fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004304:	2b01      	cmp	r3, #1
 8004306:	d135      	bne.n	8004374 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2200      	movs	r2, #0
 800430c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	330c      	adds	r3, #12
 8004314:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	e853 3f00 	ldrex	r3, [r3]
 800431c:	613b      	str	r3, [r7, #16]
   return(result);
 800431e:	693b      	ldr	r3, [r7, #16]
 8004320:	f023 0310 	bic.w	r3, r3, #16
 8004324:	627b      	str	r3, [r7, #36]	; 0x24
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	330c      	adds	r3, #12
 800432c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800432e:	623a      	str	r2, [r7, #32]
 8004330:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004332:	69f9      	ldr	r1, [r7, #28]
 8004334:	6a3a      	ldr	r2, [r7, #32]
 8004336:	e841 2300 	strex	r3, r2, [r1]
 800433a:	61bb      	str	r3, [r7, #24]
   return(result);
 800433c:	69bb      	ldr	r3, [r7, #24]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d1e5      	bne.n	800430e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f003 0310 	and.w	r3, r3, #16
 800434c:	2b10      	cmp	r3, #16
 800434e:	d10a      	bne.n	8004366 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004350:	2300      	movs	r3, #0
 8004352:	60fb      	str	r3, [r7, #12]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	60fb      	str	r3, [r7, #12]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	60fb      	str	r3, [r7, #12]
 8004364:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800436a:	4619      	mov	r1, r3
 800436c:	6878      	ldr	r0, [r7, #4]
 800436e:	f7ff fdbb 	bl	8003ee8 <HAL_UARTEx_RxEventCallback>
 8004372:	e002      	b.n	800437a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004374:	6878      	ldr	r0, [r7, #4]
 8004376:	f7fc fc27 	bl	8000bc8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800437a:	2300      	movs	r3, #0
 800437c:	e002      	b.n	8004384 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800437e:	2300      	movs	r3, #0
 8004380:	e000      	b.n	8004384 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004382:	2302      	movs	r3, #2
  }
}
 8004384:	4618      	mov	r0, r3
 8004386:	3730      	adds	r7, #48	; 0x30
 8004388:	46bd      	mov	sp, r7
 800438a:	bd80      	pop	{r7, pc}

0800438c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800438c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004390:	b0c0      	sub	sp, #256	; 0x100
 8004392:	af00      	add	r7, sp, #0
 8004394:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004398:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	691b      	ldr	r3, [r3, #16]
 80043a0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80043a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043a8:	68d9      	ldr	r1, [r3, #12]
 80043aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043ae:	681a      	ldr	r2, [r3, #0]
 80043b0:	ea40 0301 	orr.w	r3, r0, r1
 80043b4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80043b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043ba:	689a      	ldr	r2, [r3, #8]
 80043bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043c0:	691b      	ldr	r3, [r3, #16]
 80043c2:	431a      	orrs	r2, r3
 80043c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043c8:	695b      	ldr	r3, [r3, #20]
 80043ca:	431a      	orrs	r2, r3
 80043cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043d0:	69db      	ldr	r3, [r3, #28]
 80043d2:	4313      	orrs	r3, r2
 80043d4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80043d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	68db      	ldr	r3, [r3, #12]
 80043e0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80043e4:	f021 010c 	bic.w	r1, r1, #12
 80043e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043ec:	681a      	ldr	r2, [r3, #0]
 80043ee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80043f2:	430b      	orrs	r3, r1
 80043f4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80043f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	695b      	ldr	r3, [r3, #20]
 80043fe:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004402:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004406:	6999      	ldr	r1, [r3, #24]
 8004408:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800440c:	681a      	ldr	r2, [r3, #0]
 800440e:	ea40 0301 	orr.w	r3, r0, r1
 8004412:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004414:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004418:	681a      	ldr	r2, [r3, #0]
 800441a:	4b8f      	ldr	r3, [pc, #572]	; (8004658 <UART_SetConfig+0x2cc>)
 800441c:	429a      	cmp	r2, r3
 800441e:	d005      	beq.n	800442c <UART_SetConfig+0xa0>
 8004420:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004424:	681a      	ldr	r2, [r3, #0]
 8004426:	4b8d      	ldr	r3, [pc, #564]	; (800465c <UART_SetConfig+0x2d0>)
 8004428:	429a      	cmp	r2, r3
 800442a:	d104      	bne.n	8004436 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800442c:	f7fe f8d6 	bl	80025dc <HAL_RCC_GetPCLK2Freq>
 8004430:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004434:	e003      	b.n	800443e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004436:	f7fe f8bd 	bl	80025b4 <HAL_RCC_GetPCLK1Freq>
 800443a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800443e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004442:	69db      	ldr	r3, [r3, #28]
 8004444:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004448:	f040 810c 	bne.w	8004664 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800444c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004450:	2200      	movs	r2, #0
 8004452:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004456:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800445a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800445e:	4622      	mov	r2, r4
 8004460:	462b      	mov	r3, r5
 8004462:	1891      	adds	r1, r2, r2
 8004464:	65b9      	str	r1, [r7, #88]	; 0x58
 8004466:	415b      	adcs	r3, r3
 8004468:	65fb      	str	r3, [r7, #92]	; 0x5c
 800446a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800446e:	4621      	mov	r1, r4
 8004470:	eb12 0801 	adds.w	r8, r2, r1
 8004474:	4629      	mov	r1, r5
 8004476:	eb43 0901 	adc.w	r9, r3, r1
 800447a:	f04f 0200 	mov.w	r2, #0
 800447e:	f04f 0300 	mov.w	r3, #0
 8004482:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004486:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800448a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800448e:	4690      	mov	r8, r2
 8004490:	4699      	mov	r9, r3
 8004492:	4623      	mov	r3, r4
 8004494:	eb18 0303 	adds.w	r3, r8, r3
 8004498:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800449c:	462b      	mov	r3, r5
 800449e:	eb49 0303 	adc.w	r3, r9, r3
 80044a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80044a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	2200      	movs	r2, #0
 80044ae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80044b2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80044b6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80044ba:	460b      	mov	r3, r1
 80044bc:	18db      	adds	r3, r3, r3
 80044be:	653b      	str	r3, [r7, #80]	; 0x50
 80044c0:	4613      	mov	r3, r2
 80044c2:	eb42 0303 	adc.w	r3, r2, r3
 80044c6:	657b      	str	r3, [r7, #84]	; 0x54
 80044c8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80044cc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80044d0:	f7fb feee 	bl	80002b0 <__aeabi_uldivmod>
 80044d4:	4602      	mov	r2, r0
 80044d6:	460b      	mov	r3, r1
 80044d8:	4b61      	ldr	r3, [pc, #388]	; (8004660 <UART_SetConfig+0x2d4>)
 80044da:	fba3 2302 	umull	r2, r3, r3, r2
 80044de:	095b      	lsrs	r3, r3, #5
 80044e0:	011c      	lsls	r4, r3, #4
 80044e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80044e6:	2200      	movs	r2, #0
 80044e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80044ec:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80044f0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80044f4:	4642      	mov	r2, r8
 80044f6:	464b      	mov	r3, r9
 80044f8:	1891      	adds	r1, r2, r2
 80044fa:	64b9      	str	r1, [r7, #72]	; 0x48
 80044fc:	415b      	adcs	r3, r3
 80044fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004500:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004504:	4641      	mov	r1, r8
 8004506:	eb12 0a01 	adds.w	sl, r2, r1
 800450a:	4649      	mov	r1, r9
 800450c:	eb43 0b01 	adc.w	fp, r3, r1
 8004510:	f04f 0200 	mov.w	r2, #0
 8004514:	f04f 0300 	mov.w	r3, #0
 8004518:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800451c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004520:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004524:	4692      	mov	sl, r2
 8004526:	469b      	mov	fp, r3
 8004528:	4643      	mov	r3, r8
 800452a:	eb1a 0303 	adds.w	r3, sl, r3
 800452e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004532:	464b      	mov	r3, r9
 8004534:	eb4b 0303 	adc.w	r3, fp, r3
 8004538:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800453c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	2200      	movs	r2, #0
 8004544:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004548:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800454c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004550:	460b      	mov	r3, r1
 8004552:	18db      	adds	r3, r3, r3
 8004554:	643b      	str	r3, [r7, #64]	; 0x40
 8004556:	4613      	mov	r3, r2
 8004558:	eb42 0303 	adc.w	r3, r2, r3
 800455c:	647b      	str	r3, [r7, #68]	; 0x44
 800455e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004562:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004566:	f7fb fea3 	bl	80002b0 <__aeabi_uldivmod>
 800456a:	4602      	mov	r2, r0
 800456c:	460b      	mov	r3, r1
 800456e:	4611      	mov	r1, r2
 8004570:	4b3b      	ldr	r3, [pc, #236]	; (8004660 <UART_SetConfig+0x2d4>)
 8004572:	fba3 2301 	umull	r2, r3, r3, r1
 8004576:	095b      	lsrs	r3, r3, #5
 8004578:	2264      	movs	r2, #100	; 0x64
 800457a:	fb02 f303 	mul.w	r3, r2, r3
 800457e:	1acb      	subs	r3, r1, r3
 8004580:	00db      	lsls	r3, r3, #3
 8004582:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004586:	4b36      	ldr	r3, [pc, #216]	; (8004660 <UART_SetConfig+0x2d4>)
 8004588:	fba3 2302 	umull	r2, r3, r3, r2
 800458c:	095b      	lsrs	r3, r3, #5
 800458e:	005b      	lsls	r3, r3, #1
 8004590:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004594:	441c      	add	r4, r3
 8004596:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800459a:	2200      	movs	r2, #0
 800459c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80045a0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80045a4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80045a8:	4642      	mov	r2, r8
 80045aa:	464b      	mov	r3, r9
 80045ac:	1891      	adds	r1, r2, r2
 80045ae:	63b9      	str	r1, [r7, #56]	; 0x38
 80045b0:	415b      	adcs	r3, r3
 80045b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80045b4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80045b8:	4641      	mov	r1, r8
 80045ba:	1851      	adds	r1, r2, r1
 80045bc:	6339      	str	r1, [r7, #48]	; 0x30
 80045be:	4649      	mov	r1, r9
 80045c0:	414b      	adcs	r3, r1
 80045c2:	637b      	str	r3, [r7, #52]	; 0x34
 80045c4:	f04f 0200 	mov.w	r2, #0
 80045c8:	f04f 0300 	mov.w	r3, #0
 80045cc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80045d0:	4659      	mov	r1, fp
 80045d2:	00cb      	lsls	r3, r1, #3
 80045d4:	4651      	mov	r1, sl
 80045d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80045da:	4651      	mov	r1, sl
 80045dc:	00ca      	lsls	r2, r1, #3
 80045de:	4610      	mov	r0, r2
 80045e0:	4619      	mov	r1, r3
 80045e2:	4603      	mov	r3, r0
 80045e4:	4642      	mov	r2, r8
 80045e6:	189b      	adds	r3, r3, r2
 80045e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80045ec:	464b      	mov	r3, r9
 80045ee:	460a      	mov	r2, r1
 80045f0:	eb42 0303 	adc.w	r3, r2, r3
 80045f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80045f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	2200      	movs	r2, #0
 8004600:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004604:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004608:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800460c:	460b      	mov	r3, r1
 800460e:	18db      	adds	r3, r3, r3
 8004610:	62bb      	str	r3, [r7, #40]	; 0x28
 8004612:	4613      	mov	r3, r2
 8004614:	eb42 0303 	adc.w	r3, r2, r3
 8004618:	62fb      	str	r3, [r7, #44]	; 0x2c
 800461a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800461e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004622:	f7fb fe45 	bl	80002b0 <__aeabi_uldivmod>
 8004626:	4602      	mov	r2, r0
 8004628:	460b      	mov	r3, r1
 800462a:	4b0d      	ldr	r3, [pc, #52]	; (8004660 <UART_SetConfig+0x2d4>)
 800462c:	fba3 1302 	umull	r1, r3, r3, r2
 8004630:	095b      	lsrs	r3, r3, #5
 8004632:	2164      	movs	r1, #100	; 0x64
 8004634:	fb01 f303 	mul.w	r3, r1, r3
 8004638:	1ad3      	subs	r3, r2, r3
 800463a:	00db      	lsls	r3, r3, #3
 800463c:	3332      	adds	r3, #50	; 0x32
 800463e:	4a08      	ldr	r2, [pc, #32]	; (8004660 <UART_SetConfig+0x2d4>)
 8004640:	fba2 2303 	umull	r2, r3, r2, r3
 8004644:	095b      	lsrs	r3, r3, #5
 8004646:	f003 0207 	and.w	r2, r3, #7
 800464a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4422      	add	r2, r4
 8004652:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004654:	e105      	b.n	8004862 <UART_SetConfig+0x4d6>
 8004656:	bf00      	nop
 8004658:	40011000 	.word	0x40011000
 800465c:	40011400 	.word	0x40011400
 8004660:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004664:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004668:	2200      	movs	r2, #0
 800466a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800466e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004672:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004676:	4642      	mov	r2, r8
 8004678:	464b      	mov	r3, r9
 800467a:	1891      	adds	r1, r2, r2
 800467c:	6239      	str	r1, [r7, #32]
 800467e:	415b      	adcs	r3, r3
 8004680:	627b      	str	r3, [r7, #36]	; 0x24
 8004682:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004686:	4641      	mov	r1, r8
 8004688:	1854      	adds	r4, r2, r1
 800468a:	4649      	mov	r1, r9
 800468c:	eb43 0501 	adc.w	r5, r3, r1
 8004690:	f04f 0200 	mov.w	r2, #0
 8004694:	f04f 0300 	mov.w	r3, #0
 8004698:	00eb      	lsls	r3, r5, #3
 800469a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800469e:	00e2      	lsls	r2, r4, #3
 80046a0:	4614      	mov	r4, r2
 80046a2:	461d      	mov	r5, r3
 80046a4:	4643      	mov	r3, r8
 80046a6:	18e3      	adds	r3, r4, r3
 80046a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80046ac:	464b      	mov	r3, r9
 80046ae:	eb45 0303 	adc.w	r3, r5, r3
 80046b2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80046b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	2200      	movs	r2, #0
 80046be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80046c2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80046c6:	f04f 0200 	mov.w	r2, #0
 80046ca:	f04f 0300 	mov.w	r3, #0
 80046ce:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80046d2:	4629      	mov	r1, r5
 80046d4:	008b      	lsls	r3, r1, #2
 80046d6:	4621      	mov	r1, r4
 80046d8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80046dc:	4621      	mov	r1, r4
 80046de:	008a      	lsls	r2, r1, #2
 80046e0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80046e4:	f7fb fde4 	bl	80002b0 <__aeabi_uldivmod>
 80046e8:	4602      	mov	r2, r0
 80046ea:	460b      	mov	r3, r1
 80046ec:	4b60      	ldr	r3, [pc, #384]	; (8004870 <UART_SetConfig+0x4e4>)
 80046ee:	fba3 2302 	umull	r2, r3, r3, r2
 80046f2:	095b      	lsrs	r3, r3, #5
 80046f4:	011c      	lsls	r4, r3, #4
 80046f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80046fa:	2200      	movs	r2, #0
 80046fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004700:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004704:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004708:	4642      	mov	r2, r8
 800470a:	464b      	mov	r3, r9
 800470c:	1891      	adds	r1, r2, r2
 800470e:	61b9      	str	r1, [r7, #24]
 8004710:	415b      	adcs	r3, r3
 8004712:	61fb      	str	r3, [r7, #28]
 8004714:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004718:	4641      	mov	r1, r8
 800471a:	1851      	adds	r1, r2, r1
 800471c:	6139      	str	r1, [r7, #16]
 800471e:	4649      	mov	r1, r9
 8004720:	414b      	adcs	r3, r1
 8004722:	617b      	str	r3, [r7, #20]
 8004724:	f04f 0200 	mov.w	r2, #0
 8004728:	f04f 0300 	mov.w	r3, #0
 800472c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004730:	4659      	mov	r1, fp
 8004732:	00cb      	lsls	r3, r1, #3
 8004734:	4651      	mov	r1, sl
 8004736:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800473a:	4651      	mov	r1, sl
 800473c:	00ca      	lsls	r2, r1, #3
 800473e:	4610      	mov	r0, r2
 8004740:	4619      	mov	r1, r3
 8004742:	4603      	mov	r3, r0
 8004744:	4642      	mov	r2, r8
 8004746:	189b      	adds	r3, r3, r2
 8004748:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800474c:	464b      	mov	r3, r9
 800474e:	460a      	mov	r2, r1
 8004750:	eb42 0303 	adc.w	r3, r2, r3
 8004754:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004758:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	2200      	movs	r2, #0
 8004760:	67bb      	str	r3, [r7, #120]	; 0x78
 8004762:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004764:	f04f 0200 	mov.w	r2, #0
 8004768:	f04f 0300 	mov.w	r3, #0
 800476c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004770:	4649      	mov	r1, r9
 8004772:	008b      	lsls	r3, r1, #2
 8004774:	4641      	mov	r1, r8
 8004776:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800477a:	4641      	mov	r1, r8
 800477c:	008a      	lsls	r2, r1, #2
 800477e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004782:	f7fb fd95 	bl	80002b0 <__aeabi_uldivmod>
 8004786:	4602      	mov	r2, r0
 8004788:	460b      	mov	r3, r1
 800478a:	4b39      	ldr	r3, [pc, #228]	; (8004870 <UART_SetConfig+0x4e4>)
 800478c:	fba3 1302 	umull	r1, r3, r3, r2
 8004790:	095b      	lsrs	r3, r3, #5
 8004792:	2164      	movs	r1, #100	; 0x64
 8004794:	fb01 f303 	mul.w	r3, r1, r3
 8004798:	1ad3      	subs	r3, r2, r3
 800479a:	011b      	lsls	r3, r3, #4
 800479c:	3332      	adds	r3, #50	; 0x32
 800479e:	4a34      	ldr	r2, [pc, #208]	; (8004870 <UART_SetConfig+0x4e4>)
 80047a0:	fba2 2303 	umull	r2, r3, r2, r3
 80047a4:	095b      	lsrs	r3, r3, #5
 80047a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80047aa:	441c      	add	r4, r3
 80047ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80047b0:	2200      	movs	r2, #0
 80047b2:	673b      	str	r3, [r7, #112]	; 0x70
 80047b4:	677a      	str	r2, [r7, #116]	; 0x74
 80047b6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80047ba:	4642      	mov	r2, r8
 80047bc:	464b      	mov	r3, r9
 80047be:	1891      	adds	r1, r2, r2
 80047c0:	60b9      	str	r1, [r7, #8]
 80047c2:	415b      	adcs	r3, r3
 80047c4:	60fb      	str	r3, [r7, #12]
 80047c6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80047ca:	4641      	mov	r1, r8
 80047cc:	1851      	adds	r1, r2, r1
 80047ce:	6039      	str	r1, [r7, #0]
 80047d0:	4649      	mov	r1, r9
 80047d2:	414b      	adcs	r3, r1
 80047d4:	607b      	str	r3, [r7, #4]
 80047d6:	f04f 0200 	mov.w	r2, #0
 80047da:	f04f 0300 	mov.w	r3, #0
 80047de:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80047e2:	4659      	mov	r1, fp
 80047e4:	00cb      	lsls	r3, r1, #3
 80047e6:	4651      	mov	r1, sl
 80047e8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80047ec:	4651      	mov	r1, sl
 80047ee:	00ca      	lsls	r2, r1, #3
 80047f0:	4610      	mov	r0, r2
 80047f2:	4619      	mov	r1, r3
 80047f4:	4603      	mov	r3, r0
 80047f6:	4642      	mov	r2, r8
 80047f8:	189b      	adds	r3, r3, r2
 80047fa:	66bb      	str	r3, [r7, #104]	; 0x68
 80047fc:	464b      	mov	r3, r9
 80047fe:	460a      	mov	r2, r1
 8004800:	eb42 0303 	adc.w	r3, r2, r3
 8004804:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004806:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	2200      	movs	r2, #0
 800480e:	663b      	str	r3, [r7, #96]	; 0x60
 8004810:	667a      	str	r2, [r7, #100]	; 0x64
 8004812:	f04f 0200 	mov.w	r2, #0
 8004816:	f04f 0300 	mov.w	r3, #0
 800481a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800481e:	4649      	mov	r1, r9
 8004820:	008b      	lsls	r3, r1, #2
 8004822:	4641      	mov	r1, r8
 8004824:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004828:	4641      	mov	r1, r8
 800482a:	008a      	lsls	r2, r1, #2
 800482c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004830:	f7fb fd3e 	bl	80002b0 <__aeabi_uldivmod>
 8004834:	4602      	mov	r2, r0
 8004836:	460b      	mov	r3, r1
 8004838:	4b0d      	ldr	r3, [pc, #52]	; (8004870 <UART_SetConfig+0x4e4>)
 800483a:	fba3 1302 	umull	r1, r3, r3, r2
 800483e:	095b      	lsrs	r3, r3, #5
 8004840:	2164      	movs	r1, #100	; 0x64
 8004842:	fb01 f303 	mul.w	r3, r1, r3
 8004846:	1ad3      	subs	r3, r2, r3
 8004848:	011b      	lsls	r3, r3, #4
 800484a:	3332      	adds	r3, #50	; 0x32
 800484c:	4a08      	ldr	r2, [pc, #32]	; (8004870 <UART_SetConfig+0x4e4>)
 800484e:	fba2 2303 	umull	r2, r3, r2, r3
 8004852:	095b      	lsrs	r3, r3, #5
 8004854:	f003 020f 	and.w	r2, r3, #15
 8004858:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4422      	add	r2, r4
 8004860:	609a      	str	r2, [r3, #8]
}
 8004862:	bf00      	nop
 8004864:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004868:	46bd      	mov	sp, r7
 800486a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800486e:	bf00      	nop
 8004870:	51eb851f 	.word	0x51eb851f

08004874 <__NVIC_SetPriority>:
{
 8004874:	b480      	push	{r7}
 8004876:	b083      	sub	sp, #12
 8004878:	af00      	add	r7, sp, #0
 800487a:	4603      	mov	r3, r0
 800487c:	6039      	str	r1, [r7, #0]
 800487e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004880:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004884:	2b00      	cmp	r3, #0
 8004886:	db0a      	blt.n	800489e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	b2da      	uxtb	r2, r3
 800488c:	490c      	ldr	r1, [pc, #48]	; (80048c0 <__NVIC_SetPriority+0x4c>)
 800488e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004892:	0112      	lsls	r2, r2, #4
 8004894:	b2d2      	uxtb	r2, r2
 8004896:	440b      	add	r3, r1
 8004898:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800489c:	e00a      	b.n	80048b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	b2da      	uxtb	r2, r3
 80048a2:	4908      	ldr	r1, [pc, #32]	; (80048c4 <__NVIC_SetPriority+0x50>)
 80048a4:	79fb      	ldrb	r3, [r7, #7]
 80048a6:	f003 030f 	and.w	r3, r3, #15
 80048aa:	3b04      	subs	r3, #4
 80048ac:	0112      	lsls	r2, r2, #4
 80048ae:	b2d2      	uxtb	r2, r2
 80048b0:	440b      	add	r3, r1
 80048b2:	761a      	strb	r2, [r3, #24]
}
 80048b4:	bf00      	nop
 80048b6:	370c      	adds	r7, #12
 80048b8:	46bd      	mov	sp, r7
 80048ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048be:	4770      	bx	lr
 80048c0:	e000e100 	.word	0xe000e100
 80048c4:	e000ed00 	.word	0xe000ed00

080048c8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80048c8:	b580      	push	{r7, lr}
 80048ca:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80048cc:	4b05      	ldr	r3, [pc, #20]	; (80048e4 <SysTick_Handler+0x1c>)
 80048ce:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80048d0:	f002 f86e 	bl	80069b0 <xTaskGetSchedulerState>
 80048d4:	4603      	mov	r3, r0
 80048d6:	2b01      	cmp	r3, #1
 80048d8:	d001      	beq.n	80048de <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80048da:	f003 f845 	bl	8007968 <xPortSysTickHandler>
  }
}
 80048de:	bf00      	nop
 80048e0:	bd80      	pop	{r7, pc}
 80048e2:	bf00      	nop
 80048e4:	e000e010 	.word	0xe000e010

080048e8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80048e8:	b580      	push	{r7, lr}
 80048ea:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80048ec:	2100      	movs	r1, #0
 80048ee:	f06f 0004 	mvn.w	r0, #4
 80048f2:	f7ff ffbf 	bl	8004874 <__NVIC_SetPriority>
#endif
}
 80048f6:	bf00      	nop
 80048f8:	bd80      	pop	{r7, pc}
	...

080048fc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80048fc:	b480      	push	{r7}
 80048fe:	b083      	sub	sp, #12
 8004900:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004902:	f3ef 8305 	mrs	r3, IPSR
 8004906:	603b      	str	r3, [r7, #0]
  return(result);
 8004908:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800490a:	2b00      	cmp	r3, #0
 800490c:	d003      	beq.n	8004916 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800490e:	f06f 0305 	mvn.w	r3, #5
 8004912:	607b      	str	r3, [r7, #4]
 8004914:	e00c      	b.n	8004930 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004916:	4b0a      	ldr	r3, [pc, #40]	; (8004940 <osKernelInitialize+0x44>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d105      	bne.n	800492a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800491e:	4b08      	ldr	r3, [pc, #32]	; (8004940 <osKernelInitialize+0x44>)
 8004920:	2201      	movs	r2, #1
 8004922:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004924:	2300      	movs	r3, #0
 8004926:	607b      	str	r3, [r7, #4]
 8004928:	e002      	b.n	8004930 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800492a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800492e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004930:	687b      	ldr	r3, [r7, #4]
}
 8004932:	4618      	mov	r0, r3
 8004934:	370c      	adds	r7, #12
 8004936:	46bd      	mov	sp, r7
 8004938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493c:	4770      	bx	lr
 800493e:	bf00      	nop
 8004940:	200002a0 	.word	0x200002a0

08004944 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004944:	b580      	push	{r7, lr}
 8004946:	b082      	sub	sp, #8
 8004948:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800494a:	f3ef 8305 	mrs	r3, IPSR
 800494e:	603b      	str	r3, [r7, #0]
  return(result);
 8004950:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004952:	2b00      	cmp	r3, #0
 8004954:	d003      	beq.n	800495e <osKernelStart+0x1a>
    stat = osErrorISR;
 8004956:	f06f 0305 	mvn.w	r3, #5
 800495a:	607b      	str	r3, [r7, #4]
 800495c:	e010      	b.n	8004980 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800495e:	4b0b      	ldr	r3, [pc, #44]	; (800498c <osKernelStart+0x48>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	2b01      	cmp	r3, #1
 8004964:	d109      	bne.n	800497a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004966:	f7ff ffbf 	bl	80048e8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800496a:	4b08      	ldr	r3, [pc, #32]	; (800498c <osKernelStart+0x48>)
 800496c:	2202      	movs	r2, #2
 800496e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004970:	f001 fbd6 	bl	8006120 <vTaskStartScheduler>
      stat = osOK;
 8004974:	2300      	movs	r3, #0
 8004976:	607b      	str	r3, [r7, #4]
 8004978:	e002      	b.n	8004980 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800497a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800497e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004980:	687b      	ldr	r3, [r7, #4]
}
 8004982:	4618      	mov	r0, r3
 8004984:	3708      	adds	r7, #8
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}
 800498a:	bf00      	nop
 800498c:	200002a0 	.word	0x200002a0

08004990 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004990:	b580      	push	{r7, lr}
 8004992:	b08e      	sub	sp, #56	; 0x38
 8004994:	af04      	add	r7, sp, #16
 8004996:	60f8      	str	r0, [r7, #12]
 8004998:	60b9      	str	r1, [r7, #8]
 800499a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800499c:	2300      	movs	r3, #0
 800499e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80049a0:	f3ef 8305 	mrs	r3, IPSR
 80049a4:	617b      	str	r3, [r7, #20]
  return(result);
 80049a6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d17e      	bne.n	8004aaa <osThreadNew+0x11a>
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d07b      	beq.n	8004aaa <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80049b2:	2380      	movs	r3, #128	; 0x80
 80049b4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80049b6:	2318      	movs	r3, #24
 80049b8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80049ba:	2300      	movs	r3, #0
 80049bc:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80049be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80049c2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d045      	beq.n	8004a56 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d002      	beq.n	80049d8 <osThreadNew+0x48>
        name = attr->name;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	699b      	ldr	r3, [r3, #24]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d002      	beq.n	80049e6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	699b      	ldr	r3, [r3, #24]
 80049e4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80049e6:	69fb      	ldr	r3, [r7, #28]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d008      	beq.n	80049fe <osThreadNew+0x6e>
 80049ec:	69fb      	ldr	r3, [r7, #28]
 80049ee:	2b38      	cmp	r3, #56	; 0x38
 80049f0:	d805      	bhi.n	80049fe <osThreadNew+0x6e>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	f003 0301 	and.w	r3, r3, #1
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d001      	beq.n	8004a02 <osThreadNew+0x72>
        return (NULL);
 80049fe:	2300      	movs	r3, #0
 8004a00:	e054      	b.n	8004aac <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	695b      	ldr	r3, [r3, #20]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d003      	beq.n	8004a12 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	695b      	ldr	r3, [r3, #20]
 8004a0e:	089b      	lsrs	r3, r3, #2
 8004a10:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	689b      	ldr	r3, [r3, #8]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d00e      	beq.n	8004a38 <osThreadNew+0xa8>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	68db      	ldr	r3, [r3, #12]
 8004a1e:	2b5b      	cmp	r3, #91	; 0x5b
 8004a20:	d90a      	bls.n	8004a38 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d006      	beq.n	8004a38 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	695b      	ldr	r3, [r3, #20]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d002      	beq.n	8004a38 <osThreadNew+0xa8>
        mem = 1;
 8004a32:	2301      	movs	r3, #1
 8004a34:	61bb      	str	r3, [r7, #24]
 8004a36:	e010      	b.n	8004a5a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	689b      	ldr	r3, [r3, #8]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d10c      	bne.n	8004a5a <osThreadNew+0xca>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	68db      	ldr	r3, [r3, #12]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d108      	bne.n	8004a5a <osThreadNew+0xca>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	691b      	ldr	r3, [r3, #16]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d104      	bne.n	8004a5a <osThreadNew+0xca>
          mem = 0;
 8004a50:	2300      	movs	r3, #0
 8004a52:	61bb      	str	r3, [r7, #24]
 8004a54:	e001      	b.n	8004a5a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004a56:	2300      	movs	r3, #0
 8004a58:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004a5a:	69bb      	ldr	r3, [r7, #24]
 8004a5c:	2b01      	cmp	r3, #1
 8004a5e:	d110      	bne.n	8004a82 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004a64:	687a      	ldr	r2, [r7, #4]
 8004a66:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004a68:	9202      	str	r2, [sp, #8]
 8004a6a:	9301      	str	r3, [sp, #4]
 8004a6c:	69fb      	ldr	r3, [r7, #28]
 8004a6e:	9300      	str	r3, [sp, #0]
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	6a3a      	ldr	r2, [r7, #32]
 8004a74:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004a76:	68f8      	ldr	r0, [r7, #12]
 8004a78:	f001 f97c 	bl	8005d74 <xTaskCreateStatic>
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	613b      	str	r3, [r7, #16]
 8004a80:	e013      	b.n	8004aaa <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004a82:	69bb      	ldr	r3, [r7, #24]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d110      	bne.n	8004aaa <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004a88:	6a3b      	ldr	r3, [r7, #32]
 8004a8a:	b29a      	uxth	r2, r3
 8004a8c:	f107 0310 	add.w	r3, r7, #16
 8004a90:	9301      	str	r3, [sp, #4]
 8004a92:	69fb      	ldr	r3, [r7, #28]
 8004a94:	9300      	str	r3, [sp, #0]
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004a9a:	68f8      	ldr	r0, [r7, #12]
 8004a9c:	f001 f9c7 	bl	8005e2e <xTaskCreate>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	2b01      	cmp	r3, #1
 8004aa4:	d001      	beq.n	8004aaa <osThreadNew+0x11a>
            hTask = NULL;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004aaa:	693b      	ldr	r3, [r7, #16]
}
 8004aac:	4618      	mov	r0, r3
 8004aae:	3728      	adds	r7, #40	; 0x28
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bd80      	pop	{r7, pc}

08004ab4 <osThreadFlagsSet>:
  return (count);
}
#endif /* (configUSE_OS2_THREAD_ENUMERATE == 1) */

#if (configUSE_OS2_THREAD_FLAGS == 1)
uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b088      	sub	sp, #32
 8004ab8:	af02      	add	r7, sp, #8
 8004aba:	6078      	str	r0, [r7, #4]
 8004abc:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	617b      	str	r3, [r7, #20]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 8004ac2:	697b      	ldr	r3, [r7, #20]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d002      	beq.n	8004ace <osThreadFlagsSet+0x1a>
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	da03      	bge.n	8004ad6 <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 8004ace:	f06f 0303 	mvn.w	r3, #3
 8004ad2:	60fb      	str	r3, [r7, #12]
 8004ad4:	e035      	b.n	8004b42 <osThreadFlagsSet+0x8e>
  }
  else {
    rflags = (uint32_t)osError;
 8004ad6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004ada:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004adc:	f3ef 8305 	mrs	r3, IPSR
 8004ae0:	613b      	str	r3, [r7, #16]
  return(result);
 8004ae2:	693b      	ldr	r3, [r7, #16]

    if (IS_IRQ()) {
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d01f      	beq.n	8004b28 <osThreadFlagsSet+0x74>
      yield = pdFALSE;
 8004ae8:	2300      	movs	r3, #0
 8004aea:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 8004aec:	f107 0308 	add.w	r3, r7, #8
 8004af0:	9300      	str	r3, [sp, #0]
 8004af2:	2300      	movs	r3, #0
 8004af4:	2201      	movs	r2, #1
 8004af6:	6839      	ldr	r1, [r7, #0]
 8004af8:	6978      	ldr	r0, [r7, #20]
 8004afa:	f002 f8f7 	bl	8006cec <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 8004afe:	f107 030c 	add.w	r3, r7, #12
 8004b02:	2200      	movs	r2, #0
 8004b04:	9200      	str	r2, [sp, #0]
 8004b06:	2200      	movs	r2, #0
 8004b08:	2100      	movs	r1, #0
 8004b0a:	6978      	ldr	r0, [r7, #20]
 8004b0c:	f002 f8ee 	bl	8006cec <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d015      	beq.n	8004b42 <osThreadFlagsSet+0x8e>
 8004b16:	4b0d      	ldr	r3, [pc, #52]	; (8004b4c <osThreadFlagsSet+0x98>)
 8004b18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b1c:	601a      	str	r2, [r3, #0]
 8004b1e:	f3bf 8f4f 	dsb	sy
 8004b22:	f3bf 8f6f 	isb	sy
 8004b26:	e00c      	b.n	8004b42 <osThreadFlagsSet+0x8e>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 8004b28:	2300      	movs	r3, #0
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	6839      	ldr	r1, [r7, #0]
 8004b2e:	6978      	ldr	r0, [r7, #20]
 8004b30:	f002 f824 	bl	8006b7c <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 8004b34:	f107 030c 	add.w	r3, r7, #12
 8004b38:	2200      	movs	r2, #0
 8004b3a:	2100      	movs	r1, #0
 8004b3c:	6978      	ldr	r0, [r7, #20]
 8004b3e:	f002 f81d 	bl	8006b7c <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 8004b42:	68fb      	ldr	r3, [r7, #12]
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	3718      	adds	r7, #24
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bd80      	pop	{r7, pc}
 8004b4c:	e000ed04 	.word	0xe000ed04

08004b50 <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b08c      	sub	sp, #48	; 0x30
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	60f8      	str	r0, [r7, #12]
 8004b58:	60b9      	str	r1, [r7, #8]
 8004b5a:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004b5c:	f3ef 8305 	mrs	r3, IPSR
 8004b60:	617b      	str	r3, [r7, #20]
  return(result);
 8004b62:	697b      	ldr	r3, [r7, #20]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d003      	beq.n	8004b70 <osThreadFlagsWait+0x20>
    rflags = (uint32_t)osErrorISR;
 8004b68:	f06f 0305 	mvn.w	r3, #5
 8004b6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b6e:	e06b      	b.n	8004c48 <osThreadFlagsWait+0xf8>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	da03      	bge.n	8004b7e <osThreadFlagsWait+0x2e>
    rflags = (uint32_t)osErrorParameter;
 8004b76:	f06f 0303 	mvn.w	r3, #3
 8004b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b7c:	e064      	b.n	8004c48 <osThreadFlagsWait+0xf8>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	f003 0302 	and.w	r3, r3, #2
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d002      	beq.n	8004b8e <osThreadFlagsWait+0x3e>
      clear = 0U;
 8004b88:	2300      	movs	r3, #0
 8004b8a:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b8c:	e001      	b.n	8004b92 <osThreadFlagsWait+0x42>
    } else {
      clear = flags;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    rflags = 0U;
 8004b92:	2300      	movs	r3, #0
 8004b94:	62fb      	str	r3, [r7, #44]	; 0x2c
    tout   = timeout;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	627b      	str	r3, [r7, #36]	; 0x24

    t0 = xTaskGetTickCount();
 8004b9a:	f001 fbd3 	bl	8006344 <xTaskGetTickCount>
 8004b9e:	6238      	str	r0, [r7, #32]
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 8004ba0:	f107 0210 	add.w	r2, r7, #16
 8004ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004ba8:	2000      	movs	r0, #0
 8004baa:	f001 ff8d 	bl	8006ac8 <xTaskNotifyWait>
 8004bae:	61f8      	str	r0, [r7, #28]

      if (rval == pdPASS) {
 8004bb0:	69fb      	ldr	r3, [r7, #28]
 8004bb2:	2b01      	cmp	r3, #1
 8004bb4:	d137      	bne.n	8004c26 <osThreadFlagsWait+0xd6>
        rflags &= flags;
 8004bb6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	4013      	ands	r3, r2
 8004bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
        rflags |= nval;
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	62fb      	str	r3, [r7, #44]	; 0x2c

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	f003 0301 	and.w	r3, r3, #1
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d00c      	beq.n	8004bea <osThreadFlagsWait+0x9a>
          if ((flags & rflags) == flags) {
 8004bd0:	68fa      	ldr	r2, [r7, #12]
 8004bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bd4:	4013      	ands	r3, r2
 8004bd6:	68fa      	ldr	r2, [r7, #12]
 8004bd8:	429a      	cmp	r2, r3
 8004bda:	d032      	beq.n	8004c42 <osThreadFlagsWait+0xf2>
            break;
          } else {
            if (timeout == 0U) {
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d10f      	bne.n	8004c02 <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 8004be2:	f06f 0302 	mvn.w	r3, #2
 8004be6:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 8004be8:	e02e      	b.n	8004c48 <osThreadFlagsWait+0xf8>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 8004bea:	68fa      	ldr	r2, [r7, #12]
 8004bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bee:	4013      	ands	r3, r2
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d128      	bne.n	8004c46 <osThreadFlagsWait+0xf6>
            break;
          } else {
            if (timeout == 0U) {
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d103      	bne.n	8004c02 <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 8004bfa:	f06f 0302 	mvn.w	r3, #2
 8004bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 8004c00:	e022      	b.n	8004c48 <osThreadFlagsWait+0xf8>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 8004c02:	f001 fb9f 	bl	8006344 <xTaskGetTickCount>
 8004c06:	4602      	mov	r2, r0
 8004c08:	6a3b      	ldr	r3, [r7, #32]
 8004c0a:	1ad3      	subs	r3, r2, r3
 8004c0c:	61bb      	str	r3, [r7, #24]

        if (td > tout) {
 8004c0e:	69ba      	ldr	r2, [r7, #24]
 8004c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c12:	429a      	cmp	r2, r3
 8004c14:	d902      	bls.n	8004c1c <osThreadFlagsWait+0xcc>
          tout  = 0;
 8004c16:	2300      	movs	r3, #0
 8004c18:	627b      	str	r3, [r7, #36]	; 0x24
 8004c1a:	e00e      	b.n	8004c3a <osThreadFlagsWait+0xea>
        } else {
          tout -= td;
 8004c1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c1e:	69bb      	ldr	r3, [r7, #24]
 8004c20:	1ad3      	subs	r3, r2, r3
 8004c22:	627b      	str	r3, [r7, #36]	; 0x24
 8004c24:	e009      	b.n	8004c3a <osThreadFlagsWait+0xea>
        }
      }
      else {
        if (timeout == 0) {
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d103      	bne.n	8004c34 <osThreadFlagsWait+0xe4>
          rflags = (uint32_t)osErrorResource;
 8004c2c:	f06f 0302 	mvn.w	r3, #2
 8004c30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c32:	e002      	b.n	8004c3a <osThreadFlagsWait+0xea>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 8004c34:	f06f 0301 	mvn.w	r3, #1
 8004c38:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
      }
    }
    while (rval != pdFAIL);
 8004c3a:	69fb      	ldr	r3, [r7, #28]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d1af      	bne.n	8004ba0 <osThreadFlagsWait+0x50>
 8004c40:	e002      	b.n	8004c48 <osThreadFlagsWait+0xf8>
            break;
 8004c42:	bf00      	nop
 8004c44:	e000      	b.n	8004c48 <osThreadFlagsWait+0xf8>
            break;
 8004c46:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 8004c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	3730      	adds	r7, #48	; 0x30
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}

08004c52 <osDelay>:
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004c52:	b580      	push	{r7, lr}
 8004c54:	b084      	sub	sp, #16
 8004c56:	af00      	add	r7, sp, #0
 8004c58:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004c5a:	f3ef 8305 	mrs	r3, IPSR
 8004c5e:	60bb      	str	r3, [r7, #8]
  return(result);
 8004c60:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d003      	beq.n	8004c6e <osDelay+0x1c>
    stat = osErrorISR;
 8004c66:	f06f 0305 	mvn.w	r3, #5
 8004c6a:	60fb      	str	r3, [r7, #12]
 8004c6c:	e007      	b.n	8004c7e <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004c6e:	2300      	movs	r3, #0
 8004c70:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d002      	beq.n	8004c7e <osDelay+0x2c>
      vTaskDelay(ticks);
 8004c78:	6878      	ldr	r0, [r7, #4]
 8004c7a:	f001 fa1d 	bl	80060b8 <vTaskDelay>
    }
  }

  return (stat);
 8004c7e:	68fb      	ldr	r3, [r7, #12]
}
 8004c80:	4618      	mov	r0, r3
 8004c82:	3710      	adds	r7, #16
 8004c84:	46bd      	mov	sp, r7
 8004c86:	bd80      	pop	{r7, pc}

08004c88 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b08a      	sub	sp, #40	; 0x28
 8004c8c:	af02      	add	r7, sp, #8
 8004c8e:	60f8      	str	r0, [r7, #12]
 8004c90:	60b9      	str	r1, [r7, #8]
 8004c92:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8004c94:	2300      	movs	r3, #0
 8004c96:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004c98:	f3ef 8305 	mrs	r3, IPSR
 8004c9c:	613b      	str	r3, [r7, #16]
  return(result);
 8004c9e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d15f      	bne.n	8004d64 <osMessageQueueNew+0xdc>
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d05c      	beq.n	8004d64 <osMessageQueueNew+0xdc>
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d059      	beq.n	8004d64 <osMessageQueueNew+0xdc>
    mem = -1;
 8004cb0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004cb4:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d029      	beq.n	8004d10 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	689b      	ldr	r3, [r3, #8]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d012      	beq.n	8004cea <osMessageQueueNew+0x62>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	68db      	ldr	r3, [r3, #12]
 8004cc8:	2b4f      	cmp	r3, #79	; 0x4f
 8004cca:	d90e      	bls.n	8004cea <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d00a      	beq.n	8004cea <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	695a      	ldr	r2, [r3, #20]
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	68b9      	ldr	r1, [r7, #8]
 8004cdc:	fb01 f303 	mul.w	r3, r1, r3
 8004ce0:	429a      	cmp	r2, r3
 8004ce2:	d302      	bcc.n	8004cea <osMessageQueueNew+0x62>
        mem = 1;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	61bb      	str	r3, [r7, #24]
 8004ce8:	e014      	b.n	8004d14 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	689b      	ldr	r3, [r3, #8]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d110      	bne.n	8004d14 <osMessageQueueNew+0x8c>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	68db      	ldr	r3, [r3, #12]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d10c      	bne.n	8004d14 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d108      	bne.n	8004d14 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	695b      	ldr	r3, [r3, #20]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d104      	bne.n	8004d14 <osMessageQueueNew+0x8c>
          mem = 0;
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	61bb      	str	r3, [r7, #24]
 8004d0e:	e001      	b.n	8004d14 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8004d10:	2300      	movs	r3, #0
 8004d12:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004d14:	69bb      	ldr	r3, [r7, #24]
 8004d16:	2b01      	cmp	r3, #1
 8004d18:	d10b      	bne.n	8004d32 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	691a      	ldr	r2, [r3, #16]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	2100      	movs	r1, #0
 8004d24:	9100      	str	r1, [sp, #0]
 8004d26:	68b9      	ldr	r1, [r7, #8]
 8004d28:	68f8      	ldr	r0, [r7, #12]
 8004d2a:	f000 fa85 	bl	8005238 <xQueueGenericCreateStatic>
 8004d2e:	61f8      	str	r0, [r7, #28]
 8004d30:	e008      	b.n	8004d44 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8004d32:	69bb      	ldr	r3, [r7, #24]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d105      	bne.n	8004d44 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8004d38:	2200      	movs	r2, #0
 8004d3a:	68b9      	ldr	r1, [r7, #8]
 8004d3c:	68f8      	ldr	r0, [r7, #12]
 8004d3e:	f000 faf3 	bl	8005328 <xQueueGenericCreate>
 8004d42:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8004d44:	69fb      	ldr	r3, [r7, #28]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d00c      	beq.n	8004d64 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d003      	beq.n	8004d58 <osMessageQueueNew+0xd0>
        name = attr->name;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	617b      	str	r3, [r7, #20]
 8004d56:	e001      	b.n	8004d5c <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8004d58:	2300      	movs	r3, #0
 8004d5a:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8004d5c:	6979      	ldr	r1, [r7, #20]
 8004d5e:	69f8      	ldr	r0, [r7, #28]
 8004d60:	f000 ffaa 	bl	8005cb8 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8004d64:	69fb      	ldr	r3, [r7, #28]
}
 8004d66:	4618      	mov	r0, r3
 8004d68:	3720      	adds	r7, #32
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bd80      	pop	{r7, pc}
	...

08004d70 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b088      	sub	sp, #32
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	60f8      	str	r0, [r7, #12]
 8004d78:	60b9      	str	r1, [r7, #8]
 8004d7a:	603b      	str	r3, [r7, #0]
 8004d7c:	4613      	mov	r3, r2
 8004d7e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8004d84:	2300      	movs	r3, #0
 8004d86:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004d88:	f3ef 8305 	mrs	r3, IPSR
 8004d8c:	617b      	str	r3, [r7, #20]
  return(result);
 8004d8e:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d028      	beq.n	8004de6 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004d94:	69bb      	ldr	r3, [r7, #24]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d005      	beq.n	8004da6 <osMessageQueuePut+0x36>
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d002      	beq.n	8004da6 <osMessageQueuePut+0x36>
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d003      	beq.n	8004dae <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8004da6:	f06f 0303 	mvn.w	r3, #3
 8004daa:	61fb      	str	r3, [r7, #28]
 8004dac:	e038      	b.n	8004e20 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8004dae:	2300      	movs	r3, #0
 8004db0:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8004db2:	f107 0210 	add.w	r2, r7, #16
 8004db6:	2300      	movs	r3, #0
 8004db8:	68b9      	ldr	r1, [r7, #8]
 8004dba:	69b8      	ldr	r0, [r7, #24]
 8004dbc:	f000 fc10 	bl	80055e0 <xQueueGenericSendFromISR>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	2b01      	cmp	r3, #1
 8004dc4:	d003      	beq.n	8004dce <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8004dc6:	f06f 0302 	mvn.w	r3, #2
 8004dca:	61fb      	str	r3, [r7, #28]
 8004dcc:	e028      	b.n	8004e20 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d025      	beq.n	8004e20 <osMessageQueuePut+0xb0>
 8004dd4:	4b15      	ldr	r3, [pc, #84]	; (8004e2c <osMessageQueuePut+0xbc>)
 8004dd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004dda:	601a      	str	r2, [r3, #0]
 8004ddc:	f3bf 8f4f 	dsb	sy
 8004de0:	f3bf 8f6f 	isb	sy
 8004de4:	e01c      	b.n	8004e20 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8004de6:	69bb      	ldr	r3, [r7, #24]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d002      	beq.n	8004df2 <osMessageQueuePut+0x82>
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d103      	bne.n	8004dfa <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8004df2:	f06f 0303 	mvn.w	r3, #3
 8004df6:	61fb      	str	r3, [r7, #28]
 8004df8:	e012      	b.n	8004e20 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	683a      	ldr	r2, [r7, #0]
 8004dfe:	68b9      	ldr	r1, [r7, #8]
 8004e00:	69b8      	ldr	r0, [r7, #24]
 8004e02:	f000 faef 	bl	80053e4 <xQueueGenericSend>
 8004e06:	4603      	mov	r3, r0
 8004e08:	2b01      	cmp	r3, #1
 8004e0a:	d009      	beq.n	8004e20 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d003      	beq.n	8004e1a <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8004e12:	f06f 0301 	mvn.w	r3, #1
 8004e16:	61fb      	str	r3, [r7, #28]
 8004e18:	e002      	b.n	8004e20 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8004e1a:	f06f 0302 	mvn.w	r3, #2
 8004e1e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8004e20:	69fb      	ldr	r3, [r7, #28]
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	3720      	adds	r7, #32
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bd80      	pop	{r7, pc}
 8004e2a:	bf00      	nop
 8004e2c:	e000ed04 	.word	0xe000ed04

08004e30 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b088      	sub	sp, #32
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	60f8      	str	r0, [r7, #12]
 8004e38:	60b9      	str	r1, [r7, #8]
 8004e3a:	607a      	str	r2, [r7, #4]
 8004e3c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8004e42:	2300      	movs	r3, #0
 8004e44:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004e46:	f3ef 8305 	mrs	r3, IPSR
 8004e4a:	617b      	str	r3, [r7, #20]
  return(result);
 8004e4c:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d028      	beq.n	8004ea4 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004e52:	69bb      	ldr	r3, [r7, #24]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d005      	beq.n	8004e64 <osMessageQueueGet+0x34>
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d002      	beq.n	8004e64 <osMessageQueueGet+0x34>
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d003      	beq.n	8004e6c <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8004e64:	f06f 0303 	mvn.w	r3, #3
 8004e68:	61fb      	str	r3, [r7, #28]
 8004e6a:	e037      	b.n	8004edc <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8004e70:	f107 0310 	add.w	r3, r7, #16
 8004e74:	461a      	mov	r2, r3
 8004e76:	68b9      	ldr	r1, [r7, #8]
 8004e78:	69b8      	ldr	r0, [r7, #24]
 8004e7a:	f000 fd2d 	bl	80058d8 <xQueueReceiveFromISR>
 8004e7e:	4603      	mov	r3, r0
 8004e80:	2b01      	cmp	r3, #1
 8004e82:	d003      	beq.n	8004e8c <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8004e84:	f06f 0302 	mvn.w	r3, #2
 8004e88:	61fb      	str	r3, [r7, #28]
 8004e8a:	e027      	b.n	8004edc <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8004e8c:	693b      	ldr	r3, [r7, #16]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d024      	beq.n	8004edc <osMessageQueueGet+0xac>
 8004e92:	4b15      	ldr	r3, [pc, #84]	; (8004ee8 <osMessageQueueGet+0xb8>)
 8004e94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e98:	601a      	str	r2, [r3, #0]
 8004e9a:	f3bf 8f4f 	dsb	sy
 8004e9e:	f3bf 8f6f 	isb	sy
 8004ea2:	e01b      	b.n	8004edc <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8004ea4:	69bb      	ldr	r3, [r7, #24]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d002      	beq.n	8004eb0 <osMessageQueueGet+0x80>
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d103      	bne.n	8004eb8 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8004eb0:	f06f 0303 	mvn.w	r3, #3
 8004eb4:	61fb      	str	r3, [r7, #28]
 8004eb6:	e011      	b.n	8004edc <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8004eb8:	683a      	ldr	r2, [r7, #0]
 8004eba:	68b9      	ldr	r1, [r7, #8]
 8004ebc:	69b8      	ldr	r0, [r7, #24]
 8004ebe:	f000 fc2b 	bl	8005718 <xQueueReceive>
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	2b01      	cmp	r3, #1
 8004ec6:	d009      	beq.n	8004edc <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d003      	beq.n	8004ed6 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8004ece:	f06f 0301 	mvn.w	r3, #1
 8004ed2:	61fb      	str	r3, [r7, #28]
 8004ed4:	e002      	b.n	8004edc <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8004ed6:	f06f 0302 	mvn.w	r3, #2
 8004eda:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8004edc:	69fb      	ldr	r3, [r7, #28]
}
 8004ede:	4618      	mov	r0, r3
 8004ee0:	3720      	adds	r7, #32
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bd80      	pop	{r7, pc}
 8004ee6:	bf00      	nop
 8004ee8:	e000ed04 	.word	0xe000ed04

08004eec <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b086      	sub	sp, #24
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 8004ef8:	693b      	ldr	r3, [r7, #16]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d102      	bne.n	8004f04 <osMessageQueueGetCount+0x18>
    count = 0U;
 8004efe:	2300      	movs	r3, #0
 8004f00:	617b      	str	r3, [r7, #20]
 8004f02:	e00e      	b.n	8004f22 <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004f04:	f3ef 8305 	mrs	r3, IPSR
 8004f08:	60fb      	str	r3, [r7, #12]
  return(result);
 8004f0a:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d004      	beq.n	8004f1a <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 8004f10:	6938      	ldr	r0, [r7, #16]
 8004f12:	f000 fda2 	bl	8005a5a <uxQueueMessagesWaitingFromISR>
 8004f16:	6178      	str	r0, [r7, #20]
 8004f18:	e003      	b.n	8004f22 <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 8004f1a:	6938      	ldr	r0, [r7, #16]
 8004f1c:	f000 fd5c 	bl	80059d8 <uxQueueMessagesWaiting>
 8004f20:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 8004f22:	697b      	ldr	r3, [r7, #20]
}
 8004f24:	4618      	mov	r0, r3
 8004f26:	3718      	adds	r7, #24
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	bd80      	pop	{r7, pc}

08004f2c <osMessageQueueGetSpace>:

uint32_t osMessageQueueGetSpace (osMessageQueueId_t mq_id) {
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b08a      	sub	sp, #40	; 0x28
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
  StaticQueue_t *mq = (StaticQueue_t *)mq_id;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	623b      	str	r3, [r7, #32]
  uint32_t space;
  uint32_t isrm;

  if (mq == NULL) {
 8004f38:	6a3b      	ldr	r3, [r7, #32]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d102      	bne.n	8004f44 <osMessageQueueGetSpace+0x18>
    space = 0U;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	627b      	str	r3, [r7, #36]	; 0x24
 8004f42:	e023      	b.n	8004f8c <osMessageQueueGetSpace+0x60>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004f44:	f3ef 8305 	mrs	r3, IPSR
 8004f48:	61bb      	str	r3, [r7, #24]
  return(result);
 8004f4a:	69bb      	ldr	r3, [r7, #24]
  }
  else if (IS_IRQ()) {
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d019      	beq.n	8004f84 <osMessageQueueGetSpace+0x58>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004f50:	f3ef 8211 	mrs	r2, BASEPRI
 8004f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f58:	f383 8811 	msr	BASEPRI, r3
 8004f5c:	f3bf 8f6f 	isb	sy
 8004f60:	f3bf 8f4f 	dsb	sy
 8004f64:	613a      	str	r2, [r7, #16]
 8004f66:	60fb      	str	r3, [r7, #12]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004f68:	693b      	ldr	r3, [r7, #16]
    isrm = taskENTER_CRITICAL_FROM_ISR();
 8004f6a:	61fb      	str	r3, [r7, #28]

    /* space = pxQueue->uxLength - pxQueue->uxMessagesWaiting; */
    space = mq->uxDummy4[1] - mq->uxDummy4[0];
 8004f6c:	6a3b      	ldr	r3, [r7, #32]
 8004f6e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f70:	6a3b      	ldr	r3, [r7, #32]
 8004f72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f74:	1ad3      	subs	r3, r2, r3
 8004f76:	627b      	str	r3, [r7, #36]	; 0x24
 8004f78:	69fb      	ldr	r3, [r7, #28]
 8004f7a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004f82:	e003      	b.n	8004f8c <osMessageQueueGetSpace+0x60>

    taskEXIT_CRITICAL_FROM_ISR(isrm);
  }
  else {
    space = (uint32_t)uxQueueSpacesAvailable ((QueueHandle_t)mq);
 8004f84:	6a38      	ldr	r0, [r7, #32]
 8004f86:	f000 fd45 	bl	8005a14 <uxQueueSpacesAvailable>
 8004f8a:	6278      	str	r0, [r7, #36]	; 0x24
  }

  return (space);
 8004f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004f8e:	4618      	mov	r0, r3
 8004f90:	3728      	adds	r7, #40	; 0x28
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd80      	pop	{r7, pc}
	...

08004f98 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004f98:	b480      	push	{r7}
 8004f9a:	b085      	sub	sp, #20
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	60f8      	str	r0, [r7, #12]
 8004fa0:	60b9      	str	r1, [r7, #8]
 8004fa2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	4a07      	ldr	r2, [pc, #28]	; (8004fc4 <vApplicationGetIdleTaskMemory+0x2c>)
 8004fa8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	4a06      	ldr	r2, [pc, #24]	; (8004fc8 <vApplicationGetIdleTaskMemory+0x30>)
 8004fae:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2280      	movs	r2, #128	; 0x80
 8004fb4:	601a      	str	r2, [r3, #0]
}
 8004fb6:	bf00      	nop
 8004fb8:	3714      	adds	r7, #20
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc0:	4770      	bx	lr
 8004fc2:	bf00      	nop
 8004fc4:	200002a4 	.word	0x200002a4
 8004fc8:	20000300 	.word	0x20000300

08004fcc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004fcc:	b480      	push	{r7}
 8004fce:	b085      	sub	sp, #20
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	60f8      	str	r0, [r7, #12]
 8004fd4:	60b9      	str	r1, [r7, #8]
 8004fd6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	4a07      	ldr	r2, [pc, #28]	; (8004ff8 <vApplicationGetTimerTaskMemory+0x2c>)
 8004fdc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	4a06      	ldr	r2, [pc, #24]	; (8004ffc <vApplicationGetTimerTaskMemory+0x30>)
 8004fe2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004fea:	601a      	str	r2, [r3, #0]
}
 8004fec:	bf00      	nop
 8004fee:	3714      	adds	r7, #20
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff6:	4770      	bx	lr
 8004ff8:	20000500 	.word	0x20000500
 8004ffc:	2000055c 	.word	0x2000055c

08005000 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005000:	b480      	push	{r7}
 8005002:	b083      	sub	sp, #12
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	f103 0208 	add.w	r2, r3, #8
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005018:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	f103 0208 	add.w	r2, r3, #8
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	f103 0208 	add.w	r2, r3, #8
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2200      	movs	r2, #0
 8005032:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005034:	bf00      	nop
 8005036:	370c      	adds	r7, #12
 8005038:	46bd      	mov	sp, r7
 800503a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503e:	4770      	bx	lr

08005040 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005040:	b480      	push	{r7}
 8005042:	b083      	sub	sp, #12
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2200      	movs	r2, #0
 800504c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800504e:	bf00      	nop
 8005050:	370c      	adds	r7, #12
 8005052:	46bd      	mov	sp, r7
 8005054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005058:	4770      	bx	lr

0800505a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800505a:	b480      	push	{r7}
 800505c:	b085      	sub	sp, #20
 800505e:	af00      	add	r7, sp, #0
 8005060:	6078      	str	r0, [r7, #4]
 8005062:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	68fa      	ldr	r2, [r7, #12]
 800506e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	689a      	ldr	r2, [r3, #8]
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	689b      	ldr	r3, [r3, #8]
 800507c:	683a      	ldr	r2, [r7, #0]
 800507e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	683a      	ldr	r2, [r7, #0]
 8005084:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	687a      	ldr	r2, [r7, #4]
 800508a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	1c5a      	adds	r2, r3, #1
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	601a      	str	r2, [r3, #0]
}
 8005096:	bf00      	nop
 8005098:	3714      	adds	r7, #20
 800509a:	46bd      	mov	sp, r7
 800509c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a0:	4770      	bx	lr

080050a2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80050a2:	b480      	push	{r7}
 80050a4:	b085      	sub	sp, #20
 80050a6:	af00      	add	r7, sp, #0
 80050a8:	6078      	str	r0, [r7, #4]
 80050aa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80050b8:	d103      	bne.n	80050c2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	691b      	ldr	r3, [r3, #16]
 80050be:	60fb      	str	r3, [r7, #12]
 80050c0:	e00c      	b.n	80050dc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	3308      	adds	r3, #8
 80050c6:	60fb      	str	r3, [r7, #12]
 80050c8:	e002      	b.n	80050d0 <vListInsert+0x2e>
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	60fb      	str	r3, [r7, #12]
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	685b      	ldr	r3, [r3, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	68ba      	ldr	r2, [r7, #8]
 80050d8:	429a      	cmp	r2, r3
 80050da:	d2f6      	bcs.n	80050ca <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	685a      	ldr	r2, [r3, #4]
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	683a      	ldr	r2, [r7, #0]
 80050ea:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	68fa      	ldr	r2, [r7, #12]
 80050f0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	683a      	ldr	r2, [r7, #0]
 80050f6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	687a      	ldr	r2, [r7, #4]
 80050fc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	1c5a      	adds	r2, r3, #1
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	601a      	str	r2, [r3, #0]
}
 8005108:	bf00      	nop
 800510a:	3714      	adds	r7, #20
 800510c:	46bd      	mov	sp, r7
 800510e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005112:	4770      	bx	lr

08005114 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005114:	b480      	push	{r7}
 8005116:	b085      	sub	sp, #20
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	691b      	ldr	r3, [r3, #16]
 8005120:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	687a      	ldr	r2, [r7, #4]
 8005128:	6892      	ldr	r2, [r2, #8]
 800512a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	689b      	ldr	r3, [r3, #8]
 8005130:	687a      	ldr	r2, [r7, #4]
 8005132:	6852      	ldr	r2, [r2, #4]
 8005134:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	687a      	ldr	r2, [r7, #4]
 800513c:	429a      	cmp	r2, r3
 800513e:	d103      	bne.n	8005148 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	689a      	ldr	r2, [r3, #8]
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2200      	movs	r2, #0
 800514c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	1e5a      	subs	r2, r3, #1
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
}
 800515c:	4618      	mov	r0, r3
 800515e:	3714      	adds	r7, #20
 8005160:	46bd      	mov	sp, r7
 8005162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005166:	4770      	bx	lr

08005168 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b084      	sub	sp, #16
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
 8005170:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d10a      	bne.n	8005192 <xQueueGenericReset+0x2a>
	__asm volatile
 800517c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005180:	f383 8811 	msr	BASEPRI, r3
 8005184:	f3bf 8f6f 	isb	sy
 8005188:	f3bf 8f4f 	dsb	sy
 800518c:	60bb      	str	r3, [r7, #8]
}
 800518e:	bf00      	nop
 8005190:	e7fe      	b.n	8005190 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005192:	f002 fb57 	bl	8007844 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681a      	ldr	r2, [r3, #0]
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800519e:	68f9      	ldr	r1, [r7, #12]
 80051a0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80051a2:	fb01 f303 	mul.w	r3, r1, r3
 80051a6:	441a      	add	r2, r3
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	2200      	movs	r2, #0
 80051b0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681a      	ldr	r2, [r3, #0]
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681a      	ldr	r2, [r3, #0]
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051c2:	3b01      	subs	r3, #1
 80051c4:	68f9      	ldr	r1, [r7, #12]
 80051c6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80051c8:	fb01 f303 	mul.w	r3, r1, r3
 80051cc:	441a      	add	r2, r3
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	22ff      	movs	r2, #255	; 0xff
 80051d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	22ff      	movs	r2, #255	; 0xff
 80051de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d114      	bne.n	8005212 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	691b      	ldr	r3, [r3, #16]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d01a      	beq.n	8005226 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	3310      	adds	r3, #16
 80051f4:	4618      	mov	r0, r3
 80051f6:	f001 fa1d 	bl	8006634 <xTaskRemoveFromEventList>
 80051fa:	4603      	mov	r3, r0
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d012      	beq.n	8005226 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005200:	4b0c      	ldr	r3, [pc, #48]	; (8005234 <xQueueGenericReset+0xcc>)
 8005202:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005206:	601a      	str	r2, [r3, #0]
 8005208:	f3bf 8f4f 	dsb	sy
 800520c:	f3bf 8f6f 	isb	sy
 8005210:	e009      	b.n	8005226 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	3310      	adds	r3, #16
 8005216:	4618      	mov	r0, r3
 8005218:	f7ff fef2 	bl	8005000 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	3324      	adds	r3, #36	; 0x24
 8005220:	4618      	mov	r0, r3
 8005222:	f7ff feed 	bl	8005000 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005226:	f002 fb3d 	bl	80078a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800522a:	2301      	movs	r3, #1
}
 800522c:	4618      	mov	r0, r3
 800522e:	3710      	adds	r7, #16
 8005230:	46bd      	mov	sp, r7
 8005232:	bd80      	pop	{r7, pc}
 8005234:	e000ed04 	.word	0xe000ed04

08005238 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005238:	b580      	push	{r7, lr}
 800523a:	b08e      	sub	sp, #56	; 0x38
 800523c:	af02      	add	r7, sp, #8
 800523e:	60f8      	str	r0, [r7, #12]
 8005240:	60b9      	str	r1, [r7, #8]
 8005242:	607a      	str	r2, [r7, #4]
 8005244:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d10a      	bne.n	8005262 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800524c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005250:	f383 8811 	msr	BASEPRI, r3
 8005254:	f3bf 8f6f 	isb	sy
 8005258:	f3bf 8f4f 	dsb	sy
 800525c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800525e:	bf00      	nop
 8005260:	e7fe      	b.n	8005260 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d10a      	bne.n	800527e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800526c:	f383 8811 	msr	BASEPRI, r3
 8005270:	f3bf 8f6f 	isb	sy
 8005274:	f3bf 8f4f 	dsb	sy
 8005278:	627b      	str	r3, [r7, #36]	; 0x24
}
 800527a:	bf00      	nop
 800527c:	e7fe      	b.n	800527c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d002      	beq.n	800528a <xQueueGenericCreateStatic+0x52>
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d001      	beq.n	800528e <xQueueGenericCreateStatic+0x56>
 800528a:	2301      	movs	r3, #1
 800528c:	e000      	b.n	8005290 <xQueueGenericCreateStatic+0x58>
 800528e:	2300      	movs	r3, #0
 8005290:	2b00      	cmp	r3, #0
 8005292:	d10a      	bne.n	80052aa <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005298:	f383 8811 	msr	BASEPRI, r3
 800529c:	f3bf 8f6f 	isb	sy
 80052a0:	f3bf 8f4f 	dsb	sy
 80052a4:	623b      	str	r3, [r7, #32]
}
 80052a6:	bf00      	nop
 80052a8:	e7fe      	b.n	80052a8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d102      	bne.n	80052b6 <xQueueGenericCreateStatic+0x7e>
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d101      	bne.n	80052ba <xQueueGenericCreateStatic+0x82>
 80052b6:	2301      	movs	r3, #1
 80052b8:	e000      	b.n	80052bc <xQueueGenericCreateStatic+0x84>
 80052ba:	2300      	movs	r3, #0
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d10a      	bne.n	80052d6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80052c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052c4:	f383 8811 	msr	BASEPRI, r3
 80052c8:	f3bf 8f6f 	isb	sy
 80052cc:	f3bf 8f4f 	dsb	sy
 80052d0:	61fb      	str	r3, [r7, #28]
}
 80052d2:	bf00      	nop
 80052d4:	e7fe      	b.n	80052d4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80052d6:	2350      	movs	r3, #80	; 0x50
 80052d8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80052da:	697b      	ldr	r3, [r7, #20]
 80052dc:	2b50      	cmp	r3, #80	; 0x50
 80052de:	d00a      	beq.n	80052f6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80052e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052e4:	f383 8811 	msr	BASEPRI, r3
 80052e8:	f3bf 8f6f 	isb	sy
 80052ec:	f3bf 8f4f 	dsb	sy
 80052f0:	61bb      	str	r3, [r7, #24]
}
 80052f2:	bf00      	nop
 80052f4:	e7fe      	b.n	80052f4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80052f6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80052fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d00d      	beq.n	800531e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005304:	2201      	movs	r2, #1
 8005306:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800530a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800530e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005310:	9300      	str	r3, [sp, #0]
 8005312:	4613      	mov	r3, r2
 8005314:	687a      	ldr	r2, [r7, #4]
 8005316:	68b9      	ldr	r1, [r7, #8]
 8005318:	68f8      	ldr	r0, [r7, #12]
 800531a:	f000 f83f 	bl	800539c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800531e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005320:	4618      	mov	r0, r3
 8005322:	3730      	adds	r7, #48	; 0x30
 8005324:	46bd      	mov	sp, r7
 8005326:	bd80      	pop	{r7, pc}

08005328 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005328:	b580      	push	{r7, lr}
 800532a:	b08a      	sub	sp, #40	; 0x28
 800532c:	af02      	add	r7, sp, #8
 800532e:	60f8      	str	r0, [r7, #12]
 8005330:	60b9      	str	r1, [r7, #8]
 8005332:	4613      	mov	r3, r2
 8005334:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d10a      	bne.n	8005352 <xQueueGenericCreate+0x2a>
	__asm volatile
 800533c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005340:	f383 8811 	msr	BASEPRI, r3
 8005344:	f3bf 8f6f 	isb	sy
 8005348:	f3bf 8f4f 	dsb	sy
 800534c:	613b      	str	r3, [r7, #16]
}
 800534e:	bf00      	nop
 8005350:	e7fe      	b.n	8005350 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	68ba      	ldr	r2, [r7, #8]
 8005356:	fb02 f303 	mul.w	r3, r2, r3
 800535a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800535c:	69fb      	ldr	r3, [r7, #28]
 800535e:	3350      	adds	r3, #80	; 0x50
 8005360:	4618      	mov	r0, r3
 8005362:	f002 fb91 	bl	8007a88 <pvPortMalloc>
 8005366:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005368:	69bb      	ldr	r3, [r7, #24]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d011      	beq.n	8005392 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800536e:	69bb      	ldr	r3, [r7, #24]
 8005370:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	3350      	adds	r3, #80	; 0x50
 8005376:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005378:	69bb      	ldr	r3, [r7, #24]
 800537a:	2200      	movs	r2, #0
 800537c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005380:	79fa      	ldrb	r2, [r7, #7]
 8005382:	69bb      	ldr	r3, [r7, #24]
 8005384:	9300      	str	r3, [sp, #0]
 8005386:	4613      	mov	r3, r2
 8005388:	697a      	ldr	r2, [r7, #20]
 800538a:	68b9      	ldr	r1, [r7, #8]
 800538c:	68f8      	ldr	r0, [r7, #12]
 800538e:	f000 f805 	bl	800539c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005392:	69bb      	ldr	r3, [r7, #24]
	}
 8005394:	4618      	mov	r0, r3
 8005396:	3720      	adds	r7, #32
 8005398:	46bd      	mov	sp, r7
 800539a:	bd80      	pop	{r7, pc}

0800539c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b084      	sub	sp, #16
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	60f8      	str	r0, [r7, #12]
 80053a4:	60b9      	str	r1, [r7, #8]
 80053a6:	607a      	str	r2, [r7, #4]
 80053a8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d103      	bne.n	80053b8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80053b0:	69bb      	ldr	r3, [r7, #24]
 80053b2:	69ba      	ldr	r2, [r7, #24]
 80053b4:	601a      	str	r2, [r3, #0]
 80053b6:	e002      	b.n	80053be <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80053b8:	69bb      	ldr	r3, [r7, #24]
 80053ba:	687a      	ldr	r2, [r7, #4]
 80053bc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80053be:	69bb      	ldr	r3, [r7, #24]
 80053c0:	68fa      	ldr	r2, [r7, #12]
 80053c2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80053c4:	69bb      	ldr	r3, [r7, #24]
 80053c6:	68ba      	ldr	r2, [r7, #8]
 80053c8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80053ca:	2101      	movs	r1, #1
 80053cc:	69b8      	ldr	r0, [r7, #24]
 80053ce:	f7ff fecb 	bl	8005168 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80053d2:	69bb      	ldr	r3, [r7, #24]
 80053d4:	78fa      	ldrb	r2, [r7, #3]
 80053d6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80053da:	bf00      	nop
 80053dc:	3710      	adds	r7, #16
 80053de:	46bd      	mov	sp, r7
 80053e0:	bd80      	pop	{r7, pc}
	...

080053e4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b08e      	sub	sp, #56	; 0x38
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	60f8      	str	r0, [r7, #12]
 80053ec:	60b9      	str	r1, [r7, #8]
 80053ee:	607a      	str	r2, [r7, #4]
 80053f0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80053f2:	2300      	movs	r3, #0
 80053f4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80053fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d10a      	bne.n	8005416 <xQueueGenericSend+0x32>
	__asm volatile
 8005400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005404:	f383 8811 	msr	BASEPRI, r3
 8005408:	f3bf 8f6f 	isb	sy
 800540c:	f3bf 8f4f 	dsb	sy
 8005410:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005412:	bf00      	nop
 8005414:	e7fe      	b.n	8005414 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d103      	bne.n	8005424 <xQueueGenericSend+0x40>
 800541c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800541e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005420:	2b00      	cmp	r3, #0
 8005422:	d101      	bne.n	8005428 <xQueueGenericSend+0x44>
 8005424:	2301      	movs	r3, #1
 8005426:	e000      	b.n	800542a <xQueueGenericSend+0x46>
 8005428:	2300      	movs	r3, #0
 800542a:	2b00      	cmp	r3, #0
 800542c:	d10a      	bne.n	8005444 <xQueueGenericSend+0x60>
	__asm volatile
 800542e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005432:	f383 8811 	msr	BASEPRI, r3
 8005436:	f3bf 8f6f 	isb	sy
 800543a:	f3bf 8f4f 	dsb	sy
 800543e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005440:	bf00      	nop
 8005442:	e7fe      	b.n	8005442 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	2b02      	cmp	r3, #2
 8005448:	d103      	bne.n	8005452 <xQueueGenericSend+0x6e>
 800544a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800544c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800544e:	2b01      	cmp	r3, #1
 8005450:	d101      	bne.n	8005456 <xQueueGenericSend+0x72>
 8005452:	2301      	movs	r3, #1
 8005454:	e000      	b.n	8005458 <xQueueGenericSend+0x74>
 8005456:	2300      	movs	r3, #0
 8005458:	2b00      	cmp	r3, #0
 800545a:	d10a      	bne.n	8005472 <xQueueGenericSend+0x8e>
	__asm volatile
 800545c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005460:	f383 8811 	msr	BASEPRI, r3
 8005464:	f3bf 8f6f 	isb	sy
 8005468:	f3bf 8f4f 	dsb	sy
 800546c:	623b      	str	r3, [r7, #32]
}
 800546e:	bf00      	nop
 8005470:	e7fe      	b.n	8005470 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005472:	f001 fa9d 	bl	80069b0 <xTaskGetSchedulerState>
 8005476:	4603      	mov	r3, r0
 8005478:	2b00      	cmp	r3, #0
 800547a:	d102      	bne.n	8005482 <xQueueGenericSend+0x9e>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d101      	bne.n	8005486 <xQueueGenericSend+0xa2>
 8005482:	2301      	movs	r3, #1
 8005484:	e000      	b.n	8005488 <xQueueGenericSend+0xa4>
 8005486:	2300      	movs	r3, #0
 8005488:	2b00      	cmp	r3, #0
 800548a:	d10a      	bne.n	80054a2 <xQueueGenericSend+0xbe>
	__asm volatile
 800548c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005490:	f383 8811 	msr	BASEPRI, r3
 8005494:	f3bf 8f6f 	isb	sy
 8005498:	f3bf 8f4f 	dsb	sy
 800549c:	61fb      	str	r3, [r7, #28]
}
 800549e:	bf00      	nop
 80054a0:	e7fe      	b.n	80054a0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80054a2:	f002 f9cf 	bl	8007844 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80054a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80054aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054ae:	429a      	cmp	r2, r3
 80054b0:	d302      	bcc.n	80054b8 <xQueueGenericSend+0xd4>
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	2b02      	cmp	r3, #2
 80054b6:	d129      	bne.n	800550c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80054b8:	683a      	ldr	r2, [r7, #0]
 80054ba:	68b9      	ldr	r1, [r7, #8]
 80054bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80054be:	f000 faea 	bl	8005a96 <prvCopyDataToQueue>
 80054c2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80054c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d010      	beq.n	80054ee <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80054cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ce:	3324      	adds	r3, #36	; 0x24
 80054d0:	4618      	mov	r0, r3
 80054d2:	f001 f8af 	bl	8006634 <xTaskRemoveFromEventList>
 80054d6:	4603      	mov	r3, r0
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d013      	beq.n	8005504 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80054dc:	4b3f      	ldr	r3, [pc, #252]	; (80055dc <xQueueGenericSend+0x1f8>)
 80054de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054e2:	601a      	str	r2, [r3, #0]
 80054e4:	f3bf 8f4f 	dsb	sy
 80054e8:	f3bf 8f6f 	isb	sy
 80054ec:	e00a      	b.n	8005504 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80054ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d007      	beq.n	8005504 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80054f4:	4b39      	ldr	r3, [pc, #228]	; (80055dc <xQueueGenericSend+0x1f8>)
 80054f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054fa:	601a      	str	r2, [r3, #0]
 80054fc:	f3bf 8f4f 	dsb	sy
 8005500:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005504:	f002 f9ce 	bl	80078a4 <vPortExitCritical>
				return pdPASS;
 8005508:	2301      	movs	r3, #1
 800550a:	e063      	b.n	80055d4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d103      	bne.n	800551a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005512:	f002 f9c7 	bl	80078a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005516:	2300      	movs	r3, #0
 8005518:	e05c      	b.n	80055d4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800551a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800551c:	2b00      	cmp	r3, #0
 800551e:	d106      	bne.n	800552e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005520:	f107 0314 	add.w	r3, r7, #20
 8005524:	4618      	mov	r0, r3
 8005526:	f001 f8e9 	bl	80066fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800552a:	2301      	movs	r3, #1
 800552c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800552e:	f002 f9b9 	bl	80078a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005532:	f000 fe5b 	bl	80061ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005536:	f002 f985 	bl	8007844 <vPortEnterCritical>
 800553a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800553c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005540:	b25b      	sxtb	r3, r3
 8005542:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005546:	d103      	bne.n	8005550 <xQueueGenericSend+0x16c>
 8005548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800554a:	2200      	movs	r2, #0
 800554c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005552:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005556:	b25b      	sxtb	r3, r3
 8005558:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800555c:	d103      	bne.n	8005566 <xQueueGenericSend+0x182>
 800555e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005560:	2200      	movs	r2, #0
 8005562:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005566:	f002 f99d 	bl	80078a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800556a:	1d3a      	adds	r2, r7, #4
 800556c:	f107 0314 	add.w	r3, r7, #20
 8005570:	4611      	mov	r1, r2
 8005572:	4618      	mov	r0, r3
 8005574:	f001 f8d8 	bl	8006728 <xTaskCheckForTimeOut>
 8005578:	4603      	mov	r3, r0
 800557a:	2b00      	cmp	r3, #0
 800557c:	d124      	bne.n	80055c8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800557e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005580:	f000 fb81 	bl	8005c86 <prvIsQueueFull>
 8005584:	4603      	mov	r3, r0
 8005586:	2b00      	cmp	r3, #0
 8005588:	d018      	beq.n	80055bc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800558a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800558c:	3310      	adds	r3, #16
 800558e:	687a      	ldr	r2, [r7, #4]
 8005590:	4611      	mov	r1, r2
 8005592:	4618      	mov	r0, r3
 8005594:	f000 fffe 	bl	8006594 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005598:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800559a:	f000 fb0c 	bl	8005bb6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800559e:	f000 fe33 	bl	8006208 <xTaskResumeAll>
 80055a2:	4603      	mov	r3, r0
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	f47f af7c 	bne.w	80054a2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80055aa:	4b0c      	ldr	r3, [pc, #48]	; (80055dc <xQueueGenericSend+0x1f8>)
 80055ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055b0:	601a      	str	r2, [r3, #0]
 80055b2:	f3bf 8f4f 	dsb	sy
 80055b6:	f3bf 8f6f 	isb	sy
 80055ba:	e772      	b.n	80054a2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80055bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80055be:	f000 fafa 	bl	8005bb6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80055c2:	f000 fe21 	bl	8006208 <xTaskResumeAll>
 80055c6:	e76c      	b.n	80054a2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80055c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80055ca:	f000 faf4 	bl	8005bb6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80055ce:	f000 fe1b 	bl	8006208 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80055d2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80055d4:	4618      	mov	r0, r3
 80055d6:	3738      	adds	r7, #56	; 0x38
 80055d8:	46bd      	mov	sp, r7
 80055da:	bd80      	pop	{r7, pc}
 80055dc:	e000ed04 	.word	0xe000ed04

080055e0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b090      	sub	sp, #64	; 0x40
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	60f8      	str	r0, [r7, #12]
 80055e8:	60b9      	str	r1, [r7, #8]
 80055ea:	607a      	str	r2, [r7, #4]
 80055ec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80055f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d10a      	bne.n	800560e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80055f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055fc:	f383 8811 	msr	BASEPRI, r3
 8005600:	f3bf 8f6f 	isb	sy
 8005604:	f3bf 8f4f 	dsb	sy
 8005608:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800560a:	bf00      	nop
 800560c:	e7fe      	b.n	800560c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d103      	bne.n	800561c <xQueueGenericSendFromISR+0x3c>
 8005614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005618:	2b00      	cmp	r3, #0
 800561a:	d101      	bne.n	8005620 <xQueueGenericSendFromISR+0x40>
 800561c:	2301      	movs	r3, #1
 800561e:	e000      	b.n	8005622 <xQueueGenericSendFromISR+0x42>
 8005620:	2300      	movs	r3, #0
 8005622:	2b00      	cmp	r3, #0
 8005624:	d10a      	bne.n	800563c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800562a:	f383 8811 	msr	BASEPRI, r3
 800562e:	f3bf 8f6f 	isb	sy
 8005632:	f3bf 8f4f 	dsb	sy
 8005636:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005638:	bf00      	nop
 800563a:	e7fe      	b.n	800563a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	2b02      	cmp	r3, #2
 8005640:	d103      	bne.n	800564a <xQueueGenericSendFromISR+0x6a>
 8005642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005644:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005646:	2b01      	cmp	r3, #1
 8005648:	d101      	bne.n	800564e <xQueueGenericSendFromISR+0x6e>
 800564a:	2301      	movs	r3, #1
 800564c:	e000      	b.n	8005650 <xQueueGenericSendFromISR+0x70>
 800564e:	2300      	movs	r3, #0
 8005650:	2b00      	cmp	r3, #0
 8005652:	d10a      	bne.n	800566a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005658:	f383 8811 	msr	BASEPRI, r3
 800565c:	f3bf 8f6f 	isb	sy
 8005660:	f3bf 8f4f 	dsb	sy
 8005664:	623b      	str	r3, [r7, #32]
}
 8005666:	bf00      	nop
 8005668:	e7fe      	b.n	8005668 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800566a:	f002 f9cd 	bl	8007a08 <vPortValidateInterruptPriority>
	__asm volatile
 800566e:	f3ef 8211 	mrs	r2, BASEPRI
 8005672:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005676:	f383 8811 	msr	BASEPRI, r3
 800567a:	f3bf 8f6f 	isb	sy
 800567e:	f3bf 8f4f 	dsb	sy
 8005682:	61fa      	str	r2, [r7, #28]
 8005684:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8005686:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005688:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800568a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800568c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800568e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005690:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005692:	429a      	cmp	r2, r3
 8005694:	d302      	bcc.n	800569c <xQueueGenericSendFromISR+0xbc>
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	2b02      	cmp	r3, #2
 800569a:	d12f      	bne.n	80056fc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800569c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800569e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80056a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80056a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056aa:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80056ac:	683a      	ldr	r2, [r7, #0]
 80056ae:	68b9      	ldr	r1, [r7, #8]
 80056b0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80056b2:	f000 f9f0 	bl	8005a96 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80056b6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80056ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80056be:	d112      	bne.n	80056e6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80056c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d016      	beq.n	80056f6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80056c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056ca:	3324      	adds	r3, #36	; 0x24
 80056cc:	4618      	mov	r0, r3
 80056ce:	f000 ffb1 	bl	8006634 <xTaskRemoveFromEventList>
 80056d2:	4603      	mov	r3, r0
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d00e      	beq.n	80056f6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d00b      	beq.n	80056f6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2201      	movs	r2, #1
 80056e2:	601a      	str	r2, [r3, #0]
 80056e4:	e007      	b.n	80056f6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80056e6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80056ea:	3301      	adds	r3, #1
 80056ec:	b2db      	uxtb	r3, r3
 80056ee:	b25a      	sxtb	r2, r3
 80056f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80056f6:	2301      	movs	r3, #1
 80056f8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80056fa:	e001      	b.n	8005700 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80056fc:	2300      	movs	r3, #0
 80056fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005700:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005702:	617b      	str	r3, [r7, #20]
	__asm volatile
 8005704:	697b      	ldr	r3, [r7, #20]
 8005706:	f383 8811 	msr	BASEPRI, r3
}
 800570a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800570c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800570e:	4618      	mov	r0, r3
 8005710:	3740      	adds	r7, #64	; 0x40
 8005712:	46bd      	mov	sp, r7
 8005714:	bd80      	pop	{r7, pc}
	...

08005718 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b08c      	sub	sp, #48	; 0x30
 800571c:	af00      	add	r7, sp, #0
 800571e:	60f8      	str	r0, [r7, #12]
 8005720:	60b9      	str	r1, [r7, #8]
 8005722:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005724:	2300      	movs	r3, #0
 8005726:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800572c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800572e:	2b00      	cmp	r3, #0
 8005730:	d10a      	bne.n	8005748 <xQueueReceive+0x30>
	__asm volatile
 8005732:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005736:	f383 8811 	msr	BASEPRI, r3
 800573a:	f3bf 8f6f 	isb	sy
 800573e:	f3bf 8f4f 	dsb	sy
 8005742:	623b      	str	r3, [r7, #32]
}
 8005744:	bf00      	nop
 8005746:	e7fe      	b.n	8005746 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d103      	bne.n	8005756 <xQueueReceive+0x3e>
 800574e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005752:	2b00      	cmp	r3, #0
 8005754:	d101      	bne.n	800575a <xQueueReceive+0x42>
 8005756:	2301      	movs	r3, #1
 8005758:	e000      	b.n	800575c <xQueueReceive+0x44>
 800575a:	2300      	movs	r3, #0
 800575c:	2b00      	cmp	r3, #0
 800575e:	d10a      	bne.n	8005776 <xQueueReceive+0x5e>
	__asm volatile
 8005760:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005764:	f383 8811 	msr	BASEPRI, r3
 8005768:	f3bf 8f6f 	isb	sy
 800576c:	f3bf 8f4f 	dsb	sy
 8005770:	61fb      	str	r3, [r7, #28]
}
 8005772:	bf00      	nop
 8005774:	e7fe      	b.n	8005774 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005776:	f001 f91b 	bl	80069b0 <xTaskGetSchedulerState>
 800577a:	4603      	mov	r3, r0
 800577c:	2b00      	cmp	r3, #0
 800577e:	d102      	bne.n	8005786 <xQueueReceive+0x6e>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d101      	bne.n	800578a <xQueueReceive+0x72>
 8005786:	2301      	movs	r3, #1
 8005788:	e000      	b.n	800578c <xQueueReceive+0x74>
 800578a:	2300      	movs	r3, #0
 800578c:	2b00      	cmp	r3, #0
 800578e:	d10a      	bne.n	80057a6 <xQueueReceive+0x8e>
	__asm volatile
 8005790:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005794:	f383 8811 	msr	BASEPRI, r3
 8005798:	f3bf 8f6f 	isb	sy
 800579c:	f3bf 8f4f 	dsb	sy
 80057a0:	61bb      	str	r3, [r7, #24]
}
 80057a2:	bf00      	nop
 80057a4:	e7fe      	b.n	80057a4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80057a6:	f002 f84d 	bl	8007844 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80057aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057ae:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80057b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d01f      	beq.n	80057f6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80057b6:	68b9      	ldr	r1, [r7, #8]
 80057b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80057ba:	f000 f9d6 	bl	8005b6a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80057be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c0:	1e5a      	subs	r2, r3, #1
 80057c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057c4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80057c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057c8:	691b      	ldr	r3, [r3, #16]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d00f      	beq.n	80057ee <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80057ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057d0:	3310      	adds	r3, #16
 80057d2:	4618      	mov	r0, r3
 80057d4:	f000 ff2e 	bl	8006634 <xTaskRemoveFromEventList>
 80057d8:	4603      	mov	r3, r0
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d007      	beq.n	80057ee <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80057de:	4b3d      	ldr	r3, [pc, #244]	; (80058d4 <xQueueReceive+0x1bc>)
 80057e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057e4:	601a      	str	r2, [r3, #0]
 80057e6:	f3bf 8f4f 	dsb	sy
 80057ea:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80057ee:	f002 f859 	bl	80078a4 <vPortExitCritical>
				return pdPASS;
 80057f2:	2301      	movs	r3, #1
 80057f4:	e069      	b.n	80058ca <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d103      	bne.n	8005804 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80057fc:	f002 f852 	bl	80078a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005800:	2300      	movs	r3, #0
 8005802:	e062      	b.n	80058ca <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005806:	2b00      	cmp	r3, #0
 8005808:	d106      	bne.n	8005818 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800580a:	f107 0310 	add.w	r3, r7, #16
 800580e:	4618      	mov	r0, r3
 8005810:	f000 ff74 	bl	80066fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005814:	2301      	movs	r3, #1
 8005816:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005818:	f002 f844 	bl	80078a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800581c:	f000 fce6 	bl	80061ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005820:	f002 f810 	bl	8007844 <vPortEnterCritical>
 8005824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005826:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800582a:	b25b      	sxtb	r3, r3
 800582c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005830:	d103      	bne.n	800583a <xQueueReceive+0x122>
 8005832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005834:	2200      	movs	r2, #0
 8005836:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800583a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800583c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005840:	b25b      	sxtb	r3, r3
 8005842:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005846:	d103      	bne.n	8005850 <xQueueReceive+0x138>
 8005848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800584a:	2200      	movs	r2, #0
 800584c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005850:	f002 f828 	bl	80078a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005854:	1d3a      	adds	r2, r7, #4
 8005856:	f107 0310 	add.w	r3, r7, #16
 800585a:	4611      	mov	r1, r2
 800585c:	4618      	mov	r0, r3
 800585e:	f000 ff63 	bl	8006728 <xTaskCheckForTimeOut>
 8005862:	4603      	mov	r3, r0
 8005864:	2b00      	cmp	r3, #0
 8005866:	d123      	bne.n	80058b0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005868:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800586a:	f000 f9f6 	bl	8005c5a <prvIsQueueEmpty>
 800586e:	4603      	mov	r3, r0
 8005870:	2b00      	cmp	r3, #0
 8005872:	d017      	beq.n	80058a4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005876:	3324      	adds	r3, #36	; 0x24
 8005878:	687a      	ldr	r2, [r7, #4]
 800587a:	4611      	mov	r1, r2
 800587c:	4618      	mov	r0, r3
 800587e:	f000 fe89 	bl	8006594 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005882:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005884:	f000 f997 	bl	8005bb6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005888:	f000 fcbe 	bl	8006208 <xTaskResumeAll>
 800588c:	4603      	mov	r3, r0
 800588e:	2b00      	cmp	r3, #0
 8005890:	d189      	bne.n	80057a6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005892:	4b10      	ldr	r3, [pc, #64]	; (80058d4 <xQueueReceive+0x1bc>)
 8005894:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005898:	601a      	str	r2, [r3, #0]
 800589a:	f3bf 8f4f 	dsb	sy
 800589e:	f3bf 8f6f 	isb	sy
 80058a2:	e780      	b.n	80057a6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80058a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80058a6:	f000 f986 	bl	8005bb6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80058aa:	f000 fcad 	bl	8006208 <xTaskResumeAll>
 80058ae:	e77a      	b.n	80057a6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80058b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80058b2:	f000 f980 	bl	8005bb6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80058b6:	f000 fca7 	bl	8006208 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80058ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80058bc:	f000 f9cd 	bl	8005c5a <prvIsQueueEmpty>
 80058c0:	4603      	mov	r3, r0
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	f43f af6f 	beq.w	80057a6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80058c8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80058ca:	4618      	mov	r0, r3
 80058cc:	3730      	adds	r7, #48	; 0x30
 80058ce:	46bd      	mov	sp, r7
 80058d0:	bd80      	pop	{r7, pc}
 80058d2:	bf00      	nop
 80058d4:	e000ed04 	.word	0xe000ed04

080058d8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b08e      	sub	sp, #56	; 0x38
 80058dc:	af00      	add	r7, sp, #0
 80058de:	60f8      	str	r0, [r7, #12]
 80058e0:	60b9      	str	r1, [r7, #8]
 80058e2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80058e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d10a      	bne.n	8005904 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80058ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058f2:	f383 8811 	msr	BASEPRI, r3
 80058f6:	f3bf 8f6f 	isb	sy
 80058fa:	f3bf 8f4f 	dsb	sy
 80058fe:	623b      	str	r3, [r7, #32]
}
 8005900:	bf00      	nop
 8005902:	e7fe      	b.n	8005902 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d103      	bne.n	8005912 <xQueueReceiveFromISR+0x3a>
 800590a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800590c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800590e:	2b00      	cmp	r3, #0
 8005910:	d101      	bne.n	8005916 <xQueueReceiveFromISR+0x3e>
 8005912:	2301      	movs	r3, #1
 8005914:	e000      	b.n	8005918 <xQueueReceiveFromISR+0x40>
 8005916:	2300      	movs	r3, #0
 8005918:	2b00      	cmp	r3, #0
 800591a:	d10a      	bne.n	8005932 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800591c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005920:	f383 8811 	msr	BASEPRI, r3
 8005924:	f3bf 8f6f 	isb	sy
 8005928:	f3bf 8f4f 	dsb	sy
 800592c:	61fb      	str	r3, [r7, #28]
}
 800592e:	bf00      	nop
 8005930:	e7fe      	b.n	8005930 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005932:	f002 f869 	bl	8007a08 <vPortValidateInterruptPriority>
	__asm volatile
 8005936:	f3ef 8211 	mrs	r2, BASEPRI
 800593a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800593e:	f383 8811 	msr	BASEPRI, r3
 8005942:	f3bf 8f6f 	isb	sy
 8005946:	f3bf 8f4f 	dsb	sy
 800594a:	61ba      	str	r2, [r7, #24]
 800594c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800594e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005950:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005956:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800595a:	2b00      	cmp	r3, #0
 800595c:	d02f      	beq.n	80059be <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800595e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005960:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005964:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005968:	68b9      	ldr	r1, [r7, #8]
 800596a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800596c:	f000 f8fd 	bl	8005b6a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005972:	1e5a      	subs	r2, r3, #1
 8005974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005976:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005978:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800597c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005980:	d112      	bne.n	80059a8 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005984:	691b      	ldr	r3, [r3, #16]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d016      	beq.n	80059b8 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800598a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800598c:	3310      	adds	r3, #16
 800598e:	4618      	mov	r0, r3
 8005990:	f000 fe50 	bl	8006634 <xTaskRemoveFromEventList>
 8005994:	4603      	mov	r3, r0
 8005996:	2b00      	cmp	r3, #0
 8005998:	d00e      	beq.n	80059b8 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d00b      	beq.n	80059b8 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2201      	movs	r2, #1
 80059a4:	601a      	str	r2, [r3, #0]
 80059a6:	e007      	b.n	80059b8 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80059a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80059ac:	3301      	adds	r3, #1
 80059ae:	b2db      	uxtb	r3, r3
 80059b0:	b25a      	sxtb	r2, r3
 80059b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80059b8:	2301      	movs	r3, #1
 80059ba:	637b      	str	r3, [r7, #52]	; 0x34
 80059bc:	e001      	b.n	80059c2 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80059be:	2300      	movs	r3, #0
 80059c0:	637b      	str	r3, [r7, #52]	; 0x34
 80059c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059c4:	613b      	str	r3, [r7, #16]
	__asm volatile
 80059c6:	693b      	ldr	r3, [r7, #16]
 80059c8:	f383 8811 	msr	BASEPRI, r3
}
 80059cc:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80059ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80059d0:	4618      	mov	r0, r3
 80059d2:	3738      	adds	r7, #56	; 0x38
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bd80      	pop	{r7, pc}

080059d8 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b084      	sub	sp, #16
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d10a      	bne.n	80059fc <uxQueueMessagesWaiting+0x24>
	__asm volatile
 80059e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059ea:	f383 8811 	msr	BASEPRI, r3
 80059ee:	f3bf 8f6f 	isb	sy
 80059f2:	f3bf 8f4f 	dsb	sy
 80059f6:	60bb      	str	r3, [r7, #8]
}
 80059f8:	bf00      	nop
 80059fa:	e7fe      	b.n	80059fa <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 80059fc:	f001 ff22 	bl	8007844 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a04:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8005a06:	f001 ff4d 	bl	80078a4 <vPortExitCritical>

	return uxReturn;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	3710      	adds	r7, #16
 8005a10:	46bd      	mov	sp, r7
 8005a12:	bd80      	pop	{r7, pc}

08005a14 <uxQueueSpacesAvailable>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b086      	sub	sp, #24
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8005a20:	697b      	ldr	r3, [r7, #20]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d10a      	bne.n	8005a3c <uxQueueSpacesAvailable+0x28>
	__asm volatile
 8005a26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a2a:	f383 8811 	msr	BASEPRI, r3
 8005a2e:	f3bf 8f6f 	isb	sy
 8005a32:	f3bf 8f4f 	dsb	sy
 8005a36:	60fb      	str	r3, [r7, #12]
}
 8005a38:	bf00      	nop
 8005a3a:	e7fe      	b.n	8005a3a <uxQueueSpacesAvailable+0x26>

	taskENTER_CRITICAL();
 8005a3c:	f001 ff02 	bl	8007844 <vPortEnterCritical>
	{
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a44:	697b      	ldr	r3, [r7, #20]
 8005a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a48:	1ad3      	subs	r3, r2, r3
 8005a4a:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8005a4c:	f001 ff2a 	bl	80078a4 <vPortExitCritical>

	return uxReturn;
 8005a50:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8005a52:	4618      	mov	r0, r3
 8005a54:	3718      	adds	r7, #24
 8005a56:	46bd      	mov	sp, r7
 8005a58:	bd80      	pop	{r7, pc}

08005a5a <uxQueueMessagesWaitingFromISR>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8005a5a:	b480      	push	{r7}
 8005a5c:	b087      	sub	sp, #28
 8005a5e:	af00      	add	r7, sp, #0
 8005a60:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8005a66:	697b      	ldr	r3, [r7, #20]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d10a      	bne.n	8005a82 <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 8005a6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a70:	f383 8811 	msr	BASEPRI, r3
 8005a74:	f3bf 8f6f 	isb	sy
 8005a78:	f3bf 8f4f 	dsb	sy
 8005a7c:	60fb      	str	r3, [r7, #12]
}
 8005a7e:	bf00      	nop
 8005a80:	e7fe      	b.n	8005a80 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 8005a82:	697b      	ldr	r3, [r7, #20]
 8005a84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a86:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8005a88:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	371c      	adds	r7, #28
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a94:	4770      	bx	lr

08005a96 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005a96:	b580      	push	{r7, lr}
 8005a98:	b086      	sub	sp, #24
 8005a9a:	af00      	add	r7, sp, #0
 8005a9c:	60f8      	str	r0, [r7, #12]
 8005a9e:	60b9      	str	r1, [r7, #8]
 8005aa0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aaa:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d10d      	bne.n	8005ad0 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d14d      	bne.n	8005b58 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	689b      	ldr	r3, [r3, #8]
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	f000 ff93 	bl	80069ec <xTaskPriorityDisinherit>
 8005ac6:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	2200      	movs	r2, #0
 8005acc:	609a      	str	r2, [r3, #8]
 8005ace:	e043      	b.n	8005b58 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d119      	bne.n	8005b0a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	6858      	ldr	r0, [r3, #4]
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ade:	461a      	mov	r2, r3
 8005ae0:	68b9      	ldr	r1, [r7, #8]
 8005ae2:	f002 f9e9 	bl	8007eb8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	685a      	ldr	r2, [r3, #4]
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aee:	441a      	add	r2, r3
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	685a      	ldr	r2, [r3, #4]
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	689b      	ldr	r3, [r3, #8]
 8005afc:	429a      	cmp	r2, r3
 8005afe:	d32b      	bcc.n	8005b58 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681a      	ldr	r2, [r3, #0]
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	605a      	str	r2, [r3, #4]
 8005b08:	e026      	b.n	8005b58 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	68d8      	ldr	r0, [r3, #12]
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b12:	461a      	mov	r2, r3
 8005b14:	68b9      	ldr	r1, [r7, #8]
 8005b16:	f002 f9cf 	bl	8007eb8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	68da      	ldr	r2, [r3, #12]
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b22:	425b      	negs	r3, r3
 8005b24:	441a      	add	r2, r3
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	68da      	ldr	r2, [r3, #12]
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	429a      	cmp	r2, r3
 8005b34:	d207      	bcs.n	8005b46 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	689a      	ldr	r2, [r3, #8]
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b3e:	425b      	negs	r3, r3
 8005b40:	441a      	add	r2, r3
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2b02      	cmp	r3, #2
 8005b4a:	d105      	bne.n	8005b58 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005b4c:	693b      	ldr	r3, [r7, #16]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d002      	beq.n	8005b58 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005b52:	693b      	ldr	r3, [r7, #16]
 8005b54:	3b01      	subs	r3, #1
 8005b56:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005b58:	693b      	ldr	r3, [r7, #16]
 8005b5a:	1c5a      	adds	r2, r3, #1
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005b60:	697b      	ldr	r3, [r7, #20]
}
 8005b62:	4618      	mov	r0, r3
 8005b64:	3718      	adds	r7, #24
 8005b66:	46bd      	mov	sp, r7
 8005b68:	bd80      	pop	{r7, pc}

08005b6a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005b6a:	b580      	push	{r7, lr}
 8005b6c:	b082      	sub	sp, #8
 8005b6e:	af00      	add	r7, sp, #0
 8005b70:	6078      	str	r0, [r7, #4]
 8005b72:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d018      	beq.n	8005bae <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	68da      	ldr	r2, [r3, #12]
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b84:	441a      	add	r2, r3
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	68da      	ldr	r2, [r3, #12]
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	689b      	ldr	r3, [r3, #8]
 8005b92:	429a      	cmp	r2, r3
 8005b94:	d303      	bcc.n	8005b9e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681a      	ldr	r2, [r3, #0]
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	68d9      	ldr	r1, [r3, #12]
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ba6:	461a      	mov	r2, r3
 8005ba8:	6838      	ldr	r0, [r7, #0]
 8005baa:	f002 f985 	bl	8007eb8 <memcpy>
	}
}
 8005bae:	bf00      	nop
 8005bb0:	3708      	adds	r7, #8
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bd80      	pop	{r7, pc}

08005bb6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005bb6:	b580      	push	{r7, lr}
 8005bb8:	b084      	sub	sp, #16
 8005bba:	af00      	add	r7, sp, #0
 8005bbc:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005bbe:	f001 fe41 	bl	8007844 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005bc8:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005bca:	e011      	b.n	8005bf0 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d012      	beq.n	8005bfa <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	3324      	adds	r3, #36	; 0x24
 8005bd8:	4618      	mov	r0, r3
 8005bda:	f000 fd2b 	bl	8006634 <xTaskRemoveFromEventList>
 8005bde:	4603      	mov	r3, r0
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d001      	beq.n	8005be8 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005be4:	f000 fe02 	bl	80067ec <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005be8:	7bfb      	ldrb	r3, [r7, #15]
 8005bea:	3b01      	subs	r3, #1
 8005bec:	b2db      	uxtb	r3, r3
 8005bee:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005bf0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	dce9      	bgt.n	8005bcc <prvUnlockQueue+0x16>
 8005bf8:	e000      	b.n	8005bfc <prvUnlockQueue+0x46>
					break;
 8005bfa:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	22ff      	movs	r2, #255	; 0xff
 8005c00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005c04:	f001 fe4e 	bl	80078a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005c08:	f001 fe1c 	bl	8007844 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005c12:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005c14:	e011      	b.n	8005c3a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	691b      	ldr	r3, [r3, #16]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d012      	beq.n	8005c44 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	3310      	adds	r3, #16
 8005c22:	4618      	mov	r0, r3
 8005c24:	f000 fd06 	bl	8006634 <xTaskRemoveFromEventList>
 8005c28:	4603      	mov	r3, r0
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d001      	beq.n	8005c32 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005c2e:	f000 fddd 	bl	80067ec <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005c32:	7bbb      	ldrb	r3, [r7, #14]
 8005c34:	3b01      	subs	r3, #1
 8005c36:	b2db      	uxtb	r3, r3
 8005c38:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005c3a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	dce9      	bgt.n	8005c16 <prvUnlockQueue+0x60>
 8005c42:	e000      	b.n	8005c46 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005c44:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	22ff      	movs	r2, #255	; 0xff
 8005c4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005c4e:	f001 fe29 	bl	80078a4 <vPortExitCritical>
}
 8005c52:	bf00      	nop
 8005c54:	3710      	adds	r7, #16
 8005c56:	46bd      	mov	sp, r7
 8005c58:	bd80      	pop	{r7, pc}

08005c5a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005c5a:	b580      	push	{r7, lr}
 8005c5c:	b084      	sub	sp, #16
 8005c5e:	af00      	add	r7, sp, #0
 8005c60:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005c62:	f001 fdef 	bl	8007844 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d102      	bne.n	8005c74 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005c6e:	2301      	movs	r3, #1
 8005c70:	60fb      	str	r3, [r7, #12]
 8005c72:	e001      	b.n	8005c78 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005c74:	2300      	movs	r3, #0
 8005c76:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005c78:	f001 fe14 	bl	80078a4 <vPortExitCritical>

	return xReturn;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
}
 8005c7e:	4618      	mov	r0, r3
 8005c80:	3710      	adds	r7, #16
 8005c82:	46bd      	mov	sp, r7
 8005c84:	bd80      	pop	{r7, pc}

08005c86 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005c86:	b580      	push	{r7, lr}
 8005c88:	b084      	sub	sp, #16
 8005c8a:	af00      	add	r7, sp, #0
 8005c8c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005c8e:	f001 fdd9 	bl	8007844 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c9a:	429a      	cmp	r2, r3
 8005c9c:	d102      	bne.n	8005ca4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	60fb      	str	r3, [r7, #12]
 8005ca2:	e001      	b.n	8005ca8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005ca8:	f001 fdfc 	bl	80078a4 <vPortExitCritical>

	return xReturn;
 8005cac:	68fb      	ldr	r3, [r7, #12]
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	3710      	adds	r7, #16
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bd80      	pop	{r7, pc}
	...

08005cb8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005cb8:	b480      	push	{r7}
 8005cba:	b085      	sub	sp, #20
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
 8005cc0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	60fb      	str	r3, [r7, #12]
 8005cc6:	e014      	b.n	8005cf2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005cc8:	4a0f      	ldr	r2, [pc, #60]	; (8005d08 <vQueueAddToRegistry+0x50>)
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d10b      	bne.n	8005cec <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005cd4:	490c      	ldr	r1, [pc, #48]	; (8005d08 <vQueueAddToRegistry+0x50>)
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	683a      	ldr	r2, [r7, #0]
 8005cda:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005cde:	4a0a      	ldr	r2, [pc, #40]	; (8005d08 <vQueueAddToRegistry+0x50>)
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	00db      	lsls	r3, r3, #3
 8005ce4:	4413      	add	r3, r2
 8005ce6:	687a      	ldr	r2, [r7, #4]
 8005ce8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005cea:	e006      	b.n	8005cfa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	3301      	adds	r3, #1
 8005cf0:	60fb      	str	r3, [r7, #12]
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	2b07      	cmp	r3, #7
 8005cf6:	d9e7      	bls.n	8005cc8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005cf8:	bf00      	nop
 8005cfa:	bf00      	nop
 8005cfc:	3714      	adds	r7, #20
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d04:	4770      	bx	lr
 8005d06:	bf00      	nop
 8005d08:	2000095c 	.word	0x2000095c

08005d0c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b086      	sub	sp, #24
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	60f8      	str	r0, [r7, #12]
 8005d14:	60b9      	str	r1, [r7, #8]
 8005d16:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005d1c:	f001 fd92 	bl	8007844 <vPortEnterCritical>
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005d26:	b25b      	sxtb	r3, r3
 8005d28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005d2c:	d103      	bne.n	8005d36 <vQueueWaitForMessageRestricted+0x2a>
 8005d2e:	697b      	ldr	r3, [r7, #20]
 8005d30:	2200      	movs	r2, #0
 8005d32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d36:	697b      	ldr	r3, [r7, #20]
 8005d38:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005d3c:	b25b      	sxtb	r3, r3
 8005d3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005d42:	d103      	bne.n	8005d4c <vQueueWaitForMessageRestricted+0x40>
 8005d44:	697b      	ldr	r3, [r7, #20]
 8005d46:	2200      	movs	r2, #0
 8005d48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005d4c:	f001 fdaa 	bl	80078a4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005d50:	697b      	ldr	r3, [r7, #20]
 8005d52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d106      	bne.n	8005d66 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005d58:	697b      	ldr	r3, [r7, #20]
 8005d5a:	3324      	adds	r3, #36	; 0x24
 8005d5c:	687a      	ldr	r2, [r7, #4]
 8005d5e:	68b9      	ldr	r1, [r7, #8]
 8005d60:	4618      	mov	r0, r3
 8005d62:	f000 fc3b 	bl	80065dc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005d66:	6978      	ldr	r0, [r7, #20]
 8005d68:	f7ff ff25 	bl	8005bb6 <prvUnlockQueue>
	}
 8005d6c:	bf00      	nop
 8005d6e:	3718      	adds	r7, #24
 8005d70:	46bd      	mov	sp, r7
 8005d72:	bd80      	pop	{r7, pc}

08005d74 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b08e      	sub	sp, #56	; 0x38
 8005d78:	af04      	add	r7, sp, #16
 8005d7a:	60f8      	str	r0, [r7, #12]
 8005d7c:	60b9      	str	r1, [r7, #8]
 8005d7e:	607a      	str	r2, [r7, #4]
 8005d80:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005d82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d10a      	bne.n	8005d9e <xTaskCreateStatic+0x2a>
	__asm volatile
 8005d88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d8c:	f383 8811 	msr	BASEPRI, r3
 8005d90:	f3bf 8f6f 	isb	sy
 8005d94:	f3bf 8f4f 	dsb	sy
 8005d98:	623b      	str	r3, [r7, #32]
}
 8005d9a:	bf00      	nop
 8005d9c:	e7fe      	b.n	8005d9c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005d9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d10a      	bne.n	8005dba <xTaskCreateStatic+0x46>
	__asm volatile
 8005da4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005da8:	f383 8811 	msr	BASEPRI, r3
 8005dac:	f3bf 8f6f 	isb	sy
 8005db0:	f3bf 8f4f 	dsb	sy
 8005db4:	61fb      	str	r3, [r7, #28]
}
 8005db6:	bf00      	nop
 8005db8:	e7fe      	b.n	8005db8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005dba:	235c      	movs	r3, #92	; 0x5c
 8005dbc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005dbe:	693b      	ldr	r3, [r7, #16]
 8005dc0:	2b5c      	cmp	r3, #92	; 0x5c
 8005dc2:	d00a      	beq.n	8005dda <xTaskCreateStatic+0x66>
	__asm volatile
 8005dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dc8:	f383 8811 	msr	BASEPRI, r3
 8005dcc:	f3bf 8f6f 	isb	sy
 8005dd0:	f3bf 8f4f 	dsb	sy
 8005dd4:	61bb      	str	r3, [r7, #24]
}
 8005dd6:	bf00      	nop
 8005dd8:	e7fe      	b.n	8005dd8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005dda:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d01e      	beq.n	8005e20 <xTaskCreateStatic+0xac>
 8005de2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d01b      	beq.n	8005e20 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dea:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005df0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005df4:	2202      	movs	r2, #2
 8005df6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	9303      	str	r3, [sp, #12]
 8005dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e00:	9302      	str	r3, [sp, #8]
 8005e02:	f107 0314 	add.w	r3, r7, #20
 8005e06:	9301      	str	r3, [sp, #4]
 8005e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e0a:	9300      	str	r3, [sp, #0]
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	687a      	ldr	r2, [r7, #4]
 8005e10:	68b9      	ldr	r1, [r7, #8]
 8005e12:	68f8      	ldr	r0, [r7, #12]
 8005e14:	f000 f850 	bl	8005eb8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005e18:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005e1a:	f000 f8dd 	bl	8005fd8 <prvAddNewTaskToReadyList>
 8005e1e:	e001      	b.n	8005e24 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005e20:	2300      	movs	r3, #0
 8005e22:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005e24:	697b      	ldr	r3, [r7, #20]
	}
 8005e26:	4618      	mov	r0, r3
 8005e28:	3728      	adds	r7, #40	; 0x28
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	bd80      	pop	{r7, pc}

08005e2e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005e2e:	b580      	push	{r7, lr}
 8005e30:	b08c      	sub	sp, #48	; 0x30
 8005e32:	af04      	add	r7, sp, #16
 8005e34:	60f8      	str	r0, [r7, #12]
 8005e36:	60b9      	str	r1, [r7, #8]
 8005e38:	603b      	str	r3, [r7, #0]
 8005e3a:	4613      	mov	r3, r2
 8005e3c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005e3e:	88fb      	ldrh	r3, [r7, #6]
 8005e40:	009b      	lsls	r3, r3, #2
 8005e42:	4618      	mov	r0, r3
 8005e44:	f001 fe20 	bl	8007a88 <pvPortMalloc>
 8005e48:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005e4a:	697b      	ldr	r3, [r7, #20]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d00e      	beq.n	8005e6e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005e50:	205c      	movs	r0, #92	; 0x5c
 8005e52:	f001 fe19 	bl	8007a88 <pvPortMalloc>
 8005e56:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005e58:	69fb      	ldr	r3, [r7, #28]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d003      	beq.n	8005e66 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005e5e:	69fb      	ldr	r3, [r7, #28]
 8005e60:	697a      	ldr	r2, [r7, #20]
 8005e62:	631a      	str	r2, [r3, #48]	; 0x30
 8005e64:	e005      	b.n	8005e72 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005e66:	6978      	ldr	r0, [r7, #20]
 8005e68:	f001 feda 	bl	8007c20 <vPortFree>
 8005e6c:	e001      	b.n	8005e72 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005e6e:	2300      	movs	r3, #0
 8005e70:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005e72:	69fb      	ldr	r3, [r7, #28]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d017      	beq.n	8005ea8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005e78:	69fb      	ldr	r3, [r7, #28]
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005e80:	88fa      	ldrh	r2, [r7, #6]
 8005e82:	2300      	movs	r3, #0
 8005e84:	9303      	str	r3, [sp, #12]
 8005e86:	69fb      	ldr	r3, [r7, #28]
 8005e88:	9302      	str	r3, [sp, #8]
 8005e8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e8c:	9301      	str	r3, [sp, #4]
 8005e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e90:	9300      	str	r3, [sp, #0]
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	68b9      	ldr	r1, [r7, #8]
 8005e96:	68f8      	ldr	r0, [r7, #12]
 8005e98:	f000 f80e 	bl	8005eb8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005e9c:	69f8      	ldr	r0, [r7, #28]
 8005e9e:	f000 f89b 	bl	8005fd8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	61bb      	str	r3, [r7, #24]
 8005ea6:	e002      	b.n	8005eae <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005ea8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005eac:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005eae:	69bb      	ldr	r3, [r7, #24]
	}
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	3720      	adds	r7, #32
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	bd80      	pop	{r7, pc}

08005eb8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b088      	sub	sp, #32
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	60f8      	str	r0, [r7, #12]
 8005ec0:	60b9      	str	r1, [r7, #8]
 8005ec2:	607a      	str	r2, [r7, #4]
 8005ec4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ec8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	009b      	lsls	r3, r3, #2
 8005ece:	461a      	mov	r2, r3
 8005ed0:	21a5      	movs	r1, #165	; 0xa5
 8005ed2:	f001 ffff 	bl	8007ed4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ed8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005ee0:	3b01      	subs	r3, #1
 8005ee2:	009b      	lsls	r3, r3, #2
 8005ee4:	4413      	add	r3, r2
 8005ee6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005ee8:	69bb      	ldr	r3, [r7, #24]
 8005eea:	f023 0307 	bic.w	r3, r3, #7
 8005eee:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005ef0:	69bb      	ldr	r3, [r7, #24]
 8005ef2:	f003 0307 	and.w	r3, r3, #7
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d00a      	beq.n	8005f10 <prvInitialiseNewTask+0x58>
	__asm volatile
 8005efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005efe:	f383 8811 	msr	BASEPRI, r3
 8005f02:	f3bf 8f6f 	isb	sy
 8005f06:	f3bf 8f4f 	dsb	sy
 8005f0a:	617b      	str	r3, [r7, #20]
}
 8005f0c:	bf00      	nop
 8005f0e:	e7fe      	b.n	8005f0e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d01f      	beq.n	8005f56 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005f16:	2300      	movs	r3, #0
 8005f18:	61fb      	str	r3, [r7, #28]
 8005f1a:	e012      	b.n	8005f42 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005f1c:	68ba      	ldr	r2, [r7, #8]
 8005f1e:	69fb      	ldr	r3, [r7, #28]
 8005f20:	4413      	add	r3, r2
 8005f22:	7819      	ldrb	r1, [r3, #0]
 8005f24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f26:	69fb      	ldr	r3, [r7, #28]
 8005f28:	4413      	add	r3, r2
 8005f2a:	3334      	adds	r3, #52	; 0x34
 8005f2c:	460a      	mov	r2, r1
 8005f2e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005f30:	68ba      	ldr	r2, [r7, #8]
 8005f32:	69fb      	ldr	r3, [r7, #28]
 8005f34:	4413      	add	r3, r2
 8005f36:	781b      	ldrb	r3, [r3, #0]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d006      	beq.n	8005f4a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005f3c:	69fb      	ldr	r3, [r7, #28]
 8005f3e:	3301      	adds	r3, #1
 8005f40:	61fb      	str	r3, [r7, #28]
 8005f42:	69fb      	ldr	r3, [r7, #28]
 8005f44:	2b0f      	cmp	r3, #15
 8005f46:	d9e9      	bls.n	8005f1c <prvInitialiseNewTask+0x64>
 8005f48:	e000      	b.n	8005f4c <prvInitialiseNewTask+0x94>
			{
				break;
 8005f4a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f4e:	2200      	movs	r2, #0
 8005f50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005f54:	e003      	b.n	8005f5e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f58:	2200      	movs	r2, #0
 8005f5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f60:	2b37      	cmp	r3, #55	; 0x37
 8005f62:	d901      	bls.n	8005f68 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005f64:	2337      	movs	r3, #55	; 0x37
 8005f66:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f6c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f72:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f76:	2200      	movs	r2, #0
 8005f78:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f7c:	3304      	adds	r3, #4
 8005f7e:	4618      	mov	r0, r3
 8005f80:	f7ff f85e 	bl	8005040 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f86:	3318      	adds	r3, #24
 8005f88:	4618      	mov	r0, r3
 8005f8a:	f7ff f859 	bl	8005040 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f92:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f96:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f9c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fa0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005fa2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fac:	2200      	movs	r2, #0
 8005fae:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005fb2:	683a      	ldr	r2, [r7, #0]
 8005fb4:	68f9      	ldr	r1, [r7, #12]
 8005fb6:	69b8      	ldr	r0, [r7, #24]
 8005fb8:	f001 fb16 	bl	80075e8 <pxPortInitialiseStack>
 8005fbc:	4602      	mov	r2, r0
 8005fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fc0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d002      	beq.n	8005fce <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005fc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005fcc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005fce:	bf00      	nop
 8005fd0:	3720      	adds	r7, #32
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bd80      	pop	{r7, pc}
	...

08005fd8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b082      	sub	sp, #8
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005fe0:	f001 fc30 	bl	8007844 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005fe4:	4b2d      	ldr	r3, [pc, #180]	; (800609c <prvAddNewTaskToReadyList+0xc4>)
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	3301      	adds	r3, #1
 8005fea:	4a2c      	ldr	r2, [pc, #176]	; (800609c <prvAddNewTaskToReadyList+0xc4>)
 8005fec:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005fee:	4b2c      	ldr	r3, [pc, #176]	; (80060a0 <prvAddNewTaskToReadyList+0xc8>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d109      	bne.n	800600a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005ff6:	4a2a      	ldr	r2, [pc, #168]	; (80060a0 <prvAddNewTaskToReadyList+0xc8>)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005ffc:	4b27      	ldr	r3, [pc, #156]	; (800609c <prvAddNewTaskToReadyList+0xc4>)
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	2b01      	cmp	r3, #1
 8006002:	d110      	bne.n	8006026 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006004:	f000 fc16 	bl	8006834 <prvInitialiseTaskLists>
 8006008:	e00d      	b.n	8006026 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800600a:	4b26      	ldr	r3, [pc, #152]	; (80060a4 <prvAddNewTaskToReadyList+0xcc>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d109      	bne.n	8006026 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006012:	4b23      	ldr	r3, [pc, #140]	; (80060a0 <prvAddNewTaskToReadyList+0xc8>)
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800601c:	429a      	cmp	r2, r3
 800601e:	d802      	bhi.n	8006026 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006020:	4a1f      	ldr	r2, [pc, #124]	; (80060a0 <prvAddNewTaskToReadyList+0xc8>)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006026:	4b20      	ldr	r3, [pc, #128]	; (80060a8 <prvAddNewTaskToReadyList+0xd0>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	3301      	adds	r3, #1
 800602c:	4a1e      	ldr	r2, [pc, #120]	; (80060a8 <prvAddNewTaskToReadyList+0xd0>)
 800602e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006030:	4b1d      	ldr	r3, [pc, #116]	; (80060a8 <prvAddNewTaskToReadyList+0xd0>)
 8006032:	681a      	ldr	r2, [r3, #0]
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800603c:	4b1b      	ldr	r3, [pc, #108]	; (80060ac <prvAddNewTaskToReadyList+0xd4>)
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	429a      	cmp	r2, r3
 8006042:	d903      	bls.n	800604c <prvAddNewTaskToReadyList+0x74>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006048:	4a18      	ldr	r2, [pc, #96]	; (80060ac <prvAddNewTaskToReadyList+0xd4>)
 800604a:	6013      	str	r3, [r2, #0]
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006050:	4613      	mov	r3, r2
 8006052:	009b      	lsls	r3, r3, #2
 8006054:	4413      	add	r3, r2
 8006056:	009b      	lsls	r3, r3, #2
 8006058:	4a15      	ldr	r2, [pc, #84]	; (80060b0 <prvAddNewTaskToReadyList+0xd8>)
 800605a:	441a      	add	r2, r3
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	3304      	adds	r3, #4
 8006060:	4619      	mov	r1, r3
 8006062:	4610      	mov	r0, r2
 8006064:	f7fe fff9 	bl	800505a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006068:	f001 fc1c 	bl	80078a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800606c:	4b0d      	ldr	r3, [pc, #52]	; (80060a4 <prvAddNewTaskToReadyList+0xcc>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d00e      	beq.n	8006092 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006074:	4b0a      	ldr	r3, [pc, #40]	; (80060a0 <prvAddNewTaskToReadyList+0xc8>)
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800607e:	429a      	cmp	r2, r3
 8006080:	d207      	bcs.n	8006092 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006082:	4b0c      	ldr	r3, [pc, #48]	; (80060b4 <prvAddNewTaskToReadyList+0xdc>)
 8006084:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006088:	601a      	str	r2, [r3, #0]
 800608a:	f3bf 8f4f 	dsb	sy
 800608e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006092:	bf00      	nop
 8006094:	3708      	adds	r7, #8
 8006096:	46bd      	mov	sp, r7
 8006098:	bd80      	pop	{r7, pc}
 800609a:	bf00      	nop
 800609c:	20000e70 	.word	0x20000e70
 80060a0:	2000099c 	.word	0x2000099c
 80060a4:	20000e7c 	.word	0x20000e7c
 80060a8:	20000e8c 	.word	0x20000e8c
 80060ac:	20000e78 	.word	0x20000e78
 80060b0:	200009a0 	.word	0x200009a0
 80060b4:	e000ed04 	.word	0xe000ed04

080060b8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b084      	sub	sp, #16
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80060c0:	2300      	movs	r3, #0
 80060c2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d017      	beq.n	80060fa <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80060ca:	4b13      	ldr	r3, [pc, #76]	; (8006118 <vTaskDelay+0x60>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d00a      	beq.n	80060e8 <vTaskDelay+0x30>
	__asm volatile
 80060d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060d6:	f383 8811 	msr	BASEPRI, r3
 80060da:	f3bf 8f6f 	isb	sy
 80060de:	f3bf 8f4f 	dsb	sy
 80060e2:	60bb      	str	r3, [r7, #8]
}
 80060e4:	bf00      	nop
 80060e6:	e7fe      	b.n	80060e6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80060e8:	f000 f880 	bl	80061ec <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80060ec:	2100      	movs	r1, #0
 80060ee:	6878      	ldr	r0, [r7, #4]
 80060f0:	f000 fed8 	bl	8006ea4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80060f4:	f000 f888 	bl	8006208 <xTaskResumeAll>
 80060f8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d107      	bne.n	8006110 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006100:	4b06      	ldr	r3, [pc, #24]	; (800611c <vTaskDelay+0x64>)
 8006102:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006106:	601a      	str	r2, [r3, #0]
 8006108:	f3bf 8f4f 	dsb	sy
 800610c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006110:	bf00      	nop
 8006112:	3710      	adds	r7, #16
 8006114:	46bd      	mov	sp, r7
 8006116:	bd80      	pop	{r7, pc}
 8006118:	20000e98 	.word	0x20000e98
 800611c:	e000ed04 	.word	0xe000ed04

08006120 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b08a      	sub	sp, #40	; 0x28
 8006124:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006126:	2300      	movs	r3, #0
 8006128:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800612a:	2300      	movs	r3, #0
 800612c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800612e:	463a      	mov	r2, r7
 8006130:	1d39      	adds	r1, r7, #4
 8006132:	f107 0308 	add.w	r3, r7, #8
 8006136:	4618      	mov	r0, r3
 8006138:	f7fe ff2e 	bl	8004f98 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800613c:	6839      	ldr	r1, [r7, #0]
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	68ba      	ldr	r2, [r7, #8]
 8006142:	9202      	str	r2, [sp, #8]
 8006144:	9301      	str	r3, [sp, #4]
 8006146:	2300      	movs	r3, #0
 8006148:	9300      	str	r3, [sp, #0]
 800614a:	2300      	movs	r3, #0
 800614c:	460a      	mov	r2, r1
 800614e:	4921      	ldr	r1, [pc, #132]	; (80061d4 <vTaskStartScheduler+0xb4>)
 8006150:	4821      	ldr	r0, [pc, #132]	; (80061d8 <vTaskStartScheduler+0xb8>)
 8006152:	f7ff fe0f 	bl	8005d74 <xTaskCreateStatic>
 8006156:	4603      	mov	r3, r0
 8006158:	4a20      	ldr	r2, [pc, #128]	; (80061dc <vTaskStartScheduler+0xbc>)
 800615a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800615c:	4b1f      	ldr	r3, [pc, #124]	; (80061dc <vTaskStartScheduler+0xbc>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d002      	beq.n	800616a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006164:	2301      	movs	r3, #1
 8006166:	617b      	str	r3, [r7, #20]
 8006168:	e001      	b.n	800616e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800616a:	2300      	movs	r3, #0
 800616c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800616e:	697b      	ldr	r3, [r7, #20]
 8006170:	2b01      	cmp	r3, #1
 8006172:	d102      	bne.n	800617a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006174:	f000 feea 	bl	8006f4c <xTimerCreateTimerTask>
 8006178:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800617a:	697b      	ldr	r3, [r7, #20]
 800617c:	2b01      	cmp	r3, #1
 800617e:	d116      	bne.n	80061ae <vTaskStartScheduler+0x8e>
	__asm volatile
 8006180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006184:	f383 8811 	msr	BASEPRI, r3
 8006188:	f3bf 8f6f 	isb	sy
 800618c:	f3bf 8f4f 	dsb	sy
 8006190:	613b      	str	r3, [r7, #16]
}
 8006192:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006194:	4b12      	ldr	r3, [pc, #72]	; (80061e0 <vTaskStartScheduler+0xc0>)
 8006196:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800619a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800619c:	4b11      	ldr	r3, [pc, #68]	; (80061e4 <vTaskStartScheduler+0xc4>)
 800619e:	2201      	movs	r2, #1
 80061a0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80061a2:	4b11      	ldr	r3, [pc, #68]	; (80061e8 <vTaskStartScheduler+0xc8>)
 80061a4:	2200      	movs	r2, #0
 80061a6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80061a8:	f001 faaa 	bl	8007700 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80061ac:	e00e      	b.n	80061cc <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80061ae:	697b      	ldr	r3, [r7, #20]
 80061b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80061b4:	d10a      	bne.n	80061cc <vTaskStartScheduler+0xac>
	__asm volatile
 80061b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061ba:	f383 8811 	msr	BASEPRI, r3
 80061be:	f3bf 8f6f 	isb	sy
 80061c2:	f3bf 8f4f 	dsb	sy
 80061c6:	60fb      	str	r3, [r7, #12]
}
 80061c8:	bf00      	nop
 80061ca:	e7fe      	b.n	80061ca <vTaskStartScheduler+0xaa>
}
 80061cc:	bf00      	nop
 80061ce:	3718      	adds	r7, #24
 80061d0:	46bd      	mov	sp, r7
 80061d2:	bd80      	pop	{r7, pc}
 80061d4:	08008fe0 	.word	0x08008fe0
 80061d8:	08006805 	.word	0x08006805
 80061dc:	20000e94 	.word	0x20000e94
 80061e0:	20000e90 	.word	0x20000e90
 80061e4:	20000e7c 	.word	0x20000e7c
 80061e8:	20000e74 	.word	0x20000e74

080061ec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80061ec:	b480      	push	{r7}
 80061ee:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80061f0:	4b04      	ldr	r3, [pc, #16]	; (8006204 <vTaskSuspendAll+0x18>)
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	3301      	adds	r3, #1
 80061f6:	4a03      	ldr	r2, [pc, #12]	; (8006204 <vTaskSuspendAll+0x18>)
 80061f8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80061fa:	bf00      	nop
 80061fc:	46bd      	mov	sp, r7
 80061fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006202:	4770      	bx	lr
 8006204:	20000e98 	.word	0x20000e98

08006208 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b084      	sub	sp, #16
 800620c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800620e:	2300      	movs	r3, #0
 8006210:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006212:	2300      	movs	r3, #0
 8006214:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006216:	4b42      	ldr	r3, [pc, #264]	; (8006320 <xTaskResumeAll+0x118>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d10a      	bne.n	8006234 <xTaskResumeAll+0x2c>
	__asm volatile
 800621e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006222:	f383 8811 	msr	BASEPRI, r3
 8006226:	f3bf 8f6f 	isb	sy
 800622a:	f3bf 8f4f 	dsb	sy
 800622e:	603b      	str	r3, [r7, #0]
}
 8006230:	bf00      	nop
 8006232:	e7fe      	b.n	8006232 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006234:	f001 fb06 	bl	8007844 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006238:	4b39      	ldr	r3, [pc, #228]	; (8006320 <xTaskResumeAll+0x118>)
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	3b01      	subs	r3, #1
 800623e:	4a38      	ldr	r2, [pc, #224]	; (8006320 <xTaskResumeAll+0x118>)
 8006240:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006242:	4b37      	ldr	r3, [pc, #220]	; (8006320 <xTaskResumeAll+0x118>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d162      	bne.n	8006310 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800624a:	4b36      	ldr	r3, [pc, #216]	; (8006324 <xTaskResumeAll+0x11c>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d05e      	beq.n	8006310 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006252:	e02f      	b.n	80062b4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006254:	4b34      	ldr	r3, [pc, #208]	; (8006328 <xTaskResumeAll+0x120>)
 8006256:	68db      	ldr	r3, [r3, #12]
 8006258:	68db      	ldr	r3, [r3, #12]
 800625a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	3318      	adds	r3, #24
 8006260:	4618      	mov	r0, r3
 8006262:	f7fe ff57 	bl	8005114 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	3304      	adds	r3, #4
 800626a:	4618      	mov	r0, r3
 800626c:	f7fe ff52 	bl	8005114 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006274:	4b2d      	ldr	r3, [pc, #180]	; (800632c <xTaskResumeAll+0x124>)
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	429a      	cmp	r2, r3
 800627a:	d903      	bls.n	8006284 <xTaskResumeAll+0x7c>
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006280:	4a2a      	ldr	r2, [pc, #168]	; (800632c <xTaskResumeAll+0x124>)
 8006282:	6013      	str	r3, [r2, #0]
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006288:	4613      	mov	r3, r2
 800628a:	009b      	lsls	r3, r3, #2
 800628c:	4413      	add	r3, r2
 800628e:	009b      	lsls	r3, r3, #2
 8006290:	4a27      	ldr	r2, [pc, #156]	; (8006330 <xTaskResumeAll+0x128>)
 8006292:	441a      	add	r2, r3
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	3304      	adds	r3, #4
 8006298:	4619      	mov	r1, r3
 800629a:	4610      	mov	r0, r2
 800629c:	f7fe fedd 	bl	800505a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062a4:	4b23      	ldr	r3, [pc, #140]	; (8006334 <xTaskResumeAll+0x12c>)
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062aa:	429a      	cmp	r2, r3
 80062ac:	d302      	bcc.n	80062b4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80062ae:	4b22      	ldr	r3, [pc, #136]	; (8006338 <xTaskResumeAll+0x130>)
 80062b0:	2201      	movs	r2, #1
 80062b2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80062b4:	4b1c      	ldr	r3, [pc, #112]	; (8006328 <xTaskResumeAll+0x120>)
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d1cb      	bne.n	8006254 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d001      	beq.n	80062c6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80062c2:	f000 fb55 	bl	8006970 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80062c6:	4b1d      	ldr	r3, [pc, #116]	; (800633c <xTaskResumeAll+0x134>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d010      	beq.n	80062f4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80062d2:	f000 f847 	bl	8006364 <xTaskIncrementTick>
 80062d6:	4603      	mov	r3, r0
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d002      	beq.n	80062e2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80062dc:	4b16      	ldr	r3, [pc, #88]	; (8006338 <xTaskResumeAll+0x130>)
 80062de:	2201      	movs	r2, #1
 80062e0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	3b01      	subs	r3, #1
 80062e6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d1f1      	bne.n	80062d2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80062ee:	4b13      	ldr	r3, [pc, #76]	; (800633c <xTaskResumeAll+0x134>)
 80062f0:	2200      	movs	r2, #0
 80062f2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80062f4:	4b10      	ldr	r3, [pc, #64]	; (8006338 <xTaskResumeAll+0x130>)
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d009      	beq.n	8006310 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80062fc:	2301      	movs	r3, #1
 80062fe:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006300:	4b0f      	ldr	r3, [pc, #60]	; (8006340 <xTaskResumeAll+0x138>)
 8006302:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006306:	601a      	str	r2, [r3, #0]
 8006308:	f3bf 8f4f 	dsb	sy
 800630c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006310:	f001 fac8 	bl	80078a4 <vPortExitCritical>

	return xAlreadyYielded;
 8006314:	68bb      	ldr	r3, [r7, #8]
}
 8006316:	4618      	mov	r0, r3
 8006318:	3710      	adds	r7, #16
 800631a:	46bd      	mov	sp, r7
 800631c:	bd80      	pop	{r7, pc}
 800631e:	bf00      	nop
 8006320:	20000e98 	.word	0x20000e98
 8006324:	20000e70 	.word	0x20000e70
 8006328:	20000e30 	.word	0x20000e30
 800632c:	20000e78 	.word	0x20000e78
 8006330:	200009a0 	.word	0x200009a0
 8006334:	2000099c 	.word	0x2000099c
 8006338:	20000e84 	.word	0x20000e84
 800633c:	20000e80 	.word	0x20000e80
 8006340:	e000ed04 	.word	0xe000ed04

08006344 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006344:	b480      	push	{r7}
 8006346:	b083      	sub	sp, #12
 8006348:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800634a:	4b05      	ldr	r3, [pc, #20]	; (8006360 <xTaskGetTickCount+0x1c>)
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006350:	687b      	ldr	r3, [r7, #4]
}
 8006352:	4618      	mov	r0, r3
 8006354:	370c      	adds	r7, #12
 8006356:	46bd      	mov	sp, r7
 8006358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635c:	4770      	bx	lr
 800635e:	bf00      	nop
 8006360:	20000e74 	.word	0x20000e74

08006364 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b086      	sub	sp, #24
 8006368:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800636a:	2300      	movs	r3, #0
 800636c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800636e:	4b4f      	ldr	r3, [pc, #316]	; (80064ac <xTaskIncrementTick+0x148>)
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	2b00      	cmp	r3, #0
 8006374:	f040 808f 	bne.w	8006496 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006378:	4b4d      	ldr	r3, [pc, #308]	; (80064b0 <xTaskIncrementTick+0x14c>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	3301      	adds	r3, #1
 800637e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006380:	4a4b      	ldr	r2, [pc, #300]	; (80064b0 <xTaskIncrementTick+0x14c>)
 8006382:	693b      	ldr	r3, [r7, #16]
 8006384:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006386:	693b      	ldr	r3, [r7, #16]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d120      	bne.n	80063ce <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800638c:	4b49      	ldr	r3, [pc, #292]	; (80064b4 <xTaskIncrementTick+0x150>)
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d00a      	beq.n	80063ac <xTaskIncrementTick+0x48>
	__asm volatile
 8006396:	f04f 0350 	mov.w	r3, #80	; 0x50
 800639a:	f383 8811 	msr	BASEPRI, r3
 800639e:	f3bf 8f6f 	isb	sy
 80063a2:	f3bf 8f4f 	dsb	sy
 80063a6:	603b      	str	r3, [r7, #0]
}
 80063a8:	bf00      	nop
 80063aa:	e7fe      	b.n	80063aa <xTaskIncrementTick+0x46>
 80063ac:	4b41      	ldr	r3, [pc, #260]	; (80064b4 <xTaskIncrementTick+0x150>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	60fb      	str	r3, [r7, #12]
 80063b2:	4b41      	ldr	r3, [pc, #260]	; (80064b8 <xTaskIncrementTick+0x154>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	4a3f      	ldr	r2, [pc, #252]	; (80064b4 <xTaskIncrementTick+0x150>)
 80063b8:	6013      	str	r3, [r2, #0]
 80063ba:	4a3f      	ldr	r2, [pc, #252]	; (80064b8 <xTaskIncrementTick+0x154>)
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	6013      	str	r3, [r2, #0]
 80063c0:	4b3e      	ldr	r3, [pc, #248]	; (80064bc <xTaskIncrementTick+0x158>)
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	3301      	adds	r3, #1
 80063c6:	4a3d      	ldr	r2, [pc, #244]	; (80064bc <xTaskIncrementTick+0x158>)
 80063c8:	6013      	str	r3, [r2, #0]
 80063ca:	f000 fad1 	bl	8006970 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80063ce:	4b3c      	ldr	r3, [pc, #240]	; (80064c0 <xTaskIncrementTick+0x15c>)
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	693a      	ldr	r2, [r7, #16]
 80063d4:	429a      	cmp	r2, r3
 80063d6:	d349      	bcc.n	800646c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80063d8:	4b36      	ldr	r3, [pc, #216]	; (80064b4 <xTaskIncrementTick+0x150>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d104      	bne.n	80063ec <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80063e2:	4b37      	ldr	r3, [pc, #220]	; (80064c0 <xTaskIncrementTick+0x15c>)
 80063e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80063e8:	601a      	str	r2, [r3, #0]
					break;
 80063ea:	e03f      	b.n	800646c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063ec:	4b31      	ldr	r3, [pc, #196]	; (80064b4 <xTaskIncrementTick+0x150>)
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	68db      	ldr	r3, [r3, #12]
 80063f2:	68db      	ldr	r3, [r3, #12]
 80063f4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80063f6:	68bb      	ldr	r3, [r7, #8]
 80063f8:	685b      	ldr	r3, [r3, #4]
 80063fa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80063fc:	693a      	ldr	r2, [r7, #16]
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	429a      	cmp	r2, r3
 8006402:	d203      	bcs.n	800640c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006404:	4a2e      	ldr	r2, [pc, #184]	; (80064c0 <xTaskIncrementTick+0x15c>)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800640a:	e02f      	b.n	800646c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	3304      	adds	r3, #4
 8006410:	4618      	mov	r0, r3
 8006412:	f7fe fe7f 	bl	8005114 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006416:	68bb      	ldr	r3, [r7, #8]
 8006418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800641a:	2b00      	cmp	r3, #0
 800641c:	d004      	beq.n	8006428 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800641e:	68bb      	ldr	r3, [r7, #8]
 8006420:	3318      	adds	r3, #24
 8006422:	4618      	mov	r0, r3
 8006424:	f7fe fe76 	bl	8005114 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006428:	68bb      	ldr	r3, [r7, #8]
 800642a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800642c:	4b25      	ldr	r3, [pc, #148]	; (80064c4 <xTaskIncrementTick+0x160>)
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	429a      	cmp	r2, r3
 8006432:	d903      	bls.n	800643c <xTaskIncrementTick+0xd8>
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006438:	4a22      	ldr	r2, [pc, #136]	; (80064c4 <xTaskIncrementTick+0x160>)
 800643a:	6013      	str	r3, [r2, #0]
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006440:	4613      	mov	r3, r2
 8006442:	009b      	lsls	r3, r3, #2
 8006444:	4413      	add	r3, r2
 8006446:	009b      	lsls	r3, r3, #2
 8006448:	4a1f      	ldr	r2, [pc, #124]	; (80064c8 <xTaskIncrementTick+0x164>)
 800644a:	441a      	add	r2, r3
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	3304      	adds	r3, #4
 8006450:	4619      	mov	r1, r3
 8006452:	4610      	mov	r0, r2
 8006454:	f7fe fe01 	bl	800505a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800645c:	4b1b      	ldr	r3, [pc, #108]	; (80064cc <xTaskIncrementTick+0x168>)
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006462:	429a      	cmp	r2, r3
 8006464:	d3b8      	bcc.n	80063d8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006466:	2301      	movs	r3, #1
 8006468:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800646a:	e7b5      	b.n	80063d8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800646c:	4b17      	ldr	r3, [pc, #92]	; (80064cc <xTaskIncrementTick+0x168>)
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006472:	4915      	ldr	r1, [pc, #84]	; (80064c8 <xTaskIncrementTick+0x164>)
 8006474:	4613      	mov	r3, r2
 8006476:	009b      	lsls	r3, r3, #2
 8006478:	4413      	add	r3, r2
 800647a:	009b      	lsls	r3, r3, #2
 800647c:	440b      	add	r3, r1
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	2b01      	cmp	r3, #1
 8006482:	d901      	bls.n	8006488 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006484:	2301      	movs	r3, #1
 8006486:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006488:	4b11      	ldr	r3, [pc, #68]	; (80064d0 <xTaskIncrementTick+0x16c>)
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d007      	beq.n	80064a0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006490:	2301      	movs	r3, #1
 8006492:	617b      	str	r3, [r7, #20]
 8006494:	e004      	b.n	80064a0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006496:	4b0f      	ldr	r3, [pc, #60]	; (80064d4 <xTaskIncrementTick+0x170>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	3301      	adds	r3, #1
 800649c:	4a0d      	ldr	r2, [pc, #52]	; (80064d4 <xTaskIncrementTick+0x170>)
 800649e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80064a0:	697b      	ldr	r3, [r7, #20]
}
 80064a2:	4618      	mov	r0, r3
 80064a4:	3718      	adds	r7, #24
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bd80      	pop	{r7, pc}
 80064aa:	bf00      	nop
 80064ac:	20000e98 	.word	0x20000e98
 80064b0:	20000e74 	.word	0x20000e74
 80064b4:	20000e28 	.word	0x20000e28
 80064b8:	20000e2c 	.word	0x20000e2c
 80064bc:	20000e88 	.word	0x20000e88
 80064c0:	20000e90 	.word	0x20000e90
 80064c4:	20000e78 	.word	0x20000e78
 80064c8:	200009a0 	.word	0x200009a0
 80064cc:	2000099c 	.word	0x2000099c
 80064d0:	20000e84 	.word	0x20000e84
 80064d4:	20000e80 	.word	0x20000e80

080064d8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80064d8:	b480      	push	{r7}
 80064da:	b085      	sub	sp, #20
 80064dc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80064de:	4b28      	ldr	r3, [pc, #160]	; (8006580 <vTaskSwitchContext+0xa8>)
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d003      	beq.n	80064ee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80064e6:	4b27      	ldr	r3, [pc, #156]	; (8006584 <vTaskSwitchContext+0xac>)
 80064e8:	2201      	movs	r2, #1
 80064ea:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80064ec:	e041      	b.n	8006572 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80064ee:	4b25      	ldr	r3, [pc, #148]	; (8006584 <vTaskSwitchContext+0xac>)
 80064f0:	2200      	movs	r2, #0
 80064f2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80064f4:	4b24      	ldr	r3, [pc, #144]	; (8006588 <vTaskSwitchContext+0xb0>)
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	60fb      	str	r3, [r7, #12]
 80064fa:	e010      	b.n	800651e <vTaskSwitchContext+0x46>
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d10a      	bne.n	8006518 <vTaskSwitchContext+0x40>
	__asm volatile
 8006502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006506:	f383 8811 	msr	BASEPRI, r3
 800650a:	f3bf 8f6f 	isb	sy
 800650e:	f3bf 8f4f 	dsb	sy
 8006512:	607b      	str	r3, [r7, #4]
}
 8006514:	bf00      	nop
 8006516:	e7fe      	b.n	8006516 <vTaskSwitchContext+0x3e>
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	3b01      	subs	r3, #1
 800651c:	60fb      	str	r3, [r7, #12]
 800651e:	491b      	ldr	r1, [pc, #108]	; (800658c <vTaskSwitchContext+0xb4>)
 8006520:	68fa      	ldr	r2, [r7, #12]
 8006522:	4613      	mov	r3, r2
 8006524:	009b      	lsls	r3, r3, #2
 8006526:	4413      	add	r3, r2
 8006528:	009b      	lsls	r3, r3, #2
 800652a:	440b      	add	r3, r1
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d0e4      	beq.n	80064fc <vTaskSwitchContext+0x24>
 8006532:	68fa      	ldr	r2, [r7, #12]
 8006534:	4613      	mov	r3, r2
 8006536:	009b      	lsls	r3, r3, #2
 8006538:	4413      	add	r3, r2
 800653a:	009b      	lsls	r3, r3, #2
 800653c:	4a13      	ldr	r2, [pc, #76]	; (800658c <vTaskSwitchContext+0xb4>)
 800653e:	4413      	add	r3, r2
 8006540:	60bb      	str	r3, [r7, #8]
 8006542:	68bb      	ldr	r3, [r7, #8]
 8006544:	685b      	ldr	r3, [r3, #4]
 8006546:	685a      	ldr	r2, [r3, #4]
 8006548:	68bb      	ldr	r3, [r7, #8]
 800654a:	605a      	str	r2, [r3, #4]
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	685a      	ldr	r2, [r3, #4]
 8006550:	68bb      	ldr	r3, [r7, #8]
 8006552:	3308      	adds	r3, #8
 8006554:	429a      	cmp	r2, r3
 8006556:	d104      	bne.n	8006562 <vTaskSwitchContext+0x8a>
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	685b      	ldr	r3, [r3, #4]
 800655c:	685a      	ldr	r2, [r3, #4]
 800655e:	68bb      	ldr	r3, [r7, #8]
 8006560:	605a      	str	r2, [r3, #4]
 8006562:	68bb      	ldr	r3, [r7, #8]
 8006564:	685b      	ldr	r3, [r3, #4]
 8006566:	68db      	ldr	r3, [r3, #12]
 8006568:	4a09      	ldr	r2, [pc, #36]	; (8006590 <vTaskSwitchContext+0xb8>)
 800656a:	6013      	str	r3, [r2, #0]
 800656c:	4a06      	ldr	r2, [pc, #24]	; (8006588 <vTaskSwitchContext+0xb0>)
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	6013      	str	r3, [r2, #0]
}
 8006572:	bf00      	nop
 8006574:	3714      	adds	r7, #20
 8006576:	46bd      	mov	sp, r7
 8006578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657c:	4770      	bx	lr
 800657e:	bf00      	nop
 8006580:	20000e98 	.word	0x20000e98
 8006584:	20000e84 	.word	0x20000e84
 8006588:	20000e78 	.word	0x20000e78
 800658c:	200009a0 	.word	0x200009a0
 8006590:	2000099c 	.word	0x2000099c

08006594 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b084      	sub	sp, #16
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
 800659c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d10a      	bne.n	80065ba <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80065a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065a8:	f383 8811 	msr	BASEPRI, r3
 80065ac:	f3bf 8f6f 	isb	sy
 80065b0:	f3bf 8f4f 	dsb	sy
 80065b4:	60fb      	str	r3, [r7, #12]
}
 80065b6:	bf00      	nop
 80065b8:	e7fe      	b.n	80065b8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80065ba:	4b07      	ldr	r3, [pc, #28]	; (80065d8 <vTaskPlaceOnEventList+0x44>)
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	3318      	adds	r3, #24
 80065c0:	4619      	mov	r1, r3
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	f7fe fd6d 	bl	80050a2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80065c8:	2101      	movs	r1, #1
 80065ca:	6838      	ldr	r0, [r7, #0]
 80065cc:	f000 fc6a 	bl	8006ea4 <prvAddCurrentTaskToDelayedList>
}
 80065d0:	bf00      	nop
 80065d2:	3710      	adds	r7, #16
 80065d4:	46bd      	mov	sp, r7
 80065d6:	bd80      	pop	{r7, pc}
 80065d8:	2000099c 	.word	0x2000099c

080065dc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80065dc:	b580      	push	{r7, lr}
 80065de:	b086      	sub	sp, #24
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	60f8      	str	r0, [r7, #12]
 80065e4:	60b9      	str	r1, [r7, #8]
 80065e6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d10a      	bne.n	8006604 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80065ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065f2:	f383 8811 	msr	BASEPRI, r3
 80065f6:	f3bf 8f6f 	isb	sy
 80065fa:	f3bf 8f4f 	dsb	sy
 80065fe:	617b      	str	r3, [r7, #20]
}
 8006600:	bf00      	nop
 8006602:	e7fe      	b.n	8006602 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006604:	4b0a      	ldr	r3, [pc, #40]	; (8006630 <vTaskPlaceOnEventListRestricted+0x54>)
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	3318      	adds	r3, #24
 800660a:	4619      	mov	r1, r3
 800660c:	68f8      	ldr	r0, [r7, #12]
 800660e:	f7fe fd24 	bl	800505a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d002      	beq.n	800661e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006618:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800661c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800661e:	6879      	ldr	r1, [r7, #4]
 8006620:	68b8      	ldr	r0, [r7, #8]
 8006622:	f000 fc3f 	bl	8006ea4 <prvAddCurrentTaskToDelayedList>
	}
 8006626:	bf00      	nop
 8006628:	3718      	adds	r7, #24
 800662a:	46bd      	mov	sp, r7
 800662c:	bd80      	pop	{r7, pc}
 800662e:	bf00      	nop
 8006630:	2000099c 	.word	0x2000099c

08006634 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b086      	sub	sp, #24
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	68db      	ldr	r3, [r3, #12]
 8006640:	68db      	ldr	r3, [r3, #12]
 8006642:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006644:	693b      	ldr	r3, [r7, #16]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d10a      	bne.n	8006660 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800664a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800664e:	f383 8811 	msr	BASEPRI, r3
 8006652:	f3bf 8f6f 	isb	sy
 8006656:	f3bf 8f4f 	dsb	sy
 800665a:	60fb      	str	r3, [r7, #12]
}
 800665c:	bf00      	nop
 800665e:	e7fe      	b.n	800665e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006660:	693b      	ldr	r3, [r7, #16]
 8006662:	3318      	adds	r3, #24
 8006664:	4618      	mov	r0, r3
 8006666:	f7fe fd55 	bl	8005114 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800666a:	4b1e      	ldr	r3, [pc, #120]	; (80066e4 <xTaskRemoveFromEventList+0xb0>)
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d11d      	bne.n	80066ae <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006672:	693b      	ldr	r3, [r7, #16]
 8006674:	3304      	adds	r3, #4
 8006676:	4618      	mov	r0, r3
 8006678:	f7fe fd4c 	bl	8005114 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800667c:	693b      	ldr	r3, [r7, #16]
 800667e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006680:	4b19      	ldr	r3, [pc, #100]	; (80066e8 <xTaskRemoveFromEventList+0xb4>)
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	429a      	cmp	r2, r3
 8006686:	d903      	bls.n	8006690 <xTaskRemoveFromEventList+0x5c>
 8006688:	693b      	ldr	r3, [r7, #16]
 800668a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800668c:	4a16      	ldr	r2, [pc, #88]	; (80066e8 <xTaskRemoveFromEventList+0xb4>)
 800668e:	6013      	str	r3, [r2, #0]
 8006690:	693b      	ldr	r3, [r7, #16]
 8006692:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006694:	4613      	mov	r3, r2
 8006696:	009b      	lsls	r3, r3, #2
 8006698:	4413      	add	r3, r2
 800669a:	009b      	lsls	r3, r3, #2
 800669c:	4a13      	ldr	r2, [pc, #76]	; (80066ec <xTaskRemoveFromEventList+0xb8>)
 800669e:	441a      	add	r2, r3
 80066a0:	693b      	ldr	r3, [r7, #16]
 80066a2:	3304      	adds	r3, #4
 80066a4:	4619      	mov	r1, r3
 80066a6:	4610      	mov	r0, r2
 80066a8:	f7fe fcd7 	bl	800505a <vListInsertEnd>
 80066ac:	e005      	b.n	80066ba <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80066ae:	693b      	ldr	r3, [r7, #16]
 80066b0:	3318      	adds	r3, #24
 80066b2:	4619      	mov	r1, r3
 80066b4:	480e      	ldr	r0, [pc, #56]	; (80066f0 <xTaskRemoveFromEventList+0xbc>)
 80066b6:	f7fe fcd0 	bl	800505a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80066ba:	693b      	ldr	r3, [r7, #16]
 80066bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066be:	4b0d      	ldr	r3, [pc, #52]	; (80066f4 <xTaskRemoveFromEventList+0xc0>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066c4:	429a      	cmp	r2, r3
 80066c6:	d905      	bls.n	80066d4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80066c8:	2301      	movs	r3, #1
 80066ca:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80066cc:	4b0a      	ldr	r3, [pc, #40]	; (80066f8 <xTaskRemoveFromEventList+0xc4>)
 80066ce:	2201      	movs	r2, #1
 80066d0:	601a      	str	r2, [r3, #0]
 80066d2:	e001      	b.n	80066d8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80066d4:	2300      	movs	r3, #0
 80066d6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80066d8:	697b      	ldr	r3, [r7, #20]
}
 80066da:	4618      	mov	r0, r3
 80066dc:	3718      	adds	r7, #24
 80066de:	46bd      	mov	sp, r7
 80066e0:	bd80      	pop	{r7, pc}
 80066e2:	bf00      	nop
 80066e4:	20000e98 	.word	0x20000e98
 80066e8:	20000e78 	.word	0x20000e78
 80066ec:	200009a0 	.word	0x200009a0
 80066f0:	20000e30 	.word	0x20000e30
 80066f4:	2000099c 	.word	0x2000099c
 80066f8:	20000e84 	.word	0x20000e84

080066fc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80066fc:	b480      	push	{r7}
 80066fe:	b083      	sub	sp, #12
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006704:	4b06      	ldr	r3, [pc, #24]	; (8006720 <vTaskInternalSetTimeOutState+0x24>)
 8006706:	681a      	ldr	r2, [r3, #0]
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800670c:	4b05      	ldr	r3, [pc, #20]	; (8006724 <vTaskInternalSetTimeOutState+0x28>)
 800670e:	681a      	ldr	r2, [r3, #0]
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	605a      	str	r2, [r3, #4]
}
 8006714:	bf00      	nop
 8006716:	370c      	adds	r7, #12
 8006718:	46bd      	mov	sp, r7
 800671a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671e:	4770      	bx	lr
 8006720:	20000e88 	.word	0x20000e88
 8006724:	20000e74 	.word	0x20000e74

08006728 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b088      	sub	sp, #32
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
 8006730:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d10a      	bne.n	800674e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800673c:	f383 8811 	msr	BASEPRI, r3
 8006740:	f3bf 8f6f 	isb	sy
 8006744:	f3bf 8f4f 	dsb	sy
 8006748:	613b      	str	r3, [r7, #16]
}
 800674a:	bf00      	nop
 800674c:	e7fe      	b.n	800674c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d10a      	bne.n	800676a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006758:	f383 8811 	msr	BASEPRI, r3
 800675c:	f3bf 8f6f 	isb	sy
 8006760:	f3bf 8f4f 	dsb	sy
 8006764:	60fb      	str	r3, [r7, #12]
}
 8006766:	bf00      	nop
 8006768:	e7fe      	b.n	8006768 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800676a:	f001 f86b 	bl	8007844 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800676e:	4b1d      	ldr	r3, [pc, #116]	; (80067e4 <xTaskCheckForTimeOut+0xbc>)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	685b      	ldr	r3, [r3, #4]
 8006778:	69ba      	ldr	r2, [r7, #24]
 800677a:	1ad3      	subs	r3, r2, r3
 800677c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006786:	d102      	bne.n	800678e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006788:	2300      	movs	r3, #0
 800678a:	61fb      	str	r3, [r7, #28]
 800678c:	e023      	b.n	80067d6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681a      	ldr	r2, [r3, #0]
 8006792:	4b15      	ldr	r3, [pc, #84]	; (80067e8 <xTaskCheckForTimeOut+0xc0>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	429a      	cmp	r2, r3
 8006798:	d007      	beq.n	80067aa <xTaskCheckForTimeOut+0x82>
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	685b      	ldr	r3, [r3, #4]
 800679e:	69ba      	ldr	r2, [r7, #24]
 80067a0:	429a      	cmp	r2, r3
 80067a2:	d302      	bcc.n	80067aa <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80067a4:	2301      	movs	r3, #1
 80067a6:	61fb      	str	r3, [r7, #28]
 80067a8:	e015      	b.n	80067d6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	697a      	ldr	r2, [r7, #20]
 80067b0:	429a      	cmp	r2, r3
 80067b2:	d20b      	bcs.n	80067cc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	681a      	ldr	r2, [r3, #0]
 80067b8:	697b      	ldr	r3, [r7, #20]
 80067ba:	1ad2      	subs	r2, r2, r3
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80067c0:	6878      	ldr	r0, [r7, #4]
 80067c2:	f7ff ff9b 	bl	80066fc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80067c6:	2300      	movs	r3, #0
 80067c8:	61fb      	str	r3, [r7, #28]
 80067ca:	e004      	b.n	80067d6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	2200      	movs	r2, #0
 80067d0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80067d2:	2301      	movs	r3, #1
 80067d4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80067d6:	f001 f865 	bl	80078a4 <vPortExitCritical>

	return xReturn;
 80067da:	69fb      	ldr	r3, [r7, #28]
}
 80067dc:	4618      	mov	r0, r3
 80067de:	3720      	adds	r7, #32
 80067e0:	46bd      	mov	sp, r7
 80067e2:	bd80      	pop	{r7, pc}
 80067e4:	20000e74 	.word	0x20000e74
 80067e8:	20000e88 	.word	0x20000e88

080067ec <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80067ec:	b480      	push	{r7}
 80067ee:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80067f0:	4b03      	ldr	r3, [pc, #12]	; (8006800 <vTaskMissedYield+0x14>)
 80067f2:	2201      	movs	r2, #1
 80067f4:	601a      	str	r2, [r3, #0]
}
 80067f6:	bf00      	nop
 80067f8:	46bd      	mov	sp, r7
 80067fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fe:	4770      	bx	lr
 8006800:	20000e84 	.word	0x20000e84

08006804 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b082      	sub	sp, #8
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800680c:	f000 f852 	bl	80068b4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006810:	4b06      	ldr	r3, [pc, #24]	; (800682c <prvIdleTask+0x28>)
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	2b01      	cmp	r3, #1
 8006816:	d9f9      	bls.n	800680c <prvIdleTask+0x8>
			{
				taskYIELD();
 8006818:	4b05      	ldr	r3, [pc, #20]	; (8006830 <prvIdleTask+0x2c>)
 800681a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800681e:	601a      	str	r2, [r3, #0]
 8006820:	f3bf 8f4f 	dsb	sy
 8006824:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006828:	e7f0      	b.n	800680c <prvIdleTask+0x8>
 800682a:	bf00      	nop
 800682c:	200009a0 	.word	0x200009a0
 8006830:	e000ed04 	.word	0xe000ed04

08006834 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b082      	sub	sp, #8
 8006838:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800683a:	2300      	movs	r3, #0
 800683c:	607b      	str	r3, [r7, #4]
 800683e:	e00c      	b.n	800685a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006840:	687a      	ldr	r2, [r7, #4]
 8006842:	4613      	mov	r3, r2
 8006844:	009b      	lsls	r3, r3, #2
 8006846:	4413      	add	r3, r2
 8006848:	009b      	lsls	r3, r3, #2
 800684a:	4a12      	ldr	r2, [pc, #72]	; (8006894 <prvInitialiseTaskLists+0x60>)
 800684c:	4413      	add	r3, r2
 800684e:	4618      	mov	r0, r3
 8006850:	f7fe fbd6 	bl	8005000 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	3301      	adds	r3, #1
 8006858:	607b      	str	r3, [r7, #4]
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2b37      	cmp	r3, #55	; 0x37
 800685e:	d9ef      	bls.n	8006840 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006860:	480d      	ldr	r0, [pc, #52]	; (8006898 <prvInitialiseTaskLists+0x64>)
 8006862:	f7fe fbcd 	bl	8005000 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006866:	480d      	ldr	r0, [pc, #52]	; (800689c <prvInitialiseTaskLists+0x68>)
 8006868:	f7fe fbca 	bl	8005000 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800686c:	480c      	ldr	r0, [pc, #48]	; (80068a0 <prvInitialiseTaskLists+0x6c>)
 800686e:	f7fe fbc7 	bl	8005000 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006872:	480c      	ldr	r0, [pc, #48]	; (80068a4 <prvInitialiseTaskLists+0x70>)
 8006874:	f7fe fbc4 	bl	8005000 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006878:	480b      	ldr	r0, [pc, #44]	; (80068a8 <prvInitialiseTaskLists+0x74>)
 800687a:	f7fe fbc1 	bl	8005000 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800687e:	4b0b      	ldr	r3, [pc, #44]	; (80068ac <prvInitialiseTaskLists+0x78>)
 8006880:	4a05      	ldr	r2, [pc, #20]	; (8006898 <prvInitialiseTaskLists+0x64>)
 8006882:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006884:	4b0a      	ldr	r3, [pc, #40]	; (80068b0 <prvInitialiseTaskLists+0x7c>)
 8006886:	4a05      	ldr	r2, [pc, #20]	; (800689c <prvInitialiseTaskLists+0x68>)
 8006888:	601a      	str	r2, [r3, #0]
}
 800688a:	bf00      	nop
 800688c:	3708      	adds	r7, #8
 800688e:	46bd      	mov	sp, r7
 8006890:	bd80      	pop	{r7, pc}
 8006892:	bf00      	nop
 8006894:	200009a0 	.word	0x200009a0
 8006898:	20000e00 	.word	0x20000e00
 800689c:	20000e14 	.word	0x20000e14
 80068a0:	20000e30 	.word	0x20000e30
 80068a4:	20000e44 	.word	0x20000e44
 80068a8:	20000e5c 	.word	0x20000e5c
 80068ac:	20000e28 	.word	0x20000e28
 80068b0:	20000e2c 	.word	0x20000e2c

080068b4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b082      	sub	sp, #8
 80068b8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80068ba:	e019      	b.n	80068f0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80068bc:	f000 ffc2 	bl	8007844 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80068c0:	4b10      	ldr	r3, [pc, #64]	; (8006904 <prvCheckTasksWaitingTermination+0x50>)
 80068c2:	68db      	ldr	r3, [r3, #12]
 80068c4:	68db      	ldr	r3, [r3, #12]
 80068c6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	3304      	adds	r3, #4
 80068cc:	4618      	mov	r0, r3
 80068ce:	f7fe fc21 	bl	8005114 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80068d2:	4b0d      	ldr	r3, [pc, #52]	; (8006908 <prvCheckTasksWaitingTermination+0x54>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	3b01      	subs	r3, #1
 80068d8:	4a0b      	ldr	r2, [pc, #44]	; (8006908 <prvCheckTasksWaitingTermination+0x54>)
 80068da:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80068dc:	4b0b      	ldr	r3, [pc, #44]	; (800690c <prvCheckTasksWaitingTermination+0x58>)
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	3b01      	subs	r3, #1
 80068e2:	4a0a      	ldr	r2, [pc, #40]	; (800690c <prvCheckTasksWaitingTermination+0x58>)
 80068e4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80068e6:	f000 ffdd 	bl	80078a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80068ea:	6878      	ldr	r0, [r7, #4]
 80068ec:	f000 f810 	bl	8006910 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80068f0:	4b06      	ldr	r3, [pc, #24]	; (800690c <prvCheckTasksWaitingTermination+0x58>)
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d1e1      	bne.n	80068bc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80068f8:	bf00      	nop
 80068fa:	bf00      	nop
 80068fc:	3708      	adds	r7, #8
 80068fe:	46bd      	mov	sp, r7
 8006900:	bd80      	pop	{r7, pc}
 8006902:	bf00      	nop
 8006904:	20000e44 	.word	0x20000e44
 8006908:	20000e70 	.word	0x20000e70
 800690c:	20000e58 	.word	0x20000e58

08006910 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006910:	b580      	push	{r7, lr}
 8006912:	b084      	sub	sp, #16
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800691e:	2b00      	cmp	r3, #0
 8006920:	d108      	bne.n	8006934 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006926:	4618      	mov	r0, r3
 8006928:	f001 f97a 	bl	8007c20 <vPortFree>
				vPortFree( pxTCB );
 800692c:	6878      	ldr	r0, [r7, #4]
 800692e:	f001 f977 	bl	8007c20 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006932:	e018      	b.n	8006966 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800693a:	2b01      	cmp	r3, #1
 800693c:	d103      	bne.n	8006946 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800693e:	6878      	ldr	r0, [r7, #4]
 8006940:	f001 f96e 	bl	8007c20 <vPortFree>
	}
 8006944:	e00f      	b.n	8006966 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800694c:	2b02      	cmp	r3, #2
 800694e:	d00a      	beq.n	8006966 <prvDeleteTCB+0x56>
	__asm volatile
 8006950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006954:	f383 8811 	msr	BASEPRI, r3
 8006958:	f3bf 8f6f 	isb	sy
 800695c:	f3bf 8f4f 	dsb	sy
 8006960:	60fb      	str	r3, [r7, #12]
}
 8006962:	bf00      	nop
 8006964:	e7fe      	b.n	8006964 <prvDeleteTCB+0x54>
	}
 8006966:	bf00      	nop
 8006968:	3710      	adds	r7, #16
 800696a:	46bd      	mov	sp, r7
 800696c:	bd80      	pop	{r7, pc}
	...

08006970 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006970:	b480      	push	{r7}
 8006972:	b083      	sub	sp, #12
 8006974:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006976:	4b0c      	ldr	r3, [pc, #48]	; (80069a8 <prvResetNextTaskUnblockTime+0x38>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d104      	bne.n	800698a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006980:	4b0a      	ldr	r3, [pc, #40]	; (80069ac <prvResetNextTaskUnblockTime+0x3c>)
 8006982:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006986:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006988:	e008      	b.n	800699c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800698a:	4b07      	ldr	r3, [pc, #28]	; (80069a8 <prvResetNextTaskUnblockTime+0x38>)
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	68db      	ldr	r3, [r3, #12]
 8006990:	68db      	ldr	r3, [r3, #12]
 8006992:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	685b      	ldr	r3, [r3, #4]
 8006998:	4a04      	ldr	r2, [pc, #16]	; (80069ac <prvResetNextTaskUnblockTime+0x3c>)
 800699a:	6013      	str	r3, [r2, #0]
}
 800699c:	bf00      	nop
 800699e:	370c      	adds	r7, #12
 80069a0:	46bd      	mov	sp, r7
 80069a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a6:	4770      	bx	lr
 80069a8:	20000e28 	.word	0x20000e28
 80069ac:	20000e90 	.word	0x20000e90

080069b0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80069b0:	b480      	push	{r7}
 80069b2:	b083      	sub	sp, #12
 80069b4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80069b6:	4b0b      	ldr	r3, [pc, #44]	; (80069e4 <xTaskGetSchedulerState+0x34>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d102      	bne.n	80069c4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80069be:	2301      	movs	r3, #1
 80069c0:	607b      	str	r3, [r7, #4]
 80069c2:	e008      	b.n	80069d6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80069c4:	4b08      	ldr	r3, [pc, #32]	; (80069e8 <xTaskGetSchedulerState+0x38>)
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d102      	bne.n	80069d2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80069cc:	2302      	movs	r3, #2
 80069ce:	607b      	str	r3, [r7, #4]
 80069d0:	e001      	b.n	80069d6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80069d2:	2300      	movs	r3, #0
 80069d4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80069d6:	687b      	ldr	r3, [r7, #4]
	}
 80069d8:	4618      	mov	r0, r3
 80069da:	370c      	adds	r7, #12
 80069dc:	46bd      	mov	sp, r7
 80069de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e2:	4770      	bx	lr
 80069e4:	20000e7c 	.word	0x20000e7c
 80069e8:	20000e98 	.word	0x20000e98

080069ec <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b086      	sub	sp, #24
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80069f8:	2300      	movs	r3, #0
 80069fa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d056      	beq.n	8006ab0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006a02:	4b2e      	ldr	r3, [pc, #184]	; (8006abc <xTaskPriorityDisinherit+0xd0>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	693a      	ldr	r2, [r7, #16]
 8006a08:	429a      	cmp	r2, r3
 8006a0a:	d00a      	beq.n	8006a22 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006a0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a10:	f383 8811 	msr	BASEPRI, r3
 8006a14:	f3bf 8f6f 	isb	sy
 8006a18:	f3bf 8f4f 	dsb	sy
 8006a1c:	60fb      	str	r3, [r7, #12]
}
 8006a1e:	bf00      	nop
 8006a20:	e7fe      	b.n	8006a20 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006a22:	693b      	ldr	r3, [r7, #16]
 8006a24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d10a      	bne.n	8006a40 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a2e:	f383 8811 	msr	BASEPRI, r3
 8006a32:	f3bf 8f6f 	isb	sy
 8006a36:	f3bf 8f4f 	dsb	sy
 8006a3a:	60bb      	str	r3, [r7, #8]
}
 8006a3c:	bf00      	nop
 8006a3e:	e7fe      	b.n	8006a3e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006a40:	693b      	ldr	r3, [r7, #16]
 8006a42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a44:	1e5a      	subs	r2, r3, #1
 8006a46:	693b      	ldr	r3, [r7, #16]
 8006a48:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006a4a:	693b      	ldr	r3, [r7, #16]
 8006a4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a4e:	693b      	ldr	r3, [r7, #16]
 8006a50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a52:	429a      	cmp	r2, r3
 8006a54:	d02c      	beq.n	8006ab0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006a56:	693b      	ldr	r3, [r7, #16]
 8006a58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d128      	bne.n	8006ab0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006a5e:	693b      	ldr	r3, [r7, #16]
 8006a60:	3304      	adds	r3, #4
 8006a62:	4618      	mov	r0, r3
 8006a64:	f7fe fb56 	bl	8005114 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006a68:	693b      	ldr	r3, [r7, #16]
 8006a6a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006a6c:	693b      	ldr	r3, [r7, #16]
 8006a6e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a70:	693b      	ldr	r3, [r7, #16]
 8006a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a74:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006a78:	693b      	ldr	r3, [r7, #16]
 8006a7a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006a7c:	693b      	ldr	r3, [r7, #16]
 8006a7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a80:	4b0f      	ldr	r3, [pc, #60]	; (8006ac0 <xTaskPriorityDisinherit+0xd4>)
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	429a      	cmp	r2, r3
 8006a86:	d903      	bls.n	8006a90 <xTaskPriorityDisinherit+0xa4>
 8006a88:	693b      	ldr	r3, [r7, #16]
 8006a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a8c:	4a0c      	ldr	r2, [pc, #48]	; (8006ac0 <xTaskPriorityDisinherit+0xd4>)
 8006a8e:	6013      	str	r3, [r2, #0]
 8006a90:	693b      	ldr	r3, [r7, #16]
 8006a92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a94:	4613      	mov	r3, r2
 8006a96:	009b      	lsls	r3, r3, #2
 8006a98:	4413      	add	r3, r2
 8006a9a:	009b      	lsls	r3, r3, #2
 8006a9c:	4a09      	ldr	r2, [pc, #36]	; (8006ac4 <xTaskPriorityDisinherit+0xd8>)
 8006a9e:	441a      	add	r2, r3
 8006aa0:	693b      	ldr	r3, [r7, #16]
 8006aa2:	3304      	adds	r3, #4
 8006aa4:	4619      	mov	r1, r3
 8006aa6:	4610      	mov	r0, r2
 8006aa8:	f7fe fad7 	bl	800505a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006aac:	2301      	movs	r3, #1
 8006aae:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006ab0:	697b      	ldr	r3, [r7, #20]
	}
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	3718      	adds	r7, #24
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	bd80      	pop	{r7, pc}
 8006aba:	bf00      	nop
 8006abc:	2000099c 	.word	0x2000099c
 8006ac0:	20000e78 	.word	0x20000e78
 8006ac4:	200009a0 	.word	0x200009a0

08006ac8 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b086      	sub	sp, #24
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	60f8      	str	r0, [r7, #12]
 8006ad0:	60b9      	str	r1, [r7, #8]
 8006ad2:	607a      	str	r2, [r7, #4]
 8006ad4:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8006ad6:	f000 feb5 	bl	8007844 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8006ada:	4b26      	ldr	r3, [pc, #152]	; (8006b74 <xTaskNotifyWait+0xac>)
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8006ae2:	b2db      	uxtb	r3, r3
 8006ae4:	2b02      	cmp	r3, #2
 8006ae6:	d01a      	beq.n	8006b1e <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8006ae8:	4b22      	ldr	r3, [pc, #136]	; (8006b74 <xTaskNotifyWait+0xac>)
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006aee:	68fa      	ldr	r2, [r7, #12]
 8006af0:	43d2      	mvns	r2, r2
 8006af2:	400a      	ands	r2, r1
 8006af4:	655a      	str	r2, [r3, #84]	; 0x54

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8006af6:	4b1f      	ldr	r3, [pc, #124]	; (8006b74 <xTaskNotifyWait+0xac>)
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	2201      	movs	r2, #1
 8006afc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d00b      	beq.n	8006b1e <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006b06:	2101      	movs	r1, #1
 8006b08:	6838      	ldr	r0, [r7, #0]
 8006b0a:	f000 f9cb 	bl	8006ea4 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8006b0e:	4b1a      	ldr	r3, [pc, #104]	; (8006b78 <xTaskNotifyWait+0xb0>)
 8006b10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b14:	601a      	str	r2, [r3, #0]
 8006b16:	f3bf 8f4f 	dsb	sy
 8006b1a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8006b1e:	f000 fec1 	bl	80078a4 <vPortExitCritical>

		taskENTER_CRITICAL();
 8006b22:	f000 fe8f 	bl	8007844 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d004      	beq.n	8006b36 <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8006b2c:	4b11      	ldr	r3, [pc, #68]	; (8006b74 <xTaskNotifyWait+0xac>)
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8006b36:	4b0f      	ldr	r3, [pc, #60]	; (8006b74 <xTaskNotifyWait+0xac>)
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8006b3e:	b2db      	uxtb	r3, r3
 8006b40:	2b02      	cmp	r3, #2
 8006b42:	d002      	beq.n	8006b4a <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8006b44:	2300      	movs	r3, #0
 8006b46:	617b      	str	r3, [r7, #20]
 8006b48:	e008      	b.n	8006b5c <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8006b4a:	4b0a      	ldr	r3, [pc, #40]	; (8006b74 <xTaskNotifyWait+0xac>)
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006b50:	68ba      	ldr	r2, [r7, #8]
 8006b52:	43d2      	mvns	r2, r2
 8006b54:	400a      	ands	r2, r1
 8006b56:	655a      	str	r2, [r3, #84]	; 0x54
				xReturn = pdTRUE;
 8006b58:	2301      	movs	r3, #1
 8006b5a:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006b5c:	4b05      	ldr	r3, [pc, #20]	; (8006b74 <xTaskNotifyWait+0xac>)
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	2200      	movs	r2, #0
 8006b62:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 8006b66:	f000 fe9d 	bl	80078a4 <vPortExitCritical>

		return xReturn;
 8006b6a:	697b      	ldr	r3, [r7, #20]
	}
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	3718      	adds	r7, #24
 8006b70:	46bd      	mov	sp, r7
 8006b72:	bd80      	pop	{r7, pc}
 8006b74:	2000099c 	.word	0x2000099c
 8006b78:	e000ed04 	.word	0xe000ed04

08006b7c <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b08a      	sub	sp, #40	; 0x28
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	60f8      	str	r0, [r7, #12]
 8006b84:	60b9      	str	r1, [r7, #8]
 8006b86:	603b      	str	r3, [r7, #0]
 8006b88:	4613      	mov	r3, r2
 8006b8a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8006b8c:	2301      	movs	r3, #1
 8006b8e:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d10a      	bne.n	8006bac <xTaskGenericNotify+0x30>
	__asm volatile
 8006b96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b9a:	f383 8811 	msr	BASEPRI, r3
 8006b9e:	f3bf 8f6f 	isb	sy
 8006ba2:	f3bf 8f4f 	dsb	sy
 8006ba6:	61bb      	str	r3, [r7, #24]
}
 8006ba8:	bf00      	nop
 8006baa:	e7fe      	b.n	8006baa <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8006bb0:	f000 fe48 	bl	8007844 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d003      	beq.n	8006bc2 <xTaskGenericNotify+0x46>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8006bba:	6a3b      	ldr	r3, [r7, #32]
 8006bbc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8006bc2:	6a3b      	ldr	r3, [r7, #32]
 8006bc4:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8006bc8:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8006bca:	6a3b      	ldr	r3, [r7, #32]
 8006bcc:	2202      	movs	r2, #2
 8006bce:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 8006bd2:	79fb      	ldrb	r3, [r7, #7]
 8006bd4:	2b04      	cmp	r3, #4
 8006bd6:	d828      	bhi.n	8006c2a <xTaskGenericNotify+0xae>
 8006bd8:	a201      	add	r2, pc, #4	; (adr r2, 8006be0 <xTaskGenericNotify+0x64>)
 8006bda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bde:	bf00      	nop
 8006be0:	08006c4b 	.word	0x08006c4b
 8006be4:	08006bf5 	.word	0x08006bf5
 8006be8:	08006c03 	.word	0x08006c03
 8006bec:	08006c0f 	.word	0x08006c0f
 8006bf0:	08006c17 	.word	0x08006c17
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8006bf4:	6a3b      	ldr	r3, [r7, #32]
 8006bf6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006bf8:	68bb      	ldr	r3, [r7, #8]
 8006bfa:	431a      	orrs	r2, r3
 8006bfc:	6a3b      	ldr	r3, [r7, #32]
 8006bfe:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8006c00:	e026      	b.n	8006c50 <xTaskGenericNotify+0xd4>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8006c02:	6a3b      	ldr	r3, [r7, #32]
 8006c04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c06:	1c5a      	adds	r2, r3, #1
 8006c08:	6a3b      	ldr	r3, [r7, #32]
 8006c0a:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8006c0c:	e020      	b.n	8006c50 <xTaskGenericNotify+0xd4>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8006c0e:	6a3b      	ldr	r3, [r7, #32]
 8006c10:	68ba      	ldr	r2, [r7, #8]
 8006c12:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8006c14:	e01c      	b.n	8006c50 <xTaskGenericNotify+0xd4>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8006c16:	7ffb      	ldrb	r3, [r7, #31]
 8006c18:	2b02      	cmp	r3, #2
 8006c1a:	d003      	beq.n	8006c24 <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8006c1c:	6a3b      	ldr	r3, [r7, #32]
 8006c1e:	68ba      	ldr	r2, [r7, #8]
 8006c20:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8006c22:	e015      	b.n	8006c50 <xTaskGenericNotify+0xd4>
						xReturn = pdFAIL;
 8006c24:	2300      	movs	r3, #0
 8006c26:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8006c28:	e012      	b.n	8006c50 <xTaskGenericNotify+0xd4>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8006c2a:	6a3b      	ldr	r3, [r7, #32]
 8006c2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c2e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006c32:	d00c      	beq.n	8006c4e <xTaskGenericNotify+0xd2>
	__asm volatile
 8006c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c38:	f383 8811 	msr	BASEPRI, r3
 8006c3c:	f3bf 8f6f 	isb	sy
 8006c40:	f3bf 8f4f 	dsb	sy
 8006c44:	617b      	str	r3, [r7, #20]
}
 8006c46:	bf00      	nop
 8006c48:	e7fe      	b.n	8006c48 <xTaskGenericNotify+0xcc>
					break;
 8006c4a:	bf00      	nop
 8006c4c:	e000      	b.n	8006c50 <xTaskGenericNotify+0xd4>

					break;
 8006c4e:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8006c50:	7ffb      	ldrb	r3, [r7, #31]
 8006c52:	2b01      	cmp	r3, #1
 8006c54:	d13a      	bne.n	8006ccc <xTaskGenericNotify+0x150>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006c56:	6a3b      	ldr	r3, [r7, #32]
 8006c58:	3304      	adds	r3, #4
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	f7fe fa5a 	bl	8005114 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8006c60:	6a3b      	ldr	r3, [r7, #32]
 8006c62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c64:	4b1d      	ldr	r3, [pc, #116]	; (8006cdc <xTaskGenericNotify+0x160>)
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	429a      	cmp	r2, r3
 8006c6a:	d903      	bls.n	8006c74 <xTaskGenericNotify+0xf8>
 8006c6c:	6a3b      	ldr	r3, [r7, #32]
 8006c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c70:	4a1a      	ldr	r2, [pc, #104]	; (8006cdc <xTaskGenericNotify+0x160>)
 8006c72:	6013      	str	r3, [r2, #0]
 8006c74:	6a3b      	ldr	r3, [r7, #32]
 8006c76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c78:	4613      	mov	r3, r2
 8006c7a:	009b      	lsls	r3, r3, #2
 8006c7c:	4413      	add	r3, r2
 8006c7e:	009b      	lsls	r3, r3, #2
 8006c80:	4a17      	ldr	r2, [pc, #92]	; (8006ce0 <xTaskGenericNotify+0x164>)
 8006c82:	441a      	add	r2, r3
 8006c84:	6a3b      	ldr	r3, [r7, #32]
 8006c86:	3304      	adds	r3, #4
 8006c88:	4619      	mov	r1, r3
 8006c8a:	4610      	mov	r0, r2
 8006c8c:	f7fe f9e5 	bl	800505a <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8006c90:	6a3b      	ldr	r3, [r7, #32]
 8006c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d00a      	beq.n	8006cae <xTaskGenericNotify+0x132>
	__asm volatile
 8006c98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c9c:	f383 8811 	msr	BASEPRI, r3
 8006ca0:	f3bf 8f6f 	isb	sy
 8006ca4:	f3bf 8f4f 	dsb	sy
 8006ca8:	613b      	str	r3, [r7, #16]
}
 8006caa:	bf00      	nop
 8006cac:	e7fe      	b.n	8006cac <xTaskGenericNotify+0x130>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006cae:	6a3b      	ldr	r3, [r7, #32]
 8006cb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cb2:	4b0c      	ldr	r3, [pc, #48]	; (8006ce4 <xTaskGenericNotify+0x168>)
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cb8:	429a      	cmp	r2, r3
 8006cba:	d907      	bls.n	8006ccc <xTaskGenericNotify+0x150>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8006cbc:	4b0a      	ldr	r3, [pc, #40]	; (8006ce8 <xTaskGenericNotify+0x16c>)
 8006cbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cc2:	601a      	str	r2, [r3, #0]
 8006cc4:	f3bf 8f4f 	dsb	sy
 8006cc8:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8006ccc:	f000 fdea 	bl	80078a4 <vPortExitCritical>

		return xReturn;
 8006cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	3728      	adds	r7, #40	; 0x28
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	bd80      	pop	{r7, pc}
 8006cda:	bf00      	nop
 8006cdc:	20000e78 	.word	0x20000e78
 8006ce0:	200009a0 	.word	0x200009a0
 8006ce4:	2000099c 	.word	0x2000099c
 8006ce8:	e000ed04 	.word	0xe000ed04

08006cec <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b08e      	sub	sp, #56	; 0x38
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	60f8      	str	r0, [r7, #12]
 8006cf4:	60b9      	str	r1, [r7, #8]
 8006cf6:	603b      	str	r3, [r7, #0]
 8006cf8:	4613      	mov	r3, r2
 8006cfa:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8006cfc:	2301      	movs	r3, #1
 8006cfe:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d10a      	bne.n	8006d1c <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 8006d06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d0a:	f383 8811 	msr	BASEPRI, r3
 8006d0e:	f3bf 8f6f 	isb	sy
 8006d12:	f3bf 8f4f 	dsb	sy
 8006d16:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006d18:	bf00      	nop
 8006d1a:	e7fe      	b.n	8006d1a <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006d1c:	f000 fe74 	bl	8007a08 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 8006d24:	f3ef 8211 	mrs	r2, BASEPRI
 8006d28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d2c:	f383 8811 	msr	BASEPRI, r3
 8006d30:	f3bf 8f6f 	isb	sy
 8006d34:	f3bf 8f4f 	dsb	sy
 8006d38:	623a      	str	r2, [r7, #32]
 8006d3a:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8006d3c:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d003      	beq.n	8006d4e <xTaskGenericNotifyFromISR+0x62>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8006d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d48:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006d4a:	683b      	ldr	r3, [r7, #0]
 8006d4c:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8006d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d50:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8006d54:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8006d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d5a:	2202      	movs	r2, #2
 8006d5c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 8006d60:	79fb      	ldrb	r3, [r7, #7]
 8006d62:	2b04      	cmp	r3, #4
 8006d64:	d828      	bhi.n	8006db8 <xTaskGenericNotifyFromISR+0xcc>
 8006d66:	a201      	add	r2, pc, #4	; (adr r2, 8006d6c <xTaskGenericNotifyFromISR+0x80>)
 8006d68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d6c:	08006dd9 	.word	0x08006dd9
 8006d70:	08006d81 	.word	0x08006d81
 8006d74:	08006d8f 	.word	0x08006d8f
 8006d78:	08006d9b 	.word	0x08006d9b
 8006d7c:	08006da3 	.word	0x08006da3
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8006d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d82:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006d84:	68bb      	ldr	r3, [r7, #8]
 8006d86:	431a      	orrs	r2, r3
 8006d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d8a:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8006d8c:	e027      	b.n	8006dde <xTaskGenericNotifyFromISR+0xf2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8006d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d92:	1c5a      	adds	r2, r3, #1
 8006d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d96:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8006d98:	e021      	b.n	8006dde <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8006d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d9c:	68ba      	ldr	r2, [r7, #8]
 8006d9e:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8006da0:	e01d      	b.n	8006dde <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8006da2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006da6:	2b02      	cmp	r3, #2
 8006da8:	d003      	beq.n	8006db2 <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8006daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dac:	68ba      	ldr	r2, [r7, #8]
 8006dae:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8006db0:	e015      	b.n	8006dde <xTaskGenericNotifyFromISR+0xf2>
						xReturn = pdFAIL;
 8006db2:	2300      	movs	r3, #0
 8006db4:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 8006db6:	e012      	b.n	8006dde <xTaskGenericNotifyFromISR+0xf2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8006db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dbc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006dc0:	d00c      	beq.n	8006ddc <xTaskGenericNotifyFromISR+0xf0>
	__asm volatile
 8006dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dc6:	f383 8811 	msr	BASEPRI, r3
 8006dca:	f3bf 8f6f 	isb	sy
 8006dce:	f3bf 8f4f 	dsb	sy
 8006dd2:	61bb      	str	r3, [r7, #24]
}
 8006dd4:	bf00      	nop
 8006dd6:	e7fe      	b.n	8006dd6 <xTaskGenericNotifyFromISR+0xea>
					break;
 8006dd8:	bf00      	nop
 8006dda:	e000      	b.n	8006dde <xTaskGenericNotifyFromISR+0xf2>
					break;
 8006ddc:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8006dde:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006de2:	2b01      	cmp	r3, #1
 8006de4:	d146      	bne.n	8006e74 <xTaskGenericNotifyFromISR+0x188>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8006de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006de8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d00a      	beq.n	8006e04 <xTaskGenericNotifyFromISR+0x118>
	__asm volatile
 8006dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006df2:	f383 8811 	msr	BASEPRI, r3
 8006df6:	f3bf 8f6f 	isb	sy
 8006dfa:	f3bf 8f4f 	dsb	sy
 8006dfe:	617b      	str	r3, [r7, #20]
}
 8006e00:	bf00      	nop
 8006e02:	e7fe      	b.n	8006e02 <xTaskGenericNotifyFromISR+0x116>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006e04:	4b21      	ldr	r3, [pc, #132]	; (8006e8c <xTaskGenericNotifyFromISR+0x1a0>)
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d11d      	bne.n	8006e48 <xTaskGenericNotifyFromISR+0x15c>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e0e:	3304      	adds	r3, #4
 8006e10:	4618      	mov	r0, r3
 8006e12:	f7fe f97f 	bl	8005114 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e1a:	4b1d      	ldr	r3, [pc, #116]	; (8006e90 <xTaskGenericNotifyFromISR+0x1a4>)
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	429a      	cmp	r2, r3
 8006e20:	d903      	bls.n	8006e2a <xTaskGenericNotifyFromISR+0x13e>
 8006e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e26:	4a1a      	ldr	r2, [pc, #104]	; (8006e90 <xTaskGenericNotifyFromISR+0x1a4>)
 8006e28:	6013      	str	r3, [r2, #0]
 8006e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e2e:	4613      	mov	r3, r2
 8006e30:	009b      	lsls	r3, r3, #2
 8006e32:	4413      	add	r3, r2
 8006e34:	009b      	lsls	r3, r3, #2
 8006e36:	4a17      	ldr	r2, [pc, #92]	; (8006e94 <xTaskGenericNotifyFromISR+0x1a8>)
 8006e38:	441a      	add	r2, r3
 8006e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e3c:	3304      	adds	r3, #4
 8006e3e:	4619      	mov	r1, r3
 8006e40:	4610      	mov	r0, r2
 8006e42:	f7fe f90a 	bl	800505a <vListInsertEnd>
 8006e46:	e005      	b.n	8006e54 <xTaskGenericNotifyFromISR+0x168>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8006e48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e4a:	3318      	adds	r3, #24
 8006e4c:	4619      	mov	r1, r3
 8006e4e:	4812      	ldr	r0, [pc, #72]	; (8006e98 <xTaskGenericNotifyFromISR+0x1ac>)
 8006e50:	f7fe f903 	bl	800505a <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e58:	4b10      	ldr	r3, [pc, #64]	; (8006e9c <xTaskGenericNotifyFromISR+0x1b0>)
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e5e:	429a      	cmp	r2, r3
 8006e60:	d908      	bls.n	8006e74 <xTaskGenericNotifyFromISR+0x188>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8006e62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d002      	beq.n	8006e6e <xTaskGenericNotifyFromISR+0x182>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8006e68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e6a:	2201      	movs	r2, #1
 8006e6c:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8006e6e:	4b0c      	ldr	r3, [pc, #48]	; (8006ea0 <xTaskGenericNotifyFromISR+0x1b4>)
 8006e70:	2201      	movs	r2, #1
 8006e72:	601a      	str	r2, [r3, #0]
 8006e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e76:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006e78:	693b      	ldr	r3, [r7, #16]
 8006e7a:	f383 8811 	msr	BASEPRI, r3
}
 8006e7e:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8006e80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8006e82:	4618      	mov	r0, r3
 8006e84:	3738      	adds	r7, #56	; 0x38
 8006e86:	46bd      	mov	sp, r7
 8006e88:	bd80      	pop	{r7, pc}
 8006e8a:	bf00      	nop
 8006e8c:	20000e98 	.word	0x20000e98
 8006e90:	20000e78 	.word	0x20000e78
 8006e94:	200009a0 	.word	0x200009a0
 8006e98:	20000e30 	.word	0x20000e30
 8006e9c:	2000099c 	.word	0x2000099c
 8006ea0:	20000e84 	.word	0x20000e84

08006ea4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b084      	sub	sp, #16
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
 8006eac:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006eae:	4b21      	ldr	r3, [pc, #132]	; (8006f34 <prvAddCurrentTaskToDelayedList+0x90>)
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006eb4:	4b20      	ldr	r3, [pc, #128]	; (8006f38 <prvAddCurrentTaskToDelayedList+0x94>)
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	3304      	adds	r3, #4
 8006eba:	4618      	mov	r0, r3
 8006ebc:	f7fe f92a 	bl	8005114 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006ec6:	d10a      	bne.n	8006ede <prvAddCurrentTaskToDelayedList+0x3a>
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d007      	beq.n	8006ede <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006ece:	4b1a      	ldr	r3, [pc, #104]	; (8006f38 <prvAddCurrentTaskToDelayedList+0x94>)
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	3304      	adds	r3, #4
 8006ed4:	4619      	mov	r1, r3
 8006ed6:	4819      	ldr	r0, [pc, #100]	; (8006f3c <prvAddCurrentTaskToDelayedList+0x98>)
 8006ed8:	f7fe f8bf 	bl	800505a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006edc:	e026      	b.n	8006f2c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006ede:	68fa      	ldr	r2, [r7, #12]
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	4413      	add	r3, r2
 8006ee4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006ee6:	4b14      	ldr	r3, [pc, #80]	; (8006f38 <prvAddCurrentTaskToDelayedList+0x94>)
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	68ba      	ldr	r2, [r7, #8]
 8006eec:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006eee:	68ba      	ldr	r2, [r7, #8]
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	429a      	cmp	r2, r3
 8006ef4:	d209      	bcs.n	8006f0a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006ef6:	4b12      	ldr	r3, [pc, #72]	; (8006f40 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006ef8:	681a      	ldr	r2, [r3, #0]
 8006efa:	4b0f      	ldr	r3, [pc, #60]	; (8006f38 <prvAddCurrentTaskToDelayedList+0x94>)
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	3304      	adds	r3, #4
 8006f00:	4619      	mov	r1, r3
 8006f02:	4610      	mov	r0, r2
 8006f04:	f7fe f8cd 	bl	80050a2 <vListInsert>
}
 8006f08:	e010      	b.n	8006f2c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006f0a:	4b0e      	ldr	r3, [pc, #56]	; (8006f44 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006f0c:	681a      	ldr	r2, [r3, #0]
 8006f0e:	4b0a      	ldr	r3, [pc, #40]	; (8006f38 <prvAddCurrentTaskToDelayedList+0x94>)
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	3304      	adds	r3, #4
 8006f14:	4619      	mov	r1, r3
 8006f16:	4610      	mov	r0, r2
 8006f18:	f7fe f8c3 	bl	80050a2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006f1c:	4b0a      	ldr	r3, [pc, #40]	; (8006f48 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	68ba      	ldr	r2, [r7, #8]
 8006f22:	429a      	cmp	r2, r3
 8006f24:	d202      	bcs.n	8006f2c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006f26:	4a08      	ldr	r2, [pc, #32]	; (8006f48 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006f28:	68bb      	ldr	r3, [r7, #8]
 8006f2a:	6013      	str	r3, [r2, #0]
}
 8006f2c:	bf00      	nop
 8006f2e:	3710      	adds	r7, #16
 8006f30:	46bd      	mov	sp, r7
 8006f32:	bd80      	pop	{r7, pc}
 8006f34:	20000e74 	.word	0x20000e74
 8006f38:	2000099c 	.word	0x2000099c
 8006f3c:	20000e5c 	.word	0x20000e5c
 8006f40:	20000e2c 	.word	0x20000e2c
 8006f44:	20000e28 	.word	0x20000e28
 8006f48:	20000e90 	.word	0x20000e90

08006f4c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b08a      	sub	sp, #40	; 0x28
 8006f50:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006f52:	2300      	movs	r3, #0
 8006f54:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006f56:	f000 fb07 	bl	8007568 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006f5a:	4b1c      	ldr	r3, [pc, #112]	; (8006fcc <xTimerCreateTimerTask+0x80>)
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d021      	beq.n	8006fa6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006f62:	2300      	movs	r3, #0
 8006f64:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006f66:	2300      	movs	r3, #0
 8006f68:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006f6a:	1d3a      	adds	r2, r7, #4
 8006f6c:	f107 0108 	add.w	r1, r7, #8
 8006f70:	f107 030c 	add.w	r3, r7, #12
 8006f74:	4618      	mov	r0, r3
 8006f76:	f7fe f829 	bl	8004fcc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006f7a:	6879      	ldr	r1, [r7, #4]
 8006f7c:	68bb      	ldr	r3, [r7, #8]
 8006f7e:	68fa      	ldr	r2, [r7, #12]
 8006f80:	9202      	str	r2, [sp, #8]
 8006f82:	9301      	str	r3, [sp, #4]
 8006f84:	2302      	movs	r3, #2
 8006f86:	9300      	str	r3, [sp, #0]
 8006f88:	2300      	movs	r3, #0
 8006f8a:	460a      	mov	r2, r1
 8006f8c:	4910      	ldr	r1, [pc, #64]	; (8006fd0 <xTimerCreateTimerTask+0x84>)
 8006f8e:	4811      	ldr	r0, [pc, #68]	; (8006fd4 <xTimerCreateTimerTask+0x88>)
 8006f90:	f7fe fef0 	bl	8005d74 <xTaskCreateStatic>
 8006f94:	4603      	mov	r3, r0
 8006f96:	4a10      	ldr	r2, [pc, #64]	; (8006fd8 <xTimerCreateTimerTask+0x8c>)
 8006f98:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006f9a:	4b0f      	ldr	r3, [pc, #60]	; (8006fd8 <xTimerCreateTimerTask+0x8c>)
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d001      	beq.n	8006fa6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006fa2:	2301      	movs	r3, #1
 8006fa4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006fa6:	697b      	ldr	r3, [r7, #20]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d10a      	bne.n	8006fc2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fb0:	f383 8811 	msr	BASEPRI, r3
 8006fb4:	f3bf 8f6f 	isb	sy
 8006fb8:	f3bf 8f4f 	dsb	sy
 8006fbc:	613b      	str	r3, [r7, #16]
}
 8006fbe:	bf00      	nop
 8006fc0:	e7fe      	b.n	8006fc0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006fc2:	697b      	ldr	r3, [r7, #20]
}
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	3718      	adds	r7, #24
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	bd80      	pop	{r7, pc}
 8006fcc:	20000ecc 	.word	0x20000ecc
 8006fd0:	08008fe8 	.word	0x08008fe8
 8006fd4:	08007111 	.word	0x08007111
 8006fd8:	20000ed0 	.word	0x20000ed0

08006fdc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b08a      	sub	sp, #40	; 0x28
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	60f8      	str	r0, [r7, #12]
 8006fe4:	60b9      	str	r1, [r7, #8]
 8006fe6:	607a      	str	r2, [r7, #4]
 8006fe8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006fea:	2300      	movs	r3, #0
 8006fec:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d10a      	bne.n	800700a <xTimerGenericCommand+0x2e>
	__asm volatile
 8006ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ff8:	f383 8811 	msr	BASEPRI, r3
 8006ffc:	f3bf 8f6f 	isb	sy
 8007000:	f3bf 8f4f 	dsb	sy
 8007004:	623b      	str	r3, [r7, #32]
}
 8007006:	bf00      	nop
 8007008:	e7fe      	b.n	8007008 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800700a:	4b1a      	ldr	r3, [pc, #104]	; (8007074 <xTimerGenericCommand+0x98>)
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d02a      	beq.n	8007068 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007012:	68bb      	ldr	r3, [r7, #8]
 8007014:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800701e:	68bb      	ldr	r3, [r7, #8]
 8007020:	2b05      	cmp	r3, #5
 8007022:	dc18      	bgt.n	8007056 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007024:	f7ff fcc4 	bl	80069b0 <xTaskGetSchedulerState>
 8007028:	4603      	mov	r3, r0
 800702a:	2b02      	cmp	r3, #2
 800702c:	d109      	bne.n	8007042 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800702e:	4b11      	ldr	r3, [pc, #68]	; (8007074 <xTimerGenericCommand+0x98>)
 8007030:	6818      	ldr	r0, [r3, #0]
 8007032:	f107 0110 	add.w	r1, r7, #16
 8007036:	2300      	movs	r3, #0
 8007038:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800703a:	f7fe f9d3 	bl	80053e4 <xQueueGenericSend>
 800703e:	6278      	str	r0, [r7, #36]	; 0x24
 8007040:	e012      	b.n	8007068 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007042:	4b0c      	ldr	r3, [pc, #48]	; (8007074 <xTimerGenericCommand+0x98>)
 8007044:	6818      	ldr	r0, [r3, #0]
 8007046:	f107 0110 	add.w	r1, r7, #16
 800704a:	2300      	movs	r3, #0
 800704c:	2200      	movs	r2, #0
 800704e:	f7fe f9c9 	bl	80053e4 <xQueueGenericSend>
 8007052:	6278      	str	r0, [r7, #36]	; 0x24
 8007054:	e008      	b.n	8007068 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007056:	4b07      	ldr	r3, [pc, #28]	; (8007074 <xTimerGenericCommand+0x98>)
 8007058:	6818      	ldr	r0, [r3, #0]
 800705a:	f107 0110 	add.w	r1, r7, #16
 800705e:	2300      	movs	r3, #0
 8007060:	683a      	ldr	r2, [r7, #0]
 8007062:	f7fe fabd 	bl	80055e0 <xQueueGenericSendFromISR>
 8007066:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800706a:	4618      	mov	r0, r3
 800706c:	3728      	adds	r7, #40	; 0x28
 800706e:	46bd      	mov	sp, r7
 8007070:	bd80      	pop	{r7, pc}
 8007072:	bf00      	nop
 8007074:	20000ecc 	.word	0x20000ecc

08007078 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b088      	sub	sp, #32
 800707c:	af02      	add	r7, sp, #8
 800707e:	6078      	str	r0, [r7, #4]
 8007080:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007082:	4b22      	ldr	r3, [pc, #136]	; (800710c <prvProcessExpiredTimer+0x94>)
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	68db      	ldr	r3, [r3, #12]
 8007088:	68db      	ldr	r3, [r3, #12]
 800708a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800708c:	697b      	ldr	r3, [r7, #20]
 800708e:	3304      	adds	r3, #4
 8007090:	4618      	mov	r0, r3
 8007092:	f7fe f83f 	bl	8005114 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007096:	697b      	ldr	r3, [r7, #20]
 8007098:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800709c:	f003 0304 	and.w	r3, r3, #4
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d022      	beq.n	80070ea <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80070a4:	697b      	ldr	r3, [r7, #20]
 80070a6:	699a      	ldr	r2, [r3, #24]
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	18d1      	adds	r1, r2, r3
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	683a      	ldr	r2, [r7, #0]
 80070b0:	6978      	ldr	r0, [r7, #20]
 80070b2:	f000 f8d1 	bl	8007258 <prvInsertTimerInActiveList>
 80070b6:	4603      	mov	r3, r0
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d01f      	beq.n	80070fc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80070bc:	2300      	movs	r3, #0
 80070be:	9300      	str	r3, [sp, #0]
 80070c0:	2300      	movs	r3, #0
 80070c2:	687a      	ldr	r2, [r7, #4]
 80070c4:	2100      	movs	r1, #0
 80070c6:	6978      	ldr	r0, [r7, #20]
 80070c8:	f7ff ff88 	bl	8006fdc <xTimerGenericCommand>
 80070cc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80070ce:	693b      	ldr	r3, [r7, #16]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d113      	bne.n	80070fc <prvProcessExpiredTimer+0x84>
	__asm volatile
 80070d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070d8:	f383 8811 	msr	BASEPRI, r3
 80070dc:	f3bf 8f6f 	isb	sy
 80070e0:	f3bf 8f4f 	dsb	sy
 80070e4:	60fb      	str	r3, [r7, #12]
}
 80070e6:	bf00      	nop
 80070e8:	e7fe      	b.n	80070e8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80070ea:	697b      	ldr	r3, [r7, #20]
 80070ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80070f0:	f023 0301 	bic.w	r3, r3, #1
 80070f4:	b2da      	uxtb	r2, r3
 80070f6:	697b      	ldr	r3, [r7, #20]
 80070f8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80070fc:	697b      	ldr	r3, [r7, #20]
 80070fe:	6a1b      	ldr	r3, [r3, #32]
 8007100:	6978      	ldr	r0, [r7, #20]
 8007102:	4798      	blx	r3
}
 8007104:	bf00      	nop
 8007106:	3718      	adds	r7, #24
 8007108:	46bd      	mov	sp, r7
 800710a:	bd80      	pop	{r7, pc}
 800710c:	20000ec4 	.word	0x20000ec4

08007110 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b084      	sub	sp, #16
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007118:	f107 0308 	add.w	r3, r7, #8
 800711c:	4618      	mov	r0, r3
 800711e:	f000 f857 	bl	80071d0 <prvGetNextExpireTime>
 8007122:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007124:	68bb      	ldr	r3, [r7, #8]
 8007126:	4619      	mov	r1, r3
 8007128:	68f8      	ldr	r0, [r7, #12]
 800712a:	f000 f803 	bl	8007134 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800712e:	f000 f8d5 	bl	80072dc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007132:	e7f1      	b.n	8007118 <prvTimerTask+0x8>

08007134 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007134:	b580      	push	{r7, lr}
 8007136:	b084      	sub	sp, #16
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
 800713c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800713e:	f7ff f855 	bl	80061ec <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007142:	f107 0308 	add.w	r3, r7, #8
 8007146:	4618      	mov	r0, r3
 8007148:	f000 f866 	bl	8007218 <prvSampleTimeNow>
 800714c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800714e:	68bb      	ldr	r3, [r7, #8]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d130      	bne.n	80071b6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d10a      	bne.n	8007170 <prvProcessTimerOrBlockTask+0x3c>
 800715a:	687a      	ldr	r2, [r7, #4]
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	429a      	cmp	r2, r3
 8007160:	d806      	bhi.n	8007170 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007162:	f7ff f851 	bl	8006208 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007166:	68f9      	ldr	r1, [r7, #12]
 8007168:	6878      	ldr	r0, [r7, #4]
 800716a:	f7ff ff85 	bl	8007078 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800716e:	e024      	b.n	80071ba <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d008      	beq.n	8007188 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007176:	4b13      	ldr	r3, [pc, #76]	; (80071c4 <prvProcessTimerOrBlockTask+0x90>)
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d101      	bne.n	8007184 <prvProcessTimerOrBlockTask+0x50>
 8007180:	2301      	movs	r3, #1
 8007182:	e000      	b.n	8007186 <prvProcessTimerOrBlockTask+0x52>
 8007184:	2300      	movs	r3, #0
 8007186:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007188:	4b0f      	ldr	r3, [pc, #60]	; (80071c8 <prvProcessTimerOrBlockTask+0x94>)
 800718a:	6818      	ldr	r0, [r3, #0]
 800718c:	687a      	ldr	r2, [r7, #4]
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	1ad3      	subs	r3, r2, r3
 8007192:	683a      	ldr	r2, [r7, #0]
 8007194:	4619      	mov	r1, r3
 8007196:	f7fe fdb9 	bl	8005d0c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800719a:	f7ff f835 	bl	8006208 <xTaskResumeAll>
 800719e:	4603      	mov	r3, r0
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d10a      	bne.n	80071ba <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80071a4:	4b09      	ldr	r3, [pc, #36]	; (80071cc <prvProcessTimerOrBlockTask+0x98>)
 80071a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071aa:	601a      	str	r2, [r3, #0]
 80071ac:	f3bf 8f4f 	dsb	sy
 80071b0:	f3bf 8f6f 	isb	sy
}
 80071b4:	e001      	b.n	80071ba <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80071b6:	f7ff f827 	bl	8006208 <xTaskResumeAll>
}
 80071ba:	bf00      	nop
 80071bc:	3710      	adds	r7, #16
 80071be:	46bd      	mov	sp, r7
 80071c0:	bd80      	pop	{r7, pc}
 80071c2:	bf00      	nop
 80071c4:	20000ec8 	.word	0x20000ec8
 80071c8:	20000ecc 	.word	0x20000ecc
 80071cc:	e000ed04 	.word	0xe000ed04

080071d0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80071d0:	b480      	push	{r7}
 80071d2:	b085      	sub	sp, #20
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80071d8:	4b0e      	ldr	r3, [pc, #56]	; (8007214 <prvGetNextExpireTime+0x44>)
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d101      	bne.n	80071e6 <prvGetNextExpireTime+0x16>
 80071e2:	2201      	movs	r2, #1
 80071e4:	e000      	b.n	80071e8 <prvGetNextExpireTime+0x18>
 80071e6:	2200      	movs	r2, #0
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d105      	bne.n	8007200 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80071f4:	4b07      	ldr	r3, [pc, #28]	; (8007214 <prvGetNextExpireTime+0x44>)
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	68db      	ldr	r3, [r3, #12]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	60fb      	str	r3, [r7, #12]
 80071fe:	e001      	b.n	8007204 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007200:	2300      	movs	r3, #0
 8007202:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007204:	68fb      	ldr	r3, [r7, #12]
}
 8007206:	4618      	mov	r0, r3
 8007208:	3714      	adds	r7, #20
 800720a:	46bd      	mov	sp, r7
 800720c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007210:	4770      	bx	lr
 8007212:	bf00      	nop
 8007214:	20000ec4 	.word	0x20000ec4

08007218 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b084      	sub	sp, #16
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007220:	f7ff f890 	bl	8006344 <xTaskGetTickCount>
 8007224:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007226:	4b0b      	ldr	r3, [pc, #44]	; (8007254 <prvSampleTimeNow+0x3c>)
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	68fa      	ldr	r2, [r7, #12]
 800722c:	429a      	cmp	r2, r3
 800722e:	d205      	bcs.n	800723c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007230:	f000 f936 	bl	80074a0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2201      	movs	r2, #1
 8007238:	601a      	str	r2, [r3, #0]
 800723a:	e002      	b.n	8007242 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2200      	movs	r2, #0
 8007240:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007242:	4a04      	ldr	r2, [pc, #16]	; (8007254 <prvSampleTimeNow+0x3c>)
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007248:	68fb      	ldr	r3, [r7, #12]
}
 800724a:	4618      	mov	r0, r3
 800724c:	3710      	adds	r7, #16
 800724e:	46bd      	mov	sp, r7
 8007250:	bd80      	pop	{r7, pc}
 8007252:	bf00      	nop
 8007254:	20000ed4 	.word	0x20000ed4

08007258 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b086      	sub	sp, #24
 800725c:	af00      	add	r7, sp, #0
 800725e:	60f8      	str	r0, [r7, #12]
 8007260:	60b9      	str	r1, [r7, #8]
 8007262:	607a      	str	r2, [r7, #4]
 8007264:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007266:	2300      	movs	r3, #0
 8007268:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	68ba      	ldr	r2, [r7, #8]
 800726e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	68fa      	ldr	r2, [r7, #12]
 8007274:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007276:	68ba      	ldr	r2, [r7, #8]
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	429a      	cmp	r2, r3
 800727c:	d812      	bhi.n	80072a4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800727e:	687a      	ldr	r2, [r7, #4]
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	1ad2      	subs	r2, r2, r3
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	699b      	ldr	r3, [r3, #24]
 8007288:	429a      	cmp	r2, r3
 800728a:	d302      	bcc.n	8007292 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800728c:	2301      	movs	r3, #1
 800728e:	617b      	str	r3, [r7, #20]
 8007290:	e01b      	b.n	80072ca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007292:	4b10      	ldr	r3, [pc, #64]	; (80072d4 <prvInsertTimerInActiveList+0x7c>)
 8007294:	681a      	ldr	r2, [r3, #0]
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	3304      	adds	r3, #4
 800729a:	4619      	mov	r1, r3
 800729c:	4610      	mov	r0, r2
 800729e:	f7fd ff00 	bl	80050a2 <vListInsert>
 80072a2:	e012      	b.n	80072ca <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80072a4:	687a      	ldr	r2, [r7, #4]
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	429a      	cmp	r2, r3
 80072aa:	d206      	bcs.n	80072ba <prvInsertTimerInActiveList+0x62>
 80072ac:	68ba      	ldr	r2, [r7, #8]
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	429a      	cmp	r2, r3
 80072b2:	d302      	bcc.n	80072ba <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80072b4:	2301      	movs	r3, #1
 80072b6:	617b      	str	r3, [r7, #20]
 80072b8:	e007      	b.n	80072ca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80072ba:	4b07      	ldr	r3, [pc, #28]	; (80072d8 <prvInsertTimerInActiveList+0x80>)
 80072bc:	681a      	ldr	r2, [r3, #0]
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	3304      	adds	r3, #4
 80072c2:	4619      	mov	r1, r3
 80072c4:	4610      	mov	r0, r2
 80072c6:	f7fd feec 	bl	80050a2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80072ca:	697b      	ldr	r3, [r7, #20]
}
 80072cc:	4618      	mov	r0, r3
 80072ce:	3718      	adds	r7, #24
 80072d0:	46bd      	mov	sp, r7
 80072d2:	bd80      	pop	{r7, pc}
 80072d4:	20000ec8 	.word	0x20000ec8
 80072d8:	20000ec4 	.word	0x20000ec4

080072dc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	b08e      	sub	sp, #56	; 0x38
 80072e0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80072e2:	e0ca      	b.n	800747a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	da18      	bge.n	800731c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80072ea:	1d3b      	adds	r3, r7, #4
 80072ec:	3304      	adds	r3, #4
 80072ee:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80072f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d10a      	bne.n	800730c <prvProcessReceivedCommands+0x30>
	__asm volatile
 80072f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072fa:	f383 8811 	msr	BASEPRI, r3
 80072fe:	f3bf 8f6f 	isb	sy
 8007302:	f3bf 8f4f 	dsb	sy
 8007306:	61fb      	str	r3, [r7, #28]
}
 8007308:	bf00      	nop
 800730a:	e7fe      	b.n	800730a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800730c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007312:	6850      	ldr	r0, [r2, #4]
 8007314:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007316:	6892      	ldr	r2, [r2, #8]
 8007318:	4611      	mov	r1, r2
 800731a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2b00      	cmp	r3, #0
 8007320:	f2c0 80aa 	blt.w	8007478 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800732a:	695b      	ldr	r3, [r3, #20]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d004      	beq.n	800733a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007332:	3304      	adds	r3, #4
 8007334:	4618      	mov	r0, r3
 8007336:	f7fd feed 	bl	8005114 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800733a:	463b      	mov	r3, r7
 800733c:	4618      	mov	r0, r3
 800733e:	f7ff ff6b 	bl	8007218 <prvSampleTimeNow>
 8007342:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2b09      	cmp	r3, #9
 8007348:	f200 8097 	bhi.w	800747a <prvProcessReceivedCommands+0x19e>
 800734c:	a201      	add	r2, pc, #4	; (adr r2, 8007354 <prvProcessReceivedCommands+0x78>)
 800734e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007352:	bf00      	nop
 8007354:	0800737d 	.word	0x0800737d
 8007358:	0800737d 	.word	0x0800737d
 800735c:	0800737d 	.word	0x0800737d
 8007360:	080073f1 	.word	0x080073f1
 8007364:	08007405 	.word	0x08007405
 8007368:	0800744f 	.word	0x0800744f
 800736c:	0800737d 	.word	0x0800737d
 8007370:	0800737d 	.word	0x0800737d
 8007374:	080073f1 	.word	0x080073f1
 8007378:	08007405 	.word	0x08007405
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800737c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800737e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007382:	f043 0301 	orr.w	r3, r3, #1
 8007386:	b2da      	uxtb	r2, r3
 8007388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800738a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800738e:	68ba      	ldr	r2, [r7, #8]
 8007390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007392:	699b      	ldr	r3, [r3, #24]
 8007394:	18d1      	adds	r1, r2, r3
 8007396:	68bb      	ldr	r3, [r7, #8]
 8007398:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800739a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800739c:	f7ff ff5c 	bl	8007258 <prvInsertTimerInActiveList>
 80073a0:	4603      	mov	r3, r0
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d069      	beq.n	800747a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80073a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073a8:	6a1b      	ldr	r3, [r3, #32]
 80073aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80073ac:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80073ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80073b4:	f003 0304 	and.w	r3, r3, #4
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d05e      	beq.n	800747a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80073bc:	68ba      	ldr	r2, [r7, #8]
 80073be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073c0:	699b      	ldr	r3, [r3, #24]
 80073c2:	441a      	add	r2, r3
 80073c4:	2300      	movs	r3, #0
 80073c6:	9300      	str	r3, [sp, #0]
 80073c8:	2300      	movs	r3, #0
 80073ca:	2100      	movs	r1, #0
 80073cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80073ce:	f7ff fe05 	bl	8006fdc <xTimerGenericCommand>
 80073d2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80073d4:	6a3b      	ldr	r3, [r7, #32]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d14f      	bne.n	800747a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80073da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073de:	f383 8811 	msr	BASEPRI, r3
 80073e2:	f3bf 8f6f 	isb	sy
 80073e6:	f3bf 8f4f 	dsb	sy
 80073ea:	61bb      	str	r3, [r7, #24]
}
 80073ec:	bf00      	nop
 80073ee:	e7fe      	b.n	80073ee <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80073f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80073f6:	f023 0301 	bic.w	r3, r3, #1
 80073fa:	b2da      	uxtb	r2, r3
 80073fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8007402:	e03a      	b.n	800747a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007406:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800740a:	f043 0301 	orr.w	r3, r3, #1
 800740e:	b2da      	uxtb	r2, r3
 8007410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007412:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007416:	68ba      	ldr	r2, [r7, #8]
 8007418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800741a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800741c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800741e:	699b      	ldr	r3, [r3, #24]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d10a      	bne.n	800743a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8007424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007428:	f383 8811 	msr	BASEPRI, r3
 800742c:	f3bf 8f6f 	isb	sy
 8007430:	f3bf 8f4f 	dsb	sy
 8007434:	617b      	str	r3, [r7, #20]
}
 8007436:	bf00      	nop
 8007438:	e7fe      	b.n	8007438 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800743a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800743c:	699a      	ldr	r2, [r3, #24]
 800743e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007440:	18d1      	adds	r1, r2, r3
 8007442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007444:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007446:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007448:	f7ff ff06 	bl	8007258 <prvInsertTimerInActiveList>
					break;
 800744c:	e015      	b.n	800747a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800744e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007450:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007454:	f003 0302 	and.w	r3, r3, #2
 8007458:	2b00      	cmp	r3, #0
 800745a:	d103      	bne.n	8007464 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800745c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800745e:	f000 fbdf 	bl	8007c20 <vPortFree>
 8007462:	e00a      	b.n	800747a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007466:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800746a:	f023 0301 	bic.w	r3, r3, #1
 800746e:	b2da      	uxtb	r2, r3
 8007470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007472:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007476:	e000      	b.n	800747a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007478:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800747a:	4b08      	ldr	r3, [pc, #32]	; (800749c <prvProcessReceivedCommands+0x1c0>)
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	1d39      	adds	r1, r7, #4
 8007480:	2200      	movs	r2, #0
 8007482:	4618      	mov	r0, r3
 8007484:	f7fe f948 	bl	8005718 <xQueueReceive>
 8007488:	4603      	mov	r3, r0
 800748a:	2b00      	cmp	r3, #0
 800748c:	f47f af2a 	bne.w	80072e4 <prvProcessReceivedCommands+0x8>
	}
}
 8007490:	bf00      	nop
 8007492:	bf00      	nop
 8007494:	3730      	adds	r7, #48	; 0x30
 8007496:	46bd      	mov	sp, r7
 8007498:	bd80      	pop	{r7, pc}
 800749a:	bf00      	nop
 800749c:	20000ecc 	.word	0x20000ecc

080074a0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b088      	sub	sp, #32
 80074a4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80074a6:	e048      	b.n	800753a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80074a8:	4b2d      	ldr	r3, [pc, #180]	; (8007560 <prvSwitchTimerLists+0xc0>)
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	68db      	ldr	r3, [r3, #12]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80074b2:	4b2b      	ldr	r3, [pc, #172]	; (8007560 <prvSwitchTimerLists+0xc0>)
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	68db      	ldr	r3, [r3, #12]
 80074b8:	68db      	ldr	r3, [r3, #12]
 80074ba:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	3304      	adds	r3, #4
 80074c0:	4618      	mov	r0, r3
 80074c2:	f7fd fe27 	bl	8005114 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	6a1b      	ldr	r3, [r3, #32]
 80074ca:	68f8      	ldr	r0, [r7, #12]
 80074cc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80074d4:	f003 0304 	and.w	r3, r3, #4
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d02e      	beq.n	800753a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	699b      	ldr	r3, [r3, #24]
 80074e0:	693a      	ldr	r2, [r7, #16]
 80074e2:	4413      	add	r3, r2
 80074e4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80074e6:	68ba      	ldr	r2, [r7, #8]
 80074e8:	693b      	ldr	r3, [r7, #16]
 80074ea:	429a      	cmp	r2, r3
 80074ec:	d90e      	bls.n	800750c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	68ba      	ldr	r2, [r7, #8]
 80074f2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	68fa      	ldr	r2, [r7, #12]
 80074f8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80074fa:	4b19      	ldr	r3, [pc, #100]	; (8007560 <prvSwitchTimerLists+0xc0>)
 80074fc:	681a      	ldr	r2, [r3, #0]
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	3304      	adds	r3, #4
 8007502:	4619      	mov	r1, r3
 8007504:	4610      	mov	r0, r2
 8007506:	f7fd fdcc 	bl	80050a2 <vListInsert>
 800750a:	e016      	b.n	800753a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800750c:	2300      	movs	r3, #0
 800750e:	9300      	str	r3, [sp, #0]
 8007510:	2300      	movs	r3, #0
 8007512:	693a      	ldr	r2, [r7, #16]
 8007514:	2100      	movs	r1, #0
 8007516:	68f8      	ldr	r0, [r7, #12]
 8007518:	f7ff fd60 	bl	8006fdc <xTimerGenericCommand>
 800751c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d10a      	bne.n	800753a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8007524:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007528:	f383 8811 	msr	BASEPRI, r3
 800752c:	f3bf 8f6f 	isb	sy
 8007530:	f3bf 8f4f 	dsb	sy
 8007534:	603b      	str	r3, [r7, #0]
}
 8007536:	bf00      	nop
 8007538:	e7fe      	b.n	8007538 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800753a:	4b09      	ldr	r3, [pc, #36]	; (8007560 <prvSwitchTimerLists+0xc0>)
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d1b1      	bne.n	80074a8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007544:	4b06      	ldr	r3, [pc, #24]	; (8007560 <prvSwitchTimerLists+0xc0>)
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800754a:	4b06      	ldr	r3, [pc, #24]	; (8007564 <prvSwitchTimerLists+0xc4>)
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	4a04      	ldr	r2, [pc, #16]	; (8007560 <prvSwitchTimerLists+0xc0>)
 8007550:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007552:	4a04      	ldr	r2, [pc, #16]	; (8007564 <prvSwitchTimerLists+0xc4>)
 8007554:	697b      	ldr	r3, [r7, #20]
 8007556:	6013      	str	r3, [r2, #0]
}
 8007558:	bf00      	nop
 800755a:	3718      	adds	r7, #24
 800755c:	46bd      	mov	sp, r7
 800755e:	bd80      	pop	{r7, pc}
 8007560:	20000ec4 	.word	0x20000ec4
 8007564:	20000ec8 	.word	0x20000ec8

08007568 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007568:	b580      	push	{r7, lr}
 800756a:	b082      	sub	sp, #8
 800756c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800756e:	f000 f969 	bl	8007844 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007572:	4b15      	ldr	r3, [pc, #84]	; (80075c8 <prvCheckForValidListAndQueue+0x60>)
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d120      	bne.n	80075bc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800757a:	4814      	ldr	r0, [pc, #80]	; (80075cc <prvCheckForValidListAndQueue+0x64>)
 800757c:	f7fd fd40 	bl	8005000 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007580:	4813      	ldr	r0, [pc, #76]	; (80075d0 <prvCheckForValidListAndQueue+0x68>)
 8007582:	f7fd fd3d 	bl	8005000 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007586:	4b13      	ldr	r3, [pc, #76]	; (80075d4 <prvCheckForValidListAndQueue+0x6c>)
 8007588:	4a10      	ldr	r2, [pc, #64]	; (80075cc <prvCheckForValidListAndQueue+0x64>)
 800758a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800758c:	4b12      	ldr	r3, [pc, #72]	; (80075d8 <prvCheckForValidListAndQueue+0x70>)
 800758e:	4a10      	ldr	r2, [pc, #64]	; (80075d0 <prvCheckForValidListAndQueue+0x68>)
 8007590:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007592:	2300      	movs	r3, #0
 8007594:	9300      	str	r3, [sp, #0]
 8007596:	4b11      	ldr	r3, [pc, #68]	; (80075dc <prvCheckForValidListAndQueue+0x74>)
 8007598:	4a11      	ldr	r2, [pc, #68]	; (80075e0 <prvCheckForValidListAndQueue+0x78>)
 800759a:	2110      	movs	r1, #16
 800759c:	200a      	movs	r0, #10
 800759e:	f7fd fe4b 	bl	8005238 <xQueueGenericCreateStatic>
 80075a2:	4603      	mov	r3, r0
 80075a4:	4a08      	ldr	r2, [pc, #32]	; (80075c8 <prvCheckForValidListAndQueue+0x60>)
 80075a6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80075a8:	4b07      	ldr	r3, [pc, #28]	; (80075c8 <prvCheckForValidListAndQueue+0x60>)
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d005      	beq.n	80075bc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80075b0:	4b05      	ldr	r3, [pc, #20]	; (80075c8 <prvCheckForValidListAndQueue+0x60>)
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	490b      	ldr	r1, [pc, #44]	; (80075e4 <prvCheckForValidListAndQueue+0x7c>)
 80075b6:	4618      	mov	r0, r3
 80075b8:	f7fe fb7e 	bl	8005cb8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80075bc:	f000 f972 	bl	80078a4 <vPortExitCritical>
}
 80075c0:	bf00      	nop
 80075c2:	46bd      	mov	sp, r7
 80075c4:	bd80      	pop	{r7, pc}
 80075c6:	bf00      	nop
 80075c8:	20000ecc 	.word	0x20000ecc
 80075cc:	20000e9c 	.word	0x20000e9c
 80075d0:	20000eb0 	.word	0x20000eb0
 80075d4:	20000ec4 	.word	0x20000ec4
 80075d8:	20000ec8 	.word	0x20000ec8
 80075dc:	20000f78 	.word	0x20000f78
 80075e0:	20000ed8 	.word	0x20000ed8
 80075e4:	08008ff0 	.word	0x08008ff0

080075e8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80075e8:	b480      	push	{r7}
 80075ea:	b085      	sub	sp, #20
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	60f8      	str	r0, [r7, #12]
 80075f0:	60b9      	str	r1, [r7, #8]
 80075f2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	3b04      	subs	r3, #4
 80075f8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007600:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	3b04      	subs	r3, #4
 8007606:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007608:	68bb      	ldr	r3, [r7, #8]
 800760a:	f023 0201 	bic.w	r2, r3, #1
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	3b04      	subs	r3, #4
 8007616:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007618:	4a0c      	ldr	r2, [pc, #48]	; (800764c <pxPortInitialiseStack+0x64>)
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	3b14      	subs	r3, #20
 8007622:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007624:	687a      	ldr	r2, [r7, #4]
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	3b04      	subs	r3, #4
 800762e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	f06f 0202 	mvn.w	r2, #2
 8007636:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	3b20      	subs	r3, #32
 800763c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800763e:	68fb      	ldr	r3, [r7, #12]
}
 8007640:	4618      	mov	r0, r3
 8007642:	3714      	adds	r7, #20
 8007644:	46bd      	mov	sp, r7
 8007646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764a:	4770      	bx	lr
 800764c:	08007651 	.word	0x08007651

08007650 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007650:	b480      	push	{r7}
 8007652:	b085      	sub	sp, #20
 8007654:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007656:	2300      	movs	r3, #0
 8007658:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800765a:	4b12      	ldr	r3, [pc, #72]	; (80076a4 <prvTaskExitError+0x54>)
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007662:	d00a      	beq.n	800767a <prvTaskExitError+0x2a>
	__asm volatile
 8007664:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007668:	f383 8811 	msr	BASEPRI, r3
 800766c:	f3bf 8f6f 	isb	sy
 8007670:	f3bf 8f4f 	dsb	sy
 8007674:	60fb      	str	r3, [r7, #12]
}
 8007676:	bf00      	nop
 8007678:	e7fe      	b.n	8007678 <prvTaskExitError+0x28>
	__asm volatile
 800767a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800767e:	f383 8811 	msr	BASEPRI, r3
 8007682:	f3bf 8f6f 	isb	sy
 8007686:	f3bf 8f4f 	dsb	sy
 800768a:	60bb      	str	r3, [r7, #8]
}
 800768c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800768e:	bf00      	nop
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d0fc      	beq.n	8007690 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007696:	bf00      	nop
 8007698:	bf00      	nop
 800769a:	3714      	adds	r7, #20
 800769c:	46bd      	mov	sp, r7
 800769e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a2:	4770      	bx	lr
 80076a4:	200000d0 	.word	0x200000d0
	...

080076b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80076b0:	4b07      	ldr	r3, [pc, #28]	; (80076d0 <pxCurrentTCBConst2>)
 80076b2:	6819      	ldr	r1, [r3, #0]
 80076b4:	6808      	ldr	r0, [r1, #0]
 80076b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076ba:	f380 8809 	msr	PSP, r0
 80076be:	f3bf 8f6f 	isb	sy
 80076c2:	f04f 0000 	mov.w	r0, #0
 80076c6:	f380 8811 	msr	BASEPRI, r0
 80076ca:	4770      	bx	lr
 80076cc:	f3af 8000 	nop.w

080076d0 <pxCurrentTCBConst2>:
 80076d0:	2000099c 	.word	0x2000099c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80076d4:	bf00      	nop
 80076d6:	bf00      	nop

080076d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80076d8:	4808      	ldr	r0, [pc, #32]	; (80076fc <prvPortStartFirstTask+0x24>)
 80076da:	6800      	ldr	r0, [r0, #0]
 80076dc:	6800      	ldr	r0, [r0, #0]
 80076de:	f380 8808 	msr	MSP, r0
 80076e2:	f04f 0000 	mov.w	r0, #0
 80076e6:	f380 8814 	msr	CONTROL, r0
 80076ea:	b662      	cpsie	i
 80076ec:	b661      	cpsie	f
 80076ee:	f3bf 8f4f 	dsb	sy
 80076f2:	f3bf 8f6f 	isb	sy
 80076f6:	df00      	svc	0
 80076f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80076fa:	bf00      	nop
 80076fc:	e000ed08 	.word	0xe000ed08

08007700 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007700:	b580      	push	{r7, lr}
 8007702:	b086      	sub	sp, #24
 8007704:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007706:	4b46      	ldr	r3, [pc, #280]	; (8007820 <xPortStartScheduler+0x120>)
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	4a46      	ldr	r2, [pc, #280]	; (8007824 <xPortStartScheduler+0x124>)
 800770c:	4293      	cmp	r3, r2
 800770e:	d10a      	bne.n	8007726 <xPortStartScheduler+0x26>
	__asm volatile
 8007710:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007714:	f383 8811 	msr	BASEPRI, r3
 8007718:	f3bf 8f6f 	isb	sy
 800771c:	f3bf 8f4f 	dsb	sy
 8007720:	613b      	str	r3, [r7, #16]
}
 8007722:	bf00      	nop
 8007724:	e7fe      	b.n	8007724 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007726:	4b3e      	ldr	r3, [pc, #248]	; (8007820 <xPortStartScheduler+0x120>)
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	4a3f      	ldr	r2, [pc, #252]	; (8007828 <xPortStartScheduler+0x128>)
 800772c:	4293      	cmp	r3, r2
 800772e:	d10a      	bne.n	8007746 <xPortStartScheduler+0x46>
	__asm volatile
 8007730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007734:	f383 8811 	msr	BASEPRI, r3
 8007738:	f3bf 8f6f 	isb	sy
 800773c:	f3bf 8f4f 	dsb	sy
 8007740:	60fb      	str	r3, [r7, #12]
}
 8007742:	bf00      	nop
 8007744:	e7fe      	b.n	8007744 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007746:	4b39      	ldr	r3, [pc, #228]	; (800782c <xPortStartScheduler+0x12c>)
 8007748:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800774a:	697b      	ldr	r3, [r7, #20]
 800774c:	781b      	ldrb	r3, [r3, #0]
 800774e:	b2db      	uxtb	r3, r3
 8007750:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007752:	697b      	ldr	r3, [r7, #20]
 8007754:	22ff      	movs	r2, #255	; 0xff
 8007756:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007758:	697b      	ldr	r3, [r7, #20]
 800775a:	781b      	ldrb	r3, [r3, #0]
 800775c:	b2db      	uxtb	r3, r3
 800775e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007760:	78fb      	ldrb	r3, [r7, #3]
 8007762:	b2db      	uxtb	r3, r3
 8007764:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007768:	b2da      	uxtb	r2, r3
 800776a:	4b31      	ldr	r3, [pc, #196]	; (8007830 <xPortStartScheduler+0x130>)
 800776c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800776e:	4b31      	ldr	r3, [pc, #196]	; (8007834 <xPortStartScheduler+0x134>)
 8007770:	2207      	movs	r2, #7
 8007772:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007774:	e009      	b.n	800778a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007776:	4b2f      	ldr	r3, [pc, #188]	; (8007834 <xPortStartScheduler+0x134>)
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	3b01      	subs	r3, #1
 800777c:	4a2d      	ldr	r2, [pc, #180]	; (8007834 <xPortStartScheduler+0x134>)
 800777e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007780:	78fb      	ldrb	r3, [r7, #3]
 8007782:	b2db      	uxtb	r3, r3
 8007784:	005b      	lsls	r3, r3, #1
 8007786:	b2db      	uxtb	r3, r3
 8007788:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800778a:	78fb      	ldrb	r3, [r7, #3]
 800778c:	b2db      	uxtb	r3, r3
 800778e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007792:	2b80      	cmp	r3, #128	; 0x80
 8007794:	d0ef      	beq.n	8007776 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007796:	4b27      	ldr	r3, [pc, #156]	; (8007834 <xPortStartScheduler+0x134>)
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	f1c3 0307 	rsb	r3, r3, #7
 800779e:	2b04      	cmp	r3, #4
 80077a0:	d00a      	beq.n	80077b8 <xPortStartScheduler+0xb8>
	__asm volatile
 80077a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077a6:	f383 8811 	msr	BASEPRI, r3
 80077aa:	f3bf 8f6f 	isb	sy
 80077ae:	f3bf 8f4f 	dsb	sy
 80077b2:	60bb      	str	r3, [r7, #8]
}
 80077b4:	bf00      	nop
 80077b6:	e7fe      	b.n	80077b6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80077b8:	4b1e      	ldr	r3, [pc, #120]	; (8007834 <xPortStartScheduler+0x134>)
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	021b      	lsls	r3, r3, #8
 80077be:	4a1d      	ldr	r2, [pc, #116]	; (8007834 <xPortStartScheduler+0x134>)
 80077c0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80077c2:	4b1c      	ldr	r3, [pc, #112]	; (8007834 <xPortStartScheduler+0x134>)
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80077ca:	4a1a      	ldr	r2, [pc, #104]	; (8007834 <xPortStartScheduler+0x134>)
 80077cc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	b2da      	uxtb	r2, r3
 80077d2:	697b      	ldr	r3, [r7, #20]
 80077d4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80077d6:	4b18      	ldr	r3, [pc, #96]	; (8007838 <xPortStartScheduler+0x138>)
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	4a17      	ldr	r2, [pc, #92]	; (8007838 <xPortStartScheduler+0x138>)
 80077dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80077e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80077e2:	4b15      	ldr	r3, [pc, #84]	; (8007838 <xPortStartScheduler+0x138>)
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	4a14      	ldr	r2, [pc, #80]	; (8007838 <xPortStartScheduler+0x138>)
 80077e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80077ec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80077ee:	f000 f8dd 	bl	80079ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80077f2:	4b12      	ldr	r3, [pc, #72]	; (800783c <xPortStartScheduler+0x13c>)
 80077f4:	2200      	movs	r2, #0
 80077f6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80077f8:	f000 f8fc 	bl	80079f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80077fc:	4b10      	ldr	r3, [pc, #64]	; (8007840 <xPortStartScheduler+0x140>)
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	4a0f      	ldr	r2, [pc, #60]	; (8007840 <xPortStartScheduler+0x140>)
 8007802:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007806:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007808:	f7ff ff66 	bl	80076d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800780c:	f7fe fe64 	bl	80064d8 <vTaskSwitchContext>
	prvTaskExitError();
 8007810:	f7ff ff1e 	bl	8007650 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007814:	2300      	movs	r3, #0
}
 8007816:	4618      	mov	r0, r3
 8007818:	3718      	adds	r7, #24
 800781a:	46bd      	mov	sp, r7
 800781c:	bd80      	pop	{r7, pc}
 800781e:	bf00      	nop
 8007820:	e000ed00 	.word	0xe000ed00
 8007824:	410fc271 	.word	0x410fc271
 8007828:	410fc270 	.word	0x410fc270
 800782c:	e000e400 	.word	0xe000e400
 8007830:	20000fc8 	.word	0x20000fc8
 8007834:	20000fcc 	.word	0x20000fcc
 8007838:	e000ed20 	.word	0xe000ed20
 800783c:	200000d0 	.word	0x200000d0
 8007840:	e000ef34 	.word	0xe000ef34

08007844 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007844:	b480      	push	{r7}
 8007846:	b083      	sub	sp, #12
 8007848:	af00      	add	r7, sp, #0
	__asm volatile
 800784a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800784e:	f383 8811 	msr	BASEPRI, r3
 8007852:	f3bf 8f6f 	isb	sy
 8007856:	f3bf 8f4f 	dsb	sy
 800785a:	607b      	str	r3, [r7, #4]
}
 800785c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800785e:	4b0f      	ldr	r3, [pc, #60]	; (800789c <vPortEnterCritical+0x58>)
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	3301      	adds	r3, #1
 8007864:	4a0d      	ldr	r2, [pc, #52]	; (800789c <vPortEnterCritical+0x58>)
 8007866:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007868:	4b0c      	ldr	r3, [pc, #48]	; (800789c <vPortEnterCritical+0x58>)
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	2b01      	cmp	r3, #1
 800786e:	d10f      	bne.n	8007890 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007870:	4b0b      	ldr	r3, [pc, #44]	; (80078a0 <vPortEnterCritical+0x5c>)
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	b2db      	uxtb	r3, r3
 8007876:	2b00      	cmp	r3, #0
 8007878:	d00a      	beq.n	8007890 <vPortEnterCritical+0x4c>
	__asm volatile
 800787a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800787e:	f383 8811 	msr	BASEPRI, r3
 8007882:	f3bf 8f6f 	isb	sy
 8007886:	f3bf 8f4f 	dsb	sy
 800788a:	603b      	str	r3, [r7, #0]
}
 800788c:	bf00      	nop
 800788e:	e7fe      	b.n	800788e <vPortEnterCritical+0x4a>
	}
}
 8007890:	bf00      	nop
 8007892:	370c      	adds	r7, #12
 8007894:	46bd      	mov	sp, r7
 8007896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789a:	4770      	bx	lr
 800789c:	200000d0 	.word	0x200000d0
 80078a0:	e000ed04 	.word	0xe000ed04

080078a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80078a4:	b480      	push	{r7}
 80078a6:	b083      	sub	sp, #12
 80078a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80078aa:	4b12      	ldr	r3, [pc, #72]	; (80078f4 <vPortExitCritical+0x50>)
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d10a      	bne.n	80078c8 <vPortExitCritical+0x24>
	__asm volatile
 80078b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078b6:	f383 8811 	msr	BASEPRI, r3
 80078ba:	f3bf 8f6f 	isb	sy
 80078be:	f3bf 8f4f 	dsb	sy
 80078c2:	607b      	str	r3, [r7, #4]
}
 80078c4:	bf00      	nop
 80078c6:	e7fe      	b.n	80078c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80078c8:	4b0a      	ldr	r3, [pc, #40]	; (80078f4 <vPortExitCritical+0x50>)
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	3b01      	subs	r3, #1
 80078ce:	4a09      	ldr	r2, [pc, #36]	; (80078f4 <vPortExitCritical+0x50>)
 80078d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80078d2:	4b08      	ldr	r3, [pc, #32]	; (80078f4 <vPortExitCritical+0x50>)
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d105      	bne.n	80078e6 <vPortExitCritical+0x42>
 80078da:	2300      	movs	r3, #0
 80078dc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	f383 8811 	msr	BASEPRI, r3
}
 80078e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80078e6:	bf00      	nop
 80078e8:	370c      	adds	r7, #12
 80078ea:	46bd      	mov	sp, r7
 80078ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f0:	4770      	bx	lr
 80078f2:	bf00      	nop
 80078f4:	200000d0 	.word	0x200000d0
	...

08007900 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007900:	f3ef 8009 	mrs	r0, PSP
 8007904:	f3bf 8f6f 	isb	sy
 8007908:	4b15      	ldr	r3, [pc, #84]	; (8007960 <pxCurrentTCBConst>)
 800790a:	681a      	ldr	r2, [r3, #0]
 800790c:	f01e 0f10 	tst.w	lr, #16
 8007910:	bf08      	it	eq
 8007912:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007916:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800791a:	6010      	str	r0, [r2, #0]
 800791c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007920:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007924:	f380 8811 	msr	BASEPRI, r0
 8007928:	f3bf 8f4f 	dsb	sy
 800792c:	f3bf 8f6f 	isb	sy
 8007930:	f7fe fdd2 	bl	80064d8 <vTaskSwitchContext>
 8007934:	f04f 0000 	mov.w	r0, #0
 8007938:	f380 8811 	msr	BASEPRI, r0
 800793c:	bc09      	pop	{r0, r3}
 800793e:	6819      	ldr	r1, [r3, #0]
 8007940:	6808      	ldr	r0, [r1, #0]
 8007942:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007946:	f01e 0f10 	tst.w	lr, #16
 800794a:	bf08      	it	eq
 800794c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007950:	f380 8809 	msr	PSP, r0
 8007954:	f3bf 8f6f 	isb	sy
 8007958:	4770      	bx	lr
 800795a:	bf00      	nop
 800795c:	f3af 8000 	nop.w

08007960 <pxCurrentTCBConst>:
 8007960:	2000099c 	.word	0x2000099c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007964:	bf00      	nop
 8007966:	bf00      	nop

08007968 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007968:	b580      	push	{r7, lr}
 800796a:	b082      	sub	sp, #8
 800796c:	af00      	add	r7, sp, #0
	__asm volatile
 800796e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007972:	f383 8811 	msr	BASEPRI, r3
 8007976:	f3bf 8f6f 	isb	sy
 800797a:	f3bf 8f4f 	dsb	sy
 800797e:	607b      	str	r3, [r7, #4]
}
 8007980:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007982:	f7fe fcef 	bl	8006364 <xTaskIncrementTick>
 8007986:	4603      	mov	r3, r0
 8007988:	2b00      	cmp	r3, #0
 800798a:	d003      	beq.n	8007994 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800798c:	4b06      	ldr	r3, [pc, #24]	; (80079a8 <xPortSysTickHandler+0x40>)
 800798e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007992:	601a      	str	r2, [r3, #0]
 8007994:	2300      	movs	r3, #0
 8007996:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	f383 8811 	msr	BASEPRI, r3
}
 800799e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80079a0:	bf00      	nop
 80079a2:	3708      	adds	r7, #8
 80079a4:	46bd      	mov	sp, r7
 80079a6:	bd80      	pop	{r7, pc}
 80079a8:	e000ed04 	.word	0xe000ed04

080079ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80079ac:	b480      	push	{r7}
 80079ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80079b0:	4b0b      	ldr	r3, [pc, #44]	; (80079e0 <vPortSetupTimerInterrupt+0x34>)
 80079b2:	2200      	movs	r2, #0
 80079b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80079b6:	4b0b      	ldr	r3, [pc, #44]	; (80079e4 <vPortSetupTimerInterrupt+0x38>)
 80079b8:	2200      	movs	r2, #0
 80079ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80079bc:	4b0a      	ldr	r3, [pc, #40]	; (80079e8 <vPortSetupTimerInterrupt+0x3c>)
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	4a0a      	ldr	r2, [pc, #40]	; (80079ec <vPortSetupTimerInterrupt+0x40>)
 80079c2:	fba2 2303 	umull	r2, r3, r2, r3
 80079c6:	099b      	lsrs	r3, r3, #6
 80079c8:	4a09      	ldr	r2, [pc, #36]	; (80079f0 <vPortSetupTimerInterrupt+0x44>)
 80079ca:	3b01      	subs	r3, #1
 80079cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80079ce:	4b04      	ldr	r3, [pc, #16]	; (80079e0 <vPortSetupTimerInterrupt+0x34>)
 80079d0:	2207      	movs	r2, #7
 80079d2:	601a      	str	r2, [r3, #0]
}
 80079d4:	bf00      	nop
 80079d6:	46bd      	mov	sp, r7
 80079d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079dc:	4770      	bx	lr
 80079de:	bf00      	nop
 80079e0:	e000e010 	.word	0xe000e010
 80079e4:	e000e018 	.word	0xe000e018
 80079e8:	200000c4 	.word	0x200000c4
 80079ec:	10624dd3 	.word	0x10624dd3
 80079f0:	e000e014 	.word	0xe000e014

080079f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80079f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007a04 <vPortEnableVFP+0x10>
 80079f8:	6801      	ldr	r1, [r0, #0]
 80079fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80079fe:	6001      	str	r1, [r0, #0]
 8007a00:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007a02:	bf00      	nop
 8007a04:	e000ed88 	.word	0xe000ed88

08007a08 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007a08:	b480      	push	{r7}
 8007a0a:	b085      	sub	sp, #20
 8007a0c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007a0e:	f3ef 8305 	mrs	r3, IPSR
 8007a12:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	2b0f      	cmp	r3, #15
 8007a18:	d914      	bls.n	8007a44 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007a1a:	4a17      	ldr	r2, [pc, #92]	; (8007a78 <vPortValidateInterruptPriority+0x70>)
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	4413      	add	r3, r2
 8007a20:	781b      	ldrb	r3, [r3, #0]
 8007a22:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007a24:	4b15      	ldr	r3, [pc, #84]	; (8007a7c <vPortValidateInterruptPriority+0x74>)
 8007a26:	781b      	ldrb	r3, [r3, #0]
 8007a28:	7afa      	ldrb	r2, [r7, #11]
 8007a2a:	429a      	cmp	r2, r3
 8007a2c:	d20a      	bcs.n	8007a44 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007a2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a32:	f383 8811 	msr	BASEPRI, r3
 8007a36:	f3bf 8f6f 	isb	sy
 8007a3a:	f3bf 8f4f 	dsb	sy
 8007a3e:	607b      	str	r3, [r7, #4]
}
 8007a40:	bf00      	nop
 8007a42:	e7fe      	b.n	8007a42 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007a44:	4b0e      	ldr	r3, [pc, #56]	; (8007a80 <vPortValidateInterruptPriority+0x78>)
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007a4c:	4b0d      	ldr	r3, [pc, #52]	; (8007a84 <vPortValidateInterruptPriority+0x7c>)
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	429a      	cmp	r2, r3
 8007a52:	d90a      	bls.n	8007a6a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a58:	f383 8811 	msr	BASEPRI, r3
 8007a5c:	f3bf 8f6f 	isb	sy
 8007a60:	f3bf 8f4f 	dsb	sy
 8007a64:	603b      	str	r3, [r7, #0]
}
 8007a66:	bf00      	nop
 8007a68:	e7fe      	b.n	8007a68 <vPortValidateInterruptPriority+0x60>
	}
 8007a6a:	bf00      	nop
 8007a6c:	3714      	adds	r7, #20
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a74:	4770      	bx	lr
 8007a76:	bf00      	nop
 8007a78:	e000e3f0 	.word	0xe000e3f0
 8007a7c:	20000fc8 	.word	0x20000fc8
 8007a80:	e000ed0c 	.word	0xe000ed0c
 8007a84:	20000fcc 	.word	0x20000fcc

08007a88 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b08a      	sub	sp, #40	; 0x28
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007a90:	2300      	movs	r3, #0
 8007a92:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007a94:	f7fe fbaa 	bl	80061ec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007a98:	4b5b      	ldr	r3, [pc, #364]	; (8007c08 <pvPortMalloc+0x180>)
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d101      	bne.n	8007aa4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007aa0:	f000 f920 	bl	8007ce4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007aa4:	4b59      	ldr	r3, [pc, #356]	; (8007c0c <pvPortMalloc+0x184>)
 8007aa6:	681a      	ldr	r2, [r3, #0]
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	4013      	ands	r3, r2
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	f040 8093 	bne.w	8007bd8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d01d      	beq.n	8007af4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007ab8:	2208      	movs	r2, #8
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	4413      	add	r3, r2
 8007abe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	f003 0307 	and.w	r3, r3, #7
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d014      	beq.n	8007af4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	f023 0307 	bic.w	r3, r3, #7
 8007ad0:	3308      	adds	r3, #8
 8007ad2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	f003 0307 	and.w	r3, r3, #7
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d00a      	beq.n	8007af4 <pvPortMalloc+0x6c>
	__asm volatile
 8007ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ae2:	f383 8811 	msr	BASEPRI, r3
 8007ae6:	f3bf 8f6f 	isb	sy
 8007aea:	f3bf 8f4f 	dsb	sy
 8007aee:	617b      	str	r3, [r7, #20]
}
 8007af0:	bf00      	nop
 8007af2:	e7fe      	b.n	8007af2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d06e      	beq.n	8007bd8 <pvPortMalloc+0x150>
 8007afa:	4b45      	ldr	r3, [pc, #276]	; (8007c10 <pvPortMalloc+0x188>)
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	687a      	ldr	r2, [r7, #4]
 8007b00:	429a      	cmp	r2, r3
 8007b02:	d869      	bhi.n	8007bd8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007b04:	4b43      	ldr	r3, [pc, #268]	; (8007c14 <pvPortMalloc+0x18c>)
 8007b06:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007b08:	4b42      	ldr	r3, [pc, #264]	; (8007c14 <pvPortMalloc+0x18c>)
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007b0e:	e004      	b.n	8007b1a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b12:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b1c:	685b      	ldr	r3, [r3, #4]
 8007b1e:	687a      	ldr	r2, [r7, #4]
 8007b20:	429a      	cmp	r2, r3
 8007b22:	d903      	bls.n	8007b2c <pvPortMalloc+0xa4>
 8007b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d1f1      	bne.n	8007b10 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007b2c:	4b36      	ldr	r3, [pc, #216]	; (8007c08 <pvPortMalloc+0x180>)
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b32:	429a      	cmp	r2, r3
 8007b34:	d050      	beq.n	8007bd8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007b36:	6a3b      	ldr	r3, [r7, #32]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	2208      	movs	r2, #8
 8007b3c:	4413      	add	r3, r2
 8007b3e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b42:	681a      	ldr	r2, [r3, #0]
 8007b44:	6a3b      	ldr	r3, [r7, #32]
 8007b46:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b4a:	685a      	ldr	r2, [r3, #4]
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	1ad2      	subs	r2, r2, r3
 8007b50:	2308      	movs	r3, #8
 8007b52:	005b      	lsls	r3, r3, #1
 8007b54:	429a      	cmp	r2, r3
 8007b56:	d91f      	bls.n	8007b98 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007b58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	4413      	add	r3, r2
 8007b5e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007b60:	69bb      	ldr	r3, [r7, #24]
 8007b62:	f003 0307 	and.w	r3, r3, #7
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d00a      	beq.n	8007b80 <pvPortMalloc+0xf8>
	__asm volatile
 8007b6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b6e:	f383 8811 	msr	BASEPRI, r3
 8007b72:	f3bf 8f6f 	isb	sy
 8007b76:	f3bf 8f4f 	dsb	sy
 8007b7a:	613b      	str	r3, [r7, #16]
}
 8007b7c:	bf00      	nop
 8007b7e:	e7fe      	b.n	8007b7e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b82:	685a      	ldr	r2, [r3, #4]
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	1ad2      	subs	r2, r2, r3
 8007b88:	69bb      	ldr	r3, [r7, #24]
 8007b8a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b8e:	687a      	ldr	r2, [r7, #4]
 8007b90:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007b92:	69b8      	ldr	r0, [r7, #24]
 8007b94:	f000 f908 	bl	8007da8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007b98:	4b1d      	ldr	r3, [pc, #116]	; (8007c10 <pvPortMalloc+0x188>)
 8007b9a:	681a      	ldr	r2, [r3, #0]
 8007b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b9e:	685b      	ldr	r3, [r3, #4]
 8007ba0:	1ad3      	subs	r3, r2, r3
 8007ba2:	4a1b      	ldr	r2, [pc, #108]	; (8007c10 <pvPortMalloc+0x188>)
 8007ba4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007ba6:	4b1a      	ldr	r3, [pc, #104]	; (8007c10 <pvPortMalloc+0x188>)
 8007ba8:	681a      	ldr	r2, [r3, #0]
 8007baa:	4b1b      	ldr	r3, [pc, #108]	; (8007c18 <pvPortMalloc+0x190>)
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	429a      	cmp	r2, r3
 8007bb0:	d203      	bcs.n	8007bba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007bb2:	4b17      	ldr	r3, [pc, #92]	; (8007c10 <pvPortMalloc+0x188>)
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	4a18      	ldr	r2, [pc, #96]	; (8007c18 <pvPortMalloc+0x190>)
 8007bb8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bbc:	685a      	ldr	r2, [r3, #4]
 8007bbe:	4b13      	ldr	r3, [pc, #76]	; (8007c0c <pvPortMalloc+0x184>)
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	431a      	orrs	r2, r3
 8007bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bc6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bca:	2200      	movs	r2, #0
 8007bcc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007bce:	4b13      	ldr	r3, [pc, #76]	; (8007c1c <pvPortMalloc+0x194>)
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	3301      	adds	r3, #1
 8007bd4:	4a11      	ldr	r2, [pc, #68]	; (8007c1c <pvPortMalloc+0x194>)
 8007bd6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007bd8:	f7fe fb16 	bl	8006208 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007bdc:	69fb      	ldr	r3, [r7, #28]
 8007bde:	f003 0307 	and.w	r3, r3, #7
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d00a      	beq.n	8007bfc <pvPortMalloc+0x174>
	__asm volatile
 8007be6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bea:	f383 8811 	msr	BASEPRI, r3
 8007bee:	f3bf 8f6f 	isb	sy
 8007bf2:	f3bf 8f4f 	dsb	sy
 8007bf6:	60fb      	str	r3, [r7, #12]
}
 8007bf8:	bf00      	nop
 8007bfa:	e7fe      	b.n	8007bfa <pvPortMalloc+0x172>
	return pvReturn;
 8007bfc:	69fb      	ldr	r3, [r7, #28]
}
 8007bfe:	4618      	mov	r0, r3
 8007c00:	3728      	adds	r7, #40	; 0x28
 8007c02:	46bd      	mov	sp, r7
 8007c04:	bd80      	pop	{r7, pc}
 8007c06:	bf00      	nop
 8007c08:	20004bd8 	.word	0x20004bd8
 8007c0c:	20004bec 	.word	0x20004bec
 8007c10:	20004bdc 	.word	0x20004bdc
 8007c14:	20004bd0 	.word	0x20004bd0
 8007c18:	20004be0 	.word	0x20004be0
 8007c1c:	20004be4 	.word	0x20004be4

08007c20 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b086      	sub	sp, #24
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d04d      	beq.n	8007cce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007c32:	2308      	movs	r3, #8
 8007c34:	425b      	negs	r3, r3
 8007c36:	697a      	ldr	r2, [r7, #20]
 8007c38:	4413      	add	r3, r2
 8007c3a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007c3c:	697b      	ldr	r3, [r7, #20]
 8007c3e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007c40:	693b      	ldr	r3, [r7, #16]
 8007c42:	685a      	ldr	r2, [r3, #4]
 8007c44:	4b24      	ldr	r3, [pc, #144]	; (8007cd8 <vPortFree+0xb8>)
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	4013      	ands	r3, r2
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d10a      	bne.n	8007c64 <vPortFree+0x44>
	__asm volatile
 8007c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c52:	f383 8811 	msr	BASEPRI, r3
 8007c56:	f3bf 8f6f 	isb	sy
 8007c5a:	f3bf 8f4f 	dsb	sy
 8007c5e:	60fb      	str	r3, [r7, #12]
}
 8007c60:	bf00      	nop
 8007c62:	e7fe      	b.n	8007c62 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007c64:	693b      	ldr	r3, [r7, #16]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d00a      	beq.n	8007c82 <vPortFree+0x62>
	__asm volatile
 8007c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c70:	f383 8811 	msr	BASEPRI, r3
 8007c74:	f3bf 8f6f 	isb	sy
 8007c78:	f3bf 8f4f 	dsb	sy
 8007c7c:	60bb      	str	r3, [r7, #8]
}
 8007c7e:	bf00      	nop
 8007c80:	e7fe      	b.n	8007c80 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007c82:	693b      	ldr	r3, [r7, #16]
 8007c84:	685a      	ldr	r2, [r3, #4]
 8007c86:	4b14      	ldr	r3, [pc, #80]	; (8007cd8 <vPortFree+0xb8>)
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	4013      	ands	r3, r2
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d01e      	beq.n	8007cce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007c90:	693b      	ldr	r3, [r7, #16]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d11a      	bne.n	8007cce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007c98:	693b      	ldr	r3, [r7, #16]
 8007c9a:	685a      	ldr	r2, [r3, #4]
 8007c9c:	4b0e      	ldr	r3, [pc, #56]	; (8007cd8 <vPortFree+0xb8>)
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	43db      	mvns	r3, r3
 8007ca2:	401a      	ands	r2, r3
 8007ca4:	693b      	ldr	r3, [r7, #16]
 8007ca6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007ca8:	f7fe faa0 	bl	80061ec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007cac:	693b      	ldr	r3, [r7, #16]
 8007cae:	685a      	ldr	r2, [r3, #4]
 8007cb0:	4b0a      	ldr	r3, [pc, #40]	; (8007cdc <vPortFree+0xbc>)
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	4413      	add	r3, r2
 8007cb6:	4a09      	ldr	r2, [pc, #36]	; (8007cdc <vPortFree+0xbc>)
 8007cb8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007cba:	6938      	ldr	r0, [r7, #16]
 8007cbc:	f000 f874 	bl	8007da8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007cc0:	4b07      	ldr	r3, [pc, #28]	; (8007ce0 <vPortFree+0xc0>)
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	3301      	adds	r3, #1
 8007cc6:	4a06      	ldr	r2, [pc, #24]	; (8007ce0 <vPortFree+0xc0>)
 8007cc8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007cca:	f7fe fa9d 	bl	8006208 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007cce:	bf00      	nop
 8007cd0:	3718      	adds	r7, #24
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	bd80      	pop	{r7, pc}
 8007cd6:	bf00      	nop
 8007cd8:	20004bec 	.word	0x20004bec
 8007cdc:	20004bdc 	.word	0x20004bdc
 8007ce0:	20004be8 	.word	0x20004be8

08007ce4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007ce4:	b480      	push	{r7}
 8007ce6:	b085      	sub	sp, #20
 8007ce8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007cea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8007cee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007cf0:	4b27      	ldr	r3, [pc, #156]	; (8007d90 <prvHeapInit+0xac>)
 8007cf2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	f003 0307 	and.w	r3, r3, #7
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d00c      	beq.n	8007d18 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	3307      	adds	r3, #7
 8007d02:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	f023 0307 	bic.w	r3, r3, #7
 8007d0a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007d0c:	68ba      	ldr	r2, [r7, #8]
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	1ad3      	subs	r3, r2, r3
 8007d12:	4a1f      	ldr	r2, [pc, #124]	; (8007d90 <prvHeapInit+0xac>)
 8007d14:	4413      	add	r3, r2
 8007d16:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007d1c:	4a1d      	ldr	r2, [pc, #116]	; (8007d94 <prvHeapInit+0xb0>)
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007d22:	4b1c      	ldr	r3, [pc, #112]	; (8007d94 <prvHeapInit+0xb0>)
 8007d24:	2200      	movs	r2, #0
 8007d26:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	68ba      	ldr	r2, [r7, #8]
 8007d2c:	4413      	add	r3, r2
 8007d2e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007d30:	2208      	movs	r2, #8
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	1a9b      	subs	r3, r3, r2
 8007d36:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	f023 0307 	bic.w	r3, r3, #7
 8007d3e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	4a15      	ldr	r2, [pc, #84]	; (8007d98 <prvHeapInit+0xb4>)
 8007d44:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007d46:	4b14      	ldr	r3, [pc, #80]	; (8007d98 <prvHeapInit+0xb4>)
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007d4e:	4b12      	ldr	r3, [pc, #72]	; (8007d98 <prvHeapInit+0xb4>)
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	2200      	movs	r2, #0
 8007d54:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007d5a:	683b      	ldr	r3, [r7, #0]
 8007d5c:	68fa      	ldr	r2, [r7, #12]
 8007d5e:	1ad2      	subs	r2, r2, r3
 8007d60:	683b      	ldr	r3, [r7, #0]
 8007d62:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007d64:	4b0c      	ldr	r3, [pc, #48]	; (8007d98 <prvHeapInit+0xb4>)
 8007d66:	681a      	ldr	r2, [r3, #0]
 8007d68:	683b      	ldr	r3, [r7, #0]
 8007d6a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	685b      	ldr	r3, [r3, #4]
 8007d70:	4a0a      	ldr	r2, [pc, #40]	; (8007d9c <prvHeapInit+0xb8>)
 8007d72:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	685b      	ldr	r3, [r3, #4]
 8007d78:	4a09      	ldr	r2, [pc, #36]	; (8007da0 <prvHeapInit+0xbc>)
 8007d7a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007d7c:	4b09      	ldr	r3, [pc, #36]	; (8007da4 <prvHeapInit+0xc0>)
 8007d7e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007d82:	601a      	str	r2, [r3, #0]
}
 8007d84:	bf00      	nop
 8007d86:	3714      	adds	r7, #20
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8e:	4770      	bx	lr
 8007d90:	20000fd0 	.word	0x20000fd0
 8007d94:	20004bd0 	.word	0x20004bd0
 8007d98:	20004bd8 	.word	0x20004bd8
 8007d9c:	20004be0 	.word	0x20004be0
 8007da0:	20004bdc 	.word	0x20004bdc
 8007da4:	20004bec 	.word	0x20004bec

08007da8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007da8:	b480      	push	{r7}
 8007daa:	b085      	sub	sp, #20
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007db0:	4b28      	ldr	r3, [pc, #160]	; (8007e54 <prvInsertBlockIntoFreeList+0xac>)
 8007db2:	60fb      	str	r3, [r7, #12]
 8007db4:	e002      	b.n	8007dbc <prvInsertBlockIntoFreeList+0x14>
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	60fb      	str	r3, [r7, #12]
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	687a      	ldr	r2, [r7, #4]
 8007dc2:	429a      	cmp	r2, r3
 8007dc4:	d8f7      	bhi.n	8007db6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	685b      	ldr	r3, [r3, #4]
 8007dce:	68ba      	ldr	r2, [r7, #8]
 8007dd0:	4413      	add	r3, r2
 8007dd2:	687a      	ldr	r2, [r7, #4]
 8007dd4:	429a      	cmp	r2, r3
 8007dd6:	d108      	bne.n	8007dea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	685a      	ldr	r2, [r3, #4]
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	685b      	ldr	r3, [r3, #4]
 8007de0:	441a      	add	r2, r3
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	685b      	ldr	r3, [r3, #4]
 8007df2:	68ba      	ldr	r2, [r7, #8]
 8007df4:	441a      	add	r2, r3
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	429a      	cmp	r2, r3
 8007dfc:	d118      	bne.n	8007e30 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	681a      	ldr	r2, [r3, #0]
 8007e02:	4b15      	ldr	r3, [pc, #84]	; (8007e58 <prvInsertBlockIntoFreeList+0xb0>)
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	429a      	cmp	r2, r3
 8007e08:	d00d      	beq.n	8007e26 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	685a      	ldr	r2, [r3, #4]
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	685b      	ldr	r3, [r3, #4]
 8007e14:	441a      	add	r2, r3
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	681a      	ldr	r2, [r3, #0]
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	601a      	str	r2, [r3, #0]
 8007e24:	e008      	b.n	8007e38 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007e26:	4b0c      	ldr	r3, [pc, #48]	; (8007e58 <prvInsertBlockIntoFreeList+0xb0>)
 8007e28:	681a      	ldr	r2, [r3, #0]
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	601a      	str	r2, [r3, #0]
 8007e2e:	e003      	b.n	8007e38 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	681a      	ldr	r2, [r3, #0]
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007e38:	68fa      	ldr	r2, [r7, #12]
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	429a      	cmp	r2, r3
 8007e3e:	d002      	beq.n	8007e46 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	687a      	ldr	r2, [r7, #4]
 8007e44:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007e46:	bf00      	nop
 8007e48:	3714      	adds	r7, #20
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e50:	4770      	bx	lr
 8007e52:	bf00      	nop
 8007e54:	20004bd0 	.word	0x20004bd0
 8007e58:	20004bd8 	.word	0x20004bd8

08007e5c <atoi>:
 8007e5c:	220a      	movs	r2, #10
 8007e5e:	2100      	movs	r1, #0
 8007e60:	f000 b8da 	b.w	8008018 <strtol>

08007e64 <__errno>:
 8007e64:	4b01      	ldr	r3, [pc, #4]	; (8007e6c <__errno+0x8>)
 8007e66:	6818      	ldr	r0, [r3, #0]
 8007e68:	4770      	bx	lr
 8007e6a:	bf00      	nop
 8007e6c:	200000d4 	.word	0x200000d4

08007e70 <__libc_init_array>:
 8007e70:	b570      	push	{r4, r5, r6, lr}
 8007e72:	4d0d      	ldr	r5, [pc, #52]	; (8007ea8 <__libc_init_array+0x38>)
 8007e74:	4c0d      	ldr	r4, [pc, #52]	; (8007eac <__libc_init_array+0x3c>)
 8007e76:	1b64      	subs	r4, r4, r5
 8007e78:	10a4      	asrs	r4, r4, #2
 8007e7a:	2600      	movs	r6, #0
 8007e7c:	42a6      	cmp	r6, r4
 8007e7e:	d109      	bne.n	8007e94 <__libc_init_array+0x24>
 8007e80:	4d0b      	ldr	r5, [pc, #44]	; (8007eb0 <__libc_init_array+0x40>)
 8007e82:	4c0c      	ldr	r4, [pc, #48]	; (8007eb4 <__libc_init_array+0x44>)
 8007e84:	f001 f848 	bl	8008f18 <_init>
 8007e88:	1b64      	subs	r4, r4, r5
 8007e8a:	10a4      	asrs	r4, r4, #2
 8007e8c:	2600      	movs	r6, #0
 8007e8e:	42a6      	cmp	r6, r4
 8007e90:	d105      	bne.n	8007e9e <__libc_init_array+0x2e>
 8007e92:	bd70      	pop	{r4, r5, r6, pc}
 8007e94:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e98:	4798      	blx	r3
 8007e9a:	3601      	adds	r6, #1
 8007e9c:	e7ee      	b.n	8007e7c <__libc_init_array+0xc>
 8007e9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ea2:	4798      	blx	r3
 8007ea4:	3601      	adds	r6, #1
 8007ea6:	e7f2      	b.n	8007e8e <__libc_init_array+0x1e>
 8007ea8:	080091b4 	.word	0x080091b4
 8007eac:	080091b4 	.word	0x080091b4
 8007eb0:	080091b4 	.word	0x080091b4
 8007eb4:	080091b8 	.word	0x080091b8

08007eb8 <memcpy>:
 8007eb8:	440a      	add	r2, r1
 8007eba:	4291      	cmp	r1, r2
 8007ebc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007ec0:	d100      	bne.n	8007ec4 <memcpy+0xc>
 8007ec2:	4770      	bx	lr
 8007ec4:	b510      	push	{r4, lr}
 8007ec6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007eca:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007ece:	4291      	cmp	r1, r2
 8007ed0:	d1f9      	bne.n	8007ec6 <memcpy+0xe>
 8007ed2:	bd10      	pop	{r4, pc}

08007ed4 <memset>:
 8007ed4:	4402      	add	r2, r0
 8007ed6:	4603      	mov	r3, r0
 8007ed8:	4293      	cmp	r3, r2
 8007eda:	d100      	bne.n	8007ede <memset+0xa>
 8007edc:	4770      	bx	lr
 8007ede:	f803 1b01 	strb.w	r1, [r3], #1
 8007ee2:	e7f9      	b.n	8007ed8 <memset+0x4>

08007ee4 <iprintf>:
 8007ee4:	b40f      	push	{r0, r1, r2, r3}
 8007ee6:	4b0a      	ldr	r3, [pc, #40]	; (8007f10 <iprintf+0x2c>)
 8007ee8:	b513      	push	{r0, r1, r4, lr}
 8007eea:	681c      	ldr	r4, [r3, #0]
 8007eec:	b124      	cbz	r4, 8007ef8 <iprintf+0x14>
 8007eee:	69a3      	ldr	r3, [r4, #24]
 8007ef0:	b913      	cbnz	r3, 8007ef8 <iprintf+0x14>
 8007ef2:	4620      	mov	r0, r4
 8007ef4:	f000 f8f2 	bl	80080dc <__sinit>
 8007ef8:	ab05      	add	r3, sp, #20
 8007efa:	9a04      	ldr	r2, [sp, #16]
 8007efc:	68a1      	ldr	r1, [r4, #8]
 8007efe:	9301      	str	r3, [sp, #4]
 8007f00:	4620      	mov	r0, r4
 8007f02:	f000 fa49 	bl	8008398 <_vfiprintf_r>
 8007f06:	b002      	add	sp, #8
 8007f08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f0c:	b004      	add	sp, #16
 8007f0e:	4770      	bx	lr
 8007f10:	200000d4 	.word	0x200000d4

08007f14 <_strtol_l.constprop.0>:
 8007f14:	2b01      	cmp	r3, #1
 8007f16:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f1a:	d001      	beq.n	8007f20 <_strtol_l.constprop.0+0xc>
 8007f1c:	2b24      	cmp	r3, #36	; 0x24
 8007f1e:	d906      	bls.n	8007f2e <_strtol_l.constprop.0+0x1a>
 8007f20:	f7ff ffa0 	bl	8007e64 <__errno>
 8007f24:	2316      	movs	r3, #22
 8007f26:	6003      	str	r3, [r0, #0]
 8007f28:	2000      	movs	r0, #0
 8007f2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f2e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8008014 <_strtol_l.constprop.0+0x100>
 8007f32:	460d      	mov	r5, r1
 8007f34:	462e      	mov	r6, r5
 8007f36:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007f3a:	f814 700c 	ldrb.w	r7, [r4, ip]
 8007f3e:	f017 0708 	ands.w	r7, r7, #8
 8007f42:	d1f7      	bne.n	8007f34 <_strtol_l.constprop.0+0x20>
 8007f44:	2c2d      	cmp	r4, #45	; 0x2d
 8007f46:	d132      	bne.n	8007fae <_strtol_l.constprop.0+0x9a>
 8007f48:	782c      	ldrb	r4, [r5, #0]
 8007f4a:	2701      	movs	r7, #1
 8007f4c:	1cb5      	adds	r5, r6, #2
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d05b      	beq.n	800800a <_strtol_l.constprop.0+0xf6>
 8007f52:	2b10      	cmp	r3, #16
 8007f54:	d109      	bne.n	8007f6a <_strtol_l.constprop.0+0x56>
 8007f56:	2c30      	cmp	r4, #48	; 0x30
 8007f58:	d107      	bne.n	8007f6a <_strtol_l.constprop.0+0x56>
 8007f5a:	782c      	ldrb	r4, [r5, #0]
 8007f5c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007f60:	2c58      	cmp	r4, #88	; 0x58
 8007f62:	d14d      	bne.n	8008000 <_strtol_l.constprop.0+0xec>
 8007f64:	786c      	ldrb	r4, [r5, #1]
 8007f66:	2310      	movs	r3, #16
 8007f68:	3502      	adds	r5, #2
 8007f6a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8007f6e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8007f72:	f04f 0c00 	mov.w	ip, #0
 8007f76:	fbb8 f9f3 	udiv	r9, r8, r3
 8007f7a:	4666      	mov	r6, ip
 8007f7c:	fb03 8a19 	mls	sl, r3, r9, r8
 8007f80:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8007f84:	f1be 0f09 	cmp.w	lr, #9
 8007f88:	d816      	bhi.n	8007fb8 <_strtol_l.constprop.0+0xa4>
 8007f8a:	4674      	mov	r4, lr
 8007f8c:	42a3      	cmp	r3, r4
 8007f8e:	dd24      	ble.n	8007fda <_strtol_l.constprop.0+0xc6>
 8007f90:	f1bc 0f00 	cmp.w	ip, #0
 8007f94:	db1e      	blt.n	8007fd4 <_strtol_l.constprop.0+0xc0>
 8007f96:	45b1      	cmp	r9, r6
 8007f98:	d31c      	bcc.n	8007fd4 <_strtol_l.constprop.0+0xc0>
 8007f9a:	d101      	bne.n	8007fa0 <_strtol_l.constprop.0+0x8c>
 8007f9c:	45a2      	cmp	sl, r4
 8007f9e:	db19      	blt.n	8007fd4 <_strtol_l.constprop.0+0xc0>
 8007fa0:	fb06 4603 	mla	r6, r6, r3, r4
 8007fa4:	f04f 0c01 	mov.w	ip, #1
 8007fa8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007fac:	e7e8      	b.n	8007f80 <_strtol_l.constprop.0+0x6c>
 8007fae:	2c2b      	cmp	r4, #43	; 0x2b
 8007fb0:	bf04      	itt	eq
 8007fb2:	782c      	ldrbeq	r4, [r5, #0]
 8007fb4:	1cb5      	addeq	r5, r6, #2
 8007fb6:	e7ca      	b.n	8007f4e <_strtol_l.constprop.0+0x3a>
 8007fb8:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8007fbc:	f1be 0f19 	cmp.w	lr, #25
 8007fc0:	d801      	bhi.n	8007fc6 <_strtol_l.constprop.0+0xb2>
 8007fc2:	3c37      	subs	r4, #55	; 0x37
 8007fc4:	e7e2      	b.n	8007f8c <_strtol_l.constprop.0+0x78>
 8007fc6:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8007fca:	f1be 0f19 	cmp.w	lr, #25
 8007fce:	d804      	bhi.n	8007fda <_strtol_l.constprop.0+0xc6>
 8007fd0:	3c57      	subs	r4, #87	; 0x57
 8007fd2:	e7db      	b.n	8007f8c <_strtol_l.constprop.0+0x78>
 8007fd4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8007fd8:	e7e6      	b.n	8007fa8 <_strtol_l.constprop.0+0x94>
 8007fda:	f1bc 0f00 	cmp.w	ip, #0
 8007fde:	da05      	bge.n	8007fec <_strtol_l.constprop.0+0xd8>
 8007fe0:	2322      	movs	r3, #34	; 0x22
 8007fe2:	6003      	str	r3, [r0, #0]
 8007fe4:	4646      	mov	r6, r8
 8007fe6:	b942      	cbnz	r2, 8007ffa <_strtol_l.constprop.0+0xe6>
 8007fe8:	4630      	mov	r0, r6
 8007fea:	e79e      	b.n	8007f2a <_strtol_l.constprop.0+0x16>
 8007fec:	b107      	cbz	r7, 8007ff0 <_strtol_l.constprop.0+0xdc>
 8007fee:	4276      	negs	r6, r6
 8007ff0:	2a00      	cmp	r2, #0
 8007ff2:	d0f9      	beq.n	8007fe8 <_strtol_l.constprop.0+0xd4>
 8007ff4:	f1bc 0f00 	cmp.w	ip, #0
 8007ff8:	d000      	beq.n	8007ffc <_strtol_l.constprop.0+0xe8>
 8007ffa:	1e69      	subs	r1, r5, #1
 8007ffc:	6011      	str	r1, [r2, #0]
 8007ffe:	e7f3      	b.n	8007fe8 <_strtol_l.constprop.0+0xd4>
 8008000:	2430      	movs	r4, #48	; 0x30
 8008002:	2b00      	cmp	r3, #0
 8008004:	d1b1      	bne.n	8007f6a <_strtol_l.constprop.0+0x56>
 8008006:	2308      	movs	r3, #8
 8008008:	e7af      	b.n	8007f6a <_strtol_l.constprop.0+0x56>
 800800a:	2c30      	cmp	r4, #48	; 0x30
 800800c:	d0a5      	beq.n	8007f5a <_strtol_l.constprop.0+0x46>
 800800e:	230a      	movs	r3, #10
 8008010:	e7ab      	b.n	8007f6a <_strtol_l.constprop.0+0x56>
 8008012:	bf00      	nop
 8008014:	08009015 	.word	0x08009015

08008018 <strtol>:
 8008018:	4613      	mov	r3, r2
 800801a:	460a      	mov	r2, r1
 800801c:	4601      	mov	r1, r0
 800801e:	4802      	ldr	r0, [pc, #8]	; (8008028 <strtol+0x10>)
 8008020:	6800      	ldr	r0, [r0, #0]
 8008022:	f7ff bf77 	b.w	8007f14 <_strtol_l.constprop.0>
 8008026:	bf00      	nop
 8008028:	200000d4 	.word	0x200000d4

0800802c <std>:
 800802c:	2300      	movs	r3, #0
 800802e:	b510      	push	{r4, lr}
 8008030:	4604      	mov	r4, r0
 8008032:	e9c0 3300 	strd	r3, r3, [r0]
 8008036:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800803a:	6083      	str	r3, [r0, #8]
 800803c:	8181      	strh	r1, [r0, #12]
 800803e:	6643      	str	r3, [r0, #100]	; 0x64
 8008040:	81c2      	strh	r2, [r0, #14]
 8008042:	6183      	str	r3, [r0, #24]
 8008044:	4619      	mov	r1, r3
 8008046:	2208      	movs	r2, #8
 8008048:	305c      	adds	r0, #92	; 0x5c
 800804a:	f7ff ff43 	bl	8007ed4 <memset>
 800804e:	4b05      	ldr	r3, [pc, #20]	; (8008064 <std+0x38>)
 8008050:	6263      	str	r3, [r4, #36]	; 0x24
 8008052:	4b05      	ldr	r3, [pc, #20]	; (8008068 <std+0x3c>)
 8008054:	62a3      	str	r3, [r4, #40]	; 0x28
 8008056:	4b05      	ldr	r3, [pc, #20]	; (800806c <std+0x40>)
 8008058:	62e3      	str	r3, [r4, #44]	; 0x2c
 800805a:	4b05      	ldr	r3, [pc, #20]	; (8008070 <std+0x44>)
 800805c:	6224      	str	r4, [r4, #32]
 800805e:	6323      	str	r3, [r4, #48]	; 0x30
 8008060:	bd10      	pop	{r4, pc}
 8008062:	bf00      	nop
 8008064:	08008941 	.word	0x08008941
 8008068:	08008963 	.word	0x08008963
 800806c:	0800899b 	.word	0x0800899b
 8008070:	080089bf 	.word	0x080089bf

08008074 <_cleanup_r>:
 8008074:	4901      	ldr	r1, [pc, #4]	; (800807c <_cleanup_r+0x8>)
 8008076:	f000 b8af 	b.w	80081d8 <_fwalk_reent>
 800807a:	bf00      	nop
 800807c:	08008c99 	.word	0x08008c99

08008080 <__sfmoreglue>:
 8008080:	b570      	push	{r4, r5, r6, lr}
 8008082:	2268      	movs	r2, #104	; 0x68
 8008084:	1e4d      	subs	r5, r1, #1
 8008086:	4355      	muls	r5, r2
 8008088:	460e      	mov	r6, r1
 800808a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800808e:	f000 f8e5 	bl	800825c <_malloc_r>
 8008092:	4604      	mov	r4, r0
 8008094:	b140      	cbz	r0, 80080a8 <__sfmoreglue+0x28>
 8008096:	2100      	movs	r1, #0
 8008098:	e9c0 1600 	strd	r1, r6, [r0]
 800809c:	300c      	adds	r0, #12
 800809e:	60a0      	str	r0, [r4, #8]
 80080a0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80080a4:	f7ff ff16 	bl	8007ed4 <memset>
 80080a8:	4620      	mov	r0, r4
 80080aa:	bd70      	pop	{r4, r5, r6, pc}

080080ac <__sfp_lock_acquire>:
 80080ac:	4801      	ldr	r0, [pc, #4]	; (80080b4 <__sfp_lock_acquire+0x8>)
 80080ae:	f000 b8b3 	b.w	8008218 <__retarget_lock_acquire_recursive>
 80080b2:	bf00      	nop
 80080b4:	20004bf1 	.word	0x20004bf1

080080b8 <__sfp_lock_release>:
 80080b8:	4801      	ldr	r0, [pc, #4]	; (80080c0 <__sfp_lock_release+0x8>)
 80080ba:	f000 b8ae 	b.w	800821a <__retarget_lock_release_recursive>
 80080be:	bf00      	nop
 80080c0:	20004bf1 	.word	0x20004bf1

080080c4 <__sinit_lock_acquire>:
 80080c4:	4801      	ldr	r0, [pc, #4]	; (80080cc <__sinit_lock_acquire+0x8>)
 80080c6:	f000 b8a7 	b.w	8008218 <__retarget_lock_acquire_recursive>
 80080ca:	bf00      	nop
 80080cc:	20004bf2 	.word	0x20004bf2

080080d0 <__sinit_lock_release>:
 80080d0:	4801      	ldr	r0, [pc, #4]	; (80080d8 <__sinit_lock_release+0x8>)
 80080d2:	f000 b8a2 	b.w	800821a <__retarget_lock_release_recursive>
 80080d6:	bf00      	nop
 80080d8:	20004bf2 	.word	0x20004bf2

080080dc <__sinit>:
 80080dc:	b510      	push	{r4, lr}
 80080de:	4604      	mov	r4, r0
 80080e0:	f7ff fff0 	bl	80080c4 <__sinit_lock_acquire>
 80080e4:	69a3      	ldr	r3, [r4, #24]
 80080e6:	b11b      	cbz	r3, 80080f0 <__sinit+0x14>
 80080e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80080ec:	f7ff bff0 	b.w	80080d0 <__sinit_lock_release>
 80080f0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80080f4:	6523      	str	r3, [r4, #80]	; 0x50
 80080f6:	4b13      	ldr	r3, [pc, #76]	; (8008144 <__sinit+0x68>)
 80080f8:	4a13      	ldr	r2, [pc, #76]	; (8008148 <__sinit+0x6c>)
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	62a2      	str	r2, [r4, #40]	; 0x28
 80080fe:	42a3      	cmp	r3, r4
 8008100:	bf04      	itt	eq
 8008102:	2301      	moveq	r3, #1
 8008104:	61a3      	streq	r3, [r4, #24]
 8008106:	4620      	mov	r0, r4
 8008108:	f000 f820 	bl	800814c <__sfp>
 800810c:	6060      	str	r0, [r4, #4]
 800810e:	4620      	mov	r0, r4
 8008110:	f000 f81c 	bl	800814c <__sfp>
 8008114:	60a0      	str	r0, [r4, #8]
 8008116:	4620      	mov	r0, r4
 8008118:	f000 f818 	bl	800814c <__sfp>
 800811c:	2200      	movs	r2, #0
 800811e:	60e0      	str	r0, [r4, #12]
 8008120:	2104      	movs	r1, #4
 8008122:	6860      	ldr	r0, [r4, #4]
 8008124:	f7ff ff82 	bl	800802c <std>
 8008128:	68a0      	ldr	r0, [r4, #8]
 800812a:	2201      	movs	r2, #1
 800812c:	2109      	movs	r1, #9
 800812e:	f7ff ff7d 	bl	800802c <std>
 8008132:	68e0      	ldr	r0, [r4, #12]
 8008134:	2202      	movs	r2, #2
 8008136:	2112      	movs	r1, #18
 8008138:	f7ff ff78 	bl	800802c <std>
 800813c:	2301      	movs	r3, #1
 800813e:	61a3      	str	r3, [r4, #24]
 8008140:	e7d2      	b.n	80080e8 <__sinit+0xc>
 8008142:	bf00      	nop
 8008144:	08009010 	.word	0x08009010
 8008148:	08008075 	.word	0x08008075

0800814c <__sfp>:
 800814c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800814e:	4607      	mov	r7, r0
 8008150:	f7ff ffac 	bl	80080ac <__sfp_lock_acquire>
 8008154:	4b1e      	ldr	r3, [pc, #120]	; (80081d0 <__sfp+0x84>)
 8008156:	681e      	ldr	r6, [r3, #0]
 8008158:	69b3      	ldr	r3, [r6, #24]
 800815a:	b913      	cbnz	r3, 8008162 <__sfp+0x16>
 800815c:	4630      	mov	r0, r6
 800815e:	f7ff ffbd 	bl	80080dc <__sinit>
 8008162:	3648      	adds	r6, #72	; 0x48
 8008164:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008168:	3b01      	subs	r3, #1
 800816a:	d503      	bpl.n	8008174 <__sfp+0x28>
 800816c:	6833      	ldr	r3, [r6, #0]
 800816e:	b30b      	cbz	r3, 80081b4 <__sfp+0x68>
 8008170:	6836      	ldr	r6, [r6, #0]
 8008172:	e7f7      	b.n	8008164 <__sfp+0x18>
 8008174:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008178:	b9d5      	cbnz	r5, 80081b0 <__sfp+0x64>
 800817a:	4b16      	ldr	r3, [pc, #88]	; (80081d4 <__sfp+0x88>)
 800817c:	60e3      	str	r3, [r4, #12]
 800817e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008182:	6665      	str	r5, [r4, #100]	; 0x64
 8008184:	f000 f847 	bl	8008216 <__retarget_lock_init_recursive>
 8008188:	f7ff ff96 	bl	80080b8 <__sfp_lock_release>
 800818c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008190:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008194:	6025      	str	r5, [r4, #0]
 8008196:	61a5      	str	r5, [r4, #24]
 8008198:	2208      	movs	r2, #8
 800819a:	4629      	mov	r1, r5
 800819c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80081a0:	f7ff fe98 	bl	8007ed4 <memset>
 80081a4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80081a8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80081ac:	4620      	mov	r0, r4
 80081ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80081b0:	3468      	adds	r4, #104	; 0x68
 80081b2:	e7d9      	b.n	8008168 <__sfp+0x1c>
 80081b4:	2104      	movs	r1, #4
 80081b6:	4638      	mov	r0, r7
 80081b8:	f7ff ff62 	bl	8008080 <__sfmoreglue>
 80081bc:	4604      	mov	r4, r0
 80081be:	6030      	str	r0, [r6, #0]
 80081c0:	2800      	cmp	r0, #0
 80081c2:	d1d5      	bne.n	8008170 <__sfp+0x24>
 80081c4:	f7ff ff78 	bl	80080b8 <__sfp_lock_release>
 80081c8:	230c      	movs	r3, #12
 80081ca:	603b      	str	r3, [r7, #0]
 80081cc:	e7ee      	b.n	80081ac <__sfp+0x60>
 80081ce:	bf00      	nop
 80081d0:	08009010 	.word	0x08009010
 80081d4:	ffff0001 	.word	0xffff0001

080081d8 <_fwalk_reent>:
 80081d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80081dc:	4606      	mov	r6, r0
 80081de:	4688      	mov	r8, r1
 80081e0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80081e4:	2700      	movs	r7, #0
 80081e6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80081ea:	f1b9 0901 	subs.w	r9, r9, #1
 80081ee:	d505      	bpl.n	80081fc <_fwalk_reent+0x24>
 80081f0:	6824      	ldr	r4, [r4, #0]
 80081f2:	2c00      	cmp	r4, #0
 80081f4:	d1f7      	bne.n	80081e6 <_fwalk_reent+0xe>
 80081f6:	4638      	mov	r0, r7
 80081f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80081fc:	89ab      	ldrh	r3, [r5, #12]
 80081fe:	2b01      	cmp	r3, #1
 8008200:	d907      	bls.n	8008212 <_fwalk_reent+0x3a>
 8008202:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008206:	3301      	adds	r3, #1
 8008208:	d003      	beq.n	8008212 <_fwalk_reent+0x3a>
 800820a:	4629      	mov	r1, r5
 800820c:	4630      	mov	r0, r6
 800820e:	47c0      	blx	r8
 8008210:	4307      	orrs	r7, r0
 8008212:	3568      	adds	r5, #104	; 0x68
 8008214:	e7e9      	b.n	80081ea <_fwalk_reent+0x12>

08008216 <__retarget_lock_init_recursive>:
 8008216:	4770      	bx	lr

08008218 <__retarget_lock_acquire_recursive>:
 8008218:	4770      	bx	lr

0800821a <__retarget_lock_release_recursive>:
 800821a:	4770      	bx	lr

0800821c <sbrk_aligned>:
 800821c:	b570      	push	{r4, r5, r6, lr}
 800821e:	4e0e      	ldr	r6, [pc, #56]	; (8008258 <sbrk_aligned+0x3c>)
 8008220:	460c      	mov	r4, r1
 8008222:	6831      	ldr	r1, [r6, #0]
 8008224:	4605      	mov	r5, r0
 8008226:	b911      	cbnz	r1, 800822e <sbrk_aligned+0x12>
 8008228:	f000 fb7a 	bl	8008920 <_sbrk_r>
 800822c:	6030      	str	r0, [r6, #0]
 800822e:	4621      	mov	r1, r4
 8008230:	4628      	mov	r0, r5
 8008232:	f000 fb75 	bl	8008920 <_sbrk_r>
 8008236:	1c43      	adds	r3, r0, #1
 8008238:	d00a      	beq.n	8008250 <sbrk_aligned+0x34>
 800823a:	1cc4      	adds	r4, r0, #3
 800823c:	f024 0403 	bic.w	r4, r4, #3
 8008240:	42a0      	cmp	r0, r4
 8008242:	d007      	beq.n	8008254 <sbrk_aligned+0x38>
 8008244:	1a21      	subs	r1, r4, r0
 8008246:	4628      	mov	r0, r5
 8008248:	f000 fb6a 	bl	8008920 <_sbrk_r>
 800824c:	3001      	adds	r0, #1
 800824e:	d101      	bne.n	8008254 <sbrk_aligned+0x38>
 8008250:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008254:	4620      	mov	r0, r4
 8008256:	bd70      	pop	{r4, r5, r6, pc}
 8008258:	20004bf8 	.word	0x20004bf8

0800825c <_malloc_r>:
 800825c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008260:	1ccd      	adds	r5, r1, #3
 8008262:	f025 0503 	bic.w	r5, r5, #3
 8008266:	3508      	adds	r5, #8
 8008268:	2d0c      	cmp	r5, #12
 800826a:	bf38      	it	cc
 800826c:	250c      	movcc	r5, #12
 800826e:	2d00      	cmp	r5, #0
 8008270:	4607      	mov	r7, r0
 8008272:	db01      	blt.n	8008278 <_malloc_r+0x1c>
 8008274:	42a9      	cmp	r1, r5
 8008276:	d905      	bls.n	8008284 <_malloc_r+0x28>
 8008278:	230c      	movs	r3, #12
 800827a:	603b      	str	r3, [r7, #0]
 800827c:	2600      	movs	r6, #0
 800827e:	4630      	mov	r0, r6
 8008280:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008284:	4e2e      	ldr	r6, [pc, #184]	; (8008340 <_malloc_r+0xe4>)
 8008286:	f000 fdbb 	bl	8008e00 <__malloc_lock>
 800828a:	6833      	ldr	r3, [r6, #0]
 800828c:	461c      	mov	r4, r3
 800828e:	bb34      	cbnz	r4, 80082de <_malloc_r+0x82>
 8008290:	4629      	mov	r1, r5
 8008292:	4638      	mov	r0, r7
 8008294:	f7ff ffc2 	bl	800821c <sbrk_aligned>
 8008298:	1c43      	adds	r3, r0, #1
 800829a:	4604      	mov	r4, r0
 800829c:	d14d      	bne.n	800833a <_malloc_r+0xde>
 800829e:	6834      	ldr	r4, [r6, #0]
 80082a0:	4626      	mov	r6, r4
 80082a2:	2e00      	cmp	r6, #0
 80082a4:	d140      	bne.n	8008328 <_malloc_r+0xcc>
 80082a6:	6823      	ldr	r3, [r4, #0]
 80082a8:	4631      	mov	r1, r6
 80082aa:	4638      	mov	r0, r7
 80082ac:	eb04 0803 	add.w	r8, r4, r3
 80082b0:	f000 fb36 	bl	8008920 <_sbrk_r>
 80082b4:	4580      	cmp	r8, r0
 80082b6:	d13a      	bne.n	800832e <_malloc_r+0xd2>
 80082b8:	6821      	ldr	r1, [r4, #0]
 80082ba:	3503      	adds	r5, #3
 80082bc:	1a6d      	subs	r5, r5, r1
 80082be:	f025 0503 	bic.w	r5, r5, #3
 80082c2:	3508      	adds	r5, #8
 80082c4:	2d0c      	cmp	r5, #12
 80082c6:	bf38      	it	cc
 80082c8:	250c      	movcc	r5, #12
 80082ca:	4629      	mov	r1, r5
 80082cc:	4638      	mov	r0, r7
 80082ce:	f7ff ffa5 	bl	800821c <sbrk_aligned>
 80082d2:	3001      	adds	r0, #1
 80082d4:	d02b      	beq.n	800832e <_malloc_r+0xd2>
 80082d6:	6823      	ldr	r3, [r4, #0]
 80082d8:	442b      	add	r3, r5
 80082da:	6023      	str	r3, [r4, #0]
 80082dc:	e00e      	b.n	80082fc <_malloc_r+0xa0>
 80082de:	6822      	ldr	r2, [r4, #0]
 80082e0:	1b52      	subs	r2, r2, r5
 80082e2:	d41e      	bmi.n	8008322 <_malloc_r+0xc6>
 80082e4:	2a0b      	cmp	r2, #11
 80082e6:	d916      	bls.n	8008316 <_malloc_r+0xba>
 80082e8:	1961      	adds	r1, r4, r5
 80082ea:	42a3      	cmp	r3, r4
 80082ec:	6025      	str	r5, [r4, #0]
 80082ee:	bf18      	it	ne
 80082f0:	6059      	strne	r1, [r3, #4]
 80082f2:	6863      	ldr	r3, [r4, #4]
 80082f4:	bf08      	it	eq
 80082f6:	6031      	streq	r1, [r6, #0]
 80082f8:	5162      	str	r2, [r4, r5]
 80082fa:	604b      	str	r3, [r1, #4]
 80082fc:	4638      	mov	r0, r7
 80082fe:	f104 060b 	add.w	r6, r4, #11
 8008302:	f000 fd83 	bl	8008e0c <__malloc_unlock>
 8008306:	f026 0607 	bic.w	r6, r6, #7
 800830a:	1d23      	adds	r3, r4, #4
 800830c:	1af2      	subs	r2, r6, r3
 800830e:	d0b6      	beq.n	800827e <_malloc_r+0x22>
 8008310:	1b9b      	subs	r3, r3, r6
 8008312:	50a3      	str	r3, [r4, r2]
 8008314:	e7b3      	b.n	800827e <_malloc_r+0x22>
 8008316:	6862      	ldr	r2, [r4, #4]
 8008318:	42a3      	cmp	r3, r4
 800831a:	bf0c      	ite	eq
 800831c:	6032      	streq	r2, [r6, #0]
 800831e:	605a      	strne	r2, [r3, #4]
 8008320:	e7ec      	b.n	80082fc <_malloc_r+0xa0>
 8008322:	4623      	mov	r3, r4
 8008324:	6864      	ldr	r4, [r4, #4]
 8008326:	e7b2      	b.n	800828e <_malloc_r+0x32>
 8008328:	4634      	mov	r4, r6
 800832a:	6876      	ldr	r6, [r6, #4]
 800832c:	e7b9      	b.n	80082a2 <_malloc_r+0x46>
 800832e:	230c      	movs	r3, #12
 8008330:	603b      	str	r3, [r7, #0]
 8008332:	4638      	mov	r0, r7
 8008334:	f000 fd6a 	bl	8008e0c <__malloc_unlock>
 8008338:	e7a1      	b.n	800827e <_malloc_r+0x22>
 800833a:	6025      	str	r5, [r4, #0]
 800833c:	e7de      	b.n	80082fc <_malloc_r+0xa0>
 800833e:	bf00      	nop
 8008340:	20004bf4 	.word	0x20004bf4

08008344 <__sfputc_r>:
 8008344:	6893      	ldr	r3, [r2, #8]
 8008346:	3b01      	subs	r3, #1
 8008348:	2b00      	cmp	r3, #0
 800834a:	b410      	push	{r4}
 800834c:	6093      	str	r3, [r2, #8]
 800834e:	da08      	bge.n	8008362 <__sfputc_r+0x1e>
 8008350:	6994      	ldr	r4, [r2, #24]
 8008352:	42a3      	cmp	r3, r4
 8008354:	db01      	blt.n	800835a <__sfputc_r+0x16>
 8008356:	290a      	cmp	r1, #10
 8008358:	d103      	bne.n	8008362 <__sfputc_r+0x1e>
 800835a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800835e:	f000 bb33 	b.w	80089c8 <__swbuf_r>
 8008362:	6813      	ldr	r3, [r2, #0]
 8008364:	1c58      	adds	r0, r3, #1
 8008366:	6010      	str	r0, [r2, #0]
 8008368:	7019      	strb	r1, [r3, #0]
 800836a:	4608      	mov	r0, r1
 800836c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008370:	4770      	bx	lr

08008372 <__sfputs_r>:
 8008372:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008374:	4606      	mov	r6, r0
 8008376:	460f      	mov	r7, r1
 8008378:	4614      	mov	r4, r2
 800837a:	18d5      	adds	r5, r2, r3
 800837c:	42ac      	cmp	r4, r5
 800837e:	d101      	bne.n	8008384 <__sfputs_r+0x12>
 8008380:	2000      	movs	r0, #0
 8008382:	e007      	b.n	8008394 <__sfputs_r+0x22>
 8008384:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008388:	463a      	mov	r2, r7
 800838a:	4630      	mov	r0, r6
 800838c:	f7ff ffda 	bl	8008344 <__sfputc_r>
 8008390:	1c43      	adds	r3, r0, #1
 8008392:	d1f3      	bne.n	800837c <__sfputs_r+0xa>
 8008394:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008398 <_vfiprintf_r>:
 8008398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800839c:	460d      	mov	r5, r1
 800839e:	b09d      	sub	sp, #116	; 0x74
 80083a0:	4614      	mov	r4, r2
 80083a2:	4698      	mov	r8, r3
 80083a4:	4606      	mov	r6, r0
 80083a6:	b118      	cbz	r0, 80083b0 <_vfiprintf_r+0x18>
 80083a8:	6983      	ldr	r3, [r0, #24]
 80083aa:	b90b      	cbnz	r3, 80083b0 <_vfiprintf_r+0x18>
 80083ac:	f7ff fe96 	bl	80080dc <__sinit>
 80083b0:	4b89      	ldr	r3, [pc, #548]	; (80085d8 <_vfiprintf_r+0x240>)
 80083b2:	429d      	cmp	r5, r3
 80083b4:	d11b      	bne.n	80083ee <_vfiprintf_r+0x56>
 80083b6:	6875      	ldr	r5, [r6, #4]
 80083b8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80083ba:	07d9      	lsls	r1, r3, #31
 80083bc:	d405      	bmi.n	80083ca <_vfiprintf_r+0x32>
 80083be:	89ab      	ldrh	r3, [r5, #12]
 80083c0:	059a      	lsls	r2, r3, #22
 80083c2:	d402      	bmi.n	80083ca <_vfiprintf_r+0x32>
 80083c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80083c6:	f7ff ff27 	bl	8008218 <__retarget_lock_acquire_recursive>
 80083ca:	89ab      	ldrh	r3, [r5, #12]
 80083cc:	071b      	lsls	r3, r3, #28
 80083ce:	d501      	bpl.n	80083d4 <_vfiprintf_r+0x3c>
 80083d0:	692b      	ldr	r3, [r5, #16]
 80083d2:	b9eb      	cbnz	r3, 8008410 <_vfiprintf_r+0x78>
 80083d4:	4629      	mov	r1, r5
 80083d6:	4630      	mov	r0, r6
 80083d8:	f000 fb5a 	bl	8008a90 <__swsetup_r>
 80083dc:	b1c0      	cbz	r0, 8008410 <_vfiprintf_r+0x78>
 80083de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80083e0:	07dc      	lsls	r4, r3, #31
 80083e2:	d50e      	bpl.n	8008402 <_vfiprintf_r+0x6a>
 80083e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80083e8:	b01d      	add	sp, #116	; 0x74
 80083ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083ee:	4b7b      	ldr	r3, [pc, #492]	; (80085dc <_vfiprintf_r+0x244>)
 80083f0:	429d      	cmp	r5, r3
 80083f2:	d101      	bne.n	80083f8 <_vfiprintf_r+0x60>
 80083f4:	68b5      	ldr	r5, [r6, #8]
 80083f6:	e7df      	b.n	80083b8 <_vfiprintf_r+0x20>
 80083f8:	4b79      	ldr	r3, [pc, #484]	; (80085e0 <_vfiprintf_r+0x248>)
 80083fa:	429d      	cmp	r5, r3
 80083fc:	bf08      	it	eq
 80083fe:	68f5      	ldreq	r5, [r6, #12]
 8008400:	e7da      	b.n	80083b8 <_vfiprintf_r+0x20>
 8008402:	89ab      	ldrh	r3, [r5, #12]
 8008404:	0598      	lsls	r0, r3, #22
 8008406:	d4ed      	bmi.n	80083e4 <_vfiprintf_r+0x4c>
 8008408:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800840a:	f7ff ff06 	bl	800821a <__retarget_lock_release_recursive>
 800840e:	e7e9      	b.n	80083e4 <_vfiprintf_r+0x4c>
 8008410:	2300      	movs	r3, #0
 8008412:	9309      	str	r3, [sp, #36]	; 0x24
 8008414:	2320      	movs	r3, #32
 8008416:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800841a:	f8cd 800c 	str.w	r8, [sp, #12]
 800841e:	2330      	movs	r3, #48	; 0x30
 8008420:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80085e4 <_vfiprintf_r+0x24c>
 8008424:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008428:	f04f 0901 	mov.w	r9, #1
 800842c:	4623      	mov	r3, r4
 800842e:	469a      	mov	sl, r3
 8008430:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008434:	b10a      	cbz	r2, 800843a <_vfiprintf_r+0xa2>
 8008436:	2a25      	cmp	r2, #37	; 0x25
 8008438:	d1f9      	bne.n	800842e <_vfiprintf_r+0x96>
 800843a:	ebba 0b04 	subs.w	fp, sl, r4
 800843e:	d00b      	beq.n	8008458 <_vfiprintf_r+0xc0>
 8008440:	465b      	mov	r3, fp
 8008442:	4622      	mov	r2, r4
 8008444:	4629      	mov	r1, r5
 8008446:	4630      	mov	r0, r6
 8008448:	f7ff ff93 	bl	8008372 <__sfputs_r>
 800844c:	3001      	adds	r0, #1
 800844e:	f000 80aa 	beq.w	80085a6 <_vfiprintf_r+0x20e>
 8008452:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008454:	445a      	add	r2, fp
 8008456:	9209      	str	r2, [sp, #36]	; 0x24
 8008458:	f89a 3000 	ldrb.w	r3, [sl]
 800845c:	2b00      	cmp	r3, #0
 800845e:	f000 80a2 	beq.w	80085a6 <_vfiprintf_r+0x20e>
 8008462:	2300      	movs	r3, #0
 8008464:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008468:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800846c:	f10a 0a01 	add.w	sl, sl, #1
 8008470:	9304      	str	r3, [sp, #16]
 8008472:	9307      	str	r3, [sp, #28]
 8008474:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008478:	931a      	str	r3, [sp, #104]	; 0x68
 800847a:	4654      	mov	r4, sl
 800847c:	2205      	movs	r2, #5
 800847e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008482:	4858      	ldr	r0, [pc, #352]	; (80085e4 <_vfiprintf_r+0x24c>)
 8008484:	f7f7 fec4 	bl	8000210 <memchr>
 8008488:	9a04      	ldr	r2, [sp, #16]
 800848a:	b9d8      	cbnz	r0, 80084c4 <_vfiprintf_r+0x12c>
 800848c:	06d1      	lsls	r1, r2, #27
 800848e:	bf44      	itt	mi
 8008490:	2320      	movmi	r3, #32
 8008492:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008496:	0713      	lsls	r3, r2, #28
 8008498:	bf44      	itt	mi
 800849a:	232b      	movmi	r3, #43	; 0x2b
 800849c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80084a0:	f89a 3000 	ldrb.w	r3, [sl]
 80084a4:	2b2a      	cmp	r3, #42	; 0x2a
 80084a6:	d015      	beq.n	80084d4 <_vfiprintf_r+0x13c>
 80084a8:	9a07      	ldr	r2, [sp, #28]
 80084aa:	4654      	mov	r4, sl
 80084ac:	2000      	movs	r0, #0
 80084ae:	f04f 0c0a 	mov.w	ip, #10
 80084b2:	4621      	mov	r1, r4
 80084b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80084b8:	3b30      	subs	r3, #48	; 0x30
 80084ba:	2b09      	cmp	r3, #9
 80084bc:	d94e      	bls.n	800855c <_vfiprintf_r+0x1c4>
 80084be:	b1b0      	cbz	r0, 80084ee <_vfiprintf_r+0x156>
 80084c0:	9207      	str	r2, [sp, #28]
 80084c2:	e014      	b.n	80084ee <_vfiprintf_r+0x156>
 80084c4:	eba0 0308 	sub.w	r3, r0, r8
 80084c8:	fa09 f303 	lsl.w	r3, r9, r3
 80084cc:	4313      	orrs	r3, r2
 80084ce:	9304      	str	r3, [sp, #16]
 80084d0:	46a2      	mov	sl, r4
 80084d2:	e7d2      	b.n	800847a <_vfiprintf_r+0xe2>
 80084d4:	9b03      	ldr	r3, [sp, #12]
 80084d6:	1d19      	adds	r1, r3, #4
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	9103      	str	r1, [sp, #12]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	bfbb      	ittet	lt
 80084e0:	425b      	neglt	r3, r3
 80084e2:	f042 0202 	orrlt.w	r2, r2, #2
 80084e6:	9307      	strge	r3, [sp, #28]
 80084e8:	9307      	strlt	r3, [sp, #28]
 80084ea:	bfb8      	it	lt
 80084ec:	9204      	strlt	r2, [sp, #16]
 80084ee:	7823      	ldrb	r3, [r4, #0]
 80084f0:	2b2e      	cmp	r3, #46	; 0x2e
 80084f2:	d10c      	bne.n	800850e <_vfiprintf_r+0x176>
 80084f4:	7863      	ldrb	r3, [r4, #1]
 80084f6:	2b2a      	cmp	r3, #42	; 0x2a
 80084f8:	d135      	bne.n	8008566 <_vfiprintf_r+0x1ce>
 80084fa:	9b03      	ldr	r3, [sp, #12]
 80084fc:	1d1a      	adds	r2, r3, #4
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	9203      	str	r2, [sp, #12]
 8008502:	2b00      	cmp	r3, #0
 8008504:	bfb8      	it	lt
 8008506:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800850a:	3402      	adds	r4, #2
 800850c:	9305      	str	r3, [sp, #20]
 800850e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80085f4 <_vfiprintf_r+0x25c>
 8008512:	7821      	ldrb	r1, [r4, #0]
 8008514:	2203      	movs	r2, #3
 8008516:	4650      	mov	r0, sl
 8008518:	f7f7 fe7a 	bl	8000210 <memchr>
 800851c:	b140      	cbz	r0, 8008530 <_vfiprintf_r+0x198>
 800851e:	2340      	movs	r3, #64	; 0x40
 8008520:	eba0 000a 	sub.w	r0, r0, sl
 8008524:	fa03 f000 	lsl.w	r0, r3, r0
 8008528:	9b04      	ldr	r3, [sp, #16]
 800852a:	4303      	orrs	r3, r0
 800852c:	3401      	adds	r4, #1
 800852e:	9304      	str	r3, [sp, #16]
 8008530:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008534:	482c      	ldr	r0, [pc, #176]	; (80085e8 <_vfiprintf_r+0x250>)
 8008536:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800853a:	2206      	movs	r2, #6
 800853c:	f7f7 fe68 	bl	8000210 <memchr>
 8008540:	2800      	cmp	r0, #0
 8008542:	d03f      	beq.n	80085c4 <_vfiprintf_r+0x22c>
 8008544:	4b29      	ldr	r3, [pc, #164]	; (80085ec <_vfiprintf_r+0x254>)
 8008546:	bb1b      	cbnz	r3, 8008590 <_vfiprintf_r+0x1f8>
 8008548:	9b03      	ldr	r3, [sp, #12]
 800854a:	3307      	adds	r3, #7
 800854c:	f023 0307 	bic.w	r3, r3, #7
 8008550:	3308      	adds	r3, #8
 8008552:	9303      	str	r3, [sp, #12]
 8008554:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008556:	443b      	add	r3, r7
 8008558:	9309      	str	r3, [sp, #36]	; 0x24
 800855a:	e767      	b.n	800842c <_vfiprintf_r+0x94>
 800855c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008560:	460c      	mov	r4, r1
 8008562:	2001      	movs	r0, #1
 8008564:	e7a5      	b.n	80084b2 <_vfiprintf_r+0x11a>
 8008566:	2300      	movs	r3, #0
 8008568:	3401      	adds	r4, #1
 800856a:	9305      	str	r3, [sp, #20]
 800856c:	4619      	mov	r1, r3
 800856e:	f04f 0c0a 	mov.w	ip, #10
 8008572:	4620      	mov	r0, r4
 8008574:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008578:	3a30      	subs	r2, #48	; 0x30
 800857a:	2a09      	cmp	r2, #9
 800857c:	d903      	bls.n	8008586 <_vfiprintf_r+0x1ee>
 800857e:	2b00      	cmp	r3, #0
 8008580:	d0c5      	beq.n	800850e <_vfiprintf_r+0x176>
 8008582:	9105      	str	r1, [sp, #20]
 8008584:	e7c3      	b.n	800850e <_vfiprintf_r+0x176>
 8008586:	fb0c 2101 	mla	r1, ip, r1, r2
 800858a:	4604      	mov	r4, r0
 800858c:	2301      	movs	r3, #1
 800858e:	e7f0      	b.n	8008572 <_vfiprintf_r+0x1da>
 8008590:	ab03      	add	r3, sp, #12
 8008592:	9300      	str	r3, [sp, #0]
 8008594:	462a      	mov	r2, r5
 8008596:	4b16      	ldr	r3, [pc, #88]	; (80085f0 <_vfiprintf_r+0x258>)
 8008598:	a904      	add	r1, sp, #16
 800859a:	4630      	mov	r0, r6
 800859c:	f3af 8000 	nop.w
 80085a0:	4607      	mov	r7, r0
 80085a2:	1c78      	adds	r0, r7, #1
 80085a4:	d1d6      	bne.n	8008554 <_vfiprintf_r+0x1bc>
 80085a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80085a8:	07d9      	lsls	r1, r3, #31
 80085aa:	d405      	bmi.n	80085b8 <_vfiprintf_r+0x220>
 80085ac:	89ab      	ldrh	r3, [r5, #12]
 80085ae:	059a      	lsls	r2, r3, #22
 80085b0:	d402      	bmi.n	80085b8 <_vfiprintf_r+0x220>
 80085b2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80085b4:	f7ff fe31 	bl	800821a <__retarget_lock_release_recursive>
 80085b8:	89ab      	ldrh	r3, [r5, #12]
 80085ba:	065b      	lsls	r3, r3, #25
 80085bc:	f53f af12 	bmi.w	80083e4 <_vfiprintf_r+0x4c>
 80085c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80085c2:	e711      	b.n	80083e8 <_vfiprintf_r+0x50>
 80085c4:	ab03      	add	r3, sp, #12
 80085c6:	9300      	str	r3, [sp, #0]
 80085c8:	462a      	mov	r2, r5
 80085ca:	4b09      	ldr	r3, [pc, #36]	; (80085f0 <_vfiprintf_r+0x258>)
 80085cc:	a904      	add	r1, sp, #16
 80085ce:	4630      	mov	r0, r6
 80085d0:	f000 f880 	bl	80086d4 <_printf_i>
 80085d4:	e7e4      	b.n	80085a0 <_vfiprintf_r+0x208>
 80085d6:	bf00      	nop
 80085d8:	08009138 	.word	0x08009138
 80085dc:	08009158 	.word	0x08009158
 80085e0:	08009118 	.word	0x08009118
 80085e4:	08009178 	.word	0x08009178
 80085e8:	08009182 	.word	0x08009182
 80085ec:	00000000 	.word	0x00000000
 80085f0:	08008373 	.word	0x08008373
 80085f4:	0800917e 	.word	0x0800917e

080085f8 <_printf_common>:
 80085f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085fc:	4616      	mov	r6, r2
 80085fe:	4699      	mov	r9, r3
 8008600:	688a      	ldr	r2, [r1, #8]
 8008602:	690b      	ldr	r3, [r1, #16]
 8008604:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008608:	4293      	cmp	r3, r2
 800860a:	bfb8      	it	lt
 800860c:	4613      	movlt	r3, r2
 800860e:	6033      	str	r3, [r6, #0]
 8008610:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008614:	4607      	mov	r7, r0
 8008616:	460c      	mov	r4, r1
 8008618:	b10a      	cbz	r2, 800861e <_printf_common+0x26>
 800861a:	3301      	adds	r3, #1
 800861c:	6033      	str	r3, [r6, #0]
 800861e:	6823      	ldr	r3, [r4, #0]
 8008620:	0699      	lsls	r1, r3, #26
 8008622:	bf42      	ittt	mi
 8008624:	6833      	ldrmi	r3, [r6, #0]
 8008626:	3302      	addmi	r3, #2
 8008628:	6033      	strmi	r3, [r6, #0]
 800862a:	6825      	ldr	r5, [r4, #0]
 800862c:	f015 0506 	ands.w	r5, r5, #6
 8008630:	d106      	bne.n	8008640 <_printf_common+0x48>
 8008632:	f104 0a19 	add.w	sl, r4, #25
 8008636:	68e3      	ldr	r3, [r4, #12]
 8008638:	6832      	ldr	r2, [r6, #0]
 800863a:	1a9b      	subs	r3, r3, r2
 800863c:	42ab      	cmp	r3, r5
 800863e:	dc26      	bgt.n	800868e <_printf_common+0x96>
 8008640:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008644:	1e13      	subs	r3, r2, #0
 8008646:	6822      	ldr	r2, [r4, #0]
 8008648:	bf18      	it	ne
 800864a:	2301      	movne	r3, #1
 800864c:	0692      	lsls	r2, r2, #26
 800864e:	d42b      	bmi.n	80086a8 <_printf_common+0xb0>
 8008650:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008654:	4649      	mov	r1, r9
 8008656:	4638      	mov	r0, r7
 8008658:	47c0      	blx	r8
 800865a:	3001      	adds	r0, #1
 800865c:	d01e      	beq.n	800869c <_printf_common+0xa4>
 800865e:	6823      	ldr	r3, [r4, #0]
 8008660:	68e5      	ldr	r5, [r4, #12]
 8008662:	6832      	ldr	r2, [r6, #0]
 8008664:	f003 0306 	and.w	r3, r3, #6
 8008668:	2b04      	cmp	r3, #4
 800866a:	bf08      	it	eq
 800866c:	1aad      	subeq	r5, r5, r2
 800866e:	68a3      	ldr	r3, [r4, #8]
 8008670:	6922      	ldr	r2, [r4, #16]
 8008672:	bf0c      	ite	eq
 8008674:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008678:	2500      	movne	r5, #0
 800867a:	4293      	cmp	r3, r2
 800867c:	bfc4      	itt	gt
 800867e:	1a9b      	subgt	r3, r3, r2
 8008680:	18ed      	addgt	r5, r5, r3
 8008682:	2600      	movs	r6, #0
 8008684:	341a      	adds	r4, #26
 8008686:	42b5      	cmp	r5, r6
 8008688:	d11a      	bne.n	80086c0 <_printf_common+0xc8>
 800868a:	2000      	movs	r0, #0
 800868c:	e008      	b.n	80086a0 <_printf_common+0xa8>
 800868e:	2301      	movs	r3, #1
 8008690:	4652      	mov	r2, sl
 8008692:	4649      	mov	r1, r9
 8008694:	4638      	mov	r0, r7
 8008696:	47c0      	blx	r8
 8008698:	3001      	adds	r0, #1
 800869a:	d103      	bne.n	80086a4 <_printf_common+0xac>
 800869c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80086a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086a4:	3501      	adds	r5, #1
 80086a6:	e7c6      	b.n	8008636 <_printf_common+0x3e>
 80086a8:	18e1      	adds	r1, r4, r3
 80086aa:	1c5a      	adds	r2, r3, #1
 80086ac:	2030      	movs	r0, #48	; 0x30
 80086ae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80086b2:	4422      	add	r2, r4
 80086b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80086b8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80086bc:	3302      	adds	r3, #2
 80086be:	e7c7      	b.n	8008650 <_printf_common+0x58>
 80086c0:	2301      	movs	r3, #1
 80086c2:	4622      	mov	r2, r4
 80086c4:	4649      	mov	r1, r9
 80086c6:	4638      	mov	r0, r7
 80086c8:	47c0      	blx	r8
 80086ca:	3001      	adds	r0, #1
 80086cc:	d0e6      	beq.n	800869c <_printf_common+0xa4>
 80086ce:	3601      	adds	r6, #1
 80086d0:	e7d9      	b.n	8008686 <_printf_common+0x8e>
	...

080086d4 <_printf_i>:
 80086d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80086d8:	7e0f      	ldrb	r7, [r1, #24]
 80086da:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80086dc:	2f78      	cmp	r7, #120	; 0x78
 80086de:	4691      	mov	r9, r2
 80086e0:	4680      	mov	r8, r0
 80086e2:	460c      	mov	r4, r1
 80086e4:	469a      	mov	sl, r3
 80086e6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80086ea:	d807      	bhi.n	80086fc <_printf_i+0x28>
 80086ec:	2f62      	cmp	r7, #98	; 0x62
 80086ee:	d80a      	bhi.n	8008706 <_printf_i+0x32>
 80086f0:	2f00      	cmp	r7, #0
 80086f2:	f000 80d8 	beq.w	80088a6 <_printf_i+0x1d2>
 80086f6:	2f58      	cmp	r7, #88	; 0x58
 80086f8:	f000 80a3 	beq.w	8008842 <_printf_i+0x16e>
 80086fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008700:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008704:	e03a      	b.n	800877c <_printf_i+0xa8>
 8008706:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800870a:	2b15      	cmp	r3, #21
 800870c:	d8f6      	bhi.n	80086fc <_printf_i+0x28>
 800870e:	a101      	add	r1, pc, #4	; (adr r1, 8008714 <_printf_i+0x40>)
 8008710:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008714:	0800876d 	.word	0x0800876d
 8008718:	08008781 	.word	0x08008781
 800871c:	080086fd 	.word	0x080086fd
 8008720:	080086fd 	.word	0x080086fd
 8008724:	080086fd 	.word	0x080086fd
 8008728:	080086fd 	.word	0x080086fd
 800872c:	08008781 	.word	0x08008781
 8008730:	080086fd 	.word	0x080086fd
 8008734:	080086fd 	.word	0x080086fd
 8008738:	080086fd 	.word	0x080086fd
 800873c:	080086fd 	.word	0x080086fd
 8008740:	0800888d 	.word	0x0800888d
 8008744:	080087b1 	.word	0x080087b1
 8008748:	0800886f 	.word	0x0800886f
 800874c:	080086fd 	.word	0x080086fd
 8008750:	080086fd 	.word	0x080086fd
 8008754:	080088af 	.word	0x080088af
 8008758:	080086fd 	.word	0x080086fd
 800875c:	080087b1 	.word	0x080087b1
 8008760:	080086fd 	.word	0x080086fd
 8008764:	080086fd 	.word	0x080086fd
 8008768:	08008877 	.word	0x08008877
 800876c:	682b      	ldr	r3, [r5, #0]
 800876e:	1d1a      	adds	r2, r3, #4
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	602a      	str	r2, [r5, #0]
 8008774:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008778:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800877c:	2301      	movs	r3, #1
 800877e:	e0a3      	b.n	80088c8 <_printf_i+0x1f4>
 8008780:	6820      	ldr	r0, [r4, #0]
 8008782:	6829      	ldr	r1, [r5, #0]
 8008784:	0606      	lsls	r6, r0, #24
 8008786:	f101 0304 	add.w	r3, r1, #4
 800878a:	d50a      	bpl.n	80087a2 <_printf_i+0xce>
 800878c:	680e      	ldr	r6, [r1, #0]
 800878e:	602b      	str	r3, [r5, #0]
 8008790:	2e00      	cmp	r6, #0
 8008792:	da03      	bge.n	800879c <_printf_i+0xc8>
 8008794:	232d      	movs	r3, #45	; 0x2d
 8008796:	4276      	negs	r6, r6
 8008798:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800879c:	485e      	ldr	r0, [pc, #376]	; (8008918 <_printf_i+0x244>)
 800879e:	230a      	movs	r3, #10
 80087a0:	e019      	b.n	80087d6 <_printf_i+0x102>
 80087a2:	680e      	ldr	r6, [r1, #0]
 80087a4:	602b      	str	r3, [r5, #0]
 80087a6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80087aa:	bf18      	it	ne
 80087ac:	b236      	sxthne	r6, r6
 80087ae:	e7ef      	b.n	8008790 <_printf_i+0xbc>
 80087b0:	682b      	ldr	r3, [r5, #0]
 80087b2:	6820      	ldr	r0, [r4, #0]
 80087b4:	1d19      	adds	r1, r3, #4
 80087b6:	6029      	str	r1, [r5, #0]
 80087b8:	0601      	lsls	r1, r0, #24
 80087ba:	d501      	bpl.n	80087c0 <_printf_i+0xec>
 80087bc:	681e      	ldr	r6, [r3, #0]
 80087be:	e002      	b.n	80087c6 <_printf_i+0xf2>
 80087c0:	0646      	lsls	r6, r0, #25
 80087c2:	d5fb      	bpl.n	80087bc <_printf_i+0xe8>
 80087c4:	881e      	ldrh	r6, [r3, #0]
 80087c6:	4854      	ldr	r0, [pc, #336]	; (8008918 <_printf_i+0x244>)
 80087c8:	2f6f      	cmp	r7, #111	; 0x6f
 80087ca:	bf0c      	ite	eq
 80087cc:	2308      	moveq	r3, #8
 80087ce:	230a      	movne	r3, #10
 80087d0:	2100      	movs	r1, #0
 80087d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80087d6:	6865      	ldr	r5, [r4, #4]
 80087d8:	60a5      	str	r5, [r4, #8]
 80087da:	2d00      	cmp	r5, #0
 80087dc:	bfa2      	ittt	ge
 80087de:	6821      	ldrge	r1, [r4, #0]
 80087e0:	f021 0104 	bicge.w	r1, r1, #4
 80087e4:	6021      	strge	r1, [r4, #0]
 80087e6:	b90e      	cbnz	r6, 80087ec <_printf_i+0x118>
 80087e8:	2d00      	cmp	r5, #0
 80087ea:	d04d      	beq.n	8008888 <_printf_i+0x1b4>
 80087ec:	4615      	mov	r5, r2
 80087ee:	fbb6 f1f3 	udiv	r1, r6, r3
 80087f2:	fb03 6711 	mls	r7, r3, r1, r6
 80087f6:	5dc7      	ldrb	r7, [r0, r7]
 80087f8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80087fc:	4637      	mov	r7, r6
 80087fe:	42bb      	cmp	r3, r7
 8008800:	460e      	mov	r6, r1
 8008802:	d9f4      	bls.n	80087ee <_printf_i+0x11a>
 8008804:	2b08      	cmp	r3, #8
 8008806:	d10b      	bne.n	8008820 <_printf_i+0x14c>
 8008808:	6823      	ldr	r3, [r4, #0]
 800880a:	07de      	lsls	r6, r3, #31
 800880c:	d508      	bpl.n	8008820 <_printf_i+0x14c>
 800880e:	6923      	ldr	r3, [r4, #16]
 8008810:	6861      	ldr	r1, [r4, #4]
 8008812:	4299      	cmp	r1, r3
 8008814:	bfde      	ittt	le
 8008816:	2330      	movle	r3, #48	; 0x30
 8008818:	f805 3c01 	strble.w	r3, [r5, #-1]
 800881c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8008820:	1b52      	subs	r2, r2, r5
 8008822:	6122      	str	r2, [r4, #16]
 8008824:	f8cd a000 	str.w	sl, [sp]
 8008828:	464b      	mov	r3, r9
 800882a:	aa03      	add	r2, sp, #12
 800882c:	4621      	mov	r1, r4
 800882e:	4640      	mov	r0, r8
 8008830:	f7ff fee2 	bl	80085f8 <_printf_common>
 8008834:	3001      	adds	r0, #1
 8008836:	d14c      	bne.n	80088d2 <_printf_i+0x1fe>
 8008838:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800883c:	b004      	add	sp, #16
 800883e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008842:	4835      	ldr	r0, [pc, #212]	; (8008918 <_printf_i+0x244>)
 8008844:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008848:	6829      	ldr	r1, [r5, #0]
 800884a:	6823      	ldr	r3, [r4, #0]
 800884c:	f851 6b04 	ldr.w	r6, [r1], #4
 8008850:	6029      	str	r1, [r5, #0]
 8008852:	061d      	lsls	r5, r3, #24
 8008854:	d514      	bpl.n	8008880 <_printf_i+0x1ac>
 8008856:	07df      	lsls	r7, r3, #31
 8008858:	bf44      	itt	mi
 800885a:	f043 0320 	orrmi.w	r3, r3, #32
 800885e:	6023      	strmi	r3, [r4, #0]
 8008860:	b91e      	cbnz	r6, 800886a <_printf_i+0x196>
 8008862:	6823      	ldr	r3, [r4, #0]
 8008864:	f023 0320 	bic.w	r3, r3, #32
 8008868:	6023      	str	r3, [r4, #0]
 800886a:	2310      	movs	r3, #16
 800886c:	e7b0      	b.n	80087d0 <_printf_i+0xfc>
 800886e:	6823      	ldr	r3, [r4, #0]
 8008870:	f043 0320 	orr.w	r3, r3, #32
 8008874:	6023      	str	r3, [r4, #0]
 8008876:	2378      	movs	r3, #120	; 0x78
 8008878:	4828      	ldr	r0, [pc, #160]	; (800891c <_printf_i+0x248>)
 800887a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800887e:	e7e3      	b.n	8008848 <_printf_i+0x174>
 8008880:	0659      	lsls	r1, r3, #25
 8008882:	bf48      	it	mi
 8008884:	b2b6      	uxthmi	r6, r6
 8008886:	e7e6      	b.n	8008856 <_printf_i+0x182>
 8008888:	4615      	mov	r5, r2
 800888a:	e7bb      	b.n	8008804 <_printf_i+0x130>
 800888c:	682b      	ldr	r3, [r5, #0]
 800888e:	6826      	ldr	r6, [r4, #0]
 8008890:	6961      	ldr	r1, [r4, #20]
 8008892:	1d18      	adds	r0, r3, #4
 8008894:	6028      	str	r0, [r5, #0]
 8008896:	0635      	lsls	r5, r6, #24
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	d501      	bpl.n	80088a0 <_printf_i+0x1cc>
 800889c:	6019      	str	r1, [r3, #0]
 800889e:	e002      	b.n	80088a6 <_printf_i+0x1d2>
 80088a0:	0670      	lsls	r0, r6, #25
 80088a2:	d5fb      	bpl.n	800889c <_printf_i+0x1c8>
 80088a4:	8019      	strh	r1, [r3, #0]
 80088a6:	2300      	movs	r3, #0
 80088a8:	6123      	str	r3, [r4, #16]
 80088aa:	4615      	mov	r5, r2
 80088ac:	e7ba      	b.n	8008824 <_printf_i+0x150>
 80088ae:	682b      	ldr	r3, [r5, #0]
 80088b0:	1d1a      	adds	r2, r3, #4
 80088b2:	602a      	str	r2, [r5, #0]
 80088b4:	681d      	ldr	r5, [r3, #0]
 80088b6:	6862      	ldr	r2, [r4, #4]
 80088b8:	2100      	movs	r1, #0
 80088ba:	4628      	mov	r0, r5
 80088bc:	f7f7 fca8 	bl	8000210 <memchr>
 80088c0:	b108      	cbz	r0, 80088c6 <_printf_i+0x1f2>
 80088c2:	1b40      	subs	r0, r0, r5
 80088c4:	6060      	str	r0, [r4, #4]
 80088c6:	6863      	ldr	r3, [r4, #4]
 80088c8:	6123      	str	r3, [r4, #16]
 80088ca:	2300      	movs	r3, #0
 80088cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80088d0:	e7a8      	b.n	8008824 <_printf_i+0x150>
 80088d2:	6923      	ldr	r3, [r4, #16]
 80088d4:	462a      	mov	r2, r5
 80088d6:	4649      	mov	r1, r9
 80088d8:	4640      	mov	r0, r8
 80088da:	47d0      	blx	sl
 80088dc:	3001      	adds	r0, #1
 80088de:	d0ab      	beq.n	8008838 <_printf_i+0x164>
 80088e0:	6823      	ldr	r3, [r4, #0]
 80088e2:	079b      	lsls	r3, r3, #30
 80088e4:	d413      	bmi.n	800890e <_printf_i+0x23a>
 80088e6:	68e0      	ldr	r0, [r4, #12]
 80088e8:	9b03      	ldr	r3, [sp, #12]
 80088ea:	4298      	cmp	r0, r3
 80088ec:	bfb8      	it	lt
 80088ee:	4618      	movlt	r0, r3
 80088f0:	e7a4      	b.n	800883c <_printf_i+0x168>
 80088f2:	2301      	movs	r3, #1
 80088f4:	4632      	mov	r2, r6
 80088f6:	4649      	mov	r1, r9
 80088f8:	4640      	mov	r0, r8
 80088fa:	47d0      	blx	sl
 80088fc:	3001      	adds	r0, #1
 80088fe:	d09b      	beq.n	8008838 <_printf_i+0x164>
 8008900:	3501      	adds	r5, #1
 8008902:	68e3      	ldr	r3, [r4, #12]
 8008904:	9903      	ldr	r1, [sp, #12]
 8008906:	1a5b      	subs	r3, r3, r1
 8008908:	42ab      	cmp	r3, r5
 800890a:	dcf2      	bgt.n	80088f2 <_printf_i+0x21e>
 800890c:	e7eb      	b.n	80088e6 <_printf_i+0x212>
 800890e:	2500      	movs	r5, #0
 8008910:	f104 0619 	add.w	r6, r4, #25
 8008914:	e7f5      	b.n	8008902 <_printf_i+0x22e>
 8008916:	bf00      	nop
 8008918:	08009189 	.word	0x08009189
 800891c:	0800919a 	.word	0x0800919a

08008920 <_sbrk_r>:
 8008920:	b538      	push	{r3, r4, r5, lr}
 8008922:	4d06      	ldr	r5, [pc, #24]	; (800893c <_sbrk_r+0x1c>)
 8008924:	2300      	movs	r3, #0
 8008926:	4604      	mov	r4, r0
 8008928:	4608      	mov	r0, r1
 800892a:	602b      	str	r3, [r5, #0]
 800892c:	f7f8 fc54 	bl	80011d8 <_sbrk>
 8008930:	1c43      	adds	r3, r0, #1
 8008932:	d102      	bne.n	800893a <_sbrk_r+0x1a>
 8008934:	682b      	ldr	r3, [r5, #0]
 8008936:	b103      	cbz	r3, 800893a <_sbrk_r+0x1a>
 8008938:	6023      	str	r3, [r4, #0]
 800893a:	bd38      	pop	{r3, r4, r5, pc}
 800893c:	20004bfc 	.word	0x20004bfc

08008940 <__sread>:
 8008940:	b510      	push	{r4, lr}
 8008942:	460c      	mov	r4, r1
 8008944:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008948:	f000 fab2 	bl	8008eb0 <_read_r>
 800894c:	2800      	cmp	r0, #0
 800894e:	bfab      	itete	ge
 8008950:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008952:	89a3      	ldrhlt	r3, [r4, #12]
 8008954:	181b      	addge	r3, r3, r0
 8008956:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800895a:	bfac      	ite	ge
 800895c:	6563      	strge	r3, [r4, #84]	; 0x54
 800895e:	81a3      	strhlt	r3, [r4, #12]
 8008960:	bd10      	pop	{r4, pc}

08008962 <__swrite>:
 8008962:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008966:	461f      	mov	r7, r3
 8008968:	898b      	ldrh	r3, [r1, #12]
 800896a:	05db      	lsls	r3, r3, #23
 800896c:	4605      	mov	r5, r0
 800896e:	460c      	mov	r4, r1
 8008970:	4616      	mov	r6, r2
 8008972:	d505      	bpl.n	8008980 <__swrite+0x1e>
 8008974:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008978:	2302      	movs	r3, #2
 800897a:	2200      	movs	r2, #0
 800897c:	f000 f9c8 	bl	8008d10 <_lseek_r>
 8008980:	89a3      	ldrh	r3, [r4, #12]
 8008982:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008986:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800898a:	81a3      	strh	r3, [r4, #12]
 800898c:	4632      	mov	r2, r6
 800898e:	463b      	mov	r3, r7
 8008990:	4628      	mov	r0, r5
 8008992:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008996:	f000 b869 	b.w	8008a6c <_write_r>

0800899a <__sseek>:
 800899a:	b510      	push	{r4, lr}
 800899c:	460c      	mov	r4, r1
 800899e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089a2:	f000 f9b5 	bl	8008d10 <_lseek_r>
 80089a6:	1c43      	adds	r3, r0, #1
 80089a8:	89a3      	ldrh	r3, [r4, #12]
 80089aa:	bf15      	itete	ne
 80089ac:	6560      	strne	r0, [r4, #84]	; 0x54
 80089ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80089b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80089b6:	81a3      	strheq	r3, [r4, #12]
 80089b8:	bf18      	it	ne
 80089ba:	81a3      	strhne	r3, [r4, #12]
 80089bc:	bd10      	pop	{r4, pc}

080089be <__sclose>:
 80089be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089c2:	f000 b8d3 	b.w	8008b6c <_close_r>
	...

080089c8 <__swbuf_r>:
 80089c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089ca:	460e      	mov	r6, r1
 80089cc:	4614      	mov	r4, r2
 80089ce:	4605      	mov	r5, r0
 80089d0:	b118      	cbz	r0, 80089da <__swbuf_r+0x12>
 80089d2:	6983      	ldr	r3, [r0, #24]
 80089d4:	b90b      	cbnz	r3, 80089da <__swbuf_r+0x12>
 80089d6:	f7ff fb81 	bl	80080dc <__sinit>
 80089da:	4b21      	ldr	r3, [pc, #132]	; (8008a60 <__swbuf_r+0x98>)
 80089dc:	429c      	cmp	r4, r3
 80089de:	d12b      	bne.n	8008a38 <__swbuf_r+0x70>
 80089e0:	686c      	ldr	r4, [r5, #4]
 80089e2:	69a3      	ldr	r3, [r4, #24]
 80089e4:	60a3      	str	r3, [r4, #8]
 80089e6:	89a3      	ldrh	r3, [r4, #12]
 80089e8:	071a      	lsls	r2, r3, #28
 80089ea:	d52f      	bpl.n	8008a4c <__swbuf_r+0x84>
 80089ec:	6923      	ldr	r3, [r4, #16]
 80089ee:	b36b      	cbz	r3, 8008a4c <__swbuf_r+0x84>
 80089f0:	6923      	ldr	r3, [r4, #16]
 80089f2:	6820      	ldr	r0, [r4, #0]
 80089f4:	1ac0      	subs	r0, r0, r3
 80089f6:	6963      	ldr	r3, [r4, #20]
 80089f8:	b2f6      	uxtb	r6, r6
 80089fa:	4283      	cmp	r3, r0
 80089fc:	4637      	mov	r7, r6
 80089fe:	dc04      	bgt.n	8008a0a <__swbuf_r+0x42>
 8008a00:	4621      	mov	r1, r4
 8008a02:	4628      	mov	r0, r5
 8008a04:	f000 f948 	bl	8008c98 <_fflush_r>
 8008a08:	bb30      	cbnz	r0, 8008a58 <__swbuf_r+0x90>
 8008a0a:	68a3      	ldr	r3, [r4, #8]
 8008a0c:	3b01      	subs	r3, #1
 8008a0e:	60a3      	str	r3, [r4, #8]
 8008a10:	6823      	ldr	r3, [r4, #0]
 8008a12:	1c5a      	adds	r2, r3, #1
 8008a14:	6022      	str	r2, [r4, #0]
 8008a16:	701e      	strb	r6, [r3, #0]
 8008a18:	6963      	ldr	r3, [r4, #20]
 8008a1a:	3001      	adds	r0, #1
 8008a1c:	4283      	cmp	r3, r0
 8008a1e:	d004      	beq.n	8008a2a <__swbuf_r+0x62>
 8008a20:	89a3      	ldrh	r3, [r4, #12]
 8008a22:	07db      	lsls	r3, r3, #31
 8008a24:	d506      	bpl.n	8008a34 <__swbuf_r+0x6c>
 8008a26:	2e0a      	cmp	r6, #10
 8008a28:	d104      	bne.n	8008a34 <__swbuf_r+0x6c>
 8008a2a:	4621      	mov	r1, r4
 8008a2c:	4628      	mov	r0, r5
 8008a2e:	f000 f933 	bl	8008c98 <_fflush_r>
 8008a32:	b988      	cbnz	r0, 8008a58 <__swbuf_r+0x90>
 8008a34:	4638      	mov	r0, r7
 8008a36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a38:	4b0a      	ldr	r3, [pc, #40]	; (8008a64 <__swbuf_r+0x9c>)
 8008a3a:	429c      	cmp	r4, r3
 8008a3c:	d101      	bne.n	8008a42 <__swbuf_r+0x7a>
 8008a3e:	68ac      	ldr	r4, [r5, #8]
 8008a40:	e7cf      	b.n	80089e2 <__swbuf_r+0x1a>
 8008a42:	4b09      	ldr	r3, [pc, #36]	; (8008a68 <__swbuf_r+0xa0>)
 8008a44:	429c      	cmp	r4, r3
 8008a46:	bf08      	it	eq
 8008a48:	68ec      	ldreq	r4, [r5, #12]
 8008a4a:	e7ca      	b.n	80089e2 <__swbuf_r+0x1a>
 8008a4c:	4621      	mov	r1, r4
 8008a4e:	4628      	mov	r0, r5
 8008a50:	f000 f81e 	bl	8008a90 <__swsetup_r>
 8008a54:	2800      	cmp	r0, #0
 8008a56:	d0cb      	beq.n	80089f0 <__swbuf_r+0x28>
 8008a58:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8008a5c:	e7ea      	b.n	8008a34 <__swbuf_r+0x6c>
 8008a5e:	bf00      	nop
 8008a60:	08009138 	.word	0x08009138
 8008a64:	08009158 	.word	0x08009158
 8008a68:	08009118 	.word	0x08009118

08008a6c <_write_r>:
 8008a6c:	b538      	push	{r3, r4, r5, lr}
 8008a6e:	4d07      	ldr	r5, [pc, #28]	; (8008a8c <_write_r+0x20>)
 8008a70:	4604      	mov	r4, r0
 8008a72:	4608      	mov	r0, r1
 8008a74:	4611      	mov	r1, r2
 8008a76:	2200      	movs	r2, #0
 8008a78:	602a      	str	r2, [r5, #0]
 8008a7a:	461a      	mov	r2, r3
 8008a7c:	f7f8 f954 	bl	8000d28 <_write>
 8008a80:	1c43      	adds	r3, r0, #1
 8008a82:	d102      	bne.n	8008a8a <_write_r+0x1e>
 8008a84:	682b      	ldr	r3, [r5, #0]
 8008a86:	b103      	cbz	r3, 8008a8a <_write_r+0x1e>
 8008a88:	6023      	str	r3, [r4, #0]
 8008a8a:	bd38      	pop	{r3, r4, r5, pc}
 8008a8c:	20004bfc 	.word	0x20004bfc

08008a90 <__swsetup_r>:
 8008a90:	4b32      	ldr	r3, [pc, #200]	; (8008b5c <__swsetup_r+0xcc>)
 8008a92:	b570      	push	{r4, r5, r6, lr}
 8008a94:	681d      	ldr	r5, [r3, #0]
 8008a96:	4606      	mov	r6, r0
 8008a98:	460c      	mov	r4, r1
 8008a9a:	b125      	cbz	r5, 8008aa6 <__swsetup_r+0x16>
 8008a9c:	69ab      	ldr	r3, [r5, #24]
 8008a9e:	b913      	cbnz	r3, 8008aa6 <__swsetup_r+0x16>
 8008aa0:	4628      	mov	r0, r5
 8008aa2:	f7ff fb1b 	bl	80080dc <__sinit>
 8008aa6:	4b2e      	ldr	r3, [pc, #184]	; (8008b60 <__swsetup_r+0xd0>)
 8008aa8:	429c      	cmp	r4, r3
 8008aaa:	d10f      	bne.n	8008acc <__swsetup_r+0x3c>
 8008aac:	686c      	ldr	r4, [r5, #4]
 8008aae:	89a3      	ldrh	r3, [r4, #12]
 8008ab0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008ab4:	0719      	lsls	r1, r3, #28
 8008ab6:	d42c      	bmi.n	8008b12 <__swsetup_r+0x82>
 8008ab8:	06dd      	lsls	r5, r3, #27
 8008aba:	d411      	bmi.n	8008ae0 <__swsetup_r+0x50>
 8008abc:	2309      	movs	r3, #9
 8008abe:	6033      	str	r3, [r6, #0]
 8008ac0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008ac4:	81a3      	strh	r3, [r4, #12]
 8008ac6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008aca:	e03e      	b.n	8008b4a <__swsetup_r+0xba>
 8008acc:	4b25      	ldr	r3, [pc, #148]	; (8008b64 <__swsetup_r+0xd4>)
 8008ace:	429c      	cmp	r4, r3
 8008ad0:	d101      	bne.n	8008ad6 <__swsetup_r+0x46>
 8008ad2:	68ac      	ldr	r4, [r5, #8]
 8008ad4:	e7eb      	b.n	8008aae <__swsetup_r+0x1e>
 8008ad6:	4b24      	ldr	r3, [pc, #144]	; (8008b68 <__swsetup_r+0xd8>)
 8008ad8:	429c      	cmp	r4, r3
 8008ada:	bf08      	it	eq
 8008adc:	68ec      	ldreq	r4, [r5, #12]
 8008ade:	e7e6      	b.n	8008aae <__swsetup_r+0x1e>
 8008ae0:	0758      	lsls	r0, r3, #29
 8008ae2:	d512      	bpl.n	8008b0a <__swsetup_r+0x7a>
 8008ae4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008ae6:	b141      	cbz	r1, 8008afa <__swsetup_r+0x6a>
 8008ae8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008aec:	4299      	cmp	r1, r3
 8008aee:	d002      	beq.n	8008af6 <__swsetup_r+0x66>
 8008af0:	4630      	mov	r0, r6
 8008af2:	f000 f991 	bl	8008e18 <_free_r>
 8008af6:	2300      	movs	r3, #0
 8008af8:	6363      	str	r3, [r4, #52]	; 0x34
 8008afa:	89a3      	ldrh	r3, [r4, #12]
 8008afc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008b00:	81a3      	strh	r3, [r4, #12]
 8008b02:	2300      	movs	r3, #0
 8008b04:	6063      	str	r3, [r4, #4]
 8008b06:	6923      	ldr	r3, [r4, #16]
 8008b08:	6023      	str	r3, [r4, #0]
 8008b0a:	89a3      	ldrh	r3, [r4, #12]
 8008b0c:	f043 0308 	orr.w	r3, r3, #8
 8008b10:	81a3      	strh	r3, [r4, #12]
 8008b12:	6923      	ldr	r3, [r4, #16]
 8008b14:	b94b      	cbnz	r3, 8008b2a <__swsetup_r+0x9a>
 8008b16:	89a3      	ldrh	r3, [r4, #12]
 8008b18:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008b1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008b20:	d003      	beq.n	8008b2a <__swsetup_r+0x9a>
 8008b22:	4621      	mov	r1, r4
 8008b24:	4630      	mov	r0, r6
 8008b26:	f000 f92b 	bl	8008d80 <__smakebuf_r>
 8008b2a:	89a0      	ldrh	r0, [r4, #12]
 8008b2c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008b30:	f010 0301 	ands.w	r3, r0, #1
 8008b34:	d00a      	beq.n	8008b4c <__swsetup_r+0xbc>
 8008b36:	2300      	movs	r3, #0
 8008b38:	60a3      	str	r3, [r4, #8]
 8008b3a:	6963      	ldr	r3, [r4, #20]
 8008b3c:	425b      	negs	r3, r3
 8008b3e:	61a3      	str	r3, [r4, #24]
 8008b40:	6923      	ldr	r3, [r4, #16]
 8008b42:	b943      	cbnz	r3, 8008b56 <__swsetup_r+0xc6>
 8008b44:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008b48:	d1ba      	bne.n	8008ac0 <__swsetup_r+0x30>
 8008b4a:	bd70      	pop	{r4, r5, r6, pc}
 8008b4c:	0781      	lsls	r1, r0, #30
 8008b4e:	bf58      	it	pl
 8008b50:	6963      	ldrpl	r3, [r4, #20]
 8008b52:	60a3      	str	r3, [r4, #8]
 8008b54:	e7f4      	b.n	8008b40 <__swsetup_r+0xb0>
 8008b56:	2000      	movs	r0, #0
 8008b58:	e7f7      	b.n	8008b4a <__swsetup_r+0xba>
 8008b5a:	bf00      	nop
 8008b5c:	200000d4 	.word	0x200000d4
 8008b60:	08009138 	.word	0x08009138
 8008b64:	08009158 	.word	0x08009158
 8008b68:	08009118 	.word	0x08009118

08008b6c <_close_r>:
 8008b6c:	b538      	push	{r3, r4, r5, lr}
 8008b6e:	4d06      	ldr	r5, [pc, #24]	; (8008b88 <_close_r+0x1c>)
 8008b70:	2300      	movs	r3, #0
 8008b72:	4604      	mov	r4, r0
 8008b74:	4608      	mov	r0, r1
 8008b76:	602b      	str	r3, [r5, #0]
 8008b78:	f7f8 fafa 	bl	8001170 <_close>
 8008b7c:	1c43      	adds	r3, r0, #1
 8008b7e:	d102      	bne.n	8008b86 <_close_r+0x1a>
 8008b80:	682b      	ldr	r3, [r5, #0]
 8008b82:	b103      	cbz	r3, 8008b86 <_close_r+0x1a>
 8008b84:	6023      	str	r3, [r4, #0]
 8008b86:	bd38      	pop	{r3, r4, r5, pc}
 8008b88:	20004bfc 	.word	0x20004bfc

08008b8c <__sflush_r>:
 8008b8c:	898a      	ldrh	r2, [r1, #12]
 8008b8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b92:	4605      	mov	r5, r0
 8008b94:	0710      	lsls	r0, r2, #28
 8008b96:	460c      	mov	r4, r1
 8008b98:	d458      	bmi.n	8008c4c <__sflush_r+0xc0>
 8008b9a:	684b      	ldr	r3, [r1, #4]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	dc05      	bgt.n	8008bac <__sflush_r+0x20>
 8008ba0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	dc02      	bgt.n	8008bac <__sflush_r+0x20>
 8008ba6:	2000      	movs	r0, #0
 8008ba8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008bac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008bae:	2e00      	cmp	r6, #0
 8008bb0:	d0f9      	beq.n	8008ba6 <__sflush_r+0x1a>
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008bb8:	682f      	ldr	r7, [r5, #0]
 8008bba:	602b      	str	r3, [r5, #0]
 8008bbc:	d032      	beq.n	8008c24 <__sflush_r+0x98>
 8008bbe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008bc0:	89a3      	ldrh	r3, [r4, #12]
 8008bc2:	075a      	lsls	r2, r3, #29
 8008bc4:	d505      	bpl.n	8008bd2 <__sflush_r+0x46>
 8008bc6:	6863      	ldr	r3, [r4, #4]
 8008bc8:	1ac0      	subs	r0, r0, r3
 8008bca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008bcc:	b10b      	cbz	r3, 8008bd2 <__sflush_r+0x46>
 8008bce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008bd0:	1ac0      	subs	r0, r0, r3
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	4602      	mov	r2, r0
 8008bd6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008bd8:	6a21      	ldr	r1, [r4, #32]
 8008bda:	4628      	mov	r0, r5
 8008bdc:	47b0      	blx	r6
 8008bde:	1c43      	adds	r3, r0, #1
 8008be0:	89a3      	ldrh	r3, [r4, #12]
 8008be2:	d106      	bne.n	8008bf2 <__sflush_r+0x66>
 8008be4:	6829      	ldr	r1, [r5, #0]
 8008be6:	291d      	cmp	r1, #29
 8008be8:	d82c      	bhi.n	8008c44 <__sflush_r+0xb8>
 8008bea:	4a2a      	ldr	r2, [pc, #168]	; (8008c94 <__sflush_r+0x108>)
 8008bec:	40ca      	lsrs	r2, r1
 8008bee:	07d6      	lsls	r6, r2, #31
 8008bf0:	d528      	bpl.n	8008c44 <__sflush_r+0xb8>
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	6062      	str	r2, [r4, #4]
 8008bf6:	04d9      	lsls	r1, r3, #19
 8008bf8:	6922      	ldr	r2, [r4, #16]
 8008bfa:	6022      	str	r2, [r4, #0]
 8008bfc:	d504      	bpl.n	8008c08 <__sflush_r+0x7c>
 8008bfe:	1c42      	adds	r2, r0, #1
 8008c00:	d101      	bne.n	8008c06 <__sflush_r+0x7a>
 8008c02:	682b      	ldr	r3, [r5, #0]
 8008c04:	b903      	cbnz	r3, 8008c08 <__sflush_r+0x7c>
 8008c06:	6560      	str	r0, [r4, #84]	; 0x54
 8008c08:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008c0a:	602f      	str	r7, [r5, #0]
 8008c0c:	2900      	cmp	r1, #0
 8008c0e:	d0ca      	beq.n	8008ba6 <__sflush_r+0x1a>
 8008c10:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008c14:	4299      	cmp	r1, r3
 8008c16:	d002      	beq.n	8008c1e <__sflush_r+0x92>
 8008c18:	4628      	mov	r0, r5
 8008c1a:	f000 f8fd 	bl	8008e18 <_free_r>
 8008c1e:	2000      	movs	r0, #0
 8008c20:	6360      	str	r0, [r4, #52]	; 0x34
 8008c22:	e7c1      	b.n	8008ba8 <__sflush_r+0x1c>
 8008c24:	6a21      	ldr	r1, [r4, #32]
 8008c26:	2301      	movs	r3, #1
 8008c28:	4628      	mov	r0, r5
 8008c2a:	47b0      	blx	r6
 8008c2c:	1c41      	adds	r1, r0, #1
 8008c2e:	d1c7      	bne.n	8008bc0 <__sflush_r+0x34>
 8008c30:	682b      	ldr	r3, [r5, #0]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d0c4      	beq.n	8008bc0 <__sflush_r+0x34>
 8008c36:	2b1d      	cmp	r3, #29
 8008c38:	d001      	beq.n	8008c3e <__sflush_r+0xb2>
 8008c3a:	2b16      	cmp	r3, #22
 8008c3c:	d101      	bne.n	8008c42 <__sflush_r+0xb6>
 8008c3e:	602f      	str	r7, [r5, #0]
 8008c40:	e7b1      	b.n	8008ba6 <__sflush_r+0x1a>
 8008c42:	89a3      	ldrh	r3, [r4, #12]
 8008c44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c48:	81a3      	strh	r3, [r4, #12]
 8008c4a:	e7ad      	b.n	8008ba8 <__sflush_r+0x1c>
 8008c4c:	690f      	ldr	r7, [r1, #16]
 8008c4e:	2f00      	cmp	r7, #0
 8008c50:	d0a9      	beq.n	8008ba6 <__sflush_r+0x1a>
 8008c52:	0793      	lsls	r3, r2, #30
 8008c54:	680e      	ldr	r6, [r1, #0]
 8008c56:	bf08      	it	eq
 8008c58:	694b      	ldreq	r3, [r1, #20]
 8008c5a:	600f      	str	r7, [r1, #0]
 8008c5c:	bf18      	it	ne
 8008c5e:	2300      	movne	r3, #0
 8008c60:	eba6 0807 	sub.w	r8, r6, r7
 8008c64:	608b      	str	r3, [r1, #8]
 8008c66:	f1b8 0f00 	cmp.w	r8, #0
 8008c6a:	dd9c      	ble.n	8008ba6 <__sflush_r+0x1a>
 8008c6c:	6a21      	ldr	r1, [r4, #32]
 8008c6e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008c70:	4643      	mov	r3, r8
 8008c72:	463a      	mov	r2, r7
 8008c74:	4628      	mov	r0, r5
 8008c76:	47b0      	blx	r6
 8008c78:	2800      	cmp	r0, #0
 8008c7a:	dc06      	bgt.n	8008c8a <__sflush_r+0xfe>
 8008c7c:	89a3      	ldrh	r3, [r4, #12]
 8008c7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c82:	81a3      	strh	r3, [r4, #12]
 8008c84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008c88:	e78e      	b.n	8008ba8 <__sflush_r+0x1c>
 8008c8a:	4407      	add	r7, r0
 8008c8c:	eba8 0800 	sub.w	r8, r8, r0
 8008c90:	e7e9      	b.n	8008c66 <__sflush_r+0xda>
 8008c92:	bf00      	nop
 8008c94:	20400001 	.word	0x20400001

08008c98 <_fflush_r>:
 8008c98:	b538      	push	{r3, r4, r5, lr}
 8008c9a:	690b      	ldr	r3, [r1, #16]
 8008c9c:	4605      	mov	r5, r0
 8008c9e:	460c      	mov	r4, r1
 8008ca0:	b913      	cbnz	r3, 8008ca8 <_fflush_r+0x10>
 8008ca2:	2500      	movs	r5, #0
 8008ca4:	4628      	mov	r0, r5
 8008ca6:	bd38      	pop	{r3, r4, r5, pc}
 8008ca8:	b118      	cbz	r0, 8008cb2 <_fflush_r+0x1a>
 8008caa:	6983      	ldr	r3, [r0, #24]
 8008cac:	b90b      	cbnz	r3, 8008cb2 <_fflush_r+0x1a>
 8008cae:	f7ff fa15 	bl	80080dc <__sinit>
 8008cb2:	4b14      	ldr	r3, [pc, #80]	; (8008d04 <_fflush_r+0x6c>)
 8008cb4:	429c      	cmp	r4, r3
 8008cb6:	d11b      	bne.n	8008cf0 <_fflush_r+0x58>
 8008cb8:	686c      	ldr	r4, [r5, #4]
 8008cba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d0ef      	beq.n	8008ca2 <_fflush_r+0xa>
 8008cc2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008cc4:	07d0      	lsls	r0, r2, #31
 8008cc6:	d404      	bmi.n	8008cd2 <_fflush_r+0x3a>
 8008cc8:	0599      	lsls	r1, r3, #22
 8008cca:	d402      	bmi.n	8008cd2 <_fflush_r+0x3a>
 8008ccc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008cce:	f7ff faa3 	bl	8008218 <__retarget_lock_acquire_recursive>
 8008cd2:	4628      	mov	r0, r5
 8008cd4:	4621      	mov	r1, r4
 8008cd6:	f7ff ff59 	bl	8008b8c <__sflush_r>
 8008cda:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008cdc:	07da      	lsls	r2, r3, #31
 8008cde:	4605      	mov	r5, r0
 8008ce0:	d4e0      	bmi.n	8008ca4 <_fflush_r+0xc>
 8008ce2:	89a3      	ldrh	r3, [r4, #12]
 8008ce4:	059b      	lsls	r3, r3, #22
 8008ce6:	d4dd      	bmi.n	8008ca4 <_fflush_r+0xc>
 8008ce8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008cea:	f7ff fa96 	bl	800821a <__retarget_lock_release_recursive>
 8008cee:	e7d9      	b.n	8008ca4 <_fflush_r+0xc>
 8008cf0:	4b05      	ldr	r3, [pc, #20]	; (8008d08 <_fflush_r+0x70>)
 8008cf2:	429c      	cmp	r4, r3
 8008cf4:	d101      	bne.n	8008cfa <_fflush_r+0x62>
 8008cf6:	68ac      	ldr	r4, [r5, #8]
 8008cf8:	e7df      	b.n	8008cba <_fflush_r+0x22>
 8008cfa:	4b04      	ldr	r3, [pc, #16]	; (8008d0c <_fflush_r+0x74>)
 8008cfc:	429c      	cmp	r4, r3
 8008cfe:	bf08      	it	eq
 8008d00:	68ec      	ldreq	r4, [r5, #12]
 8008d02:	e7da      	b.n	8008cba <_fflush_r+0x22>
 8008d04:	08009138 	.word	0x08009138
 8008d08:	08009158 	.word	0x08009158
 8008d0c:	08009118 	.word	0x08009118

08008d10 <_lseek_r>:
 8008d10:	b538      	push	{r3, r4, r5, lr}
 8008d12:	4d07      	ldr	r5, [pc, #28]	; (8008d30 <_lseek_r+0x20>)
 8008d14:	4604      	mov	r4, r0
 8008d16:	4608      	mov	r0, r1
 8008d18:	4611      	mov	r1, r2
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	602a      	str	r2, [r5, #0]
 8008d1e:	461a      	mov	r2, r3
 8008d20:	f7f8 fa4d 	bl	80011be <_lseek>
 8008d24:	1c43      	adds	r3, r0, #1
 8008d26:	d102      	bne.n	8008d2e <_lseek_r+0x1e>
 8008d28:	682b      	ldr	r3, [r5, #0]
 8008d2a:	b103      	cbz	r3, 8008d2e <_lseek_r+0x1e>
 8008d2c:	6023      	str	r3, [r4, #0]
 8008d2e:	bd38      	pop	{r3, r4, r5, pc}
 8008d30:	20004bfc 	.word	0x20004bfc

08008d34 <__swhatbuf_r>:
 8008d34:	b570      	push	{r4, r5, r6, lr}
 8008d36:	460e      	mov	r6, r1
 8008d38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d3c:	2900      	cmp	r1, #0
 8008d3e:	b096      	sub	sp, #88	; 0x58
 8008d40:	4614      	mov	r4, r2
 8008d42:	461d      	mov	r5, r3
 8008d44:	da08      	bge.n	8008d58 <__swhatbuf_r+0x24>
 8008d46:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008d4a:	2200      	movs	r2, #0
 8008d4c:	602a      	str	r2, [r5, #0]
 8008d4e:	061a      	lsls	r2, r3, #24
 8008d50:	d410      	bmi.n	8008d74 <__swhatbuf_r+0x40>
 8008d52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008d56:	e00e      	b.n	8008d76 <__swhatbuf_r+0x42>
 8008d58:	466a      	mov	r2, sp
 8008d5a:	f000 f8bb 	bl	8008ed4 <_fstat_r>
 8008d5e:	2800      	cmp	r0, #0
 8008d60:	dbf1      	blt.n	8008d46 <__swhatbuf_r+0x12>
 8008d62:	9a01      	ldr	r2, [sp, #4]
 8008d64:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008d68:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008d6c:	425a      	negs	r2, r3
 8008d6e:	415a      	adcs	r2, r3
 8008d70:	602a      	str	r2, [r5, #0]
 8008d72:	e7ee      	b.n	8008d52 <__swhatbuf_r+0x1e>
 8008d74:	2340      	movs	r3, #64	; 0x40
 8008d76:	2000      	movs	r0, #0
 8008d78:	6023      	str	r3, [r4, #0]
 8008d7a:	b016      	add	sp, #88	; 0x58
 8008d7c:	bd70      	pop	{r4, r5, r6, pc}
	...

08008d80 <__smakebuf_r>:
 8008d80:	898b      	ldrh	r3, [r1, #12]
 8008d82:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008d84:	079d      	lsls	r5, r3, #30
 8008d86:	4606      	mov	r6, r0
 8008d88:	460c      	mov	r4, r1
 8008d8a:	d507      	bpl.n	8008d9c <__smakebuf_r+0x1c>
 8008d8c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008d90:	6023      	str	r3, [r4, #0]
 8008d92:	6123      	str	r3, [r4, #16]
 8008d94:	2301      	movs	r3, #1
 8008d96:	6163      	str	r3, [r4, #20]
 8008d98:	b002      	add	sp, #8
 8008d9a:	bd70      	pop	{r4, r5, r6, pc}
 8008d9c:	ab01      	add	r3, sp, #4
 8008d9e:	466a      	mov	r2, sp
 8008da0:	f7ff ffc8 	bl	8008d34 <__swhatbuf_r>
 8008da4:	9900      	ldr	r1, [sp, #0]
 8008da6:	4605      	mov	r5, r0
 8008da8:	4630      	mov	r0, r6
 8008daa:	f7ff fa57 	bl	800825c <_malloc_r>
 8008dae:	b948      	cbnz	r0, 8008dc4 <__smakebuf_r+0x44>
 8008db0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008db4:	059a      	lsls	r2, r3, #22
 8008db6:	d4ef      	bmi.n	8008d98 <__smakebuf_r+0x18>
 8008db8:	f023 0303 	bic.w	r3, r3, #3
 8008dbc:	f043 0302 	orr.w	r3, r3, #2
 8008dc0:	81a3      	strh	r3, [r4, #12]
 8008dc2:	e7e3      	b.n	8008d8c <__smakebuf_r+0xc>
 8008dc4:	4b0d      	ldr	r3, [pc, #52]	; (8008dfc <__smakebuf_r+0x7c>)
 8008dc6:	62b3      	str	r3, [r6, #40]	; 0x28
 8008dc8:	89a3      	ldrh	r3, [r4, #12]
 8008dca:	6020      	str	r0, [r4, #0]
 8008dcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008dd0:	81a3      	strh	r3, [r4, #12]
 8008dd2:	9b00      	ldr	r3, [sp, #0]
 8008dd4:	6163      	str	r3, [r4, #20]
 8008dd6:	9b01      	ldr	r3, [sp, #4]
 8008dd8:	6120      	str	r0, [r4, #16]
 8008dda:	b15b      	cbz	r3, 8008df4 <__smakebuf_r+0x74>
 8008ddc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008de0:	4630      	mov	r0, r6
 8008de2:	f000 f889 	bl	8008ef8 <_isatty_r>
 8008de6:	b128      	cbz	r0, 8008df4 <__smakebuf_r+0x74>
 8008de8:	89a3      	ldrh	r3, [r4, #12]
 8008dea:	f023 0303 	bic.w	r3, r3, #3
 8008dee:	f043 0301 	orr.w	r3, r3, #1
 8008df2:	81a3      	strh	r3, [r4, #12]
 8008df4:	89a0      	ldrh	r0, [r4, #12]
 8008df6:	4305      	orrs	r5, r0
 8008df8:	81a5      	strh	r5, [r4, #12]
 8008dfa:	e7cd      	b.n	8008d98 <__smakebuf_r+0x18>
 8008dfc:	08008075 	.word	0x08008075

08008e00 <__malloc_lock>:
 8008e00:	4801      	ldr	r0, [pc, #4]	; (8008e08 <__malloc_lock+0x8>)
 8008e02:	f7ff ba09 	b.w	8008218 <__retarget_lock_acquire_recursive>
 8008e06:	bf00      	nop
 8008e08:	20004bf0 	.word	0x20004bf0

08008e0c <__malloc_unlock>:
 8008e0c:	4801      	ldr	r0, [pc, #4]	; (8008e14 <__malloc_unlock+0x8>)
 8008e0e:	f7ff ba04 	b.w	800821a <__retarget_lock_release_recursive>
 8008e12:	bf00      	nop
 8008e14:	20004bf0 	.word	0x20004bf0

08008e18 <_free_r>:
 8008e18:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008e1a:	2900      	cmp	r1, #0
 8008e1c:	d044      	beq.n	8008ea8 <_free_r+0x90>
 8008e1e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e22:	9001      	str	r0, [sp, #4]
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	f1a1 0404 	sub.w	r4, r1, #4
 8008e2a:	bfb8      	it	lt
 8008e2c:	18e4      	addlt	r4, r4, r3
 8008e2e:	f7ff ffe7 	bl	8008e00 <__malloc_lock>
 8008e32:	4a1e      	ldr	r2, [pc, #120]	; (8008eac <_free_r+0x94>)
 8008e34:	9801      	ldr	r0, [sp, #4]
 8008e36:	6813      	ldr	r3, [r2, #0]
 8008e38:	b933      	cbnz	r3, 8008e48 <_free_r+0x30>
 8008e3a:	6063      	str	r3, [r4, #4]
 8008e3c:	6014      	str	r4, [r2, #0]
 8008e3e:	b003      	add	sp, #12
 8008e40:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008e44:	f7ff bfe2 	b.w	8008e0c <__malloc_unlock>
 8008e48:	42a3      	cmp	r3, r4
 8008e4a:	d908      	bls.n	8008e5e <_free_r+0x46>
 8008e4c:	6825      	ldr	r5, [r4, #0]
 8008e4e:	1961      	adds	r1, r4, r5
 8008e50:	428b      	cmp	r3, r1
 8008e52:	bf01      	itttt	eq
 8008e54:	6819      	ldreq	r1, [r3, #0]
 8008e56:	685b      	ldreq	r3, [r3, #4]
 8008e58:	1949      	addeq	r1, r1, r5
 8008e5a:	6021      	streq	r1, [r4, #0]
 8008e5c:	e7ed      	b.n	8008e3a <_free_r+0x22>
 8008e5e:	461a      	mov	r2, r3
 8008e60:	685b      	ldr	r3, [r3, #4]
 8008e62:	b10b      	cbz	r3, 8008e68 <_free_r+0x50>
 8008e64:	42a3      	cmp	r3, r4
 8008e66:	d9fa      	bls.n	8008e5e <_free_r+0x46>
 8008e68:	6811      	ldr	r1, [r2, #0]
 8008e6a:	1855      	adds	r5, r2, r1
 8008e6c:	42a5      	cmp	r5, r4
 8008e6e:	d10b      	bne.n	8008e88 <_free_r+0x70>
 8008e70:	6824      	ldr	r4, [r4, #0]
 8008e72:	4421      	add	r1, r4
 8008e74:	1854      	adds	r4, r2, r1
 8008e76:	42a3      	cmp	r3, r4
 8008e78:	6011      	str	r1, [r2, #0]
 8008e7a:	d1e0      	bne.n	8008e3e <_free_r+0x26>
 8008e7c:	681c      	ldr	r4, [r3, #0]
 8008e7e:	685b      	ldr	r3, [r3, #4]
 8008e80:	6053      	str	r3, [r2, #4]
 8008e82:	4421      	add	r1, r4
 8008e84:	6011      	str	r1, [r2, #0]
 8008e86:	e7da      	b.n	8008e3e <_free_r+0x26>
 8008e88:	d902      	bls.n	8008e90 <_free_r+0x78>
 8008e8a:	230c      	movs	r3, #12
 8008e8c:	6003      	str	r3, [r0, #0]
 8008e8e:	e7d6      	b.n	8008e3e <_free_r+0x26>
 8008e90:	6825      	ldr	r5, [r4, #0]
 8008e92:	1961      	adds	r1, r4, r5
 8008e94:	428b      	cmp	r3, r1
 8008e96:	bf04      	itt	eq
 8008e98:	6819      	ldreq	r1, [r3, #0]
 8008e9a:	685b      	ldreq	r3, [r3, #4]
 8008e9c:	6063      	str	r3, [r4, #4]
 8008e9e:	bf04      	itt	eq
 8008ea0:	1949      	addeq	r1, r1, r5
 8008ea2:	6021      	streq	r1, [r4, #0]
 8008ea4:	6054      	str	r4, [r2, #4]
 8008ea6:	e7ca      	b.n	8008e3e <_free_r+0x26>
 8008ea8:	b003      	add	sp, #12
 8008eaa:	bd30      	pop	{r4, r5, pc}
 8008eac:	20004bf4 	.word	0x20004bf4

08008eb0 <_read_r>:
 8008eb0:	b538      	push	{r3, r4, r5, lr}
 8008eb2:	4d07      	ldr	r5, [pc, #28]	; (8008ed0 <_read_r+0x20>)
 8008eb4:	4604      	mov	r4, r0
 8008eb6:	4608      	mov	r0, r1
 8008eb8:	4611      	mov	r1, r2
 8008eba:	2200      	movs	r2, #0
 8008ebc:	602a      	str	r2, [r5, #0]
 8008ebe:	461a      	mov	r2, r3
 8008ec0:	f7f7 ff50 	bl	8000d64 <_read>
 8008ec4:	1c43      	adds	r3, r0, #1
 8008ec6:	d102      	bne.n	8008ece <_read_r+0x1e>
 8008ec8:	682b      	ldr	r3, [r5, #0]
 8008eca:	b103      	cbz	r3, 8008ece <_read_r+0x1e>
 8008ecc:	6023      	str	r3, [r4, #0]
 8008ece:	bd38      	pop	{r3, r4, r5, pc}
 8008ed0:	20004bfc 	.word	0x20004bfc

08008ed4 <_fstat_r>:
 8008ed4:	b538      	push	{r3, r4, r5, lr}
 8008ed6:	4d07      	ldr	r5, [pc, #28]	; (8008ef4 <_fstat_r+0x20>)
 8008ed8:	2300      	movs	r3, #0
 8008eda:	4604      	mov	r4, r0
 8008edc:	4608      	mov	r0, r1
 8008ede:	4611      	mov	r1, r2
 8008ee0:	602b      	str	r3, [r5, #0]
 8008ee2:	f7f8 f951 	bl	8001188 <_fstat>
 8008ee6:	1c43      	adds	r3, r0, #1
 8008ee8:	d102      	bne.n	8008ef0 <_fstat_r+0x1c>
 8008eea:	682b      	ldr	r3, [r5, #0]
 8008eec:	b103      	cbz	r3, 8008ef0 <_fstat_r+0x1c>
 8008eee:	6023      	str	r3, [r4, #0]
 8008ef0:	bd38      	pop	{r3, r4, r5, pc}
 8008ef2:	bf00      	nop
 8008ef4:	20004bfc 	.word	0x20004bfc

08008ef8 <_isatty_r>:
 8008ef8:	b538      	push	{r3, r4, r5, lr}
 8008efa:	4d06      	ldr	r5, [pc, #24]	; (8008f14 <_isatty_r+0x1c>)
 8008efc:	2300      	movs	r3, #0
 8008efe:	4604      	mov	r4, r0
 8008f00:	4608      	mov	r0, r1
 8008f02:	602b      	str	r3, [r5, #0]
 8008f04:	f7f8 f950 	bl	80011a8 <_isatty>
 8008f08:	1c43      	adds	r3, r0, #1
 8008f0a:	d102      	bne.n	8008f12 <_isatty_r+0x1a>
 8008f0c:	682b      	ldr	r3, [r5, #0]
 8008f0e:	b103      	cbz	r3, 8008f12 <_isatty_r+0x1a>
 8008f10:	6023      	str	r3, [r4, #0]
 8008f12:	bd38      	pop	{r3, r4, r5, pc}
 8008f14:	20004bfc 	.word	0x20004bfc

08008f18 <_init>:
 8008f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f1a:	bf00      	nop
 8008f1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f1e:	bc08      	pop	{r3}
 8008f20:	469e      	mov	lr, r3
 8008f22:	4770      	bx	lr

08008f24 <_fini>:
 8008f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f26:	bf00      	nop
 8008f28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f2a:	bc08      	pop	{r3}
 8008f2c:	469e      	mov	lr, r3
 8008f2e:	4770      	bx	lr
